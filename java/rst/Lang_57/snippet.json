[
  {
    "name": "LocaleUtils.LocaleUtils#62",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.LocaleUtils()",
    "snippet": "public LocaleUtils(){\n  super();\n}",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * \u003cp\u003e\u003ccode\u003eLocaleUtils\u003c/code\u003e instances should NOT be constructed in standard programming. Instead, the class should be used as \u003ccode\u003eLocaleUtils.toLocale(\"en_GB\");\u003c/code\u003e.\u003c/p\u003e \u003cp\u003eThis constructor is public to permit tools that require a JavaBean instance to operate.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.toLocale#94",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.toLocale(java.lang.String)",
    "snippet": "public static Locale toLocale(String str){\n  if (str \u003d\u003d null) {\n    return null;\n  }\n  int len\u003dstr.length();\n  if (len !\u003d 2 \u0026\u0026 len !\u003d 5 \u0026\u0026 len \u003c 7) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  char ch0\u003dstr.charAt(0);\n  char ch1\u003dstr.charAt(1);\n  if (ch0 \u003c \u0027a\u0027 || ch0 \u003e \u0027z\u0027 || ch1 \u003c \u0027a\u0027 || ch1 \u003e \u0027z\u0027) {\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n  }\n  if (len \u003d\u003d 2) {\n    return new Locale(str,\"\");\n  }\n else {\n    if (str.charAt(2) !\u003d \u0027_\u0027) {\n      throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    char ch3\u003dstr.charAt(3);\n    char ch4\u003dstr.charAt(4);\n    if (ch3 \u003c \u0027A\u0027 || ch3 \u003e \u0027Z\u0027 || ch4 \u003c \u0027A\u0027 || ch4 \u003e \u0027Z\u0027) {\n      throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    if (len \u003d\u003d 5) {\n      return new Locale(str.substring(0,2),str.substring(3,5));\n    }\n else {\n      if (str.charAt(5) !\u003d \u0027_\u0027) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n      }\n      return new Locale(str.substring(0,2),str.substring(3,5),str.substring(6));\n    }\n  }\n}",
    "begin_line": 94,
    "end_line": 127,
    "comment": "/** \n * \u003cp\u003eConverts a String to a Locale.\u003c/p\u003e \u003cp\u003eThis method takes the string format of a locale and creates the locale object from it.\u003c/p\u003e \u003cpre\u003e LocaleUtils.toLocale(\"en\")         \u003d new Locale(\"en\", \"\") LocaleUtils.toLocale(\"en_GB\")      \u003d new Locale(\"en\", \"GB\") LocaleUtils.toLocale(\"en_GB_xxx\")  \u003d new Locale(\"en\", \"GB\", \"xxx\")   (#) \u003c/pre\u003e \u003cp\u003e(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4. In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn\u0027t. Thus, the result from getVariant() may vary depending on your JDK.\u003c/p\u003e \u003cp\u003eThis method validates the input strictly. The language code must be lowercase. The country code must be uppercase. The separator must be an underscore. The length must be correct. \u003c/p\u003e\n * @param str  the locale String to convert, null returns null\n * @return a Locale, null if null input\n * @throws IllegalArgumentException if the string is an invalid format\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.localeLookupList#142",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale)",
    "snippet": "public static List localeLookupList(Locale locale){\n  return localeLookupList(locale,locale);\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * \u003cp\u003eObtains the list of locales to search through when performing a locale search.\u003c/p\u003e \u003cpre\u003e localeLookupList(Locale(\"fr\",\"CA\",\"xxx\")) \u003d [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")] \u003c/pre\u003e\n * @param locale  the locale to start from\n * @return the unmodifiable list of Locale objects, 0 being locale, never null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.localeLookupList#164",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.localeLookupList(java.util.Locale, java.util.Locale)",
    "snippet": "public static List localeLookupList(Locale locale,Locale defaultLocale){\n  List list\u003dnew ArrayList(4);\n  if (locale !\u003d null) {\n    list.add(locale);\n    if (locale.getVariant().length() \u003e 0) {\n      list.add(new Locale(locale.getLanguage(),locale.getCountry()));\n    }\n    if (locale.getCountry().length() \u003e 0) {\n      list.add(new Locale(locale.getLanguage(),\"\"));\n    }\n    if (list.contains(defaultLocale) \u003d\u003d false) {\n      list.add(defaultLocale);\n    }\n  }\n  return Collections.unmodifiableList(list);\n}",
    "begin_line": 164,
    "end_line": 179,
    "comment": "/** \n * \u003cp\u003eObtains the list of locales to search through when performing a locale search.\u003c/p\u003e \u003cpre\u003e localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\")) \u003d [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"] \u003c/pre\u003e \u003cp\u003eThe result list begins with the most specific locale, then the next more general and so on, finishing with the default locale. The list will never contain the same locale twice.\u003c/p\u003e\n * @param locale  the locale to start from, null returns empty list\n * @param defaultLocale  the default locale to use if no other is found\n * @return the unmodifiable list of Locale objects, 0 being locale, never null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.availableLocaleList#191",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.availableLocaleList()",
    "snippet": "public static List availableLocaleList(){\n  return cAvailableLocaleList;\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * \u003cp\u003eObtains an unmodifiable list of installed locales.\u003c/p\u003e \u003cp\u003eThis method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.\u003c/p\u003e\n * @return the unmodifiable list of available locales\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.availableLocaleSet#205",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.availableLocaleSet()",
    "snippet": "public static Set availableLocaleSet(){\n  Set set\u003dcAvailableLocaleSet;\n  if (set \u003d\u003d null) {\n    set\u003dnew HashSet(availableLocaleList());\n    set\u003dCollections.unmodifiableSet(set);\n    cAvailableLocaleSet\u003dset;\n  }\n  return set;\n}",
    "begin_line": 205,
    "end_line": 213,
    "comment": "/** \n * \u003cp\u003eObtains an unmodifiable set of installed locales.\u003c/p\u003e \u003cp\u003eThis method is a wrapper around  {@link Locale#getAvailableLocales()}. It is more efficient, as the JDK method must create a new array each time it is called.\u003c/p\u003e\n * @return the unmodifiable set of available locales\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.isAvailableLocale#222",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.isAvailableLocale(java.util.Locale)",
    "snippet": "public static boolean isAvailableLocale(Locale locale){\n  return cAvailableLocaleSet.contains(locale);\n}",
    "begin_line": 222,
    "end_line": 224,
    "comment": "/** \n * \u003cp\u003eChecks if the locale specified is in the list of available locales.\u003c/p\u003e\n * @param locale the Locale object to check if it is available\n * @return true if the locale is a known locale\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.languagesByCountry#236",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.languagesByCountry(java.lang.String)",
    "snippet": "public static List languagesByCountry(String countryCode){\n  List langs\u003d(List)cLanguagesByCountry.get(countryCode);\n  if (langs \u003d\u003d null) {\n    if (countryCode !\u003d null) {\n      langs\u003dnew ArrayList();\n      List locales\u003davailableLocaleList();\n      for (int i\u003d0; i \u003c locales.size(); i++) {\n        Locale locale\u003d(Locale)locales.get(i);\n        if (countryCode.equals(locale.getCountry()) \u0026\u0026 locale.getVariant().length() \u003d\u003d 0) {\n          langs.add(locale);\n        }\n      }\n      langs\u003dCollections.unmodifiableList(langs);\n    }\n else {\n      langs\u003dCollections.EMPTY_LIST;\n    }\n    cLanguagesByCountry.put(countryCode,langs);\n  }\n  return langs;\n}",
    "begin_line": 236,
    "end_line": 256,
    "comment": "/** \n * \u003cp\u003eObtains the list of languages supported for a given country.\u003c/p\u003e \u003cp\u003eThis method takes a country code and searches to find the languages available for that country. Variant locales are removed.\u003c/p\u003e\n * @param countryCode  the 2 letter country code, null returns empty\n * @return an unmodifiable List of Locale objects, never null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LocaleUtils.countriesByLanguage#268",
    "is_bug": true,
    "src_path": "org/apache/commons/lang/LocaleUtils.java",
    "class_name": "org.apache.commons.lang.LocaleUtils",
    "signature": "org.apache.commons.lang.LocaleUtils.countriesByLanguage(java.lang.String)",
    "snippet": "public static List countriesByLanguage(String languageCode){\n  List countries\u003d(List)cCountriesByLanguage.get(languageCode);\n  if (countries \u003d\u003d null) {\n    if (languageCode !\u003d null) {\n      countries\u003dnew ArrayList();\n      List locales\u003davailableLocaleList();\n      for (int i\u003d0; i \u003c locales.size(); i++) {\n        Locale locale\u003d(Locale)locales.get(i);\n        if (languageCode.equals(locale.getLanguage()) \u0026\u0026 locale.getCountry().length() !\u003d 0 \u0026\u0026 locale.getVariant().length() \u003d\u003d 0) {\n          countries.add(locale);\n        }\n      }\n      countries\u003dCollections.unmodifiableList(countries);\n    }\n else {\n      countries\u003dCollections.EMPTY_LIST;\n    }\n    cCountriesByLanguage.put(languageCode,countries);\n  }\n  return countries;\n}",
    "begin_line": 268,
    "end_line": 289,
    "comment": "/** \n * \u003cp\u003eObtains the list of countries supported for a given language.\u003c/p\u003e \u003cp\u003eThis method takes a language code and searches to find the countries available for that language. Variant locales are removed.\u003c/p\u003e\n * @param languageCode  the 2 letter language code, null returns empty\n * @return an unmodifiable List of Locale objects, never null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]