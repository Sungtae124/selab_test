[
    [
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.main(String[] args)",
            "snippet": "public static void main(String[] args) {\nTestRunner.run(suite());\n}",
            "begin_line": 44,
            "end_line": 46,
            "comment": "    \n     * Main method.\n     * \n     * @param args  command line arguments, ignored\n     ",
            "child_ranges": [
                "(line 45,col 9)-(line 45,col 32)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.suite()",
            "snippet": "public static Test suite() {\nTestSuite suite = new TestSuite(StrBuilderTest.class);\nsuite.setName(\"StrBuilder Tests\");\nreturn suite;\n}",
            "begin_line": 53,
            "end_line": 57,
            "comment": "    \n     * Return a new test suite containing this test case.\n     * \n     * @return a new test suite containing this test case\n     ",
            "child_ranges": [
                "(line 54,col 9)-(line 54,col 62)",
                "(line 55,col 9)-(line 55,col 42)",
                "(line 56,col 9)-(line 56,col 21)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.StrBuilderTest(String name)",
            "snippet": "public StrBuilderTest(String name) {\nsuper(name);\n}",
            "begin_line": 65,
            "end_line": 67,
            "comment": "    \n     * Create a new test case with the specified name.\n     * \n     * @param name\n     *            name\n     ",
            "child_ranges": [
                "(line 66,col 9)-(line 66,col 20)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testConstructors()",
            "snippet": "public void testConstructors() {\nStrBuilder sb0 = new StrBuilder();\nassertEquals(32, sb0.capacity());\nassertEquals(0, sb0.length());\nassertEquals(0, sb0.size());\n\nStrBuilder sb1 = new StrBuilder(32);\nassertEquals(32, sb1.capacity());\nassertEquals(0, sb1.length());\nassertEquals(0, sb1.size());\n\nStrBuilder sb2 = new StrBuilder(0);\nassertEquals(32, sb2.capacity());\nassertEquals(0, sb2.length());\nassertEquals(0, sb2.size());\n\nStrBuilder sb3 = new StrBuilder(-1);\nassertEquals(32, sb3.capacity());\nassertEquals(0, sb3.length());\nassertEquals(0, sb3.size());\n\nStrBuilder sb4 = new StrBuilder(1);\nassertEquals(1, sb4.capacity());\nassertEquals(0, sb4.length());\nassertEquals(0, sb4.size());\n\nStrBuilder sb5 = new StrBuilder((String) null);\nassertEquals(32, sb5.capacity());\nassertEquals(0, sb5.length());\nassertEquals(0, sb5.size());\n\nStrBuilder sb6 = new StrBuilder(\"\");\nassertEquals(32, sb6.capacity());\nassertEquals(0, sb6.length());\nassertEquals(0, sb6.size());\n\nStrBuilder sb7 = new StrBuilder(\"foo\");\nassertEquals(35, sb7.capacity());\nassertEquals(3, sb7.length());\nassertEquals(3, sb7.size());\n}",
            "begin_line": 70,
            "end_line": 110,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 71,col 9)-(line 71,col 42)",
                "(line 72,col 9)-(line 72,col 41)",
                "(line 73,col 9)-(line 73,col 38)",
                "(line 74,col 9)-(line 74,col 36)",
                "(line 75,col 0)-(line 75,col 0)",
                "(line 76,col 9)-(line 76,col 44)",
                "(line 77,col 9)-(line 77,col 41)",
                "(line 78,col 9)-(line 78,col 38)",
                "(line 79,col 9)-(line 79,col 36)",
                "(line 80,col 0)-(line 80,col 0)",
                "(line 81,col 9)-(line 81,col 43)",
                "(line 82,col 9)-(line 82,col 41)",
                "(line 83,col 9)-(line 83,col 38)",
                "(line 84,col 9)-(line 84,col 36)",
                "(line 85,col 0)-(line 85,col 0)",
                "(line 86,col 9)-(line 86,col 44)",
                "(line 87,col 9)-(line 87,col 41)",
                "(line 88,col 9)-(line 88,col 38)",
                "(line 89,col 9)-(line 89,col 36)",
                "(line 90,col 0)-(line 90,col 0)",
                "(line 91,col 9)-(line 91,col 43)",
                "(line 92,col 9)-(line 92,col 40)",
                "(line 93,col 9)-(line 93,col 38)",
                "(line 94,col 9)-(line 94,col 36)",
                "(line 95,col 0)-(line 95,col 0)",
                "(line 96,col 9)-(line 96,col 55)",
                "(line 97,col 9)-(line 97,col 41)",
                "(line 98,col 9)-(line 98,col 38)",
                "(line 99,col 9)-(line 99,col 36)",
                "(line 100,col 0)-(line 100,col 0)",
                "(line 101,col 9)-(line 101,col 44)",
                "(line 102,col 9)-(line 102,col 41)",
                "(line 103,col 9)-(line 103,col 38)",
                "(line 104,col 9)-(line 104,col 36)",
                "(line 105,col 0)-(line 105,col 0)",
                "(line 106,col 9)-(line 106,col 47)",
                "(line 107,col 9)-(line 107,col 41)",
                "(line 108,col 9)-(line 108,col 38)",
                "(line 109,col 9)-(line 109,col 36)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testChaining()",
            "snippet": "public void testChaining() {\nStrBuilder sb = new StrBuilder();\nassertSame(sb, sb.setNewLineText(null));\nassertSame(sb, sb.setNullText(null));\nassertSame(sb, sb.setLength(1));\nassertSame(sb, sb.setCharAt(0, 'a'));\nassertSame(sb, sb.ensureCapacity(0));\nassertSame(sb, sb.minimizeCapacity());\nassertSame(sb, sb.clear());\nassertSame(sb, sb.reverse());\nassertSame(sb, sb.trim());\n}",
            "begin_line": 113,
            "end_line": 124,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 114,col 9)-(line 114,col 41)",
                "(line 115,col 9)-(line 115,col 48)",
                "(line 116,col 9)-(line 116,col 45)",
                "(line 117,col 9)-(line 117,col 40)",
                "(line 118,col 9)-(line 118,col 45)",
                "(line 119,col 9)-(line 119,col 45)",
                "(line 120,col 9)-(line 120,col 46)",
                "(line 121,col 9)-(line 121,col 35)",
                "(line 122,col 9)-(line 122,col 37)",
                "(line 123,col 9)-(line 123,col 34)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNewLineText()",
            "snippet": "public void testGetSetNewLineText() {\nStrBuilder sb = new StrBuilder();\nassertEquals(null, sb.getNewLineText());\n\nsb.setNewLineText(\"#\");\nassertEquals(\"#\", sb.getNewLineText());\n\nsb.setNewLineText(\"\");\nassertEquals(\"\", sb.getNewLineText());\n\nsb.setNewLineText((String) null);\nassertEquals(null, sb.getNewLineText());\n}",
            "begin_line": 127,
            "end_line": 139,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 128,col 9)-(line 128,col 41)",
                "(line 129,col 9)-(line 129,col 48)",
                "(line 130,col 0)-(line 130,col 0)",
                "(line 131,col 9)-(line 131,col 31)",
                "(line 132,col 9)-(line 132,col 47)",
                "(line 133,col 0)-(line 133,col 0)",
                "(line 134,col 9)-(line 134,col 30)",
                "(line 135,col 9)-(line 135,col 46)",
                "(line 136,col 0)-(line 136,col 0)",
                "(line 137,col 9)-(line 137,col 41)",
                "(line 138,col 9)-(line 138,col 48)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetSetNullText()",
            "snippet": "public void testGetSetNullText() {\nStrBuilder sb = new StrBuilder();\nassertEquals(null, sb.getNullText());\n\nsb.setNullText(\"null\");\nassertEquals(\"null\", sb.getNullText());\n\nsb.setNullText(\"\");\nassertEquals(null, sb.getNullText());\n\nsb.setNullText(\"NULL\");\nassertEquals(\"NULL\", sb.getNullText());\n\nsb.setNullText((String) null);\nassertEquals(null, sb.getNullText());\n}",
            "begin_line": 142,
            "end_line": 157,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 143,col 9)-(line 143,col 41)",
                "(line 144,col 9)-(line 144,col 45)",
                "(line 145,col 0)-(line 145,col 0)",
                "(line 146,col 9)-(line 146,col 31)",
                "(line 147,col 9)-(line 147,col 47)",
                "(line 148,col 0)-(line 148,col 0)",
                "(line 149,col 9)-(line 149,col 27)",
                "(line 150,col 9)-(line 150,col 45)",
                "(line 151,col 0)-(line 151,col 0)",
                "(line 152,col 9)-(line 152,col 31)",
                "(line 153,col 9)-(line 153,col 47)",
                "(line 154,col 0)-(line 154,col 0)",
                "(line 155,col 9)-(line 155,col 38)",
                "(line 156,col 9)-(line 156,col 45)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacityAndLength()",
            "snippet": "public void testCapacityAndLength() {\nStrBuilder sb = new StrBuilder();\nassertEquals(32, sb.capacity());\nassertEquals(0, sb.length());\nassertEquals(0, sb.size());\nassertTrue(sb.isEmpty());\n\nsb.minimizeCapacity();\nassertEquals(0, sb.capacity());\nassertEquals(0, sb.length());\nassertEquals(0, sb.size());\nassertTrue(sb.isEmpty());\n\nsb.ensureCapacity(32);\nassertTrue(sb.capacity() >= 32);\nassertEquals(0, sb.length());\nassertEquals(0, sb.size());\nassertTrue(sb.isEmpty());\n\nsb.append(\"foo\");\nassertTrue(sb.capacity() >= 32);\nassertEquals(3, sb.length());\nassertEquals(3, sb.size());\nassertTrue(sb.isEmpty() == false);\n\nsb.clear();\nassertTrue(sb.capacity() >= 32);\nassertEquals(0, sb.length());\nassertEquals(0, sb.size());\nassertTrue(sb.isEmpty());\n\nsb.append(\"123456789012345678901234567890123\");\nassertTrue(sb.capacity() > 32);\nassertEquals(33, sb.length());\nassertEquals(33, sb.size());\nassertTrue(sb.isEmpty() == false);\n\nsb.ensureCapacity(16);\nassertTrue(sb.capacity() > 16);\nassertEquals(33, sb.length());\nassertEquals(33, sb.size());\nassertTrue(sb.isEmpty() == false);\n\nsb.minimizeCapacity();\nassertEquals(33, sb.capacity());\nassertEquals(33, sb.length());\nassertEquals(33, sb.size());\nassertTrue(sb.isEmpty() == false);\n\ntry {",
            "begin_line": 160,
            "end_line": 209,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 161,col 9)-(line 161,col 41)",
                "(line 162,col 9)-(line 162,col 40)",
                "(line 163,col 9)-(line 163,col 37)",
                "(line 164,col 9)-(line 164,col 35)",
                "(line 165,col 9)-(line 165,col 33)",
                "(line 166,col 0)-(line 166,col 0)",
                "(line 167,col 9)-(line 167,col 30)",
                "(line 168,col 9)-(line 168,col 39)",
                "(line 169,col 9)-(line 169,col 37)",
                "(line 170,col 9)-(line 170,col 35)",
                "(line 171,col 9)-(line 171,col 33)",
                "(line 172,col 0)-(line 172,col 0)",
                "(line 173,col 9)-(line 173,col 30)",
                "(line 174,col 9)-(line 174,col 40)",
                "(line 175,col 9)-(line 175,col 37)",
                "(line 176,col 9)-(line 176,col 35)",
                "(line 177,col 9)-(line 177,col 33)",
                "(line 178,col 0)-(line 178,col 0)",
                "(line 179,col 9)-(line 179,col 25)",
                "(line 180,col 9)-(line 180,col 40)",
                "(line 181,col 9)-(line 181,col 37)",
                "(line 182,col 9)-(line 182,col 35)",
                "(line 183,col 9)-(line 183,col 42)",
                "(line 184,col 0)-(line 184,col 0)",
                "(line 185,col 9)-(line 185,col 19)",
                "(line 186,col 9)-(line 186,col 40)",
                "(line 187,col 9)-(line 187,col 37)",
                "(line 188,col 9)-(line 188,col 35)",
                "(line 189,col 9)-(line 189,col 33)",
                "(line 190,col 0)-(line 190,col 0)",
                "(line 191,col 9)-(line 191,col 55)",
                "(line 192,col 9)-(line 192,col 39)",
                "(line 193,col 9)-(line 193,col 38)",
                "(line 194,col 9)-(line 194,col 36)",
                "(line 195,col 9)-(line 195,col 42)",
                "(line 196,col 0)-(line 196,col 0)",
                "(line 197,col 9)-(line 197,col 30)",
                "(line 198,col 9)-(line 198,col 39)",
                "(line 199,col 9)-(line 199,col 38)",
                "(line 200,col 9)-(line 200,col 36)",
                "(line 201,col 9)-(line 201,col 42)",
                "(line 202,col 0)-(line 202,col 0)",
                "(line 203,col 9)-(line 203,col 30)",
                "(line 204,col 9)-(line 204,col 40)",
                "(line 205,col 9)-(line 205,col 38)",
                "(line 206,col 9)-(line 206,col 36)",
                "(line 207,col 9)-(line 207,col 42)",
                "(line 208,col 0)-(line 208,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLength()",
            "snippet": "public void testLength() {\nStrBuilder sb = new StrBuilder();\nassertEquals(0, sb.length());\n\nsb.append(\"Hello\");\nassertEquals(5, sb.length());\n}",
            "begin_line": 244,
            "end_line": 250,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 245,col 9)-(line 245,col 41)",
                "(line 246,col 9)-(line 246,col 37)",
                "(line 247,col 0)-(line 247,col 8)",
                "(line 248,col 9)-(line 248,col 27)",
                "(line 249,col 9)-(line 249,col 37)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetLength()",
            "snippet": "public void testSetLength() {\nStrBuilder sb = new StrBuilder();\nsb.append(\"Hello\");\nsb.setLength(2);  // shorten",
            "begin_line": 252,
            "end_line": 255,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 253,col 9)-(line 253,col 41)",
                "(line 254,col 9)-(line 254,col 27)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testCapacity()",
            "snippet": "public void testCapacity() {\nStrBuilder sb = new StrBuilder();\nassertEquals(sb.buffer.length, sb.capacity());\n\nsb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\nassertEquals(sb.buffer.length, sb.capacity());\n}",
            "begin_line": 271,
            "end_line": 277,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 272,col 9)-(line 272,col 41)",
                "(line 273,col 9)-(line 273,col 54)",
                "(line 274,col 0)-(line 274,col 8)",
                "(line 275,col 9)-(line 275,col 62)",
                "(line 276,col 9)-(line 276,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testEnsureCapacity()",
            "snippet": "public void testEnsureCapacity() {\nStrBuilder sb = new StrBuilder();\nsb.ensureCapacity(2);\nassertEquals(true, sb.capacity() >= 2);\n\nsb.ensureCapacity(-1);\nassertEquals(true, sb.capacity() >= 0);\n\nsb.append(\"HelloWorld\");\nsb.ensureCapacity(40);\nassertEquals(true, sb.capacity() >= 40);\n}",
            "begin_line": 279,
            "end_line": 290,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 280,col 9)-(line 280,col 41)",
                "(line 281,col 9)-(line 281,col 29)",
                "(line 282,col 9)-(line 282,col 47)",
                "(line 283,col 0)-(line 283,col 8)",
                "(line 284,col 9)-(line 284,col 30)",
                "(line 285,col 9)-(line 285,col 47)",
                "(line 286,col 0)-(line 286,col 8)",
                "(line 287,col 9)-(line 287,col 32)",
                "(line 288,col 9)-(line 288,col 30)",
                "(line 289,col 9)-(line 289,col 48)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testMinimizeCapacity()",
            "snippet": "public void testMinimizeCapacity() {\nStrBuilder sb = new StrBuilder();\nsb.minimizeCapacity();\nassertEquals(0, sb.capacity());\n\nsb.append(\"HelloWorld\");\nsb.minimizeCapacity();\nassertEquals(10, sb.capacity());\n}",
            "begin_line": 292,
            "end_line": 300,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 293,col 9)-(line 293,col 41)",
                "(line 294,col 9)-(line 294,col 30)",
                "(line 295,col 9)-(line 295,col 39)",
                "(line 296,col 0)-(line 296,col 8)",
                "(line 297,col 9)-(line 297,col 32)",
                "(line 298,col 9)-(line 298,col 30)",
                "(line 299,col 9)-(line 299,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testSize()",
            "snippet": "public void testSize() {\nStrBuilder sb = new StrBuilder();\nassertEquals(0, sb.size());\n\nsb.append(\"Hello\");\nassertEquals(5, sb.size());\n}",
            "begin_line": 303,
            "end_line": 309,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 304,col 9)-(line 304,col 41)",
                "(line 305,col 9)-(line 305,col 35)",
                "(line 306,col 0)-(line 306,col 8)",
                "(line 307,col 9)-(line 307,col 27)",
                "(line 308,col 9)-(line 308,col 35)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIsEmpty()",
            "snippet": "public void testIsEmpty() {\nStrBuilder sb = new StrBuilder();\nassertEquals(true, sb.isEmpty());\n\nsb.append(\"Hello\");\nassertEquals(false, sb.isEmpty());\n\nsb.clear();\nassertEquals(true, sb.isEmpty());\n}",
            "begin_line": 311,
            "end_line": 320,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 312,col 9)-(line 312,col 41)",
                "(line 313,col 9)-(line 313,col 41)",
                "(line 314,col 0)-(line 314,col 8)",
                "(line 315,col 9)-(line 315,col 27)",
                "(line 316,col 9)-(line 316,col 42)",
                "(line 317,col 0)-(line 317,col 8)",
                "(line 318,col 9)-(line 318,col 19)",
                "(line 319,col 9)-(line 319,col 41)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testClear()",
            "snippet": "public void testClear() {\nStrBuilder sb = new StrBuilder();\nsb.append(\"Hello\");\nsb.clear();\nassertEquals(0, sb.length());\nassertEquals(true, sb.buffer.length >= 5);\n}",
            "begin_line": 322,
            "end_line": 328,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 323,col 9)-(line 323,col 41)",
                "(line 324,col 9)-(line 324,col 27)",
                "(line 325,col 9)-(line 325,col 19)",
                "(line 326,col 9)-(line 326,col 37)",
                "(line 327,col 9)-(line 327,col 50)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testCharAt()",
            "snippet": "public void testCharAt() {\nStrBuilder sb = new StrBuilder();\ntry {",
            "begin_line": 331,
            "end_line": 333,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 332,col 9)-(line 332,col 41)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testSetCharAt()",
            "snippet": "public void testSetCharAt() {\nStrBuilder sb = new StrBuilder();\ntry {",
            "begin_line": 364,
            "end_line": 366,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 365,col 9)-(line 365,col 41)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteCharAt()",
            "snippet": "public void testDeleteCharAt() {\nStrBuilder sb = new StrBuilder(\"abc\");\nsb.deleteCharAt(0);\nassertEquals(\"bc\", sb.toString());\n\ntry {",
            "begin_line": 392,
            "end_line": 397,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 393,col 9)-(line 393,col 46)",
                "(line 394,col 9)-(line 394,col 27)",
                "(line 395,col 9)-(line 395,col 43)",
                "(line 396,col 0)-(line 396,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArray()",
            "snippet": "public void testToCharArray() {\nStrBuilder sb = new StrBuilder();\nassertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n\nchar[] a = sb.toCharArray();\nassertNotNull(\"toCharArray() result is null\", a);\nassertEquals(\"toCharArray() result is too large\", 0, a.length);\n\nsb.append(\"junit\");\na = sb.toCharArray();\nassertEquals(\"toCharArray() result incorrect length\", 5, a.length);\nassertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n}",
            "begin_line": 404,
            "end_line": 416,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 405,col 9)-(line 405,col 41)",
                "(line 406,col 9)-(line 406,col 68)",
                "(line 407,col 0)-(line 407,col 0)",
                "(line 408,col 9)-(line 408,col 36)",
                "(line 409,col 9)-(line 409,col 57)",
                "(line 410,col 9)-(line 410,col 71)",
                "(line 411,col 0)-(line 411,col 0)",
                "(line 412,col 9)-(line 412,col 27)",
                "(line 413,col 9)-(line 413,col 29)",
                "(line 414,col 9)-(line 414,col 75)",
                "(line 415,col 9)-(line 415,col 99)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testToCharArrayIntInt()",
            "snippet": "public void testToCharArrayIntInt() {\nStrBuilder sb = new StrBuilder();\nassertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n\nsb.append(\"junit\");\nchar[] a = sb.toCharArray(0, 20); // too large test",
            "begin_line": 418,
            "end_line": 423,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 419,col 9)-(line 419,col 41)",
                "(line 420,col 9)-(line 420,col 72)",
                "(line 421,col 0)-(line 421,col 0)",
                "(line 422,col 9)-(line 422,col 27)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetChars()",
            "snippet": "public void testGetChars ( ) {\nStrBuilder sb = new StrBuilder();\n\nchar[] input = new char[10];\nchar[] a = sb.getChars(input);\nassertSame (input, a);\nassertTrue(Arrays.equals(new char[10], a));\n\nsb.append(\"junit\");\na = sb.getChars(input);\nassertSame(input, a);\nassertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n\na = sb.getChars(null);\nassertNotSame(input,a);\nassertEquals(5,a.length);\nassertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n\ninput = new char[5];\na = sb.getChars(input);\nassertSame(input, a);\n\ninput = new char[4];\na = sb.getChars(input);\nassertNotSame(input, a);\n}",
            "begin_line": 451,
            "end_line": 476,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 452,col 9)-(line 452,col 41)",
                "(line 453,col 0)-(line 453,col 8)",
                "(line 454,col 9)-(line 454,col 36)",
                "(line 455,col 9)-(line 455,col 38)",
                "(line 456,col 9)-(line 456,col 30)",
                "(line 457,col 9)-(line 457,col 51)",
                "(line 458,col 0)-(line 458,col 8)",
                "(line 459,col 9)-(line 459,col 27)",
                "(line 460,col 9)-(line 460,col 31)",
                "(line 461,col 9)-(line 461,col 29)",
                "(line 462,col 9)-(line 462,col 80)",
                "(line 463,col 0)-(line 463,col 8)",
                "(line 464,col 9)-(line 464,col 30)",
                "(line 465,col 9)-(line 465,col 31)",
                "(line 466,col 9)-(line 466,col 33)",
                "(line 467,col 9)-(line 467,col 59)",
                "(line 468,col 0)-(line 468,col 8)",
                "(line 469,col 9)-(line 469,col 28)",
                "(line 470,col 9)-(line 470,col 31)",
                "(line 471,col 9)-(line 471,col 29)",
                "(line 472,col 0)-(line 472,col 8)",
                "(line 473,col 9)-(line 473,col 28)",
                "(line 474,col 9)-(line 474,col 31)",
                "(line 475,col 9)-(line 475,col 32)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testGetCharsIntIntCharArrayInt()",
            "snippet": "public void testGetCharsIntIntCharArrayInt( ) {\nStrBuilder sb = new StrBuilder();\n\nsb.append(\"junit\");\nchar[] a = new char[5];\nsb.getChars(0,5,a,0);\nassertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n\na = new char[5];\nsb.getChars(0,2,a,3);\nassertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n\ntry {",
            "begin_line": 478,
            "end_line": 490,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 479,col 9)-(line 479,col 41)",
                "(line 480,col 0)-(line 480,col 15)",
                "(line 481,col 9)-(line 481,col 27)",
                "(line 482,col 9)-(line 482,col 31)",
                "(line 483,col 9)-(line 483,col 29)",
                "(line 484,col 9)-(line 484,col 70)",
                "(line 485,col 0)-(line 485,col 8)",
                "(line 486,col 9)-(line 486,col 24)",
                "(line 487,col 9)-(line 487,col 29)",
                "(line 488,col 9)-(line 488,col 64)",
                "(line 489,col 0)-(line 489,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteIntInt()",
            "snippet": "public void testDeleteIntInt() {\nStrBuilder sb = new StrBuilder(\"abc\");\nsb.delete(0, 1);\nassertEquals(\"bc\", sb.toString());\nsb.delete(1, 2);\nassertEquals(\"b\", sb.toString());\nsb.delete(0, 1);\nassertEquals(\"\", sb.toString());\nsb.delete(0, 1000);\nassertEquals(\"\", sb.toString());\n\ntry {",
            "begin_line": 520,
            "end_line": 531,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 521,col 9)-(line 521,col 46)",
                "(line 522,col 9)-(line 522,col 24)",
                "(line 523,col 9)-(line 523,col 43)",
                "(line 524,col 9)-(line 524,col 24)",
                "(line 525,col 9)-(line 525,col 41)",
                "(line 526,col 9)-(line 526,col 24)",
                "(line 527,col 9)-(line 527,col 41)",
                "(line 528,col 9)-(line 528,col 27)",
                "(line 529,col 9)-(line 529,col 41)",
                "(line 530,col 0)-(line 530,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_char()",
            "snippet": "public void testDeleteAll_char() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.deleteAll('X');\nassertEquals(\"abcbccba\", sb.toString());\nsb.deleteAll('a');\nassertEquals(\"bcbccb\", sb.toString());\nsb.deleteAll('c');\nassertEquals(\"bbb\", sb.toString());\nsb.deleteAll('b');\nassertEquals(\"\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteAll('b');\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 548,
            "end_line": 562,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 549,col 9)-(line 549,col 51)",
                "(line 550,col 9)-(line 550,col 26)",
                "(line 551,col 9)-(line 551,col 48)",
                "(line 552,col 9)-(line 552,col 26)",
                "(line 553,col 9)-(line 553,col 46)",
                "(line 554,col 9)-(line 554,col 26)",
                "(line 555,col 9)-(line 555,col 43)",
                "(line 556,col 9)-(line 556,col 26)",
                "(line 557,col 9)-(line 557,col 40)",
                "(line 558,col 0)-(line 558,col 0)",
                "(line 559,col 9)-(line 559,col 32)",
                "(line 560,col 9)-(line 560,col 26)",
                "(line 561,col 9)-(line 561,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_char()",
            "snippet": "public void testDeleteFirst_char() {\nStrBuilder sb = new StrBuilder(\"abcba\");\nsb.deleteFirst('X');\nassertEquals(\"abcba\", sb.toString());\nsb.deleteFirst('a');\nassertEquals(\"bcba\", sb.toString());\nsb.deleteFirst('c');\nassertEquals(\"bba\", sb.toString());\nsb.deleteFirst('b');\nassertEquals(\"ba\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteFirst('b');\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 564,
            "end_line": 578,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 565,col 9)-(line 565,col 48)",
                "(line 566,col 9)-(line 566,col 28)",
                "(line 567,col 9)-(line 567,col 45)",
                "(line 568,col 9)-(line 568,col 28)",
                "(line 569,col 9)-(line 569,col 44)",
                "(line 570,col 9)-(line 570,col 28)",
                "(line 571,col 9)-(line 571,col 43)",
                "(line 572,col 9)-(line 572,col 28)",
                "(line 573,col 9)-(line 573,col 42)",
                "(line 574,col 0)-(line 574,col 0)",
                "(line 575,col 9)-(line 575,col 32)",
                "(line 576,col 9)-(line 576,col 28)",
                "(line 577,col 9)-(line 577,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_String()",
            "snippet": "public void testDeleteAll_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.deleteAll((String) null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.deleteAll(\"\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.deleteAll(\"X\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.deleteAll(\"a\");\nassertEquals(\"bcbccb\", sb.toString());\nsb.deleteAll(\"c\");\nassertEquals(\"bbb\", sb.toString());\nsb.deleteAll(\"b\");\nassertEquals(\"\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.deleteAll(\"bc\");\nassertEquals(\"acba\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteAll(\"bc\");\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 581,
            "end_line": 604,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 582,col 9)-(line 582,col 51)",
                "(line 583,col 9)-(line 583,col 36)",
                "(line 584,col 9)-(line 584,col 48)",
                "(line 585,col 9)-(line 585,col 25)",
                "(line 586,col 9)-(line 586,col 48)",
                "(line 587,col 0)-(line 587,col 8)",
                "(line 588,col 9)-(line 588,col 26)",
                "(line 589,col 9)-(line 589,col 48)",
                "(line 590,col 9)-(line 590,col 26)",
                "(line 591,col 9)-(line 591,col 46)",
                "(line 592,col 9)-(line 592,col 26)",
                "(line 593,col 9)-(line 593,col 43)",
                "(line 594,col 9)-(line 594,col 26)",
                "(line 595,col 9)-(line 595,col 40)",
                "(line 596,col 0)-(line 596,col 0)",
                "(line 597,col 9)-(line 597,col 40)",
                "(line 598,col 9)-(line 598,col 27)",
                "(line 599,col 9)-(line 599,col 44)",
                "(line 600,col 0)-(line 600,col 0)",
                "(line 601,col 9)-(line 601,col 32)",
                "(line 602,col 9)-(line 602,col 27)",
                "(line 603,col 9)-(line 603,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_String()",
            "snippet": "public void testDeleteFirst_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.deleteFirst((String) null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.deleteFirst(\"\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.deleteFirst(\"X\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.deleteFirst(\"a\");\nassertEquals(\"bcbccba\", sb.toString());\nsb.deleteFirst(\"c\");\nassertEquals(\"bbccba\", sb.toString());\nsb.deleteFirst(\"b\");\nassertEquals(\"bccba\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.deleteFirst(\"bc\");\nassertEquals(\"abccba\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteFirst(\"bc\");\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 606,
            "end_line": 629,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 607,col 9)-(line 607,col 51)",
                "(line 608,col 9)-(line 608,col 38)",
                "(line 609,col 9)-(line 609,col 48)",
                "(line 610,col 9)-(line 610,col 27)",
                "(line 611,col 9)-(line 611,col 48)",
                "(line 612,col 0)-(line 612,col 0)",
                "(line 613,col 9)-(line 613,col 28)",
                "(line 614,col 9)-(line 614,col 48)",
                "(line 615,col 9)-(line 615,col 28)",
                "(line 616,col 9)-(line 616,col 47)",
                "(line 617,col 9)-(line 617,col 28)",
                "(line 618,col 9)-(line 618,col 46)",
                "(line 619,col 9)-(line 619,col 28)",
                "(line 620,col 9)-(line 620,col 45)",
                "(line 621,col 0)-(line 621,col 0)",
                "(line 622,col 9)-(line 622,col 40)",
                "(line 623,col 9)-(line 623,col 29)",
                "(line 624,col 9)-(line 624,col 46)",
                "(line 625,col 0)-(line 625,col 0)",
                "(line 626,col 9)-(line 626,col 32)",
                "(line 627,col 9)-(line 627,col 29)",
                "(line 628,col 9)-(line 628,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteAll_StrMatcher()",
            "snippet": "public void testDeleteAll_StrMatcher() {\nStrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\nsb.deleteAll((StrMatcher) null);\nassertEquals(\"A0xA1A2yA3\", sb.toString());\nsb.deleteAll(A_NUMBER_MATCHER);\nassertEquals(\"xy\", sb.toString());\n\nsb = new StrBuilder(\"Ax1\");\nsb.deleteAll(A_NUMBER_MATCHER);\nassertEquals(\"Ax1\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteAll(A_NUMBER_MATCHER);\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 632,
            "end_line": 646,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 633,col 9)-(line 633,col 53)",
                "(line 634,col 9)-(line 634,col 40)",
                "(line 635,col 9)-(line 635,col 50)",
                "(line 636,col 9)-(line 636,col 39)",
                "(line 637,col 9)-(line 637,col 42)",
                "(line 638,col 0)-(line 638,col 0)",
                "(line 639,col 9)-(line 639,col 35)",
                "(line 640,col 9)-(line 640,col 39)",
                "(line 641,col 9)-(line 641,col 43)",
                "(line 642,col 0)-(line 642,col 0)",
                "(line 643,col 9)-(line 643,col 32)",
                "(line 644,col 9)-(line 644,col 39)",
                "(line 645,col 9)-(line 645,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testDeleteFirst_StrMatcher()",
            "snippet": "public void testDeleteFirst_StrMatcher() {\nStrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\nsb.deleteFirst((StrMatcher) null);\nassertEquals(\"A0xA1A2yA3\", sb.toString());\nsb.deleteFirst(A_NUMBER_MATCHER);\nassertEquals(\"xA1A2yA3\", sb.toString());\n\nsb = new StrBuilder(\"Ax1\");\nsb.deleteFirst(A_NUMBER_MATCHER);\nassertEquals(\"Ax1\", sb.toString());\n\nsb = new StrBuilder(\"\");\nsb.deleteFirst(A_NUMBER_MATCHER);\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 648,
            "end_line": 662,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 649,col 9)-(line 649,col 53)",
                "(line 650,col 9)-(line 650,col 42)",
                "(line 651,col 9)-(line 651,col 50)",
                "(line 652,col 9)-(line 652,col 41)",
                "(line 653,col 9)-(line 653,col 48)",
                "(line 654,col 0)-(line 654,col 0)",
                "(line 655,col 9)-(line 655,col 35)",
                "(line 656,col 9)-(line 656,col 41)",
                "(line 657,col 9)-(line 657,col 43)",
                "(line 658,col 0)-(line 658,col 0)",
                "(line 659,col 9)-(line 659,col 32)",
                "(line 660,col 9)-(line 660,col 41)",
                "(line 661,col 9)-(line 661,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_int_int_String()",
            "snippet": "public void testReplace_int_int_String() {\nStrBuilder sb = new StrBuilder(\"abc\");\nsb.replace(0, 1, \"d\");\nassertEquals(\"dbc\", sb.toString());\nsb.replace(0, 1, \"aaa\");\nassertEquals(\"aaabc\", sb.toString());\nsb.replace(0, 3, \"\");\nassertEquals(\"bc\", sb.toString());\nsb.replace(1, 2, (String) null);\nassertEquals(\"b\", sb.toString());\nsb.replace(1, 1000, \"text\");\nassertEquals(\"btext\", sb.toString());\nsb.replace(0, 1000, \"text\");\nassertEquals(\"text\", sb.toString());\n\nsb = new StrBuilder(\"atext\");\nsb.replace(1, 1, \"ny\");\nassertEquals(\"anytext\", sb.toString());\ntry {",
            "begin_line": 665,
            "end_line": 683,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 666,col 9)-(line 666,col 46)",
                "(line 667,col 9)-(line 667,col 30)",
                "(line 668,col 9)-(line 668,col 43)",
                "(line 669,col 9)-(line 669,col 32)",
                "(line 670,col 9)-(line 670,col 45)",
                "(line 671,col 9)-(line 671,col 29)",
                "(line 672,col 9)-(line 672,col 42)",
                "(line 673,col 9)-(line 673,col 40)",
                "(line 674,col 9)-(line 674,col 41)",
                "(line 675,col 9)-(line 675,col 36)",
                "(line 676,col 9)-(line 676,col 45)",
                "(line 677,col 9)-(line 677,col 36)",
                "(line 678,col 9)-(line 678,col 44)",
                "(line 679,col 0)-(line 679,col 8)",
                "(line 680,col 9)-(line 680,col 37)",
                "(line 681,col 9)-(line 681,col 31)",
                "(line 682,col 9)-(line 682,col 47)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_char_char()",
            "snippet": "public void testReplaceAll_char_char() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceAll('x', 'y');\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll('a', 'd');\nassertEquals(\"dbcbccbd\", sb.toString());\nsb.replaceAll('b', 'e');\nassertEquals(\"dececced\", sb.toString());\nsb.replaceAll('c', 'f');\nassertEquals(\"defeffed\", sb.toString());\nsb.replaceAll('d', 'd');\nassertEquals(\"defeffed\", sb.toString());\n}",
            "begin_line": 700,
            "end_line": 712,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 701,col 9)-(line 701,col 51)",
                "(line 702,col 9)-(line 702,col 32)",
                "(line 703,col 9)-(line 703,col 48)",
                "(line 704,col 9)-(line 704,col 32)",
                "(line 705,col 9)-(line 705,col 48)",
                "(line 706,col 9)-(line 706,col 32)",
                "(line 707,col 9)-(line 707,col 48)",
                "(line 708,col 9)-(line 708,col 32)",
                "(line 709,col 9)-(line 709,col 48)",
                "(line 710,col 9)-(line 710,col 32)",
                "(line 711,col 9)-(line 711,col 48)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_char_char()",
            "snippet": "public void testReplaceFirst_char_char() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceFirst('x', 'y');\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst('a', 'd');\nassertEquals(\"dbcbccba\", sb.toString());\nsb.replaceFirst('b', 'e');\nassertEquals(\"decbccba\", sb.toString());\nsb.replaceFirst('c', 'f');\nassertEquals(\"defbccba\", sb.toString());\nsb.replaceFirst('d', 'd');\nassertEquals(\"defbccba\", sb.toString());\n}",
            "begin_line": 715,
            "end_line": 727,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 716,col 9)-(line 716,col 51)",
                "(line 717,col 9)-(line 717,col 34)",
                "(line 718,col 9)-(line 718,col 48)",
                "(line 719,col 9)-(line 719,col 34)",
                "(line 720,col 9)-(line 720,col 48)",
                "(line 721,col 9)-(line 721,col 34)",
                "(line 722,col 9)-(line 722,col 48)",
                "(line 723,col 9)-(line 723,col 34)",
                "(line 724,col 9)-(line 724,col 48)",
                "(line 725,col 9)-(line 725,col 34)",
                "(line 726,col 9)-(line 726,col 48)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_String_String()",
            "snippet": "public void testReplaceAll_String_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceAll((String) null, null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll((String) null, \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(\"\", null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(\"\", \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.replaceAll(\"x\", \"y\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(\"a\", \"d\");\nassertEquals(\"dbcbccbd\", sb.toString());\nsb.replaceAll(\"d\", null);\nassertEquals(\"bcbccb\", sb.toString());\nsb.replaceAll(\"cb\", \"-\");\nassertEquals(\"b-c-\", sb.toString());\n\nsb = new StrBuilder(\"abcba\");\nsb.replaceAll(\"b\", \"xbx\");\nassertEquals(\"axbxcxbxa\", sb.toString());\n\nsb = new StrBuilder(\"bb\");\nsb.replaceAll(\"b\", \"xbx\");\nassertEquals(\"xbxxbx\", sb.toString());\n}",
            "begin_line": 730,
            "end_line": 757,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 731,col 9)-(line 731,col 51)",
                "(line 732,col 9)-(line 732,col 43)",
                "(line 733,col 9)-(line 733,col 48)",
                "(line 734,col 9)-(line 734,col 49)",
                "(line 735,col 9)-(line 735,col 48)",
                "(line 736,col 9)-(line 736,col 32)",
                "(line 737,col 9)-(line 737,col 48)",
                "(line 738,col 9)-(line 738,col 38)",
                "(line 739,col 9)-(line 739,col 48)",
                "(line 740,col 0)-(line 740,col 8)",
                "(line 741,col 9)-(line 741,col 32)",
                "(line 742,col 9)-(line 742,col 48)",
                "(line 743,col 9)-(line 743,col 32)",
                "(line 744,col 9)-(line 744,col 48)",
                "(line 745,col 9)-(line 745,col 33)",
                "(line 746,col 9)-(line 746,col 46)",
                "(line 747,col 9)-(line 747,col 33)",
                "(line 748,col 9)-(line 748,col 44)",
                "(line 749,col 0)-(line 749,col 8)",
                "(line 750,col 9)-(line 750,col 37)",
                "(line 751,col 9)-(line 751,col 34)",
                "(line 752,col 9)-(line 752,col 49)",
                "(line 753,col 0)-(line 753,col 8)",
                "(line 754,col 9)-(line 754,col 34)",
                "(line 755,col 9)-(line 755,col 34)",
                "(line 756,col 9)-(line 756,col 46)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_String_String()",
            "snippet": "public void testReplaceFirst_String_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceFirst((String) null, null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst((String) null, \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(\"\", null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(\"\", \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.replaceFirst(\"x\", \"y\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(\"a\", \"d\");\nassertEquals(\"dbcbccba\", sb.toString());\nsb.replaceFirst(\"d\", null);\nassertEquals(\"bcbccba\", sb.toString());\nsb.replaceFirst(\"cb\", \"-\");\nassertEquals(\"b-ccba\", sb.toString());\n\nsb = new StrBuilder(\"abcba\");\nsb.replaceFirst(\"b\", \"xbx\");\nassertEquals(\"axbxcba\", sb.toString());\n\nsb = new StrBuilder(\"bb\");\nsb.replaceFirst(\"b\", \"xbx\");\nassertEquals(\"xbxb\", sb.toString());\n}",
            "begin_line": 759,
            "end_line": 786,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 760,col 9)-(line 760,col 51)",
                "(line 761,col 9)-(line 761,col 45)",
                "(line 762,col 9)-(line 762,col 48)",
                "(line 763,col 9)-(line 763,col 51)",
                "(line 764,col 9)-(line 764,col 48)",
                "(line 765,col 9)-(line 765,col 34)",
                "(line 766,col 9)-(line 766,col 48)",
                "(line 767,col 9)-(line 767,col 40)",
                "(line 768,col 9)-(line 768,col 48)",
                "(line 769,col 0)-(line 769,col 8)",
                "(line 770,col 9)-(line 770,col 34)",
                "(line 771,col 9)-(line 771,col 48)",
                "(line 772,col 9)-(line 772,col 34)",
                "(line 773,col 9)-(line 773,col 48)",
                "(line 774,col 9)-(line 774,col 35)",
                "(line 775,col 9)-(line 775,col 47)",
                "(line 776,col 9)-(line 776,col 35)",
                "(line 777,col 9)-(line 777,col 46)",
                "(line 778,col 0)-(line 778,col 8)",
                "(line 779,col 9)-(line 779,col 37)",
                "(line 780,col 9)-(line 780,col 36)",
                "(line 781,col 9)-(line 781,col 47)",
                "(line 782,col 0)-(line 782,col 8)",
                "(line 783,col 9)-(line 783,col 34)",
                "(line 784,col 9)-(line 784,col 36)",
                "(line 785,col 9)-(line 785,col 44)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceAll_StrMatcher_String()",
            "snippet": "public void testReplaceAll_StrMatcher_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceAll((StrMatcher) null, null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll((StrMatcher) null, \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(StrMatcher.noneMatcher(), null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\nassertEquals(\"dbcbccbd\", sb.toString());\nsb.replaceAll(StrMatcher.charMatcher('d'), null);\nassertEquals(\"bcbccb\", sb.toString());\nsb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\nassertEquals(\"b-c-\", sb.toString());\n\nsb = new StrBuilder(\"abcba\");\nsb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\nassertEquals(\"axbxcxbxa\", sb.toString());\n\nsb = new StrBuilder(\"bb\");\nsb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\nassertEquals(\"xbxxbx\", sb.toString());\n\nsb = new StrBuilder(\"A1-A2A3-A4\");\nsb.replaceAll(A_NUMBER_MATCHER, \"***\");\nassertEquals(\"***-******-***\", sb.toString());\n}",
            "begin_line": 789,
            "end_line": 820,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 790,col 9)-(line 790,col 51)",
                "(line 791,col 9)-(line 791,col 47)",
                "(line 792,col 9)-(line 792,col 48)",
                "(line 793,col 9)-(line 793,col 53)",
                "(line 794,col 9)-(line 794,col 48)",
                "(line 795,col 9)-(line 795,col 54)",
                "(line 796,col 9)-(line 796,col 48)",
                "(line 797,col 9)-(line 797,col 60)",
                "(line 798,col 9)-(line 798,col 48)",
                "(line 799,col 0)-(line 799,col 8)",
                "(line 800,col 9)-(line 800,col 56)",
                "(line 801,col 9)-(line 801,col 48)",
                "(line 802,col 9)-(line 802,col 56)",
                "(line 803,col 9)-(line 803,col 48)",
                "(line 804,col 9)-(line 804,col 57)",
                "(line 805,col 9)-(line 805,col 46)",
                "(line 806,col 9)-(line 806,col 59)",
                "(line 807,col 9)-(line 807,col 44)",
                "(line 808,col 0)-(line 808,col 8)",
                "(line 809,col 9)-(line 809,col 37)",
                "(line 810,col 9)-(line 810,col 58)",
                "(line 811,col 9)-(line 811,col 49)",
                "(line 812,col 0)-(line 812,col 8)",
                "(line 813,col 9)-(line 813,col 34)",
                "(line 814,col 9)-(line 814,col 58)",
                "(line 815,col 9)-(line 815,col 46)",
                "(line 816,col 0)-(line 816,col 8)",
                "(line 817,col 9)-(line 817,col 42)",
                "(line 818,col 9)-(line 818,col 47)",
                "(line 819,col 9)-(line 819,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplaceFirst_StrMatcher_String()",
            "snippet": "public void testReplaceFirst_StrMatcher_String() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replaceFirst((StrMatcher) null, null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst((StrMatcher) null, \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(StrMatcher.noneMatcher(), null);\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\nassertEquals(\"abcbccba\", sb.toString());\nsb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\nassertEquals(\"dbcbccba\", sb.toString());\nsb.replaceFirst(StrMatcher.charMatcher('d'), null);\nassertEquals(\"bcbccba\", sb.toString());\nsb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\nassertEquals(\"b-ccba\", sb.toString());\n\nsb = new StrBuilder(\"abcba\");\nsb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\nassertEquals(\"axbxcba\", sb.toString());\n\nsb = new StrBuilder(\"bb\");\nsb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\nassertEquals(\"xbxb\", sb.toString());\n\nsb = new StrBuilder(\"A1-A2A3-A4\");\nsb.replaceFirst(A_NUMBER_MATCHER, \"***\");\nassertEquals(\"***-A2A3-A4\", sb.toString());\n}",
            "begin_line": 822,
            "end_line": 853,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 823,col 9)-(line 823,col 51)",
                "(line 824,col 9)-(line 824,col 49)",
                "(line 825,col 9)-(line 825,col 48)",
                "(line 826,col 9)-(line 826,col 55)",
                "(line 827,col 9)-(line 827,col 48)",
                "(line 828,col 9)-(line 828,col 56)",
                "(line 829,col 9)-(line 829,col 48)",
                "(line 830,col 9)-(line 830,col 62)",
                "(line 831,col 9)-(line 831,col 48)",
                "(line 832,col 0)-(line 832,col 8)",
                "(line 833,col 9)-(line 833,col 58)",
                "(line 834,col 9)-(line 834,col 48)",
                "(line 835,col 9)-(line 835,col 58)",
                "(line 836,col 9)-(line 836,col 48)",
                "(line 837,col 9)-(line 837,col 59)",
                "(line 838,col 9)-(line 838,col 47)",
                "(line 839,col 9)-(line 839,col 61)",
                "(line 840,col 9)-(line 840,col 46)",
                "(line 841,col 0)-(line 841,col 8)",
                "(line 842,col 9)-(line 842,col 37)",
                "(line 843,col 9)-(line 843,col 60)",
                "(line 844,col 9)-(line 844,col 47)",
                "(line 845,col 0)-(line 845,col 8)",
                "(line 846,col 9)-(line 846,col 34)",
                "(line 847,col 9)-(line 847,col 60)",
                "(line 848,col 9)-(line 848,col 44)",
                "(line 849,col 0)-(line 849,col 8)",
                "(line 850,col 9)-(line 850,col 42)",
                "(line 851,col 9)-(line 851,col 49)",
                "(line 852,col 9)-(line 852,col 51)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher()",
            "snippet": "public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\nassertEquals(\"abcbccba\", sb.toString());\n\nsb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\nassertEquals(\"xbcbccbx\", sb.toString());\n\nsb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\nassertEquals(\"xbxcxx\", sb.toString());\n\nsb = new StrBuilder(\"A1-A2A3-A4\");\nsb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\nassertEquals(\"***-******-***\", sb.toString());\n\nsb = new StrBuilder();\nsb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\nassertEquals(\"\", sb.toString());\n}",
            "begin_line": 856,
            "end_line": 874,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 857,col 9)-(line 857,col 51)",
                "(line 858,col 9)-(line 858,col 63)",
                "(line 859,col 9)-(line 859,col 48)",
                "(line 860,col 0)-(line 860,col 8)",
                "(line 861,col 9)-(line 861,col 73)",
                "(line 862,col 9)-(line 862,col 48)",
                "(line 863,col 0)-(line 863,col 8)",
                "(line 864,col 9)-(line 864,col 76)",
                "(line 865,col 9)-(line 865,col 46)",
                "(line 866,col 0)-(line 866,col 8)",
                "(line 867,col 9)-(line 867,col 42)",
                "(line 868,col 9)-(line 868,col 64)",
                "(line 869,col 9)-(line 869,col 54)",
                "(line 870,col 0)-(line 870,col 8)",
                "(line 871,col 9)-(line 871,col 30)",
                "(line 872,col 9)-(line 872,col 64)",
                "(line 873,col 9)-(line 873,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace()",
            "snippet": "public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\nStrBuilder sb = new StrBuilder(\"abcbccba\");\nsb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\nassertEquals(\"abcbccba\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\nassertEquals(\"ab-c-a\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\nassertEquals(\"ab+++c+++a\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\nassertEquals(\"abca\", sb.toString());\n\nsb = new StrBuilder(\"abcbccba\");\nsb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\nassertEquals(\"abca\", sb.toString());\n}",
            "begin_line": 876,
            "end_line": 896,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 877,col 9)-(line 877,col 51)",
                "(line 878,col 9)-(line 878,col 77)",
                "(line 879,col 9)-(line 879,col 48)",
                "(line 880,col 0)-(line 880,col 8)",
                "(line 881,col 9)-(line 881,col 40)",
                "(line 882,col 9)-(line 882,col 76)",
                "(line 883,col 9)-(line 883,col 46)",
                "(line 884,col 0)-(line 884,col 8)",
                "(line 885,col 9)-(line 885,col 40)",
                "(line 886,col 9)-(line 886,col 78)",
                "(line 887,col 9)-(line 887,col 50)",
                "(line 888,col 0)-(line 888,col 8)",
                "(line 889,col 9)-(line 889,col 40)",
                "(line 890,col 9)-(line 890,col 75)",
                "(line 891,col 9)-(line 891,col 44)",
                "(line 892,col 0)-(line 892,col 8)",
                "(line 893,col 9)-(line 893,col 40)",
                "(line 894,col 9)-(line 894,col 77)",
                "(line 895,col 9)-(line 895,col 44)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex()",
            "snippet": "public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\nStrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\nassertEquals(\"-x--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\nassertEquals(\"aax--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\nassertEquals(\"aax--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\nassertEquals(\"aax--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\nassertEquals(\"aaxa-ay-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\nassertEquals(\"aaxaa-y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\nassertEquals(\"aaxaaaay-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\nassertEquals(\"aaxaaaay-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\nassertEquals(\"aaxaaaay-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\nassertEquals(\"aaxaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\nassertEquals(\"aaxaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\ntry {",
            "begin_line": 898,
            "end_line": 944,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 899,col 9)-(line 899,col 53)",
                "(line 900,col 9)-(line 900,col 76)",
                "(line 901,col 9)-(line 901,col 46)",
                "(line 902,col 0)-(line 902,col 8)",
                "(line 903,col 9)-(line 903,col 42)",
                "(line 904,col 9)-(line 904,col 76)",
                "(line 905,col 9)-(line 905,col 47)",
                "(line 906,col 0)-(line 906,col 8)",
                "(line 907,col 9)-(line 907,col 42)",
                "(line 908,col 9)-(line 908,col 76)",
                "(line 909,col 9)-(line 909,col 47)",
                "(line 910,col 0)-(line 910,col 8)",
                "(line 911,col 9)-(line 911,col 42)",
                "(line 912,col 9)-(line 912,col 76)",
                "(line 913,col 9)-(line 913,col 47)",
                "(line 914,col 0)-(line 914,col 8)",
                "(line 915,col 9)-(line 915,col 42)",
                "(line 916,col 9)-(line 916,col 76)",
                "(line 917,col 9)-(line 917,col 48)",
                "(line 918,col 0)-(line 918,col 8)",
                "(line 919,col 9)-(line 919,col 42)",
                "(line 920,col 9)-(line 920,col 76)",
                "(line 921,col 9)-(line 921,col 48)",
                "(line 922,col 0)-(line 922,col 8)",
                "(line 923,col 9)-(line 923,col 42)",
                "(line 924,col 9)-(line 924,col 76)",
                "(line 925,col 9)-(line 925,col 49)",
                "(line 926,col 0)-(line 926,col 8)",
                "(line 927,col 9)-(line 927,col 42)",
                "(line 928,col 9)-(line 928,col 76)",
                "(line 929,col 9)-(line 929,col 49)",
                "(line 930,col 0)-(line 930,col 8)",
                "(line 931,col 9)-(line 931,col 42)",
                "(line 932,col 9)-(line 932,col 76)",
                "(line 933,col 9)-(line 933,col 49)",
                "(line 934,col 0)-(line 934,col 8)",
                "(line 935,col 9)-(line 935,col 42)",
                "(line 936,col 9)-(line 936,col 76)",
                "(line 937,col 9)-(line 937,col 50)",
                "(line 938,col 0)-(line 938,col 8)",
                "(line 939,col 9)-(line 939,col 42)",
                "(line 940,col 9)-(line 940,col 77)",
                "(line 941,col 9)-(line 941,col 50)",
                "(line 942,col 0)-(line 942,col 8)",
                "(line 943,col 9)-(line 943,col 42)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex()",
            "snippet": "public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\nStrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\nassertEquals(\"aaxaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\nassertEquals(\"-xaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\nassertEquals(\"-xaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\nassertEquals(\"-xaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\nassertEquals(\"-x-aayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\nassertEquals(\"-x-aayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\nassertEquals(\"-x--yaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\nassertEquals(\"-x--yaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\nassertEquals(\"-x--yaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\nassertEquals(\"-x--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\nassertEquals(\"-x--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\ntry {",
            "begin_line": 958,
            "end_line": 1004,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 959,col 9)-(line 959,col 53)",
                "(line 960,col 9)-(line 960,col 66)",
                "(line 961,col 9)-(line 961,col 50)",
                "(line 962,col 0)-(line 962,col 8)",
                "(line 963,col 9)-(line 963,col 42)",
                "(line 964,col 9)-(line 964,col 66)",
                "(line 965,col 9)-(line 965,col 49)",
                "(line 966,col 0)-(line 966,col 8)",
                "(line 967,col 9)-(line 967,col 42)",
                "(line 968,col 9)-(line 968,col 66)",
                "(line 969,col 9)-(line 969,col 49)",
                "(line 970,col 0)-(line 970,col 8)",
                "(line 971,col 9)-(line 971,col 42)",
                "(line 972,col 9)-(line 972,col 66)",
                "(line 973,col 9)-(line 973,col 49)",
                "(line 974,col 0)-(line 974,col 8)",
                "(line 975,col 9)-(line 975,col 42)",
                "(line 976,col 9)-(line 976,col 66)",
                "(line 977,col 9)-(line 977,col 48)",
                "(line 978,col 0)-(line 978,col 8)",
                "(line 979,col 9)-(line 979,col 42)",
                "(line 980,col 9)-(line 980,col 66)",
                "(line 981,col 9)-(line 981,col 48)",
                "(line 982,col 0)-(line 982,col 8)",
                "(line 983,col 9)-(line 983,col 42)",
                "(line 984,col 9)-(line 984,col 66)",
                "(line 985,col 9)-(line 985,col 47)",
                "(line 986,col 0)-(line 986,col 8)",
                "(line 987,col 9)-(line 987,col 42)",
                "(line 988,col 9)-(line 988,col 66)",
                "(line 989,col 9)-(line 989,col 47)",
                "(line 990,col 0)-(line 990,col 8)",
                "(line 991,col 9)-(line 991,col 42)",
                "(line 992,col 9)-(line 992,col 66)",
                "(line 993,col 9)-(line 993,col 47)",
                "(line 994,col 0)-(line 994,col 8)",
                "(line 995,col 9)-(line 995,col 42)",
                "(line 996,col 9)-(line 996,col 67)",
                "(line 997,col 9)-(line 997,col 46)",
                "(line 998,col 0)-(line 998,col 8)",
                "(line 999,col 9)-(line 999,col 42)",
                "(line 1000,col 9)-(line 1000,col 69)",
                "(line 1001,col 9)-(line 1001,col 46)",
                "(line 1002,col 0)-(line 1002,col 8)",
                "(line 1003,col 9)-(line 1003,col 42)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount()",
            "snippet": "public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\nStrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\nassertEquals(\"-x--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\nassertEquals(\"aaxaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\nassertEquals(\"-xaaaayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\nassertEquals(\"-x-aayaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\nassertEquals(\"-x--yaa\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\nassertEquals(\"-x--y-\", sb.toString());\n\nsb = new StrBuilder(\"aaxaaaayaa\");\nsb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\nassertEquals(\"-x--y-\", sb.toString());\n}",
            "begin_line": 1011,
            "end_line": 1039,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1012,col 9)-(line 1012,col 53)",
                "(line 1013,col 9)-(line 1013,col 67)",
                "(line 1014,col 9)-(line 1014,col 46)",
                "(line 1015,col 0)-(line 1015,col 8)",
                "(line 1016,col 9)-(line 1016,col 42)",
                "(line 1017,col 9)-(line 1017,col 66)",
                "(line 1018,col 9)-(line 1018,col 50)",
                "(line 1019,col 0)-(line 1019,col 8)",
                "(line 1020,col 9)-(line 1020,col 42)",
                "(line 1021,col 9)-(line 1021,col 66)",
                "(line 1022,col 9)-(line 1022,col 49)",
                "(line 1023,col 0)-(line 1023,col 8)",
                "(line 1024,col 9)-(line 1024,col 42)",
                "(line 1025,col 9)-(line 1025,col 66)",
                "(line 1026,col 9)-(line 1026,col 48)",
                "(line 1027,col 0)-(line 1027,col 8)",
                "(line 1028,col 9)-(line 1028,col 42)",
                "(line 1029,col 9)-(line 1029,col 66)",
                "(line 1030,col 9)-(line 1030,col 47)",
                "(line 1031,col 0)-(line 1031,col 8)",
                "(line 1032,col 9)-(line 1032,col 42)",
                "(line 1033,col 9)-(line 1033,col 66)",
                "(line 1034,col 9)-(line 1034,col 46)",
                "(line 1035,col 0)-(line 1035,col 8)",
                "(line 1036,col 9)-(line 1036,col 42)",
                "(line 1037,col 9)-(line 1037,col 66)",
                "(line 1038,col 9)-(line 1038,col 46)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testReverse()",
            "snippet": "public void testReverse() {\nStrBuilder sb = new StrBuilder();\nassertEquals(\"\", sb.reverse().toString());\n\nsb.clear().append(true);\nassertEquals(\"eurt\", sb.reverse().toString());\nassertEquals(\"true\", sb.reverse().toString());\n}",
            "begin_line": 1042,
            "end_line": 1049,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1043,col 9)-(line 1043,col 41)",
                "(line 1044,col 9)-(line 1044,col 50)",
                "(line 1045,col 0)-(line 1045,col 8)",
                "(line 1046,col 9)-(line 1046,col 32)",
                "(line 1047,col 9)-(line 1047,col 54)",
                "(line 1048,col 9)-(line 1048,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testTrim()",
            "snippet": "public void testTrim() {\nStrBuilder sb = new StrBuilder();\nassertEquals(\"\", sb.reverse().toString());\n\nsb.clear().append(\" \\u0000 \");\nassertEquals(\"\", sb.trim().toString());\n\nsb.clear().append(\" \\u0000 a b c\");\nassertEquals(\"a b c\", sb.trim().toString());\n\nsb.clear().append(\"a b c \\u0000 \");\nassertEquals(\"a b c\", sb.trim().toString());\n\nsb.clear().append(\" \\u0000 a b c \\u0000 \");\nassertEquals(\"a b c\", sb.trim().toString());\n\nsb.clear().append(\"a b c\");\nassertEquals(\"a b c\", sb.trim().toString());\n}",
            "begin_line": 1052,
            "end_line": 1070,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1053,col 9)-(line 1053,col 41)",
                "(line 1054,col 9)-(line 1054,col 50)",
                "(line 1055,col 0)-(line 1055,col 8)",
                "(line 1056,col 9)-(line 1056,col 38)",
                "(line 1057,col 9)-(line 1057,col 47)",
                "(line 1058,col 0)-(line 1058,col 8)",
                "(line 1059,col 9)-(line 1059,col 43)",
                "(line 1060,col 9)-(line 1060,col 52)",
                "(line 1061,col 0)-(line 1061,col 8)",
                "(line 1062,col 9)-(line 1062,col 43)",
                "(line 1063,col 9)-(line 1063,col 52)",
                "(line 1064,col 0)-(line 1064,col 8)",
                "(line 1065,col 9)-(line 1065,col 51)",
                "(line 1066,col 9)-(line 1066,col 52)",
                "(line 1067,col 0)-(line 1067,col 8)",
                "(line 1068,col 9)-(line 1068,col 35)",
                "(line 1069,col 9)-(line 1069,col 52)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testStartsWith()",
            "snippet": "public void testStartsWith() {\nStrBuilder sb = new StrBuilder();\nassertFalse(sb.startsWith(\"a\"));\nassertFalse(sb.startsWith(null));\nassertTrue(sb.startsWith(\"\"));\nsb.append(\"abc\");\nassertTrue(sb.startsWith(\"a\"));\nassertTrue(sb.startsWith(\"ab\"));\nassertTrue(sb.startsWith(\"abc\"));\nassertFalse(sb.startsWith(\"cba\"));\n}",
            "begin_line": 1073,
            "end_line": 1083,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1074,col 9)-(line 1074,col 41)",
                "(line 1075,col 9)-(line 1075,col 40)",
                "(line 1076,col 9)-(line 1076,col 41)",
                "(line 1077,col 9)-(line 1077,col 38)",
                "(line 1078,col 9)-(line 1078,col 25)",
                "(line 1079,col 9)-(line 1079,col 39)",
                "(line 1080,col 9)-(line 1080,col 40)",
                "(line 1081,col 9)-(line 1081,col 41)",
                "(line 1082,col 9)-(line 1082,col 42)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testEndsWith()",
            "snippet": "public void testEndsWith() {\nStrBuilder sb = new StrBuilder();\nassertFalse(sb.endsWith(\"a\"));\nassertFalse(sb.endsWith(\"c\"));\nassertTrue(sb.endsWith(\"\"));\nassertFalse(sb.endsWith(null));\nsb.append(\"abc\");\nassertTrue(sb.endsWith(\"c\"));\nassertTrue(sb.endsWith(\"bc\"));\nassertTrue(sb.endsWith(\"abc\"));\nassertFalse(sb.endsWith(\"cba\"));\nassertFalse(sb.endsWith(\"abcd\"));\nassertFalse(sb.endsWith(\" abc\"));\nassertFalse(sb.endsWith(\"abc \"));\n}",
            "begin_line": 1085,
            "end_line": 1099,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1086,col 9)-(line 1086,col 41)",
                "(line 1087,col 9)-(line 1087,col 38)",
                "(line 1088,col 9)-(line 1088,col 38)",
                "(line 1089,col 9)-(line 1089,col 36)",
                "(line 1090,col 9)-(line 1090,col 39)",
                "(line 1091,col 9)-(line 1091,col 25)",
                "(line 1092,col 9)-(line 1092,col 37)",
                "(line 1093,col 9)-(line 1093,col 38)",
                "(line 1094,col 9)-(line 1094,col 39)",
                "(line 1095,col 9)-(line 1095,col 40)",
                "(line 1096,col 9)-(line 1096,col 41)",
                "(line 1097,col 9)-(line 1097,col 41)",
                "(line 1098,col 9)-(line 1098,col 41)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringInt()",
            "snippet": "public void testSubstringInt() {\nStrBuilder sb = new StrBuilder (\"hello goodbye\");\nassertEquals (\"goodbye\", sb.substring(6));\nassertEquals (\"hello goodbye\".substring(6), sb.substring(6));\nassertEquals (\"hello goodbye\", sb.substring(0));\nassertEquals (\"hello goodbye\".substring(0), sb.substring(0));\ntry {",
            "begin_line": 1102,
            "end_line": 1108,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1103,col 9)-(line 1103,col 57)",
                "(line 1104,col 9)-(line 1104,col 50)",
                "(line 1105,col 9)-(line 1105,col 69)",
                "(line 1106,col 9)-(line 1106,col 56)",
                "(line 1107,col 9)-(line 1107,col 69)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testSubstringIntInt()",
            "snippet": "public void testSubstringIntInt() {\nStrBuilder sb = new StrBuilder (\"hello goodbye\");\nassertEquals (\"hello\", sb.substring(0, 5));\nassertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n\nassertEquals (\"goodbye\", sb.substring(6, 13));\nassertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n\nassertEquals (\"goodbye\", sb.substring(6, 20));\n\ntry {",
            "begin_line": 1120,
            "end_line": 1130,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1121,col 9)-(line 1121,col 57)",
                "(line 1122,col 9)-(line 1122,col 51)",
                "(line 1123,col 9)-(line 1123,col 75)",
                "(line 1124,col 0)-(line 1124,col 8)",
                "(line 1125,col 9)-(line 1125,col 54)",
                "(line 1126,col 9)-(line 1126,col 76)",
                "(line 1127,col 0)-(line 1127,col 8)",
                "(line 1128,col 9)-(line 1128,col 54)",
                "(line 1129,col 0)-(line 1129,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testMidString()",
            "snippet": "public void testMidString() {\nStrBuilder sb = new StrBuilder(\"hello goodbye hello\");\nassertEquals(\"goodbye\", sb.midString(6, 7));\nassertEquals(\"hello\", sb.midString(0, 5));\nassertEquals(\"hello\", sb.midString(-5, 5));\nassertEquals(\"\", sb.midString(0, -1));\nassertEquals(\"\", sb.midString(20, 2));\nassertEquals(\"hello\", sb.midString(14, 22));\n}",
            "begin_line": 1142,
            "end_line": 1150,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1143,col 9)-(line 1143,col 62)",
                "(line 1144,col 9)-(line 1144,col 52)",
                "(line 1145,col 9)-(line 1145,col 50)",
                "(line 1146,col 9)-(line 1146,col 51)",
                "(line 1147,col 9)-(line 1147,col 46)",
                "(line 1148,col 9)-(line 1148,col 46)",
                "(line 1149,col 9)-(line 1149,col 52)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testRightString()",
            "snippet": "public void testRightString() {\nStrBuilder sb = new StrBuilder(\"left right\");\nassertEquals(\"right\", sb.rightString(5));\nassertEquals(\"\", sb.rightString(0));\nassertEquals(\"\", sb.rightString(-5));\nassertEquals(\"left right\", sb.rightString(15));\n}",
            "begin_line": 1152,
            "end_line": 1158,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1153,col 9)-(line 1153,col 53)",
                "(line 1154,col 9)-(line 1154,col 49)",
                "(line 1155,col 9)-(line 1155,col 44)",
                "(line 1156,col 9)-(line 1156,col 45)",
                "(line 1157,col 9)-(line 1157,col 55)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLeftString()",
            "snippet": "public void testLeftString() {\nStrBuilder sb = new StrBuilder(\"left right\");\nassertEquals(\"left\", sb.leftString(4));\nassertEquals(\"\", sb.leftString(0));\nassertEquals(\"\", sb.leftString(-5));\nassertEquals(\"left right\", sb.leftString(15));\n}",
            "begin_line": 1160,
            "end_line": 1166,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1161,col 9)-(line 1161,col 53)",
                "(line 1162,col 9)-(line 1162,col 47)",
                "(line 1163,col 9)-(line 1163,col 43)",
                "(line 1164,col 9)-(line 1164,col 44)",
                "(line 1165,col 9)-(line 1165,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_char()",
            "snippet": "public void testContains_char() {\nStrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\nassertEquals(true, sb.contains('a'));\nassertEquals(true, sb.contains('o'));\nassertEquals(true, sb.contains('z'));\nassertEquals(false, sb.contains('1'));\n}",
            "begin_line": 1169,
            "end_line": 1175,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1170,col 9)-(line 1170,col 69)",
                "(line 1171,col 9)-(line 1171,col 45)",
                "(line 1172,col 9)-(line 1172,col 45)",
                "(line 1173,col 9)-(line 1173,col 45)",
                "(line 1174,col 9)-(line 1174,col 46)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_String()",
            "snippet": "public void testContains_String() {\nStrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\nassertEquals(true, sb.contains(\"a\"));\nassertEquals(true, sb.contains(\"pq\"));\nassertEquals(true, sb.contains(\"z\"));\nassertEquals(false, sb.contains(\"zyx\"));\nassertEquals(false, sb.contains((String) null));\n}",
            "begin_line": 1177,
            "end_line": 1184,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1178,col 9)-(line 1178,col 69)",
                "(line 1179,col 9)-(line 1179,col 45)",
                "(line 1180,col 9)-(line 1180,col 46)",
                "(line 1181,col 9)-(line 1181,col 45)",
                "(line 1182,col 9)-(line 1182,col 48)",
                "(line 1183,col 9)-(line 1183,col 56)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testContains_StrMatcher()",
            "snippet": "public void testContains_StrMatcher() {\nStrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\nassertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\nassertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\nassertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\nassertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\nassertEquals(false, sb.contains((StrMatcher) null));\n\nsb = new StrBuilder();\nassertEquals(false, sb.contains(A_NUMBER_MATCHER));\nsb.append(\"B A1 C\");\nassertEquals(true, sb.contains(A_NUMBER_MATCHER));\n}",
            "begin_line": 1186,
            "end_line": 1198,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1187,col 9)-(line 1187,col 69)",
                "(line 1188,col 9)-(line 1188,col 69)",
                "(line 1189,col 9)-(line 1189,col 72)",
                "(line 1190,col 9)-(line 1190,col 69)",
                "(line 1191,col 9)-(line 1191,col 73)",
                "(line 1192,col 9)-(line 1192,col 60)",
                "(line 1193,col 0)-(line 1193,col 0)",
                "(line 1194,col 9)-(line 1194,col 30)",
                "(line 1195,col 9)-(line 1195,col 59)",
                "(line 1196,col 9)-(line 1196,col 28)",
                "(line 1197,col 9)-(line 1197,col 58)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char()",
            "snippet": "public void testIndexOf_char() {\nStrBuilder sb = new StrBuilder(\"abab\");\nassertEquals(0, sb.indexOf('a'));\n\n// should work like String#indexOf",
            "begin_line": 1201,
            "end_line": 1205,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1202,col 9)-(line 1202,col 47)",
                "(line 1203,col 9)-(line 1203,col 41)",
                "(line 1204,col 0)-(line 1204,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_char_int()",
            "snippet": "public void testIndexOf_char_int() {\nStrBuilder sb = new StrBuilder(\"abab\");\nassertEquals(0, sb.indexOf('a', -1));\nassertEquals(0, sb.indexOf('a', 0));\nassertEquals(2, sb.indexOf('a', 1));\nassertEquals(-1, sb.indexOf('a', 4));\nassertEquals(-1, sb.indexOf('a', 5));\n\n// should work like String#indexOf",
            "begin_line": 1214,
            "end_line": 1222,
            "comment": "         should work like String#indexOf",
            "child_ranges": [
                "(line 1215,col 9)-(line 1215,col 47)",
                "(line 1216,col 9)-(line 1216,col 45)",
                "(line 1217,col 9)-(line 1217,col 44)",
                "(line 1218,col 9)-(line 1218,col 44)",
                "(line 1219,col 9)-(line 1219,col 45)",
                "(line 1220,col 9)-(line 1220,col 45)",
                "(line 1221,col 0)-(line 1221,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char()",
            "snippet": "public void testLastIndexOf_char() {\nStrBuilder sb = new StrBuilder(\"abab\");\n\nassertEquals (2, sb.lastIndexOf('a'));\n//should work like String#lastIndexOf",
            "begin_line": 1235,
            "end_line": 1239,
            "comment": "         should work like String#indexOf",
            "child_ranges": [
                "(line 1236,col 9)-(line 1236,col 47)",
                "(line 1237,col 0)-(line 1237,col 8)",
                "(line 1238,col 9)-(line 1238,col 46)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_char_int()",
            "snippet": "public void testLastIndexOf_char_int() {\nStrBuilder sb = new StrBuilder(\"abab\");\nassertEquals(-1, sb.lastIndexOf('a', -1));\nassertEquals(0, sb.lastIndexOf('a', 0));\nassertEquals(0, sb.lastIndexOf('a', 1));\n\n// should work like String#lastIndexOf",
            "begin_line": 1248,
            "end_line": 1254,
            "comment": "        should work like String#lastIndexOf",
            "child_ranges": [
                "(line 1249,col 9)-(line 1249,col 47)",
                "(line 1250,col 9)-(line 1250,col 50)",
                "(line 1251,col 9)-(line 1251,col 48)",
                "(line 1252,col 9)-(line 1252,col 48)",
                "(line 1253,col 0)-(line 1253,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String()",
            "snippet": "public void testIndexOf_String() {\nStrBuilder sb = new StrBuilder(\"abab\");\n\nassertEquals(0, sb.indexOf(\"a\"));\n//should work like String#indexOf",
            "begin_line": 1268,
            "end_line": 1272,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1269,col 9)-(line 1269,col 47)",
                "(line 1270,col 0)-(line 1270,col 8)",
                "(line 1271,col 9)-(line 1271,col 41)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_String_int()",
            "snippet": "public void testIndexOf_String_int() {\nStrBuilder sb = new StrBuilder(\"abab\");\nassertEquals(0, sb.indexOf(\"a\", -1));\nassertEquals(0, sb.indexOf(\"a\", 0));\nassertEquals(2, sb.indexOf(\"a\", 1));\nassertEquals(2, sb.indexOf(\"a\", 2));\nassertEquals(-1, sb.indexOf(\"a\", 3));\nassertEquals(-1, sb.indexOf(\"a\", 4));\nassertEquals(-1, sb.indexOf(\"a\", 5));\n\nassertEquals(-1, sb.indexOf(\"abcdef\", 0));\nassertEquals(0, sb.indexOf(\"\", 0));\nassertEquals(1, sb.indexOf(\"\", 1));\n\n//should work like String#indexOf",
            "begin_line": 1290,
            "end_line": 1304,
            "comment": "        should work like String#indexOf",
            "child_ranges": [
                "(line 1291,col 9)-(line 1291,col 47)",
                "(line 1292,col 9)-(line 1292,col 45)",
                "(line 1293,col 9)-(line 1293,col 44)",
                "(line 1294,col 9)-(line 1294,col 44)",
                "(line 1295,col 9)-(line 1295,col 44)",
                "(line 1296,col 9)-(line 1296,col 45)",
                "(line 1297,col 9)-(line 1297,col 45)",
                "(line 1298,col 9)-(line 1298,col 45)",
                "(line 1299,col 0)-(line 1299,col 8)",
                "(line 1300,col 9)-(line 1300,col 50)",
                "(line 1301,col 9)-(line 1301,col 43)",
                "(line 1302,col 9)-(line 1302,col 43)",
                "(line 1303,col 0)-(line 1303,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String()",
            "snippet": "public void testLastIndexOf_String() {\nStrBuilder sb = new StrBuilder(\"abab\");\n\nassertEquals(2, sb.lastIndexOf(\"a\"));\n//should work like String#lastIndexOf",
            "begin_line": 1326,
            "end_line": 1330,
            "comment": "        should work like String#indexOf",
            "child_ranges": [
                "(line 1327,col 9)-(line 1327,col 47)",
                "(line 1328,col 0)-(line 1328,col 8)",
                "(line 1329,col 9)-(line 1329,col 45)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_String_int()",
            "snippet": "public void testLastIndexOf_String_int() {\nStrBuilder sb = new StrBuilder(\"abab\");\nassertEquals(-1, sb.lastIndexOf(\"a\", -1));\nassertEquals(0, sb.lastIndexOf(\"a\", 0));\nassertEquals(0, sb.lastIndexOf(\"a\", 1));\nassertEquals(2, sb.lastIndexOf(\"a\", 2));\nassertEquals(2, sb.lastIndexOf(\"a\", 3));\nassertEquals(2, sb.lastIndexOf(\"a\", 4));\nassertEquals(2, sb.lastIndexOf(\"a\", 5));\n\nassertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\nassertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\nassertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n\n//should work like String#lastIndexOf",
            "begin_line": 1348,
            "end_line": 1362,
            "comment": "        should work like String#lastIndexOf",
            "child_ranges": [
                "(line 1349,col 9)-(line 1349,col 47)",
                "(line 1350,col 9)-(line 1350,col 50)",
                "(line 1351,col 9)-(line 1351,col 48)",
                "(line 1352,col 9)-(line 1352,col 48)",
                "(line 1353,col 9)-(line 1353,col 48)",
                "(line 1354,col 9)-(line 1354,col 48)",
                "(line 1355,col 9)-(line 1355,col 48)",
                "(line 1356,col 9)-(line 1356,col 48)",
                "(line 1357,col 0)-(line 1357,col 8)",
                "(line 1358,col 9)-(line 1358,col 54)",
                "(line 1359,col 9)-(line 1359,col 71)",
                "(line 1360,col 9)-(line 1360,col 71)",
                "(line 1361,col 0)-(line 1361,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher()",
            "snippet": "public void testIndexOf_StrMatcher() {\nStrBuilder sb = new StrBuilder();\nassertEquals(-1, sb.indexOf((StrMatcher) null));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n\nsb.append(\"ab bd\");\nassertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\nassertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\nassertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\nassertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\nassertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\nassertEquals(-1, sb.indexOf((StrMatcher) null));\n\nsb.append(\" A1 junction\");\nassertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n}",
            "begin_line": 1385,
            "end_line": 1400,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1386,col 9)-(line 1386,col 41)",
                "(line 1387,col 9)-(line 1387,col 56)",
                "(line 1388,col 9)-(line 1388,col 66)",
                "(line 1389,col 0)-(line 1389,col 8)",
                "(line 1390,col 9)-(line 1390,col 27)",
                "(line 1391,col 9)-(line 1391,col 65)",
                "(line 1392,col 9)-(line 1392,col 65)",
                "(line 1393,col 9)-(line 1393,col 63)",
                "(line 1394,col 9)-(line 1394,col 65)",
                "(line 1395,col 9)-(line 1395,col 63)",
                "(line 1396,col 9)-(line 1396,col 56)",
                "(line 1397,col 0)-(line 1397,col 8)",
                "(line 1398,col 9)-(line 1398,col 34)",
                "(line 1399,col 9)-(line 1399,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOf_StrMatcher_int()",
            "snippet": "public void testIndexOf_StrMatcher_int() {\nStrBuilder sb = new StrBuilder();\nassertEquals(-1, sb.indexOf((StrMatcher) null, 2));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n\nsb.append(\"ab bd\");\nassertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\nassertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n\nassertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\nassertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\nassertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\nassertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\nassertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\nassertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n\nassertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\nassertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\nassertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\nassertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\nassertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n\nassertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\nassertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n\nsb.append(\" A1 junction with A2\");\nassertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\nassertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\nassertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\nassertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\nassertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\nassertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n}",
            "begin_line": 1402,
            "end_line": 1439,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1403,col 9)-(line 1403,col 41)",
                "(line 1404,col 9)-(line 1404,col 59)",
                "(line 1405,col 9)-(line 1405,col 69)",
                "(line 1406,col 9)-(line 1406,col 69)",
                "(line 1407,col 0)-(line 1407,col 8)",
                "(line 1408,col 9)-(line 1408,col 27)",
                "(line 1409,col 9)-(line 1409,col 69)",
                "(line 1410,col 9)-(line 1410,col 68)",
                "(line 1411,col 9)-(line 1411,col 69)",
                "(line 1412,col 9)-(line 1412,col 70)",
                "(line 1413,col 0)-(line 1413,col 8)",
                "(line 1414,col 9)-(line 1414,col 69)",
                "(line 1415,col 9)-(line 1415,col 68)",
                "(line 1416,col 9)-(line 1416,col 68)",
                "(line 1417,col 9)-(line 1417,col 68)",
                "(line 1418,col 9)-(line 1418,col 68)",
                "(line 1419,col 9)-(line 1419,col 69)",
                "(line 1420,col 9)-(line 1420,col 69)",
                "(line 1421,col 9)-(line 1421,col 69)",
                "(line 1422,col 0)-(line 1422,col 8)",
                "(line 1423,col 9)-(line 1423,col 67)",
                "(line 1424,col 9)-(line 1424,col 66)",
                "(line 1425,col 9)-(line 1425,col 66)",
                "(line 1426,col 9)-(line 1426,col 67)",
                "(line 1427,col 9)-(line 1427,col 68)",
                "(line 1428,col 0)-(line 1428,col 8)",
                "(line 1429,col 9)-(line 1429,col 66)",
                "(line 1430,col 9)-(line 1430,col 59)",
                "(line 1431,col 0)-(line 1431,col 8)",
                "(line 1432,col 9)-(line 1432,col 42)",
                "(line 1433,col 9)-(line 1433,col 57)",
                "(line 1434,col 9)-(line 1434,col 57)",
                "(line 1435,col 9)-(line 1435,col 58)",
                "(line 1436,col 9)-(line 1436,col 59)",
                "(line 1437,col 9)-(line 1437,col 59)",
                "(line 1438,col 9)-(line 1438,col 59)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher()",
            "snippet": "public void testLastIndexOf_StrMatcher() {\nStrBuilder sb = new StrBuilder();\nassertEquals(-1, sb.lastIndexOf((StrMatcher) null));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n\nsb.append(\"ab bd\");\nassertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\nassertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\nassertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\nassertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\nassertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n\nsb.append(\" A1 junction\");\nassertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n}",
            "begin_line": 1441,
            "end_line": 1456,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1442,col 9)-(line 1442,col 41)",
                "(line 1443,col 9)-(line 1443,col 60)",
                "(line 1444,col 9)-(line 1444,col 70)",
                "(line 1445,col 0)-(line 1445,col 8)",
                "(line 1446,col 9)-(line 1446,col 27)",
                "(line 1447,col 9)-(line 1447,col 69)",
                "(line 1448,col 9)-(line 1448,col 69)",
                "(line 1449,col 9)-(line 1449,col 67)",
                "(line 1450,col 9)-(line 1450,col 69)",
                "(line 1451,col 9)-(line 1451,col 67)",
                "(line 1452,col 9)-(line 1452,col 60)",
                "(line 1453,col 0)-(line 1453,col 8)",
                "(line 1454,col 9)-(line 1454,col 34)",
                "(line 1455,col 9)-(line 1455,col 58)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLastIndexOf_StrMatcher_int()",
            "snippet": "public void testLastIndexOf_StrMatcher_int() {\nStrBuilder sb = new StrBuilder();\nassertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n\nsb.append(\"ab bd\");\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\nassertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\nassertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\nassertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\nassertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\nassertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\nassertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\nassertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\nassertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\nassertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n\nassertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\nassertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\nassertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\nassertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\nassertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n\nassertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\nassertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n\nsb.append(\" A1 junction with A2\");\nassertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\nassertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds",
            "begin_line": 1458,
            "end_line": 1491,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1459,col 9)-(line 1459,col 41)",
                "(line 1460,col 9)-(line 1460,col 63)",
                "(line 1461,col 9)-(line 1461,col 73)",
                "(line 1462,col 9)-(line 1462,col 73)",
                "(line 1463,col 9)-(line 1463,col 74)",
                "(line 1464,col 0)-(line 1464,col 8)",
                "(line 1465,col 9)-(line 1465,col 27)",
                "(line 1466,col 9)-(line 1466,col 74)",
                "(line 1467,col 9)-(line 1467,col 72)",
                "(line 1468,col 9)-(line 1468,col 72)",
                "(line 1469,col 9)-(line 1469,col 73)",
                "(line 1470,col 0)-(line 1470,col 8)",
                "(line 1471,col 9)-(line 1471,col 74)",
                "(line 1472,col 9)-(line 1472,col 73)",
                "(line 1473,col 9)-(line 1473,col 72)",
                "(line 1474,col 9)-(line 1474,col 72)",
                "(line 1475,col 9)-(line 1475,col 72)",
                "(line 1476,col 9)-(line 1476,col 72)",
                "(line 1477,col 9)-(line 1477,col 72)",
                "(line 1478,col 9)-(line 1478,col 72)",
                "(line 1479,col 0)-(line 1479,col 8)",
                "(line 1480,col 9)-(line 1480,col 72)",
                "(line 1481,col 9)-(line 1481,col 71)",
                "(line 1482,col 9)-(line 1482,col 70)",
                "(line 1483,col 9)-(line 1483,col 70)",
                "(line 1484,col 9)-(line 1484,col 71)",
                "(line 1485,col 0)-(line 1485,col 8)",
                "(line 1486,col 9)-(line 1486,col 70)",
                "(line 1487,col 9)-(line 1487,col 63)",
                "(line 1488,col 0)-(line 1488,col 8)",
                "(line 1489,col 9)-(line 1489,col 42)",
                "(line 1490,col 9)-(line 1490,col 62)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd)",
            "snippet": "public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\nif (buffer[pos] == 'A') {",
            "begin_line": 1499,
            "end_line": 1500,
            "comment": "     -----------------------------------------------------------------------",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testEqualsIgnoreCase()",
            "snippet": "public void testEqualsIgnoreCase() {\nStrBuilder sb1 = new StrBuilder();\nStrBuilder sb2 = new StrBuilder();\nassertEquals(true, sb1.equalsIgnoreCase(sb1));\nassertEquals(true, sb1.equalsIgnoreCase(sb2));\nassertEquals(true, sb2.equalsIgnoreCase(sb2));\n\nsb1.append(\"abc\");\nassertEquals(false, sb1.equalsIgnoreCase(sb2));\n\nsb2.append(\"ABC\");\nassertEquals(true, sb1.equalsIgnoreCase(sb2));\n\nsb2.clear().append(\"abc\");\nassertEquals(true, sb1.equalsIgnoreCase(sb2));\nassertEquals(true, sb1.equalsIgnoreCase(sb1));\nassertEquals(true, sb2.equalsIgnoreCase(sb2));\n\nsb2.clear().append(\"aBc\");\nassertEquals(true, sb1.equalsIgnoreCase(sb2));\n}",
            "begin_line": 1654,
            "end_line": 1674,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1655,col 9)-(line 1655,col 42)",
                "(line 1656,col 9)-(line 1656,col 42)",
                "(line 1657,col 9)-(line 1657,col 54)",
                "(line 1658,col 9)-(line 1658,col 54)",
                "(line 1659,col 9)-(line 1659,col 54)",
                "(line 1660,col 0)-(line 1660,col 8)",
                "(line 1661,col 9)-(line 1661,col 26)",
                "(line 1662,col 9)-(line 1662,col 55)",
                "(line 1663,col 0)-(line 1663,col 8)",
                "(line 1664,col 9)-(line 1664,col 26)",
                "(line 1665,col 9)-(line 1665,col 54)",
                "(line 1666,col 0)-(line 1666,col 8)",
                "(line 1667,col 9)-(line 1667,col 34)",
                "(line 1668,col 9)-(line 1668,col 54)",
                "(line 1669,col 9)-(line 1669,col 54)",
                "(line 1670,col 9)-(line 1670,col 54)",
                "(line 1671,col 0)-(line 1671,col 8)",
                "(line 1672,col 9)-(line 1672,col 34)",
                "(line 1673,col 9)-(line 1673,col 54)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testEquals()",
            "snippet": "public void testEquals() {\nStrBuilder sb1 = new StrBuilder();\nStrBuilder sb2 = new StrBuilder();\nassertEquals(true, sb1.equals(sb2));\nassertEquals(true, sb1.equals(sb1));\nassertEquals(true, sb2.equals(sb2));\nassertEquals(true, sb1.equals((Object) sb2));\n\nsb1.append(\"abc\");\nassertEquals(false, sb1.equals(sb2));\nassertEquals(false, sb1.equals((Object) sb2));\n\nsb2.append(\"ABC\");\nassertEquals(false, sb1.equals(sb2));\nassertEquals(false, sb1.equals((Object) sb2));\n\nsb2.clear().append(\"abc\");\nassertEquals(true, sb1.equals(sb2));\nassertEquals(true, sb1.equals((Object) sb2));\n\nassertEquals(false, sb1.equals(new Integer(1)));\nassertEquals(false, sb1.equals(\"abc\"));\n}",
            "begin_line": 1677,
            "end_line": 1699,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1678,col 9)-(line 1678,col 42)",
                "(line 1679,col 9)-(line 1679,col 42)",
                "(line 1680,col 9)-(line 1680,col 44)",
                "(line 1681,col 9)-(line 1681,col 44)",
                "(line 1682,col 9)-(line 1682,col 44)",
                "(line 1683,col 9)-(line 1683,col 53)",
                "(line 1684,col 0)-(line 1684,col 8)",
                "(line 1685,col 9)-(line 1685,col 26)",
                "(line 1686,col 9)-(line 1686,col 45)",
                "(line 1687,col 9)-(line 1687,col 54)",
                "(line 1688,col 0)-(line 1688,col 8)",
                "(line 1689,col 9)-(line 1689,col 26)",
                "(line 1690,col 9)-(line 1690,col 45)",
                "(line 1691,col 9)-(line 1691,col 54)",
                "(line 1692,col 0)-(line 1692,col 8)",
                "(line 1693,col 9)-(line 1693,col 34)",
                "(line 1694,col 9)-(line 1694,col 44)",
                "(line 1695,col 9)-(line 1695,col 53)",
                "(line 1696,col 0)-(line 1696,col 8)",
                "(line 1697,col 9)-(line 1697,col 56)",
                "(line 1698,col 9)-(line 1698,col 47)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testHashCode()",
            "snippet": "public void testHashCode() {\nStrBuilder sb = new StrBuilder();\nint hc1a = sb.hashCode();\nint hc1b = sb.hashCode();\nassertEquals(0, hc1a);\nassertEquals(hc1a, hc1b);\n\nsb.append(\"abc\");\nint hc2a = sb.hashCode();\nint hc2b = sb.hashCode();\nassertEquals(true, hc2a != 0);\nassertEquals(hc2a, hc2b);\n}",
            "begin_line": 1702,
            "end_line": 1714,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1703,col 9)-(line 1703,col 41)",
                "(line 1704,col 9)-(line 1704,col 33)",
                "(line 1705,col 9)-(line 1705,col 33)",
                "(line 1706,col 9)-(line 1706,col 30)",
                "(line 1707,col 9)-(line 1707,col 33)",
                "(line 1708,col 0)-(line 1708,col 8)",
                "(line 1709,col 9)-(line 1709,col 25)",
                "(line 1710,col 9)-(line 1710,col 33)",
                "(line 1711,col 9)-(line 1711,col 33)",
                "(line 1712,col 9)-(line 1712,col 38)",
                "(line 1713,col 9)-(line 1713,col 33)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testToString()",
            "snippet": "public void testToString() {\nStrBuilder sb = new StrBuilder(\"abc\");\nassertEquals(\"abc\", sb.toString());\n}",
            "begin_line": 1717,
            "end_line": 1720,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1718,col 9)-(line 1718,col 46)",
                "(line 1719,col 9)-(line 1719,col 43)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testToStringBuffer()",
            "snippet": "public void testToStringBuffer() {\nStrBuilder sb = new StrBuilder();\nassertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n\nsb.append(\"junit\");\nassertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n}",
            "begin_line": 1723,
            "end_line": 1729,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1724,col 9)-(line 1724,col 41)",
                "(line 1725,col 9)-(line 1725,col 84)",
                "(line 1726,col 0)-(line 1726,col 8)",
                "(line 1727,col 9)-(line 1727,col 27)",
                "(line 1728,col 9)-(line 1728,col 91)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang294()",
            "snippet": "public void testLang294() {\nStrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\nsb.deleteAll(\"\\n%BLAH%\");\nassertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString());\n}",
            "begin_line": 1732,
            "end_line": 1736,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1733,col 9)-(line 1733,col 93)",
                "(line 1734,col 9)-(line 1734,col 33)",
                "(line 1735,col 9)-(line 1735,col 75)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testIndexOfLang294()",
            "snippet": "public void testIndexOfLang294() {\nStrBuilder sb = new StrBuilder(\"onetwothree\");\nsb.deleteFirst(\"three\");\nassertEquals(-1, sb.indexOf(\"three\"));\n}",
            "begin_line": 1738,
            "end_line": 1742,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1739,col 9)-(line 1739,col 54)",
                "(line 1740,col 9)-(line 1740,col 32)",
                "(line 1741,col 9)-(line 1741,col 46)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang295()",
            "snippet": "public void testLang295() {\nStrBuilder sb = new StrBuilder(\"onetwothree\");\nsb.deleteFirst(\"three\");\nassertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\nassertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n}",
            "begin_line": 1745,
            "end_line": 1750,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1746,col 9)-(line 1746,col 54)",
                "(line 1747,col 9)-(line 1747,col 32)",
                "(line 1748,col 9)-(line 1748,col 108)",
                "(line 1749,col 9)-(line 1749,col 111)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Right()",
            "snippet": "public void testLang412Right() {\nStrBuilder sb = new StrBuilder();\nsb.appendFixedWidthPadRight(null, 10, '*');\nassertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n}",
            "begin_line": 1753,
            "end_line": 1757,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1754,col 9)-(line 1754,col 41)",
                "(line 1755,col 9)-(line 1755,col 51)",
                "(line 1756,col 9)-(line 1756,col 106)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.text.StrBuilderTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/text/StrBuilderTest.java",
            "signature": "org.apache.commons.lang.text.StrBuilderTest.testLang412Left()",
            "snippet": "public void testLang412Left() {\nStrBuilder sb = new StrBuilder();\nsb.appendFixedWidthPadLeft(null, 10, '*');\nassertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n}",
            "begin_line": 1759,
            "end_line": 1763,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1760,col 9)-(line 1760,col 41)",
                "(line 1761,col 9)-(line 1761,col 50)",
                "(line 1762,col 9)-(line 1762,col 105)"
            ]
        }
    ]
]