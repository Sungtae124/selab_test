[
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch()",
    "snippet": "@Test public void shouldNotFindAnySuspiciousMatchersWhenNumberOfArgumentsDoesntMatch(){\n  List\u003cMatcher\u003e matchers\u003d(List)Arrays.asList(new Equals(1));\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,20});\n  assertEquals(0,suspicious.length);\n}",
    "begin_line": 23,
    "end_line": 32,
    "comment": "",
    "child_ranges": [
      "(line 25,col 9)-(line 25,col 69)",
      "(line 28,col 9)-(line 28,col 107)",
      "(line 31,col 9)-(line 31,col 43)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch()",
    "snippet": "@Test public void shouldNotFindAnySuspiciousMatchersWhenArgumentsMatch(){\n  List\u003cMatcher\u003e matchers\u003d(List)Arrays.asList(new Equals(10),new Equals(20));\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,20});\n  assertEquals(0,suspicious.length);\n}",
    "begin_line": 35,
    "end_line": 44,
    "comment": "",
    "child_ranges": [
      "(line 37,col 9)-(line 37,col 86)",
      "(line 40,col 9)-(line 40,col 107)",
      "(line 43,col 9)-(line 43,col 43)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldFindSuspiciousMatchers()",
    "snippet": "@Test public void shouldFindSuspiciousMatchers(){\n  Equals matcherInt20\u003dnew Equals(20);\n  Long longPretendingAnInt\u003dnew Long(20);\n  List\u003cMatcher\u003e matchers\u003d(List)Arrays.asList(new Equals(10),matcherInt20);\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10,longPretendingAnInt});\n  assertEquals(1,suspicious.length);\n  assertEquals(new Integer(1),suspicious[0]);\n}",
    "begin_line": 47,
    "end_line": 59,
    "comment": "",
    "child_ranges": [
      "(line 49,col 9)-(line 49,col 45)",
      "(line 50,col 9)-(line 50,col 48)",
      "(line 53,col 9)-(line 53,col 84)",
      "(line 54,col 9)-(line 54,col 124)",
      "(line 57,col 9)-(line 57,col 43)",
      "(line 58,col 9)-(line 58,col 52)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldNotFindSuspiciousMatchersWhenTypesAreTheSame()",
    "snippet": "@Test public void shouldNotFindSuspiciousMatchersWhenTypesAreTheSame(){\n  Equals matcherWithBadDescription\u003dnew Equals(20){\n    public void describeTo(    Description desc){\n      desc.appendText(\"10\");\n    }\n  }\n;\n  Integer argument\u003d10;\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes((List)Arrays.asList(matcherWithBadDescription),new Object[]{argument});\n  assertEquals(0,suspicious.length);\n}",
    "begin_line": 62,
    "end_line": 77,
    "comment": "",
    "child_ranges": [
      "(line 64,col 9)-(line 69,col 10)",
      "(line 70,col 9)-(line 70,col 30)",
      "(line 73,col 9)-(line 73,col 148)",
      "(line 76,col 9)-(line 76,col 43)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.describeTo(Description)",
    "snippet": "public void describeTo(Description desc){\n  desc.appendText(\"10\");\n}",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "child_ranges": [
      "(line 67,col 17)-(line 67,col 38)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldWorkFineWhenGivenArgIsNull()",
    "snippet": "@Test public void shouldWorkFineWhenGivenArgIsNull(){\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes((List)Arrays.asList(new Equals(20)),new Object[]{null});\n  assertEquals(0,suspicious.length);\n}",
    "begin_line": 80,
    "end_line": 86,
    "comment": "",
    "child_ranges": [
      "(line 82,col 9)-(line 82,col 133)",
      "(line 85,col 9)-(line 85,col 43)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.shouldUseMatchersSafely()",
    "snippet": "@Test public void shouldUseMatchersSafely(){\n  List\u003cMatcher\u003e matchers\u003d(List)Arrays.asList(new BaseMatcher(){\n    public boolean matches(    Object item){\n      throw new ClassCastException(\"nasty matcher\");\n    }\n    public void describeTo(    Description description){\n    }\n  }\n);\n  Integer[] suspicious\u003dtool.getSuspiciouslyNotMatchingArgsIndexes(matchers,new Object[]{10});\n  assertEquals(0,suspicious.length);\n}",
    "begin_line": 89,
    "end_line": 104,
    "comment": "",
    "child_ranges": [
      "(line 91,col 9)-(line 97,col 16)",
      "(line 100,col 9)-(line 100,col 103)",
      "(line 103,col 9)-(line 103,col 43)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.matches(java.lang.Object)",
    "snippet": "public boolean matches(Object item){\n  throw new ClassCastException(\"nasty matcher\");\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "child_ranges": [
      "(line 93,col 17)-(line 93,col 62)"
    ]
  },
  {
    "class_name": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest",
    "child_classes": [],
    "src_path": "org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java",
    "signature": "org.mockito.internal.verification.argumentmatching.ArgumentMatchingToolTest.describeTo(Description)",
    "snippet": "public void describeTo(Description description){\n}",
    "begin_line": 96,
    "end_line": 97,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
    "child_classes": [],
    "src_path": "org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
    "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.doFun(java.lang.String)",
    "snippet": "String doFun(String something);",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "child_ranges": []
  },
  {
    "class_name": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest",
    "child_classes": [],
    "src_path": "org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java",
    "signature": "org.mockitousage.bugs.ActualInvocationHasNullArgumentNPEBugTest.shouldAllowPassingNullArgument()",
    "snippet": "@Test public void shouldAllowPassingNullArgument(){\n  Fun mockFun\u003dmock(Fun.class);\n  when(mockFun.doFun((String)anyObject())).thenReturn(\"value\");\n  mockFun.doFun(null);\n  try {\n    verify(mockFun).doFun(\"hello\");\n  }\n catch (  AssertionError r) {\n  }\n}",
    "begin_line": 20,
    "end_line": 34,
    "comment": "",
    "child_ranges": [
      "(line 22,col 9)-(line 22,col 38)",
      "(line 23,col 9)-(line 23,col 70)",
      "(line 26,col 9)-(line 26,col 28)",
      "(line 29,col 9)-(line 33,col 9)"
    ]
  }
]