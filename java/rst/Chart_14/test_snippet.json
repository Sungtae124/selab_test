[
    [
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.suite()",
            "snippet": "public static Test suite() {\nreturn new TestSuite(XYPlotTests.class);\n}",
            "begin_line": 115,
            "end_line": 117,
            "comment": "    \n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
            "child_ranges": [
                "(line 116,col 9)-(line 116,col 48)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.XYPlotTests(String name)",
            "snippet": "public XYPlotTests(String name) {\nsuper(name);\n}",
            "begin_line": 124,
            "end_line": 126,
            "comment": "    \n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
            "child_ranges": [
                "(line 125,col 9)-(line 125,col 20)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testEquals()",
            "snippet": "public void testEquals() {\n\nXYPlot plot1 = new XYPlot();\nXYPlot plot2 = new XYPlot();\nassertTrue(plot1.equals(plot2));\n\n// orientation...",
            "begin_line": 142,
            "end_line": 148,
            "comment": "    \n     * Some checks for the equals() method.\n     ",
            "child_ranges": [
                "(line 143,col 0)-(line 143,col 8)",
                "(line 144,col 9)-(line 144,col 36)",
                "(line 145,col 9)-(line 145,col 36)",
                "(line 146,col 9)-(line 146,col 44)",
                "(line 147,col 0)-(line 147,col 8)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning()",
            "snippet": "public void testCloning() {\nXYPlot p1 = new XYPlot();\nXYPlot p2 = null;\ntry {",
            "begin_line": 395,
            "end_line": 398,
            "comment": "    \n     * Confirm that basic cloning works.\n     ",
            "child_ranges": [
                "(line 396,col 9)-(line 396,col 33)",
                "(line 397,col 9)-(line 397,col 25)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning2()",
            "snippet": "public void testCloning2() {\nXYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"),",
            "begin_line": 412,
            "end_line": 413,
            "comment": "    \n     * Tests cloning for a more complex plot.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantOrigin()",
            "snippet": "public void testCloning_QuadrantOrigin() {\nXYPlot p1 = new XYPlot();\nPoint2D p = new Point2D.Double(1.2, 3.4);\np1.setQuadrantOrigin(p);\nXYPlot p2 = null;\ntry {",
            "begin_line": 432,
            "end_line": 437,
            "comment": "    \n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
            "child_ranges": [
                "(line 433,col 9)-(line 433,col 33)",
                "(line 434,col 9)-(line 434,col 49)",
                "(line 435,col 9)-(line 435,col 32)",
                "(line 436,col 9)-(line 436,col 25)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloning_QuadrantPaint()",
            "snippet": "public void testCloning_QuadrantPaint() {\nXYPlot p1 = new XYPlot();\np1.setQuadrantPaint(3, new GradientPaint(1.0f, 2.0f, Color.red,",
            "begin_line": 452,
            "end_line": 454,
            "comment": "    \n     * Confirm that cloning captures the quadrantOrigin field.\n     ",
            "child_ranges": [
                "(line 453,col 9)-(line 453,col 33)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testCloneIndependence()",
            "snippet": "public void testCloneIndependence() {\nXYPlot p1 = new XYPlot(null, new NumberAxis(\"Domain Axis\"),",
            "begin_line": 477,
            "end_line": 478,
            "comment": "    \n     * Tests the independence of the clones.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetNullRenderer()",
            "snippet": "public void testSetNullRenderer() {\nboolean failed = false;\ntry {",
            "begin_line": 551,
            "end_line": 553,
            "comment": "    \n     * Setting a null renderer should be allowed, but is generating a null \n     * pointer exception in 0.9.7.\n     ",
            "child_ranges": [
                "(line 552,col 9)-(line 552,col 31)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization1()",
            "snippet": "public void testSerialization1() {\n\nXYDataset data = new XYSeriesCollection();\nNumberAxis domainAxis = new NumberAxis(\"Domain\");\nNumberAxis rangeAxis = new NumberAxis(\"Range\");\nStandardXYItemRenderer renderer = new StandardXYItemRenderer();\nXYPlot p1 = new XYPlot(data, domainAxis, rangeAxis, renderer);\nXYPlot p2 = null;\n\ntry {",
            "begin_line": 567,
            "end_line": 576,
            "comment": "    \n     * Serialize an instance, restore it, and check for equality.\n     ",
            "child_ranges": [
                "(line 568,col 0)-(line 568,col 0)",
                "(line 569,col 9)-(line 569,col 50)",
                "(line 570,col 9)-(line 570,col 57)",
                "(line 571,col 9)-(line 571,col 55)",
                "(line 572,col 9)-(line 572,col 71)",
                "(line 573,col 9)-(line 573,col 70)",
                "(line 574,col 9)-(line 574,col 25)",
                "(line 575,col 0)-(line 575,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization2()",
            "snippet": "public void testSerialization2() {\n\nIntervalXYDataset data1 = createDataset1();\nXYItemRenderer renderer1 = new XYBarRenderer(0.20);\nrenderer1.setBaseToolTipGenerator(",
            "begin_line": 599,
            "end_line": 603,
            "comment": "    \n     * Serialize an instance, restore it, and check for equality.  This test \n     * uses a {@link DateAxis} and a {@link StandardXYToolTipGenerator}.\n     ",
            "child_ranges": [
                "(line 600,col 0)-(line 600,col 0)",
                "(line 601,col 9)-(line 601,col 51)",
                "(line 602,col 9)-(line 602,col 59)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization3()",
            "snippet": "public void testSerialization3() {\n\nXYSeriesCollection dataset = new XYSeriesCollection();\nJFreeChart chart = ChartFactory.createXYLineChart(",
            "begin_line": 636,
            "end_line": 639,
            "comment": "    \n     * Problem to reproduce a bug in serialization.  The bug (first reported \n     * against the {@link org.jfree.chart.plot.CategoryPlot} class) is a null \n     * pointer exception that occurs when drawing a plot after deserialization.\n     * It is caused by four temporary storage structures (axesAtTop, \n     * axesAtBottom, axesAtLeft and axesAtRight - all initialized as empty \n     * lists in the constructor) not being initialized by the readObject() \n     * method following deserialization.  This test has been written to \n     * reproduce the bug (now fixed).\n     ",
            "child_ranges": [
                "(line 637,col 0)-(line 637,col 8)",
                "(line 638,col 9)-(line 638,col 62)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization4()",
            "snippet": "public void testSerialization4() {\n\nXYSeriesCollection dataset = new XYSeriesCollection();\nJFreeChart chart = ChartFactory.createXYLineChart(",
            "begin_line": 684,
            "end_line": 687,
            "comment": "    \n     * A test to reproduce a bug in serialization: the domain and/or range\n     * markers for a plot are not being serialized.\n     ",
            "child_ranges": [
                "(line 685,col 0)-(line 685,col 8)",
                "(line 686,col 9)-(line 686,col 62)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSerialization5()",
            "snippet": "public void testSerialization5() {\nXYSeriesCollection dataset1 = new XYSeriesCollection();\nNumberAxis domainAxis1 = new NumberAxis(\"Domain 1\");\nNumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\nStandardXYItemRenderer renderer1 = new StandardXYItemRenderer();\nXYPlot p1 = new XYPlot(dataset1, domainAxis1, rangeAxis1, renderer1);\nNumberAxis domainAxis2 = new NumberAxis(\"Domain 2\");\nNumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\nStandardXYItemRenderer renderer2 = new StandardXYItemRenderer();\nXYSeriesCollection dataset2 = new XYSeriesCollection();\np1.setDataset(1, dataset2);\np1.setDomainAxis(1, domainAxis2);\np1.setRangeAxis(1, rangeAxis2);\np1.setRenderer(1, renderer2);\nXYPlot p2 = null;\ntry {",
            "begin_line": 738,
            "end_line": 753,
            "comment": "    \n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
            "child_ranges": [
                "(line 739,col 9)-(line 739,col 63)",
                "(line 740,col 9)-(line 740,col 60)",
                "(line 741,col 9)-(line 741,col 58)",
                "(line 742,col 9)-(line 742,col 72)",
                "(line 743,col 9)-(line 743,col 77)",
                "(line 744,col 9)-(line 744,col 60)",
                "(line 745,col 9)-(line 745,col 58)",
                "(line 746,col 9)-(line 746,col 72)",
                "(line 747,col 9)-(line 747,col 63)",
                "(line 748,col 9)-(line 748,col 35)",
                "(line 749,col 9)-(line 749,col 41)",
                "(line 750,col 9)-(line 750,col 39)",
                "(line 751,col 9)-(line 751,col 37)",
                "(line 752,col 9)-(line 752,col 25)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetRendererForDataset()",
            "snippet": "public void testGetRendererForDataset() {\nXYDataset d0 = new XYSeriesCollection();\nXYDataset d1 = new XYSeriesCollection();\nXYDataset d2 = new XYSeriesCollection();\nXYDataset d3 = new XYSeriesCollection();  // not used by plot",
            "begin_line": 794,
            "end_line": 798,
            "comment": "    \n     * Some checks for the getRendererForDataset() method.\n     ",
            "child_ranges": [
                "(line 795,col 9)-(line 795,col 48)",
                "(line 796,col 9)-(line 796,col 48)",
                "(line 797,col 9)-(line 797,col 48)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testGetLegendItems()",
            "snippet": "public void testGetLegendItems() {\n// check the case where there is a secondary dataset that doesn't",
            "begin_line": 818,
            "end_line": 819,
            "comment": "    \n     * Some checks for the getLegendItems() method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset1()",
            "snippet": "private IntervalXYDataset createDataset1() {\n\n// create dataset 1...",
            "begin_line": 837,
            "end_line": 839,
            "comment": "    \n     * Creates a sample dataset.\n     *\n     * @return Series 1.\n     ",
            "child_ranges": [
                "(line 838,col 0)-(line 838,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.createDataset2()",
            "snippet": "private XYDataset createDataset2() {\n// create dataset 1...",
            "begin_line": 867,
            "end_line": 868,
            "comment": "    \n     * Creates a sample dataset.\n     *\n     * @return A sample dataset.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testSetRenderer()",
            "snippet": "public void testSetRenderer() {\nXYPlot plot = new XYPlot();\nXYItemRenderer renderer = new XYLineAndShapeRenderer();\nplot.setRenderer(renderer);\n// now make a change to the renderer and see if it triggers a plot",
            "begin_line": 879,
            "end_line": 883,
            "comment": "    \n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
            "child_ranges": [
                "(line 880,col 9)-(line 880,col 35)",
                "(line 881,col 9)-(line 881,col 63)",
                "(line 882,col 9)-(line 882,col 35)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveAnnotation()",
            "snippet": "public void testRemoveAnnotation() {\nXYPlot plot = new XYPlot();\nXYTextAnnotation a1 = new XYTextAnnotation(\"X\", 1.0, 2.0);\nXYTextAnnotation a2 = new XYTextAnnotation(\"X\", 3.0, 4.0);\nXYTextAnnotation a3 = new XYTextAnnotation(\"X\", 1.0, 2.0);\nplot.addAnnotation(a1);\nplot.addAnnotation(a2);\nplot.addAnnotation(a3);\nplot.removeAnnotation(a2);\nXYTextAnnotation x = (XYTextAnnotation) plot.getAnnotations().get(0);\nassertEquals(x, a1);\n\n// now remove a3, but since a3.equals(a1), this will in fact remove",
            "begin_line": 894,
            "end_line": 906,
            "comment": "    \n     * Some checks for the removeAnnotation() method.\n     ",
            "child_ranges": [
                "(line 895,col 9)-(line 895,col 35)",
                "(line 896,col 9)-(line 896,col 66)",
                "(line 897,col 9)-(line 897,col 66)",
                "(line 898,col 9)-(line 898,col 66)",
                "(line 899,col 9)-(line 899,col 31)",
                "(line 900,col 9)-(line 900,col 31)",
                "(line 901,col 9)-(line 901,col 31)",
                "(line 902,col 9)-(line 902,col 34)",
                "(line 903,col 9)-(line 903,col 77)",
                "(line 904,col 9)-(line 904,col 28)",
                "(line 905,col 0)-(line 905,col 8)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddDomainMarker()",
            "snippet": "public void testAddDomainMarker() {\nXYPlot plot = new XYPlot();\nMarker m = new ValueMarker(1.0);\nplot.addDomainMarker(m);\nList listeners = Arrays.asList(m.getListeners(",
            "begin_line": 917,
            "end_line": 921,
            "comment": "    \n     * Some tests for the addDomainMarker() method(s).\n     ",
            "child_ranges": [
                "(line 918,col 9)-(line 918,col 35)",
                "(line 919,col 9)-(line 919,col 40)",
                "(line 920,col 9)-(line 920,col 32)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testAddRangeMarker()",
            "snippet": "public void testAddRangeMarker() {\nXYPlot plot = new XYPlot();\nMarker m = new ValueMarker(1.0);\nplot.addRangeMarker(m);\nList listeners = Arrays.asList(m.getListeners(",
            "begin_line": 932,
            "end_line": 936,
            "comment": "    \n     * Some tests for the addRangeMarker() method(s).\n     ",
            "child_ranges": [
                "(line 933,col 9)-(line 933,col 35)",
                "(line 934,col 9)-(line 934,col 40)",
                "(line 935,col 9)-(line 935,col 31)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.test1654215()",
            "snippet": "public void test1654215() {\nDefaultXYDataset dataset = new DefaultXYDataset();\nJFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",",
            "begin_line": 948,
            "end_line": 950,
            "comment": "    \n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
            "child_ranges": [
                "(line 949,col 9)-(line 949,col 58)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines()",
            "snippet": "public void testDrawRangeGridlines() {\nDefaultXYDataset dataset = new DefaultXYDataset();\nJFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",",
            "begin_line": 974,
            "end_line": 976,
            "comment": "    \n     * A test for drawing range grid lines when there is no primary renderer.\n     * In 1.0.4, this is throwing a NullPointerException.\n     ",
            "child_ranges": [
                "(line 975,col 9)-(line 975,col 58)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testDrawSeriesWithZeroItems()",
            "snippet": "public void testDrawSeriesWithZeroItems() {\nDefaultXYDataset dataset = new DefaultXYDataset();\ndataset.addSeries(\"Series 1\", new double[][] {{1.0, 2.0}, {3.0, 4.0}});\ndataset.addSeries(\"Series 2\", new double[][] {{}, {}});\nJFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",",
            "begin_line": 1000,
            "end_line": 1004,
            "comment": "    \n     * A test for drawing a plot where a series has zero items.  With\n     * JFreeChart 1.0.5+cvs this was throwing an exception at one point.\n     ",
            "child_ranges": [
                "(line 1001,col 9)-(line 1001,col 58)",
                "(line 1002,col 9)-(line 1002,col 79)",
                "(line 1003,col 9)-(line 1003,col 63)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveDomainMarker()",
            "snippet": "public void testRemoveDomainMarker() {\nXYPlot plot = new XYPlot();\nassertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));\n}",
            "begin_line": 1026,
            "end_line": 1029,
            "comment": "    \n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
            "child_ranges": [
                "(line 1027,col 5)-(line 1027,col 32)",
                "(line 1028,col 5)-(line 1028,col 64)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.XYPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.XYPlotTests.testRemoveRangeMarker()",
            "snippet": "public void testRemoveRangeMarker() {\nXYPlot plot = new XYPlot();\nassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n}",
            "begin_line": 1035,
            "end_line": 1038,
            "comment": "    \n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
            "child_ranges": [
                "(line 1036,col 5)-(line 1036,col 32)",
                "(line 1037,col 5)-(line 1037,col 63)"
            ]
        }
    ],
    [
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.suite()",
            "snippet": "public static Test suite() {\nreturn new TestSuite(CategoryPlotTests.class);\n}",
            "begin_line": 106,
            "end_line": 108,
            "comment": "    \n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
            "child_ranges": [
                "(line 107,col 9)-(line 107,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.CategoryPlotTests(String name)",
            "snippet": "public CategoryPlotTests(String name) {\nsuper(name);\n}",
            "begin_line": 115,
            "end_line": 117,
            "comment": "    \n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
            "child_ranges": [
                "(line 116,col 9)-(line 116,col 20)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testConstructor()",
            "snippet": "public void testConstructor() {\nCategoryPlot plot = new CategoryPlot();\nassertEquals(new RectangleInsets(4.0, 4.0, 4.0, 4.0),",
            "begin_line": 122,
            "end_line": 124,
            "comment": "    \n     * Some checks for the constructor.\n     ",
            "child_ranges": [
                "(line 123,col 9)-(line 123,col 47)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange()",
            "snippet": "public void testAxisRange() {\nDefaultCategoryDataset datasetA = new DefaultCategoryDataset();\nDefaultCategoryDataset datasetB = new DefaultCategoryDataset();\ndatasetB.addValue(50.0, \"R1\", \"C1\");\ndatasetB.addValue(80.0, \"R1\", \"C1\");\nCategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null),",
            "begin_line": 131,
            "end_line": 136,
            "comment": "    \n     * A test for a bug reported in the forum.\n     ",
            "child_ranges": [
                "(line 132,col 9)-(line 132,col 71)",
                "(line 133,col 9)-(line 133,col 71)",
                "(line 134,col 9)-(line 134,col 44)",
                "(line 135,col 9)-(line 135,col 44)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testEquals()",
            "snippet": "public void testEquals() {\n\nCategoryPlot plot1 = new CategoryPlot();\nCategoryPlot plot2 = new CategoryPlot();\nassertTrue(plot1.equals(plot2));\nassertTrue(plot2.equals(plot1));\n\n// orientation...",
            "begin_line": 147,
            "end_line": 154,
            "comment": "    \n     * Test that the equals() method differentiates all the required fields.\n     ",
            "child_ranges": [
                "(line 148,col 0)-(line 148,col 8)",
                "(line 149,col 9)-(line 149,col 48)",
                "(line 150,col 9)-(line 150,col 48)",
                "(line 151,col 9)-(line 151,col 44)",
                "(line 152,col 9)-(line 152,col 40)",
                "(line 153,col 0)-(line 153,col 8)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testCloning()",
            "snippet": "public void testCloning() {\nCategoryPlot p1 = new CategoryPlot();\np1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white,",
            "begin_line": 402,
            "end_line": 404,
            "comment": "    \n     * Confirm that cloning works.\n     ",
            "child_ranges": [
                "(line 403,col 9)-(line 403,col 45)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization()",
            "snippet": "public void testSerialization() {\n\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nCategoryAxis domainAxis = new CategoryAxis(\"Domain\");\nNumberAxis rangeAxis = new NumberAxis(\"Range\");\nBarRenderer renderer = new BarRenderer();\nCategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis,",
            "begin_line": 422,
            "end_line": 428,
            "comment": "    \n     * Serialize an instance, restore it, and check for equality.\n     ",
            "child_ranges": [
                "(line 423,col 0)-(line 423,col 0)",
                "(line 424,col 9)-(line 424,col 70)",
                "(line 425,col 9)-(line 425,col 61)",
                "(line 426,col 9)-(line 426,col 55)",
                "(line 427,col 9)-(line 427,col 49)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2()",
            "snippet": "public void testSerialization2() {\n\nDefaultCategoryDataset data = new DefaultCategoryDataset();\nCategoryAxis domainAxis = new CategoryAxis(\"Domain\");\nNumberAxis rangeAxis = new NumberAxis(\"Range\");\nBarRenderer renderer = new BarRenderer();\nCategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis,",
            "begin_line": 452,
            "end_line": 458,
            "comment": "    \n     * Serialize an instance, restore it, and check for equality.\n     ",
            "child_ranges": [
                "(line 453,col 0)-(line 453,col 0)",
                "(line 454,col 9)-(line 454,col 67)",
                "(line 455,col 9)-(line 455,col 61)",
                "(line 456,col 9)-(line 456,col 55)",
                "(line 457,col 9)-(line 457,col 49)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3()",
            "snippet": "public void testSerialization3() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nJFreeChart chart = ChartFactory.createBarChart(",
            "begin_line": 484,
            "end_line": 486,
            "comment": "    \n     * Serialize an instance, restore it, and check for equality.\n     ",
            "child_ranges": [
                "(line 485,col 9)-(line 485,col 70)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4()",
            "snippet": "public void testSerialization4() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nJFreeChart chart = ChartFactory.createBarChart(",
            "begin_line": 529,
            "end_line": 531,
            "comment": "    \n     * This test ensures that a plot with markers is serialized correctly.\n     ",
            "child_ranges": [
                "(line 530,col 9)-(line 530,col 70)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5()",
            "snippet": "public void testSerialization5() {\nDefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\nCategoryAxis domainAxis1 = new CategoryAxis(\"Domain 1\");\nNumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\nBarRenderer renderer1 = new BarRenderer();\nCategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1,",
            "begin_line": 580,
            "end_line": 585,
            "comment": "    \n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
            "child_ranges": [
                "(line 581,col 9)-(line 581,col 71)",
                "(line 582,col 9)-(line 582,col 64)",
                "(line 583,col 9)-(line 583,col 58)",
                "(line 584,col 9)-(line 584,col 50)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer()",
            "snippet": "public void testSetRenderer() {\nCategoryPlot plot = new CategoryPlot();\nCategoryItemRenderer renderer = new LineAndShapeRenderer();\nplot.setRenderer(renderer);\n// now make a change to the renderer and see if it triggers a plot",
            "begin_line": 637,
            "end_line": 641,
            "comment": "    \n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
            "child_ranges": [
                "(line 638,col 9)-(line 638,col 47)",
                "(line 639,col 9)-(line 639,col 67)",
                "(line 640,col 9)-(line 640,col 35)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1169972()",
            "snippet": "public void test1169972() {\nCategoryPlot plot = new CategoryPlot(null, null, null, null);\nplot.setDomainAxis(new CategoryAxis(\"C\"));\nplot.setRangeAxis(new NumberAxis(\"Y\"));\nplot.setRenderer(new BarRenderer());\nplot.setDataset(new DefaultCategoryDataset());\nassertTrue(plot != null);\n}",
            "begin_line": 652,
            "end_line": 659,
            "comment": "    \n     * A test for bug report 1169972.\n     ",
            "child_ranges": [
                "(line 653,col 9)-(line 653,col 69)",
                "(line 654,col 9)-(line 654,col 50)",
                "(line 655,col 9)-(line 655,col 47)",
                "(line 656,col 9)-(line 656,col 44)",
                "(line 657,col 9)-(line 657,col 54)",
                "(line 658,col 9)-(line 658,col 33)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker()",
            "snippet": "public void testAddDomainMarker() {\nCategoryPlot plot = new CategoryPlot();\nCategoryMarker m = new CategoryMarker(\"C1\");\nplot.addDomainMarker(m);\nList listeners = Arrays.asList(m.getListeners(",
            "begin_line": 664,
            "end_line": 668,
            "comment": "    \n     * Some tests for the addDomainMarker() method(s).\n     ",
            "child_ranges": [
                "(line 665,col 9)-(line 665,col 47)",
                "(line 666,col 9)-(line 666,col 52)",
                "(line 667,col 9)-(line 667,col 32)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker()",
            "snippet": "public void testAddRangeMarker() {\nCategoryPlot plot = new CategoryPlot();\nMarker m = new ValueMarker(1.0);\nplot.addRangeMarker(m);\nList listeners = Arrays.asList(m.getListeners(",
            "begin_line": 679,
            "end_line": 683,
            "comment": "    \n     * Some tests for the addRangeMarker() method(s).\n     ",
            "child_ranges": [
                "(line 680,col 9)-(line 680,col 47)",
                "(line 681,col 9)-(line 681,col 40)",
                "(line 682,col 9)-(line 682,col 31)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1654215()",
            "snippet": "public void test1654215() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nJFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",",
            "begin_line": 695,
            "end_line": 697,
            "comment": "    \n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
            "child_ranges": [
                "(line 696,col 9)-(line 696,col 70)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetDomainAxisIndex()",
            "snippet": "public void testGetDomainAxisIndex() {\nCategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\nCategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\nNumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\nCategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1,",
            "begin_line": 720,
            "end_line": 724,
            "comment": "    \n     * Some checks for the getDomainAxisIndex() method.\n     ",
            "child_ranges": [
                "(line 721,col 9)-(line 721,col 58)",
                "(line 722,col 9)-(line 722,col 58)",
                "(line 723,col 9)-(line 723,col 53)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testGetRangeAxisIndex()",
            "snippet": "public void testGetRangeAxisIndex() {\nCategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\nNumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\nNumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\nCategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1,",
            "begin_line": 744,
            "end_line": 748,
            "comment": "    \n     * Some checks for the getRangeAxisIndex() method.\n     ",
            "child_ranges": [
                "(line 745,col 9)-(line 745,col 58)",
                "(line 746,col 9)-(line 746,col 53)",
                "(line 747,col 9)-(line 747,col 53)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveDomainMarker()",
            "snippet": "public void testRemoveDomainMarker() {\nCategoryPlot plot = new CategoryPlot();\nassertFalse(plot.removeDomainMarker(new CategoryMarker(\"Category 1\")));\n}",
            "begin_line": 769,
            "end_line": 772,
            "comment": "    \n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
            "child_ranges": [
                "(line 770,col 5)-(line 770,col 44)",
                "(line 771,col 5)-(line 771,col 76)"
            ]
        },
        {
            "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
            "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testRemoveRangeMarker()",
            "snippet": "public void testRemoveRangeMarker() {\nCategoryPlot plot = new CategoryPlot();\nassertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));\n}",
            "begin_line": 778,
            "end_line": 781,
            "comment": "    \n     * Check that removing a marker that isn't assigned to the plot returns \n     * false.\n     ",
            "child_ranges": [
                "(line 779,col 5)-(line 779,col 44)",
                "(line 780,col 5)-(line 780,col 63)"
            ]
        }
    ]
]