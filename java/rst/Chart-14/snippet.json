[
  {
    "name": "ChartColor.ChartColor#136",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/ChartColor.java",
    "class_name": "org.jfree.chart.ChartColor",
    "signature": "org.jfree.chart.ChartColor.ChartColor",
    "snippet": "public ChartColor(int r,int g,int b){\n  super(r,g,b);\n}",
    "begin_line": 136,
    "end_line": 140,
    "comment": "/** \n * Creates a Color with an opaque sRGB with red, green and blue values in  range 0-255.\n * @param r  the red component in range 0x00-0xFF.\n * @param g  the green component in range 0x00-0xFF.\n * @param b  the blue component in range 0x00-0xFF.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartColor.createDefaultPaintArray#146",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/ChartColor.java",
    "class_name": "org.jfree.chart.ChartColor",
    "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray",
    "snippet": "public static Paint[] createDefaultPaintArray(){\n  return new Paint[]{new Color(0xFF,0x55,0x55),new Color(0x55,0x55,0xFF),new Color(0x55,0xFF,0x55),new Color(0xFF,0xFF,0x55),new Color(0xFF,0x55,0xFF),new Color(0x55,0xFF,0xFF),Color.pink,Color.gray,ChartColor.DARK_RED,ChartColor.DARK_BLUE,ChartColor.DARK_GREEN,ChartColor.DARK_YELLOW,ChartColor.DARK_MAGENTA,ChartColor.DARK_CYAN,Color.darkGray,ChartColor.LIGHT_RED,ChartColor.LIGHT_BLUE,ChartColor.LIGHT_GREEN,ChartColor.LIGHT_YELLOW,ChartColor.LIGHT_MAGENTA,ChartColor.LIGHT_CYAN,Color.lightGray,ChartColor.VERY_DARK_RED,ChartColor.VERY_DARK_BLUE,ChartColor.VERY_DARK_GREEN,ChartColor.VERY_DARK_YELLOW,ChartColor.VERY_DARK_MAGENTA,ChartColor.VERY_DARK_CYAN,ChartColor.VERY_LIGHT_RED,ChartColor.VERY_LIGHT_BLUE,ChartColor.VERY_LIGHT_GREEN,ChartColor.VERY_LIGHT_YELLOW,ChartColor.VERY_LIGHT_MAGENTA,ChartColor.VERY_LIGHT_CYAN};\n}",
    "begin_line": 146,
    "end_line": 187,
    "comment": "/** \n * Convenience method to return an array of \u003ccode\u003ePaint\u003c/code\u003e objects that represent the pre-defined colors in the \u003ccode\u003eColor\u003ccode\u003e and  \u003ccode\u003eChartColor\u003c/code\u003e objects.\n * @return An array of objects with the \u003ccode\u003ePaint\u003c/code\u003e interface.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.AxisLocation#83",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation",
    "snippet": "private AxisLocation(String name){\n  this.name\u003dname;\n}",
    "begin_line": 83,
    "end_line": 86,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.getOpposite#93",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.getOpposite",
    "snippet": "public AxisLocation getOpposite(){\n  return getOpposite(this);\n}",
    "begin_line": 93,
    "end_line": 97,
    "comment": "/** \n * Returns the location that is opposite to this location.\n * @return The opposite location.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.toString#103",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 103,
    "end_line": 106,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.equals#113",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof AxisLocation)) {\n    return false;\n  }\n  AxisLocation location\u003d(AxisLocation)obj;\n  if (!this.name.equals(location.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 113,
    "end_line": 130,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.getOpposite#137",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.getOpposite",
    "snippet": "public static AxisLocation getOpposite(AxisLocation location){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  AxisLocation result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    result\u003dAxisLocation.BOTTOM_OR_RIGHT;\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    result\u003dAxisLocation.BOTTOM_OR_LEFT;\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    result\u003dAxisLocation.TOP_OR_RIGHT;\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    result\u003dAxisLocation.TOP_OR_LEFT;\n  }\n else {\n    throw new IllegalStateException(\"AxisLocation not recognised.\");\n  }\n  return result;\n}",
    "begin_line": 137,
    "end_line": 160,
    "comment": "/** \n * Returns the location that is opposite to the supplied location.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The opposite location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.readResolve#167",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(AxisLocation.TOP_OR_RIGHT)) {\n    return AxisLocation.TOP_OR_RIGHT;\n  }\n else   if (this.equals(AxisLocation.BOTTOM_OR_RIGHT)) {\n    return AxisLocation.BOTTOM_OR_RIGHT;\n  }\n else   if (this.equals(AxisLocation.TOP_OR_LEFT)) {\n    return AxisLocation.TOP_OR_LEFT;\n  }\n else   if (this.equals(AxisLocation.BOTTOM_OR_LEFT)) {\n    return AxisLocation.BOTTOM_OR_LEFT;\n  }\n  return null;\n}",
    "begin_line": 167,
    "end_line": 183,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryAnchor.CategoryAnchor#74",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
    "class_name": "org.jfree.chart.axis.CategoryAnchor",
    "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor",
    "snippet": "private CategoryAnchor(String name){\n  this.name\u003dname;\n}",
    "begin_line": 74,
    "end_line": 77,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryAnchor.toString#83",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
    "class_name": "org.jfree.chart.axis.CategoryAnchor",
    "signature": "org.jfree.chart.axis.CategoryAnchor.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 83,
    "end_line": 86,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryAnchor.equals#93",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
    "class_name": "org.jfree.chart.axis.CategoryAnchor",
    "signature": "org.jfree.chart.axis.CategoryAnchor.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof CategoryAnchor)) {\n    return false;\n  }\n  CategoryAnchor position\u003d(CategoryAnchor)obj;\n  if (!this.name.equals(position.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 93,
    "end_line": 110,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryAnchor.readResolve#117",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
    "class_name": "org.jfree.chart.axis.CategoryAnchor",
    "signature": "org.jfree.chart.axis.CategoryAnchor.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(CategoryAnchor.START)) {\n    return CategoryAnchor.START;\n  }\n else   if (this.equals(CategoryAnchor.MIDDLE)) {\n    return CategoryAnchor.MIDDLE;\n  }\n else   if (this.equals(CategoryAnchor.END)) {\n    return CategoryAnchor.END;\n  }\n  return null;\n}",
    "begin_line": 117,
    "end_line": 130,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#66",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent",
    "snippet": "public ChartChangeEvent(Object source){\n  this(source,null,ChartChangeEventType.GENERAL);\n}",
    "begin_line": 66,
    "end_line": 70,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title, an axis etc.)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#77",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent",
    "snippet": "public ChartChangeEvent(Object source,JFreeChart chart){\n  this(source,chart,ChartChangeEventType.GENERAL);\n}",
    "begin_line": 77,
    "end_line": 81,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title, an axis etc.)\n * @param chart  the chart that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#89",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent",
    "snippet": "public ChartChangeEvent(Object source,JFreeChart chart,ChartChangeEventType type){\n  super(source);\n  this.chart\u003dchart;\n  this.type\u003dtype;\n}",
    "begin_line": 89,
    "end_line": 96,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title, anaxis etc.)\n * @param chart  the chart that generated the event.\n * @param type  the type of event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.getChart#102",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.getChart",
    "snippet": "public JFreeChart getChart(){\n  return this.chart;\n}",
    "begin_line": 102,
    "end_line": 105,
    "comment": "/** \n * Returns the chart that generated the change event.\n * @return The chart that generated the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.setChart#111",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.setChart",
    "snippet": "public void setChart(JFreeChart chart){\n  this.chart\u003dchart;\n}",
    "begin_line": 111,
    "end_line": 114,
    "comment": "/** \n * Sets the chart that generated the change event.\n * @param chart  the chart that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.getType#120",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.getType",
    "snippet": "public ChartChangeEventType getType(){\n  return this.type;\n}",
    "begin_line": 120,
    "end_line": 123,
    "comment": "/** \n * Returns the event type.\n * @return The event type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.setType#129",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.setType",
    "snippet": "public void setType(ChartChangeEventType type){\n  this.type\u003dtype;\n}",
    "begin_line": 129,
    "end_line": 132,
    "comment": "/** \n * Sets the event type.\n * @param type  the event type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.ChartChangeEventType#73",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType",
    "snippet": "private ChartChangeEventType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 73,
    "end_line": 76,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.toString#82",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 82,
    "end_line": 85,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.equals#92",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof ChartChangeEventType)) {\n    return false;\n  }\n  ChartChangeEventType that\u003d(ChartChangeEventType)obj;\n  if (!this.name.equals(that.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 92,
    "end_line": 107,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.hashCode#113",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 113,
    "end_line": 116,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.readResolve#123",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(ChartChangeEventType.GENERAL)) {\n    return ChartChangeEventType.GENERAL;\n  }\n else   if (this.equals(ChartChangeEventType.NEW_DATASET)) {\n    return ChartChangeEventType.NEW_DATASET;\n  }\n else   if (this.equals(ChartChangeEventType.DATASET_UPDATED)) {\n    return ChartChangeEventType.DATASET_UPDATED;\n  }\n  return null;\n}",
    "begin_line": 123,
    "end_line": 136,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MarkerChangeEvent.MarkerChangeEvent#57",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
    "class_name": "org.jfree.chart.event.MarkerChangeEvent",
    "signature": "org.jfree.chart.event.MarkerChangeEvent.MarkerChangeEvent",
    "snippet": "public MarkerChangeEvent(Marker marker){\n  super(marker);\n  this.marker\u003dmarker;\n}",
    "begin_line": 57,
    "end_line": 67,
    "comment": "/** \n * Creates a new \u003ccode\u003eMarkerChangeEvent\u003c/code\u003e instance.\n * @param marker  the marker that triggered the event (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MarkerChangeEvent.getMarker#74",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
    "class_name": "org.jfree.chart.event.MarkerChangeEvent",
    "signature": "org.jfree.chart.event.MarkerChangeEvent.getMarker",
    "snippet": "public Marker getMarker(){\n  return this.marker;\n}",
    "begin_line": 74,
    "end_line": 78,
    "comment": "/** \n * Returns the marker that triggered the event.\n * @return The marker that triggered the event (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotChangeEvent.PlotChangeEvent#59",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
    "class_name": "org.jfree.chart.event.PlotChangeEvent",
    "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent",
    "snippet": "public PlotChangeEvent(Plot plot){\n  super(plot);\n  this.plot\u003dplot;\n}",
    "begin_line": 59,
    "end_line": 66,
    "comment": "/** \n * Creates a new PlotChangeEvent.\n * @param plot  the plot that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotChangeEvent.getPlot#72",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
    "class_name": "org.jfree.chart.event.PlotChangeEvent",
    "signature": "org.jfree.chart.event.PlotChangeEvent.getPlot",
    "snippet": "public Plot getPlot(){\n  return this.plot;\n}",
    "begin_line": 72,
    "end_line": 75,
    "comment": "/** \n * Returns the plot that generated the event.\n * @return The plot that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.CategoryMarker#78",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker",
    "snippet": "public CategoryMarker(Comparable key){\n  this(key,Color.gray,new BasicStroke(1.0f));\n}",
    "begin_line": 78,
    "end_line": 81,
    "comment": "/** \n * Creates a new category marker for the specified category.\n * @param key  the category key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.CategoryMarker#89",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker",
    "snippet": "public CategoryMarker(Comparable key,Paint paint,Stroke stroke){\n  this(key,paint,stroke,paint,stroke,1.0f);\n}",
    "begin_line": 89,
    "end_line": 92,
    "comment": "/** \n * Creates a new category marker.\n * @param key  the key.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.CategoryMarker#103",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.CategoryMarker",
    "snippet": "public CategoryMarker(Comparable key,Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){\n  super(paint,stroke,outlinePaint,outlineStroke,alpha);\n  this.key\u003dkey;\n  setLabelOffsetType(LengthAdjustmentType.EXPAND);\n}",
    "begin_line": 103,
    "end_line": 110,
    "comment": "/** \n * Creates a new category marker.\n * @param key  the key.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param outlinePaint  the outline paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param outlineStroke  the outline stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param alpha  the alpha transparency.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.getKey#116",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.getKey",
    "snippet": "public Comparable getKey(){\n  return this.key;\n}",
    "begin_line": 116,
    "end_line": 119,
    "comment": "/** \n * Returns the key.\n * @return The key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.setKey#126",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.setKey",
    "snippet": "public void setKey(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  this.key\u003dkey;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 126,
    "end_line": 135,
    "comment": "/** \n * Sets the key and sends a  {@link MarkerChangeEvent} to all registeredlisteners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.getDrawAsLine#141",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.getDrawAsLine",
    "snippet": "public boolean getDrawAsLine(){\n  return this.drawAsLine;\n}",
    "begin_line": 141,
    "end_line": 145,
    "comment": "/** \n * Returns the flag that controls whether the marker is drawn as a region  or a line.\n * @return A line.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.setDrawAsLine#151",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.setDrawAsLine",
    "snippet": "public void setDrawAsLine(boolean drawAsLine){\n  this.drawAsLine\u003ddrawAsLine;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 151,
    "end_line": 157,
    "comment": "/** \n * Sets the flag that controls whether the marker is drawn as a region or as a line, and sends a  {@link MarkerChangeEvent} to all registeredlisteners.\n * @param drawAsLine  the flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryMarker.equals#164",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryMarker.java",
    "class_name": "org.jfree.chart.plot.CategoryMarker",
    "signature": "org.jfree.chart.plot.CategoryMarker.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  if (!(obj instanceof CategoryMarker)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  CategoryMarker that\u003d(CategoryMarker)obj;\n  if (!this.key.equals(that.key)) {\n    return false;\n  }\n  if (this.drawAsLine !\u003d that.drawAsLine) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 164,
    "end_line": 184,
    "comment": "/** \n * Tests the marker for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.CategoryPlot#429",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot",
    "snippet": "public CategoryPlot(){\n  this(null,null,null,null);\n}",
    "begin_line": 429,
    "end_line": 431,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.CategoryPlot#440",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot",
    "snippet": "public CategoryPlot(CategoryDataset dataset,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryItemRenderer renderer){\n  super();\n  this.orientation\u003dPlotOrientation.VERTICAL;\n  this.domainAxes\u003dnew ObjectList();\n  this.domainAxisLocations\u003dnew ObjectList();\n  this.rangeAxes\u003dnew ObjectList();\n  this.rangeAxisLocations\u003dnew ObjectList();\n  this.datasetToDomainAxisMap\u003dnew ObjectList();\n  this.datasetToRangeAxisMap\u003dnew ObjectList();\n  this.renderers\u003dnew ObjectList();\n  this.datasets\u003dnew ObjectList();\n  this.datasets.set(0,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  this.axisOffset\u003dnew RectangleInsets(4.0,4.0,4.0,4.0);\n  setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT,false);\n  setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);\n  this.renderers.set(0,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  this.domainAxes.set(0,domainAxis);\n  this.mapDatasetToDomainAxis(0,0);\n  if (domainAxis !\u003d null) {\n    domainAxis.setPlot(this);\n    domainAxis.addChangeListener(this);\n  }\n  this.drawSharedDomainAxis\u003dfalse;\n  this.rangeAxes.set(0,rangeAxis);\n  this.mapDatasetToRangeAxis(0,0);\n  if (rangeAxis !\u003d null) {\n    rangeAxis.setPlot(this);\n    rangeAxis.addChangeListener(this);\n  }\n  configureDomainAxes();\n  configureRangeAxes();\n  this.domainGridlinesVisible\u003dDEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n  this.domainGridlinePosition\u003dCategoryAnchor.MIDDLE;\n  this.domainGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.domainGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.rangeGridlinesVisible\u003dDEFAULT_RANGE_GRIDLINES_VISIBLE;\n  this.rangeGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.rangeGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.foregroundDomainMarkers\u003dnew HashMap();\n  this.backgroundDomainMarkers\u003dnew HashMap();\n  this.foregroundRangeMarkers\u003dnew HashMap();\n  this.backgroundRangeMarkers\u003dnew HashMap();\n  Marker baseline\u003dnew ValueMarker(0.0,new Color(0.8f,0.8f,0.8f,0.5f),new BasicStroke(1.0f),new Color(0.85f,0.85f,0.95f,0.5f),new BasicStroke(1.0f),0.6f);\n  addRangeMarker(baseline,Layer.BACKGROUND);\n  this.anchorValue\u003d0.0;\n  this.rangeCrosshairVisible\u003dDEFAULT_CROSSHAIR_VISIBLE;\n  this.rangeCrosshairValue\u003d0.0;\n  this.rangeCrosshairStroke\u003dDEFAULT_CROSSHAIR_STROKE;\n  this.rangeCrosshairPaint\u003dDEFAULT_CROSSHAIR_PAINT;\n  this.annotations\u003dnew java.util.ArrayList();\n}",
    "begin_line": 440,
    "end_line": 525,
    "comment": "/** \n * Creates a new plot.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param domainAxis  the domain axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param rangeAxis  the range axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param renderer  the item renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getPlotType#531",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getPlotType",
    "snippet": "public String getPlotType(){\n  return localizationResources.getString(\"Category_Plot\");\n}",
    "begin_line": 531,
    "end_line": 534,
    "comment": "/** \n * Returns a string describing the type of plot.\n * @return The type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getOrientation#541",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getOrientation",
    "snippet": "public PlotOrientation getOrientation(){\n  return this.orientation;\n}",
    "begin_line": 541,
    "end_line": 545,
    "comment": "/** \n * Returns the orientation of the plot.\n * @return The orientation of the plot (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOrientation(PlotOrientation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setOrientation#552",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setOrientation",
    "snippet": "public void setOrientation(PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  this.orientation\u003dorientation;\n  fireChangeEvent();\n}",
    "begin_line": 552,
    "end_line": 561,
    "comment": "/** \n * Sets the orientation for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getAxisOffset#568",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getAxisOffset",
    "snippet": "public RectangleInsets getAxisOffset(){\n  return this.axisOffset;\n}",
    "begin_line": 568,
    "end_line": 572,
    "comment": "/** \n * Returns the axis offset.\n * @return The axis offset (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setAxisOffset#579",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setAxisOffset",
    "snippet": "public void setAxisOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.axisOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 579,
    "end_line": 588,
    "comment": "/** \n * Sets the axis offsets (gap between the data area and the axes) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxis#595",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxis",
    "snippet": "public CategoryAxis getDomainAxis(){\n  return getDomainAxis(0);\n}",
    "begin_line": 595,
    "end_line": 601,
    "comment": "/** \n * Returns the domain axis for the plot.  If the domain axis for this plot is \u003ccode\u003enull\u003c/code\u003e, then the method will return the parent plot\u0027s  domain axis (if there is a parent plot).\n * @return The domain axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #setDomainAxis(CategoryAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxis#609",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxis",
    "snippet": "public CategoryAxis getDomainAxis(int index){\n  CategoryAxis result\u003dnull;\n  if (index \u003c this.domainAxes.size()) {\n    result\u003d(CategoryAxis)this.domainAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof CategoryPlot) {\n      CategoryPlot cp\u003d(CategoryPlot)parent;\n      result\u003dcp.getDomainAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 609,
    "end_line": 625,
    "comment": "/** \n * Returns a domain axis.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setDomainAxis(int,CategoryAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxis#632",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(CategoryAxis axis){\n  setDomainAxis(0,axis);\n}",
    "begin_line": 632,
    "end_line": 637,
    "comment": "/** \n * Sets the domain axis for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxis#645",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(int index,CategoryAxis axis){\n  setDomainAxis(index,axis,true);\n}",
    "begin_line": 645,
    "end_line": 650,
    "comment": "/** \n * Sets a domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxis#658",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(int index,CategoryAxis axis,boolean notify){\n  CategoryAxis existing\u003d(CategoryAxis)this.domainAxes.get(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.domainAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 658,
    "end_line": 676,
    "comment": "/** \n * Sets a domain axis and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxes#683",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxes",
    "snippet": "public void setDomainAxes(CategoryAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setDomainAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 683,
    "end_line": 691,
    "comment": "/** \n * Sets the domain axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setRangeAxes(ValueAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisIndex#701",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisIndex",
    "snippet": "public int getDomainAxisIndex(CategoryAxis axis){\n  if (axis \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axis\u0027 argument.\");\n  }\n  return this.domainAxes.indexOf(axis);\n}",
    "begin_line": 701,
    "end_line": 711,
    "comment": "/** \n * Returns the index of the specified axis, or \u003ccode\u003e-1\u003c/code\u003e if the axis is not assigned to the plot.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The axis index.\n * @see #getDomainAxis(int)\n * @see #getRangeAxisIndex(ValueAxis)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisLocation#718",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation",
    "snippet": "public AxisLocation getDomainAxisLocation(){\n  return getDomainAxisLocation(0);\n}",
    "begin_line": 718,
    "end_line": 722,
    "comment": "/** \n * Returns the domain axis location for the primary domain axis.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #getRangeAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisLocation#730",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation",
    "snippet": "public AxisLocation getDomainAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.domainAxisLocations.size()) {\n    result\u003d(AxisLocation)this.domainAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getDomainAxisLocation(0));\n  }\n  return result;\n}",
    "begin_line": 730,
    "end_line": 742,
    "comment": "/** \n * Returns the location for a domain axis.\n * @param index  the axis index.\n * @return The location.\n * @see #setDomainAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxisLocation#748",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(AxisLocation location){\n  setDomainAxisLocation(0,location,true);\n}",
    "begin_line": 748,
    "end_line": 756,
    "comment": "/** \n * Sets the location of the domain axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param location  the axis location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainAxisLocation()\n * @see #setDomainAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxisLocation#763",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(AxisLocation location,boolean notify){\n  setDomainAxisLocation(0,location,notify);\n}",
    "begin_line": 763,
    "end_line": 768,
    "comment": "/** \n * Sets the location of the domain axis and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param location  the axis location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether listeners are notified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxisLocation#777",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location){\n  setDomainAxisLocation(index,location,true);\n}",
    "begin_line": 777,
    "end_line": 783,
    "comment": "/** \n * Sets the location for a domain axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param index  the axis index.\n * @param location  the location.\n * @see #getDomainAxisLocation(int)\n * @see #setRangeAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainAxisLocation#794",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.domainAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 794,
    "end_line": 808,
    "comment": "/** \n * Sets the location for a domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location.\n * @param notify  notify listeners?\n * @since 1.0.5\n * @see #getDomainAxisLocation(int)\n * @see #setRangeAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisEdge#814",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge",
    "snippet": "public RectangleEdge getDomainAxisEdge(){\n  return getDomainAxisEdge(0);\n}",
    "begin_line": 814,
    "end_line": 818,
    "comment": "/** \n * Returns the domain axis edge.  This is derived from the axis location and the plot orientation.\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisEdge#825",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge",
    "snippet": "public RectangleEdge getDomainAxisEdge(int index){\n  RectangleEdge result\u003dnull;\n  AxisLocation location\u003dgetDomainAxisLocation(index);\n  if (location !\u003d null) {\n    result\u003dPlot.resolveDomainAxisLocation(location,this.orientation);\n  }\n else {\n    result\u003dRectangleEdge.opposite(getDomainAxisEdge(0));\n  }\n  return result;\n}",
    "begin_line": 825,
    "end_line": 837,
    "comment": "/** \n * Returns the edge for a domain axis.\n * @param index  the axis index.\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisCount#843",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisCount",
    "snippet": "public int getDomainAxisCount(){\n  return this.domainAxes.size();\n}",
    "begin_line": 843,
    "end_line": 846,
    "comment": "/** \n * Returns the number of domain axes.\n * @return The axis count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearDomainAxes#851",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearDomainAxes",
    "snippet": "public void clearDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    CategoryAxis axis\u003d(CategoryAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.domainAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 851,
    "end_line": 861,
    "comment": "/** \n * Clears the domain axes from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.configureDomainAxes#866",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes",
    "snippet": "public void configureDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    CategoryAxis axis\u003d(CategoryAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 866,
    "end_line": 873,
    "comment": "/** \n * Configures the domain axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxis#879",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis",
    "snippet": "public ValueAxis getRangeAxis(){\n  return getRangeAxis(0);\n}",
    "begin_line": 879,
    "end_line": 884,
    "comment": "/** \n * Returns the range axis for the plot.  If the range axis for this plot is null, then the method will return the parent plot\u0027s range axis (if there is a parent plot).\n * @return The range axis (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxis#891",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis",
    "snippet": "public ValueAxis getRangeAxis(int index){\n  ValueAxis result\u003dnull;\n  if (index \u003c this.rangeAxes.size()) {\n    result\u003d(ValueAxis)this.rangeAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof CategoryPlot) {\n      CategoryPlot cp\u003d(CategoryPlot)parent;\n      result\u003dcp.getRangeAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 891,
    "end_line": 906,
    "comment": "/** \n * Returns a range axis.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxis#912",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(ValueAxis axis){\n  setRangeAxis(0,axis);\n}",
    "begin_line": 912,
    "end_line": 916,
    "comment": "/** \n * Sets the range axis for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxis#923",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis){\n  setRangeAxis(index,axis,true);\n}",
    "begin_line": 923,
    "end_line": 927,
    "comment": "/** \n * Sets a range axis and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param index  the axis index.\n * @param axis  the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxis#935",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis,boolean notify){\n  ValueAxis existing\u003d(ValueAxis)this.rangeAxes.get(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.rangeAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 935,
    "end_line": 953,
    "comment": "/** \n * Sets a range axis and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param axis  the axis.\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxes#960",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxes",
    "snippet": "public void setRangeAxes(ValueAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setRangeAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 960,
    "end_line": 968,
    "comment": "/** \n * Sets the range axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setDomainAxes(CategoryAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisIndex#978",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisIndex",
    "snippet": "public int getRangeAxisIndex(ValueAxis axis){\n  if (axis \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axis\u0027 argument.\");\n  }\n  int result\u003dthis.rangeAxes.indexOf(axis);\n  if (result \u003c 0) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof CategoryPlot) {\n      CategoryPlot p\u003d(CategoryPlot)parent;\n      result\u003dp.getRangeAxisIndex(axis);\n    }\n  }\n  return result;\n}",
    "begin_line": 978,
    "end_line": 996,
    "comment": "/** \n * Returns the index of the specified axis, or \u003ccode\u003e-1\u003c/code\u003e if the axis is not assigned to the plot.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The axis index.\n * @see #getRangeAxis(int)\n * @see #getDomainAxisIndex(CategoryAxis)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisLocation#1002",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation",
    "snippet": "public AxisLocation getRangeAxisLocation(){\n  return getRangeAxisLocation(0);\n}",
    "begin_line": 1002,
    "end_line": 1005,
    "comment": "/** \n * Returns the range axis location.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisLocation#1013",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation",
    "snippet": "public AxisLocation getRangeAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.rangeAxisLocations.size()) {\n    result\u003d(AxisLocation)this.rangeAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getRangeAxisLocation(0));\n  }\n  return result;\n}",
    "begin_line": 1013,
    "end_line": 1025,
    "comment": "/** \n * Returns the location for a range axis.\n * @param index  the axis index.\n * @return The location.\n * @see #setRangeAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxisLocation#1030",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(AxisLocation location){\n  setRangeAxisLocation(location,true);\n}",
    "begin_line": 1030,
    "end_line": 1039,
    "comment": "/** \n * Sets the location of the range axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setRangeAxisLocation(AxisLocation,boolean)\n * @see #setDomainAxisLocation(AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxisLocation#1047",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(AxisLocation location,boolean notify){\n  setRangeAxisLocation(0,location,notify);\n}",
    "begin_line": 1047,
    "end_line": 1052,
    "comment": "/** \n * Sets the location of the range axis and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #setDomainAxisLocation(AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxisLocation#1059",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location){\n  setRangeAxisLocation(index,location,true);\n}",
    "begin_line": 1059,
    "end_line": 1066,
    "comment": "/** \n * Sets the location for a range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location.\n * @see #getRangeAxisLocation(int)\n * @see #setRangeAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeAxisLocation#1076",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.rangeAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1076,
    "end_line": 1089,
    "comment": "/** \n * Sets the location for a range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location.\n * @param notify  notify listeners?\n * @see #getRangeAxisLocation(int)\n * @see #setDomainAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisEdge#1095",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge",
    "snippet": "public RectangleEdge getRangeAxisEdge(){\n  return getRangeAxisEdge(0);\n}",
    "begin_line": 1095,
    "end_line": 1098,
    "comment": "/** \n * Returns the edge where the primary range axis is located.\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisEdge#1105",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge",
    "snippet": "public RectangleEdge getRangeAxisEdge(int index){\n  AxisLocation location\u003dgetRangeAxisLocation(index);\n  RectangleEdge result\u003dPlot.resolveRangeAxisLocation(location,this.orientation);\n  if (result \u003d\u003d null) {\n    result\u003dRectangleEdge.opposite(getRangeAxisEdge(0));\n  }\n  return result;\n}",
    "begin_line": 1105,
    "end_line": 1115,
    "comment": "/** \n * Returns the edge for a range axis.\n * @param index  the axis index.\n * @return The edge.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisCount#1121",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisCount",
    "snippet": "public int getRangeAxisCount(){\n  return this.rangeAxes.size();\n}",
    "begin_line": 1121,
    "end_line": 1124,
    "comment": "/** \n * Returns the number of range axes.\n * @return The axis count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearRangeAxes#1129",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearRangeAxes",
    "snippet": "public void clearRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.rangeAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 1129,
    "end_line": 1139,
    "comment": "/** \n * Clears the range axes from the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.configureRangeAxes#1144",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes",
    "snippet": "public void configureRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 1144,
    "end_line": 1151,
    "comment": "/** \n * Configures the range axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDataset#1158",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDataset",
    "snippet": "public CategoryDataset getDataset(){\n  return getDataset(0);\n}",
    "begin_line": 1158,
    "end_line": 1162,
    "comment": "/** \n * Returns the primary dataset for the plot.\n * @return The primary dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDataset(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDataset#1170",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDataset",
    "snippet": "public CategoryDataset getDataset(int index){\n  CategoryDataset result\u003dnull;\n  if (this.datasets.size() \u003e index) {\n    result\u003d(CategoryDataset)this.datasets.get(index);\n  }\n  return result;\n}",
    "begin_line": 1170,
    "end_line": 1179,
    "comment": "/** \n * Returns the dataset at the given index.\n * @param index  the dataset index.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDataset(int,CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDataset#1186",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDataset",
    "snippet": "public void setDataset(CategoryDataset dataset){\n  setDataset(0,dataset);\n}",
    "begin_line": 1186,
    "end_line": 1194,
    "comment": "/** \n * Sets the dataset for the plot, replacing the existing dataset, if there  is one.  This method also calls the  {@link #datasetChanged(DatasetChangeEvent)} method, which adjusts the axis ranges if necessary and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDataset#1202",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDataset",
    "snippet": "public void setDataset(int index,CategoryDataset dataset){\n  CategoryDataset existing\u003d(CategoryDataset)this.datasets.get(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.datasets.set(index,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  DatasetChangeEvent event\u003dnew DatasetChangeEvent(this,dataset);\n  datasetChanged(event);\n}",
    "begin_line": 1202,
    "end_line": 1219,
    "comment": "/** \n * Sets a dataset for the plot.\n * @param index  the dataset index.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDatasetCount#1226",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDatasetCount",
    "snippet": "public int getDatasetCount(){\n  return this.datasets.size();\n}",
    "begin_line": 1226,
    "end_line": 1230,
    "comment": "/** \n * Returns the number of datasets.\n * @return The number of datasets.\n * @since 1.0.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.mapDatasetToDomainAxis#1238",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis",
    "snippet": "public void mapDatasetToDomainAxis(int index,int axisIndex){\n  this.datasetToDomainAxisMap.set(index,new Integer(axisIndex));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1238,
    "end_line": 1244,
    "comment": "/** \n * Maps a dataset to a particular domain axis.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index (zero-based).\n * @see #getDomainAxisForDataset(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainAxisForDataset#1252",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisForDataset",
    "snippet": "public CategoryAxis getDomainAxisForDataset(int index){\n  CategoryAxis result\u003dgetDomainAxis();\n  Integer axisIndex\u003d(Integer)this.datasetToDomainAxisMap.get(index);\n  if (axisIndex !\u003d null) {\n    result\u003dgetDomainAxis(axisIndex.intValue());\n  }\n  return result;\n}",
    "begin_line": 1252,
    "end_line": 1263,
    "comment": "/** \n * Returns the domain axis for a dataset.  You can change the axis for a  dataset using the  {@link #mapDatasetToDomainAxis(int,int)} method.\n * @param index  the dataset index.\n * @return The domain axis.\n * @see #mapDatasetToDomainAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.mapDatasetToRangeAxis#1271",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis",
    "snippet": "public void mapDatasetToRangeAxis(int index,int axisIndex){\n  this.datasetToRangeAxisMap.set(index,new Integer(axisIndex));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1271,
    "end_line": 1277,
    "comment": "/** \n * Maps a dataset to a particular range axis.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index (zero-based).\n * @see #getRangeAxisForDataset(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeAxisForDataset#1285",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisForDataset",
    "snippet": "public ValueAxis getRangeAxisForDataset(int index){\n  ValueAxis result\u003dgetRangeAxis();\n  Integer axisIndex\u003d(Integer)this.datasetToRangeAxisMap.get(index);\n  if (axisIndex !\u003d null) {\n    result\u003dgetRangeAxis(axisIndex.intValue());\n  }\n  return result;\n}",
    "begin_line": 1285,
    "end_line": 1296,
    "comment": "/** \n * Returns the range axis for a dataset.  You can change the axis for a  dataset using the  {@link #mapDatasetToRangeAxis(int,int)} method.\n * @param index  the dataset index.\n * @return The range axis.\n * @see #mapDatasetToRangeAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRenderer#1303",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer",
    "snippet": "public CategoryItemRenderer getRenderer(){\n  return getRenderer(0);\n}",
    "begin_line": 1303,
    "end_line": 1307,
    "comment": "/** \n * Returns a reference to the renderer for the plot.\n * @return The renderer.\n * @see #setRenderer(CategoryItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRenderer#1315",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer",
    "snippet": "public CategoryItemRenderer getRenderer(int index){\n  CategoryItemRenderer result\u003dnull;\n  if (this.renderers.size() \u003e index) {\n    result\u003d(CategoryItemRenderer)this.renderers.get(index);\n  }\n  return result;\n}",
    "begin_line": 1315,
    "end_line": 1324,
    "comment": "/** \n * Returns the renderer at the given index.\n * @param index  the renderer index.\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderer(int,CategoryItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRenderer#1331",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer",
    "snippet": "public void setRenderer(CategoryItemRenderer renderer){\n  setRenderer(0,renderer,true);\n}",
    "begin_line": 1331,
    "end_line": 1337,
    "comment": "/** \n * Sets the renderer at index 0 (sometimes referred to as the \"primary\"  renderer) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted.\n * @see #getRenderer()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRenderer#1345",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer",
    "snippet": "public void setRenderer(CategoryItemRenderer renderer,boolean notify){\n  setRenderer(0,renderer,notify);\n}",
    "begin_line": 1345,
    "end_line": 1358,
    "comment": "/** \n * Sets the renderer at index 0 (sometimes referred to as the \"primary\"  renderer) and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners. \u003cp\u003e You can set the renderer to \u003ccode\u003enull\u003c/code\u003e, but this is not  recommended because: \u003cul\u003e \u003cli\u003eno data will be displayed;\u003c/li\u003e \u003cli\u003ethe plot background will not be painted;\u003c/li\u003e \u003c/ul\u003e\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getRenderer()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRenderer#1365",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer",
    "snippet": "public void setRenderer(int index,CategoryItemRenderer renderer){\n  setRenderer(index,renderer,true);\n}",
    "begin_line": 1365,
    "end_line": 1372,
    "comment": "/** \n * Sets the renderer at the specified index and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the index.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRenderer(int)\n * @see #setRenderer(int,CategoryItemRenderer,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRenderer#1381",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer",
    "snippet": "public void setRenderer(int index,CategoryItemRenderer renderer,boolean notify){\n  CategoryItemRenderer existing\u003d(CategoryItemRenderer)this.renderers.get(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.renderers.set(index,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  configureDomainAxes();\n  configureRangeAxes();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1381,
    "end_line": 1407,
    "comment": "/** \n * Sets a renderer.  A  {@link PlotChangeEvent} is sent to all registered listeners.\n * @param index  the index.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getRenderer(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRenderers#1413",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRenderers",
    "snippet": "public void setRenderers(CategoryItemRenderer[] renderers){\n  for (int i\u003d0; i \u003c renderers.length; i++) {\n    setRenderer(i,renderers[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1413,
    "end_line": 1420,
    "comment": "/** \n * Sets the renderers for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param renderers  the renderers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRendererForDataset#1427",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRendererForDataset",
    "snippet": "public CategoryItemRenderer getRendererForDataset(CategoryDataset dataset){\n  CategoryItemRenderer result\u003dnull;\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    if (this.datasets.get(i) \u003d\u003d dataset) {\n      result\u003d(CategoryItemRenderer)this.renderers.get(i);\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 1427,
    "end_line": 1439,
    "comment": "/** \n * Returns the renderer for the specified dataset.  If the dataset doesn\u0027t belong to the plot, this method will return \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getIndexOf#1446",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getIndexOf",
    "snippet": "public int getIndexOf(CategoryItemRenderer renderer){\n  return this.renderers.indexOf(renderer);\n}",
    "begin_line": 1446,
    "end_line": 1451,
    "comment": "/** \n * Returns the index of the specified renderer, or \u003ccode\u003e-1\u003c/code\u003e if the renderer is not assigned to this plot.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDatasetRenderingOrder#1458",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDatasetRenderingOrder",
    "snippet": "public DatasetRenderingOrder getDatasetRenderingOrder(){\n  return this.renderingOrder;\n}",
    "begin_line": 1458,
    "end_line": 1462,
    "comment": "/** \n * Returns the dataset rendering order.\n * @return The order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDatasetRenderingOrder#1469",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDatasetRenderingOrder",
    "snippet": "public void setDatasetRenderingOrder(DatasetRenderingOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.renderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1469,
    "end_line": 1480,
    "comment": "/** \n * Sets the rendering order and sends a  {@link PlotChangeEvent} to all registered listeners.  By default, the plot renders the primary dataset  last (so that the primary dataset overlays the secondary datasets).  You  can reverse this if you want to.\n * @param order  the rendering order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDatasetRenderingOrder()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getColumnRenderingOrder#1487",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getColumnRenderingOrder",
    "snippet": "public SortOrder getColumnRenderingOrder(){\n  return this.columnRenderingOrder;\n}",
    "begin_line": 1487,
    "end_line": 1492,
    "comment": "/** \n * Returns the order in which the columns are rendered.  The default value is \u003ccode\u003eSortOrder.ASCENDING\u003c/code\u003e.\n * @return The column rendering order (never \u003ccode\u003enull\u003c/code).\n * @see #setColumnRenderingOrder(SortOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setColumnRenderingOrder#1500",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setColumnRenderingOrder",
    "snippet": "public void setColumnRenderingOrder(SortOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.columnRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1500,
    "end_line": 1511,
    "comment": "/** \n * Sets the column order in which the items in each dataset should be  rendered and sends a  {@link PlotChangeEvent} to all registered listeners.  Note that this affects the order in which items are drawn,  NOT their position in the chart.\n * @param order  the order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getColumnRenderingOrder()\n * @see #setRowRenderingOrder(SortOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRowRenderingOrder#1518",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRowRenderingOrder",
    "snippet": "public SortOrder getRowRenderingOrder(){\n  return this.rowRenderingOrder;\n}",
    "begin_line": 1518,
    "end_line": 1523,
    "comment": "/** \n * Returns the order in which the rows should be rendered.  The default  value is \u003ccode\u003eSortOrder.ASCENDING\u003c/code\u003e.\n * @return The order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRowRenderingOrder(SortOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRowRenderingOrder#1531",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRowRenderingOrder",
    "snippet": "public void setRowRenderingOrder(SortOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.rowRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1531,
    "end_line": 1542,
    "comment": "/** \n * Sets the row order in which the items in each dataset should be  rendered and sends a  {@link PlotChangeEvent} to all registered listeners.  Note that this affects the order in which items are drawn,  NOT their position in the chart.\n * @param order  the order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRowRenderingOrder()\n * @see #setColumnRenderingOrder(SortOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isDomainGridlinesVisible#1549",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isDomainGridlinesVisible",
    "snippet": "public boolean isDomainGridlinesVisible(){\n  return this.domainGridlinesVisible;\n}",
    "begin_line": 1549,
    "end_line": 1553,
    "comment": "/** \n * Returns the flag that controls whether the domain grid-lines are visible.\n * @return The \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @see #setDomainGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainGridlinesVisible#1560",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainGridlinesVisible",
    "snippet": "public void setDomainGridlinesVisible(boolean visible){\n  if (this.domainGridlinesVisible !\u003d visible) {\n    this.domainGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1560,
    "end_line": 1571,
    "comment": "/** \n * Sets the flag that controls whether or not grid-lines are drawn against  the domain axis. \u003cp\u003e If the flag value changes, a  {@link PlotChangeEvent} is sent to all registered listeners.\n * @param visible  the new value of the flag.\n * @see #isDomainGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainGridlinePosition#1578",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainGridlinePosition",
    "snippet": "public CategoryAnchor getDomainGridlinePosition(){\n  return this.domainGridlinePosition;\n}",
    "begin_line": 1578,
    "end_line": 1582,
    "comment": "/** \n * Returns the position used for the domain gridlines.\n * @return The gridline position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlinePosition(CategoryAnchor)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainGridlinePosition#1589",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainGridlinePosition",
    "snippet": "public void setDomainGridlinePosition(CategoryAnchor position){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  this.domainGridlinePosition\u003dposition;\n  fireChangeEvent();\n}",
    "begin_line": 1589,
    "end_line": 1598,
    "comment": "/** \n * Sets the position used for the domain gridlines and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainGridlinePosition()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainGridlineStroke#1605",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainGridlineStroke",
    "snippet": "public Stroke getDomainGridlineStroke(){\n  return this.domainGridlineStroke;\n}",
    "begin_line": 1605,
    "end_line": 1609,
    "comment": "/** \n * Returns the stroke used to draw grid-lines against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainGridlineStroke#1616",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainGridlineStroke",
    "snippet": "public void setDomainGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 not permitted.\");\n  }\n  this.domainGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1616,
    "end_line": 1625,
    "comment": "/** \n * Sets the stroke used to draw grid-lines against the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainGridlinePaint#1632",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainGridlinePaint",
    "snippet": "public Paint getDomainGridlinePaint(){\n  return this.domainGridlinePaint;\n}",
    "begin_line": 1632,
    "end_line": 1636,
    "comment": "/** \n * Returns the paint used to draw grid-lines against the domain axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDomainGridlinePaint#1643",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDomainGridlinePaint",
    "snippet": "public void setDomainGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1643,
    "end_line": 1652,
    "comment": "/** \n * Sets the paint used to draw the grid-lines (if any) against the domain  axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isRangeGridlinesVisible#1659",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isRangeGridlinesVisible",
    "snippet": "public boolean isRangeGridlinesVisible(){\n  return this.rangeGridlinesVisible;\n}",
    "begin_line": 1659,
    "end_line": 1663,
    "comment": "/** \n * Returns the flag that controls whether the range grid-lines are visible.\n * @return The flag.\n * @see #setRangeGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeGridlinesVisible#1670",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeGridlinesVisible",
    "snippet": "public void setRangeGridlinesVisible(boolean visible){\n  if (this.rangeGridlinesVisible !\u003d visible) {\n    this.rangeGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1670,
    "end_line": 1679,
    "comment": "/** \n * Sets the flag that controls whether or not grid-lines are drawn against  the range axis.  If the flag changes value, a  {@link PlotChangeEvent} is sent to all registered listeners.\n * @param visible  the new value of the flag.\n * @see #isRangeGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeGridlineStroke#1686",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeGridlineStroke",
    "snippet": "public Stroke getRangeGridlineStroke(){\n  return this.rangeGridlineStroke;\n}",
    "begin_line": 1686,
    "end_line": 1690,
    "comment": "/** \n * Returns the stroke used to draw the grid-lines against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeGridlineStroke#1697",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeGridlineStroke",
    "snippet": "public void setRangeGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1697,
    "end_line": 1706,
    "comment": "/** \n * Sets the stroke used to draw the grid-lines against the range axis and  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeGridlinePaint#1713",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeGridlinePaint",
    "snippet": "public Paint getRangeGridlinePaint(){\n  return this.rangeGridlinePaint;\n}",
    "begin_line": 1713,
    "end_line": 1717,
    "comment": "/** \n * Returns the paint used to draw the grid-lines against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeGridlinePaint#1724",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeGridlinePaint",
    "snippet": "public void setRangeGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1724,
    "end_line": 1733,
    "comment": "/** \n * Sets the paint used to draw the grid lines against the range axis and  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getFixedLegendItems#1740",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getFixedLegendItems",
    "snippet": "public LegendItemCollection getFixedLegendItems(){\n  return this.fixedLegendItems;\n}",
    "begin_line": 1740,
    "end_line": 1744,
    "comment": "/** \n * Returns the fixed legend items, if any.\n * @return The legend items (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedLegendItems(LegendItemCollection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setFixedLegendItems#1751",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setFixedLegendItems",
    "snippet": "public void setFixedLegendItems(LegendItemCollection items){\n  this.fixedLegendItems\u003ditems;\n  fireChangeEvent();\n}",
    "begin_line": 1751,
    "end_line": 1758,
    "comment": "/** \n * Sets the fixed legend items for the plot.  Leave this set to  \u003ccode\u003enull\u003c/code\u003e if you prefer the legend items to be created  automatically.\n * @param items  the legend items (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedLegendItems()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getLegendItems#1764",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getLegendItems",
    "snippet": "public LegendItemCollection getLegendItems(){\n  LegendItemCollection result\u003dthis.fixedLegendItems;\n  if (result \u003d\u003d null) {\n    result\u003dnew LegendItemCollection();\n    int count\u003dthis.datasets.size();\n    for (int datasetIndex\u003d0; datasetIndex \u003c count; datasetIndex++) {\n      CategoryDataset dataset\u003dgetDataset(datasetIndex);\n      if (dataset !\u003d null) {\n        CategoryItemRenderer renderer\u003dgetRenderer(datasetIndex);\n        if (renderer !\u003d null) {\n          int seriesCount\u003ddataset.getRowCount();\n          for (int i\u003d0; i \u003c seriesCount; i++) {\n            LegendItem item\u003drenderer.getLegendItem(datasetIndex,i);\n            if (item !\u003d null) {\n              result.add(item);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 1764,
    "end_line": 1791,
    "comment": "/** \n * Returns the legend items for the plot.  By default, this method creates  a legend item for each series in each of the datasets.  You can change  this behaviour by overriding this method.\n * @return The legend items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.handleClick#1799",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.handleClick",
    "snippet": "public void handleClick(int x,int y,PlotRenderingInfo info){\n  Rectangle2D dataArea\u003dinfo.getDataArea();\n  if (dataArea.contains(x,y)) {\n    double java2D\u003d0.0;\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      java2D\u003dx;\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      java2D\u003dy;\n    }\n    RectangleEdge edge\u003dPlot.resolveRangeAxisLocation(getRangeAxisLocation(),this.orientation);\n    double value\u003dgetRangeAxis().java2DToValue(java2D,info.getDataArea(),edge);\n    setAnchorValue(value);\n    setRangeCrosshairValue(value);\n  }\n}",
    "begin_line": 1799,
    "end_line": 1821,
    "comment": "/** \n * Handles a \u0027click\u0027 on the plot by updating the anchor value.\n * @param x  x-coordinate of the click (in Java2D space).\n * @param y  y-coordinate of the click (in Java2D space).\n * @param info  information about the plot\u0027s dimensions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoom#1824",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoom",
    "snippet": "public void zoom(double percent){\n  if (percent \u003e 0.0) {\n    double range\u003dgetRangeAxis().getRange().getLength();\n    double scaledRange\u003drange * percent;\n    getRangeAxis().setRange(this.anchorValue - scaledRange / 2.0,this.anchorValue + scaledRange / 2.0);\n  }\n else {\n    getRangeAxis().setAutoRange(true);\n  }\n}",
    "begin_line": 1824,
    "end_line": 1844,
    "comment": "/** \n * Zooms (in or out) on the plot\u0027s value axis. \u003cp\u003e If the value 0.0 is passed in as the zoom percent, the auto-range calculation for the axis is restored (which sets the range to include the minimum and maximum data values, thus displaying all the data).\n * @param percent  the zoom amount.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.datasetChanged#1850",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged",
    "snippet": "public void datasetChanged(DatasetChangeEvent event){\n  int count\u003dthis.rangeAxes.size();\n  for (int axisIndex\u003d0; axisIndex \u003c count; axisIndex++) {\n    ValueAxis yAxis\u003dgetRangeAxis(axisIndex);\n    if (yAxis !\u003d null) {\n      yAxis.configure();\n    }\n  }\n  if (getParent() !\u003d null) {\n    getParent().datasetChanged(event);\n  }\n else {\n    PlotChangeEvent e\u003dnew PlotChangeEvent(this);\n    e.setType(ChartChangeEventType.DATASET_UPDATED);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 1850,
    "end_line": 1871,
    "comment": "/** \n * Receives notification of a change to the plot\u0027s dataset. \u003cP\u003e The range axis bounds will be recalculated if necessary.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.rendererChanged#1877",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.rendererChanged",
    "snippet": "public void rendererChanged(RendererChangeEvent event){\n  Plot parent\u003dgetParent();\n  if (parent !\u003d null) {\n    if (parent instanceof RendererChangeListener) {\n      RendererChangeListener rcl\u003d(RendererChangeListener)parent;\n      rcl.rendererChanged(event);\n    }\n else {\n      throw new RuntimeException(\"The renderer has changed and I don\u0027t know what to do!\");\n    }\n  }\n else {\n    configureRangeAxes();\n    PlotChangeEvent e\u003dnew PlotChangeEvent(this);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 1877,
    "end_line": 1897,
    "comment": "/** \n * Receives notification of a renderer change event.\n * @param event  the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addDomainMarker#1904",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(CategoryMarker marker){\n  addDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 1904,
    "end_line": 1911,
    "comment": "/** \n * Adds a marker for display (in the foreground) against the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners. Typically a marker will be drawn by the renderer as a line perpendicular to the  domain axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeDomainMarker(Marker)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addDomainMarker#1919",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(CategoryMarker marker,Layer layer){\n  addDomainMarker(0,marker,layer);\n}",
    "begin_line": 1919,
    "end_line": 1927,
    "comment": "/** \n * Adds a marker for display against the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.  Typically a marker will be drawn by the renderer as a line perpendicular to the domain  axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background) (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeDomainMarker(Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addDomainMarker#1936",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(int index,CategoryMarker marker,Layer layer){\n  addDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 1936,
    "end_line": 1944,
    "comment": "/** \n * Adds a marker for display by a particular renderer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to a domain axis, however this is entirely up to the renderer.\n * @param index  the renderer index.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addDomainMarker#1955",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(int index,CategoryMarker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 not permitted.\");\n  }\n  if (layer \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027layer\u0027 not permitted.\");\n  }\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1955,
    "end_line": 1993,
    "comment": "/** \n * Adds a marker for display by a particular renderer and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to a domain axis, however this is entirely up to the renderer.\n * @param index  the renderer index.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @since 1.0.10\n * @see #removeDomainMarker(int,Marker,Layer,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearDomainMarkers#1999",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearDomainMarkers",
    "snippet": "public void clearDomainMarkers(){\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.backgroundDomainMarkers.clear();\n  }\n  if (this.foregroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.foregroundDomainMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1999,
    "end_line": 2021,
    "comment": "/** \n * Clears all the domain markers for the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @see #clearRangeMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainMarkers#2028",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainMarkers",
    "snippet": "public Collection getDomainMarkers(Layer layer){\n  return getDomainMarkers(0,layer);\n}",
    "begin_line": 2028,
    "end_line": 2032,
    "comment": "/** \n * Returns the list of domain markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of domain markers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDomainMarkers#2040",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDomainMarkers",
    "snippet": "public Collection getDomainMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundDomainMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundDomainMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 2040,
    "end_line": 2056,
    "comment": "/** \n * Returns a collection of domain markers for a particular renderer and  layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearDomainMarkers#2063",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearDomainMarkers",
    "snippet": "public void clearDomainMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundDomainMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2063,
    "end_line": 2092,
    "comment": "/** \n * Clears all the domain markers for the specified renderer.\n * @param index  the renderer index.\n * @see #clearRangeMarkers(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeDomainMarker#2100",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(Marker marker){\n  return removeDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2100,
    "end_line": 2107,
    "comment": "/** \n * Removes a marker for the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param marker  the marker.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeDomainMarker#2116",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(Marker marker,Layer layer){\n  return removeDomainMarker(0,marker,layer);\n}",
    "begin_line": 2116,
    "end_line": 2123,
    "comment": "/** \n * Removes a marker for the domain axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeDomainMarker#2133",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer){\n  return removeDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 2133,
    "end_line": 2140,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeDomainMarker#2150",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2150,
    "end_line": 2171,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and, if requested,  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addRangeMarker#2178",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(Marker marker){\n  addRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2178,
    "end_line": 2185,
    "comment": "/** \n * Adds a marker for display (in the foreground) against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners. Typically a marker will be drawn by the renderer as a line perpendicular to the  range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeRangeMarker(Marker)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addRangeMarker#2193",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(Marker marker,Layer layer){\n  addRangeMarker(0,marker,layer);\n}",
    "begin_line": 2193,
    "end_line": 2201,
    "comment": "/** \n * Adds a marker for display against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.  Typically a marker will be drawn by the renderer as a line perpendicular to the range axis,  however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background) (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeRangeMarker(Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addRangeMarker#2210",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer){\n  addRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2210,
    "end_line": 2218,
    "comment": "/** \n * Adds a marker for display by a particular renderer and sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to a range axis, however this is entirely up to the renderer.\n * @param index  the renderer index.\n * @param marker  the marker.\n * @param layer  the layer.\n * @see #removeRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addRangeMarker#2229",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2229,
    "end_line": 2261,
    "comment": "/** \n * Adds a marker for display by a particular renderer and sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to a range axis, however this is entirely up to the renderer.\n * @param index  the renderer index.\n * @param marker  the marker.\n * @param layer  the layer.\n * @param notify  notify listeners?\n * @since 1.0.10\n * @see #removeRangeMarker(int,Marker,Layer,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearRangeMarkers#2267",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearRangeMarkers",
    "snippet": "public void clearRangeMarkers(){\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.backgroundRangeMarkers.clear();\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.foregroundRangeMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2267,
    "end_line": 2289,
    "comment": "/** \n * Clears all the range markers for the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @see #clearDomainMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeMarkers#2295",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeMarkers",
    "snippet": "public Collection getRangeMarkers(Layer layer){\n  return getRangeMarkers(0,layer);\n}",
    "begin_line": 2295,
    "end_line": 2302,
    "comment": "/** \n * Returns the list of range markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of range markers.\n * @see #getRangeMarkers(int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeMarkers#2310",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeMarkers",
    "snippet": "public Collection getRangeMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundRangeMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundRangeMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 2310,
    "end_line": 2326,
    "comment": "/** \n * Returns a collection of range markers for a particular renderer and  layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearRangeMarkers#2333",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearRangeMarkers",
    "snippet": "public void clearRangeMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2333,
    "end_line": 2362,
    "comment": "/** \n * Clears all the range markers for the specified renderer.\n * @param index  the renderer index.\n * @see #clearDomainMarkers(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeRangeMarker#2371",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(Marker marker){\n  return removeRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2371,
    "end_line": 2379,
    "comment": "/** \n * Removes a marker for the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n * @see #addRangeMarker(Marker)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeRangeMarker#2389",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(Marker marker,Layer layer){\n  return removeRangeMarker(0,marker,layer);\n}",
    "begin_line": 2389,
    "end_line": 2397,
    "comment": "/** \n * Removes a marker for the range axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n * @see #addRangeMarker(Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeRangeMarker#2408",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer){\n  return removeRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2408,
    "end_line": 2416,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n * @see #addRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeRangeMarker#2428",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 argument.\");\n  }\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2428,
    "end_line": 2453,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n * @see #addRangeMarker(int,Marker,Layer,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isRangeCrosshairVisible#2460",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isRangeCrosshairVisible",
    "snippet": "public boolean isRangeCrosshairVisible(){\n  return this.rangeCrosshairVisible;\n}",
    "begin_line": 2460,
    "end_line": 2464,
    "comment": "/** \n * Returns a flag indicating whether or not the range crosshair is visible.\n * @return The flag.\n * @see #setRangeCrosshairVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairVisible#2471",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairVisible",
    "snippet": "public void setRangeCrosshairVisible(boolean flag){\n  if (this.rangeCrosshairVisible !\u003d flag) {\n    this.rangeCrosshairVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2471,
    "end_line": 2478,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair is visible.\n * @param flag  the new value of the flag.\n * @see #isRangeCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isRangeCrosshairLockedOnData#2485",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isRangeCrosshairLockedOnData",
    "snippet": "public boolean isRangeCrosshairLockedOnData(){\n  return this.rangeCrosshairLockedOnData;\n}",
    "begin_line": 2485,
    "end_line": 2490,
    "comment": "/** \n * Returns a flag indicating whether or not the crosshair should \"lock-on\" to actual data values.\n * @return The flag.\n * @see #setRangeCrosshairLockedOnData(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairLockedOnData#2497",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairLockedOnData",
    "snippet": "public void setRangeCrosshairLockedOnData(boolean flag){\n  if (this.rangeCrosshairLockedOnData !\u003d flag) {\n    this.rangeCrosshairLockedOnData\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2497,
    "end_line": 2505,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair should  \"lock-on\" to actual data values.\n * @param flag  the flag.\n * @see #isRangeCrosshairLockedOnData()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeCrosshairValue#2512",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeCrosshairValue",
    "snippet": "public double getRangeCrosshairValue(){\n  return this.rangeCrosshairValue;\n}",
    "begin_line": 2512,
    "end_line": 2516,
    "comment": "/** \n * Returns the range crosshair value.\n * @return The value.\n * @see #setRangeCrosshairValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairValue#2523",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairValue",
    "snippet": "public void setRangeCrosshairValue(double value){\n  setRangeCrosshairValue(value,true);\n}",
    "begin_line": 2523,
    "end_line": 2530,
    "comment": "/** \n * Sets the domain crosshair value. \u003cP\u003e Registered listeners are notified that the plot has been modified, but only if the crosshair is visible.\n * @param value  the new value.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairValue#2538",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairValue",
    "snippet": "public void setRangeCrosshairValue(double value,boolean notify){\n  this.rangeCrosshairValue\u003dvalue;\n  if (isRangeCrosshairVisible() \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2538,
    "end_line": 2548,
    "comment": "/** \n * Sets the range crosshair value and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners (but only if the crosshair is visible).\n * @param value  the new value.\n * @param notify  a flag that controls whether or not listeners are notified.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeCrosshairStroke#2557",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeCrosshairStroke",
    "snippet": "public Stroke getRangeCrosshairStroke(){\n  return this.rangeCrosshairStroke;\n}",
    "begin_line": 2557,
    "end_line": 2562,
    "comment": "/** \n * Returns the pen-style (\u003ccode\u003eStroke\u003c/code\u003e) used to draw the crosshair  (if visible).\n * @return The crosshair stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairStroke(Stroke)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairStroke#2569",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairStroke",
    "snippet": "public void setRangeCrosshairStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeCrosshairStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 2569,
    "end_line": 2580,
    "comment": "/** \n * Sets the pen-style (\u003ccode\u003eStroke\u003c/code\u003e) used to draw the range  crosshair (if visible), and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the new crosshair stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getRangeCrosshairPaint#2589",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getRangeCrosshairPaint",
    "snippet": "public Paint getRangeCrosshairPaint(){\n  return this.rangeCrosshairPaint;\n}",
    "begin_line": 2589,
    "end_line": 2593,
    "comment": "/** \n * Returns the paint used to draw the range crosshair.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairPaint(Paint)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setRangeCrosshairPaint#2600",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setRangeCrosshairPaint",
    "snippet": "public void setRangeCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeCrosshairPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2600,
    "end_line": 2609,
    "comment": "/** \n * Sets the paint used to draw the range crosshair (if visible) and  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getAnnotations#2615",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getAnnotations",
    "snippet": "public List getAnnotations(){\n  return this.annotations;\n}",
    "begin_line": 2615,
    "end_line": 2618,
    "comment": "/** \n * Returns the list of annotations.\n * @return The list of annotations (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addAnnotation#2625",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addAnnotation",
    "snippet": "public void addAnnotation(CategoryAnnotation annotation){\n  addAnnotation(annotation,true);\n}",
    "begin_line": 2625,
    "end_line": 2630,
    "comment": "/** \n * Adds an annotation to the plot and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeAnnotation(CategoryAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.addAnnotation#2638",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.addAnnotation",
    "snippet": "public void addAnnotation(CategoryAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  this.annotations.add(annotation);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2638,
    "end_line": 2649,
    "comment": "/** \n * Adds an annotation to the plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeAnnotation#2657",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeAnnotation",
    "snippet": "public boolean removeAnnotation(CategoryAnnotation annotation){\n  return removeAnnotation(annotation,true);\n}",
    "begin_line": 2657,
    "end_line": 2663,
    "comment": "/** \n * Removes an annotation from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A boolean (indicates whether or not the annotation was removed).\n * @see #addAnnotation(CategoryAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.removeAnnotation#2672",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.removeAnnotation",
    "snippet": "public boolean removeAnnotation(CategoryAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  boolean removed\u003dthis.annotations.remove(annotation);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2672,
    "end_line": 2686,
    "comment": "/** \n * Removes an annotation from the plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @return A boolean (indicates whether or not the annotation was removed).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clearAnnotations#2691",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clearAnnotations",
    "snippet": "public void clearAnnotations(){\n  this.annotations.clear();\n  fireChangeEvent();\n}",
    "begin_line": 2691,
    "end_line": 2695,
    "comment": "/** \n * Clears all the annotations and sends a  {@link PlotChangeEvent} to allregistered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.calculateDomainAxisSpace#2704",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.calculateDomainAxisSpace",
    "snippet": "protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n  }\n else {\n    RectangleEdge domainEdge\u003dPlot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);\n    if (this.drawSharedDomainAxis) {\n      space\u003dgetDomainAxis().reserveSpace(g2,this,plotArea,domainEdge,space);\n    }\n    for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n      Axis xAxis\u003d(Axis)this.domainAxes.get(i);\n      if (xAxis !\u003d null) {\n        RectangleEdge edge\u003dgetDomainAxisEdge(i);\n        space\u003dxAxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 2704,
    "end_line": 2750,
    "comment": "/** \n * Calculates the space required for the domain axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.calculateRangeAxisSpace#2759",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.calculateRangeAxisSpace",
    "snippet": "protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n  }\n else {\n    for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n      Axis yAxis\u003d(Axis)this.rangeAxes.get(i);\n      if (yAxis !\u003d null) {\n        RectangleEdge edge\u003dgetRangeAxisEdge(i);\n        space\u003dyAxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 2759,
    "end_line": 2796,
    "comment": "/** \n * Calculates the space required for the range axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.calculateAxisSpace#2804",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.calculateAxisSpace",
    "snippet": "protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){\n  AxisSpace space\u003dnew AxisSpace();\n  space\u003dcalculateRangeAxisSpace(g2,plotArea,space);\n  space\u003dcalculateDomainAxisSpace(g2,plotArea,space);\n  return space;\n}",
    "begin_line": 2804,
    "end_line": 2812,
    "comment": "/** \n * Calculates the space required for the axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @return The space required for the axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.draw#2815",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.draw",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo state){\n  boolean b1\u003d(area.getWidth() \u003c\u003d MINIMUM_WIDTH_TO_DRAW);\n  boolean b2\u003d(area.getHeight() \u003c\u003d MINIMUM_HEIGHT_TO_DRAW);\n  if (b1 || b2) {\n    return;\n  }\n  if (state \u003d\u003d null) {\n    state\u003dnew PlotRenderingInfo(null);\n  }\n  state.setPlotArea(area);\n  RectangleInsets insets\u003dgetInsets();\n  insets.trim(area);\n  AxisSpace space\u003dcalculateAxisSpace(g2,area);\n  Rectangle2D dataArea\u003dspace.shrink(area,null);\n  this.axisOffset.trim(dataArea);\n  state.setDataArea(dataArea);\n  if (getRenderer() !\u003d null) {\n    getRenderer().drawBackground(g2,this,dataArea);\n  }\n else {\n    drawBackground(g2,dataArea);\n  }\n  Map axisStateMap\u003ddrawAxes(g2,area,dataArea,state);\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(dataArea);\n  drawDomainGridlines(g2,dataArea);\n  AxisState rangeAxisState\u003d(AxisState)axisStateMap.get(getRangeAxis());\n  if (rangeAxisState \u003d\u003d null) {\n    if (parentState !\u003d null) {\n      rangeAxisState\u003d(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());\n    }\n  }\n  if (rangeAxisState !\u003d null) {\n    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  boolean foundData\u003dfalse;\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));\n  DatasetRenderingOrder order\u003dgetDatasetRenderingOrder();\n  if (order \u003d\u003d DatasetRenderingOrder.FORWARD) {\n    int datasetCount\u003dthis.datasets.size();\n    for (int i\u003d0; i \u003c datasetCount; i++) {\n      CategoryItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        CategoryAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,state);\n      }\n    }\n    for (int i\u003d0; i \u003c datasetCount; i++) {\n      foundData\u003drender(g2,dataArea,i,state) || foundData;\n    }\n    for (int i\u003d0; i \u003c datasetCount; i++) {\n      CategoryItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        CategoryAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,state);\n      }\n    }\n  }\n else {\n    int datasetCount\u003dthis.datasets.size();\n    for (int i\u003ddatasetCount - 1; i \u003e\u003d 0; i--) {\n      CategoryItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        CategoryAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,state);\n      }\n    }\n    for (int i\u003dthis.datasets.size() - 1; i \u003e\u003d 0; i--) {\n      foundData\u003drender(g2,dataArea,i,state) || foundData;\n    }\n    for (int i\u003ddatasetCount - 1; i \u003e\u003d 0; i--) {\n      CategoryItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        CategoryAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,state);\n      }\n    }\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  drawAnnotations(g2,dataArea,state);\n  g2.setClip(savedClip);\n  g2.setComposite(originalComposite);\n  if (!foundData) {\n    drawNoDataMessage(g2,dataArea);\n  }\n  if (isRangeCrosshairVisible()) {\n    drawRangeCrosshair(g2,dataArea,getOrientation(),getRangeCrosshairValue(),getRangeAxis(),getRangeCrosshairStroke(),getRangeCrosshairPaint());\n  }\n  if (getRenderer() !\u003d null) {\n    getRenderer().drawOutline(g2,this,dataArea);\n  }\n else {\n    drawOutline(g2,dataArea);\n  }\n}",
    "begin_line": 2815,
    "end_line": 3000,
    "comment": "/** \n * Draws the plot on a Java 2D graphics device (such as the screen or a  printer). \u003cP\u003e At your option, you may supply an instance of  {@link PlotRenderingInfo}. If you do, it will be populated with information about the drawing, including various plot dimensions and tooltip info.\n * @param g2  the graphics device.\n * @param area  the area within which the plot (including axes) should be drawn.\n * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param parentState  the state from the parent plot, if there is one.\n * @param state  collects info as the chart is drawn (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawBackground#3007",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawBackground",
    "snippet": "public void drawBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area,this.orientation);\n  drawBackgroundImage(g2,area);\n}",
    "begin_line": 3007,
    "end_line": 3015,
    "comment": "/** \n * Draws the plot background (the background color and/or image). \u003cP\u003e This method will be called during the chart drawing process and is  declared public so that it can be accessed by the renderers used by  certain subclasses.  You shouldn\u0027t need to call this method directly.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawAxes#3025",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawAxes",
    "snippet": "protected Map drawAxes(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,PlotRenderingInfo plotState){\n  AxisCollection axisCollection\u003dnew AxisCollection();\n  for (int index\u003d0; index \u003c this.domainAxes.size(); index++) {\n    CategoryAxis xAxis\u003d(CategoryAxis)this.domainAxes.get(index);\n    if (xAxis !\u003d null) {\n      axisCollection.add(xAxis,getDomainAxisEdge(index));\n    }\n  }\n  for (int index\u003d0; index \u003c this.rangeAxes.size(); index++) {\n    ValueAxis yAxis\u003d(ValueAxis)this.rangeAxes.get(index);\n    if (yAxis !\u003d null) {\n      axisCollection.add(yAxis,getRangeAxisEdge(index));\n    }\n  }\n  Map axisStateMap\u003dnew HashMap();\n  double cursor\u003ddataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());\n  Iterator iterator\u003daxisCollection.getAxesAtTop().iterator();\n  while (iterator.hasNext()) {\n    Axis axis\u003d(Axis)iterator.next();\n    if (axis !\u003d null) {\n      AxisState axisState\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.TOP,plotState);\n      cursor\u003daxisState.getCursor();\n      axisStateMap.put(axis,axisState);\n    }\n  }\n  cursor\u003ddataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n  iterator\u003daxisCollection.getAxesAtBottom().iterator();\n  while (iterator.hasNext()) {\n    Axis axis\u003d(Axis)iterator.next();\n    if (axis !\u003d null) {\n      AxisState axisState\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.BOTTOM,plotState);\n      cursor\u003daxisState.getCursor();\n      axisStateMap.put(axis,axisState);\n    }\n  }\n  cursor\u003ddataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtLeft().iterator();\n  while (iterator.hasNext()) {\n    Axis axis\u003d(Axis)iterator.next();\n    if (axis !\u003d null) {\n      AxisState axisState\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.LEFT,plotState);\n      cursor\u003daxisState.getCursor();\n      axisStateMap.put(axis,axisState);\n    }\n  }\n  cursor\u003ddataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtRight().iterator();\n  while (iterator.hasNext()) {\n    Axis axis\u003d(Axis)iterator.next();\n    if (axis !\u003d null) {\n      AxisState axisState\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.RIGHT,plotState);\n      cursor\u003daxisState.getCursor();\n      axisStateMap.put(axis,axisState);\n    }\n  }\n  return axisStateMap;\n}",
    "begin_line": 3025,
    "end_line": 3111,
    "comment": "/** \n * A utility method for drawing the plot\u0027s axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param dataArea  the data area.\n * @param plotState  collects information about the plot (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A map containing the axis states.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.render#3114",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.render",
    "snippet": "public boolean render(Graphics2D g2,Rectangle2D dataArea,int index,PlotRenderingInfo info){\n  boolean foundData\u003dfalse;\n  CategoryDataset currentDataset\u003dgetDataset(index);\n  CategoryItemRenderer renderer\u003dgetRenderer(index);\n  CategoryAxis domainAxis\u003dgetDomainAxisForDataset(index);\n  ValueAxis rangeAxis\u003dgetRangeAxisForDataset(index);\n  boolean hasData\u003d!DatasetUtilities.isEmptyOrNull(currentDataset);\n  if (hasData \u0026\u0026 renderer !\u003d null) {\n    foundData\u003dtrue;\n    CategoryItemRendererState state\u003drenderer.initialise(g2,dataArea,this,index,info);\n    int columnCount\u003dcurrentDataset.getColumnCount();\n    int rowCount\u003dcurrentDataset.getRowCount();\n    int passCount\u003drenderer.getPassCount();\n    for (int pass\u003d0; pass \u003c passCount; pass++) {\n      if (this.columnRenderingOrder \u003d\u003d SortOrder.ASCENDING) {\n        for (int column\u003d0; column \u003c columnCount; column++) {\n          if (this.rowRenderingOrder \u003d\u003d SortOrder.ASCENDING) {\n            for (int row\u003d0; row \u003c rowCount; row++) {\n              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);\n            }\n          }\n else {\n            for (int row\u003drowCount - 1; row \u003e\u003d 0; row--) {\n              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);\n            }\n          }\n        }\n      }\n else {\n        for (int column\u003dcolumnCount - 1; column \u003e\u003d 0; column--) {\n          if (this.rowRenderingOrder \u003d\u003d SortOrder.ASCENDING) {\n            for (int row\u003d0; row \u003c rowCount; row++) {\n              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);\n            }\n          }\n else {\n            for (int row\u003drowCount - 1; row \u003e\u003d 0; row--) {\n              renderer.drawItem(g2,state,dataArea,this,domainAxis,rangeAxis,currentDataset,row,column,pass);\n            }\n          }\n        }\n      }\n    }\n  }\n  return foundData;\n}",
    "begin_line": 3114,
    "end_line": 3182,
    "comment": "/** \n * Draws a representation of a dataset within the dataArea region using the appropriate renderer.\n * @param g2  the graphics device.\n * @param dataArea  the region in which the data is to be drawn.\n * @param index  the dataset and renderer index.\n * @param info  an optional object for collection dimension information.\n * @return A boolean that indicates whether or not real data was found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawDomainGridlines#3190",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawDomainGridlines",
    "snippet": "protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea){\n  if (isDomainGridlinesVisible()) {\n    CategoryAnchor anchor\u003dgetDomainGridlinePosition();\n    RectangleEdge domainAxisEdge\u003dgetDomainAxisEdge();\n    Stroke gridStroke\u003dgetDomainGridlineStroke();\n    Paint gridPaint\u003dgetDomainGridlinePaint();\n    if ((gridStroke !\u003d null) \u0026\u0026 (gridPaint !\u003d null)) {\n      CategoryDataset data\u003dgetDataset();\n      if (data !\u003d null) {\n        CategoryAxis axis\u003dgetDomainAxis();\n        if (axis !\u003d null) {\n          int columnCount\u003ddata.getColumnCount();\n          for (int c\u003d0; c \u003c columnCount; c++) {\n            double xx\u003daxis.getCategoryJava2DCoordinate(anchor,c,columnCount,dataArea,domainAxisEdge);\n            CategoryItemRenderer renderer1\u003dgetRenderer();\n            if (renderer1 !\u003d null) {\n              renderer1.drawDomainGridline(g2,this,dataArea,xx);\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    "begin_line": 3190,
    "end_line": 3221,
    "comment": "/** \n * Draws the gridlines for the plot.\n * @param g2  the graphics device.\n * @param dataArea  the area inside the axes.\n * @see #drawRangeGridlines(Graphics2D,Rectangle2D,List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawRangeGridlines#3230",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeGridlines",
    "snippet": "protected void drawRangeGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  if (isRangeGridlinesVisible()) {\n    Stroke gridStroke\u003dgetRangeGridlineStroke();\n    Paint gridPaint\u003dgetRangeGridlinePaint();\n    if ((gridStroke !\u003d null) \u0026\u0026 (gridPaint !\u003d null)) {\n      ValueAxis axis\u003dgetRangeAxis();\n      if (axis !\u003d null) {\n        Iterator iterator\u003dticks.iterator();\n        while (iterator.hasNext()) {\n          ValueTick tick\u003d(ValueTick)iterator.next();\n          CategoryItemRenderer renderer1\u003dgetRenderer();\n          if (renderer1 !\u003d null) {\n            renderer1.drawRangeGridline(g2,this,getRangeAxis(),dataArea,tick.getValue());\n          }\n        }\n      }\n    }\n  }\n}",
    "begin_line": 3230,
    "end_line": 3253,
    "comment": "/** \n * Draws the gridlines for the plot.\n * @param g2  the graphics device.\n * @param dataArea  the area inside the axes.\n * @param ticks  the ticks.\n * @see #drawDomainGridlines(Graphics2D,Rectangle2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawAnnotations#3261",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawAnnotations",
    "snippet": "protected void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info){\n  Iterator iterator\u003dgetAnnotations().iterator();\n  while (iterator.hasNext()) {\n    CategoryAnnotation annotation\u003d(CategoryAnnotation)iterator.next();\n    annotation.draw(g2,this,dataArea,getDomainAxis(),getRangeAxis(),0,info);\n  }\n}",
    "begin_line": 3261,
    "end_line": 3273,
    "comment": "/** \n * Draws the annotations.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param info  the plot rendering info (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawDomainMarkers#3283",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawDomainMarkers",
    "snippet": "protected void drawDomainMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  CategoryItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  Collection markers\u003dgetDomainMarkers(index,layer);\n  CategoryAxis axis\u003dgetDomainAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      CategoryMarker marker\u003d(CategoryMarker)iterator.next();\n      r.drawDomainMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 3283,
    "end_line": 3304,
    "comment": "/** \n * Draws the domain markers (if any) for an axis and layer.  This method is  typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n * @see #drawRangeMarkers(Graphics2D,Rectangle2D,int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawRangeMarkers#3314",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeMarkers",
    "snippet": "protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  CategoryItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  Collection markers\u003dgetRangeMarkers(index,layer);\n  ValueAxis axis\u003dgetRangeAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker\u003d(Marker)iterator.next();\n      r.drawRangeMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 3314,
    "end_line": 3335,
    "comment": "/** \n * Draws the range markers (if any) for an axis and layer.  This method is  typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n * @see #drawDomainMarkers(Graphics2D,Rectangle2D,int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawRangeLine#3345",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeLine",
    "snippet": "protected void drawRangeLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){\n  double java2D\u003dgetRangeAxis().valueToJava2D(value,dataArea,getRangeAxisEdge());\n  Line2D line\u003dnull;\n  if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    line\u003dnew Line2D.Double(java2D,dataArea.getMinY(),java2D,dataArea.getMaxY());\n  }\n else   if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    line\u003dnew Line2D.Double(dataArea.getMinX(),java2D,dataArea.getMaxX(),java2D);\n  }\n  g2.setStroke(stroke);\n  g2.setPaint(paint);\n  g2.draw(line);\n}",
    "begin_line": 3345,
    "end_line": 3365,
    "comment": "/** \n * Utility method for drawing a line perpendicular to the range axis (used for crosshairs).\n * @param g2  the graphics device.\n * @param dataArea  the area defined by the axes.\n * @param value  the data value.\n * @param stroke  the line stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the line paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.drawRangeCrosshair#3378",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.drawRangeCrosshair",
    "snippet": "protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){\n  if (!axis.getRange().contains(value)) {\n    return;\n  }\n  Line2D line\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n    line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n  }\n else {\n    double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n    line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n  }\n  g2.setStroke(stroke);\n  g2.setPaint(paint);\n  g2.draw(line);\n}",
    "begin_line": 3378,
    "end_line": 3404,
    "comment": "/** \n * Draws a range crosshair.\n * @param g2  the graphics target.\n * @param dataArea  the data area.\n * @param orientation  the plot orientation.\n * @param value  the crosshair value.\n * @param axis  the axis against which the value is measured.\n * @param stroke  the stroke used to draw the crosshair line.\n * @param paint  the paint used to draw the crosshair line.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDataRange#3411",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDataRange",
    "snippet": "public Range getDataRange(ValueAxis axis){\n  Range result\u003dnull;\n  List mappedDatasets\u003dnew ArrayList();\n  int rangeIndex\u003dthis.rangeAxes.indexOf(axis);\n  if (rangeIndex \u003e\u003d 0) {\n    mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));\n  }\n else   if (axis \u003d\u003d getRangeAxis()) {\n    mappedDatasets.addAll(datasetsMappedToRangeAxis(0));\n  }\n  Iterator iterator\u003dmappedDatasets.iterator();\n  while (iterator.hasNext()) {\n    CategoryDataset d\u003d(CategoryDataset)iterator.next();\n    CategoryItemRenderer r\u003dgetRendererForDataset(d);\n    if (r !\u003d null) {\n      result\u003dRange.combine(result,r.findRangeBounds(d));\n    }\n  }\n  return result;\n}",
    "begin_line": 3411,
    "end_line": 3440,
    "comment": "/** \n * Returns the range of data values that will be plotted against the range  axis.  If the dataset is \u003ccode\u003enull\u003c/code\u003e, this method returns  \u003ccode\u003enull\u003c/code\u003e.\n * @param axis  the axis.\n * @return The data range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.datasetsMappedToDomainAxis#3448",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToDomainAxis",
    "snippet": "private List datasetsMappedToDomainAxis(int axisIndex){\n  List result\u003dnew ArrayList();\n  for (int datasetIndex\u003d0; datasetIndex \u003c this.datasets.size(); datasetIndex++) {\n    Object dataset\u003dthis.datasets.get(datasetIndex);\n    if (dataset !\u003d null) {\n      Integer m\u003d(Integer)this.datasetToDomainAxisMap.get(datasetIndex);\n      if (m \u003d\u003d null) {\n        if (axisIndex \u003d\u003d 0) {\n          result.add(dataset);\n        }\n      }\n else {\n        if (m.intValue() \u003d\u003d axisIndex) {\n          result.add(dataset);\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3448,
    "end_line": 3474,
    "comment": "/** \n * Returns a list of the datasets that are mapped to the axis with the specified index.\n * @param axisIndex  the axis index.\n * @return The list (possibly empty, but never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.datasetsMappedToRangeAxis#3481",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToRangeAxis",
    "snippet": "private List datasetsMappedToRangeAxis(int index){\n  List result\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    Object dataset\u003dthis.datasets.get(i);\n    if (dataset !\u003d null) {\n      Integer m\u003d(Integer)this.datasetToRangeAxisMap.get(i);\n      if (m \u003d\u003d null) {\n        if (index \u003d\u003d 0) {\n          result.add(dataset);\n        }\n      }\n else {\n        if (m.intValue() \u003d\u003d index) {\n          result.add(dataset);\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3481,
    "end_line": 3504,
    "comment": "/** \n * A utility method that returns a list of datasets that are mapped to a  given range axis.\n * @param index  the axis index.\n * @return A list of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getWeight#3511",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getWeight",
    "snippet": "public int getWeight(){\n  return this.weight;\n}",
    "begin_line": 3511,
    "end_line": 3516,
    "comment": "/** \n * Returns the weight for this plot when it is used as a subplot within a  combined plot.\n * @return The weight.\n * @see #setWeight(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setWeight#3523",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setWeight",
    "snippet": "public void setWeight(int weight){\n  this.weight\u003dweight;\n  fireChangeEvent();\n}",
    "begin_line": 3523,
    "end_line": 3529,
    "comment": "/** \n * Sets the weight for the plot and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param weight  the weight.\n * @see #getWeight()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getFixedDomainAxisSpace#3536",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getFixedDomainAxisSpace",
    "snippet": "public AxisSpace getFixedDomainAxisSpace(){\n  return this.fixedDomainAxisSpace;\n}",
    "begin_line": 3536,
    "end_line": 3540,
    "comment": "/** \n * Returns the fixed domain axis space.\n * @return The fixed domain axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedDomainAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setFixedDomainAxisSpace#3547",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space){\n  setFixedDomainAxisSpace(space,true);\n}",
    "begin_line": 3547,
    "end_line": 3552,
    "comment": "/** \n * Sets the fixed domain axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedDomainAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setFixedDomainAxisSpace#3561",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space,boolean notify){\n  this.fixedDomainAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 3561,
    "end_line": 3570,
    "comment": "/** \n * Sets the fixed domain axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedDomainAxisSpace()\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getFixedRangeAxisSpace#3577",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getFixedRangeAxisSpace",
    "snippet": "public AxisSpace getFixedRangeAxisSpace(){\n  return this.fixedRangeAxisSpace;\n}",
    "begin_line": 3577,
    "end_line": 3581,
    "comment": "/** \n * Returns the fixed range axis space.\n * @return The fixed range axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedRangeAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setFixedRangeAxisSpace#3588",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space){\n  setFixedRangeAxisSpace(space,true);\n}",
    "begin_line": 3588,
    "end_line": 3593,
    "comment": "/** \n * Sets the fixed range axis space and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedRangeAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setFixedRangeAxisSpace#3602",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space,boolean notify){\n  this.fixedRangeAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 3602,
    "end_line": 3611,
    "comment": "/** \n * Sets the fixed range axis space and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedRangeAxisSpace()\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getCategories#3616",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getCategories",
    "snippet": "public List getCategories(){\n  List result\u003dnull;\n  if (getDataset() !\u003d null) {\n    result\u003dCollections.unmodifiableList(getDataset().getColumnKeys());\n  }\n  return result;\n}",
    "begin_line": 3616,
    "end_line": 3626,
    "comment": "/** \n * Returns a list of the categories in the plot\u0027s primary dataset.\n * @return A list of the categories in the plot\u0027s primary dataset.\n * @see #getCategoriesForAxis(CategoryAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getCategoriesForAxis#3634",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getCategoriesForAxis",
    "snippet": "public List getCategoriesForAxis(CategoryAxis axis){\n  List result\u003dnew ArrayList();\n  int axisIndex\u003dthis.domainAxes.indexOf(axis);\n  List datasets\u003ddatasetsMappedToDomainAxis(axisIndex);\n  Iterator iterator\u003ddatasets.iterator();\n  while (iterator.hasNext()) {\n    CategoryDataset dataset\u003d(CategoryDataset)iterator.next();\n    for (int i\u003d0; i \u003c dataset.getColumnCount(); i++) {\n      Comparable category\u003ddataset.getColumnKey(i);\n      if (!result.contains(category)) {\n        result.add(category);\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3634,
    "end_line": 3654,
    "comment": "/** \n * Returns a list of the categories that should be displayed for the specified axis.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted)\n * @return The categories.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getDrawSharedDomainAxis#3661",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getDrawSharedDomainAxis",
    "snippet": "public boolean getDrawSharedDomainAxis(){\n  return this.drawSharedDomainAxis;\n}",
    "begin_line": 3661,
    "end_line": 3666,
    "comment": "/** \n * Returns the flag that controls whether or not the shared domain axis is  drawn for each subplot.\n * @return A boolean.\n * @see #setDrawSharedDomainAxis(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setDrawSharedDomainAxis#3673",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setDrawSharedDomainAxis",
    "snippet": "public void setDrawSharedDomainAxis(boolean draw){\n  this.drawSharedDomainAxis\u003ddraw;\n  fireChangeEvent();\n}",
    "begin_line": 3673,
    "end_line": 3679,
    "comment": "/** \n * Sets the flag that controls whether the shared domain axis is drawn when this plot is being used as a subplot.\n * @param draw  a boolean.\n * @see #getDrawSharedDomainAxis()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isDomainZoomable#3686",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isDomainZoomable",
    "snippet": "public boolean isDomainZoomable(){\n  return false;\n}",
    "begin_line": 3686,
    "end_line": 3691,
    "comment": "/** \n * Returns \u003ccode\u003efalse\u003c/code\u003e to indicate that the domain axes are not zoomable.\n * @return A boolean.\n * @see #isRangeZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.isRangeZoomable#3698",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.isRangeZoomable",
    "snippet": "public boolean isRangeZoomable(){\n  return true;\n}",
    "begin_line": 3698,
    "end_line": 3702,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e to indicate that the range axes are zoomable.\n * @return A boolean.\n * @see #isDomainZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomDomainAxes#3710",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){\n}",
    "begin_line": 3710,
    "end_line": 3715,
    "comment": "/** \n * This method does nothing, because \u003ccode\u003eCategoryPlot\u003c/code\u003e doesn\u0027t  support zooming on the domain.\n * @param factor  the zoom factor.\n * @param state  the plot state.\n * @param source  the source point (in Java2D space) for the zoom.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomDomainAxes#3724",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){\n}",
    "begin_line": 3724,
    "end_line": 3729,
    "comment": "/** \n * This method does nothing, because \u003ccode\u003eCategoryPlot\u003c/code\u003e doesn\u0027t  support zooming on the domain.\n * @param lowerPercent  the lower bound.\n * @param upperPercent  the upper bound.\n * @param state  the plot state.\n * @param source  the source point (in Java2D space) for the zoom.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomDomainAxes#3740",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n}",
    "begin_line": 3740,
    "end_line": 3747,
    "comment": "/** \n * This method does nothing, because \u003ccode\u003eCategoryPlot\u003c/code\u003e doesn\u0027t  support zooming on the domain.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point (in Java2D space).\n * @param useAnchor  use source point as zoom anchor?\n * @see #zoomRangeAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomRangeAxes#3755",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo state,Point2D source){\n  zoomRangeAxes(factor,state,source,false);\n}",
    "begin_line": 3755,
    "end_line": 3760,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param state  the plot state.\n * @param source  the source point (in Java2D space) for the zoom.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomRangeAxes#3771",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      if (useAnchor) {\n        double sourceY\u003dsource.getY();\n        if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n          sourceY\u003dsource.getX();\n        }\n        double anchorY\u003drangeAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());\n        rangeAxis.resizeRange(factor,anchorY);\n      }\n else {\n        rangeAxis.resizeRange(factor);\n      }\n    }\n  }\n}",
    "begin_line": 3771,
    "end_line": 3798,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @param useAnchor  a flag that controls whether or not the source pointis used for the zoom anchor.\n * @see #zoomDomainAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.zoomRangeAxes#3807",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo state,Point2D source){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      rangeAxis.zoomRange(lowerPercent,upperPercent);\n    }\n  }\n}",
    "begin_line": 3807,
    "end_line": 3816,
    "comment": "/** \n * Zooms in on the range axes.\n * @param lowerPercent  the lower bound.\n * @param upperPercent  the upper bound.\n * @param state  the plot state.\n * @param source  the source point (in Java2D space) for the zoom.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.getAnchorValue#3823",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.getAnchorValue",
    "snippet": "public double getAnchorValue(){\n  return this.anchorValue;\n}",
    "begin_line": 3823,
    "end_line": 3827,
    "comment": "/** \n * Returns the anchor value.\n * @return The anchor value.\n * @see #setAnchorValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setAnchorValue#3834",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setAnchorValue",
    "snippet": "public void setAnchorValue(double value){\n  setAnchorValue(value,true);\n}",
    "begin_line": 3834,
    "end_line": 3839,
    "comment": "/** \n * Sets the anchor value and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param value  the anchor value.\n * @see #getAnchorValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.setAnchorValue#3847",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.setAnchorValue",
    "snippet": "public void setAnchorValue(double value,boolean notify){\n  this.anchorValue\u003dvalue;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 3847,
    "end_line": 3855,
    "comment": "/** \n * Sets the anchor value and, if requested, sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param value  the value.\n * @param notify  notify listeners?\n * @see #getAnchorValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.equals#3862",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof CategoryPlot)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  CategoryPlot that\u003d(CategoryPlot)obj;\n  if (this.orientation !\u003d that.orientation) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.axisOffset,that.axisOffset)) {\n    return false;\n  }\n  if (!this.domainAxes.equals(that.domainAxes)) {\n    return false;\n  }\n  if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n    return false;\n  }\n  if (this.drawSharedDomainAxis !\u003d that.drawSharedDomainAxis) {\n    return false;\n  }\n  if (!this.rangeAxes.equals(that.rangeAxes)) {\n    return false;\n  }\n  if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToDomainAxisMap,that.datasetToDomainAxisMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToRangeAxisMap,that.datasetToRangeAxisMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.renderers,that.renderers)) {\n    return false;\n  }\n  if (this.renderingOrder !\u003d that.renderingOrder) {\n    return false;\n  }\n  if (this.columnRenderingOrder !\u003d that.columnRenderingOrder) {\n    return false;\n  }\n  if (this.rowRenderingOrder !\u003d that.rowRenderingOrder) {\n    return false;\n  }\n  if (this.domainGridlinesVisible !\u003d that.domainGridlinesVisible) {\n    return false;\n  }\n  if (this.domainGridlinePosition !\u003d that.domainGridlinePosition) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainGridlineStroke,that.domainGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {\n    return false;\n  }\n  if (this.rangeGridlinesVisible !\u003d that.rangeGridlinesVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeGridlineStroke,that.rangeGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {\n    return false;\n  }\n  if (this.anchorValue !\u003d that.anchorValue) {\n    return false;\n  }\n  if (this.rangeCrosshairVisible !\u003d that.rangeCrosshairVisible) {\n    return false;\n  }\n  if (this.rangeCrosshairValue !\u003d that.rangeCrosshairValue) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeCrosshairStroke,that.rangeCrosshairStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeCrosshairPaint,that.rangeCrosshairPaint)) {\n    return false;\n  }\n  if (this.rangeCrosshairLockedOnData !\u003d that.rangeCrosshairLockedOnData) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.annotations,that.annotations)) {\n    return false;\n  }\n  if (this.weight !\u003d that.weight) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.fixedDomainAxisSpace,that.fixedDomainAxisSpace)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.fixedRangeAxisSpace,that.fixedRangeAxisSpace)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 3862,
    "end_line": 3990,
    "comment": "/** \n * Tests the plot for equality with an arbitrary object.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.clone#3993",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  CategoryPlot clone\u003d(CategoryPlot)super.clone();\n  clone.domainAxes\u003dnew ObjectList();\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    CategoryAxis xAxis\u003d(CategoryAxis)this.domainAxes.get(i);\n    if (xAxis !\u003d null) {\n      CategoryAxis clonedAxis\u003d(CategoryAxis)xAxis.clone();\n      clone.setDomainAxis(i,clonedAxis);\n    }\n  }\n  clone.domainAxisLocations\u003d(ObjectList)this.domainAxisLocations.clone();\n  clone.rangeAxes\u003dnew ObjectList();\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis yAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (yAxis !\u003d null) {\n      ValueAxis clonedAxis\u003d(ValueAxis)yAxis.clone();\n      clone.setRangeAxis(i,clonedAxis);\n    }\n  }\n  clone.rangeAxisLocations\u003d(ObjectList)this.rangeAxisLocations.clone();\n  clone.datasets\u003d(ObjectList)this.datasets.clone();\n  for (int i\u003d0; i \u003c clone.datasets.size(); i++) {\n    CategoryDataset dataset\u003dclone.getDataset(i);\n    if (dataset !\u003d null) {\n      dataset.addChangeListener(clone);\n    }\n  }\n  clone.datasetToDomainAxisMap\u003d(ObjectList)this.datasetToDomainAxisMap.clone();\n  clone.datasetToRangeAxisMap\u003d(ObjectList)this.datasetToRangeAxisMap.clone();\n  clone.renderers\u003d(ObjectList)this.renderers.clone();\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    clone.fixedDomainAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    clone.fixedRangeAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);\n  }\n  return clone;\n}",
    "begin_line": 3993,
    "end_line": 4047,
    "comment": "/** \n * Returns a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException  if the cloning is not supported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.writeObject#4054",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);\n  SerialUtilities.writePaint(this.domainGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);\n  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeCrosshairStroke,stream);\n  SerialUtilities.writePaint(this.rangeCrosshairPaint,stream);\n}",
    "begin_line": 4054,
    "end_line": 4064,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CategoryPlot.readObject#4072",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "class_name": "org.jfree.chart.plot.CategoryPlot",
    "signature": "org.jfree.chart.plot.CategoryPlot.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.domainGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeCrosshairStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeCrosshairPaint\u003dSerialUtilities.readPaint(stream);\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    CategoryAxis xAxis\u003d(CategoryAxis)this.domainAxes.get(i);\n    if (xAxis !\u003d null) {\n      xAxis.setPlot(this);\n      xAxis.addChangeListener(this);\n    }\n  }\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis yAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (yAxis !\u003d null) {\n      yAxis.setPlot(this);\n      yAxis.addChangeListener(this);\n    }\n  }\n  int datasetCount\u003dthis.datasets.size();\n  for (int i\u003d0; i \u003c datasetCount; i++) {\n    Dataset dataset\u003d(Dataset)this.datasets.get(i);\n    if (dataset !\u003d null) {\n      dataset.addChangeListener(this);\n    }\n  }\n  int rendererCount\u003dthis.renderers.size();\n  for (int i\u003d0; i \u003c rendererCount; i++) {\n    CategoryItemRenderer renderer\u003d(CategoryItemRenderer)this.renderers.get(i);\n    if (renderer !\u003d null) {\n      renderer.addChangeListener(this);\n    }\n  }\n}",
    "begin_line": 4072,
    "end_line": 4115,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.DatasetRenderingOrder#79",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder",
    "snippet": "private DatasetRenderingOrder(String name){\n  this.name\u003dname;\n}",
    "begin_line": 79,
    "end_line": 82,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.toString#88",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 88,
    "end_line": 91,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.equals#98",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof DatasetRenderingOrder)) {\n    return false;\n  }\n  DatasetRenderingOrder order\u003d(DatasetRenderingOrder)obj;\n  if (!this.name.equals(order.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 98,
    "end_line": 113,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.hashCode#119",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 119,
    "end_line": 122,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.readResolve#129",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(DatasetRenderingOrder.FORWARD)) {\n    return DatasetRenderingOrder.FORWARD;\n  }\n else   if (this.equals(DatasetRenderingOrder.REVERSE)) {\n    return DatasetRenderingOrder.REVERSE;\n  }\n  return null;\n}",
    "begin_line": 129,
    "end_line": 139,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#147",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier",
    "snippet": "public DefaultDrawingSupplier(){\n  this(DEFAULT_PAINT_SEQUENCE,DEFAULT_FILL_PAINT_SEQUENCE,DEFAULT_OUTLINE_PAINT_SEQUENCE,DEFAULT_STROKE_SEQUENCE,DEFAULT_OUTLINE_STROKE_SEQUENCE,DEFAULT_SHAPE_SEQUENCE);\n}",
    "begin_line": 147,
    "end_line": 156,
    "comment": "/** \n * Creates a new supplier, with default sequences for fill paint, outline  paint, stroke and shapes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#166",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier",
    "snippet": "public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){\n  this.paintSequence\u003dpaintSequence;\n  this.fillPaintSequence\u003dDEFAULT_FILL_PAINT_SEQUENCE;\n  this.outlinePaintSequence\u003doutlinePaintSequence;\n  this.strokeSequence\u003dstrokeSequence;\n  this.outlineStrokeSequence\u003doutlineStrokeSequence;\n  this.shapeSequence\u003dshapeSequence;\n}",
    "begin_line": 166,
    "end_line": 180,
    "comment": "/** \n * Creates a new supplier.\n * @param paintSequence  the fill paint sequence.\n * @param outlinePaintSequence  the outline paint sequence.\n * @param strokeSequence  the stroke sequence.\n * @param outlineStrokeSequence  the outline stroke sequence.\n * @param shapeSequence  the shape sequence.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#192",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier",
    "snippet": "public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] fillPaintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){\n  this.paintSequence\u003dpaintSequence;\n  this.fillPaintSequence\u003dfillPaintSequence;\n  this.outlinePaintSequence\u003doutlinePaintSequence;\n  this.strokeSequence\u003dstrokeSequence;\n  this.outlineStrokeSequence\u003doutlineStrokeSequence;\n  this.shapeSequence\u003dshapeSequence;\n}",
    "begin_line": 192,
    "end_line": 205,
    "comment": "/** \n * Creates a new supplier.\n * @param paintSequence  the paint sequence.\n * @param fillPaintSequence  the fill paint sequence.\n * @param outlinePaintSequence  the outline paint sequence.\n * @param strokeSequence  the stroke sequence.\n * @param outlineStrokeSequence  the outline stroke sequence.\n * @param shapeSequence  the shape sequence.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextPaint#211",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint",
    "snippet": "public Paint getNextPaint(){\n  Paint result\u003dthis.paintSequence[this.paintIndex % this.paintSequence.length];\n  this.paintIndex++;\n  return result;\n}",
    "begin_line": 211,
    "end_line": 217,
    "comment": "/** \n * Returns the next paint in the sequence.\n * @return The paint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextOutlinePaint#223",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlinePaint",
    "snippet": "public Paint getNextOutlinePaint(){\n  Paint result\u003dthis.outlinePaintSequence[this.outlinePaintIndex % this.outlinePaintSequence.length];\n  this.outlinePaintIndex++;\n  return result;\n}",
    "begin_line": 223,
    "end_line": 229,
    "comment": "/** \n * Returns the next outline paint in the sequence.\n * @return The paint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextFillPaint#236",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextFillPaint",
    "snippet": "public Paint getNextFillPaint(){\n  Paint result\u003dthis.fillPaintSequence[this.fillPaintIndex % this.fillPaintSequence.length];\n  this.fillPaintIndex++;\n  return result;\n}",
    "begin_line": 236,
    "end_line": 243,
    "comment": "/** \n * Returns the next fill paint in the sequence.\n * @return The paint.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextStroke#249",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextStroke",
    "snippet": "public Stroke getNextStroke(){\n  Stroke result\u003dthis.strokeSequence[this.strokeIndex % this.strokeSequence.length];\n  this.strokeIndex++;\n  return result;\n}",
    "begin_line": 249,
    "end_line": 255,
    "comment": "/** \n * Returns the next stroke in the sequence.\n * @return The stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextOutlineStroke#261",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlineStroke",
    "snippet": "public Stroke getNextOutlineStroke(){\n  Stroke result\u003dthis.outlineStrokeSequence[this.outlineStrokeIndex % this.outlineStrokeSequence.length];\n  this.outlineStrokeIndex++;\n  return result;\n}",
    "begin_line": 261,
    "end_line": 267,
    "comment": "/** \n * Returns the next outline stroke in the sequence.\n * @return The stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextShape#273",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextShape",
    "snippet": "public Shape getNextShape(){\n  Shape result\u003dthis.shapeSequence[this.shapeIndex % this.shapeSequence.length];\n  this.shapeIndex++;\n  return result;\n}",
    "begin_line": 273,
    "end_line": 279,
    "comment": "/** \n * Returns the next shape in the sequence.\n * @return The shape.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.createStandardSeriesShapes#285",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes",
    "snippet": "public static Shape[] createStandardSeriesShapes(){\n  Shape[] result\u003dnew Shape[10];\n  double size\u003d6.0;\n  double delta\u003dsize / 2.0;\n  int[] xpoints\u003dnull;\n  int[] ypoints\u003dnull;\n  result[0]\u003dnew Rectangle2D.Double(-delta,-delta,size,size);\n  result[1]\u003dnew Ellipse2D.Double(-delta,-delta,size,size);\n  xpoints\u003dintArray(0.0,delta,-delta);\n  ypoints\u003dintArray(-delta,delta,delta);\n  result[2]\u003dnew Polygon(xpoints,ypoints,3);\n  xpoints\u003dintArray(0.0,delta,0.0,-delta);\n  ypoints\u003dintArray(-delta,0.0,delta,0.0);\n  result[3]\u003dnew Polygon(xpoints,ypoints,4);\n  result[4]\u003dnew Rectangle2D.Double(-delta,-delta / 2,size,size / 2);\n  xpoints\u003dintArray(-delta,+delta,0.0);\n  ypoints\u003dintArray(-delta,-delta,delta);\n  result[5]\u003dnew Polygon(xpoints,ypoints,3);\n  result[6]\u003dnew Ellipse2D.Double(-delta,-delta / 2,size,size / 2);\n  xpoints\u003dintArray(-delta,delta,-delta);\n  ypoints\u003dintArray(-delta,0.0,delta);\n  result[7]\u003dnew Polygon(xpoints,ypoints,3);\n  result[8]\u003dnew Rectangle2D.Double(-delta / 2,-delta,size / 2,size);\n  xpoints\u003dintArray(-delta,delta,delta);\n  ypoints\u003dintArray(0.0,-delta,+delta);\n  result[9]\u003dnew Polygon(xpoints,ypoints,3);\n  return result;\n}",
    "begin_line": 285,
    "end_line": 337,
    "comment": "/** \n * Creates an array of standard shapes to display for the items in series  on charts.\n * @return The array of shapes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.equals#344",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DefaultDrawingSupplier)) {\n    return false;\n  }\n  DefaultDrawingSupplier that\u003d(DefaultDrawingSupplier)obj;\n  if (!Arrays.equals(this.paintSequence,that.paintSequence)) {\n    return false;\n  }\n  if (this.paintIndex !\u003d that.paintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlinePaintSequence,that.outlinePaintSequence)) {\n    return false;\n  }\n  if (this.outlinePaintIndex !\u003d that.outlinePaintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.strokeSequence,that.strokeSequence)) {\n    return false;\n  }\n  if (this.strokeIndex !\u003d that.strokeIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlineStrokeSequence,that.outlineStrokeSequence)) {\n    return false;\n  }\n  if (this.outlineStrokeIndex !\u003d that.outlineStrokeIndex) {\n    return false;\n  }\n  if (!equalShapes(this.shapeSequence,that.shapeSequence)) {\n    return false;\n  }\n  if (this.shapeIndex !\u003d that.shapeIndex) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 344,
    "end_line": 392,
    "comment": "/** \n * Tests this object for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.equalShapes#400",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equalShapes",
    "snippet": "private boolean equalShapes(Shape[] s1,Shape[] s2){\n  if (s1 \u003d\u003d null) {\n    return s2 \u003d\u003d null;\n  }\n  if (s2 \u003d\u003d null) {\n    return false;\n  }\n  if (s1.length !\u003d s2.length) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c s1.length; i++) {\n    if (!ShapeUtilities.equal(s1[i],s2[i])) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 400,
    "end_line": 418,
    "comment": "/** \n * A utility method for testing the equality of two arrays of shapes.\n * @param s1  the first array (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param s2  the second array (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.writeObject#425",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int paintCount\u003dthis.paintSequence.length;\n  stream.writeInt(paintCount);\n  for (int i\u003d0; i \u003c paintCount; i++) {\n    SerialUtilities.writePaint(this.paintSequence[i],stream);\n  }\n  int outlinePaintCount\u003dthis.outlinePaintSequence.length;\n  stream.writeInt(outlinePaintCount);\n  for (int i\u003d0; i \u003c outlinePaintCount; i++) {\n    SerialUtilities.writePaint(this.outlinePaintSequence[i],stream);\n  }\n  int strokeCount\u003dthis.strokeSequence.length;\n  stream.writeInt(strokeCount);\n  for (int i\u003d0; i \u003c strokeCount; i++) {\n    SerialUtilities.writeStroke(this.strokeSequence[i],stream);\n  }\n  int outlineStrokeCount\u003dthis.outlineStrokeSequence.length;\n  stream.writeInt(outlineStrokeCount);\n  for (int i\u003d0; i \u003c outlineStrokeCount; i++) {\n    SerialUtilities.writeStroke(this.outlineStrokeSequence[i],stream);\n  }\n  int shapeCount\u003dthis.shapeSequence.length;\n  stream.writeInt(shapeCount);\n  for (int i\u003d0; i \u003c shapeCount; i++) {\n    SerialUtilities.writeShape(this.shapeSequence[i],stream);\n  }\n}",
    "begin_line": 425,
    "end_line": 460,
    "comment": "/** \n * Handles serialization.\n * @param stream  the output stream.\n * @throws IOException if there is an I/O problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.readObject#468",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  int paintCount\u003dstream.readInt();\n  this.paintSequence\u003dnew Paint[paintCount];\n  for (int i\u003d0; i \u003c paintCount; i++) {\n    this.paintSequence[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  int outlinePaintCount\u003dstream.readInt();\n  this.outlinePaintSequence\u003dnew Paint[outlinePaintCount];\n  for (int i\u003d0; i \u003c outlinePaintCount; i++) {\n    this.outlinePaintSequence[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  int strokeCount\u003dstream.readInt();\n  this.strokeSequence\u003dnew Stroke[strokeCount];\n  for (int i\u003d0; i \u003c strokeCount; i++) {\n    this.strokeSequence[i]\u003dSerialUtilities.readStroke(stream);\n  }\n  int outlineStrokeCount\u003dstream.readInt();\n  this.outlineStrokeSequence\u003dnew Stroke[outlineStrokeCount];\n  for (int i\u003d0; i \u003c outlineStrokeCount; i++) {\n    this.outlineStrokeSequence[i]\u003dSerialUtilities.readStroke(stream);\n  }\n  int shapeCount\u003dstream.readInt();\n  this.shapeSequence\u003dnew Shape[shapeCount];\n  for (int i\u003d0; i \u003c shapeCount; i++) {\n    this.shapeSequence[i]\u003dSerialUtilities.readShape(stream);\n  }\n}",
    "begin_line": 468,
    "end_line": 504,
    "comment": "/** \n * Restores a serialized object.\n * @param stream  the input stream.\n * @throws IOException if there is an I/O problem.\n * @throws ClassNotFoundException if there is a problem loading a class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.intArray#513",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray",
    "snippet": "private static int[] intArray(double a,double b,double c){\n  return new int[]{(int)a,(int)b,(int)c};\n}",
    "begin_line": 513,
    "end_line": 518,
    "comment": "/** \n * Helper method to avoid lots of explicit casts in getShape().  Returns an array containing the provided doubles cast to ints.\n * @param a  x\n * @param b  y\n * @param c  z\n * @return int[3] with converted params.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.intArray#528",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray",
    "snippet": "private static int[] intArray(double a,double b,double c,double d){\n  return new int[]{(int)a,(int)b,(int)c,(int)d};\n}",
    "begin_line": 528,
    "end_line": 533,
    "comment": "/** \n * Helper method to avoid lots of explicit casts in getShape().  Returns an array containing the provided doubles cast to ints.\n * @param a  x\n * @param b  y\n * @param c  z\n * @param d  t\n * @return int[4] with converted params.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.clone#536",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DefaultDrawingSupplier clone\u003d(DefaultDrawingSupplier)super.clone();\n  return clone;\n}",
    "begin_line": 536,
    "end_line": 546,
    "comment": "/** \n * Returns a clone.\n * @return A clone.\n * @throws CloneNotSupportedException if a component of the supplier does not support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.Marker#143",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.Marker",
    "snippet": "protected Marker(){\n  this(Color.gray);\n}",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Creates a new marker with default attributes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.Marker#151",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.Marker",
    "snippet": "protected Marker(Paint paint){\n  this(paint,new BasicStroke(0.5f),Color.gray,new BasicStroke(0.5f),0.80f);\n}",
    "begin_line": 151,
    "end_line": 155,
    "comment": "/** \n * Constructs a new marker.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.Marker#166",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.Marker",
    "snippet": "protected Marker(Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  if (alpha \u003c 0.0f || alpha \u003e 1.0f)   throw new IllegalArgumentException(\"The \u0027alpha\u0027 value must be in the range 0.0f to 1.0f\");\n  this.paint\u003dpaint;\n  this.stroke\u003dstroke;\n  this.outlinePaint\u003doutlinePaint;\n  this.outlineStroke\u003doutlineStroke;\n  this.alpha\u003dalpha;\n  this.labelFont\u003dnew Font(\"SansSerif\",Font.PLAIN,9);\n  this.labelPaint\u003dColor.black;\n  this.labelAnchor\u003dRectangleAnchor.TOP_LEFT;\n  this.labelOffset\u003dnew RectangleInsets(3.0,3.0,3.0,3.0);\n  this.labelOffsetType\u003dLengthAdjustmentType.CONTRACT;\n  this.labelTextAnchor\u003dTextAnchor.CENTER;\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 166,
    "end_line": 199,
    "comment": "/** \n * Constructs a new marker.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param outlinePaint  the outline paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param outlineStroke  the outline stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param alpha  the alpha transparency (must be in the range 0.0f to 1.0f).\n * @throws IllegalArgumentException if \u003ccode\u003epaint\u003c/code\u003e or \u003ccode\u003estroke\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e, or \u003ccode\u003ealpha\u003c/code\u003e is  not in the specified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getPaint#206",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getPaint",
    "snippet": "public Paint getPaint(){\n  return this.paint;\n}",
    "begin_line": 206,
    "end_line": 210,
    "comment": "/** \n * Returns the paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setPaint#217",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setPaint",
    "snippet": "public void setPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.paint\u003dpaint;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 217,
    "end_line": 226,
    "comment": "/** \n * Sets the paint and sends a  {@link MarkerChangeEvent} to all registeredlisteners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getStroke#233",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getStroke",
    "snippet": "public Stroke getStroke(){\n  return this.stroke;\n}",
    "begin_line": 233,
    "end_line": 237,
    "comment": "/** \n * Returns the stroke.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setStroke#244",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setStroke",
    "snippet": "public void setStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.stroke\u003dstroke;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 244,
    "end_line": 253,
    "comment": "/** \n * Sets the stroke and sends a  {@link MarkerChangeEvent} to all registeredlisteners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getOutlinePaint#260",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getOutlinePaint",
    "snippet": "public Paint getOutlinePaint(){\n  return this.outlinePaint;\n}",
    "begin_line": 260,
    "end_line": 264,
    "comment": "/** \n * Returns the outline paint.\n * @return The outline paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setOutlinePaint#271",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setOutlinePaint",
    "snippet": "public void setOutlinePaint(Paint paint){\n  this.outlinePaint\u003dpaint;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 271,
    "end_line": 277,
    "comment": "/** \n * Sets the outline paint and sends a  {@link MarkerChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getOutlineStroke#284",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getOutlineStroke",
    "snippet": "public Stroke getOutlineStroke(){\n  return this.outlineStroke;\n}",
    "begin_line": 284,
    "end_line": 288,
    "comment": "/** \n * Returns the outline stroke.\n * @return The outline stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setOutlineStroke#295",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setOutlineStroke",
    "snippet": "public void setOutlineStroke(Stroke stroke){\n  this.outlineStroke\u003dstroke;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 295,
    "end_line": 301,
    "comment": "/** \n * Sets the outline stroke and sends a  {@link MarkerChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getAlpha#308",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getAlpha",
    "snippet": "public float getAlpha(){\n  return this.alpha;\n}",
    "begin_line": 308,
    "end_line": 312,
    "comment": "/** \n * Returns the alpha transparency.\n * @return The alpha transparency.\n * @see #setAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setAlpha#320",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setAlpha",
    "snippet": "public void setAlpha(float alpha){\n  if (alpha \u003c 0.0f || alpha \u003e 1.0f)   throw new IllegalArgumentException(\"The \u0027alpha\u0027 value must be in the range 0.0f to 1.0f\");\n  this.alpha\u003dalpha;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 320,
    "end_line": 334,
    "comment": "/** \n * Sets the alpha transparency that should be used when drawing the  marker, and sends a  {@link MarkerChangeEvent} to all registered listeners.  The alpha transparency is a value in the range 0.0f  (completely transparent) to 1.0f (completely opaque).\n * @param alpha  the alpha transparency (must be in the range 0.0f to 1.0f).\n * @throws IllegalArgumentException if \u003ccode\u003ealpha\u003c/code\u003e is not in thespecified range.\n * @see #getAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabel#341",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabel",
    "snippet": "public String getLabel(){\n  return this.label;\n}",
    "begin_line": 341,
    "end_line": 345,
    "comment": "/** \n * Returns the label (if \u003ccode\u003enull\u003c/code\u003e no label is displayed).\n * @return The label (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabel(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabel#352",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabel",
    "snippet": "public void setLabel(String label){\n  this.label\u003dlabel;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 352,
    "end_line": 358,
    "comment": "/** \n * Sets the label (if \u003ccode\u003enull\u003c/code\u003e no label is displayed) and sends a {@link MarkerChangeEvent} to all registered listeners.\n * @param label  the label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabel()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelFont#365",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelFont",
    "snippet": "public Font getLabelFont(){\n  return this.labelFont;\n}",
    "begin_line": 365,
    "end_line": 369,
    "comment": "/** \n * Returns the label font.\n * @return The label font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelFont#376",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelFont",
    "snippet": "public void setLabelFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.labelFont\u003dfont;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 376,
    "end_line": 385,
    "comment": "/** \n * Sets the label font and sends a  {@link MarkerChangeEvent} to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelPaint#392",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelPaint",
    "snippet": "public Paint getLabelPaint(){\n  return this.labelPaint;\n}",
    "begin_line": 392,
    "end_line": 396,
    "comment": "/** \n * Returns the label paint.\n * @return The label paint (never \u003c/code\u003enull\u003c/code\u003e).\n * @see #setLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelPaint#403",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelPaint",
    "snippet": "public void setLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.labelPaint\u003dpaint;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 403,
    "end_line": 412,
    "comment": "/** \n * Sets the label paint and sends a  {@link MarkerChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelAnchor#419",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelAnchor",
    "snippet": "public RectangleAnchor getLabelAnchor(){\n  return this.labelAnchor;\n}",
    "begin_line": 419,
    "end_line": 424,
    "comment": "/** \n * Returns the label anchor.  This defines the position of the label  anchor, relative to the bounds of the marker.\n * @return The label anchor (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelAnchor(RectangleAnchor)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelAnchor#431",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelAnchor",
    "snippet": "public void setLabelAnchor(RectangleAnchor anchor){\n  if (anchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027anchor\u0027 argument.\");\n  }\n  this.labelAnchor\u003danchor;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 431,
    "end_line": 441,
    "comment": "/** \n * Sets the label anchor and sends a  {@link MarkerChangeEvent} to all registered listeners.  The anchor defines the position of the label  anchor, relative to the bounds of the marker.\n * @param anchor  the anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelAnchor()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelOffset#448",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelOffset",
    "snippet": "public RectangleInsets getLabelOffset(){\n  return this.labelOffset;\n}",
    "begin_line": 448,
    "end_line": 452,
    "comment": "/** \n * Returns the label offset.\n * @return The label offset (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelOffset#459",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelOffset",
    "snippet": "public void setLabelOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.labelOffset\u003doffset;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 459,
    "end_line": 468,
    "comment": "/** \n * Sets the label offset and sends a  {@link MarkerChangeEvent} to allregistered listeners.\n * @param offset  the label offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelOffsetType#475",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelOffsetType",
    "snippet": "public LengthAdjustmentType getLabelOffsetType(){\n  return this.labelOffsetType;\n}",
    "begin_line": 475,
    "end_line": 479,
    "comment": "/** \n * Returns the label offset type.\n * @return The type (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelOffsetType(LengthAdjustmentType)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelOffsetType#486",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelOffsetType",
    "snippet": "public void setLabelOffsetType(LengthAdjustmentType adj){\n  if (adj \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027adj\u0027 argument.\");\n  }\n  this.labelOffsetType\u003dadj;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 486,
    "end_line": 495,
    "comment": "/** \n * Sets the label offset type and sends a  {@link MarkerChangeEvent} to allregistered listeners.\n * @param adj  the type (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelOffsetType()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getLabelTextAnchor#502",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getLabelTextAnchor",
    "snippet": "public TextAnchor getLabelTextAnchor(){\n  return this.labelTextAnchor;\n}",
    "begin_line": 502,
    "end_line": 506,
    "comment": "/** \n * Returns the label text anchor.\n * @return The label text anchor (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelTextAnchor(TextAnchor)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.setLabelTextAnchor#513",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.setLabelTextAnchor",
    "snippet": "public void setLabelTextAnchor(TextAnchor anchor){\n  if (anchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027anchor\u0027 argument.\");\n  }\n  this.labelTextAnchor\u003danchor;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 513,
    "end_line": 522,
    "comment": "/** \n * Sets the label text anchor and sends a  {@link MarkerChangeEvent} to all registered listeners.\n * @param anchor  the label text anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelTextAnchor()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.addChangeListener#530",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.addChangeListener",
    "snippet": "public void addChangeListener(MarkerChangeListener listener){\n  this.listenerList.add(MarkerChangeListener.class,listener);\n}",
    "begin_line": 530,
    "end_line": 535,
    "comment": "/** \n * Registers an object for notification of changes to the marker.\n * @param listener  the object to be registered.\n * @see #removeChangeListener(MarkerChangeListener)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.removeChangeListener#543",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.removeChangeListener",
    "snippet": "public void removeChangeListener(MarkerChangeListener listener){\n  this.listenerList.remove(MarkerChangeListener.class,listener);\n}",
    "begin_line": 543,
    "end_line": 548,
    "comment": "/** \n * Unregisters an object for notification of changes to the marker.\n * @param listener  the object to be unregistered.\n * @see #addChangeListener(MarkerChangeListener)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.notifyListeners#555",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.notifyListeners",
    "snippet": "public void notifyListeners(MarkerChangeEvent event){\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d MarkerChangeListener.class) {\n      ((MarkerChangeListener)listeners[i + 1]).markerChanged(event);\n    }\n  }\n}",
    "begin_line": 555,
    "end_line": 566,
    "comment": "/** \n * Notifies all registered listeners that the marker has been modified.\n * @param event  information about the change event.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.getListeners#574",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.getListeners",
    "snippet": "public EventListener[] getListeners(Class listenerType){\n  return this.listenerList.getListeners(listenerType);\n}",
    "begin_line": 574,
    "end_line": 579,
    "comment": "/** \n * Returns an array containing all the listeners of the specified type.\n * @param listenerType  the listener type.\n * @return The array of listeners.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.equals#586",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Marker)) {\n    return false;\n  }\n  Marker that\u003d(Marker)obj;\n  if (!PaintUtilities.equal(this.paint,that.paint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.outlineStroke,that.outlineStroke)) {\n    return false;\n  }\n  if (this.alpha !\u003d that.alpha) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.label,that.label)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {\n    return false;\n  }\n  if (this.labelAnchor !\u003d that.labelAnchor) {\n    return false;\n  }\n  if (this.labelTextAnchor !\u003d that.labelTextAnchor) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelOffset,that.labelOffset)) {\n    return false;\n  }\n  if (!this.labelOffsetType.equals(that.labelOffsetType)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 586,
    "end_line": 633,
    "comment": "/** \n * Tests the marker for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.clone#636",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 636,
    "end_line": 644,
    "comment": "/** \n * Creates a clone of the marker.\n * @return A clone.\n * @throws CloneNotSupportedException never.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.writeObject#651",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.paint,stream);\n  SerialUtilities.writeStroke(this.stroke,stream);\n  SerialUtilities.writePaint(this.outlinePaint,stream);\n  SerialUtilities.writeStroke(this.outlineStroke,stream);\n  SerialUtilities.writePaint(this.labelPaint,stream);\n}",
    "begin_line": 651,
    "end_line": 660,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Marker.readObject#668",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Marker.java",
    "class_name": "org.jfree.chart.plot.Marker",
    "signature": "org.jfree.chart.plot.Marker.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.paint\u003dSerialUtilities.readPaint(stream);\n  this.stroke\u003dSerialUtilities.readStroke(stream);\n  this.outlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.outlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.labelPaint\u003dSerialUtilities.readPaint(stream);\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 668,
    "end_line": 679,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.Plot#284",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.Plot",
    "snippet": "protected Plot(){\n  this.parent\u003dnull;\n  this.insets\u003dDEFAULT_INSETS;\n  this.backgroundPaint\u003dDEFAULT_BACKGROUND_PAINT;\n  this.backgroundAlpha\u003dDEFAULT_BACKGROUND_ALPHA;\n  this.backgroundImage\u003dnull;\n  this.outlineVisible\u003dtrue;\n  this.outlineStroke\u003dDEFAULT_OUTLINE_STROKE;\n  this.outlinePaint\u003dDEFAULT_OUTLINE_PAINT;\n  this.foregroundAlpha\u003dDEFAULT_FOREGROUND_ALPHA;\n  this.noDataMessage\u003dnull;\n  this.noDataMessageFont\u003dnew Font(\"SansSerif\",Font.PLAIN,12);\n  this.noDataMessagePaint\u003dColor.black;\n  this.drawingSupplier\u003dnew DefaultDrawingSupplier();\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 284,
    "end_line": 304,
    "comment": "/** \n * Creates a new plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getDatasetGroup#311",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getDatasetGroup",
    "snippet": "public DatasetGroup getDatasetGroup(){\n  return this.datasetGroup;\n}",
    "begin_line": 311,
    "end_line": 315,
    "comment": "/** \n * Returns the dataset group for the plot (not currently used).\n * @return The dataset group.\n * @see #setDatasetGroup(DatasetGroup)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setDatasetGroup#322",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setDatasetGroup",
    "snippet": "protected void setDatasetGroup(DatasetGroup group){\n  this.datasetGroup\u003dgroup;\n}",
    "begin_line": 322,
    "end_line": 326,
    "comment": "/** \n * Sets the dataset group (not currently used).\n * @param group  the dataset group (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDatasetGroup()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessage#332",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessage",
    "snippet": "public String getNoDataMessage(){\n  return this.noDataMessage;\n}",
    "begin_line": 332,
    "end_line": 340,
    "comment": "/** \n * Returns the string that is displayed when the dataset is empty or  \u003ccode\u003enull\u003c/code\u003e.\n * @return The \u0027no data\u0027 message (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setNoDataMessage(String)\n * @see #getNoDataMessageFont()\n * @see #getNoDataMessagePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessage#347",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessage",
    "snippet": "public void setNoDataMessage(String message){\n  this.noDataMessage\u003dmessage;\n  fireChangeEvent();\n}",
    "begin_line": 347,
    "end_line": 354,
    "comment": "/** \n * Sets the message that is displayed when the dataset is empty or  \u003ccode\u003enull\u003c/code\u003e, and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param message  the message (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessageFont#362",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessageFont",
    "snippet": "public Font getNoDataMessageFont(){\n  return this.noDataMessageFont;\n}",
    "begin_line": 362,
    "end_line": 366,
    "comment": "/** \n * Returns the font used to display the \u0027no data\u0027 message.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setNoDataMessageFont(Font)\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessageFont#373",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessageFont",
    "snippet": "public void setNoDataMessageFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.noDataMessageFont\u003dfont;\n  fireChangeEvent();\n}",
    "begin_line": 373,
    "end_line": 382,
    "comment": "/** \n * Sets the font used to display the \u0027no data\u0027 message and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getNoDataMessageFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessagePaint#390",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessagePaint",
    "snippet": "public Paint getNoDataMessagePaint(){\n  return this.noDataMessagePaint;\n}",
    "begin_line": 390,
    "end_line": 394,
    "comment": "/** \n * Returns the paint used to display the \u0027no data\u0027 message.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setNoDataMessagePaint(Paint)\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessagePaint#401",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessagePaint",
    "snippet": "public void setNoDataMessagePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.noDataMessagePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 401,
    "end_line": 410,
    "comment": "/** \n * Sets the paint used to display the \u0027no data\u0027 message and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getNoDataMessagePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getPlotType#416",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getPlotType",
    "snippet": "public abstract String getPlotType();",
    "begin_line": 416,
    "end_line": 421,
    "comment": "/** \n * Returns a short string describing the plot type. \u003cP\u003e Note: this gets used in the chart property editing user interface, but there needs to be a better mechanism for identifying the plot type.\n * @return A short string describing the plot type (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getParent#429",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getParent",
    "snippet": "public Plot getParent(){\n  return this.parent;\n}",
    "begin_line": 429,
    "end_line": 434,
    "comment": "/** \n * Returns the parent plot (or \u003ccode\u003enull\u003c/code\u003e if this plot is not part  of a combined plot).\n * @return The parent plot.\n * @see #setParent(Plot)\n * @see #getRootPlot()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setParent#441",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setParent",
    "snippet": "public void setParent(Plot parent){\n  this.parent\u003dparent;\n}",
    "begin_line": 441,
    "end_line": 446,
    "comment": "/** \n * Sets the parent plot.  This method is intended for internal use, you  shouldn\u0027t need to call it directly.\n * @param parent  the parent plot (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRootPlot#453",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRootPlot",
    "snippet": "public Plot getRootPlot(){\n  Plot p\u003dgetParent();\n  if (p \u003d\u003d null) {\n    return this;\n  }\n else {\n    return p.getRootPlot();\n  }\n}",
    "begin_line": 453,
    "end_line": 465,
    "comment": "/** \n * Returns the root plot.\n * @return The root plot.\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.isSubplot#472",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.isSubplot",
    "snippet": "public boolean isSubplot(){\n  return (getParent() !\u003d null);\n}",
    "begin_line": 472,
    "end_line": 479,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this plot is part of a combined plot  structure (that is,  {@link #getParent()} returns a non-\u003ccode\u003enull\u003c/code\u003evalue), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this plot is part of a combined plot structure.\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getInsets#486",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getInsets",
    "snippet": "public RectangleInsets getInsets(){\n  return this.insets;\n}",
    "begin_line": 486,
    "end_line": 490,
    "comment": "/** \n * Returns the insets for the plot area.\n * @return The insets (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setInsets#496",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setInsets",
    "snippet": "public void setInsets(RectangleInsets insets){\n  setInsets(insets,true);\n}",
    "begin_line": 496,
    "end_line": 503,
    "comment": "/** \n * Sets the insets for the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param insets  the new insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getInsets()\n * @see #setInsets(RectangleInsets,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setInsets#510",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setInsets",
    "snippet": "public void setInsets(RectangleInsets insets,boolean notify){\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  if (!this.insets.equals(insets)) {\n    this.insets\u003dinsets;\n    if (notify) {\n      fireChangeEvent();\n    }\n  }\n}",
    "begin_line": 510,
    "end_line": 527,
    "comment": "/** \n * Sets the insets for the plot and, if requested,  and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param insets  the new insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether the registered listeners arenotified.\n * @see #getInsets()\n * @see #setInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundPaint#534",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundPaint",
    "snippet": "public Paint getBackgroundPaint(){\n  return this.backgroundPaint;\n}",
    "begin_line": 534,
    "end_line": 538,
    "comment": "/** \n * Returns the background color of the plot area.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundPaint#545",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundPaint",
    "snippet": "public void setBackgroundPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    if (this.backgroundPaint !\u003d null) {\n      this.backgroundPaint\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.backgroundPaint !\u003d null) {\n      if (this.backgroundPaint.equals(paint)) {\n        return;\n      }\n    }\n    this.backgroundPaint\u003dpaint;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 545,
    "end_line": 566,
    "comment": "/** \n * Sets the background color of the plot area and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundAlpha#573",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundAlpha",
    "snippet": "public float getBackgroundAlpha(){\n  return this.backgroundAlpha;\n}",
    "begin_line": 573,
    "end_line": 577,
    "comment": "/** \n * Returns the alpha transparency of the plot area background.\n * @return The alpha transparency.\n * @see #setBackgroundAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundAlpha#584",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundAlpha",
    "snippet": "public void setBackgroundAlpha(float alpha){\n  if (this.backgroundAlpha !\u003d alpha) {\n    this.backgroundAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 584,
    "end_line": 592,
    "comment": "/** \n * Sets the alpha transparency of the plot area background, and notifies registered listeners that the plot has been modified.\n * @param alpha the new alpha value (in the range 0.0f to 1.0f).\n * @see #getBackgroundAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getDrawingSupplier#599",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getDrawingSupplier",
    "snippet": "public DrawingSupplier getDrawingSupplier(){\n  DrawingSupplier result\u003dnull;\n  Plot p\u003dgetParent();\n  if (p !\u003d null) {\n    result\u003dp.getDrawingSupplier();\n  }\n else {\n    result\u003dthis.drawingSupplier;\n  }\n  return result;\n}",
    "begin_line": 599,
    "end_line": 611,
    "comment": "/** \n * Returns the drawing supplier for the plot.\n * @return The drawing supplier (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDrawingSupplier(DrawingSupplier)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setDrawingSupplier#618",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setDrawingSupplier",
    "snippet": "public void setDrawingSupplier(DrawingSupplier supplier){\n  this.drawingSupplier\u003dsupplier;\n  fireChangeEvent();\n}",
    "begin_line": 618,
    "end_line": 626,
    "comment": "/** \n * Sets the drawing supplier for the plot.  The drawing supplier is  responsible for supplying a limitless (possibly repeating) sequence of  \u003ccode\u003ePaint\u003c/code\u003e, \u003ccode\u003eStroke\u003c/code\u003e and \u003ccode\u003eShape\u003c/code\u003e objects  that the plot\u0027s renderer(s) can use to populate its (their) tables.\n * @param supplier  the new supplier.\n * @see #getDrawingSupplier()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImage#633",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImage",
    "snippet": "public Image getBackgroundImage(){\n  return this.backgroundImage;\n}",
    "begin_line": 633,
    "end_line": 638,
    "comment": "/** \n * Returns the background image that is used to fill the plot\u0027s background  area.\n * @return The image (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundImage(Image)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImage#645",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImage",
    "snippet": "public void setBackgroundImage(Image image){\n  this.backgroundImage\u003dimage;\n  fireChangeEvent();\n}",
    "begin_line": 645,
    "end_line": 651,
    "comment": "/** \n * Sets the background image for the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param image  the image (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundImage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImageAlignment#658",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImageAlignment",
    "snippet": "public int getBackgroundImageAlignment(){\n  return this.backgroundImageAlignment;\n}",
    "begin_line": 658,
    "end_line": 663,
    "comment": "/** \n * Returns the background image alignment. Alignment constants are defined  in the  {@link Align} class.\n * @return The alignment.\n * @see #setBackgroundImageAlignment(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImageAlignment#670",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImageAlignment",
    "snippet": "public void setBackgroundImageAlignment(int alignment){\n  if (this.backgroundImageAlignment !\u003d alignment) {\n    this.backgroundImageAlignment\u003dalignment;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 670,
    "end_line": 679,
    "comment": "/** \n * Sets the alignment for the background image and sends a  {@link PlotChangeEvent} to all registered listeners.  Alignment options are defined by the  {@link Align} class.\n * @param alignment  the alignment.\n * @see #getBackgroundImageAlignment()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImageAlpha#686",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImageAlpha",
    "snippet": "public float getBackgroundImageAlpha(){\n  return this.backgroundImageAlpha;\n}",
    "begin_line": 686,
    "end_line": 692,
    "comment": "/** \n * Returns the alpha transparency used to draw the background image.  This is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent and 1.0f is fully opaque.\n * @return The alpha transparency.\n * @see #setBackgroundImageAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImageAlpha#700",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImageAlpha",
    "snippet": "public void setBackgroundImageAlpha(float alpha){\n  if (alpha \u003c 0.0f || alpha \u003e 1.0f)   throw new IllegalArgumentException(\"The \u0027alpha\u0027 value must be in the range 0.0f to 1.0f.\");\n  if (this.backgroundImageAlpha !\u003d alpha) {\n    this.backgroundImageAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 700,
    "end_line": 713,
    "comment": "/** \n * Sets the alpha transparency used when drawing the background image.\n * @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where0.0f is fully transparent, and 1.0f is fully opaque).\n * @throws IllegalArgumentException if \u003ccode\u003ealpha\u003c/code\u003e is not withinthe specified range.\n * @see #getBackgroundImageAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.isOutlineVisible#721",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.isOutlineVisible",
    "snippet": "public boolean isOutlineVisible(){\n  return this.outlineVisible;\n}",
    "begin_line": 721,
    "end_line": 730,
    "comment": "/** \n * Returns the flag that controls whether or not the plot outline is drawn.  The default value is \u003ccode\u003etrue\u003c/code\u003e.  Note that for  historical reasons, the plot\u0027s outline paint and stroke can take on \u003ccode\u003enull\u003c/code\u003e values, in which case the outline will not be drawn even if this flag is set to \u003ccode\u003etrue\u003c/code\u003e.\n * @return The outline visibility flag.\n * @since 1.0.6\n * @see #setOutlineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlineVisible#738",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlineVisible",
    "snippet": "public void setOutlineVisible(boolean visible){\n  this.outlineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 738,
    "end_line": 745,
    "comment": "/** \n * Sets the flag that controls whether or not the plot\u0027s outline is drawn, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param visible  the new flag value.\n * @since 1.0.6\n * @see #isOutlineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getOutlineStroke#752",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getOutlineStroke",
    "snippet": "public Stroke getOutlineStroke(){\n  return this.outlineStroke;\n}",
    "begin_line": 752,
    "end_line": 756,
    "comment": "/** \n * Returns the stroke used to outline the plot area.\n * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlineStroke#763",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlineStroke",
    "snippet": "public void setOutlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    if (this.outlineStroke !\u003d null) {\n      this.outlineStroke\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.outlineStroke !\u003d null) {\n      if (this.outlineStroke.equals(stroke)) {\n        return;\n      }\n    }\n    this.outlineStroke\u003dstroke;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 763,
    "end_line": 783,
    "comment": "/** \n * Sets the stroke used to outline the plot area and sends a  {@link PlotChangeEvent} to all registered listeners. If you set this attribute to \u003ccode\u003enull\u003c/code\u003e, no outline will be drawn.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getOutlinePaint#790",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getOutlinePaint",
    "snippet": "public Paint getOutlinePaint(){\n  return this.outlinePaint;\n}",
    "begin_line": 790,
    "end_line": 794,
    "comment": "/** \n * Returns the color used to draw the outline of the plot area.\n * @return The color (possibly \u003ccode\u003enull\u003ccode\u003e).\n * @see #setOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlinePaint#801",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlinePaint",
    "snippet": "public void setOutlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    if (this.outlinePaint !\u003d null) {\n      this.outlinePaint\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.outlinePaint !\u003d null) {\n      if (this.outlinePaint.equals(paint)) {\n        return;\n      }\n    }\n    this.outlinePaint\u003dpaint;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 801,
    "end_line": 821,
    "comment": "/** \n * Sets the paint used to draw the outline of the plot area and sends a  {@link PlotChangeEvent} to all registered listeners.  If you set this attribute to \u003ccode\u003enull\u003c/code\u003e, no outline will be drawn.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getForegroundAlpha#828",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getForegroundAlpha",
    "snippet": "public float getForegroundAlpha(){\n  return this.foregroundAlpha;\n}",
    "begin_line": 828,
    "end_line": 832,
    "comment": "/** \n * Returns the alpha-transparency for the plot foreground.\n * @return The alpha-transparency.\n * @see #setForegroundAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setForegroundAlpha#839",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setForegroundAlpha",
    "snippet": "public void setForegroundAlpha(float alpha){\n  if (this.foregroundAlpha !\u003d alpha) {\n    this.foregroundAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 839,
    "end_line": 847,
    "comment": "/** \n * Sets the alpha-transparency for the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param alpha  the new alpha transparency.\n * @see #getForegroundAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getLegendItems#853",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getLegendItems",
    "snippet": "public LegendItemCollection getLegendItems(){\n  return null;\n}",
    "begin_line": 853,
    "end_line": 858,
    "comment": "/** \n * Returns the legend items for the plot.  By default, this method returns  \u003ccode\u003enull\u003c/code\u003e.  Subclasses should override to return a  {@link LegendItemCollection}.\n * @return The legend items for the plot (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.addChangeListener#865",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.addChangeListener",
    "snippet": "public void addChangeListener(PlotChangeListener listener){\n  this.listenerList.add(PlotChangeListener.class,listener);\n}",
    "begin_line": 865,
    "end_line": 869,
    "comment": "/** \n * Registers an object for notification of changes to the plot.\n * @param listener  the object to be registered.\n * @see #removeChangeListener(PlotChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.removeChangeListener#876",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.removeChangeListener",
    "snippet": "public void removeChangeListener(PlotChangeListener listener){\n  this.listenerList.remove(PlotChangeListener.class,listener);\n}",
    "begin_line": 876,
    "end_line": 880,
    "comment": "/** \n * Unregisters an object for notification of changes to the plot.\n * @param listener  the object to be unregistered.\n * @see #addChangeListener(PlotChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.notifyListeners#886",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.notifyListeners",
    "snippet": "public void notifyListeners(PlotChangeEvent event){\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d PlotChangeListener.class) {\n      ((PlotChangeListener)listeners[i + 1]).plotChanged(event);\n    }\n  }\n}",
    "begin_line": 886,
    "end_line": 894,
    "comment": "/** \n * Notifies all registered listeners that the plot has been modified.\n * @param event  information about the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fireChangeEvent#900",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fireChangeEvent",
    "snippet": "protected void fireChangeEvent(){\n  notifyListeners(new PlotChangeEvent(this));\n}",
    "begin_line": 900,
    "end_line": 903,
    "comment": "/** \n * Sends a  {@link PlotChangeEvent} to all registered listeners.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.draw#913",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.draw",
    "snippet": "public abstract void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info);",
    "begin_line": 913,
    "end_line": 923,
    "comment": "/** \n * Draws the plot within the specified area.  The anchor is a point on the chart that is specified externally (for instance, it may be the last point of the last mouse click performed by the user) - plots can use or ignore this value as they see fit.  \u003cbr\u003e\u003cbr\u003e Subclasses need to provide an implementation of this method, obviously.\n * @param g2  the graphics device.\n * @param area  the plot area.\n * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param parentState  the parent state (if any).\n * @param info  carries back plot rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawBackground#930",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawBackground",
    "snippet": "public void drawBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area);\n  drawBackgroundImage(g2,area);\n}",
    "begin_line": 930,
    "end_line": 940,
    "comment": "/** \n * Draws the plot background (the background color and/or image). \u003cP\u003e This method will be called during the chart drawing process and is  declared public so that it can be accessed by the renderers used by  certain subclasses.  You shouldn\u0027t need to call this method directly.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fillBackground#948",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fillBackground",
    "snippet": "protected void fillBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area,PlotOrientation.VERTICAL);\n}",
    "begin_line": 948,
    "end_line": 954,
    "comment": "/** \n * Fills the specified area with the background paint.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #getBackgroundPaint()\n * @see #getBackgroundAlpha()\n * @see #fillBackground(Graphics2D,Rectangle2D,PlotOrientation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fillBackground#963",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fillBackground",
    "snippet": "protected void fillBackground(Graphics2D g2,Rectangle2D area,PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  if (this.backgroundPaint \u003d\u003d null) {\n    return;\n  }\n  Paint p\u003dthis.backgroundPaint;\n  if (p instanceof GradientPaint) {\n    GradientPaint gp\u003d(GradientPaint)p;\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      p\u003dnew GradientPaint((float)area.getCenterX(),(float)area.getMaxY(),gp.getColor1(),(float)area.getCenterX(),(float)area.getMinY(),gp.getColor2());\n    }\n else     if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      p\u003dnew GradientPaint((float)area.getMinX(),(float)area.getCenterY(),gp.getColor1(),(float)area.getMaxX(),(float)area.getCenterY(),gp.getColor2());\n    }\n  }\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundAlpha));\n  g2.setPaint(p);\n  g2.fill(area);\n  g2.setComposite(originalComposite);\n}",
    "begin_line": 963,
    "end_line": 998,
    "comment": "/** \n * Fills the specified area with the background paint.  If the background paint is an instance of \u003ccode\u003eGradientPaint\u003c/code\u003e, the gradient will run in the direction suggested by the plot\u0027s orientation.\n * @param g2  the graphics target.\n * @param area  the plot area.\n * @param orientation  the plot orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawBackgroundImage#1008",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawBackgroundImage",
    "snippet": "public void drawBackgroundImage(Graphics2D g2,Rectangle2D area){\n  if (this.backgroundImage !\u003d null) {\n    Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundImageAlpha));\n    Rectangle2D dest\u003dnew Rectangle2D.Double(0.0,0.0,this.backgroundImage.getWidth(null),this.backgroundImage.getHeight(null));\n    Align.align(dest,area,this.backgroundImageAlignment);\n    g2.drawImage(this.backgroundImage,(int)dest.getX(),(int)dest.getY(),(int)dest.getWidth() + 1,(int)dest.getHeight() + 1,null);\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 1008,
    "end_line": 1025,
    "comment": "/** \n * Draws the background image (if there is one) aligned within the  specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #getBackgroundImage()\n * @see #getBackgroundImageAlignment()\n * @see #getBackgroundImageAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawOutline#1032",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawOutline",
    "snippet": "public void drawOutline(Graphics2D g2,Rectangle2D area){\n  if (!this.outlineVisible) {\n    return;\n  }\n  if ((this.outlineStroke !\u003d null) \u0026\u0026 (this.outlinePaint !\u003d null)) {\n    g2.setStroke(this.outlineStroke);\n    g2.setPaint(this.outlinePaint);\n    g2.draw(area);\n  }\n}",
    "begin_line": 1032,
    "end_line": 1045,
    "comment": "/** \n * Draws the plot outline.  This method will be called during the chart  drawing process and is declared public so that it can be accessed by the renderers used by certain subclasses. You shouldn\u0027t need to call this  method directly.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawNoDataMessage#1052",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawNoDataMessage",
    "snippet": "protected void drawNoDataMessage(Graphics2D g2,Rectangle2D area){\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(area);\n  String message\u003dthis.noDataMessage;\n  if (message !\u003d null) {\n    g2.setFont(this.noDataMessageFont);\n    g2.setPaint(this.noDataMessagePaint);\n    TextBlock block\u003dTextUtilities.createTextBlock(this.noDataMessage,this.noDataMessageFont,this.noDataMessagePaint,0.9f * (float)area.getWidth(),new G2TextMeasurer(g2));\n    block.draw(g2,(float)area.getCenterX(),(float)area.getCenterY(),TextBlockAnchor.CENTER);\n  }\n  g2.setClip(savedClip);\n}",
    "begin_line": 1052,
    "end_line": 1068,
    "comment": "/** \n * Draws a message to state that there is no data to plot.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.handleClick#1076",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.handleClick",
    "snippet": "public void handleClick(int x,int y,PlotRenderingInfo info){\n}",
    "begin_line": 1076,
    "end_line": 1082,
    "comment": "/** \n * Handles a \u0027click\u0027 on the plot.  Since the plot does not maintain any information about where it has been drawn, the plot rendering info is  supplied as an argument.\n * @param x  the x coordinate (in Java2D space).\n * @param y  the y coordinate (in Java2D space).\n * @param info  an object containing information about the dimensions of the plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.zoom#1085",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.zoom",
    "snippet": "public void zoom(double percent){\n}",
    "begin_line": 1085,
    "end_line": 1092,
    "comment": "/** \n * Performs a zoom on the plot.  Subclasses should override if zooming is  appropriate for the type of plot.\n * @param percent  the zoom percentage.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.axisChanged#1098",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.axisChanged",
    "snippet": "public void axisChanged(AxisChangeEvent event){\n  fireChangeEvent();\n}",
    "begin_line": 1098,
    "end_line": 1101,
    "comment": "/** \n * Receives notification of a change to one of the plot\u0027s axes.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.datasetChanged#1107",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.datasetChanged",
    "snippet": "public void datasetChanged(DatasetChangeEvent event){\n  PlotChangeEvent newEvent\u003dnew PlotChangeEvent(this);\n  newEvent.setType(ChartChangeEventType.DATASET_UPDATED);\n  notifyListeners(newEvent);\n}",
    "begin_line": 1107,
    "end_line": 1115,
    "comment": "/** \n * Receives notification of a change to the plot\u0027s dataset. \u003cP\u003e The plot reacts by passing on a plot change event to all registered  listeners.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.markerChanged#1122",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.markerChanged",
    "snippet": "public void markerChanged(MarkerChangeEvent event){\n  fireChangeEvent();\n}",
    "begin_line": 1122,
    "end_line": 1127,
    "comment": "/** \n * Receives notification of a change to a marker that is assigned to the plot.\n * @param event  the event.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRectX#1137",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRectX",
    "snippet": "protected double getRectX(double x,double w1,double w2,RectangleEdge edge){\n  double result\u003dx;\n  if (edge \u003d\u003d RectangleEdge.LEFT) {\n    result\u003dresult + w1;\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    result\u003dresult + w2;\n  }\n  return result;\n}",
    "begin_line": 1137,
    "end_line": 1151,
    "comment": "/** \n * Adjusts the supplied x-value.\n * @param x  the x-value.\n * @param w1  width 1.\n * @param w2  width 2.\n * @param edge  the edge (left or right).\n * @return The adjusted x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRectY#1161",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRectY",
    "snippet": "protected double getRectY(double y,double h1,double h2,RectangleEdge edge){\n  double result\u003dy;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    result\u003dresult + h1;\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    result\u003dresult + h2;\n  }\n  return result;\n}",
    "begin_line": 1161,
    "end_line": 1175,
    "comment": "/** \n * Adjusts the supplied y-value.\n * @param y  the x-value.\n * @param h1  height 1.\n * @param h2  height 2.\n * @param edge  the edge (top or bottom).\n * @return The adjusted y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.equals#1182",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Plot)) {\n    return false;\n  }\n  Plot that\u003d(Plot)obj;\n  if (!ObjectUtilities.equal(this.noDataMessage,that.noDataMessage)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.noDataMessageFont,that.noDataMessageFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.noDataMessagePaint,that.noDataMessagePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.insets,that.insets)) {\n    return false;\n  }\n  if (this.outlineVisible !\u003d that.outlineVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.outlineStroke,that.outlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundImage,that.backgroundImage)) {\n    return false;\n  }\n  if (this.backgroundImageAlignment !\u003d that.backgroundImageAlignment) {\n    return false;\n  }\n  if (this.backgroundImageAlpha !\u003d that.backgroundImageAlpha) {\n    return false;\n  }\n  if (this.foregroundAlpha !\u003d that.foregroundAlpha) {\n    return false;\n  }\n  if (this.backgroundAlpha !\u003d that.backgroundAlpha) {\n    return false;\n  }\n  if (!this.drawingSupplier.equals(that.drawingSupplier)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1182,
    "end_line": 1239,
    "comment": "/** \n * Tests this plot for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.clone#1242",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Plot clone\u003d(Plot)super.clone();\n  if (this.datasetGroup !\u003d null) {\n    clone.datasetGroup\u003d(DatasetGroup)ObjectUtilities.clone(this.datasetGroup);\n  }\n  clone.drawingSupplier\u003d(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);\n  clone.listenerList\u003dnew EventListenerList();\n  return clone;\n}",
    "begin_line": 1242,
    "end_line": 1263,
    "comment": "/** \n * Creates a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the plot does notsupport cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.writeObject#1270",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.noDataMessagePaint,stream);\n  SerialUtilities.writeStroke(this.outlineStroke,stream);\n  SerialUtilities.writePaint(this.outlinePaint,stream);\n  SerialUtilities.writePaint(this.backgroundPaint,stream);\n}",
    "begin_line": 1270,
    "end_line": 1279,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.readObject#1287",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.noDataMessagePaint\u003dSerialUtilities.readPaint(stream);\n  this.outlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.outlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.backgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 1287,
    "end_line": 1300,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.resolveDomainAxisLocation#1308",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.resolveDomainAxisLocation",
    "snippet": "public static RectangleEdge resolveDomainAxisLocation(AxisLocation location,PlotOrientation orientation){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  RectangleEdge result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n  }\n  if (result \u003d\u003d null) {\n    throw new IllegalStateException(\"resolveDomainAxisLocation()\");\n  }\n  return result;\n}",
    "begin_line": 1308,
    "end_line": 1360,
    "comment": "/** \n * Resolves a domain axis location for a given plot orientation.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.resolveRangeAxisLocation#1368",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.resolveRangeAxisLocation",
    "snippet": "public static RectangleEdge resolveRangeAxisLocation(AxisLocation location,PlotOrientation orientation){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  RectangleEdge result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n  }\n  if (result \u003d\u003d null) {\n    throw new IllegalStateException(\"resolveRangeAxisLocation()\");\n  }\n  return result;\n}",
    "begin_line": 1368,
    "end_line": 1421,
    "comment": "/** \n * Resolves a range axis location for a given plot orientation.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.PlotOrientation#71",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation",
    "snippet": "private PlotOrientation(String name){\n  this.name\u003dname;\n}",
    "begin_line": 71,
    "end_line": 74,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.toString#80",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 80,
    "end_line": 83,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.equals#90",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof PlotOrientation)) {\n    return false;\n  }\n  PlotOrientation orientation\u003d(PlotOrientation)obj;\n  if (!this.name.equals(orientation.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 90,
    "end_line": 105,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.hashCode#111",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 111,
    "end_line": 114,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.readResolve#121",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  Object result\u003dnull;\n  if (this.equals(PlotOrientation.HORIZONTAL)) {\n    result\u003dPlotOrientation.HORIZONTAL;\n  }\n else   if (this.equals(PlotOrientation.VERTICAL)) {\n    result\u003dPlotOrientation.VERTICAL;\n  }\n  return result;\n}",
    "begin_line": 121,
    "end_line": 132,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.SeriesRenderingOrder#77",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.SeriesRenderingOrder",
    "snippet": "private SeriesRenderingOrder(String name){\n  this.name\u003dname;\n}",
    "begin_line": 77,
    "end_line": 80,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.toString#86",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 86,
    "end_line": 89,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.equals#96",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof SeriesRenderingOrder)) {\n    return false;\n  }\n  SeriesRenderingOrder order\u003d(SeriesRenderingOrder)obj;\n  if (!this.name.equals(order.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 96,
    "end_line": 111,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.hashCode#117",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 117,
    "end_line": 120,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.readResolve#127",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(SeriesRenderingOrder.FORWARD)) {\n    return SeriesRenderingOrder.FORWARD;\n  }\n else   if (this.equals(SeriesRenderingOrder.REVERSE)) {\n    return SeriesRenderingOrder.REVERSE;\n  }\n  return null;\n}",
    "begin_line": 127,
    "end_line": 137,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.ValueMarker#66",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker",
    "snippet": "public ValueMarker(double value){\n  super();\n  this.value\u003dvalue;\n}",
    "begin_line": 66,
    "end_line": 70,
    "comment": "/** \n * Creates a new marker.\n * @param value  the value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.ValueMarker#78",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker",
    "snippet": "public ValueMarker(double value,Paint paint,Stroke stroke){\n  this(value,paint,stroke,paint,stroke,1.0f);\n}",
    "begin_line": 78,
    "end_line": 81,
    "comment": "/** \n * Creates a new marker.\n * @param value  the value.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.ValueMarker#92",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker",
    "snippet": "public ValueMarker(double value,Paint paint,Stroke stroke,Paint outlinePaint,Stroke outlineStroke,float alpha){\n  super(paint,stroke,outlinePaint,outlineStroke,alpha);\n  this.value\u003dvalue;\n}",
    "begin_line": 92,
    "end_line": 97,
    "comment": "/** \n * Creates a new value marker.\n * @param value  the value.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param outlinePaint  the outline paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param outlineStroke  the outline stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.getValue#104",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.getValue",
    "snippet": "public double getValue(){\n  return this.value;\n}",
    "begin_line": 104,
    "end_line": 108,
    "comment": "/** \n * Returns the value.\n * @return The value.\n * @see #setValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.setValue#116",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.setValue",
    "snippet": "public void setValue(double value){\n  this.value\u003dvalue;\n  notifyListeners(new MarkerChangeEvent(this));\n}",
    "begin_line": 116,
    "end_line": 123,
    "comment": "/** \n * Sets the value for the marker and sends a  {@link MarkerChangeEvent} to all registered listeners.\n * @param value  the value.\n * @see #getValue()\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueMarker.equals#126",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
    "class_name": "org.jfree.chart.plot.ValueMarker",
    "signature": "org.jfree.chart.plot.ValueMarker.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  if (!(obj instanceof ValueMarker)) {\n    return false;\n  }\n  ValueMarker that\u003d(ValueMarker)obj;\n  if (this.value !\u003d that.value) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 126,
    "end_line": 155,
    "comment": "/** \n * Tests this marker for equality with an arbitrary object.  This method returns \u003ccode\u003etrue\u003c/code\u003e if: \u003cul\u003e \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e;\u003c/li\u003e \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e is an instance of \u003ccode\u003eValueMarker\u003c/code\u003e;\u003c/li\u003e \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e has the same value as this marker;\u003c/li\u003e \u003cli\u003e\u003ccode\u003esuper.equals(obj)\u003c/code\u003e returns \u003ccode\u003etrue\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.XYPlot#497",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.XYPlot",
    "snippet": "public XYPlot(){\n  this(null,null,null,null);\n}",
    "begin_line": 497,
    "end_line": 502,
    "comment": "/** \n * Creates a new \u003ccode\u003eXYPlot\u003c/code\u003e instance with no dataset, no axes and no renderer.  You should specify these items before using the plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.XYPlot#511",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.XYPlot",
    "snippet": "public XYPlot(XYDataset dataset,ValueAxis domainAxis,ValueAxis rangeAxis,XYItemRenderer renderer){\n  super();\n  this.orientation\u003dPlotOrientation.VERTICAL;\n  this.weight\u003d1;\n  this.axisOffset\u003dnew RectangleInsets(4.0,4.0,4.0,4.0);\n  this.domainAxes\u003dnew ObjectList();\n  this.domainAxisLocations\u003dnew ObjectList();\n  this.foregroundDomainMarkers\u003dnew HashMap();\n  this.backgroundDomainMarkers\u003dnew HashMap();\n  this.rangeAxes\u003dnew ObjectList();\n  this.rangeAxisLocations\u003dnew ObjectList();\n  this.foregroundRangeMarkers\u003dnew HashMap();\n  this.backgroundRangeMarkers\u003dnew HashMap();\n  this.datasets\u003dnew ObjectList();\n  this.renderers\u003dnew ObjectList();\n  this.datasetToDomainAxisMap\u003dnew TreeMap();\n  this.datasetToRangeAxisMap\u003dnew TreeMap();\n  this.datasets.set(0,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  this.renderers.set(0,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  this.domainAxes.set(0,domainAxis);\n  this.mapDatasetToDomainAxis(0,0);\n  if (domainAxis !\u003d null) {\n    domainAxis.setPlot(this);\n    domainAxis.addChangeListener(this);\n  }\n  this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);\n  this.rangeAxes.set(0,rangeAxis);\n  this.mapDatasetToRangeAxis(0,0);\n  if (rangeAxis !\u003d null) {\n    rangeAxis.setPlot(this);\n    rangeAxis.addChangeListener(this);\n  }\n  this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);\n  configureDomainAxes();\n  configureRangeAxes();\n  this.domainGridlinesVisible\u003dtrue;\n  this.domainGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.domainGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.domainZeroBaselineVisible\u003dfalse;\n  this.domainZeroBaselinePaint\u003dColor.black;\n  this.domainZeroBaselineStroke\u003dnew BasicStroke(0.5f);\n  this.rangeGridlinesVisible\u003dtrue;\n  this.rangeGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.rangeGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.rangeZeroBaselineVisible\u003dfalse;\n  this.rangeZeroBaselinePaint\u003dColor.black;\n  this.rangeZeroBaselineStroke\u003dnew BasicStroke(0.5f);\n  this.domainCrosshairVisible\u003dfalse;\n  this.domainCrosshairValue\u003d0.0;\n  this.domainCrosshairStroke\u003dDEFAULT_CROSSHAIR_STROKE;\n  this.domainCrosshairPaint\u003dDEFAULT_CROSSHAIR_PAINT;\n  this.rangeCrosshairVisible\u003dfalse;\n  this.rangeCrosshairValue\u003d0.0;\n  this.rangeCrosshairStroke\u003dDEFAULT_CROSSHAIR_STROKE;\n  this.rangeCrosshairPaint\u003dDEFAULT_CROSSHAIR_PAINT;\n  this.annotations\u003dnew java.util.ArrayList();\n}",
    "begin_line": 511,
    "end_line": 601,
    "comment": "/** \n * Creates a new plot with the specified dataset, axes and renderer.  Any of the arguments can be \u003ccode\u003enull\u003c/code\u003e, but in that case you should take care to specify the value before using the plot (otherwise a \u003ccode\u003eNullPointerException\u003c/code\u003e may be thrown).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param domainAxis  the domain axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param rangeAxis  the range axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getPlotType#607",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getPlotType",
    "snippet": "public String getPlotType(){\n  return localizationResources.getString(\"XY_Plot\");\n}",
    "begin_line": 607,
    "end_line": 610,
    "comment": "/** \n * Returns the plot type as a string.\n * @return A short string describing the type of plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getOrientation#617",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getOrientation",
    "snippet": "public PlotOrientation getOrientation(){\n  return this.orientation;\n}",
    "begin_line": 617,
    "end_line": 621,
    "comment": "/** \n * Returns the orientation of the plot.\n * @return The orientation (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOrientation(PlotOrientation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setOrientation#628",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setOrientation",
    "snippet": "public void setOrientation(PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  if (orientation !\u003d this.orientation) {\n    this.orientation\u003dorientation;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 628,
    "end_line": 639,
    "comment": "/** \n * Sets the orientation for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not allowed).\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getAxisOffset#646",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getAxisOffset",
    "snippet": "public RectangleInsets getAxisOffset(){\n  return this.axisOffset;\n}",
    "begin_line": 646,
    "end_line": 650,
    "comment": "/** \n * Returns the axis offset.\n * @return The axis offset (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setAxisOffset#657",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setAxisOffset",
    "snippet": "public void setAxisOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.axisOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 657,
    "end_line": 666,
    "comment": "/** \n * Sets the axis offsets (gap between the data area and the axes) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxis#671",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxis",
    "snippet": "public ValueAxis getDomainAxis(){\n  return getDomainAxis(0);\n}",
    "begin_line": 671,
    "end_line": 680,
    "comment": "/** \n * Returns the domain axis with index 0.  If the domain axis for this plot is \u003ccode\u003enull\u003c/code\u003e, then the method will return the parent plot\u0027s  domain axis (if there is a parent plot).\n * @return The domain axis (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDomainAxis(int)\n * @see #setDomainAxis(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxis#688",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxis",
    "snippet": "public ValueAxis getDomainAxis(int index){\n  ValueAxis result\u003dnull;\n  if (index \u003c this.domainAxes.size()) {\n    result\u003d(ValueAxis)this.domainAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot xy\u003d(XYPlot)parent;\n      result\u003dxy.getDomainAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 688,
    "end_line": 704,
    "comment": "/** \n * Returns the domain axis with the specified index, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setDomainAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#710",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(ValueAxis axis){\n  setDomainAxis(0,axis);\n}",
    "begin_line": 710,
    "end_line": 717,
    "comment": "/** \n * Sets the domain axis for the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axis  the new axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis()\n * @see #setDomainAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#726",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(int index,ValueAxis axis){\n  setDomainAxis(index,axis,true);\n}",
    "begin_line": 726,
    "end_line": 731,
    "comment": "/** \n * Sets a domain axis and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis(int)\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#740",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis",
    "snippet": "public void setDomainAxis(int index,ValueAxis axis,boolean notify){\n  ValueAxis existing\u003dgetDomainAxis(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.domainAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 740,
    "end_line": 759,
    "comment": "/** \n * Sets a domain axis and, if requested, sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param index  the axis index.\n * @param axis  the axis.\n * @param notify  notify listeners?\n * @see #getDomainAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxes#766",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxes",
    "snippet": "public void setDomainAxes(ValueAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setDomainAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 766,
    "end_line": 774,
    "comment": "/** \n * Sets the domain axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setRangeAxes(ValueAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisLocation#781",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisLocation",
    "snippet": "public AxisLocation getDomainAxisLocation(){\n  return (AxisLocation)this.domainAxisLocations.get(0);\n}",
    "begin_line": 781,
    "end_line": 785,
    "comment": "/** \n * Returns the location of the primary domain axis.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainAxisLocation(AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#792",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(AxisLocation location){\n  setDomainAxisLocation(0,location,true);\n}",
    "begin_line": 792,
    "end_line": 798,
    "comment": "/** \n * Sets the location of the primary domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#806",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(AxisLocation location,boolean notify){\n  setDomainAxisLocation(0,location,notify);\n}",
    "begin_line": 806,
    "end_line": 812,
    "comment": "/** \n * Sets the location of the domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getDomainAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisEdge#820",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisEdge",
    "snippet": "public RectangleEdge getDomainAxisEdge(){\n  return Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);\n}",
    "begin_line": 820,
    "end_line": 826,
    "comment": "/** \n * Returns the edge for the primary domain axis (taking into account the plot\u0027s orientation).\n * @return The edge.\n * @see #getDomainAxisLocation()\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisCount#833",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisCount",
    "snippet": "public int getDomainAxisCount(){\n  return this.domainAxes.size();\n}",
    "begin_line": 833,
    "end_line": 837,
    "comment": "/** \n * Returns the number of domain axes.\n * @return The axis count.\n * @see #getRangeAxisCount()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainAxes#843",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainAxes",
    "snippet": "public void clearDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.domainAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 843,
    "end_line": 854,
    "comment": "/** \n * Clears the domain axes from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @see #clearRangeAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.configureDomainAxes#859",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.configureDomainAxes",
    "snippet": "public void configureDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 859,
    "end_line": 866,
    "comment": "/** \n * Configures the domain axes. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisLocation#874",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisLocation",
    "snippet": "public AxisLocation getDomainAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.domainAxisLocations.size()) {\n    result\u003d(AxisLocation)this.domainAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getDomainAxisLocation());\n  }\n  return result;\n}",
    "begin_line": 874,
    "end_line": 888,
    "comment": "/** \n * Returns the location for a domain axis.  If this hasn\u0027t been set explicitly, the method returns the location that is opposite to the primary domain axis location.\n * @param index  the axis index.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#896",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location){\n  setDomainAxisLocation(index,location,true);\n}",
    "begin_line": 896,
    "end_line": 903,
    "comment": "/** \n * Sets the location for a domain axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted for index0).\n * @see #getDomainAxisLocation(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#914",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.domainAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 914,
    "end_line": 930,
    "comment": "/** \n * Sets the axis location for a domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted for index 0).\n * @param notify  notify listeners?\n * @since 1.0.5\n * @see #getDomainAxisLocation(int)\n * @see #setRangeAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisEdge#938",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisEdge",
    "snippet": "public RectangleEdge getDomainAxisEdge(int index){\n  AxisLocation location\u003dgetDomainAxisLocation(index);\n  RectangleEdge result\u003dPlot.resolveDomainAxisLocation(location,this.orientation);\n  if (result \u003d\u003d null) {\n    result\u003dRectangleEdge.opposite(getDomainAxisEdge());\n  }\n  return result;\n}",
    "begin_line": 938,
    "end_line": 949,
    "comment": "/** \n * Returns the edge for a domain axis.\n * @param index  the axis index.\n * @return The edge.\n * @see #getRangeAxisEdge(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxis#954",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxis",
    "snippet": "public ValueAxis getRangeAxis(){\n  return getRangeAxis(0);\n}",
    "begin_line": 954,
    "end_line": 963,
    "comment": "/** \n * Returns the range axis for the plot.  If the range axis for this plot is \u003ccode\u003enull\u003c/code\u003e, then the method will return the parent plot\u0027s range  axis (if there is a parent plot).\n * @return The range axis.\n * @see #getRangeAxis(int)\n * @see #setRangeAxis(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#969",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(ValueAxis axis){\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  ValueAxis existing\u003dgetRangeAxis();\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.rangeAxes.set(0,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 969,
    "end_line": 993,
    "comment": "/** \n * Sets the range axis for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxis()\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisLocation#1000",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisLocation",
    "snippet": "public AxisLocation getRangeAxisLocation(){\n  return (AxisLocation)this.rangeAxisLocations.get(0);\n}",
    "begin_line": 1000,
    "end_line": 1004,
    "comment": "/** \n * Returns the location of the primary range axis.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeAxisLocation(AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1011",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(AxisLocation location){\n  setRangeAxisLocation(0,location,true);\n}",
    "begin_line": 1011,
    "end_line": 1017,
    "comment": "/** \n * Sets the location of the primary range axis and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1025",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(AxisLocation location,boolean notify){\n  setRangeAxisLocation(0,location,notify);\n}",
    "begin_line": 1025,
    "end_line": 1031,
    "comment": "/** \n * Sets the location of the primary range axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getRangeAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisEdge#1039",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisEdge",
    "snippet": "public RectangleEdge getRangeAxisEdge(){\n  return Plot.resolveRangeAxisLocation(getRangeAxisLocation(),this.orientation);\n}",
    "begin_line": 1039,
    "end_line": 1044,
    "comment": "/** \n * Returns the edge for the primary range axis.\n * @return The range axis edge.\n * @see #getRangeAxisLocation()\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxis#1052",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxis",
    "snippet": "public ValueAxis getRangeAxis(int index){\n  ValueAxis result\u003dnull;\n  if (index \u003c this.rangeAxes.size()) {\n    result\u003d(ValueAxis)this.rangeAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot xy\u003d(XYPlot)parent;\n      result\u003dxy.getRangeAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 1052,
    "end_line": 1068,
    "comment": "/** \n * Returns a range axis.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#1076",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis){\n  setRangeAxis(index,axis,true);\n}",
    "begin_line": 1076,
    "end_line": 1081,
    "comment": "/** \n * Sets a range axis and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#1090",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis,boolean notify){\n  ValueAxis existing\u003dgetRangeAxis(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.rangeAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1090,
    "end_line": 1109,
    "comment": "/** \n * Sets a range axis and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getRangeAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxes#1116",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxes",
    "snippet": "public void setRangeAxes(ValueAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setRangeAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1116,
    "end_line": 1124,
    "comment": "/** \n * Sets the range axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setDomainAxes(ValueAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisCount#1131",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisCount",
    "snippet": "public int getRangeAxisCount(){\n  return this.rangeAxes.size();\n}",
    "begin_line": 1131,
    "end_line": 1135,
    "comment": "/** \n * Returns the number of range axes.\n * @return The axis count.\n * @see #getDomainAxisCount()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeAxes#1141",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeAxes",
    "snippet": "public void clearRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.rangeAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 1141,
    "end_line": 1152,
    "comment": "/** \n * Clears the range axes from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @see #clearDomainAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.configureRangeAxes#1158",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.configureRangeAxes",
    "snippet": "public void configureRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 1158,
    "end_line": 1166,
    "comment": "/** \n * Configures the range axes.\n * @see #configureDomainAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisLocation#1174",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisLocation",
    "snippet": "public AxisLocation getRangeAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.rangeAxisLocations.size()) {\n    result\u003d(AxisLocation)this.rangeAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getRangeAxisLocation());\n  }\n  return result;\n}",
    "begin_line": 1174,
    "end_line": 1188,
    "comment": "/** \n * Returns the location for a range axis.  If this hasn\u0027t been set explicitly, the method returns the location that is opposite to the primary range axis location.\n * @param index  the axis index.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1196",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location){\n  setRangeAxisLocation(index,location,true);\n}",
    "begin_line": 1196,
    "end_line": 1202,
    "comment": "/** \n * Sets the location for a range axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxisLocation(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1213",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.rangeAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1213,
    "end_line": 1229,
    "comment": "/** \n * Sets the axis location for a domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted for index 0).\n * @param notify  notify listeners?\n * @since 1.0.5\n * @see #getRangeAxisLocation(int)\n * @see #setDomainAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisEdge#1238",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisEdge",
    "snippet": "public RectangleEdge getRangeAxisEdge(int index){\n  AxisLocation location\u003dgetRangeAxisLocation(index);\n  RectangleEdge result\u003dPlot.resolveRangeAxisLocation(location,this.orientation);\n  if (result \u003d\u003d null) {\n    result\u003dRectangleEdge.opposite(getRangeAxisEdge());\n  }\n  return result;\n}",
    "begin_line": 1238,
    "end_line": 1249,
    "comment": "/** \n * Returns the edge for a range axis.\n * @param index  the axis index.\n * @return The edge.\n * @see #getRangeAxisLocation(int)\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataset#1254",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataset",
    "snippet": "public XYDataset getDataset(){\n  return getDataset(0);\n}",
    "begin_line": 1254,
    "end_line": 1261,
    "comment": "/** \n * Returns the primary dataset for the plot.\n * @return The primary dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDataset(int)\n * @see #setDataset(XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataset#1269",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataset",
    "snippet": "public XYDataset getDataset(int index){\n  XYDataset result\u003dnull;\n  if (this.datasets.size() \u003e index) {\n    result\u003d(XYDataset)this.datasets.get(index);\n  }\n  return result;\n}",
    "begin_line": 1269,
    "end_line": 1278,
    "comment": "/** \n * Returns a dataset.\n * @param index  the dataset index.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDataset(int,XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDataset#1284",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDataset",
    "snippet": "public void setDataset(XYDataset dataset){\n  setDataset(0,dataset);\n}",
    "begin_line": 1284,
    "end_line": 1291,
    "comment": "/** \n * Sets the primary dataset for the plot, replacing the existing dataset if there is one.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset()\n * @see #setDataset(int,XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDataset#1299",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDataset",
    "snippet": "public void setDataset(int index,XYDataset dataset){\n  XYDataset existing\u003dgetDataset(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.datasets.set(index,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  DatasetChangeEvent event\u003dnew DatasetChangeEvent(this,dataset);\n  datasetChanged(event);\n}",
    "begin_line": 1299,
    "end_line": 1314,
    "comment": "/** \n * Sets a dataset for the plot.\n * @param index  the dataset index.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetCount#1320",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetCount",
    "snippet": "public int getDatasetCount(){\n  return this.datasets.size();\n}",
    "begin_line": 1320,
    "end_line": 1323,
    "comment": "/** \n * Returns the number of datasets.\n * @return The number of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.indexOf#1330",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.indexOf",
    "snippet": "public int indexOf(XYDataset dataset){\n  int result\u003d-1;\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    if (dataset \u003d\u003d this.datasets.get(i)) {\n      result\u003di;\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 1330,
    "end_line": 1342,
    "comment": "/** \n * Returns the index of the specified dataset, or \u003ccode\u003e-1\u003c/code\u003e if the dataset does not belong to the plot.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToDomainAxis#1350",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxis",
    "snippet": "public void mapDatasetToDomainAxis(int index,int axisIndex){\n  this.datasetToDomainAxisMap.put(new Integer(index),new Integer(axisIndex));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1350,
    "end_line": 1358,
    "comment": "/** \n * Maps a dataset to a particular domain axis.  All data will be plotted against axis zero by default, no mapping is required for this case.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index.\n * @see #mapDatasetToRangeAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToRangeAxis#1366",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxis",
    "snippet": "public void mapDatasetToRangeAxis(int index,int axisIndex){\n  this.datasetToRangeAxisMap.put(new Integer(index),new Integer(axisIndex));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1366,
    "end_line": 1374,
    "comment": "/** \n * Maps a dataset to a particular range axis.  All data will be plotted against axis zero by default, no mapping is required for this case.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index.\n * @see #mapDatasetToDomainAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRenderer#1381",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRenderer",
    "snippet": "public XYItemRenderer getRenderer(){\n  return getRenderer(0);\n}",
    "begin_line": 1381,
    "end_line": 1385,
    "comment": "/** \n * Returns the renderer for the primary dataset.\n * @return The item renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderer(XYItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRenderer#1393",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRenderer",
    "snippet": "public XYItemRenderer getRenderer(int index){\n  XYItemRenderer result\u003dnull;\n  if (this.renderers.size() \u003e index) {\n    result\u003d(XYItemRenderer)this.renderers.get(index);\n  }\n  return result;\n}",
    "begin_line": 1393,
    "end_line": 1403,
    "comment": "/** \n * Returns the renderer for a dataset, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the renderer index.\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderer(int,XYItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1410",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer",
    "snippet": "public void setRenderer(XYItemRenderer renderer){\n  setRenderer(0,renderer);\n}",
    "begin_line": 1410,
    "end_line": 1416,
    "comment": "/** \n * Sets the renderer for the primary dataset and sends a {@link PlotChangeEvent} to all registered listeners.  If the rendereris set to \u003ccode\u003enull\u003c/code\u003e, no data will be displayed.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRenderer()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1424",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer",
    "snippet": "public void setRenderer(int index,XYItemRenderer renderer){\n  setRenderer(index,renderer,true);\n}",
    "begin_line": 1424,
    "end_line": 1429,
    "comment": "/** \n * Sets a renderer and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the index.\n * @param renderer  the renderer.\n * @see #getRenderer(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1438",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer",
    "snippet": "public void setRenderer(int index,XYItemRenderer renderer,boolean notify){\n  XYItemRenderer existing\u003dgetRenderer(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.renderers.set(index,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  configureDomainAxes();\n  configureRangeAxes();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1438,
    "end_line": 1457,
    "comment": "/** \n * Sets a renderer and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the index.\n * @param renderer  the renderer.\n * @param notify  notify listeners?\n * @see #getRenderer(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderers#1463",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderers",
    "snippet": "public void setRenderers(XYItemRenderer[] renderers){\n  for (int i\u003d0; i \u003c renderers.length; i++) {\n    setRenderer(i,renderers[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1463,
    "end_line": 1470,
    "comment": "/** \n * Sets the renderers for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param renderers  the renderers (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetRenderingOrder#1477",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetRenderingOrder",
    "snippet": "public DatasetRenderingOrder getDatasetRenderingOrder(){\n  return this.datasetRenderingOrder;\n}",
    "begin_line": 1477,
    "end_line": 1481,
    "comment": "/** \n * Returns the dataset rendering order.\n * @return The order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDatasetRenderingOrder#1488",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDatasetRenderingOrder",
    "snippet": "public void setDatasetRenderingOrder(DatasetRenderingOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.datasetRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1488,
    "end_line": 1499,
    "comment": "/** \n * Sets the rendering order and sends a  {@link PlotChangeEvent} to allregistered listeners.  By default, the plot renders the primary dataset last (so that the primary dataset overlays the secondary datasets). You can reverse this if you want to.\n * @param order  the rendering order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDatasetRenderingOrder()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getSeriesRenderingOrder#1506",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getSeriesRenderingOrder",
    "snippet": "public SeriesRenderingOrder getSeriesRenderingOrder(){\n  return this.seriesRenderingOrder;\n}",
    "begin_line": 1506,
    "end_line": 1510,
    "comment": "/** \n * Returns the series rendering order.\n * @return the order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesRenderingOrder(SeriesRenderingOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setSeriesRenderingOrder#1517",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setSeriesRenderingOrder",
    "snippet": "public void setSeriesRenderingOrder(SeriesRenderingOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.seriesRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1517,
    "end_line": 1528,
    "comment": "/** \n * Sets the series order and sends a  {@link PlotChangeEvent} to allregistered listeners.  By default, the plot renders the primary series last (so that the primary series appears to be on top). You can reverse this if you want to.\n * @param order  the rendering order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getSeriesRenderingOrder()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getIndexOf#1535",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getIndexOf",
    "snippet": "public int getIndexOf(XYItemRenderer renderer){\n  return this.renderers.indexOf(renderer);\n}",
    "begin_line": 1535,
    "end_line": 1540,
    "comment": "/** \n * Returns the index of the specified renderer, or \u003ccode\u003e-1\u003c/code\u003e if the renderer is not assigned to this plot.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRendererForDataset#1547",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRendererForDataset",
    "snippet": "public XYItemRenderer getRendererForDataset(XYDataset dataset){\n  XYItemRenderer result\u003dnull;\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    if (this.datasets.get(i) \u003d\u003d dataset) {\n      result\u003d(XYItemRenderer)this.renderers.get(i);\n      if (result \u003d\u003d null) {\n        result\u003dgetRenderer();\n      }\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 1547,
    "end_line": 1563,
    "comment": "/** \n * Returns the renderer for the specified dataset.  The code first determines the index of the dataset, then checks if there is a renderer with the same index (if not, the method returns renderer(0).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getWeight#1570",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getWeight",
    "snippet": "public int getWeight(){\n  return this.weight;\n}",
    "begin_line": 1570,
    "end_line": 1575,
    "comment": "/** \n * Returns the weight for this plot when it is used as a subplot within a combined plot.\n * @return The weight.\n * @see #setWeight(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setWeight#1582",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setWeight",
    "snippet": "public void setWeight(int weight){\n  this.weight\u003dweight;\n  fireChangeEvent();\n}",
    "begin_line": 1582,
    "end_line": 1588,
    "comment": "/** \n * Sets the weight for the plot and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param weight  the weight.\n * @see #getWeight()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainGridlinesVisible#1595",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainGridlinesVisible",
    "snippet": "public boolean isDomainGridlinesVisible(){\n  return this.domainGridlinesVisible;\n}",
    "begin_line": 1595,
    "end_line": 1600,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the domain gridlines are visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @see #setDomainGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlinesVisible#1607",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlinesVisible",
    "snippet": "public void setDomainGridlinesVisible(boolean visible){\n  if (this.domainGridlinesVisible !\u003d visible) {\n    this.domainGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1607,
    "end_line": 1618,
    "comment": "/** \n * Sets the flag that controls whether or not the domain grid-lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isDomainGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainGridlineStroke#1625",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainGridlineStroke",
    "snippet": "public Stroke getDomainGridlineStroke(){\n  return this.domainGridlineStroke;\n}",
    "begin_line": 1625,
    "end_line": 1630,
    "comment": "/** \n * Returns the stroke for the grid-lines (if any) plotted against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlineStroke#1638",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlineStroke",
    "snippet": "public void setDomainGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1638,
    "end_line": 1651,
    "comment": "/** \n * Sets the stroke for the grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\u003cp\u003e If you set this to \u003ccode\u003enull\u003c/code\u003e, no grid lines will be drawn.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003estroke\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainGridlinePaint#1658",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainGridlinePaint",
    "snippet": "public Paint getDomainGridlinePaint(){\n  return this.domainGridlinePaint;\n}",
    "begin_line": 1658,
    "end_line": 1663,
    "comment": "/** \n * Returns the paint for the grid lines (if any) plotted against the domain axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlinePaint#1671",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlinePaint",
    "snippet": "public void setDomainGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1671,
    "end_line": 1682,
    "comment": "/** \n * Sets the paint for the grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003epaint\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeGridlinesVisible#1689",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeGridlinesVisible",
    "snippet": "public boolean isRangeGridlinesVisible(){\n  return this.rangeGridlinesVisible;\n}",
    "begin_line": 1689,
    "end_line": 1694,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range axis grid is visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return A boolean.\n * @see #setRangeGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlinesVisible#1701",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlinesVisible",
    "snippet": "public void setRangeGridlinesVisible(boolean visible){\n  if (this.rangeGridlinesVisible !\u003d visible) {\n    this.rangeGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1701,
    "end_line": 1712,
    "comment": "/** \n * Sets the flag that controls whether or not the range axis grid lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isRangeGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeGridlineStroke#1719",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeGridlineStroke",
    "snippet": "public Stroke getRangeGridlineStroke(){\n  return this.rangeGridlineStroke;\n}",
    "begin_line": 1719,
    "end_line": 1724,
    "comment": "/** \n * Returns the stroke for the grid lines (if any) plotted against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlineStroke#1731",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlineStroke",
    "snippet": "public void setRangeGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1731,
    "end_line": 1740,
    "comment": "/** \n * Sets the stroke for the grid lines plotted against the range axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeGridlinePaint#1747",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeGridlinePaint",
    "snippet": "public Paint getRangeGridlinePaint(){\n  return this.rangeGridlinePaint;\n}",
    "begin_line": 1747,
    "end_line": 1752,
    "comment": "/** \n * Returns the paint for the grid lines (if any) plotted against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlinePaint#1759",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlinePaint",
    "snippet": "public void setRangeGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1759,
    "end_line": 1768,
    "comment": "/** \n * Sets the paint for the grid lines plotted against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainZeroBaselineVisible#1776",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainZeroBaselineVisible",
    "snippet": "public boolean isDomainZeroBaselineVisible(){\n  return this.domainZeroBaselineVisible;\n}",
    "begin_line": 1776,
    "end_line": 1782,
    "comment": "/** \n * Returns a flag that controls whether or not a zero baseline is displayed for the domain axis.\n * @return A boolean.\n * @since 1.0.5\n * @see #setDomainZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselineVisible#1790",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselineVisible",
    "snippet": "public void setDomainZeroBaselineVisible(boolean visible){\n  this.domainZeroBaselineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 1790,
    "end_line": 1798,
    "comment": "/** \n * Sets the flag that controls whether or not the zero baseline is displayed for the domain axis, and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param visible  the flag.\n * @since 1.0.5\n * @see #isDomainZeroBaselineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainZeroBaselineStroke#1806",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainZeroBaselineStroke",
    "snippet": "public Stroke getDomainZeroBaselineStroke(){\n  return this.domainZeroBaselineStroke;\n}",
    "begin_line": 1806,
    "end_line": 1811,
    "comment": "/** \n * Returns the stroke used for the zero baseline against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.5\n * @see #setDomainZeroBaselineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselineStroke#1819",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselineStroke",
    "snippet": "public void setDomainZeroBaselineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainZeroBaselineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1819,
    "end_line": 1829,
    "comment": "/** \n * Sets the stroke for the zero baseline for the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n * @see #getRangeZeroBaselineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainZeroBaselinePaint#1837",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainZeroBaselinePaint",
    "snippet": "public Paint getDomainZeroBaselinePaint(){\n  return this.domainZeroBaselinePaint;\n}",
    "begin_line": 1837,
    "end_line": 1843,
    "comment": "/** \n * Returns the paint for the zero baseline (if any) plotted against the domain axis.\n * @since 1.0.5\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainZeroBaselinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselinePaint#1851",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselinePaint",
    "snippet": "public void setDomainZeroBaselinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainZeroBaselinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1851,
    "end_line": 1861,
    "comment": "/** \n * Sets the paint for the zero baseline plotted against the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n * @see #getDomainZeroBaselinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeZeroBaselineVisible#1868",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeZeroBaselineVisible",
    "snippet": "public boolean isRangeZeroBaselineVisible(){\n  return this.rangeZeroBaselineVisible;\n}",
    "begin_line": 1868,
    "end_line": 1873,
    "comment": "/** \n * Returns a flag that controls whether or not a zero baseline is displayed for the range axis.\n * @return A boolean.\n * @see #setRangeZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselineVisible#1880",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselineVisible",
    "snippet": "public void setRangeZeroBaselineVisible(boolean visible){\n  this.rangeZeroBaselineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 1880,
    "end_line": 1887,
    "comment": "/** \n * Sets the flag that controls whether or not the zero baseline is displayed for the range axis, and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param visible  the flag.\n * @see #isRangeZeroBaselineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeZeroBaselineStroke#1894",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeZeroBaselineStroke",
    "snippet": "public Stroke getRangeZeroBaselineStroke(){\n  return this.rangeZeroBaselineStroke;\n}",
    "begin_line": 1894,
    "end_line": 1898,
    "comment": "/** \n * Returns the stroke used for the zero baseline against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeZeroBaselineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselineStroke#1905",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselineStroke",
    "snippet": "public void setRangeZeroBaselineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeZeroBaselineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1905,
    "end_line": 1914,
    "comment": "/** \n * Sets the stroke for the zero baseline for the range axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeZeroBaselineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeZeroBaselinePaint#1921",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeZeroBaselinePaint",
    "snippet": "public Paint getRangeZeroBaselinePaint(){\n  return this.rangeZeroBaselinePaint;\n}",
    "begin_line": 1921,
    "end_line": 1926,
    "comment": "/** \n * Returns the paint for the zero baseline (if any) plotted against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeZeroBaselinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselinePaint#1933",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselinePaint",
    "snippet": "public void setRangeZeroBaselinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeZeroBaselinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1933,
    "end_line": 1942,
    "comment": "/** \n * Sets the paint for the zero baseline plotted against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeZeroBaselinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainTickBandPaint#1949",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainTickBandPaint",
    "snippet": "public Paint getDomainTickBandPaint(){\n  return this.domainTickBandPaint;\n}",
    "begin_line": 1949,
    "end_line": 1954,
    "comment": "/** \n * Returns the paint used for the domain tick bands.  If this is \u003ccode\u003enull\u003c/code\u003e, no tick bands will be drawn.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainTickBandPaint#1961",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainTickBandPaint",
    "snippet": "public void setDomainTickBandPaint(Paint paint){\n  this.domainTickBandPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1961,
    "end_line": 1966,
    "comment": "/** \n * Sets the paint for the domain tick bands.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainTickBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeTickBandPaint#1973",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeTickBandPaint",
    "snippet": "public Paint getRangeTickBandPaint(){\n  return this.rangeTickBandPaint;\n}",
    "begin_line": 1973,
    "end_line": 1978,
    "comment": "/** \n * Returns the paint used for the range tick bands.  If this is \u003ccode\u003enull\u003c/code\u003e, no tick bands will be drawn.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeTickBandPaint#1985",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeTickBandPaint",
    "snippet": "public void setRangeTickBandPaint(Paint paint){\n  this.rangeTickBandPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1985,
    "end_line": 1990,
    "comment": "/** \n * Sets the paint for the range tick bands.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeTickBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getQuadrantOrigin#1997",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getQuadrantOrigin",
    "snippet": "public Point2D getQuadrantOrigin(){\n  return this.quadrantOrigin;\n}",
    "begin_line": 1997,
    "end_line": 2002,
    "comment": "/** \n * Returns the origin for the quadrants that can be displayed on the plot. This defaults to (0, 0).\n * @return The origin point (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setQuadrantOrigin(Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setQuadrantOrigin#2009",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setQuadrantOrigin",
    "snippet": "public void setQuadrantOrigin(Point2D origin){\n  if (origin \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027origin\u0027 argument.\");\n  }\n  this.quadrantOrigin\u003dorigin;\n  fireChangeEvent();\n}",
    "begin_line": 2009,
    "end_line": 2018,
    "comment": "/** \n * Sets the quadrant origin and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param origin  the origin (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getQuadrantOrigin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getQuadrantPaint#2026",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getQuadrantPaint",
    "snippet": "public Paint getQuadrantPaint(int index){\n  if (index \u003c 0 || index \u003e 3) {\n    throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\");\n  }\n  return this.quadrantPaint[index];\n}",
    "begin_line": 2026,
    "end_line": 2035,
    "comment": "/** \n * Returns the paint used for the specified quadrant.\n * @param index  the quadrant index (0-3).\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setQuadrantPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setQuadrantPaint#2043",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setQuadrantPaint",
    "snippet": "public void setQuadrantPaint(int index,Paint paint){\n  if (index \u003c 0 || index \u003e 3) {\n    throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\");\n  }\n  this.quadrantPaint[index]\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2043,
    "end_line": 2053,
    "comment": "/** \n * Sets the paint used for the specified quadrant and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the quadrant index (0-3).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getQuadrantPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2058",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(Marker marker){\n  addDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2058,
    "end_line": 2070,
    "comment": "/** \n * Adds a marker for the domain axis and sends a  {@link PlotChangeEvent}to all registered listeners. \u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #addDomainMarker(Marker,Layer)\n * @see #clearDomainMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2076",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(Marker marker,Layer layer){\n  addDomainMarker(0,marker,layer);\n}",
    "begin_line": 2076,
    "end_line": 2086,
    "comment": "/** \n * Adds a marker for the domain axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background).\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainMarkers#2092",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainMarkers",
    "snippet": "public void clearDomainMarkers(){\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.backgroundDomainMarkers.clear();\n  }\n  if (this.foregroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.foregroundDomainMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2092,
    "end_line": 2114,
    "comment": "/** \n * Clears all the (foreground and background) domain markers and sends a {@link PlotChangeEvent} to all registered listeners.\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainMarkers#2121",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainMarkers",
    "snippet": "public void clearDomainMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2121,
    "end_line": 2151,
    "comment": "/** \n * Clears the (foreground and background) domain markers for a particular renderer.\n * @param index  the renderer index.\n * @see #clearRangeMarkers(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2161",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(int index,Marker marker,Layer layer){\n  addDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 2161,
    "end_line": 2170,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the domain axis (that the renderer is mapped to), however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @see #clearDomainMarkers(int)\n * @see #addRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2180",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker",
    "snippet": "public void addDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 not permitted.\");\n  }\n  if (layer \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027layer\u0027 not permitted.\");\n  }\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2180,
    "end_line": 2218,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the domain axis (that the renderer is mapped to), however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2226",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(Marker marker){\n  return removeDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2226,
    "end_line": 2233,
    "comment": "/** \n * Removes a marker for the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param marker  the marker.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2242",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(Marker marker,Layer layer){\n  return removeDomainMarker(0,marker,layer);\n}",
    "begin_line": 2242,
    "end_line": 2249,
    "comment": "/** \n * Removes a marker for the domain axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2259",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer){\n  return removeDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 2259,
    "end_line": 2266,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2277",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2277,
    "end_line": 2298,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and, if requested,  sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2303",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(Marker marker){\n  addRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2303,
    "end_line": 2313,
    "comment": "/** \n * Adds a marker for the range axis and sends a  {@link PlotChangeEvent} toall registered listeners. \u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #addRangeMarker(Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2319",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(Marker marker,Layer layer){\n  addRangeMarker(0,marker,layer);\n}",
    "begin_line": 2319,
    "end_line": 2329,
    "comment": "/** \n * Adds a marker for the range axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background).\n * @see #addRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeMarkers#2333",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeMarkers",
    "snippet": "public void clearRangeMarkers(){\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.backgroundRangeMarkers.clear();\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.foregroundRangeMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2333,
    "end_line": 2357,
    "comment": "/** \n * Clears all the range markers and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @see #clearRangeMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2367",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer){\n  addRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2367,
    "end_line": 2375,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and sends a  {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @see #clearRangeMarkers(int)\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2385",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2385,
    "end_line": 2416,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeMarkers#2422",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeMarkers",
    "snippet": "public void clearRangeMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2422,
    "end_line": 2451,
    "comment": "/** \n * Clears the (foreground and background) range markers for a particular renderer.\n * @param index  the renderer index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2459",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(Marker marker){\n  return removeRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2459,
    "end_line": 2466,
    "comment": "/** \n * Removes a marker for the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker.\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2475",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(Marker marker,Layer layer){\n  return removeRangeMarker(0,marker,layer);\n}",
    "begin_line": 2475,
    "end_line": 2482,
    "comment": "/** \n * Removes a marker for the range axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2492",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer){\n  return removeRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2492,
    "end_line": 2499,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2510",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 argument.\");\n  }\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2510,
    "end_line": 2534,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actually removed.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addAnnotation#2542",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addAnnotation",
    "snippet": "public void addAnnotation(XYAnnotation annotation){\n  addAnnotation(annotation,true);\n}",
    "begin_line": 2542,
    "end_line": 2547,
    "comment": "/** \n * Adds an annotation to the plot and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAnnotations()\n * @see #removeAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addAnnotation#2555",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addAnnotation",
    "snippet": "public void addAnnotation(XYAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  this.annotations.add(annotation);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2555,
    "end_line": 2566,
    "comment": "/** \n * Adds an annotation to the plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeAnnotation#2575",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeAnnotation",
    "snippet": "public boolean removeAnnotation(XYAnnotation annotation){\n  return removeAnnotation(annotation,true);\n}",
    "begin_line": 2575,
    "end_line": 2581,
    "comment": "/** \n * Removes an annotation from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A boolean (indicates whether or not the annotation was removed).\n * @see #addAnnotation(XYAnnotation)\n * @see #getAnnotations()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeAnnotation#2590",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeAnnotation",
    "snippet": "public boolean removeAnnotation(XYAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  boolean removed\u003dthis.annotations.remove(annotation);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2590,
    "end_line": 2603,
    "comment": "/** \n * Removes an annotation from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @return A boolean (indicates whether or not the annotation was removed).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getAnnotations#2611",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getAnnotations",
    "snippet": "public List getAnnotations(){\n  return new ArrayList(this.annotations);\n}",
    "begin_line": 2611,
    "end_line": 2616,
    "comment": "/** \n * Returns the list of annotations.\n * @return The list of annotations.\n * @since 1.0.1\n * @see #addAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearAnnotations#2622",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearAnnotations",
    "snippet": "public void clearAnnotations(){\n  this.annotations.clear();\n  fireChangeEvent();\n}",
    "begin_line": 2622,
    "end_line": 2627,
    "comment": "/** \n * Clears all the annotations and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @see #addAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateAxisSpace#2635",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateAxisSpace",
    "snippet": "protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){\n  AxisSpace space\u003dnew AxisSpace();\n  space\u003dcalculateDomainAxisSpace(g2,plotArea,space);\n  space\u003dcalculateRangeAxisSpace(g2,plotArea,space);\n  return space;\n}",
    "begin_line": 2635,
    "end_line": 2643,
    "comment": "/** \n * Calculates the space required for all the axes in the plot.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateDomainAxisSpace#2652",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateDomainAxisSpace",
    "snippet": "protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n  }\n else {\n    for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n      Axis axis\u003d(Axis)this.domainAxes.get(i);\n      if (axis !\u003d null) {\n        RectangleEdge edge\u003dgetDomainAxisEdge(i);\n        space\u003daxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 2652,
    "end_line": 2690,
    "comment": "/** \n * Calculates the space required for the domain axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateRangeAxisSpace#2699",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateRangeAxisSpace",
    "snippet": "protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n  }\n else {\n    for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n      Axis axis\u003d(Axis)this.rangeAxes.get(i);\n      if (axis !\u003d null) {\n        RectangleEdge edge\u003dgetRangeAxisEdge(i);\n        space\u003daxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 2699,
    "end_line": 2736,
    "comment": "/** \n * Calculates the space required for the range axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.draw#2744",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.draw",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){\n  boolean b1\u003d(area.getWidth() \u003c\u003d MINIMUM_WIDTH_TO_DRAW);\n  boolean b2\u003d(area.getHeight() \u003c\u003d MINIMUM_HEIGHT_TO_DRAW);\n  if (b1 || b2) {\n    return;\n  }\n  if (info !\u003d null) {\n    info.setPlotArea(area);\n  }\n  RectangleInsets insets\u003dgetInsets();\n  insets.trim(area);\n  AxisSpace space\u003dcalculateAxisSpace(g2,area);\n  Rectangle2D dataArea\u003dspace.shrink(area,null);\n  this.axisOffset.trim(dataArea);\n  if (info !\u003d null) {\n    info.setDataArea(dataArea);\n  }\n  drawBackground(g2,dataArea);\n  Map axisStateMap\u003ddrawAxes(g2,area,dataArea,info);\n  PlotOrientation orient\u003dgetOrientation();\n  if (anchor !\u003d null \u0026\u0026 !dataArea.contains(anchor)) {\n    anchor\u003dnull;\n  }\n  CrosshairState crosshairState\u003dnew CrosshairState();\n  crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n  crosshairState.setAnchor(anchor);\n  crosshairState.setAnchorX(Double.NaN);\n  crosshairState.setAnchorY(Double.NaN);\n  if (anchor !\u003d null) {\n    ValueAxis domainAxis\u003dgetDomainAxis();\n    if (domainAxis !\u003d null) {\n      double x;\n      if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n        x\u003ddomainAxis.java2DToValue(anchor.getX(),dataArea,getDomainAxisEdge());\n      }\n else {\n        x\u003ddomainAxis.java2DToValue(anchor.getY(),dataArea,getDomainAxisEdge());\n      }\n      crosshairState.setAnchorX(x);\n    }\n    ValueAxis rangeAxis\u003dgetRangeAxis();\n    if (rangeAxis !\u003d null) {\n      double y;\n      if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n        y\u003drangeAxis.java2DToValue(anchor.getY(),dataArea,getRangeAxisEdge());\n      }\n else {\n        y\u003drangeAxis.java2DToValue(anchor.getX(),dataArea,getRangeAxisEdge());\n      }\n      crosshairState.setAnchorY(y);\n    }\n  }\n  crosshairState.setCrosshairX(getDomainCrosshairValue());\n  crosshairState.setCrosshairY(getRangeCrosshairValue());\n  Shape originalClip\u003dg2.getClip();\n  Composite originalComposite\u003dg2.getComposite();\n  g2.clip(dataArea);\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));\n  AxisState domainAxisState\u003d(AxisState)axisStateMap.get(getDomainAxis());\n  if (domainAxisState \u003d\u003d null) {\n    if (parentState !\u003d null) {\n      domainAxisState\u003d(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());\n    }\n  }\n  AxisState rangeAxisState\u003d(AxisState)axisStateMap.get(getRangeAxis());\n  if (rangeAxisState \u003d\u003d null) {\n    if (parentState !\u003d null) {\n      rangeAxisState\u003d(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());\n    }\n  }\n  if (domainAxisState !\u003d null) {\n    drawDomainTickBands(g2,dataArea,domainAxisState.getTicks());\n  }\n  if (rangeAxisState !\u003d null) {\n    drawRangeTickBands(g2,dataArea,rangeAxisState.getTicks());\n  }\n  if (domainAxisState !\u003d null) {\n    drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());\n    drawZeroDomainBaseline(g2,dataArea);\n  }\n  if (rangeAxisState !\u003d null) {\n    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());\n    drawZeroRangeBaseline(g2,dataArea);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  boolean foundData\u003dfalse;\n  DatasetRenderingOrder order\u003dgetDatasetRenderingOrder();\n  if (order \u003d\u003d DatasetRenderingOrder.FORWARD) {\n    int rendererCount\u003dthis.renderers.size();\n    for (int i\u003d0; i \u003c rendererCount; i++) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);\n      }\n    }\n    for (int i\u003d0; i \u003c getDatasetCount(); i++) {\n      foundData\u003drender(g2,dataArea,i,info,crosshairState) || foundData;\n    }\n    for (int i\u003d0; i \u003c rendererCount; i++) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);\n      }\n    }\n  }\n else   if (order \u003d\u003d DatasetRenderingOrder.REVERSE) {\n    int rendererCount\u003dthis.renderers.size();\n    for (int i\u003drendererCount - 1; i \u003e\u003d 0; i--) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (i \u003e\u003d getDatasetCount()) {\n        continue;\n      }\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);\n      }\n    }\n    for (int i\u003dgetDatasetCount() - 1; i \u003e\u003d 0; i--) {\n      foundData\u003drender(g2,dataArea,i,info,crosshairState) || foundData;\n    }\n    for (int i\u003drendererCount - 1; i \u003e\u003d 0; i--) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (i \u003e\u003d getDatasetCount()) {\n        continue;\n      }\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);\n      }\n    }\n  }\n  int xAxisIndex\u003dcrosshairState.getDomainAxisIndex();\n  ValueAxis xAxis\u003dgetDomainAxis(xAxisIndex);\n  RectangleEdge xAxisEdge\u003dgetDomainAxisEdge(xAxisIndex);\n  if (!this.domainCrosshairLockedOnData \u0026\u0026 anchor !\u003d null) {\n    double xx;\n    if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n      xx\u003dxAxis.java2DToValue(anchor.getX(),dataArea,xAxisEdge);\n    }\n else {\n      xx\u003dxAxis.java2DToValue(anchor.getY(),dataArea,xAxisEdge);\n    }\n    crosshairState.setCrosshairX(xx);\n  }\n  setDomainCrosshairValue(crosshairState.getCrosshairX(),false);\n  if (isDomainCrosshairVisible()) {\n    double x\u003dgetDomainCrosshairValue();\n    Paint paint\u003dgetDomainCrosshairPaint();\n    Stroke stroke\u003dgetDomainCrosshairStroke();\n    drawDomainCrosshair(g2,dataArea,orient,x,xAxis,stroke,paint);\n  }\n  int yAxisIndex\u003dcrosshairState.getRangeAxisIndex();\n  ValueAxis yAxis\u003dgetRangeAxis(yAxisIndex);\n  RectangleEdge yAxisEdge\u003dgetRangeAxisEdge(yAxisIndex);\n  if (!this.rangeCrosshairLockedOnData \u0026\u0026 anchor !\u003d null) {\n    double yy;\n    if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n      yy\u003dyAxis.java2DToValue(anchor.getY(),dataArea,yAxisEdge);\n    }\n else {\n      yy\u003dyAxis.java2DToValue(anchor.getX(),dataArea,yAxisEdge);\n    }\n    crosshairState.setCrosshairY(yy);\n  }\n  setRangeCrosshairValue(crosshairState.getCrosshairY(),false);\n  if (isRangeCrosshairVisible()) {\n    double y\u003dgetRangeCrosshairValue();\n    Paint paint\u003dgetRangeCrosshairPaint();\n    Stroke stroke\u003dgetRangeCrosshairStroke();\n    drawRangeCrosshair(g2,dataArea,orient,y,yAxis,stroke,paint);\n  }\n  if (!foundData) {\n    drawNoDataMessage(g2,dataArea);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  drawAnnotations(g2,dataArea,info);\n  g2.setClip(originalClip);\n  g2.setComposite(originalComposite);\n  drawOutline(g2,dataArea);\n}",
    "begin_line": 2744,
    "end_line": 3006,
    "comment": "/** \n * Draws the plot within the specified area on a graphics device.\n * @param g2  the graphics device.\n * @param area  the plot area (in Java2D space).\n * @param anchor  an anchor point in Java2D space (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param parentState  the state from the parent plot, if there is one(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param info  collects chart drawing information (\u003ccode\u003enull\u003c/code\u003epermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawBackground#3013",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawBackground",
    "snippet": "public void drawBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area,this.orientation);\n  drawQuadrants(g2,area);\n  drawBackgroundImage(g2,area);\n}",
    "begin_line": 3013,
    "end_line": 3018,
    "comment": "/** \n * Draws the background for the plot.\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawQuadrants#3027",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawQuadrants",
    "snippet": "protected void drawQuadrants(Graphics2D g2,Rectangle2D area){\n  boolean somethingToDraw\u003dfalse;\n  ValueAxis xAxis\u003dgetDomainAxis();\n  double x\u003dxAxis.getRange().constrain(this.quadrantOrigin.getX());\n  double xx\u003dxAxis.valueToJava2D(x,area,getDomainAxisEdge());\n  ValueAxis yAxis\u003dgetRangeAxis();\n  double y\u003dyAxis.getRange().constrain(this.quadrantOrigin.getY());\n  double yy\u003dyAxis.valueToJava2D(y,area,getRangeAxisEdge());\n  double xmin\u003dxAxis.getLowerBound();\n  double xxmin\u003dxAxis.valueToJava2D(xmin,area,getDomainAxisEdge());\n  double xmax\u003dxAxis.getUpperBound();\n  double xxmax\u003dxAxis.valueToJava2D(xmax,area,getDomainAxisEdge());\n  double ymin\u003dyAxis.getLowerBound();\n  double yymin\u003dyAxis.valueToJava2D(ymin,area,getRangeAxisEdge());\n  double ymax\u003dyAxis.getUpperBound();\n  double yymax\u003dyAxis.valueToJava2D(ymax,area,getRangeAxisEdge());\n  Rectangle2D[] r\u003dnew Rectangle2D[]{null,null,null,null};\n  if (this.quadrantPaint[0] !\u003d null) {\n    if (x \u003e xmin \u0026\u0026 y \u003c ymax) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[0]\u003dnew Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmin,xx),Math.abs(yy - yymax),Math.abs(xx - xxmin));\n      }\n else {\n        r[0]\u003dnew Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymax,yy),Math.abs(xx - xxmin),Math.abs(yy - yymax));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[1] !\u003d null) {\n    if (x \u003c xmax \u0026\u0026 y \u003c ymax) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[1]\u003dnew Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmax,xx),Math.abs(yy - yymax),Math.abs(xx - xxmax));\n      }\n else {\n        r[1]\u003dnew Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymax,yy),Math.abs(xx - xxmax),Math.abs(yy - yymax));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[2] !\u003d null) {\n    if (x \u003e xmin \u0026\u0026 y \u003e ymin) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[2]\u003dnew Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmin,xx),Math.abs(yy - yymin),Math.abs(xx - xxmin));\n      }\n else {\n        r[2]\u003dnew Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymin,yy),Math.abs(xx - xxmin),Math.abs(yy - yymin));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[3] !\u003d null) {\n    if (x \u003c xmax \u0026\u0026 y \u003e ymin) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[3]\u003dnew Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmax,xx),Math.abs(yy - yymin),Math.abs(xx - xxmax));\n      }\n else {\n        r[3]\u003dnew Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymin,yy),Math.abs(xx - xxmax),Math.abs(yy - yymin));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (somethingToDraw) {\n    Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getBackgroundAlpha()));\n    for (int i\u003d0; i \u003c 4; i++) {\n      if (this.quadrantPaint[i] !\u003d null \u0026\u0026 r[i] !\u003d null) {\n        g2.setPaint(this.quadrantPaint[i]);\n        g2.fill(r[i]);\n      }\n    }\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 3027,
    "end_line": 3129,
    "comment": "/** \n * Draws the quadrants.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #setQuadrantOrigin(Point2D)\n * @see #setQuadrantPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainTickBands#3138",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainTickBands",
    "snippet": "public void drawDomainTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  Paint bandPaint\u003dgetDomainTickBandPaint();\n  if (bandPaint !\u003d null) {\n    boolean fillBand\u003dfalse;\n    ValueAxis xAxis\u003dgetDomainAxis();\n    double previous\u003dxAxis.getLowerBound();\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      double current\u003dtick.getValue();\n      if (fillBand) {\n        getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,current);\n      }\n      previous\u003dcurrent;\n      fillBand\u003d!fillBand;\n    }\n    double end\u003dxAxis.getUpperBound();\n    if (fillBand) {\n      getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,end);\n    }\n  }\n}",
    "begin_line": 3138,
    "end_line": 3164,
    "comment": "/** \n * Draws the domain tick bands, if any.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #setDomainTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeTickBands#3173",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeTickBands",
    "snippet": "public void drawRangeTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  Paint bandPaint\u003dgetRangeTickBandPaint();\n  if (bandPaint !\u003d null) {\n    boolean fillBand\u003dfalse;\n    ValueAxis axis\u003dgetRangeAxis();\n    double previous\u003daxis.getLowerBound();\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      double current\u003dtick.getValue();\n      if (fillBand) {\n        getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,current);\n      }\n      previous\u003dcurrent;\n      fillBand\u003d!fillBand;\n    }\n    double end\u003daxis.getUpperBound();\n    if (fillBand) {\n      getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,end);\n    }\n  }\n}",
    "begin_line": 3173,
    "end_line": 3199,
    "comment": "/** \n * Draws the range tick bands, if any.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #setRangeTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawAxes#3209",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawAxes",
    "snippet": "protected Map drawAxes(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,PlotRenderingInfo plotState){\n  AxisCollection axisCollection\u003dnew AxisCollection();\n  for (int index\u003d0; index \u003c this.domainAxes.size(); index++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(index);\n    if (axis !\u003d null) {\n      axisCollection.add(axis,getDomainAxisEdge(index));\n    }\n  }\n  for (int index\u003d0; index \u003c this.rangeAxes.size(); index++) {\n    ValueAxis yAxis\u003d(ValueAxis)this.rangeAxes.get(index);\n    if (yAxis !\u003d null) {\n      axisCollection.add(yAxis,getRangeAxisEdge(index));\n    }\n  }\n  Map axisStateMap\u003dnew HashMap();\n  double cursor\u003ddataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());\n  Iterator iterator\u003daxisCollection.getAxesAtTop().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.TOP,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n  iterator\u003daxisCollection.getAxesAtBottom().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.BOTTOM,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtLeft().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.LEFT,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtRight().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.RIGHT,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  return axisStateMap;\n}",
    "begin_line": 3209,
    "end_line": 3286,
    "comment": "/** \n * A utility method for drawing the axes.\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotArea  the plot area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the data area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A map containing the state for each axis drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.render#3289",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.render",
    "snippet": "public boolean render(Graphics2D g2,Rectangle2D dataArea,int index,PlotRenderingInfo info,CrosshairState crosshairState){\n  boolean foundData\u003dfalse;\n  XYDataset dataset\u003dgetDataset(index);\n  if (!DatasetUtilities.isEmptyOrNull(dataset)) {\n    foundData\u003dtrue;\n    ValueAxis xAxis\u003dgetDomainAxisForDataset(index);\n    ValueAxis yAxis\u003dgetRangeAxisForDataset(index);\n    XYItemRenderer renderer\u003dgetRenderer(index);\n    if (renderer \u003d\u003d null) {\n      renderer\u003dgetRenderer();\n      if (renderer \u003d\u003d null) {\n        return foundData;\n      }\n    }\n    XYItemRendererState state\u003drenderer.initialise(g2,dataArea,this,dataset,info);\n    int passCount\u003drenderer.getPassCount();\n    SeriesRenderingOrder seriesOrder\u003dgetSeriesRenderingOrder();\n    if (seriesOrder \u003d\u003d SeriesRenderingOrder.REVERSE) {\n      for (int pass\u003d0; pass \u003c passCount; pass++) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int series\u003dseriesCount - 1; series \u003e\u003d 0; series--) {\n          int firstItem\u003d0;\n          int lastItem\u003ddataset.getItemCount(series) - 1;\n          if (lastItem \u003d\u003d -1) {\n            continue;\n          }\n          if (state.getProcessVisibleItemsOnly()) {\n            int[] itemBounds\u003dRendererUtilities.findLiveItems(dataset,series,xAxis.getLowerBound(),xAxis.getUpperBound());\n            firstItem\u003ditemBounds[0];\n            lastItem\u003ditemBounds[1];\n          }\n          for (int item\u003dfirstItem; item \u003c\u003d lastItem; item++) {\n            renderer.drawItem(g2,state,dataArea,info,this,xAxis,yAxis,dataset,series,item,crosshairState,pass);\n          }\n        }\n      }\n    }\n else {\n      for (int pass\u003d0; pass \u003c passCount; pass++) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int series\u003d0; series \u003c seriesCount; series++) {\n          int firstItem\u003d0;\n          int lastItem\u003ddataset.getItemCount(series) - 1;\n          if (state.getProcessVisibleItemsOnly()) {\n            int[] itemBounds\u003dRendererUtilities.findLiveItems(dataset,series,xAxis.getLowerBound(),xAxis.getUpperBound());\n            firstItem\u003ditemBounds[0];\n            lastItem\u003ditemBounds[1];\n          }\n          for (int item\u003dfirstItem; item \u003c\u003d lastItem; item++) {\n            renderer.drawItem(g2,state,dataArea,info,this,xAxis,yAxis,dataset,series,item,crosshairState,pass);\n          }\n        }\n      }\n    }\n  }\n  return foundData;\n}",
    "begin_line": 3289,
    "end_line": 3378,
    "comment": "/** \n * Draws a representation of the data within the dataArea region, using the current renderer. \u003cP\u003e The \u003ccode\u003einfo\u003c/code\u003e and \u003ccode\u003ecrosshairState\u003c/code\u003e arguments may be \u003ccode\u003enull\u003c/code\u003e.\n * @param g2  the graphics device.\n * @param dataArea  the region in which the data is to be drawn.\n * @param index  the dataset index.\n * @param info  an optional object for collection dimension information.\n * @param crosshairState  collects crosshair information(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A flag that indicates whether any data was actually rendered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisForDataset#3385",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisForDataset",
    "snippet": "public ValueAxis getDomainAxisForDataset(int index){\n  if (index \u003c 0 || index \u003e\u003d getDatasetCount()) {\n    throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\");\n  }\n  ValueAxis valueAxis\u003dnull;\n  Integer axisIndex\u003d(Integer)this.datasetToDomainAxisMap.get(new Integer(index));\n  if (axisIndex !\u003d null) {\n    valueAxis\u003dgetDomainAxis(axisIndex.intValue());\n  }\n else {\n    valueAxis\u003dgetDomainAxis(0);\n  }\n  return valueAxis;\n}",
    "begin_line": 3385,
    "end_line": 3405,
    "comment": "/** \n * Returns the domain axis for a dataset.\n * @param index  the dataset index.\n * @return The axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisForDataset#3412",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisForDataset",
    "snippet": "public ValueAxis getRangeAxisForDataset(int index){\n  if (index \u003c 0 || index \u003e\u003d getDatasetCount()) {\n    throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\");\n  }\n  ValueAxis valueAxis\u003dnull;\n  Integer axisIndex\u003d(Integer)this.datasetToRangeAxisMap.get(new Integer(index));\n  if (axisIndex !\u003d null) {\n    valueAxis\u003dgetRangeAxis(axisIndex.intValue());\n  }\n else {\n    valueAxis\u003dgetRangeAxis(0);\n  }\n  return valueAxis;\n}",
    "begin_line": 3412,
    "end_line": 3432,
    "comment": "/** \n * Returns the range axis for a dataset.\n * @param index  the dataset index.\n * @return The axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainGridlines#3441",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainGridlines",
    "snippet": "protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  if (getRenderer() \u003d\u003d null) {\n    return;\n  }\n  if (isDomainGridlinesVisible()) {\n    Stroke gridStroke\u003dgetDomainGridlineStroke();\n    Paint gridPaint\u003dgetDomainGridlinePaint();\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      getRenderer().drawDomainLine(g2,this,getDomainAxis(),dataArea,tick.getValue(),gridPaint,gridStroke);\n    }\n  }\n}",
    "begin_line": 3441,
    "end_line": 3462,
    "comment": "/** \n * Draws the gridlines for the plot, if they are visible.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #drawRangeGridlines(Graphics2D,Rectangle2D,List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeGridlines#3471",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeGridlines",
    "snippet": "protected void drawRangeGridlines(Graphics2D g2,Rectangle2D area,List ticks){\n  if (getRenderer() \u003d\u003d null) {\n    return;\n  }\n  if (isRangeGridlinesVisible()) {\n    Stroke gridStroke\u003dgetRangeGridlineStroke();\n    Paint gridPaint\u003dgetRangeGridlinePaint();\n    ValueAxis axis\u003dgetRangeAxis();\n    if (axis !\u003d null) {\n      Iterator iterator\u003dticks.iterator();\n      while (iterator.hasNext()) {\n        ValueTick tick\u003d(ValueTick)iterator.next();\n        if (tick.getValue() !\u003d 0.0 || !isRangeZeroBaselineVisible()) {\n          getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,tick.getValue(),gridPaint,gridStroke);\n        }\n      }\n    }\n  }\n}",
    "begin_line": 3471,
    "end_line": 3499,
    "comment": "/** \n * Draws the gridlines for the plot\u0027s primary range axis, if they are visible.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @param ticks  the ticks.\n * @see #drawDomainGridlines(Graphics2D,Rectangle2D,List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawZeroDomainBaseline#3508",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawZeroDomainBaseline",
    "snippet": "protected void drawZeroDomainBaseline(Graphics2D g2,Rectangle2D area){\n  if (isDomainZeroBaselineVisible()) {\n    XYItemRenderer r\u003dgetRenderer();\n    r.drawDomainLine(g2,this,getDomainAxis(),area,0.0,this.domainZeroBaselinePaint,this.domainZeroBaselineStroke);\n  }\n}",
    "begin_line": 3508,
    "end_line": 3518,
    "comment": "/** \n * Draws a base line across the chart at value zero on the domain axis.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @see #setDomainZeroBaselineVisible(boolean)\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawZeroRangeBaseline#3526",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawZeroRangeBaseline",
    "snippet": "protected void drawZeroRangeBaseline(Graphics2D g2,Rectangle2D area){\n  if (isRangeZeroBaselineVisible()) {\n    getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,0.0,this.rangeZeroBaselinePaint,this.rangeZeroBaselineStroke);\n  }\n}",
    "begin_line": 3526,
    "end_line": 3533,
    "comment": "/** \n * Draws a base line across the chart at value zero on the range axis.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @see #setRangeZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawAnnotations#3541",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawAnnotations",
    "snippet": "public void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info){\n  Iterator iterator\u003dthis.annotations.iterator();\n  while (iterator.hasNext()) {\n    XYAnnotation annotation\u003d(XYAnnotation)iterator.next();\n    ValueAxis xAxis\u003dgetDomainAxis();\n    ValueAxis yAxis\u003dgetRangeAxis();\n    annotation.draw(g2,this,dataArea,xAxis,yAxis,0,info);\n  }\n}",
    "begin_line": 3541,
    "end_line": 3554,
    "comment": "/** \n * Draws the annotations for the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param info  the chart rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainMarkers#3563",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainMarkers",
    "snippet": "protected void drawDomainMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  XYItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  if (index \u003e\u003d getDatasetCount()) {\n    return;\n  }\n  Collection markers\u003dgetDomainMarkers(index,layer);\n  ValueAxis axis\u003dgetDomainAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker\u003d(Marker)iterator.next();\n      r.drawDomainMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 3563,
    "end_line": 3587,
    "comment": "/** \n * Draws the domain markers (if any) for an axis and layer.  This method is typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeMarkers#3596",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeMarkers",
    "snippet": "protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  XYItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  if (index \u003e\u003d getDatasetCount()) {\n    return;\n  }\n  Collection markers\u003dgetRangeMarkers(index,layer);\n  ValueAxis axis\u003dgetRangeAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker\u003d(Marker)iterator.next();\n      r.drawRangeMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 3596,
    "end_line": 3619,
    "comment": "/** \n * Draws the range markers (if any) for a renderer and layer.  This method is typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMarkers#3627",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMarkers",
    "snippet": "public Collection getDomainMarkers(Layer layer){\n  return getDomainMarkers(0,layer);\n}",
    "begin_line": 3627,
    "end_line": 3632,
    "comment": "/** \n * Returns the list of domain markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of domain markers.\n * @see #getRangeMarkers(Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMarkers#3640",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMarkers",
    "snippet": "public Collection getRangeMarkers(Layer layer){\n  return getRangeMarkers(0,layer);\n}",
    "begin_line": 3640,
    "end_line": 3645,
    "comment": "/** \n * Returns the list of range markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of range markers.\n * @see #getDomainMarkers(Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMarkers#3654",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMarkers",
    "snippet": "public Collection getDomainMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundDomainMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundDomainMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 3654,
    "end_line": 3671,
    "comment": "/** \n * Returns a collection of domain markers for a particular renderer and layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getRangeMarkers(int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMarkers#3680",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMarkers",
    "snippet": "public Collection getRangeMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundRangeMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundRangeMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 3680,
    "end_line": 3697,
    "comment": "/** \n * Returns a collection of range markers for a particular renderer and layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDomainMarkers(int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawHorizontalLine#3707",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawHorizontalLine",
    "snippet": "protected void drawHorizontalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){\n  ValueAxis axis\u003dgetRangeAxis();\n  if (getOrientation() \u003d\u003d PlotOrientation.HORIZONTAL) {\n    axis\u003dgetDomainAxis();\n  }\n  if (axis.getRange().contains(value)) {\n    double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n    Line2D line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 3707,
    "end_line": 3726,
    "comment": "/** \n * Utility method for drawing a horizontal line across the data area of the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param value  the coordinate, where to draw the line.\n * @param stroke  the stroke to use.\n * @param paint  the paint to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainCrosshair#3739",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainCrosshair",
    "snippet": "protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){\n  if (axis.getRange().contains(value)) {\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n      line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    }\n else {\n      double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n      line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    }\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 3739,
    "end_line": 3764,
    "comment": "/** \n * Draws a domain crosshair.\n * @param g2  the graphics target.\n * @param dataArea  the data area.\n * @param orientation  the plot orientation.\n * @param value  the crosshair value.\n * @param axis  the axis against which the value is measured.\n * @param stroke  the stroke used to draw the crosshair line.\n * @param paint  the paint used to draw the crosshair line.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawVerticalLine#3774",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawVerticalLine",
    "snippet": "protected void drawVerticalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){\n  ValueAxis axis\u003dgetDomainAxis();\n  if (getOrientation() \u003d\u003d PlotOrientation.HORIZONTAL) {\n    axis\u003dgetRangeAxis();\n  }\n  if (axis.getRange().contains(value)) {\n    double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n    Line2D line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 3774,
    "end_line": 3792,
    "comment": "/** \n * Utility method for drawing a vertical line on the data area of the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param value  the coordinate, where to draw the line.\n * @param stroke  the stroke to use.\n * @param paint  the paint to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeCrosshair#3805",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeCrosshair",
    "snippet": "protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){\n  if (axis.getRange().contains(value)) {\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n      line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    }\n else {\n      double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n      line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    }\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 3805,
    "end_line": 3830,
    "comment": "/** \n * Draws a range crosshair.\n * @param g2  the graphics target.\n * @param dataArea  the data area.\n * @param orientation  the plot orientation.\n * @param value  the crosshair value.\n * @param axis  the axis against which the value is measured.\n * @param stroke  the stroke used to draw the crosshair line.\n * @param paint  the paint used to draw the crosshair line.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.handleClick#3838",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.handleClick",
    "snippet": "public void handleClick(int x,int y,PlotRenderingInfo info){\n  Rectangle2D dataArea\u003dinfo.getDataArea();\n  if (dataArea.contains(x,y)) {\n    ValueAxis da\u003dgetDomainAxis();\n    if (da !\u003d null) {\n      double hvalue\u003dda.java2DToValue(x,info.getDataArea(),getDomainAxisEdge());\n      setDomainCrosshairValue(hvalue);\n    }\n    ValueAxis ra\u003dgetRangeAxis();\n    if (ra !\u003d null) {\n      double vvalue\u003dra.java2DToValue(y,info.getDataArea(),getRangeAxisEdge());\n      setRangeCrosshairValue(vvalue);\n    }\n  }\n}",
    "begin_line": 3838,
    "end_line": 3859,
    "comment": "/** \n * Handles a \u0027click\u0027 on the plot by updating the anchor values.\n * @param x  the x-coordinate, where the click occurred, in Java2D space.\n * @param y  the y-coordinate, where the click occurred, in Java2D space.\n * @param info  object containing information about the plot dimensions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetsMappedToDomainAxis#3866",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToDomainAxis",
    "snippet": "private List getDatasetsMappedToDomainAxis(Integer axisIndex){\n  if (axisIndex \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axisIndex\u0027 argument.\");\n  }\n  List result\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    Integer mappedAxis\u003d(Integer)this.datasetToDomainAxisMap.get(new Integer(i));\n    if (mappedAxis \u003d\u003d null) {\n      if (axisIndex.equals(ZERO)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n else {\n      if (mappedAxis.equals(axisIndex)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3866,
    "end_line": 3889,
    "comment": "/** \n * A utility method that returns a list of datasets that are mapped to a particular axis.\n * @param axisIndex  the axis index (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A list of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetsMappedToRangeAxis#3896",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToRangeAxis",
    "snippet": "private List getDatasetsMappedToRangeAxis(Integer axisIndex){\n  if (axisIndex \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axisIndex\u0027 argument.\");\n  }\n  List result\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    Integer mappedAxis\u003d(Integer)this.datasetToRangeAxisMap.get(new Integer(i));\n    if (mappedAxis \u003d\u003d null) {\n      if (axisIndex.equals(ZERO)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n else {\n      if (mappedAxis.equals(axisIndex)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3896,
    "end_line": 3919,
    "comment": "/** \n * A utility method that returns a list of datasets that are mapped to a particular axis.\n * @param axisIndex  the axis index (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A list of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisIndex#3927",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisIndex",
    "snippet": "public int getDomainAxisIndex(ValueAxis axis){\n  int result\u003dthis.domainAxes.indexOf(axis);\n  if (result \u003c 0) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot p\u003d(XYPlot)parent;\n      result\u003dp.getDomainAxisIndex(axis);\n    }\n  }\n  return result;\n}",
    "begin_line": 3927,
    "end_line": 3941,
    "comment": "/** \n * Returns the index of the given domain axis.\n * @param axis  the axis.\n * @return The axis index.\n * @see #getRangeAxisIndex(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisIndex#3949",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisIndex",
    "snippet": "public int getRangeAxisIndex(ValueAxis axis){\n  int result\u003dthis.rangeAxes.indexOf(axis);\n  if (result \u003c 0) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot p\u003d(XYPlot)parent;\n      result\u003dp.getRangeAxisIndex(axis);\n    }\n  }\n  return result;\n}",
    "begin_line": 3949,
    "end_line": 3963,
    "comment": "/** \n * Returns the index of the given range axis.\n * @param axis  the axis.\n * @return The axis index.\n * @see #getDomainAxisIndex(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataRange#3970",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataRange",
    "snippet": "public Range getDataRange(ValueAxis axis){\n  Range result\u003dnull;\n  List mappedDatasets\u003dnew ArrayList();\n  boolean isDomainAxis\u003dtrue;\n  int domainIndex\u003dgetDomainAxisIndex(axis);\n  if (domainIndex \u003e\u003d 0) {\n    isDomainAxis\u003dtrue;\n    mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new Integer(domainIndex)));\n  }\n  int rangeIndex\u003dgetRangeAxisIndex(axis);\n  if (rangeIndex \u003e\u003d 0) {\n    isDomainAxis\u003dfalse;\n    mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new Integer(rangeIndex)));\n  }\n  Iterator iterator\u003dmappedDatasets.iterator();\n  while (iterator.hasNext()) {\n    XYDataset d\u003d(XYDataset)iterator.next();\n    if (d !\u003d null) {\n      XYItemRenderer r\u003dgetRendererForDataset(d);\n      if (isDomainAxis) {\n        if (r !\u003d null) {\n          result\u003dRange.combine(result,r.findDomainBounds(d));\n        }\n else {\n          result\u003dRange.combine(result,DatasetUtilities.findDomainBounds(d));\n        }\n      }\n else {\n        if (r !\u003d null) {\n          result\u003dRange.combine(result,r.findRangeBounds(d));\n        }\n else {\n          result\u003dRange.combine(result,DatasetUtilities.findRangeBounds(d));\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 3970,
    "end_line": 4023,
    "comment": "/** \n * Returns the range for the specified axis.\n * @param axis  the axis.\n * @return The range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.datasetChanged#4029",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.datasetChanged",
    "snippet": "public void datasetChanged(DatasetChangeEvent event){\n  configureDomainAxes();\n  configureRangeAxes();\n  if (getParent() !\u003d null) {\n    getParent().datasetChanged(event);\n  }\n else {\n    PlotChangeEvent e\u003dnew PlotChangeEvent(this);\n    e.setType(ChartChangeEventType.DATASET_UPDATED);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 4029,
    "end_line": 4043,
    "comment": "/** \n * Receives notification of a change to the plot\u0027s dataset. \u003cP\u003e The axis ranges are updated if necessary.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.rendererChanged#4049",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.rendererChanged",
    "snippet": "public void rendererChanged(RendererChangeEvent event){\n  fireChangeEvent();\n}",
    "begin_line": 4049,
    "end_line": 4052,
    "comment": "/** \n * Receives notification of a renderer change event.\n * @param event  the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainCrosshairVisible#4059",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainCrosshairVisible",
    "snippet": "public boolean isDomainCrosshairVisible(){\n  return this.domainCrosshairVisible;\n}",
    "begin_line": 4059,
    "end_line": 4063,
    "comment": "/** \n * Returns a flag indicating whether or not the domain crosshair is visible.\n * @return The flag.\n * @see #setDomainCrosshairVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairVisible#4070",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairVisible",
    "snippet": "public void setDomainCrosshairVisible(boolean flag){\n  if (this.domainCrosshairVisible !\u003d flag) {\n    this.domainCrosshairVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4070,
    "end_line": 4079,
    "comment": "/** \n * Sets the flag indicating whether or not the domain crosshair is visible  and, if the flag changes, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param flag  the new value of the flag.\n * @see #isDomainCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainCrosshairLockedOnData#4086",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainCrosshairLockedOnData",
    "snippet": "public boolean isDomainCrosshairLockedOnData(){\n  return this.domainCrosshairLockedOnData;\n}",
    "begin_line": 4086,
    "end_line": 4091,
    "comment": "/** \n * Returns a flag indicating whether or not the crosshair should \"lock-on\" to actual data values.\n * @return The flag.\n * @see #setDomainCrosshairLockedOnData(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairLockedOnData#4098",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairLockedOnData",
    "snippet": "public void setDomainCrosshairLockedOnData(boolean flag){\n  if (this.domainCrosshairLockedOnData !\u003d flag) {\n    this.domainCrosshairLockedOnData\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4098,
    "end_line": 4107,
    "comment": "/** \n * Sets the flag indicating whether or not the domain crosshair should \"lock-on\" to actual data values.  If the flag value changes, this method sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isDomainCrosshairLockedOnData()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairValue#4114",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairValue",
    "snippet": "public double getDomainCrosshairValue(){\n  return this.domainCrosshairValue;\n}",
    "begin_line": 4114,
    "end_line": 4118,
    "comment": "/** \n * Returns the domain crosshair value.\n * @return The value.\n * @see #setDomainCrosshairValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairValue#4125",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairValue",
    "snippet": "public void setDomainCrosshairValue(double value){\n  setDomainCrosshairValue(value,true);\n}",
    "begin_line": 4125,
    "end_line": 4130,
    "comment": "/** \n * Sets the domain crosshair value and sends a  {@link PlotChangeEvent} toall registered listeners (provided that the domain crosshair is visible).\n * @param value  the value.\n * @see #getDomainCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairValue#4138",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairValue",
    "snippet": "public void setDomainCrosshairValue(double value,boolean notify){\n  this.domainCrosshairValue\u003dvalue;\n  if (isDomainCrosshairVisible() \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4138,
    "end_line": 4147,
    "comment": "/** \n * Sets the domain crosshair value and, if requested, sends a {@link PlotChangeEvent} to all registered listeners (provided that thedomain crosshair is visible).\n * @param value  the new value.\n * @param notify  notify listeners?\n * @see #getDomainCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairStroke#4156",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairStroke",
    "snippet": "public Stroke getDomainCrosshairStroke(){\n  return this.domainCrosshairStroke;\n}",
    "begin_line": 4156,
    "end_line": 4160,
    "comment": "/** \n * Returns the  {@link Stroke} used to draw the crosshair (if visible).\n * @return The crosshair stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainCrosshairStroke(Stroke)\n * @see #isDomainCrosshairVisible()\n * @see #getDomainCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairStroke#4167",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairStroke",
    "snippet": "public void setDomainCrosshairStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainCrosshairStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 4167,
    "end_line": 4177,
    "comment": "/** \n * Sets the Stroke used to draw the crosshairs (if visible) and notifies registered listeners that the axis has been modified.\n * @param stroke  the new crosshair stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairPaint#4186",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairPaint",
    "snippet": "public Paint getDomainCrosshairPaint(){\n  return this.domainCrosshairPaint;\n}",
    "begin_line": 4186,
    "end_line": 4190,
    "comment": "/** \n * Returns the domain crosshair paint.\n * @return The crosshair paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainCrosshairPaint(Paint)\n * @see #isDomainCrosshairVisible()\n * @see #getDomainCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairPaint#4197",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairPaint",
    "snippet": "public void setDomainCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainCrosshairPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 4197,
    "end_line": 4206,
    "comment": "/** \n * Sets the paint used to draw the crosshairs (if visible) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint the new crosshair paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeCrosshairVisible#4214",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeCrosshairVisible",
    "snippet": "public boolean isRangeCrosshairVisible(){\n  return this.rangeCrosshairVisible;\n}",
    "begin_line": 4214,
    "end_line": 4218,
    "comment": "/** \n * Returns a flag indicating whether or not the range crosshair is visible.\n * @return The flag.\n * @see #setRangeCrosshairVisible(boolean)\n * @see #isDomainCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairVisible#4225",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairVisible",
    "snippet": "public void setRangeCrosshairVisible(boolean flag){\n  if (this.rangeCrosshairVisible !\u003d flag) {\n    this.rangeCrosshairVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4225,
    "end_line": 4234,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair is visible. If the flag value changes, this method sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param flag  the new value of the flag.\n * @see #isRangeCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeCrosshairLockedOnData#4241",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeCrosshairLockedOnData",
    "snippet": "public boolean isRangeCrosshairLockedOnData(){\n  return this.rangeCrosshairLockedOnData;\n}",
    "begin_line": 4241,
    "end_line": 4246,
    "comment": "/** \n * Returns a flag indicating whether or not the crosshair should \"lock-on\" to actual data values.\n * @return The flag.\n * @see #setRangeCrosshairLockedOnData(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairLockedOnData#4253",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairLockedOnData",
    "snippet": "public void setRangeCrosshairLockedOnData(boolean flag){\n  if (this.rangeCrosshairLockedOnData !\u003d flag) {\n    this.rangeCrosshairLockedOnData\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4253,
    "end_line": 4262,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair should \"lock-on\" to actual data values.  If the flag value changes, this method sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isRangeCrosshairLockedOnData()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairValue#4269",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairValue",
    "snippet": "public double getRangeCrosshairValue(){\n  return this.rangeCrosshairValue;\n}",
    "begin_line": 4269,
    "end_line": 4273,
    "comment": "/** \n * Returns the range crosshair value.\n * @return The value.\n * @see #setRangeCrosshairValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairValue#4280",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairValue",
    "snippet": "public void setRangeCrosshairValue(double value){\n  setRangeCrosshairValue(value,true);\n}",
    "begin_line": 4280,
    "end_line": 4287,
    "comment": "/** \n * Sets the range crosshair value. \u003cP\u003e Registered listeners are notified that the plot has been modified, but only if the crosshair is visible.\n * @param value  the new value.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairValue#4295",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairValue",
    "snippet": "public void setRangeCrosshairValue(double value,boolean notify){\n  this.rangeCrosshairValue\u003dvalue;\n  if (isRangeCrosshairVisible() \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4295,
    "end_line": 4304,
    "comment": "/** \n * Sets the range crosshair value and sends a  {@link PlotChangeEvent} toall registered listeners, but only if the crosshair is visible.\n * @param value  the new value.\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairStroke#4313",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairStroke",
    "snippet": "public Stroke getRangeCrosshairStroke(){\n  return this.rangeCrosshairStroke;\n}",
    "begin_line": 4313,
    "end_line": 4317,
    "comment": "/** \n * Returns the stroke used to draw the crosshair (if visible).\n * @return The crosshair stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairStroke(Stroke)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairStroke#4324",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairStroke",
    "snippet": "public void setRangeCrosshairStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeCrosshairStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 4324,
    "end_line": 4334,
    "comment": "/** \n * Sets the stroke used to draw the crosshairs (if visible) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the new crosshair stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairPaint#4343",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairPaint",
    "snippet": "public Paint getRangeCrosshairPaint(){\n  return this.rangeCrosshairPaint;\n}",
    "begin_line": 4343,
    "end_line": 4347,
    "comment": "/** \n * Returns the range crosshair paint.\n * @return The crosshair paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairPaint(Paint)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairPaint#4354",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairPaint",
    "snippet": "public void setRangeCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeCrosshairPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 4354,
    "end_line": 4363,
    "comment": "/** \n * Sets the paint used to color the crosshairs (if visible) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint the new crosshair paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedDomainAxisSpace#4370",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedDomainAxisSpace",
    "snippet": "public AxisSpace getFixedDomainAxisSpace(){\n  return this.fixedDomainAxisSpace;\n}",
    "begin_line": 4370,
    "end_line": 4374,
    "comment": "/** \n * Returns the fixed domain axis space.\n * @return The fixed domain axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedDomainAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedDomainAxisSpace#4381",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space){\n  setFixedDomainAxisSpace(space,true);\n}",
    "begin_line": 4381,
    "end_line": 4386,
    "comment": "/** \n * Sets the fixed domain axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedDomainAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedDomainAxisSpace#4395",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space,boolean notify){\n  this.fixedDomainAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4395,
    "end_line": 4404,
    "comment": "/** \n * Sets the fixed domain axis space and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedDomainAxisSpace()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedRangeAxisSpace#4411",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedRangeAxisSpace",
    "snippet": "public AxisSpace getFixedRangeAxisSpace(){\n  return this.fixedRangeAxisSpace;\n}",
    "begin_line": 4411,
    "end_line": 4415,
    "comment": "/** \n * Returns the fixed range axis space.\n * @return The fixed range axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedRangeAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedRangeAxisSpace#4422",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space){\n  setFixedRangeAxisSpace(space,true);\n}",
    "begin_line": 4422,
    "end_line": 4427,
    "comment": "/** \n * Sets the fixed range axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedRangeAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedRangeAxisSpace#4436",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space,boolean notify){\n  this.fixedRangeAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4436,
    "end_line": 4445,
    "comment": "/** \n * Sets the fixed range axis space and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedRangeAxisSpace()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#4454",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source){\n  zoomDomainAxes(factor,info,source,false);\n}",
    "begin_line": 4454,
    "end_line": 4460,
    "comment": "/** \n * Multiplies the range on the domain axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point (in Java2D space).\n * @see #zoomRangeAxes(double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#4471",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis domainAxis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (domainAxis !\u003d null) {\n      if (useAnchor) {\n        double sourceX\u003dsource.getX();\n        if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n          sourceX\u003dsource.getY();\n        }\n        double anchorX\u003ddomainAxis.java2DToValue(sourceX,info.getDataArea(),getDomainAxisEdge());\n        domainAxis.resizeRange(factor,anchorX);\n      }\n else {\n        domainAxis.resizeRange(factor);\n      }\n    }\n  }\n}",
    "begin_line": 4471,
    "end_line": 4497,
    "comment": "/** \n * Multiplies the range on the domain axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point (in Java2D space).\n * @param useAnchor  use source point as zoom anchor?\n * @see #zoomRangeAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#4507",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes",
    "snippet": "public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis domainAxis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (domainAxis !\u003d null) {\n      domainAxis.zoomRange(lowerPercent,upperPercent);\n    }\n  }\n}",
    "begin_line": 4507,
    "end_line": 4521,
    "comment": "/** \n * Zooms in on the domain axis/axes.  The new lower and upper bounds are specified as percentages of the current axis range, where 0 percent is the current lower bound and 100 percent is the current upper bound.\n * @param lowerPercent  a percentage that determines the new lower boundfor the axis (e.g. 0.20 is twenty percent).\n * @param upperPercent  a percentage that determines the new upper boundfor the axis (e.g. 0.80 is eighty percent).\n * @param info  the plot rendering info.\n * @param source  the source point (ignored).\n * @see #zoomRangeAxes(double,double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#4530",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){\n  zoomRangeAxes(factor,info,source,false);\n}",
    "begin_line": 4530,
    "end_line": 4536,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @see #zoomDomainAxes(double,PlotRenderingInfo,Point2D,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#4547",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      if (useAnchor) {\n        double sourceY\u003dsource.getY();\n        if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n          sourceY\u003dsource.getX();\n        }\n        double anchorY\u003drangeAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());\n        rangeAxis.resizeRange(factor,anchorY);\n      }\n else {\n        rangeAxis.resizeRange(factor);\n      }\n    }\n  }\n}",
    "begin_line": 4547,
    "end_line": 4574,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @param useAnchor  a flag that controls whether or not the source pointis used for the zoom anchor.\n * @see #zoomDomainAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#4584",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes",
    "snippet": "public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      rangeAxis.zoomRange(lowerPercent,upperPercent);\n    }\n  }\n}",
    "begin_line": 4584,
    "end_line": 4594,
    "comment": "/** \n * Zooms in on the range axes.\n * @param lowerPercent  the lower bound.\n * @param upperPercent  the upper bound.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @see #zoomDomainAxes(double,double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainZoomable#4601",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainZoomable",
    "snippet": "public boolean isDomainZoomable(){\n  return true;\n}",
    "begin_line": 4601,
    "end_line": 4606,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e, indicating that the domain axis/axes for this plot are zoomable.\n * @return A boolean.\n * @see #isRangeZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeZoomable#4613",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeZoomable",
    "snippet": "public boolean isRangeZoomable(){\n  return true;\n}",
    "begin_line": 4613,
    "end_line": 4618,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e, indicating that the range axis/axes for this plot are zoomable.\n * @return A boolean.\n * @see #isDomainZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getSeriesCount#4624",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getSeriesCount",
    "snippet": "public int getSeriesCount(){\n  int result\u003d0;\n  XYDataset dataset\u003dgetDataset();\n  if (dataset !\u003d null) {\n    result\u003ddataset.getSeriesCount();\n  }\n  return result;\n}",
    "begin_line": 4624,
    "end_line": 4633,
    "comment": "/** \n * Returns the number of series in the primary dataset for this plot.  If the dataset is \u003ccode\u003enull\u003c/code\u003e, the method returns 0.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedLegendItems#4640",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedLegendItems",
    "snippet": "public LegendItemCollection getFixedLegendItems(){\n  return this.fixedLegendItems;\n}",
    "begin_line": 4640,
    "end_line": 4644,
    "comment": "/** \n * Returns the fixed legend items, if any.\n * @return The legend items (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedLegendItems(LegendItemCollection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedLegendItems#4651",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedLegendItems",
    "snippet": "public void setFixedLegendItems(LegendItemCollection items){\n  this.fixedLegendItems\u003ditems;\n  fireChangeEvent();\n}",
    "begin_line": 4651,
    "end_line": 4658,
    "comment": "/** \n * Sets the fixed legend items for the plot.  Leave this set to \u003ccode\u003enull\u003c/code\u003e if you prefer the legend items to be created automatically.\n * @param items  the legend items (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedLegendItems()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getLegendItems#4664",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getLegendItems",
    "snippet": "public LegendItemCollection getLegendItems(){\n  if (this.fixedLegendItems !\u003d null) {\n    return this.fixedLegendItems;\n  }\n  LegendItemCollection result\u003dnew LegendItemCollection();\n  int count\u003dthis.datasets.size();\n  for (int datasetIndex\u003d0; datasetIndex \u003c count; datasetIndex++) {\n    XYDataset dataset\u003dgetDataset(datasetIndex);\n    if (dataset !\u003d null) {\n      XYItemRenderer renderer\u003dgetRenderer(datasetIndex);\n      if (renderer \u003d\u003d null) {\n        renderer\u003dgetRenderer(0);\n      }\n      if (renderer !\u003d null) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int i\u003d0; i \u003c seriesCount; i++) {\n          if (renderer.isSeriesVisible(i) \u0026\u0026 renderer.isSeriesVisibleInLegend(i)) {\n            LegendItem item\u003drenderer.getLegendItem(datasetIndex,i);\n            if (item !\u003d null) {\n              result.add(item);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 4664,
    "end_line": 4696,
    "comment": "/** \n * Returns the legend items for the plot.  Each legend item is generated by the plot\u0027s renderer, since the renderer is responsible for the visual representation of the data.\n * @return The legend items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.equals#4703",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYPlot)) {\n    return false;\n  }\n  XYPlot that\u003d(XYPlot)obj;\n  if (this.weight !\u003d that.weight) {\n    return false;\n  }\n  if (this.orientation !\u003d that.orientation) {\n    return false;\n  }\n  if (!this.domainAxes.equals(that.domainAxes)) {\n    return false;\n  }\n  if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n    return false;\n  }\n  if (this.rangeCrosshairLockedOnData !\u003d that.rangeCrosshairLockedOnData) {\n    return false;\n  }\n  if (this.domainGridlinesVisible !\u003d that.domainGridlinesVisible) {\n    return false;\n  }\n  if (this.rangeGridlinesVisible !\u003d that.rangeGridlinesVisible) {\n    return false;\n  }\n  if (this.domainZeroBaselineVisible !\u003d that.domainZeroBaselineVisible) {\n    return false;\n  }\n  if (this.rangeZeroBaselineVisible !\u003d that.rangeZeroBaselineVisible) {\n    return false;\n  }\n  if (this.domainCrosshairVisible !\u003d that.domainCrosshairVisible) {\n    return false;\n  }\n  if (this.domainCrosshairValue !\u003d that.domainCrosshairValue) {\n    return false;\n  }\n  if (this.domainCrosshairLockedOnData !\u003d that.domainCrosshairLockedOnData) {\n    return false;\n  }\n  if (this.rangeCrosshairVisible !\u003d that.rangeCrosshairVisible) {\n    return false;\n  }\n  if (this.rangeCrosshairValue !\u003d that.rangeCrosshairValue) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.axisOffset,that.axisOffset)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.renderers,that.renderers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeAxes,that.rangeAxes)) {\n    return false;\n  }\n  if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToDomainAxisMap,that.datasetToDomainAxisMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToRangeAxisMap,that.datasetToRangeAxisMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainGridlineStroke,that.domainGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeGridlineStroke,that.rangeGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainZeroBaselinePaint,that.domainZeroBaselinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,that.domainZeroBaselineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,that.rangeZeroBaselinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,that.rangeZeroBaselineStroke)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainCrosshairStroke,that.domainCrosshairStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainCrosshairPaint,that.domainCrosshairPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeCrosshairStroke,that.rangeCrosshairStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeCrosshairPaint,that.rangeCrosshairPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.annotations,that.annotations)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainTickBandPaint,that.domainTickBandPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeTickBandPaint,that.rangeTickBandPaint)) {\n    return false;\n  }\n  if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c 4; i++) {\n    if (!PaintUtilities.equal(this.quadrantPaint[i],that.quadrantPaint[i])) {\n      return false;\n    }\n  }\n  return super.equals(obj);\n}",
    "begin_line": 4703,
    "end_line": 4880,
    "comment": "/** \n * Tests this plot for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clone#4883",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYPlot clone\u003d(XYPlot)super.clone();\n  clone.domainAxes\u003d(ObjectList)ObjectUtilities.clone(this.domainAxes);\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      ValueAxis clonedAxis\u003d(ValueAxis)axis.clone();\n      clone.domainAxes.set(i,clonedAxis);\n      clonedAxis.setPlot(clone);\n      clonedAxis.addChangeListener(clone);\n    }\n  }\n  clone.domainAxisLocations\u003d(ObjectList)this.domainAxisLocations.clone();\n  clone.rangeAxes\u003d(ObjectList)ObjectUtilities.clone(this.rangeAxes);\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      ValueAxis clonedAxis\u003d(ValueAxis)axis.clone();\n      clone.rangeAxes.set(i,clonedAxis);\n      clonedAxis.setPlot(clone);\n      clonedAxis.addChangeListener(clone);\n    }\n  }\n  clone.rangeAxisLocations\u003d(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);\n  clone.datasets\u003d(ObjectList)ObjectUtilities.clone(this.datasets);\n  for (int i\u003d0; i \u003c clone.datasets.size(); ++i) {\n    XYDataset d\u003dgetDataset(i);\n    if (d !\u003d null) {\n      d.addChangeListener(clone);\n    }\n  }\n  clone.datasetToDomainAxisMap\u003dnew TreeMap();\n  clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap);\n  clone.datasetToRangeAxisMap\u003dnew TreeMap();\n  clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap);\n  clone.renderers\u003d(ObjectList)ObjectUtilities.clone(this.renderers);\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    XYItemRenderer renderer2\u003d(XYItemRenderer)this.renderers.get(i);\n    if (renderer2 instanceof PublicCloneable) {\n      PublicCloneable pc\u003d(PublicCloneable)renderer2;\n      clone.renderers.set(i,pc.clone());\n    }\n  }\n  clone.foregroundDomainMarkers\u003d(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);\n  clone.backgroundDomainMarkers\u003d(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);\n  clone.foregroundRangeMarkers\u003d(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);\n  clone.backgroundRangeMarkers\u003d(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);\n  clone.annotations\u003d(List)ObjectUtilities.deepClone(this.annotations);\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    clone.fixedDomainAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    clone.fixedRangeAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);\n  }\n  clone.quadrantOrigin\u003d(Point2D)ObjectUtilities.clone(this.quadrantOrigin);\n  clone.quadrantPaint\u003d(Paint[])this.quadrantPaint.clone();\n  return clone;\n}",
    "begin_line": 4883,
    "end_line": 4964,
    "comment": "/** \n * Returns a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException  this can occur if some component ofthe plot cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.writeObject#4971",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);\n  SerialUtilities.writePaint(this.domainGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);\n  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeZeroBaselineStroke,stream);\n  SerialUtilities.writePaint(this.rangeZeroBaselinePaint,stream);\n  SerialUtilities.writeStroke(this.domainCrosshairStroke,stream);\n  SerialUtilities.writePaint(this.domainCrosshairPaint,stream);\n  SerialUtilities.writeStroke(this.rangeCrosshairStroke,stream);\n  SerialUtilities.writePaint(this.rangeCrosshairPaint,stream);\n  SerialUtilities.writePaint(this.domainTickBandPaint,stream);\n  SerialUtilities.writePaint(this.rangeTickBandPaint,stream);\n  SerialUtilities.writePoint2D(this.quadrantOrigin,stream);\n  for (int i\u003d0; i \u003c 4; i++) {\n    SerialUtilities.writePaint(this.quadrantPaint[i],stream);\n  }\n  SerialUtilities.writeStroke(this.domainZeroBaselineStroke,stream);\n  SerialUtilities.writePaint(this.domainZeroBaselinePaint,stream);\n}",
    "begin_line": 4971,
    "end_line": 4993,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.readObject#5001",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.domainGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeZeroBaselineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeZeroBaselinePaint\u003dSerialUtilities.readPaint(stream);\n  this.domainCrosshairStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainCrosshairPaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeCrosshairStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeCrosshairPaint\u003dSerialUtilities.readPaint(stream);\n  this.domainTickBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeTickBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.quadrantOrigin\u003dSerialUtilities.readPoint2D(stream);\n  this.quadrantPaint\u003dnew Paint[4];\n  for (int i\u003d0; i \u003c 4; i++) {\n    this.quadrantPaint[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  this.domainZeroBaselineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainZeroBaselinePaint\u003dSerialUtilities.readPaint(stream);\n  int domainAxisCount\u003dthis.domainAxes.size();\n  for (int i\u003d0; i \u003c domainAxisCount; i++) {\n    Axis axis\u003d(Axis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.setPlot(this);\n      axis.addChangeListener(this);\n    }\n  }\n  int rangeAxisCount\u003dthis.rangeAxes.size();\n  for (int i\u003d0; i \u003c rangeAxisCount; i++) {\n    Axis axis\u003d(Axis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.setPlot(this);\n      axis.addChangeListener(this);\n    }\n  }\n  int datasetCount\u003dthis.datasets.size();\n  for (int i\u003d0; i \u003c datasetCount; i++) {\n    Dataset dataset\u003d(Dataset)this.datasets.get(i);\n    if (dataset !\u003d null) {\n      dataset.addChangeListener(this);\n    }\n  }\n  int rendererCount\u003dthis.renderers.size();\n  for (int i\u003d0; i \u003c rendererCount; i++) {\n    XYItemRenderer renderer\u003d(XYItemRenderer)this.renderers.get(i);\n    if (renderer !\u003d null) {\n      renderer.addChangeListener(this);\n    }\n  }\n}",
    "begin_line": 5001,
    "end_line": 5061,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.TextAnchor#123",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.TextAnchor",
    "snippet": "private TextAnchor(String name){\n  this.name\u003dname;\n}",
    "begin_line": 123,
    "end_line": 126,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.toString#132",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 132,
    "end_line": 135,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.equals#142",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof TextAnchor)) {\n    return false;\n  }\n  TextAnchor order\u003d(TextAnchor)obj;\n  if (!this.name.equals(order.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 142,
    "end_line": 160,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.hashCode#166",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 166,
    "end_line": 169,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.readResolve#176",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  TextAnchor result\u003dnull;\n  if (this.equals(TextAnchor.TOP_LEFT)) {\n    result\u003dTextAnchor.TOP_LEFT;\n  }\n else   if (this.equals(TextAnchor.TOP_CENTER)) {\n    result\u003dTextAnchor.TOP_CENTER;\n  }\n else   if (this.equals(TextAnchor.TOP_RIGHT)) {\n    result\u003dTextAnchor.TOP_RIGHT;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_LEFT)) {\n    result\u003dTextAnchor.BOTTOM_LEFT;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_CENTER)) {\n    result\u003dTextAnchor.BOTTOM_CENTER;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_RIGHT)) {\n    result\u003dTextAnchor.BOTTOM_RIGHT;\n  }\n else   if (this.equals(TextAnchor.BASELINE_LEFT)) {\n    result\u003dTextAnchor.BASELINE_LEFT;\n  }\n else   if (this.equals(TextAnchor.BASELINE_CENTER)) {\n    result\u003dTextAnchor.BASELINE_CENTER;\n  }\n else   if (this.equals(TextAnchor.BASELINE_RIGHT)) {\n    result\u003dTextAnchor.BASELINE_RIGHT;\n  }\n else   if (this.equals(TextAnchor.CENTER_LEFT)) {\n    result\u003dTextAnchor.CENTER_LEFT;\n  }\n else   if (this.equals(TextAnchor.CENTER)) {\n    result\u003dTextAnchor.CENTER;\n  }\n else   if (this.equals(TextAnchor.CENTER_RIGHT)) {\n    result\u003dTextAnchor.CENTER_RIGHT;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_LEFT)) {\n    result\u003dTextAnchor.HALF_ASCENT_LEFT;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_CENTER)) {\n    result\u003dTextAnchor.HALF_ASCENT_CENTER;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_RIGHT)) {\n    result\u003dTextAnchor.HALF_ASCENT_RIGHT;\n  }\n  return result;\n}",
    "begin_line": 176,
    "end_line": 226,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#76",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList",
    "snippet": "protected AbstractObjectList(){\n  this(DEFAULT_INITIAL_CAPACITY);\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Creates a new list with the default initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#84",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList",
    "snippet": "protected AbstractObjectList(int initialCapacity){\n  this(initialCapacity,initialCapacity);\n}",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#94",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList",
    "snippet": "protected AbstractObjectList(int initialCapacity,int increment){\n  this.objects\u003dnew Object[initialCapacity];\n  this.increment\u003dincrement;\n}",
    "begin_line": 94,
    "end_line": 98,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n * @param increment  the increment.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.get#105",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.get",
    "snippet": "protected Object get(int index){\n  Object result\u003dnull;\n  if (index \u003e\u003d 0 \u0026\u0026 index \u003c this.size) {\n    result\u003dthis.objects[index];\n  }\n  return result;\n}",
    "begin_line": 105,
    "end_line": 114,
    "comment": "/** \n * Returns the object at the specified index, if there is one, or  \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the object index.\n * @return The object or \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.set#121",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.set",
    "snippet": "protected void set(int index,Object object){\n  if (index \u003c 0) {\n    throw new IllegalArgumentException(\"Requires index \u003e\u003d 0.\");\n  }\n  if (index \u003e\u003d this.objects.length) {\n    Object[] enlarged\u003dnew Object[index + this.increment];\n    System.arraycopy(this.objects,0,enlarged,0,this.objects.length);\n    this.objects\u003denlarged;\n  }\n  this.objects[index]\u003dobject;\n  this.size\u003dMath.max(this.size,index + 1);\n}",
    "begin_line": 121,
    "end_line": 133,
    "comment": "/** \n * Sets an object reference (overwriting any existing object).\n * @param index  the object index.\n * @param object  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.clear#138",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.clear",
    "snippet": "public void clear(){\n  Arrays.fill(this.objects,null);\n  this.size\u003d0;\n}",
    "begin_line": 138,
    "end_line": 141,
    "comment": "/** \n * Clears the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.size#144",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.size",
    "snippet": "public int size(){\n  return this.size;\n}",
    "begin_line": 144,
    "end_line": 150,
    "comment": "/** \n * Returns the size of the list.\n * @return The size of the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.indexOf#157",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.indexOf",
    "snippet": "protected int indexOf(Object object){\n  for (int index\u003d0; index \u003c this.size; index++) {\n    if (this.objects[index] \u003d\u003d object) {\n      return (index);\n    }\n  }\n  return -1;\n}",
    "begin_line": 157,
    "end_line": 167,
    "comment": "/** \n * Returns the index of the specified object, or -1 if the object is not in the list.\n * @param object  the object.\n * @return The index or -1.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.equals#174",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractObjectList)) {\n    return false;\n  }\n  AbstractObjectList other\u003d(AbstractObjectList)obj;\n  int listSize\u003dsize();\n  for (int i\u003d0; i \u003c listSize; i++) {\n    if (!ObjectUtilities.equal(get(i),other.get(i))) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 174,
    "end_line": 198,
    "comment": "/** \n * Tests this list for equality with another object.\n * @param obj  the object to test.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.hashCode#204",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.hashCode",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  int size\u003dsize();\n  result\u003dHashUtilities.hashCode(result,size());\n  if (size \u003e 0) {\n    result\u003dHashUtilities.hashCode(result,this.objects[0]);\n    if (size \u003e 1) {\n      result\u003dHashUtilities.hashCode(result,this.objects[size - 1]);\n      if (size \u003e 2) {\n        result\u003dHashUtilities.hashCode(result,this.objects[size / 2]);\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 204,
    "end_line": 222,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.clone#225",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractObjectList clone\u003d(AbstractObjectList)super.clone();\n  if (this.objects !\u003d null) {\n    clone.objects\u003dnew Object[this.objects.length];\n    System.arraycopy(this.objects,0,clone.objects,0,this.objects.length);\n  }\n  return clone;\n}",
    "begin_line": 225,
    "end_line": 243,
    "comment": "/** \n * Clones the list of objects.  The objects in the list are not cloned, so  this is method makes a \u0027shallow\u0027 copy of the list.\n * @return A clone.\n * @throws CloneNotSupportedException if an item in the list does not support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.writeObject#250",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int count\u003dsize();\n  stream.writeInt(count);\n  for (int i\u003d0; i \u003c count; i++) {\n    final Object object\u003dget(i);\n    if (object !\u003d null \u0026\u0026 object instanceof Serializable) {\n      stream.writeInt(i);\n      stream.writeObject(object);\n    }\n else {\n      stream.writeInt(-1);\n    }\n  }\n}",
    "begin_line": 250,
    "end_line": 269,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.readObject#277",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.objects\u003dnew Object[this.size];\n  int count\u003dstream.readInt();\n  for (int i\u003d0; i \u003c count; i++) {\n    int index\u003dstream.readInt();\n    if (index !\u003d -1) {\n      set(index,stream.readObject());\n    }\n  }\n}",
    "begin_line": 277,
    "end_line": 292,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Layer.Layer#68",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/Layer.java",
    "class_name": "org.jfree.chart.util.Layer",
    "signature": "org.jfree.chart.util.Layer.Layer",
    "snippet": "private Layer(String name){\n  this.name\u003dname;\n}",
    "begin_line": 68,
    "end_line": 71,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Layer.toString#77",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/Layer.java",
    "class_name": "org.jfree.chart.util.Layer",
    "signature": "org.jfree.chart.util.Layer.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 77,
    "end_line": 80,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Layer.equals#87",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/Layer.java",
    "class_name": "org.jfree.chart.util.Layer",
    "signature": "org.jfree.chart.util.Layer.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof Layer)) {\n    return false;\n  }\n  Layer layer\u003d(Layer)obj;\n  if (!this.name.equals(layer.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 87,
    "end_line": 106,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Layer.hashCode#112",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/Layer.java",
    "class_name": "org.jfree.chart.util.Layer",
    "signature": "org.jfree.chart.util.Layer.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 112,
    "end_line": 115,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Layer.readResolve#122",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/Layer.java",
    "class_name": "org.jfree.chart.util.Layer",
    "signature": "org.jfree.chart.util.Layer.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  Layer result\u003dnull;\n  if (this.equals(Layer.FOREGROUND)) {\n    result\u003dLayer.FOREGROUND;\n  }\n else   if (this.equals(Layer.BACKGROUND)) {\n    result\u003dLayer.BACKGROUND;\n  }\n  return result;\n}",
    "begin_line": 122,
    "end_line": 133,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LengthAdjustmentType.LengthAdjustmentType#75",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
    "class_name": "org.jfree.chart.util.LengthAdjustmentType",
    "signature": "org.jfree.chart.util.LengthAdjustmentType.LengthAdjustmentType",
    "snippet": "private LengthAdjustmentType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 75,
    "end_line": 78,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LengthAdjustmentType.toString#84",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
    "class_name": "org.jfree.chart.util.LengthAdjustmentType",
    "signature": "org.jfree.chart.util.LengthAdjustmentType.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LengthAdjustmentType.equals#94",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
    "class_name": "org.jfree.chart.util.LengthAdjustmentType",
    "signature": "org.jfree.chart.util.LengthAdjustmentType.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof LengthAdjustmentType)) {\n    return false;\n  }\n  final LengthAdjustmentType that\u003d(LengthAdjustmentType)obj;\n  if (!this.name.equals(that.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 94,
    "end_line": 109,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LengthAdjustmentType.hashCode#115",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
    "class_name": "org.jfree.chart.util.LengthAdjustmentType",
    "signature": "org.jfree.chart.util.LengthAdjustmentType.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 115,
    "end_line": 118,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LengthAdjustmentType.readResolve#125",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
    "class_name": "org.jfree.chart.util.LengthAdjustmentType",
    "signature": "org.jfree.chart.util.LengthAdjustmentType.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(LengthAdjustmentType.NO_CHANGE)) {\n    return LengthAdjustmentType.NO_CHANGE;\n  }\n else   if (this.equals(LengthAdjustmentType.EXPAND)) {\n    return LengthAdjustmentType.EXPAND;\n  }\n else   if (this.equals(LengthAdjustmentType.CONTRACT)) {\n    return LengthAdjustmentType.CONTRACT;\n  }\n  return null;\n}",
    "begin_line": 125,
    "end_line": 138,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.ObjectList#58",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.ObjectList",
    "snippet": "public ObjectList(){\n}",
    "begin_line": 58,
    "end_line": 59,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.ObjectList#65",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.ObjectList",
    "snippet": "public ObjectList(int initialCapacity){\n  super(initialCapacity);\n}",
    "begin_line": 65,
    "end_line": 68,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.get#81",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.get",
    "snippet": "public Object get(int index){\n  return super.get(index);\n}",
    "begin_line": 81,
    "end_line": 86,
    "comment": "/** \n * Returns the object at the specified index, if there is one, or  \u003ccode\u003enull\u003c/code\u003e.         \n * @param index  the object index.   \n * @return The object or \u003ccode\u003enull\u003c/code\u003e.          \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.set#93",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.set",
    "snippet": "public void set(int index,Object object){\n  super.set(index,object);\n}",
    "begin_line": 93,
    "end_line": 96,
    "comment": "/** \n * Sets an object reference (overwriting any existing object).       \n * @param index  the object index.   \n * @param object  the object (\u003ccode\u003enull\u003c/code\u003e permitted).          \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.indexOf#103",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.indexOf",
    "snippet": "public int indexOf(Object object){\n  return super.indexOf(object);\n}",
    "begin_line": 103,
    "end_line": 108,
    "comment": "/** \n * Returns the index of the specified object, or -1 if the object is not  in the list.        \n * @param object  the object.        \n * @return The index or -1.          \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.RectangleAnchor#105",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor",
    "snippet": "private RectangleAnchor(final String name){\n  this.name\u003dname;\n}",
    "begin_line": 105,
    "end_line": 108,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.toString#114",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 114,
    "end_line": 117,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.equals#124",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.equals",
    "snippet": "public boolean equals(final Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof RectangleAnchor)) {\n    return false;\n  }\n  final RectangleAnchor order\u003d(RectangleAnchor)obj;\n  if (!this.name.equals(order.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 124,
    "end_line": 142,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.hashCode#148",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 148,
    "end_line": 151,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.coordinates#154",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.coordinates",
    "snippet": "public static Point2D coordinates(final Rectangle2D rectangle,final RectangleAnchor anchor){\n  Point2D result\u003dnew Point2D.Double();\n  if (anchor \u003d\u003d RectangleAnchor.CENTER) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getMaxY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getMaxY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getMaxY());\n  }\n  return result;\n}",
    "begin_line": 154,
    "end_line": 192,
    "comment": "/** \n * Returns the (x, y) coordinates of the specified anchor.\n * @param rectangle  the rectangle.\n * @param anchor  the anchor.\n * @return The (x, y) coordinates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.createRectangle#202",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.createRectangle",
    "snippet": "public static Rectangle2D createRectangle(final Size2D dimensions,final double anchorX,final double anchorY,final RectangleAnchor anchor){\n  Rectangle2D result\u003dnull;\n  final double w\u003ddimensions.getWidth();\n  final double h\u003ddimensions.getHeight();\n  if (anchor \u003d\u003d RectangleAnchor.CENTER) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n  return result;\n}",
    "begin_line": 202,
    "end_line": 258,
    "comment": "/** \n * Creates a new rectangle with the specified dimensions that is aligned to the given anchor point \u003ccode\u003e(anchorX, anchorY)\u003c/code\u003e.\n * @param dimensions  the dimensions (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param anchorX  the x-anchor.\n * @param anchorY  the y-anchor.\n * @param anchor  the anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.readResolve#265",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  RectangleAnchor result\u003dnull;\n  if (this.equals(RectangleAnchor.CENTER)) {\n    result\u003dRectangleAnchor.CENTER;\n  }\n else   if (this.equals(RectangleAnchor.TOP)) {\n    result\u003dRectangleAnchor.TOP;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM)) {\n    result\u003dRectangleAnchor.BOTTOM;\n  }\n else   if (this.equals(RectangleAnchor.LEFT)) {\n    result\u003dRectangleAnchor.LEFT;\n  }\n else   if (this.equals(RectangleAnchor.RIGHT)) {\n    result\u003dRectangleAnchor.RIGHT;\n  }\n else   if (this.equals(RectangleAnchor.TOP_LEFT)) {\n    result\u003dRectangleAnchor.TOP_LEFT;\n  }\n else   if (this.equals(RectangleAnchor.TOP_RIGHT)) {\n    result\u003dRectangleAnchor.TOP_RIGHT;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM_LEFT)) {\n    result\u003dRectangleAnchor.BOTTOM_LEFT;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM_RIGHT)) {\n    result\u003dRectangleAnchor.BOTTOM_RIGHT;\n  }\n  return result;\n}",
    "begin_line": 265,
    "end_line": 297,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#87",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets",
    "snippet": "public RectangleInsets(){\n  this(1.0,1.0,1.0,1.0);\n}",
    "begin_line": 87,
    "end_line": 90,
    "comment": "/** \n * Creates a new instance with all insets initialised to \u003ccode\u003e1.0\u003c/code\u003e.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#99",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets",
    "snippet": "public RectangleInsets(double top,double left,double bottom,double right){\n  this(UnitType.ABSOLUTE,top,left,bottom,right);\n}",
    "begin_line": 99,
    "end_line": 103,
    "comment": "/** \n * Creates a new instance with the specified insets (as \u0027absolute\u0027 units).\n * @param top  the top insets.\n * @param left  the left insets.\n * @param bottom  the bottom insets.\n * @param right  the right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#113",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets",
    "snippet": "public RectangleInsets(UnitType unitType,double top,double left,double bottom,double right){\n  if (unitType \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027unitType\u0027 argument.\");\n  }\n  this.unitType\u003dunitType;\n  this.top\u003dtop;\n  this.bottom\u003dbottom;\n  this.left\u003dleft;\n  this.right\u003dright;\n}",
    "begin_line": 113,
    "end_line": 125,
    "comment": "/** \n * Creates a new instance.\n * @param unitType  absolute or relative units (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param top  the top insets.\n * @param left  the left insets.\n * @param bottom  the bottom insets.\n * @param right  the right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getUnitType#131",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getUnitType",
    "snippet": "public UnitType getUnitType(){\n  return this.unitType;\n}",
    "begin_line": 131,
    "end_line": 135,
    "comment": "/** \n * Returns the unit type (absolute or relative).  This specifies whether  the insets are measured as Java2D units or percentages.\n * @return The unit type (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getTop#141",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getTop",
    "snippet": "public double getTop(){\n  return this.top;\n}",
    "begin_line": 141,
    "end_line": 144,
    "comment": "/** \n * Returns the top insets.\n * @return The top insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getBottom#150",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getBottom",
    "snippet": "public double getBottom(){\n  return this.bottom;\n}",
    "begin_line": 150,
    "end_line": 153,
    "comment": "/** \n * Returns the bottom insets.\n * @return The bottom insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getLeft#159",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getLeft",
    "snippet": "public double getLeft(){\n  return this.left;\n}",
    "begin_line": 159,
    "end_line": 162,
    "comment": "/** \n * Returns the left insets.\n * @return The left insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getRight#168",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getRight",
    "snippet": "public double getRight(){\n  return this.right;\n}",
    "begin_line": 168,
    "end_line": 171,
    "comment": "/** \n * Returns the right insets.\n * @return The right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.equals#178",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof RectangleInsets)) {\n    return false;\n  }\n  final RectangleInsets that\u003d(RectangleInsets)obj;\n  if (that.unitType !\u003d this.unitType) {\n    return false;\n  }\n  if (this.left !\u003d that.left) {\n    return false;\n  }\n  if (this.right !\u003d that.right) {\n    return false;\n  }\n  if (this.top !\u003d that.top) {\n    return false;\n  }\n  if (this.bottom !\u003d that.bottom) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 178,
    "end_line": 204,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.hashCode#210",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.hashCode",
    "snippet": "public int hashCode(){\n  int result;\n  long temp;\n  result\u003d(this.unitType !\u003d null ? this.unitType.hashCode() : 0);\n  temp\u003dthis.top !\u003d +0.0d ? Double.doubleToLongBits(this.top) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.bottom !\u003d +0.0d ? Double.doubleToLongBits(this.bottom) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.left !\u003d +0.0d ? Double.doubleToLongBits(this.left) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.right !\u003d +0.0d ? Double.doubleToLongBits(this.right) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  return result;\n}",
    "begin_line": 210,
    "end_line": 224,
    "comment": "/** \n * Returns a hash code for the object.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.toString#230",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.toString",
    "snippet": "public String toString(){\n  return \"RectangleInsets[t\u003d\" + this.top + \",l\u003d\"+ this.left+ \",b\u003d\"+ this.bottom+ \",r\u003d\"+ this.right+ \"]\";\n}",
    "begin_line": 230,
    "end_line": 235,
    "comment": "/** \n * Returns a textual representation of this instance, useful for debugging purposes.\n * @return A string representing this instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createAdjustedRectangle#244",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createAdjustedRectangle",
    "snippet": "public Rectangle2D createAdjustedRectangle(Rectangle2D base,LengthAdjustmentType horizontal,LengthAdjustmentType vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double x\u003dbase.getX();\n  double y\u003dbase.getY();\n  double w\u003dbase.getWidth();\n  double h\u003dbase.getHeight();\n  if (horizontal \u003d\u003d LengthAdjustmentType.EXPAND) {\n    double leftOutset\u003dcalculateLeftOutset(w);\n    x\u003dx - leftOutset;\n    w\u003dw + leftOutset + calculateRightOutset(w);\n  }\n else   if (horizontal \u003d\u003d LengthAdjustmentType.CONTRACT) {\n    double leftMargin\u003dcalculateLeftInset(w);\n    x\u003dx + leftMargin;\n    w\u003dw - leftMargin - calculateRightInset(w);\n  }\n  if (vertical \u003d\u003d LengthAdjustmentType.EXPAND) {\n    double topMargin\u003dcalculateTopOutset(h);\n    y\u003dy - topMargin;\n    h\u003dh + topMargin + calculateBottomOutset(h);\n  }\n else   if (vertical \u003d\u003d LengthAdjustmentType.CONTRACT) {\n    double topMargin\u003dcalculateTopInset(h);\n    y\u003dy + topMargin;\n    h\u003dh - topMargin - calculateBottomInset(h);\n  }\n  return new Rectangle2D.Double(x,y,w,h);\n}",
    "begin_line": 244,
    "end_line": 280,
    "comment": "/** \n * Creates an adjusted rectangle using the supplied rectangle, the insets specified by this instance, and the horizontal and vertical  adjustment types.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  the horizontal adjustment type (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param vertical  the vertical adjustment type (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createInsetRectangle#287",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createInsetRectangle",
    "snippet": "public Rectangle2D createInsetRectangle(Rectangle2D base){\n  return createInsetRectangle(base,true,true);\n}",
    "begin_line": 287,
    "end_line": 291,
    "comment": "/** \n * Creates an \u0027inset\u0027 rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createInsetRectangle#300",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createInsetRectangle",
    "snippet": "public Rectangle2D createInsetRectangle(Rectangle2D base,boolean horizontal,boolean vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double topMargin\u003d0.0;\n  double bottomMargin\u003d0.0;\n  if (vertical) {\n    topMargin\u003dcalculateTopInset(base.getHeight());\n    bottomMargin\u003dcalculateBottomInset(base.getHeight());\n  }\n  double leftMargin\u003d0.0;\n  double rightMargin\u003d0.0;\n  if (horizontal) {\n    leftMargin\u003dcalculateLeftInset(base.getWidth());\n    rightMargin\u003dcalculateRightInset(base.getWidth());\n  }\n  return new Rectangle2D.Double(base.getX() + leftMargin,base.getY() + topMargin,base.getWidth() - leftMargin - rightMargin,base.getHeight() - topMargin - bottomMargin);\n}",
    "begin_line": 300,
    "end_line": 325,
    "comment": "/** \n * Creates an \u0027inset\u0027 rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  apply horizontal insets?\n * @param vertical  apply vertical insets?\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createOutsetRectangle#332",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle",
    "snippet": "public Rectangle2D createOutsetRectangle(Rectangle2D base){\n  return createOutsetRectangle(base,true,true);\n}",
    "begin_line": 332,
    "end_line": 336,
    "comment": "/** \n * Creates an outset rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return An outset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createOutsetRectangle#345",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle",
    "snippet": "public Rectangle2D createOutsetRectangle(Rectangle2D base,boolean horizontal,boolean vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double topMargin\u003d0.0;\n  double bottomMargin\u003d0.0;\n  if (vertical) {\n    topMargin\u003dcalculateTopOutset(base.getHeight());\n    bottomMargin\u003dcalculateBottomOutset(base.getHeight());\n  }\n  double leftMargin\u003d0.0;\n  double rightMargin\u003d0.0;\n  if (horizontal) {\n    leftMargin\u003dcalculateLeftOutset(base.getWidth());\n    rightMargin\u003dcalculateRightOutset(base.getWidth());\n  }\n  return new Rectangle2D.Double(base.getX() - leftMargin,base.getY() - topMargin,base.getWidth() + leftMargin + rightMargin,base.getHeight() + topMargin + bottomMargin);\n}",
    "begin_line": 345,
    "end_line": 371,
    "comment": "/** \n * Creates an outset rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  apply horizontal insets?\n * @param vertical  apply vertical insets? \n * @return An outset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateTopInset#378",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset",
    "snippet": "public double calculateTopInset(double height){\n  double result\u003dthis.top;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.top * height);\n  }\n  return result;\n}",
    "begin_line": 378,
    "end_line": 386,
    "comment": "/** \n * Returns the top margin.\n * @param height  the height of the base rectangle.\n * @return The top margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateTopOutset#393",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset",
    "snippet": "public double calculateTopOutset(double height){\n  double result\u003dthis.top;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(height / (1 - this.top - this.bottom)) * this.top;\n  }\n  return result;\n}",
    "begin_line": 393,
    "end_line": 401,
    "comment": "/** \n * Returns the top margin.\n * @param height  the height of the base rectangle.\n * @return The top margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateBottomInset#408",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset",
    "snippet": "public double calculateBottomInset(double height){\n  double result\u003dthis.bottom;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.bottom * height);\n  }\n  return result;\n}",
    "begin_line": 408,
    "end_line": 416,
    "comment": "/** \n * Returns the bottom margin.\n * @param height  the height of the base rectangle.\n * @return The bottom margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateBottomOutset#423",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset",
    "snippet": "public double calculateBottomOutset(double height){\n  double result\u003dthis.bottom;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(height / (1 - this.top - this.bottom)) * this.bottom;\n  }\n  return result;\n}",
    "begin_line": 423,
    "end_line": 431,
    "comment": "/** \n * Returns the bottom margin.\n * @param height  the height of the base rectangle.\n * @return The bottom margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateLeftInset#438",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset",
    "snippet": "public double calculateLeftInset(double width){\n  double result\u003dthis.left;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.left * width);\n  }\n  return result;\n}",
    "begin_line": 438,
    "end_line": 446,
    "comment": "/** \n * Returns the left margin.\n * @param width  the width of the base rectangle.\n * @return The left margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateLeftOutset#453",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset",
    "snippet": "public double calculateLeftOutset(double width){\n  double result\u003dthis.left;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(width / (1 - this.left - this.right)) * this.left;\n  }\n  return result;\n}",
    "begin_line": 453,
    "end_line": 461,
    "comment": "/** \n * Returns the left margin.\n * @param width  the width of the base rectangle.\n * @return The left margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateRightInset#468",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset",
    "snippet": "public double calculateRightInset(double width){\n  double result\u003dthis.right;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.right * width);\n  }\n  return result;\n}",
    "begin_line": 468,
    "end_line": 476,
    "comment": "/** \n * Returns the right margin.\n * @param width  the width of the base rectangle.\n * @return The right margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateRightOutset#483",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset",
    "snippet": "public double calculateRightOutset(double width){\n  double result\u003dthis.right;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(width / (1 - this.left - this.right)) * this.right;\n  }\n  return result;\n}",
    "begin_line": 483,
    "end_line": 491,
    "comment": "/** \n * Returns the right margin.\n * @param width  the width of the base rectangle.\n * @return The right margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trimWidth#498",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trimWidth",
    "snippet": "public double trimWidth(double width){\n  return width - calculateLeftInset(width) - calculateRightInset(width);\n}",
    "begin_line": 498,
    "end_line": 502,
    "comment": "/** \n * Trims the given width to allow for the insets.\n * @param width  the width.\n * @return The trimmed width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.extendWidth#509",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.extendWidth",
    "snippet": "public double extendWidth(double width){\n  return width + calculateLeftOutset(width) + calculateRightOutset(width);\n}",
    "begin_line": 509,
    "end_line": 513,
    "comment": "/** \n * Extends the given width to allow for the insets.\n * @param width  the width.\n * @return The extended width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trimHeight#520",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trimHeight",
    "snippet": "public double trimHeight(double height){\n  return height - calculateTopInset(height) - calculateBottomInset(height);\n}",
    "begin_line": 520,
    "end_line": 525,
    "comment": "/** \n * Trims the given height to allow for the insets.\n * @param height  the height.\n * @return The trimmed height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.extendHeight#532",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.extendHeight",
    "snippet": "public double extendHeight(double height){\n  return height + calculateTopOutset(height) + calculateBottomOutset(height);\n}",
    "begin_line": 532,
    "end_line": 537,
    "comment": "/** \n * Extends the given height to allow for the insets.\n * @param height  the height.\n * @return The extended height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trim#543",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trim",
    "snippet": "public void trim(Rectangle2D area){\n  double w\u003darea.getWidth();\n  double h\u003darea.getHeight();\n  double l\u003dcalculateLeftInset(w);\n  double r\u003dcalculateRightInset(w);\n  double t\u003dcalculateTopInset(h);\n  double b\u003dcalculateBottomInset(h);\n  area.setRect(area.getX() + l,area.getY() + t,w - l - r,h - t - b);\n}",
    "begin_line": 543,
    "end_line": 552,
    "comment": "/** \n * Shrinks the given rectangle by the amount of these insets.\n * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SortOrder.SortOrder#73",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/SortOrder.java",
    "class_name": "org.jfree.chart.util.SortOrder",
    "signature": "org.jfree.chart.util.SortOrder.SortOrder",
    "snippet": "private SortOrder(String name){\n  this.name\u003dname;\n}",
    "begin_line": 73,
    "end_line": 76,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SortOrder.toString#82",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/SortOrder.java",
    "class_name": "org.jfree.chart.util.SortOrder",
    "signature": "org.jfree.chart.util.SortOrder.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 82,
    "end_line": 85,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SortOrder.equals#92",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/SortOrder.java",
    "class_name": "org.jfree.chart.util.SortOrder",
    "signature": "org.jfree.chart.util.SortOrder.equals",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof SortOrder)) {\n    return false;\n  }\n  final SortOrder that\u003d(SortOrder)obj;\n  if (!this.name.equals(that.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 92,
    "end_line": 110,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SortOrder.hashCode#116",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/SortOrder.java",
    "class_name": "org.jfree.chart.util.SortOrder",
    "signature": "org.jfree.chart.util.SortOrder.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 116,
    "end_line": 119,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SortOrder.readResolve#126",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/SortOrder.java",
    "class_name": "org.jfree.chart.util.SortOrder",
    "signature": "org.jfree.chart.util.SortOrder.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(SortOrder.ASCENDING)) {\n    return SortOrder.ASCENDING;\n  }\n else   if (this.equals(SortOrder.DESCENDING)) {\n    return SortOrder.DESCENDING;\n  }\n  return null;\n}",
    "begin_line": 126,
    "end_line": 136,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.UnitType#68",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.UnitType",
    "snippet": "private UnitType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 68,
    "end_line": 71,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.toString#77",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.toString",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 77,
    "end_line": 80,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.equals#87",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof UnitType)) {\n    return false;\n  }\n  UnitType that\u003d(UnitType)obj;\n  if (!this.name.equals(that.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 87,
    "end_line": 102,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified  object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.hashCode#108",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.hashCode",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 108,
    "end_line": 111,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.readResolve#118",
    "is_bug": true,
    "src_path": "source/org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.readResolve",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(UnitType.ABSOLUTE)) {\n    return UnitType.ABSOLUTE;\n  }\n else   if (this.equals(UnitType.RELATIVE)) {\n    return UnitType.RELATIVE;\n  }\n  return null;\n}",
    "begin_line": 118,
    "end_line": 128,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]