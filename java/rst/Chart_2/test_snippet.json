[
    [
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.suite()",
            "snippet": "public static Test suite() {\nreturn new TestSuite(DatasetUtilitiesTests.class);\n}",
            "begin_line": 103,
            "end_line": 105,
            "comment": "    \n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
            "child_ranges": [
                "(line 104,col 9)-(line 104,col 58)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.DatasetUtilitiesTests(String name)",
            "snippet": "public DatasetUtilitiesTests(String name) {\nsuper(name);\n}",
            "begin_line": 112,
            "end_line": 114,
            "comment": "    \n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
            "child_ranges": [
                "(line 113,col 9)-(line 113,col 20)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testJava()",
            "snippet": "public void testJava() {\nassertTrue(Double.isNaN(Math.min(1.0, Double.NaN)));\nassertTrue(Double.isNaN(Math.max(1.0, Double.NaN)));\n}",
            "begin_line": 119,
            "end_line": 122,
            "comment": "    \n     * Some tests to verify that Java does what I think it does!\n     ",
            "child_ranges": [
                "(line 120,col 9)-(line 120,col 60)",
                "(line 121,col 9)-(line 121,col 60)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCalculatePieDatasetTotal()",
            "snippet": "public void testCalculatePieDatasetTotal() {\nDefaultPieDataset d = new DefaultPieDataset();\nassertEquals(0.0, DatasetUtilities.calculatePieDatasetTotal(d),",
            "begin_line": 127,
            "end_line": 129,
            "comment": "    \n     * Some tests for the calculatePieDatasetTotal() method.\n     ",
            "child_ranges": [
                "(line 128,col 9)-(line 128,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds()",
            "snippet": "public void testFindDomainBounds() {\nXYDataset dataset = createXYDataset1();\nRange r = DatasetUtilities.findDomainBounds(dataset);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(3.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 142,
            "end_line": 147,
            "comment": "    \n     * Some tests for the findDomainBounds() method.\n     ",
            "child_ranges": [
                "(line 143,col 9)-(line 143,col 47)",
                "(line 144,col 9)-(line 144,col 61)",
                "(line 145,col 9)-(line 145,col 54)",
                "(line 146,col 9)-(line 146,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds2()",
            "snippet": "public void testFindDomainBounds2() {\nDefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset();\ndouble[] x1 = new double[] {1.0, 2.0, 3.0};\ndouble[] x1Start = new double[] {0.9, 1.9, 2.9};\ndouble[] x1End = new double[] {1.1, 2.1, 3.1};\ndouble[] y1 = new double[] {4.0, 5.0, 6.0};\ndouble[] y1Start = new double[] {1.09, 2.09, 3.09};\ndouble[] y1End = new double[] {1.11, 2.11, 3.11};\ndouble[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,",
            "begin_line": 153,
            "end_line": 161,
            "comment": "    \n     * This test checks that the standard method has 'includeInterval'\n     * defaulting to true.\n     ",
            "child_ranges": [
                "(line 154,col 9)-(line 154,col 74)",
                "(line 155,col 9)-(line 155,col 51)",
                "(line 156,col 9)-(line 156,col 56)",
                "(line 157,col 9)-(line 157,col 54)",
                "(line 158,col 9)-(line 158,col 51)",
                "(line 159,col 9)-(line 159,col 59)",
                "(line 160,col 9)-(line 160,col 57)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds3()",
            "snippet": "public void testFindDomainBounds3() {\nDefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset();\ndouble[] x1 = new double[] {1.0, 2.0, 3.0};\ndouble[] x1Start = new double[] {0.9, 1.9, 2.9};\ndouble[] x1End = new double[] {1.1, 2.1, 3.1};\ndouble[] y1 = new double[] {4.0, 5.0, 6.0};\ndouble[] y1Start = new double[] {1.09, 2.09, 3.09};\ndouble[] y1End = new double[] {1.11, 2.11, 3.11};\ndouble[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,",
            "begin_line": 173,
            "end_line": 181,
            "comment": "    \n     * This test checks that when the 'includeInterval' flag is false, the\n     * bounds come from the regular x-values.\n     ",
            "child_ranges": [
                "(line 174,col 9)-(line 174,col 74)",
                "(line 175,col 9)-(line 175,col 51)",
                "(line 176,col 9)-(line 176,col 56)",
                "(line 177,col 9)-(line 177,col 54)",
                "(line 178,col 9)-(line 178,col 51)",
                "(line 179,col 9)-(line 179,col 59)",
                "(line 180,col 9)-(line 180,col 57)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindDomainBounds_NaN()",
            "snippet": "public void testFindDomainBounds_NaN() {\nDefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset();\ndouble[] x1 = new double[] {1.0, 2.0, Double.NaN};\ndouble[] x1Start = new double[] {0.9, 1.9, Double.NaN};\ndouble[] x1End = new double[] {1.1, 2.1, Double.NaN};\ndouble[] y1 = new double[] {4.0, 5.0, 6.0};\ndouble[] y1Start = new double[] {1.09, 2.09, 3.09};\ndouble[] y1End = new double[] {1.11, 2.11, 3.11};\ndouble[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,",
            "begin_line": 192,
            "end_line": 200,
            "comment": "    \n     * This test checks that NaN values are ignored.\n     ",
            "child_ranges": [
                "(line 193,col 9)-(line 193,col 74)",
                "(line 194,col 9)-(line 194,col 58)",
                "(line 195,col 9)-(line 195,col 63)",
                "(line 196,col 9)-(line 196,col 61)",
                "(line 197,col 9)-(line 197,col 51)",
                "(line 198,col 9)-(line 198,col 59)",
                "(line 199,col 9)-(line 199,col 57)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateDomainBounds()",
            "snippet": "public void testIterateDomainBounds() {\nXYDataset dataset = createXYDataset1();\nRange r = DatasetUtilities.iterateDomainBounds(dataset);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(3.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 215,
            "end_line": 220,
            "comment": "    \n     * Some tests for the iterateDomainBounds() method.\n     ",
            "child_ranges": [
                "(line 216,col 9)-(line 216,col 47)",
                "(line 217,col 9)-(line 217,col 64)",
                "(line 218,col 9)-(line 218,col 54)",
                "(line 219,col 9)-(line 219,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateDomainBounds_NaN()",
            "snippet": "public void testIterateDomainBounds_NaN() {\nDefaultXYDataset dataset = new DefaultXYDataset();\ndouble[] x = new double[] {1.0, 2.0, Double.NaN, 3.0};\ndouble[] y = new double[] {9.0, 8.0, 7.0, 6.0};\ndataset.addSeries(\"S1\", new double[][] {x, y});\nRange r = DatasetUtilities.iterateDomainBounds(dataset);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(3.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 225,
            "end_line": 233,
            "comment": "    \n     * Check that NaN values in the dataset are ignored.\n     ",
            "child_ranges": [
                "(line 226,col 9)-(line 226,col 58)",
                "(line 227,col 9)-(line 227,col 62)",
                "(line 228,col 9)-(line 228,col 55)",
                "(line 229,col 9)-(line 229,col 55)",
                "(line 230,col 9)-(line 230,col 64)",
                "(line 231,col 9)-(line 231,col 54)",
                "(line 232,col 9)-(line 232,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateDomainBounds_NaN2()",
            "snippet": "public void testIterateDomainBounds_NaN2() {\nDefaultIntervalXYDataset dataset = new DefaultIntervalXYDataset();\ndouble[] x1 = new double[] {Double.NaN, 2.0, 3.0};\ndouble[] x1Start = new double[] {0.9, Double.NaN, 2.9};\ndouble[] x1End = new double[] {1.1, Double.NaN, 3.1};\ndouble[] y1 = new double[] {4.0, 5.0, 6.0};\ndouble[] y1Start = new double[] {1.09, 2.09, 3.09};\ndouble[] y1End = new double[] {1.11, 2.11, 3.11};\ndouble[][] data1 = new double[][] {x1, x1Start, x1End, y1, y1Start,",
            "begin_line": 238,
            "end_line": 246,
            "comment": "    \n     * Check that NaN values in the IntervalXYDataset are ignored.\n     ",
            "child_ranges": [
                "(line 239,col 9)-(line 239,col 74)",
                "(line 240,col 9)-(line 240,col 58)",
                "(line 241,col 9)-(line 241,col 63)",
                "(line 242,col 9)-(line 242,col 61)",
                "(line 243,col 9)-(line 243,col 51)",
                "(line 244,col 9)-(line 244,col 59)",
                "(line 245,col 9)-(line 245,col 57)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds_CategoryDataset()",
            "snippet": "public void testFindRangeBounds_CategoryDataset() {\nCategoryDataset dataset = createCategoryDataset1();\nRange r = DatasetUtilities.findRangeBounds(dataset);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(6.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 260,
            "end_line": 265,
            "comment": "    \n     * Some tests for the findRangeBounds() for a CategoryDataset method.\n     ",
            "child_ranges": [
                "(line 261,col 9)-(line 261,col 59)",
                "(line 262,col 9)-(line 262,col 60)",
                "(line 263,col 9)-(line 263,col 54)",
                "(line 264,col 9)-(line 264,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds()",
            "snippet": "public void testFindRangeBounds() {\nXYDataset dataset = createXYDataset1();\nRange r = DatasetUtilities.findRangeBounds(dataset);\nassertEquals(100.0, r.getLowerBound(), EPSILON);\nassertEquals(105.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 270,
            "end_line": 275,
            "comment": "    \n     * Some tests for the findRangeBounds() method on an XYDataset.\n     ",
            "child_ranges": [
                "(line 271,col 9)-(line 271,col 47)",
                "(line 272,col 9)-(line 272,col 60)",
                "(line 273,col 9)-(line 273,col 56)",
                "(line 274,col 9)-(line 274,col 56)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindRangeBounds2()",
            "snippet": "public void testFindRangeBounds2() {\nYIntervalSeriesCollection dataset = new YIntervalSeriesCollection();\nRange r = DatasetUtilities.findRangeBounds(dataset);\nassertNull(r);\nYIntervalSeries s1 = new YIntervalSeries(\"S1\");\ndataset.addSeries(s1);\nr = DatasetUtilities.findRangeBounds(dataset);\nassertNull(r);\n\n// try a single item",
            "begin_line": 281,
            "end_line": 290,
            "comment": "    \n     * A test for the findRangeBounds(XYDataset) method using\n     * an IntervalXYDataset.\n     ",
            "child_ranges": [
                "(line 282,col 9)-(line 282,col 76)",
                "(line 283,col 9)-(line 283,col 60)",
                "(line 284,col 9)-(line 284,col 22)",
                "(line 285,col 9)-(line 285,col 55)",
                "(line 286,col 9)-(line 286,col 30)",
                "(line 287,col 9)-(line 287,col 54)",
                "(line 288,col 9)-(line 288,col 22)",
                "(line 289,col 0)-(line 289,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds_CategoryDataset()",
            "snippet": "public void testIterateRangeBounds_CategoryDataset() {\nCategoryDataset dataset = createCategoryDataset1();\nRange r = DatasetUtilities.iterateRangeBounds(dataset, false);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(6.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 328,
            "end_line": 333,
            "comment": "    \n     * Some tests for the iterateRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 329,col 9)-(line 329,col 59)",
                "(line 330,col 9)-(line 330,col 70)",
                "(line 331,col 9)-(line 331,col 54)",
                "(line 332,col 9)-(line 332,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds2_CategoryDataset()",
            "snippet": "public void testIterateRangeBounds2_CategoryDataset() {\n// an empty dataset should return a null range",
            "begin_line": 338,
            "end_line": 339,
            "comment": "    \n     * Some checks for the iterateRangeBounds() method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds3_CategoryDataset()",
            "snippet": "public void testIterateRangeBounds3_CategoryDataset() {\nNumber[][] starts = new Double[2][3];\nNumber[][] ends = new Double[2][3];\nstarts[0][0] = new Double(1.0);\nstarts[0][1] = new Double(2.0);\nstarts[0][2] = new Double(3.0);\nstarts[1][0] = new Double(11.0);\nstarts[1][1] = new Double(12.0);\nstarts[1][2] = new Double(13.0);\nends[0][0] = new Double(4.0);\nends[0][1] = new Double(5.0);\nends[0][2] = new Double(6.0);\nends[1][0] = new Double(16.0);\nends[1][1] = new Double(15.0);\nends[1][2] = new Double(14.0);\n\nDefaultIntervalCategoryDataset d = new DefaultIntervalCategoryDataset(",
            "begin_line": 367,
            "end_line": 383,
            "comment": "    \n     * Some checks for the iterateRangeBounds() method using an\n     * IntervalCategoryDataset.\n     ",
            "child_ranges": [
                "(line 368,col 9)-(line 368,col 45)",
                "(line 369,col 9)-(line 369,col 43)",
                "(line 370,col 9)-(line 370,col 39)",
                "(line 371,col 9)-(line 371,col 39)",
                "(line 372,col 9)-(line 372,col 39)",
                "(line 373,col 9)-(line 373,col 40)",
                "(line 374,col 9)-(line 374,col 40)",
                "(line 375,col 9)-(line 375,col 40)",
                "(line 376,col 9)-(line 376,col 37)",
                "(line 377,col 9)-(line 377,col 37)",
                "(line 378,col 9)-(line 378,col 37)",
                "(line 379,col 9)-(line 379,col 38)",
                "(line 380,col 9)-(line 380,col 38)",
                "(line 381,col 9)-(line 381,col 38)",
                "(line 382,col 0)-(line 382,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds()",
            "snippet": "public void testIterateRangeBounds() {\nXYDataset dataset = createXYDataset1();\nRange r = DatasetUtilities.iterateRangeBounds(dataset);\nassertEquals(100.0, r.getLowerBound(), EPSILON);\nassertEquals(105.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 396,
            "end_line": 401,
            "comment": "    \n     * Some tests for the iterateRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 397,col 9)-(line 397,col 47)",
                "(line 398,col 9)-(line 398,col 63)",
                "(line 399,col 9)-(line 399,col 56)",
                "(line 400,col 9)-(line 400,col 56)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds2()",
            "snippet": "public void testIterateRangeBounds2() {\nXYSeries s1 = new XYSeries(\"S1\");\ns1.add(1.0, 1.1);\ns1.add(2.0, null);\ns1.add(3.0, 3.3);\nXYSeriesCollection dataset = new XYSeriesCollection(s1);\nRange r = DatasetUtilities.iterateRangeBounds(dataset);\nassertEquals(1.1, r.getLowerBound(), EPSILON);\nassertEquals(3.3, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 406,
            "end_line": 415,
            "comment": "    \n     * Check the range returned when a series contains a null value.\n     ",
            "child_ranges": [
                "(line 407,col 9)-(line 407,col 41)",
                "(line 408,col 9)-(line 408,col 25)",
                "(line 409,col 9)-(line 409,col 26)",
                "(line 410,col 9)-(line 410,col 25)",
                "(line 411,col 9)-(line 411,col 64)",
                "(line 412,col 9)-(line 412,col 63)",
                "(line 413,col 9)-(line 413,col 54)",
                "(line 414,col 9)-(line 414,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds3()",
            "snippet": "public void testIterateRangeBounds3() {\n// an empty dataset should return a null range",
            "begin_line": 420,
            "end_line": 421,
            "comment": "    \n     * Some checks for the iterateRangeBounds() method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds4()",
            "snippet": "public void testIterateRangeBounds4() {\nYIntervalSeriesCollection dataset = new YIntervalSeriesCollection();\nRange r = DatasetUtilities.iterateRangeBounds(dataset);\nassertNull(r);\nYIntervalSeries s1 = new YIntervalSeries(\"S1\");\ndataset.addSeries(s1);\nr = DatasetUtilities.iterateRangeBounds(dataset);\nassertNull(r);\n\n// try a single item",
            "begin_line": 453,
            "end_line": 462,
            "comment": "    \n     * Some checks for the range bounds of a dataset that implements the\n     * {@link IntervalXYDataset} interface.\n     ",
            "child_ranges": [
                "(line 454,col 9)-(line 454,col 76)",
                "(line 455,col 9)-(line 455,col 63)",
                "(line 456,col 9)-(line 456,col 22)",
                "(line 457,col 9)-(line 457,col 55)",
                "(line 458,col 9)-(line 458,col 30)",
                "(line 459,col 9)-(line 459,col 57)",
                "(line 460,col 9)-(line 460,col 22)",
                "(line 461,col 0)-(line 461,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumDomainValue()",
            "snippet": "public void testFindMinimumDomainValue() {\nXYDataset dataset = createXYDataset1();\nNumber minimum = DatasetUtilities.findMinimumDomainValue(dataset);\nassertEquals(new Double(1.0), minimum);\n}",
            "begin_line": 491,
            "end_line": 495,
            "comment": "    \n     * Some tests for the findMinimumDomainValue() method.\n     ",
            "child_ranges": [
                "(line 492,col 9)-(line 492,col 47)",
                "(line 493,col 9)-(line 493,col 74)",
                "(line 494,col 9)-(line 494,col 47)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumDomainValue()",
            "snippet": "public void testFindMaximumDomainValue() {\nXYDataset dataset = createXYDataset1();\nNumber maximum = DatasetUtilities.findMaximumDomainValue(dataset);\nassertEquals(new Double(3.0), maximum);\n}",
            "begin_line": 500,
            "end_line": 504,
            "comment": "    \n     * Some tests for the findMaximumDomainValue() method.\n     ",
            "child_ranges": [
                "(line 501,col 9)-(line 501,col 47)",
                "(line 502,col 9)-(line 502,col 74)",
                "(line 503,col 9)-(line 503,col 47)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumRangeValue()",
            "snippet": "public void testFindMinimumRangeValue() {\nCategoryDataset d1 = createCategoryDataset1();\nNumber min1 = DatasetUtilities.findMinimumRangeValue(d1);\nassertEquals(new Double(1.0), min1);\n\nXYDataset d2 = createXYDataset1();\nNumber min2 = DatasetUtilities.findMinimumRangeValue(d2);\nassertEquals(new Double(100.0), min2);\n}",
            "begin_line": 509,
            "end_line": 517,
            "comment": "    \n     * Some tests for the findMinimumRangeValue() method.\n     ",
            "child_ranges": [
                "(line 510,col 9)-(line 510,col 54)",
                "(line 511,col 9)-(line 511,col 65)",
                "(line 512,col 9)-(line 512,col 44)",
                "(line 513,col 0)-(line 513,col 0)",
                "(line 514,col 9)-(line 514,col 42)",
                "(line 515,col 9)-(line 515,col 65)",
                "(line 516,col 9)-(line 516,col 46)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumRangeValue()",
            "snippet": "public void testFindMaximumRangeValue() {\nCategoryDataset d1 = createCategoryDataset1();\nNumber max1 = DatasetUtilities.findMaximumRangeValue(d1);\nassertEquals(new Double(6.0), max1);\n\nXYDataset dataset = createXYDataset1();\nNumber maximum = DatasetUtilities.findMaximumRangeValue(dataset);\nassertEquals(new Double(105.0), maximum);\n}",
            "begin_line": 522,
            "end_line": 530,
            "comment": "    \n     * Some tests for the findMaximumRangeValue() method.\n     ",
            "child_ranges": [
                "(line 523,col 9)-(line 523,col 54)",
                "(line 524,col 9)-(line 524,col 65)",
                "(line 525,col 9)-(line 525,col 44)",
                "(line 526,col 0)-(line 526,col 0)",
                "(line 527,col 9)-(line 527,col 47)",
                "(line 528,col 9)-(line 528,col 73)",
                "(line 529,col 9)-(line 529,col 49)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testMinMaxRange()",
            "snippet": "public void testMinMaxRange() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(100.0, \"Series 1\", \"Type 1\");\ndataset.addValue(101.1, \"Series 1\", \"Type 2\");\nNumber min = DatasetUtilities.findMinimumRangeValue(dataset);\nassertTrue(min.doubleValue() < 100.1);\nNumber max = DatasetUtilities.findMaximumRangeValue(dataset);\nassertTrue(max.doubleValue() > 101.0);\n}",
            "begin_line": 535,
            "end_line": 543,
            "comment": "    \n     * A quick test of the min and max range value methods.\n     ",
            "child_ranges": [
                "(line 536,col 9)-(line 536,col 70)",
                "(line 537,col 9)-(line 537,col 54)",
                "(line 538,col 9)-(line 538,col 54)",
                "(line 539,col 9)-(line 539,col 69)",
                "(line 540,col 9)-(line 540,col 46)",
                "(line 541,col 9)-(line 541,col 69)",
                "(line 542,col 9)-(line 542,col 46)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.test803660()",
            "snippet": "public void test803660() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(100.0, \"Series 1\", \"Type 1\");\ndataset.addValue(101.1, \"Series 1\", \"Type 2\");\nNumber n = DatasetUtilities.findMaximumRangeValue(dataset);\nassertTrue(n.doubleValue() > 101.0);\n}",
            "begin_line": 548,
            "end_line": 554,
            "comment": "    \n     * A test to reproduce bug report 803660.\n     ",
            "child_ranges": [
                "(line 549,col 9)-(line 549,col 70)",
                "(line 550,col 9)-(line 550,col 54)",
                "(line 551,col 9)-(line 551,col 54)",
                "(line 552,col 9)-(line 552,col 67)",
                "(line 553,col 9)-(line 553,col 44)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange1()",
            "snippet": "public void testCumulativeRange1() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(10.0, \"Series 1\", \"Start\");\ndataset.addValue(15.0, \"Series 1\", \"Delta 1\");\ndataset.addValue(-7.0, \"Series 1\", \"Delta 2\");\nRange range = DatasetUtilities.findCumulativeRangeBounds(dataset);\nassertEquals(0.0, range.getLowerBound(), 0.00000001);\nassertEquals(25.0, range.getUpperBound(), 0.00000001);\n}",
            "begin_line": 561,
            "end_line": 569,
            "comment": "    \n     * A simple test for the cumulative range calculation.  The sequence of\n     * \"cumulative\" values are considered to be { 0.0, 10.0, 25.0, 18.0 } so\n     * the range should be 0.0 -> 25.0.\n     ",
            "child_ranges": [
                "(line 562,col 9)-(line 562,col 70)",
                "(line 563,col 9)-(line 563,col 52)",
                "(line 564,col 9)-(line 564,col 54)",
                "(line 565,col 9)-(line 565,col 54)",
                "(line 566,col 9)-(line 566,col 74)",
                "(line 567,col 9)-(line 567,col 61)",
                "(line 568,col 9)-(line 568,col 62)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange2()",
            "snippet": "public void testCumulativeRange2() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(-21.4, \"Series 1\", \"Start Value\");\ndataset.addValue(11.57, \"Series 1\", \"Delta 1\");\ndataset.addValue(3.51, \"Series 1\", \"Delta 2\");\ndataset.addValue(-12.36, \"Series 1\", \"Delta 3\");\ndataset.addValue(3.39, \"Series 1\", \"Delta 4\");\ndataset.addValue(38.68, \"Series 1\", \"Delta 5\");\ndataset.addValue(-43.31, \"Series 1\", \"Delta 6\");\ndataset.addValue(-29.59, \"Series 1\", \"Delta 7\");\ndataset.addValue(35.30, \"Series 1\", \"Delta 8\");\ndataset.addValue(5.0, \"Series 1\", \"Delta 9\");\nRange range = DatasetUtilities.findCumulativeRangeBounds(dataset);\nassertEquals(-49.51, range.getLowerBound(), 0.00000001);\nassertEquals(23.39, range.getUpperBound(), 0.00000001);\n}",
            "begin_line": 574,
            "end_line": 589,
            "comment": "    \n     * A further test for the cumulative range calculation.\n     ",
            "child_ranges": [
                "(line 575,col 9)-(line 575,col 70)",
                "(line 576,col 9)-(line 576,col 59)",
                "(line 577,col 9)-(line 577,col 55)",
                "(line 578,col 9)-(line 578,col 54)",
                "(line 579,col 9)-(line 579,col 56)",
                "(line 580,col 9)-(line 580,col 54)",
                "(line 581,col 9)-(line 581,col 55)",
                "(line 582,col 9)-(line 582,col 56)",
                "(line 583,col 9)-(line 583,col 56)",
                "(line 584,col 9)-(line 584,col 55)",
                "(line 585,col 9)-(line 585,col 53)",
                "(line 586,col 9)-(line 586,col 74)",
                "(line 587,col 9)-(line 587,col 64)",
                "(line 588,col 9)-(line 588,col 63)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange3()",
            "snippet": "public void testCumulativeRange3() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(15.76, \"Product 1\", \"Labour\");\ndataset.addValue(8.66, \"Product 1\", \"Administration\");\ndataset.addValue(4.71, \"Product 1\", \"Marketing\");\ndataset.addValue(3.51, \"Product 1\", \"Distribution\");\ndataset.addValue(32.64, \"Product 1\", \"Total Expense\");\nRange range = DatasetUtilities.findCumulativeRangeBounds(dataset);\nassertEquals(0.0, range.getLowerBound(), EPSILON);\nassertEquals(65.28, range.getUpperBound(), EPSILON);\n}",
            "begin_line": 594,
            "end_line": 604,
            "comment": "    \n     * A further test for the cumulative range calculation.\n     ",
            "child_ranges": [
                "(line 595,col 9)-(line 595,col 70)",
                "(line 596,col 9)-(line 596,col 55)",
                "(line 597,col 9)-(line 597,col 62)",
                "(line 598,col 9)-(line 598,col 57)",
                "(line 599,col 9)-(line 599,col 60)",
                "(line 600,col 9)-(line 600,col 62)",
                "(line 601,col 9)-(line 601,col 74)",
                "(line 602,col 9)-(line 602,col 58)",
                "(line 603,col 9)-(line 603,col 60)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCumulativeRange_NaN()",
            "snippet": "public void testCumulativeRange_NaN() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(10.0, \"Series 1\", \"Start\");\ndataset.addValue(15.0, \"Series 1\", \"Delta 1\");\ndataset.addValue(Double.NaN, \"Series 1\", \"Delta 2\");\nRange range = DatasetUtilities.findCumulativeRangeBounds(dataset);\nassertEquals(0.0, range.getLowerBound(), EPSILON);\nassertEquals(25.0, range.getUpperBound(), EPSILON);\n}",
            "begin_line": 610,
            "end_line": 618,
            "comment": "    \n     * Check that the findCumulativeRangeBounds() method ignores Double.NaN\n     * values.\n     ",
            "child_ranges": [
                "(line 611,col 9)-(line 611,col 70)",
                "(line 612,col 9)-(line 612,col 52)",
                "(line 613,col 9)-(line 613,col 54)",
                "(line 614,col 9)-(line 614,col 60)",
                "(line 615,col 9)-(line 615,col 74)",
                "(line 616,col 9)-(line 616,col 58)",
                "(line 617,col 9)-(line 617,col 59)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset1()",
            "snippet": "public void testCreateCategoryDataset1() {\nString[] rowKeys = {\"R1\", \"R2\", \"R3\"};\nString[] columnKeys = {\"C1\", \"C2\"};\ndouble[][] data = new double[3][];\ndata[0] = new double[] {1.1, 1.2};\ndata[1] = new double[] {2.1, 2.2};\ndata[2] = new double[] {3.1, 3.2};\nCategoryDataset dataset = DatasetUtilities.createCategoryDataset(",
            "begin_line": 623,
            "end_line": 630,
            "comment": "    \n     * Test the creation of a dataset from an array.\n     ",
            "child_ranges": [
                "(line 624,col 9)-(line 624,col 46)",
                "(line 625,col 9)-(line 625,col 43)",
                "(line 626,col 9)-(line 626,col 42)",
                "(line 627,col 9)-(line 627,col 42)",
                "(line 628,col 9)-(line 628,col 42)",
                "(line 629,col 9)-(line 629,col 42)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testCreateCategoryDataset2()",
            "snippet": "public void testCreateCategoryDataset2() {\nboolean pass = false;\nString[] rowKeys = {\"R1\", \"R2\", \"R3\"};\nString[] columnKeys = {\"C1\", \"C2\"};\ndouble[][] data = new double[2][];\ndata[0] = new double[] {1.1, 1.2, 1.3};\ndata[1] = new double[] {2.1, 2.2, 2.3};\nCategoryDataset dataset = null;\ntry {",
            "begin_line": 640,
            "end_line": 648,
            "comment": "    \n     * Test the creation of a dataset from an array.  This time is should fail\n     * because the array dimensions are around the wrong way.\n     ",
            "child_ranges": [
                "(line 641,col 9)-(line 641,col 29)",
                "(line 642,col 9)-(line 642,col 46)",
                "(line 643,col 9)-(line 643,col 43)",
                "(line 644,col 9)-(line 644,col 42)",
                "(line 645,col 9)-(line 645,col 47)",
                "(line 646,col 9)-(line 646,col 47)",
                "(line 647,col 9)-(line 647,col 39)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testMaximumStackedRangeValue()",
            "snippet": "public void testMaximumStackedRangeValue() {\ndouble v1 = 24.3;\ndouble v2 = 14.2;\ndouble v3 = 33.2;\ndouble v4 = 32.4;\ndouble v5 = 26.3;\ndouble v6 = 22.6;\nNumber answer = new Double(Math.max(v1 + v2 + v3, v4 + v5 + v6));\nDefaultCategoryDataset d = new DefaultCategoryDataset();\nd.addValue(v1, \"Row 0\", \"Column 0\");\nd.addValue(v2, \"Row 1\", \"Column 0\");\nd.addValue(v3, \"Row 2\", \"Column 0\");\nd.addValue(v4, \"Row 0\", \"Column 1\");\nd.addValue(v5, \"Row 1\", \"Column 1\");\nd.addValue(v6, \"Row 2\", \"Column 1\");\nNumber max = DatasetUtilities.findMaximumStackedRangeValue(d);\nassertTrue(max.equals(answer));\n}",
            "begin_line": 664,
            "end_line": 681,
            "comment": "    \n     * Test for a bug reported in the forum:\n     *\n     * http:www.jfree.org/phpBB2/viewtopic.php?t=7903\n     ",
            "child_ranges": [
                "(line 665,col 9)-(line 665,col 25)",
                "(line 666,col 9)-(line 666,col 25)",
                "(line 667,col 9)-(line 667,col 25)",
                "(line 668,col 9)-(line 668,col 25)",
                "(line 669,col 9)-(line 669,col 25)",
                "(line 670,col 9)-(line 670,col 25)",
                "(line 671,col 9)-(line 671,col 73)",
                "(line 672,col 9)-(line 672,col 64)",
                "(line 673,col 9)-(line 673,col 44)",
                "(line 674,col 9)-(line 674,col 44)",
                "(line 675,col 9)-(line 675,col 44)",
                "(line 676,col 9)-(line 676,col 44)",
                "(line 677,col 9)-(line 677,col 44)",
                "(line 678,col 9)-(line 678,col 44)",
                "(line 679,col 9)-(line 679,col 70)",
                "(line 680,col 9)-(line 680,col 39)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBounds_CategoryDataset1()",
            "snippet": "public void testFindStackedRangeBounds_CategoryDataset1() {\nCategoryDataset d1 = createCategoryDataset1();\nRange r = DatasetUtilities.findStackedRangeBounds(d1);\nassertEquals(0.0, r.getLowerBound(), EPSILON);\nassertEquals(15.0, r.getUpperBound(), EPSILON);\n\nd1 = createCategoryDataset2();\nr = DatasetUtilities.findStackedRangeBounds(d1);\nassertEquals(-2.0, r.getLowerBound(), EPSILON);\nassertEquals(2.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 686,
            "end_line": 696,
            "comment": "    \n     * Some checks for the findStackedRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 687,col 9)-(line 687,col 54)",
                "(line 688,col 9)-(line 688,col 62)",
                "(line 689,col 9)-(line 689,col 54)",
                "(line 690,col 9)-(line 690,col 55)",
                "(line 691,col 0)-(line 691,col 0)",
                "(line 692,col 9)-(line 692,col 38)",
                "(line 693,col 9)-(line 693,col 56)",
                "(line 694,col 9)-(line 694,col 55)",
                "(line 695,col 9)-(line 695,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBounds_CategoryDataset2()",
            "snippet": "public void testFindStackedRangeBounds_CategoryDataset2() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nRange r = DatasetUtilities.findStackedRangeBounds(dataset);\nassertTrue(r == null);\n\ndataset.addValue(5.0, \"R1\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, 3.0);\nassertEquals(3.0, r.getLowerBound(), EPSILON);\nassertEquals(8.0, r.getUpperBound(), EPSILON);\n\ndataset.addValue(-1.0, \"R2\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, 3.0);\nassertEquals(2.0, r.getLowerBound(), EPSILON);\nassertEquals(8.0, r.getUpperBound(), EPSILON);\n\ndataset.addValue(null, \"R3\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, 3.0);\nassertEquals(2.0, r.getLowerBound(), EPSILON);\nassertEquals(8.0, r.getUpperBound(), EPSILON);\n\ndataset.addValue(Double.NaN, \"R4\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, 3.0);\nassertEquals(2.0, r.getLowerBound(), EPSILON);\nassertEquals(8.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 701,
            "end_line": 725,
            "comment": "    \n     * Some checks for the findStackedRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 702,col 9)-(line 702,col 70)",
                "(line 703,col 9)-(line 703,col 67)",
                "(line 704,col 9)-(line 704,col 30)",
                "(line 705,col 0)-(line 705,col 0)",
                "(line 706,col 9)-(line 706,col 42)",
                "(line 707,col 9)-(line 707,col 66)",
                "(line 708,col 9)-(line 708,col 54)",
                "(line 709,col 9)-(line 709,col 54)",
                "(line 710,col 0)-(line 710,col 0)",
                "(line 711,col 9)-(line 711,col 43)",
                "(line 712,col 9)-(line 712,col 66)",
                "(line 713,col 9)-(line 713,col 54)",
                "(line 714,col 9)-(line 714,col 54)",
                "(line 715,col 0)-(line 715,col 0)",
                "(line 716,col 9)-(line 716,col 43)",
                "(line 717,col 9)-(line 717,col 66)",
                "(line 718,col 9)-(line 718,col 54)",
                "(line 719,col 9)-(line 719,col 54)",
                "(line 720,col 0)-(line 720,col 0)",
                "(line 721,col 9)-(line 721,col 49)",
                "(line 722,col 9)-(line 722,col 66)",
                "(line 723,col 9)-(line 723,col 54)",
                "(line 724,col 9)-(line 724,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBounds_CategoryDataset3()",
            "snippet": "public void testFindStackedRangeBounds_CategoryDataset3() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\nKeyToGroupMap map = new KeyToGroupMap(\"Group A\");\nRange r = DatasetUtilities.findStackedRangeBounds(dataset, map);\nassertTrue(r == null);\n\ndataset.addValue(1.0, \"R1\", \"C1\");\ndataset.addValue(2.0, \"R2\", \"C1\");\ndataset.addValue(3.0, \"R3\", \"C1\");\ndataset.addValue(4.0, \"R4\", \"C1\");\n\nmap.mapKeyToGroup(\"R1\", \"Group A\");\nmap.mapKeyToGroup(\"R2\", \"Group A\");\nmap.mapKeyToGroup(\"R3\", \"Group B\");\nmap.mapKeyToGroup(\"R4\", \"Group B\");\n\nr = DatasetUtilities.findStackedRangeBounds(dataset, map);\nassertEquals(0.0, r.getLowerBound(), EPSILON);\nassertEquals(7.0, r.getUpperBound(), EPSILON);\n\ndataset.addValue(null, \"R5\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, map);\nassertEquals(0.0, r.getLowerBound(), EPSILON);\nassertEquals(7.0, r.getUpperBound(), EPSILON);\n\ndataset.addValue(Double.NaN, \"R6\", \"C1\");\nr = DatasetUtilities.findStackedRangeBounds(dataset, map);\nassertEquals(0.0, r.getLowerBound(), EPSILON);\nassertEquals(7.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 731,
            "end_line": 760,
            "comment": "    \n     * Some checks for the findStackedRangeBounds(CategoryDataset,\n     * KeyToGroupMap) method.\n     ",
            "child_ranges": [
                "(line 732,col 9)-(line 732,col 70)",
                "(line 733,col 9)-(line 733,col 57)",
                "(line 734,col 9)-(line 734,col 72)",
                "(line 735,col 9)-(line 735,col 30)",
                "(line 736,col 0)-(line 736,col 0)",
                "(line 737,col 9)-(line 737,col 42)",
                "(line 738,col 9)-(line 738,col 42)",
                "(line 739,col 9)-(line 739,col 42)",
                "(line 740,col 9)-(line 740,col 42)",
                "(line 741,col 0)-(line 741,col 0)",
                "(line 742,col 9)-(line 742,col 43)",
                "(line 743,col 9)-(line 743,col 43)",
                "(line 744,col 9)-(line 744,col 43)",
                "(line 745,col 9)-(line 745,col 43)",
                "(line 746,col 0)-(line 746,col 0)",
                "(line 747,col 9)-(line 747,col 66)",
                "(line 748,col 9)-(line 748,col 54)",
                "(line 749,col 9)-(line 749,col 54)",
                "(line 750,col 0)-(line 750,col 0)",
                "(line 751,col 9)-(line 751,col 43)",
                "(line 752,col 9)-(line 752,col 66)",
                "(line 753,col 9)-(line 753,col 54)",
                "(line 754,col 9)-(line 754,col 54)",
                "(line 755,col 0)-(line 755,col 0)",
                "(line 756,col 9)-(line 756,col 49)",
                "(line 757,col 9)-(line 757,col 66)",
                "(line 758,col 9)-(line 758,col 54)",
                "(line 759,col 9)-(line 759,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset1()",
            "snippet": "public void testFindStackedRangeBoundsForTableXYDataset1() {\nTableXYDataset d2 = createTableXYDataset1();\nRange r = DatasetUtilities.findStackedRangeBounds(d2);\nassertEquals(-2.0, r.getLowerBound(), EPSILON);\nassertEquals(2.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 765,
            "end_line": 770,
            "comment": "    \n     * Some checks for the findStackedRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 766,col 9)-(line 766,col 52)",
                "(line 767,col 9)-(line 767,col 62)",
                "(line 768,col 9)-(line 768,col 55)",
                "(line 769,col 9)-(line 769,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindStackedRangeBoundsForTableXYDataset2()",
            "snippet": "public void testFindStackedRangeBoundsForTableXYDataset2() {\nDefaultTableXYDataset d = new DefaultTableXYDataset();\nRange r = DatasetUtilities.findStackedRangeBounds(d);\nassertEquals(r, new Range(0.0, 0.0));\n}",
            "begin_line": 775,
            "end_line": 779,
            "comment": "    \n     * Some checks for the findStackedRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 776,col 9)-(line 776,col 62)",
                "(line 777,col 9)-(line 777,col 61)",
                "(line 778,col 9)-(line 778,col 45)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testStackedRangeWithMap()",
            "snippet": "public void testStackedRangeWithMap() {\nCategoryDataset d = createCategoryDataset1();\nKeyToGroupMap map = new KeyToGroupMap(\"G0\");\nmap.mapKeyToGroup(\"R2\", \"G1\");\nRange r = DatasetUtilities.findStackedRangeBounds(d, map);\nassertEquals(0.0, r.getLowerBound(), EPSILON);\nassertEquals(9.0, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 784,
            "end_line": 791,
            "comment": "    \n     * Tests the stacked range extent calculation.\n     ",
            "child_ranges": [
                "(line 785,col 9)-(line 785,col 53)",
                "(line 786,col 9)-(line 786,col 52)",
                "(line 787,col 9)-(line 787,col 38)",
                "(line 788,col 9)-(line 788,col 66)",
                "(line 789,col 9)-(line 789,col 54)",
                "(line 790,col 9)-(line 790,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIsEmptyOrNullXYDataset()",
            "snippet": "public void testIsEmptyOrNullXYDataset() {\nXYSeriesCollection dataset = null;\nassertTrue(DatasetUtilities.isEmptyOrNull(dataset));\ndataset = new XYSeriesCollection();\nassertTrue(DatasetUtilities.isEmptyOrNull(dataset));\nXYSeries s1 = new XYSeries(\"S1\");\ndataset.addSeries(s1);\nassertTrue(DatasetUtilities.isEmptyOrNull(dataset));\ns1.add(1.0, 2.0);\nassertFalse(DatasetUtilities.isEmptyOrNull(dataset));\ns1.clear();\nassertTrue(DatasetUtilities.isEmptyOrNull(dataset));\n}",
            "begin_line": 796,
            "end_line": 808,
            "comment": "    \n     * Some checks for the isEmptyOrNull(XYDataset) method.\n     ",
            "child_ranges": [
                "(line 797,col 9)-(line 797,col 42)",
                "(line 798,col 9)-(line 798,col 60)",
                "(line 799,col 9)-(line 799,col 43)",
                "(line 800,col 9)-(line 800,col 60)",
                "(line 801,col 9)-(line 801,col 41)",
                "(line 802,col 9)-(line 802,col 30)",
                "(line 803,col 9)-(line 803,col 60)",
                "(line 804,col 9)-(line 804,col 25)",
                "(line 805,col 9)-(line 805,col 61)",
                "(line 806,col 9)-(line 806,col 19)",
                "(line 807,col 9)-(line 807,col 60)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testLimitPieDataset()",
            "snippet": "public void testLimitPieDataset() {\n\n// check that empty dataset is handled OK",
            "begin_line": 813,
            "end_line": 815,
            "comment": "    \n     * Some checks for the limitPieDataset() methods.\n     ",
            "child_ranges": [
                "(line 814,col 0)-(line 814,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testSampleFunction2D()",
            "snippet": "public void testSampleFunction2D() {\nFunction2D f = new LineFunction2D(0, 1);\nXYDataset dataset = DatasetUtilities.sampleFunction2D(f, 0.0, 1.0, 2,",
            "begin_line": 848,
            "end_line": 850,
            "comment": "    \n     * Some checks for the sampleFunction2D() method.\n     ",
            "child_ranges": [
                "(line 849,col 9)-(line 849,col 48)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumStackedRangeValue()",
            "snippet": "public void testFindMinimumStackedRangeValue() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n// an empty dataset should return a null max",
            "begin_line": 864,
            "end_line": 867,
            "comment": "    \n     * A simple check for the findMinimumStackedRangeValue() method.\n     ",
            "child_ranges": [
                "(line 865,col 9)-(line 865,col 70)",
                "(line 866,col 0)-(line 866,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMinimumStackedRangeValue2()",
            "snippet": "public void testFindMinimumStackedRangeValue2() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(-1.0, \"R1\", \"C1\");\nNumber min = DatasetUtilities.findMinimumStackedRangeValue(dataset);\nassertEquals(-1.0, min.doubleValue(), EPSILON);\n\ndataset.addValue(-2.0, \"R2\", \"C1\");\nmin = DatasetUtilities.findMinimumStackedRangeValue(dataset);\nassertEquals(-3.0, min.doubleValue(), EPSILON);\n}",
            "begin_line": 891,
            "end_line": 900,
            "comment": "    \n     * A simple check for the findMaximumStackedRangeValue() method.\n     ",
            "child_ranges": [
                "(line 892,col 9)-(line 892,col 70)",
                "(line 893,col 9)-(line 893,col 43)",
                "(line 894,col 9)-(line 894,col 76)",
                "(line 895,col 9)-(line 895,col 55)",
                "(line 896,col 0)-(line 896,col 0)",
                "(line 897,col 9)-(line 897,col 43)",
                "(line 898,col 9)-(line 898,col 69)",
                "(line 899,col 9)-(line 899,col 55)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumStackedRangeValue()",
            "snippet": "public void testFindMaximumStackedRangeValue() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n// an empty dataset should return a null max",
            "begin_line": 905,
            "end_line": 908,
            "comment": "    \n     * A simple check for the findMaximumStackedRangeValue() method.\n     ",
            "child_ranges": [
                "(line 906,col 9)-(line 906,col 70)",
                "(line 907,col 0)-(line 907,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testFindMaximumStackedRangeValue2()",
            "snippet": "public void testFindMaximumStackedRangeValue2() {\nDefaultCategoryDataset dataset = new DefaultCategoryDataset();\ndataset.addValue(-1.0, \"R1\", \"C1\");\nNumber max = DatasetUtilities.findMaximumStackedRangeValue(dataset);\nassertEquals(0.0, max.doubleValue(), EPSILON);\n\ndataset.addValue(-2.0, \"R2\", \"C1\");\nmax = DatasetUtilities.findMaximumStackedRangeValue(dataset);\nassertEquals(0.0, max.doubleValue(), EPSILON);\n}",
            "begin_line": 932,
            "end_line": 941,
            "comment": "    \n     * A simple check for the findMaximumStackedRangeValue() method.\n     ",
            "child_ranges": [
                "(line 933,col 9)-(line 933,col 70)",
                "(line 934,col 9)-(line 934,col 43)",
                "(line 935,col 9)-(line 935,col 76)",
                "(line 936,col 9)-(line 936,col 54)",
                "(line 937,col 0)-(line 937,col 0)",
                "(line 938,col 9)-(line 938,col 43)",
                "(line 939,col 9)-(line 939,col 69)",
                "(line 940,col 9)-(line 940,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createCategoryDataset1()",
            "snippet": "private CategoryDataset createCategoryDataset1() {\nDefaultCategoryDataset result = new DefaultCategoryDataset();\nresult.addValue(1.0, \"R0\", \"C0\");\nresult.addValue(1.0, \"R1\", \"C0\");\nresult.addValue(1.0, \"R2\", \"C0\");\nresult.addValue(4.0, \"R0\", \"C1\");\nresult.addValue(5.0, \"R1\", \"C1\");\nresult.addValue(6.0, \"R2\", \"C1\");\nreturn result;\n}",
            "begin_line": 948,
            "end_line": 957,
            "comment": "    \n     * Creates a dataset for testing.\n     *\n     * @return A dataset.\n     ",
            "child_ranges": [
                "(line 949,col 9)-(line 949,col 69)",
                "(line 950,col 9)-(line 950,col 41)",
                "(line 951,col 9)-(line 951,col 41)",
                "(line 952,col 9)-(line 952,col 41)",
                "(line 953,col 9)-(line 953,col 41)",
                "(line 954,col 9)-(line 954,col 41)",
                "(line 955,col 9)-(line 955,col 41)",
                "(line 956,col 9)-(line 956,col 22)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createCategoryDataset2()",
            "snippet": "private CategoryDataset createCategoryDataset2() {\nDefaultCategoryDataset result = new DefaultCategoryDataset();\nresult.addValue(1.0, \"R0\", \"C0\");\nresult.addValue(-2.0, \"R1\", \"C0\");\nresult.addValue(2.0, \"R0\", \"C1\");\nresult.addValue(-1.0, \"R1\", \"C1\");\nreturn result;\n}",
            "begin_line": 964,
            "end_line": 971,
            "comment": "    \n     * Creates a dataset for testing.\n     *\n     * @return A dataset.\n     ",
            "child_ranges": [
                "(line 965,col 9)-(line 965,col 69)",
                "(line 966,col 9)-(line 966,col 41)",
                "(line 967,col 9)-(line 967,col 42)",
                "(line 968,col 9)-(line 968,col 41)",
                "(line 969,col 9)-(line 969,col 42)",
                "(line 970,col 9)-(line 970,col 22)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createXYDataset1()",
            "snippet": "private XYDataset createXYDataset1() {\nXYSeries series1 = new XYSeries(\"S1\");\nseries1.add(1.0, 100.0);\nseries1.add(2.0, 101.0);\nseries1.add(3.0, 102.0);\nXYSeries series2 = new XYSeries(\"S2\");\nseries2.add(1.0, 103.0);\nseries2.add(2.0, null);\nseries2.add(3.0, 105.0);\nXYSeriesCollection result = new XYSeriesCollection();\nresult.addSeries(series1);\nresult.addSeries(series2);\nresult.setIntervalWidth(0.0);\nreturn result;\n}",
            "begin_line": 979,
            "end_line": 993,
            "comment": "    \n     * Creates a dataset for testing.\n     *\n     * @return A dataset.\n     ",
            "child_ranges": [
                "(line 980,col 9)-(line 980,col 46)",
                "(line 981,col 9)-(line 981,col 32)",
                "(line 982,col 9)-(line 982,col 32)",
                "(line 983,col 9)-(line 983,col 32)",
                "(line 984,col 9)-(line 984,col 46)",
                "(line 985,col 9)-(line 985,col 32)",
                "(line 986,col 9)-(line 986,col 31)",
                "(line 987,col 9)-(line 987,col 32)",
                "(line 988,col 9)-(line 988,col 61)",
                "(line 989,col 9)-(line 989,col 34)",
                "(line 990,col 9)-(line 990,col 34)",
                "(line 991,col 9)-(line 991,col 37)",
                "(line 992,col 9)-(line 992,col 22)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.createTableXYDataset1()",
            "snippet": "private TableXYDataset createTableXYDataset1() {\nDefaultTableXYDataset dataset = new DefaultTableXYDataset();\n\nXYSeries s1 = new XYSeries(\"Series 1\", true, false);\ns1.add(1.0, 1.0);\ns1.add(2.0, 2.0);\ndataset.addSeries(s1);\n\nXYSeries s2 = new XYSeries(\"Series 2\", true, false);\ns2.add(1.0, -2.0);\ns2.add(2.0, -1.0);\ndataset.addSeries(s2);\n\nreturn dataset;\n}",
            "begin_line": 1000,
            "end_line": 1014,
            "comment": "    \n     * Creates a sample dataset for testing purposes.\n     *\n     * @return A sample dataset.\n     ",
            "child_ranges": [
                "(line 1001,col 9)-(line 1001,col 68)",
                "(line 1002,col 0)-(line 1002,col 0)",
                "(line 1003,col 9)-(line 1003,col 60)",
                "(line 1004,col 9)-(line 1004,col 25)",
                "(line 1005,col 9)-(line 1005,col 25)",
                "(line 1006,col 9)-(line 1006,col 30)",
                "(line 1007,col 0)-(line 1007,col 0)",
                "(line 1008,col 9)-(line 1008,col 60)",
                "(line 1009,col 9)-(line 1009,col 26)",
                "(line 1010,col 9)-(line 1010,col 26)",
                "(line 1011,col 9)-(line 1011,col 30)",
                "(line 1012,col 0)-(line 1012,col 0)",
                "(line 1013,col 9)-(line 1013,col 23)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateToFindRangeBounds1_XYDataset()",
            "snippet": "public void testIterateToFindRangeBounds1_XYDataset() {\n// null dataset throws IllegalArgumentException",
            "begin_line": 1019,
            "end_line": 1020,
            "comment": "    \n     * Some checks for the iteratorToFindRangeBounds(XYDataset...) method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateToFindRangeBounds2_XYDataset()",
            "snippet": "public void testIterateToFindRangeBounds2_XYDataset() {\nList visibleSeriesKeys = new ArrayList();\nRange xRange = new Range(0.0, 10.0);\n\n// empty dataset returns null",
            "begin_line": 1057,
            "end_line": 1061,
            "comment": "    \n     * Some tests for the iterateToFindRangeBounds() method.\n     ",
            "child_ranges": [
                "(line 1058,col 9)-(line 1058,col 49)",
                "(line 1059,col 9)-(line 1059,col 44)",
                "(line 1060,col 0)-(line 1060,col 0)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateToFindRangeBounds_BoxAndWhiskerXYDataset()",
            "snippet": "public void testIterateToFindRangeBounds_BoxAndWhiskerXYDataset() {\nDefaultBoxAndWhiskerXYDataset dataset",
            "begin_line": 1131,
            "end_line": 1132,
            "comment": "    \n     * Some checks for the iterateToFindRangeBounds() method when applied to\n     * a BoxAndWhiskerXYDataset.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateToFindRangeBounds_StatisticalCategoryDataset()",
            "snippet": "public void testIterateToFindRangeBounds_StatisticalCategoryDataset() {\nDefaultStatisticalCategoryDataset dataset",
            "begin_line": 1155,
            "end_line": 1156,
            "comment": "    \n     * Some checks for the iterateToFindRangeBounds(CategoryDataset...)\n     * method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateToFindRangeBounds_MultiValueCategoryDataset()",
            "snippet": "public void testIterateToFindRangeBounds_MultiValueCategoryDataset() {\nDefaultMultiValueCategoryDataset dataset",
            "begin_line": 1175,
            "end_line": 1176,
            "comment": "    \n     * Some checks for the iterateToFindRangeBounds(CategoryDataset...) method\n     * with a {@link MultiValueCategoryDataset}.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testIterateRangeBounds_IntervalCategoryDataset()",
            "snippet": "public void testIterateRangeBounds_IntervalCategoryDataset() {}\n// Defects4J: flaky method",
            "begin_line": 1210,
            "end_line": 1211,
            "comment": "    \n     * Some checks for the iterateRangeBounds() method when passed an\n     * IntervalCategoryDataset.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731()",
            "snippet": "public void testBug2849731() {}\n// Defects4J: flaky method",
            "begin_line": 1257,
            "end_line": 1258,
            "comment": "    \n     * A test for bug 2849731.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_2()",
            "snippet": "public void testBug2849731_2() {\nXYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\nXYIntervalSeries s = new XYIntervalSeries(\"S1\");\ns.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);\nd.addSeries(s);\nRange r = DatasetUtilities.iterateDomainBounds(d);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(1.0, r.getUpperBound(), EPSILON);\n\ns.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);\nr = DatasetUtilities.iterateDomainBounds(d);\nassertEquals(1.0, r.getLowerBound(), EPSILON);\nassertEquals(1.5, r.getUpperBound(), EPSILON);\n\ns.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);\nr = DatasetUtilities.iterateDomainBounds(d);\nassertEquals(0.5, r.getLowerBound(), EPSILON);\nassertEquals(1.5, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 1270,
            "end_line": 1288,
            "comment": "    \n     * Another test for bug 2849731.\n     ",
            "child_ranges": [
                "(line 1271,col 9)-(line 1271,col 72)",
                "(line 1272,col 9)-(line 1272,col 56)",
                "(line 1273,col 9)-(line 1273,col 72)",
                "(line 1274,col 9)-(line 1274,col 23)",
                "(line 1275,col 9)-(line 1275,col 58)",
                "(line 1276,col 9)-(line 1276,col 54)",
                "(line 1277,col 9)-(line 1277,col 54)",
                "(line 1278,col 0)-(line 1278,col 0)",
                "(line 1279,col 9)-(line 1279,col 65)",
                "(line 1280,col 9)-(line 1280,col 52)",
                "(line 1281,col 9)-(line 1281,col 54)",
                "(line 1282,col 9)-(line 1282,col 54)",
                "(line 1283,col 0)-(line 1283,col 0)",
                "(line 1284,col 9)-(line 1284,col 65)",
                "(line 1285,col 9)-(line 1285,col 52)",
                "(line 1286,col 9)-(line 1286,col 54)",
                "(line 1287,col 9)-(line 1287,col 54)"
            ]
        },
        {
            "class_name": "org.jfree.data.general.junit.DatasetUtilitiesTests",
            "child_classes": [],
            "src_path": "tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java",
            "signature": "org.jfree.data.general.junit.DatasetUtilitiesTests.testBug2849731_3()",
            "snippet": "public void testBug2849731_3() {\nXYIntervalSeriesCollection d = new XYIntervalSeriesCollection();\nXYIntervalSeries s = new XYIntervalSeries(\"S1\");\ns.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);\nd.addSeries(s);\nRange r = DatasetUtilities.iterateRangeBounds(d);\nassertEquals(1.5, r.getLowerBound(), EPSILON);\nassertEquals(1.5, r.getUpperBound(), EPSILON);\n\ns.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);\nr = DatasetUtilities.iterateRangeBounds(d);\nassertEquals(1.5, r.getLowerBound(), EPSILON);\nassertEquals(2.5, r.getUpperBound(), EPSILON);\n\ns.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);\nr = DatasetUtilities.iterateRangeBounds(d);\nassertEquals(1.5, r.getLowerBound(), EPSILON);\nassertEquals(3.5, r.getUpperBound(), EPSILON);\n}",
            "begin_line": 1293,
            "end_line": 1311,
            "comment": "    \n     * Yet another test for bug 2849731.\n     ",
            "child_ranges": [
                "(line 1294,col 9)-(line 1294,col 72)",
                "(line 1295,col 9)-(line 1295,col 56)",
                "(line 1296,col 9)-(line 1296,col 72)",
                "(line 1297,col 9)-(line 1297,col 23)",
                "(line 1298,col 9)-(line 1298,col 57)",
                "(line 1299,col 9)-(line 1299,col 54)",
                "(line 1300,col 9)-(line 1300,col 54)",
                "(line 1301,col 0)-(line 1301,col 0)",
                "(line 1302,col 9)-(line 1302,col 65)",
                "(line 1303,col 9)-(line 1303,col 51)",
                "(line 1304,col 9)-(line 1304,col 54)",
                "(line 1305,col 9)-(line 1305,col 54)",
                "(line 1306,col 0)-(line 1306,col 0)",
                "(line 1307,col 9)-(line 1307,col 65)",
                "(line 1308,col 9)-(line 1308,col 51)",
                "(line 1309,col 9)-(line 1309,col 54)",
                "(line 1310,col 9)-(line 1310,col 54)"
            ]
        }
    ]
]