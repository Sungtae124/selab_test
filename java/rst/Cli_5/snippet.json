[
  {
    "name": "CommandLine.CommandLine#55",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.CommandLine()",
    "snippet": "CommandLine(){\n}",
    "begin_line": 55,
    "end_line": 58,
    "comment": "/** \n * Creates a command line.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.hasOption#66",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.hasOption(java.lang.String)",
    "snippet": "public boolean hasOption(String opt){\n  return options.contains(resolveOption(opt));\n}",
    "begin_line": 66,
    "end_line": 69,
    "comment": "/** \n * Query to see if an option has been set.\n * @param opt Short name of the option\n * @return true if set, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.hasOption#77",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.hasOption(char)",
    "snippet": "public boolean hasOption(char opt){\n  return hasOption(String.valueOf(opt));\n}",
    "begin_line": 77,
    "end_line": 80,
    "comment": "/** \n * Query to see if an option has been set.\n * @param opt character name of the option\n * @return true if set, false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionObject#88",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionObject(java.lang.String)",
    "snippet": "public Object getOptionObject(String opt){\n  String res\u003dgetOptionValue(opt);\n  Option option\u003dresolveOption(opt);\n  if (option \u003d\u003d null) {\n    return null;\n  }\n  Object type\u003doption.getType();\n  return (res \u003d\u003d null) ? null : TypeHandler.createValue(res,type);\n}",
    "begin_line": 88,
    "end_line": 101,
    "comment": "/** \n * Return the \u003ccode\u003eObject\u003c/code\u003e type of this \u003ccode\u003eOption\u003c/code\u003e.\n * @param opt the name of the option\n * @return the type of this \u003ccode\u003eOption\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionObject#109",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionObject(char)",
    "snippet": "public Object getOptionObject(char opt){\n  return getOptionObject(String.valueOf(opt));\n}",
    "begin_line": 109,
    "end_line": 112,
    "comment": "/** \n * Return the \u003ccode\u003eObject\u003c/code\u003e type of this \u003ccode\u003eOption\u003c/code\u003e.\n * @param opt the name of the option\n * @return the type of opt\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#121",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String)",
    "snippet": "public String getOptionValue(String opt){\n  String[] values\u003dgetOptionValues(opt);\n  return (values \u003d\u003d null) ? null : values[0];\n}",
    "begin_line": 121,
    "end_line": 126,
    "comment": "/** \n * Retrieve the argument, if any, of this option.\n * @param opt the name of the option\n * @return Value of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#135",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char)",
    "snippet": "public String getOptionValue(char opt){\n  return getOptionValue(String.valueOf(opt));\n}",
    "begin_line": 135,
    "end_line": 138,
    "comment": "/** \n * Retrieve the argument, if any, of this option.\n * @param opt the character name of the option\n * @return Value of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValues#147",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValues(java.lang.String)",
    "snippet": "public String[] getOptionValues(String opt){\n  Option key\u003dresolveOption(opt);\n  if (options.contains(key)) {\n    return key.getValues();\n  }\n  return null;\n}",
    "begin_line": 147,
    "end_line": 157,
    "comment": "/** \n * Retrieves the array of values, if any, of an option.\n * @param opt string name of the option\n * @return Values of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.resolveOption#164",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.resolveOption(java.lang.String)",
    "snippet": "private Option resolveOption(String opt){\n  opt\u003dUtil.stripLeadingHyphens(opt);\n  for (Iterator it\u003doptions.iterator(); it.hasNext(); ) {\n    Option option\u003d(Option)it.next();\n    if (opt.equals(option.getOpt())) {\n      return option;\n    }\n    if (opt.equals(option.getLongOpt())) {\n      return option;\n    }\n  }\n  return null;\n}",
    "begin_line": 164,
    "end_line": 181,
    "comment": "/** \n * \u003cp\u003eRetrieves the option object given the long or short option as a String\u003c/p\u003e\n * @param opt short or long name of the option\n * @return Canonicalized option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValues#190",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValues(char)",
    "snippet": "public String[] getOptionValues(char opt){\n  return getOptionValues(String.valueOf(opt));\n}",
    "begin_line": 190,
    "end_line": 193,
    "comment": "/** \n * Retrieves the array of values, if any, of an option.\n * @param opt character name of the option\n * @return Values of the argument if option is set, and has an argument,otherwise null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#204",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(java.lang.String, java.lang.String)",
    "snippet": "public String getOptionValue(String opt,String defaultValue){\n  String answer\u003dgetOptionValue(opt);\n  return (answer !\u003d null) ? answer : defaultValue;\n}",
    "begin_line": 204,
    "end_line": 209,
    "comment": "/** \n * Retrieve the argument, if any, of an option.\n * @param opt name of the option\n * @param defaultValue is the default value to be returned if the option is not specified\n * @return Value of the argument if option is set, and has an argument,otherwise \u003ccode\u003edefaultValue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptionValue#220",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptionValue(char, java.lang.String)",
    "snippet": "public String getOptionValue(char opt,String defaultValue){\n  return getOptionValue(String.valueOf(opt),defaultValue);\n}",
    "begin_line": 220,
    "end_line": 223,
    "comment": "/** \n * Retrieve the argument, if any, of an option.\n * @param opt character name of the option\n * @param defaultValue is the default value to be returned if the option is not specified\n * @return Value of the argument if option is set, and has an argument,otherwise \u003ccode\u003edefaultValue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getArgs#230",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getArgs()",
    "snippet": "public String[] getArgs(){\n  String[] answer\u003dnew String[args.size()];\n  args.toArray(answer);\n  return answer;\n}",
    "begin_line": 230,
    "end_line": 237,
    "comment": "/** \n * Retrieve any left-over non-recognized options and arguments\n * @return remaining items passed in but not parsed as an array\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getArgList#244",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getArgList()",
    "snippet": "public List getArgList(){\n  return args;\n}",
    "begin_line": 244,
    "end_line": 247,
    "comment": "/** \n * Retrieve any left-over non-recognized options and arguments\n * @return remaining items passed in but not parsed as a \u003ccode\u003eList\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.addArg#276",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.addArg(java.lang.String)",
    "snippet": "void addArg(String arg){\n  args.add(arg);\n}",
    "begin_line": 276,
    "end_line": 279,
    "comment": "/** \n * Add left-over unrecognized option/argument.\n * @param arg the unrecognised option/argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.addOption#287",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.addOption(org.apache.commons.cli.Option)",
    "snippet": "void addOption(Option opt){\n  options.add(opt);\n}",
    "begin_line": 287,
    "end_line": 290,
    "comment": "/** \n * Add an option to the command line.  The values of  the option are stored.\n * @param opt the processed option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.iterator#298",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.iterator()",
    "snippet": "public Iterator iterator(){\n  return options.iterator();\n}",
    "begin_line": 298,
    "end_line": 301,
    "comment": "/** \n * Returns an iterator over the Option members of CommandLine.\n * @return an \u003ccode\u003eIterator\u003c/code\u003e over the processed {@link Option} members of this  {@link CommandLine}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CommandLine.getOptions#308",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/CommandLine.java",
    "class_name": "org.apache.commons.cli.CommandLine",
    "signature": "org.apache.commons.cli.CommandLine.getOptions()",
    "snippet": "public Option[] getOptions(){\n  Collection processed\u003doptions;\n  Option[] optionsArray\u003dnew Option[processed.size()];\n  return (Option[])processed.toArray(optionsArray);\n}",
    "begin_line": 308,
    "end_line": 317,
    "comment": "/** \n * Returns an array of the processed  {@link Option}s.\n * @return an array of the processed {@link Option}s.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#90",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String)",
    "snippet": "public Option(String opt,String description) throws IllegalArgumentException {\n  this(opt,null,false,description);\n}",
    "begin_line": 90,
    "end_line": 94,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#106",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, boolean, java.lang.String)",
    "snippet": "public Option(String opt,boolean hasArg,String description) throws IllegalArgumentException {\n  this(opt,null,hasArg,description);\n}",
    "begin_line": 106,
    "end_line": 110,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param hasArg specifies whether the Option takes an argument or not\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.Option#123",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.Option(java.lang.String, java.lang.String, boolean, java.lang.String)",
    "snippet": "public Option(String opt,String longOpt,boolean hasArg,String description) throws IllegalArgumentException {\n  OptionValidator.validateOption(opt);\n  this.opt\u003dopt;\n  this.longOpt\u003dlongOpt;\n  if (hasArg) {\n    this.numberOfArgs\u003d1;\n  }\n  this.hasArg\u003dhasArg;\n  this.description\u003ddescription;\n}",
    "begin_line": 123,
    "end_line": 141,
    "comment": "/** \n * Creates an Option using the specified parameters.\n * @param opt short representation of the option\n * @param longOpt the long representation of the option\n * @param hasArg specifies whether the Option takes an argument or not\n * @param description describes the function of the option\n * @throws IllegalArgumentException if there are any non validOption characters in \u003ccode\u003eopt\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getId#150",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getId()",
    "snippet": "public int getId(){\n  return getKey().charAt(0);\n}",
    "begin_line": 150,
    "end_line": 153,
    "comment": "/** \n * Returns the id of this Option.  This is only set when the Option shortOpt is a single character.  This is used for switch statements.\n * @return the id of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getKey#160",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getKey()",
    "snippet": "String getKey(){\n  if (opt \u003d\u003d null) {\n    return this.longOpt;\n  }\n  return this.opt;\n}",
    "begin_line": 160,
    "end_line": 169,
    "comment": "/** \n * Returns the \u0027unique\u0027 Option identifier.\n * @return the \u0027unique\u0027 Option identifier\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getOpt#181",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getOpt()",
    "snippet": "public String getOpt(){\n  return this.opt;\n}",
    "begin_line": 181,
    "end_line": 184,
    "comment": "/** \n * Retrieve the name of this Option. It is this String which can be used with {@link CommandLine#hasOption(String opt)} and{@link CommandLine#getOptionValue(String opt)} to checkfor existence and argument.\n * @return The name of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getType#191",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getType()",
    "snippet": "public Object getType(){\n  return this.type;\n}",
    "begin_line": 191,
    "end_line": 194,
    "comment": "/** \n * Retrieve the type of this Option.\n * @return The type of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setType#201",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setType(java.lang.Object)",
    "snippet": "public void setType(Object type){\n  this.type\u003dtype;\n}",
    "begin_line": 201,
    "end_line": 204,
    "comment": "/** \n * Sets the type of this Option.\n * @param type the type of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getLongOpt#211",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getLongOpt()",
    "snippet": "public String getLongOpt(){\n  return this.longOpt;\n}",
    "begin_line": 211,
    "end_line": 214,
    "comment": "/** \n * Retrieve the long name of this Option.\n * @return Long name of this option, or null, if there is no long name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setLongOpt#221",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setLongOpt(java.lang.String)",
    "snippet": "public void setLongOpt(String longOpt){\n  this.longOpt\u003dlongOpt;\n}",
    "begin_line": 221,
    "end_line": 224,
    "comment": "/** \n * Sets the long name of this Option.\n * @param longOpt the long name of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setOptionalArg#232",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setOptionalArg(boolean)",
    "snippet": "public void setOptionalArg(boolean optionalArg){\n  this.optionalArg\u003doptionalArg;\n}",
    "begin_line": 232,
    "end_line": 235,
    "comment": "/** \n * Sets whether this Option can have an optional argument.\n * @param optionalArg specifies whether the Option can havean optional argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasOptionalArg#240",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasOptionalArg()",
    "snippet": "public boolean hasOptionalArg(){\n  return this.optionalArg;\n}",
    "begin_line": 240,
    "end_line": 243,
    "comment": "/** \n * @return whether this Option can have an optional argument\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasLongOpt#250",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasLongOpt()",
    "snippet": "public boolean hasLongOpt(){\n  return (this.longOpt !\u003d null);\n}",
    "begin_line": 250,
    "end_line": 253,
    "comment": "/** \n * Query to see if this Option has a long name\n * @return boolean flag indicating existence of a long name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArg#260",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArg()",
    "snippet": "public boolean hasArg(){\n  return (this.numberOfArgs \u003e 0) || (numberOfArgs \u003d\u003d UNLIMITED_VALUES);\n}",
    "begin_line": 260,
    "end_line": 263,
    "comment": "/** \n * Query to see if this Option requires an argument\n * @return boolean flag indicating if an argument is required\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getDescription#270",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getDescription()",
    "snippet": "public String getDescription(){\n  return this.description;\n}",
    "begin_line": 270,
    "end_line": 273,
    "comment": "/** \n * Retrieve the self-documenting description of this Option\n * @return The string description of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setDescription#280",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setDescription(java.lang.String)",
    "snippet": "public void setDescription(String description){\n  this.description\u003ddescription;\n}",
    "begin_line": 280,
    "end_line": 283,
    "comment": "/** \n * Sets the self-documenting description of this Option\n * @param description The description of this option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.isRequired#290",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.isRequired()",
    "snippet": "public boolean isRequired(){\n  return this.required;\n}",
    "begin_line": 290,
    "end_line": 293,
    "comment": "/** \n * Query to see if this Option requires an argument\n * @return boolean flag indicating if an argument is required\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setRequired#300",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setRequired(boolean)",
    "snippet": "public void setRequired(boolean required){\n  this.required\u003drequired;\n}",
    "begin_line": 300,
    "end_line": 303,
    "comment": "/** \n * Sets whether this Option is mandatory.\n * @param required specifies whether this Option is mandatory\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setArgName#310",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setArgName(java.lang.String)",
    "snippet": "public void setArgName(String argName){\n  this.argName\u003dargName;\n}",
    "begin_line": 310,
    "end_line": 313,
    "comment": "/** \n * Sets the display name for the argument value.\n * @param argName the display name for the argument value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getArgName#320",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getArgName()",
    "snippet": "public String getArgName(){\n  return this.argName;\n}",
    "begin_line": 320,
    "end_line": 323,
    "comment": "/** \n * Gets the display name for the argument value.\n * @return the display name for the argument value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArgName#332",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArgName()",
    "snippet": "public boolean hasArgName(){\n  return (this.argName !\u003d null \u0026\u0026 this.argName.length() \u003e 0);\n}",
    "begin_line": 332,
    "end_line": 335,
    "comment": "/** \n * Returns whether the display name for the argument value has been set.\n * @return if the display name for the argument value has beenset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasArgs#342",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasArgs()",
    "snippet": "public boolean hasArgs(){\n  return (this.numberOfArgs \u003e 1) || (this.numberOfArgs \u003d\u003d UNLIMITED_VALUES);\n}",
    "begin_line": 342,
    "end_line": 346,
    "comment": "/** \n * Query to see if this Option can take many values.\n * @return boolean flag indicating if multiple values are allowed\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setArgs#353",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setArgs(int)",
    "snippet": "public void setArgs(int num){\n  this.numberOfArgs\u003dnum;\n}",
    "begin_line": 353,
    "end_line": 356,
    "comment": "/** \n * Sets the number of argument values this Option can take.\n * @param num the number of argument values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.setValueSeparator#364",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.setValueSeparator(char)",
    "snippet": "public void setValueSeparator(char sep){\n  this.valuesep\u003dsep;\n}",
    "begin_line": 364,
    "end_line": 367,
    "comment": "/** \n * Sets the value separator.  For example if the argument value was a Java property, the value separator would be \u0027\u003d\u0027.\n * @param sep The value separator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValueSeparator#374",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValueSeparator()",
    "snippet": "public char getValueSeparator(){\n  return this.valuesep;\n}",
    "begin_line": 374,
    "end_line": 377,
    "comment": "/** \n * Returns the value separator character.\n * @return the value separator character.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasValueSeparator#384",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasValueSeparator()",
    "snippet": "public boolean hasValueSeparator(){\n  return (this.valuesep \u003e 0);\n}",
    "begin_line": 384,
    "end_line": 387,
    "comment": "/** \n * Return whether this Option has specified a value separator.\n * @return whether this Option has specified a value separator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getArgs#394",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getArgs()",
    "snippet": "public int getArgs(){\n  return this.numberOfArgs;\n}",
    "begin_line": 394,
    "end_line": 397,
    "comment": "/** \n * Returns the number of argument values this Option can take.\n * @return num the number of argument values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.addValue#404",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.addValue(java.lang.String)",
    "snippet": "void addValue(String value){\nswitch (numberOfArgs) {\ncase UNINITIALIZED:    throw new RuntimeException(\"NO_ARGS_ALLOWED\");\ndefault:  processValue(value);\n}\n}",
    "begin_line": 404,
    "end_line": 414,
    "comment": "/** \n * Adds the specified value to this Option.\n * @param value is a/the value of this Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.processValue#427",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.processValue(java.lang.String)",
    "snippet": "private void processValue(String value){\n  if (hasValueSeparator()) {\n    char sep\u003dgetValueSeparator();\n    int index\u003dvalue.indexOf(sep);\n    while (index !\u003d -1) {\n      if (values.size() \u003d\u003d (numberOfArgs - 1)) {\n        break;\n      }\n      add(value.substring(0,index));\n      value\u003dvalue.substring(index + 1);\n      index\u003dvalue.indexOf(sep);\n    }\n  }\n  add(value);\n}",
    "begin_line": 427,
    "end_line": 464,
    "comment": "/** \n * Processes the value.  If this Option has a value separator the value will have to be parsed into individual tokens.  When n-1 tokens have been processed and there are more value separators in the value, parsing is ceased and the remaining characters are added as a single token.\n * @param value The String to be processed.\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.add#475",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.add(java.lang.String)",
    "snippet": "private void add(String value){\n  if ((numberOfArgs \u003e 0) \u0026\u0026 (values.size() \u003e (numberOfArgs - 1))) {\n    throw new RuntimeException(\"Cannot add value, list full.\");\n  }\n  this.values.add(value);\n}",
    "begin_line": 475,
    "end_line": 485,
    "comment": "/** \n * Add the value to this Option.  If the number of arguments is greater than zero and there is enough space in the list then add the value.  Otherwise, throw a runtime exception.\n * @param value The value to be added to this Option\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#494",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue()",
    "snippet": "public String getValue(){\n  return hasNoValues() ? null : (String)this.values.get(0);\n}",
    "begin_line": 494,
    "end_line": 497,
    "comment": "/** \n * Returns the specified value of this Option or  \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @return the value/first value of this Option or \u003ccode\u003enull\u003c/code\u003e if there is no value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#511",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue(int)",
    "snippet": "public String getValue(int index) throws IndexOutOfBoundsException {\n  return hasNoValues() ? null : (String)this.values.get(index);\n}",
    "begin_line": 511,
    "end_line": 515,
    "comment": "/** \n * Returns the specified value of this Option or  \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @param index The index of the value to be returned.\n * @return the specified value of this Option or \u003ccode\u003enull\u003c/code\u003e if there is no value.\n * @throws IndexOutOfBoundsException if index is less than 1or greater than the number of the values for this Option.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValue#527",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValue(java.lang.String)",
    "snippet": "public String getValue(String defaultValue){\n  String value\u003dgetValue();\n  return (value !\u003d null) ? value : defaultValue;\n}",
    "begin_line": 527,
    "end_line": 532,
    "comment": "/** \n * Returns the value/first value of this Option or the  \u003ccode\u003edefaultValue\u003c/code\u003e if there is no value.\n * @param defaultValue The value to be returned if theris no value.\n * @return the value/first value of this Option or the \u003ccode\u003edefaultValue\u003c/code\u003e if there are no values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValues#541",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValues()",
    "snippet": "public String[] getValues(){\n  return hasNoValues() ? null : (String[])this.values.toArray(new String[this.values.size()]);\n}",
    "begin_line": 541,
    "end_line": 545,
    "comment": "/** \n * Return the values of this Option as a String array  or null if there are no values\n * @return the values of this Option as a String array or null if there are no values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.getValuesList#551",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.getValuesList()",
    "snippet": "public java.util.List getValuesList(){\n  return this.values;\n}",
    "begin_line": 551,
    "end_line": 554,
    "comment": "/** \n * @return the values of this Option as a Listor null if there are no values\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.toString#561",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.toString()",
    "snippet": "public String toString(){\n  StringBuffer buf\u003dnew StringBuffer().append(\"[ option: \");\n  buf.append(this.opt);\n  if (this.longOpt !\u003d null) {\n    buf.append(\" \").append(this.longOpt);\n  }\n  buf.append(\" \");\n  if (hasArg) {\n    buf.append(\"+ARG\");\n  }\n  buf.append(\" :: \").append(this.description);\n  if (this.type !\u003d null) {\n    buf.append(\" :: \").append(this.type);\n  }\n  buf.append(\" ]\");\n  return buf.toString();\n}",
    "begin_line": 561,
    "end_line": 589,
    "comment": "/** \n * Dump state, suitable for debugging.\n * @return Stringified form of this object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hasNoValues#596",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hasNoValues()",
    "snippet": "private boolean hasNoValues(){\n  return this.values.size() \u003d\u003d 0;\n}",
    "begin_line": 596,
    "end_line": 599,
    "comment": "/** \n * Returns whether this Option has any values.\n * @return whether this Option has any values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.equals#601",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object o){\n  if (this \u003d\u003d o) {\n    return true;\n  }\n  if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {\n    return false;\n  }\n  Option option\u003d(Option)o;\n  if (opt !\u003d null ? !opt.equals(option.opt) : option.opt !\u003d null) {\n    return false;\n  }\n  if (longOpt !\u003d null ? !longOpt.equals(option.longOpt) : option.longOpt !\u003d null) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 601,
    "end_line": 625,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.hashCode#627",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003d(opt !\u003d null ? opt.hashCode() : 0);\n  result\u003d31 * result + (longOpt !\u003d null ? longOpt.hashCode() : 0);\n  return result;\n}",
    "begin_line": 627,
    "end_line": 633,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Option.clearValues#642",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Option.java",
    "class_name": "org.apache.commons.cli.Option",
    "signature": "org.apache.commons.cli.Option.clearValues()",
    "snippet": "void clearValues(){\n  this.values.clear();\n}",
    "begin_line": 642,
    "end_line": 644,
    "comment": "/** \n * \u003cp\u003eClear the Option values. After a  parse is complete, these are left with data in them  and they need clearing if another parse is done. \u003c/p\u003e See: \u003ca href\u003d\"https://issues.apache.org/jira/browse/CLI-71\"\u003eCLI-71\u003c/a\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.validateOption#41",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.validateOption(java.lang.String)",
    "snippet": "static void validateOption(String opt) throws IllegalArgumentException {\n  if (opt \u003d\u003d null) {\n    return;\n  }\n else   if (opt.length() \u003d\u003d 1) {\n    char ch\u003dopt.charAt(0);\n    if (!isValidOpt(ch)) {\n      throw new IllegalArgumentException(\"illegal option value \u0027\" + ch + \"\u0027\");\n    }\n  }\n else {\n    char[] chars\u003dopt.toCharArray();\n    for (int i\u003d0; i \u003c chars.length; i++) {\n      if (!isValidChar(chars[i])) {\n        throw new IllegalArgumentException(\"opt contains illegal character value \u0027\" + chars[i] + \"\u0027\");\n      }\n    }\n  }\n}",
    "begin_line": 41,
    "end_line": 77,
    "comment": "/** \n * \u003cp\u003eValidates whether \u003ccode\u003eopt\u003c/code\u003e is a permissable Option shortOpt.  The rules that specify if the \u003ccode\u003eopt\u003c/code\u003e is valid are:\u003c/p\u003e \u003cul\u003e \u003cli\u003e\u003ccode\u003eopt\u003c/code\u003e is not NULL\u003c/li\u003e \u003cli\u003ea single character \u003ccode\u003eopt\u003c/code\u003e that is either \u0027 \u0027(special case), \u0027?\u0027, \u0027@\u0027 or a letter\u003c/li\u003e \u003cli\u003ea multi character \u003ccode\u003eopt\u003c/code\u003e that only contains letters.\u003c/li\u003e \u003c/ul\u003e\n * @param opt The option string to validate\n * @throws IllegalArgumentException if the Option is not valid.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.isValidOpt#86",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.isValidOpt(char)",
    "snippet": "private static boolean isValidOpt(char c){\n  return (isValidChar(c) || (c \u003d\u003d \u0027 \u0027) || (c \u003d\u003d \u0027?\u0027)|| c \u003d\u003d \u0027@\u0027);\n}",
    "begin_line": 86,
    "end_line": 89,
    "comment": "/** \n * \u003cp\u003eReturns whether the specified character is a valid Option.\u003c/p\u003e\n * @param c the option to validate\n * @return true if \u003ccode\u003ec\u003c/code\u003e is a letter, \u0027 \u0027, \u0027?\u0027 or \u0027@\u0027, otherwise false.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionValidator.isValidChar#97",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/OptionValidator.java",
    "class_name": "org.apache.commons.cli.OptionValidator",
    "signature": "org.apache.commons.cli.OptionValidator.isValidChar(char)",
    "snippet": "private static boolean isValidChar(char c){\n  return Character.isJavaIdentifierPart(c);\n}",
    "begin_line": 97,
    "end_line": 100,
    "comment": "/** \n * \u003cp\u003eReturns whether the specified character is a valid character.\u003c/p\u003e\n * @param c the character to validate\n * @return true if \u003ccode\u003ec\u003c/code\u003e is a letter.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.Options#59",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.Options()",
    "snippet": "public Options(){\n}",
    "begin_line": 59,
    "end_line": 62,
    "comment": "/** \n * Construct a new Options descriptor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOptionGroup#70",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOptionGroup(org.apache.commons.cli.OptionGroup)",
    "snippet": "public Options addOptionGroup(OptionGroup group){\n  Iterator options\u003dgroup.getOptions().iterator();\n  if (group.isRequired()) {\n    requiredOpts.add(group);\n  }\n  while (options.hasNext()) {\n    Option option\u003d(Option)options.next();\n    option.setRequired(false);\n    addOption(option);\n    optionGroups.put(option.getKey(),group);\n  }\n  return this;\n}",
    "begin_line": 70,
    "end_line": 94,
    "comment": "/** \n * Add the specified option group.\n * @param group the OptionGroup that is to be added\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptionGroups#100",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptionGroups()",
    "snippet": "Collection getOptionGroups(){\n  return new HashSet(optionGroups.values());\n}",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Lists the OptionGroups that are members of this Options instance.\n * @return a Collection of OptionGroup instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#113",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, boolean, java.lang.String)",
    "snippet": "public Options addOption(String opt,boolean hasArg,String description){\n  addOption(opt,null,hasArg,description);\n  return this;\n}",
    "begin_line": 113,
    "end_line": 118,
    "comment": "/** \n * Add an option that only contains a short-name. It may be specified as requiring an argument.\n * @param opt Short single-character name of the option.\n * @param hasArg flag signally if an argument is required after this option\n * @param description Self-documenting description\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#130",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(java.lang.String, java.lang.String, boolean, java.lang.String)",
    "snippet": "public Options addOption(String opt,String longOpt,boolean hasArg,String description){\n  addOption(new Option(opt,longOpt,hasArg,description));\n  return this;\n}",
    "begin_line": 130,
    "end_line": 136,
    "comment": "/** \n * Add an option that contains a short-name and a long-name. It may be specified as requiring an argument.\n * @param opt Short single-character name of the option.\n * @param longOpt Long multi-character name of the option.\n * @param hasArg flag signally if an argument is required after this option\n * @param description Self-documenting description\n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.addOption#144",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.addOption(org.apache.commons.cli.Option)",
    "snippet": "public Options addOption(Option opt){\n  String key\u003dopt.getKey();\n  if (opt.hasLongOpt()) {\n    longOpts.put(opt.getLongOpt(),opt);\n  }\n  if (opt.isRequired()) {\n    if (requiredOpts.contains(key)) {\n      requiredOpts.remove(requiredOpts.indexOf(key));\n    }\n    requiredOpts.add(key);\n  }\n  shortOpts.put(key,opt);\n  return this;\n}",
    "begin_line": 144,
    "end_line": 166,
    "comment": "/** \n * Adds an option instance\n * @param opt the option that is to be added \n * @return the resulting Options instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptions#173",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptions()",
    "snippet": "public Collection getOptions(){\n  return Collections.unmodifiableCollection(helpOptions());\n}",
    "begin_line": 173,
    "end_line": 176,
    "comment": "/** \n * Retrieve a read-only list of options in this set\n * @return read-only Collection of {@link Option} objects in this descriptor\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.helpOptions#183",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.helpOptions()",
    "snippet": "List helpOptions(){\n  List opts\u003dnew ArrayList(shortOpts.values());\n  Iterator iter\u003dlongOpts.values().iterator();\n  while (iter.hasNext()) {\n    Object item\u003diter.next();\n    if (!opts.contains(item)) {\n      opts.add(item);\n    }\n  }\n  return new ArrayList(opts);\n}",
    "begin_line": 183,
    "end_line": 202,
    "comment": "/** \n * Returns the Options for use by the HelpFormatter.\n * @return the List of Options\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getRequiredOptions#210",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getRequiredOptions()",
    "snippet": "public List getRequiredOptions(){\n  return requiredOpts;\n}",
    "begin_line": 210,
    "end_line": 213,
    "comment": "/** \n * Returns the required options as a \u003ccode\u003ejava.util.Collection\u003c/code\u003e.\n * @return Collection of required options\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOption#221",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOption(java.lang.String)",
    "snippet": "public Option getOption(String opt){\n  opt\u003dUtil.stripLeadingHyphens(opt);\n  if (shortOpts.containsKey(opt)) {\n    return (Option)shortOpts.get(opt);\n  }\n  return (Option)longOpts.get(opt);\n}",
    "begin_line": 221,
    "end_line": 231,
    "comment": "/** \n * Retrieve the named  {@link Option}\n * @param opt short or long name of the {@link Option}\n * @return the option represented by opt\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.hasOption#241",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.hasOption(java.lang.String)",
    "snippet": "public boolean hasOption(String opt){\n  opt\u003dUtil.stripLeadingHyphens(opt);\n  return shortOpts.containsKey(opt) || longOpts.containsKey(opt);\n}",
    "begin_line": 241,
    "end_line": 246,
    "comment": "/** \n * Returns whether the named  {@link Option} is a memberof this  {@link Options}.\n * @param opt short or long name of the {@link Option}\n * @return true if the named {@link Option} is a memberof this  {@link Options}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.getOptionGroup#256",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.getOptionGroup(org.apache.commons.cli.Option)",
    "snippet": "public OptionGroup getOptionGroup(Option opt){\n  return (OptionGroup)optionGroups.get(opt.getKey());\n}",
    "begin_line": 256,
    "end_line": 259,
    "comment": "/** \n * Returns the OptionGroup the \u003ccode\u003eopt\u003c/code\u003e belongs to.\n * @param opt the option whose OptionGroup is being queried.\n * @return the OptionGroup if \u003ccode\u003eopt\u003c/code\u003e is partof an OptionGroup, otherwise return null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Options.toString#266",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Options.java",
    "class_name": "org.apache.commons.cli.Options",
    "signature": "org.apache.commons.cli.Options.toString()",
    "snippet": "public String toString(){\n  StringBuffer buf\u003dnew StringBuffer();\n  buf.append(\"[ Options: [ short \");\n  buf.append(shortOpts.toString());\n  buf.append(\" ] [ long \");\n  buf.append(longOpts);\n  buf.append(\" ]\");\n  return buf.toString();\n}",
    "begin_line": 266,
    "end_line": 277,
    "comment": "/** \n * Dump state, suitable for debugging.\n * @return Stringified form of this object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.flatten#55",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected abstract String[] flatten(Options opts,String[] arguments,boolean stopAtNonOption);",
    "begin_line": 55,
    "end_line": 56,
    "comment": "/** \n * \u003cp\u003eSubclasses must implement this method to reduce the \u003ccode\u003earguments\u003c/code\u003e that have been passed to the parse  method.\u003c/p\u003e\n * @param opts The Options to parse the arguments by.\n * @param arguments The arguments that have to be flattened.\n * @param stopAtNonOption specifies whether to stop flattening when a non option has been encountered\n * @return a String array of the flattened arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#68",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[])",
    "snippet": "public CommandLine parse(Options options,String[] arguments) throws ParseException {\n  return parse(options,arguments,null,false);\n}",
    "begin_line": 68,
    "end_line": 72,
    "comment": "/** \n * \u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e  based on the specifed  {@link Options}.\u003c/p\u003e\n * @param options the \u003ccode\u003eOptions\u003c/code\u003e\n * @param arguments the \u003ccode\u003earguments\u003c/code\u003e\n * @return the \u003ccode\u003eCommandLine\u003c/code\u003e\n * @throws ParseException if an error occurs when parsing thearguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#86",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties)",
    "snippet": "public CommandLine parse(Options options,String[] arguments,Properties properties) throws ParseException {\n  return parse(options,arguments,properties,false);\n}",
    "begin_line": 86,
    "end_line": 91,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options the specified Options\n * @param arguments the command line arguments\n * @param properties command line option name-value pairs\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#108",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "public CommandLine parse(Options options,String[] arguments,boolean stopAtNonOption) throws ParseException {\n  return parse(options,arguments,null,stopAtNonOption);\n}",
    "begin_line": 108,
    "end_line": 113,
    "comment": "/** \n * \u003cp\u003eParses the specified \u003ccode\u003earguments\u003c/code\u003e  based on the specifed  {@link Options}.\u003c/p\u003e\n * @param options the \u003ccode\u003eOptions\u003c/code\u003e\n * @param arguments the \u003ccode\u003earguments\u003c/code\u003e\n * @param stopAtNonOption specifies whether to stop interpreting the arguments when a non option has  been encountered and to add them to the CommandLines args list.\n * @return the \u003ccode\u003eCommandLine\u003c/code\u003e\n * @throws ParseException if an error occurs when parsing thearguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.parse#130",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.parse(org.apache.commons.cli.Options, java.lang.String[], java.util.Properties, boolean)",
    "snippet": "public CommandLine parse(Options options,String[] arguments,Properties properties,boolean stopAtNonOption) throws ParseException {\n  this.options\u003doptions;\n  for (Iterator it\u003doptions.helpOptions().iterator(); it.hasNext(); ) {\n    Option opt\u003d(Option)it.next();\n    opt.clearValues();\n  }\n  requiredOptions\u003doptions.getRequiredOptions();\n  cmd\u003dnew CommandLine();\n  boolean eatTheRest\u003dfalse;\n  if (arguments \u003d\u003d null) {\n    arguments\u003dnew String[0];\n  }\n  List tokenList\u003dArrays.asList(flatten(this.options,arguments,stopAtNonOption));\n  ListIterator iterator\u003dtokenList.listIterator();\n  while (iterator.hasNext()) {\n    String t\u003d(String)iterator.next();\n    if (\"--\".equals(t)) {\n      eatTheRest\u003dtrue;\n    }\n else     if (\"-\".equals(t)) {\n      if (stopAtNonOption) {\n        eatTheRest\u003dtrue;\n      }\n else {\n        cmd.addArg(t);\n      }\n    }\n else     if (t.startsWith(\"-\")) {\n      if (stopAtNonOption \u0026\u0026 !options.hasOption(t)) {\n        eatTheRest\u003dtrue;\n        cmd.addArg(t);\n      }\n else {\n        processOption(t,iterator);\n      }\n    }\n else {\n      cmd.addArg(t);\n      if (stopAtNonOption) {\n        eatTheRest\u003dtrue;\n      }\n    }\n    if (eatTheRest) {\n      while (iterator.hasNext()) {\n        String str\u003d(String)iterator.next();\n        if (!\"--\".equals(str)) {\n          cmd.addArg(str);\n        }\n      }\n    }\n  }\n  processProperties(properties);\n  checkRequiredOptions();\n  return cmd;\n}",
    "begin_line": 130,
    "end_line": 228,
    "comment": "/** \n * Parse the arguments according to the specified options and properties.\n * @param options the specified Options\n * @param arguments the command line arguments\n * @param properties command line option name-value pairs\n * @param stopAtNonOption stop parsing the arguments when the firstnon option is encountered.\n * @return the list of atomic option and value tokens\n * @throws ParseException if there are any problems encounteredwhile parsing the command line tokens.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processProperties#236",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processProperties(java.util.Properties)",
    "snippet": "private void processProperties(Properties properties){\n  if (properties \u003d\u003d null) {\n    return;\n  }\n  for (Enumeration e\u003dproperties.propertyNames(); e.hasMoreElements(); ) {\n    String option\u003de.nextElement().toString();\n    if (!cmd.hasOption(option)) {\n      Option opt\u003doptions.getOption(option);\n      String value\u003dproperties.getProperty(option);\n      if (opt.hasArg()) {\n        if ((opt.getValues() \u003d\u003d null) || (opt.getValues().length \u003d\u003d 0)) {\n          try {\n            opt.addValue(value);\n          }\n catch (          RuntimeException exp) {\n          }\n        }\n      }\n else       if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) {\n        break;\n      }\n      cmd.addOption(opt);\n    }\n  }\n}",
    "begin_line": 236,
    "end_line": 281,
    "comment": "/** \n * \u003cp\u003eSets the values of Options using the values in  \u003ccode\u003eproperties\u003c/code\u003e.\u003c/p\u003e\n * @param properties The value properties to be processed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.checkRequiredOptions#290",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.checkRequiredOptions()",
    "snippet": "private void checkRequiredOptions() throws MissingOptionException {\n  if (requiredOptions.size() \u003e 0) {\n    Iterator iter\u003drequiredOptions.iterator();\n    StringBuffer buff\u003dnew StringBuffer(\"Missing required option\");\n    buff.append(requiredOptions.size() \u003d\u003d 1 ? \"\" : \"s\");\n    buff.append(\": \");\n    while (iter.hasNext()) {\n      buff.append(iter.next());\n    }\n    throw new MissingOptionException(buff.toString());\n  }\n}",
    "begin_line": 290,
    "end_line": 311,
    "comment": "/** \n * \u003cp\u003eThrows a  {@link MissingOptionException} if all of therequired options are no present.\u003c/p\u003e\n * @throws MissingOptionException if any of the required Optionsare not present.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processArgs#325",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processArgs(org.apache.commons.cli.Option, java.util.ListIterator)",
    "snippet": "public void processArgs(Option opt,ListIterator iter) throws ParseException {\n  while (iter.hasNext()) {\n    String str\u003d(String)iter.next();\n    if (options.hasOption(str) \u0026\u0026 str.startsWith(\"-\")) {\n      iter.previous();\n      break;\n    }\n    try {\n      opt.addValue(Util.stripLeadingAndTrailingQuotes(str));\n    }\n catch (    RuntimeException exp) {\n      iter.previous();\n      break;\n    }\n  }\n  if ((opt.getValues() \u003d\u003d null) \u0026\u0026 !opt.hasOptionalArg()) {\n    throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey());\n  }\n}",
    "begin_line": 325,
    "end_line": 357,
    "comment": "/** \n * \u003cp\u003eProcess the argument values for the specified Option \u003ccode\u003eopt\u003c/code\u003e using the values retrieved from the  specified iterator \u003ccode\u003eiter\u003c/code\u003e.\n * @param opt The current Option\n * @param iter The iterator over the flattened command lineOptions.\n * @throws ParseException if an argument value is requiredand it is has not been found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Parser.processOption#371",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Parser.java",
    "class_name": "org.apache.commons.cli.Parser",
    "signature": "org.apache.commons.cli.Parser.processOption(java.lang.String, java.util.ListIterator)",
    "snippet": "private void processOption(String arg,ListIterator iter) throws ParseException {\n  boolean hasOption\u003doptions.hasOption(arg);\n  if (!hasOption) {\n    throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg);\n  }\n  final Option opt\u003doptions.getOption(arg);\n  if (opt.isRequired()) {\n    requiredOptions.remove(opt.getKey());\n  }\n  if (options.getOptionGroup(opt) !\u003d null) {\n    OptionGroup group\u003doptions.getOptionGroup(opt);\n    if (group.isRequired()) {\n      requiredOptions.remove(group);\n    }\n    group.setSelected(opt);\n  }\n  if (opt.hasArg()) {\n    processArgs(opt,iter);\n  }\n  cmd.addOption(opt);\n}",
    "begin_line": 371,
    "end_line": 416,
    "comment": "/** \n * \u003cp\u003eProcess the Option specified by \u003ccode\u003earg\u003c/code\u003e using the values retrieved from the specfied iterator \u003ccode\u003eiter\u003c/code\u003e.\n * @param arg The String value representing an Option\n * @param iter The iterator over the flattened command line arguments.\n * @throws ParseException if \u003ccode\u003earg\u003c/code\u003e does notrepresent an Option\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.init#50",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.init()",
    "snippet": "private void init(){\n  eatTheRest\u003dfalse;\n  tokens.clear();\n  currentOption\u003dnull;\n}",
    "begin_line": 50,
    "end_line": 55,
    "comment": "/** \n * \u003cp\u003eResets the members to their original state i.e. remove all of \u003ccode\u003etokens\u003c/code\u003e entries, set \u003ccode\u003eeatTheRest\u003c/code\u003e to false and set \u003ccode\u003ecurrentOption\u003c/code\u003e to null.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.flatten#95",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.flatten(org.apache.commons.cli.Options, java.lang.String[], boolean)",
    "snippet": "protected String[] flatten(Options options,String[] arguments,boolean stopAtNonOption){\n  init();\n  this.options\u003doptions;\n  Iterator iter\u003dArrays.asList(arguments).iterator();\n  String token;\n  while (iter.hasNext()) {\n    token\u003d(String)iter.next();\n    if (token.startsWith(\"--\")) {\n      if (token.indexOf(\u0027\u003d\u0027) !\u003d -1) {\n        tokens.add(token.substring(0,token.indexOf(\u0027\u003d\u0027)));\n        tokens.add(token.substring(token.indexOf(\u0027\u003d\u0027) + 1,token.length()));\n      }\n else {\n        tokens.add(token);\n      }\n    }\n else     if (\"-\".equals(token)) {\n      processSingleHyphen(token);\n    }\n else     if (token.startsWith(\"-\")) {\n      int tokenLength\u003dtoken.length();\n      if (tokenLength \u003d\u003d 2) {\n        processOptionToken(token,stopAtNonOption);\n      }\n else       if (options.hasOption(token)) {\n        tokens.add(token);\n      }\n else {\n        burstToken(token,stopAtNonOption);\n      }\n    }\n else {\n      if (stopAtNonOption) {\n        process(token);\n      }\n else {\n        tokens.add(token);\n      }\n    }\n    gobble(iter);\n  }\n  return (String[])tokens.toArray(new String[tokens.size()]);\n}",
    "begin_line": 95,
    "end_line": 164,
    "comment": "/** \n * \u003cp\u003eAn implementation of  {@link Parser}\u0027s abstract {@link Parser#flatten(Options,String[],boolean) flatten} method.\u003c/p\u003e\u003cp\u003eThe following are the rules used by this flatten method. \u003col\u003e \u003cli\u003eif \u003ccode\u003estopAtNonOption\u003c/code\u003e is \u003cb\u003etrue\u003c/b\u003e then do not burst anymore of \u003ccode\u003earguments\u003c/code\u003e entries, just add each successive entry without further processing.  Otherwise, ignore \u003ccode\u003estopAtNonOption\u003c/code\u003e.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e--\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is \"\u003cb\u003e-\u003c/b\u003e\" just add the entry to the list of processed tokens\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then check if this is a valid  {@link Option} id.  If it is a valid id, then add theentry to the list of processed tokens and set the current  {@link Option}member.  If it is not a valid id and \u003ccode\u003estopAtNonOption\u003c/code\u003e is true, then the remaining entries are copied to the list of  processed tokens.  Otherwise, the current entry is ignored.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is more than two characters in length and the first character is \"\u003cb\u003e-\u003c/b\u003e\" then we need to burst the entry to determine its constituents.  For more information on the bursting algorithm see  {@link PosixParser#burstToken(String,boolean) burstToken}.\u003c/li\u003e \u003cli\u003eif the current \u003ccode\u003earguments\u003c/code\u003e entry is not handled  by any of the previous rules, then the entry is added to the list of processed tokens.\u003c/li\u003e \u003c/ol\u003e \u003c/p\u003e\n * @param options The command line {@link Options}\n * @param arguments The command line arguments to be parsed\n * @param stopAtNonOption Specifies whether to stop flatteningwhen an non option is found.\n * @return The flattened \u003ccode\u003earguments\u003c/code\u003e String array.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.gobble#171",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.gobble(java.util.Iterator)",
    "snippet": "private void gobble(Iterator iter){\n  if (eatTheRest) {\n    while (iter.hasNext()) {\n      tokens.add(iter.next());\n    }\n  }\n}",
    "begin_line": 171,
    "end_line": 180,
    "comment": "/** \n * \u003cp\u003eAdds the remaining tokens to the processed tokens list.\u003c/p\u003e\n * @param iter An iterator over the remaining tokens\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.process#195",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.process(java.lang.String)",
    "snippet": "private void process(String value){\n  if ((currentOption !\u003d null) \u0026\u0026 currentOption.hasArg()) {\n    if (currentOption.hasArg()) {\n      tokens.add(value);\n      currentOption\u003dnull;\n    }\n else     if (currentOption.hasArgs()) {\n      tokens.add(value);\n    }\n  }\n else {\n    eatTheRest\u003dtrue;\n    tokens.add(\"--\");\n    tokens.add(value);\n  }\n}",
    "begin_line": 195,
    "end_line": 215,
    "comment": "/** \n * \u003cp\u003eIf there is a current option and it can have an argument value then add the token to the processed tokens list and  set the current option to null.\u003c/p\u003e \u003cp\u003eIf there is a current option and it can have argument values then add the token to the processed tokens list.\u003c/p\u003e \u003cp\u003eIf there is not a current option add the special token \"\u003cb\u003e--\u003c/b\u003e\" and the current \u003ccode\u003evalue\u003c/code\u003e to the processed tokens list.  The add all the remaining \u003ccode\u003eargument\u003c/code\u003e values to the processed tokens list.\u003c/p\u003e\n * @param value The current token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.processSingleHyphen#223",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.processSingleHyphen(java.lang.String)",
    "snippet": "private void processSingleHyphen(String hyphen){\n  tokens.add(hyphen);\n}",
    "begin_line": 223,
    "end_line": 226,
    "comment": "/** \n * \u003cp\u003eIf it is a hyphen then add the hyphen directly to the processed tokens list.\u003c/p\u003e\n * @param hyphen The hyphen token\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.processOptionToken#240",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.processOptionToken(java.lang.String, boolean)",
    "snippet": "private void processOptionToken(String token,boolean stopAtNonOption){\n  if (this.options.hasOption(token)) {\n    currentOption\u003dthis.options.getOption(token);\n    tokens.add(token);\n  }\n else   if (stopAtNonOption) {\n    eatTheRest\u003dtrue;\n  }\n}",
    "begin_line": 240,
    "end_line": 251,
    "comment": "/** \n * \u003cp\u003eIf an  {@link Option} exists for \u003ccode\u003etoken\u003c/code\u003e thenset the current option and add the token to the processed  list.\u003c/p\u003e \u003cp\u003eIf an  {@link Option} does not exist and \u003ccode\u003estopAtNonOption\u003c/code\u003eis set then ignore the current token and add the remaining tokens to the processed tokens list directly.\u003c/p\u003e\n * @param token The current option token\n * @param stopAtNonOption Specifies whether flattening should haltat the first non option.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PosixParser.burstToken#279",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/PosixParser.java",
    "class_name": "org.apache.commons.cli.PosixParser",
    "signature": "org.apache.commons.cli.PosixParser.burstToken(java.lang.String, boolean)",
    "snippet": "protected void burstToken(String token,boolean stopAtNonOption){\n  int tokenLength\u003dtoken.length();\n  for (int i\u003d1; i \u003c tokenLength; i++) {\n    String ch\u003dString.valueOf(token.charAt(i));\n    boolean hasOption\u003doptions.hasOption(ch);\n    if (hasOption) {\n      tokens.add(\"-\" + ch);\n      currentOption\u003doptions.getOption(ch);\n      if (currentOption.hasArg() \u0026\u0026 (token.length() !\u003d (i + 1))) {\n        tokens.add(token.substring(i + 1));\n        break;\n      }\n    }\n else     if (stopAtNonOption) {\n      process(token.substring(i));\n    }\n else {\n      tokens.add(token);\n      break;\n    }\n  }\n}",
    "begin_line": 279,
    "end_line": 310,
    "comment": "/** \n * \u003cp\u003eBreaks \u003ccode\u003etoken\u003c/code\u003e into its constituent parts using the following algorithm. \u003cul\u003e \u003cli\u003eignore the first character (\"\u003cb\u003e-\u003c/b\u003e\")\u003c/li\u003e \u003cli\u003eforeach remaining character check if an  {@link Option}exists with that id.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does exist then add that characterprepended with \"\u003cb\u003e-\u003c/b\u003e\" to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif the  {@link Option} can have an argument value and there are remaining characters in the token then add the remaining  characters as a token to the list of processed tokens.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e \u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS\u003c/b\u003e set then add the special token \"\u003cb\u003e--\u003c/b\u003e\" followed by the remaining characters and also  the remaining tokens directly to the processed tokens list.\u003c/li\u003e \u003cli\u003eif an  {@link Option} does \u003cb\u003eNOT\u003c/b\u003e exist \u003cb\u003eAND\u003c/b\u003e\u003ccode\u003estopAtNonOption\u003c/code\u003e \u003cb\u003eIS NOT\u003c/b\u003e set then add that character prepended with \"\u003cb\u003e-\u003c/b\u003e\".\u003c/li\u003e \u003c/ul\u003e \u003c/p\u003e\n * @param token The current token to be \u003cb\u003eburst\u003c/b\u003e\n * @param stopAtNonOption Specifies whether to stop processingat the first non-Option encountered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Util.stripLeadingHyphens#34",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Util.java",
    "class_name": "org.apache.commons.cli.Util",
    "signature": "org.apache.commons.cli.Util.stripLeadingHyphens(java.lang.String)",
    "snippet": "static String stripLeadingHyphens(String str){\n  if (str.startsWith(\"--\")) {\n    return str.substring(2,str.length());\n  }\n else   if (str.startsWith(\"-\")) {\n    return str.substring(1,str.length());\n  }\n  return str;\n}",
    "begin_line": 34,
    "end_line": 46,
    "comment": "/** \n * \u003cp\u003eRemove the hyphens from the begining of \u003ccode\u003estr\u003c/code\u003e and return the new String.\u003c/p\u003e\n * @param str The string from which the hyphens should be removed.\n * @return the new String.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Util.stripLeadingAndTrailingQuotes#57",
    "is_bug": true,
    "src_path": "org/apache/commons/cli/Util.java",
    "class_name": "org.apache.commons.cli.Util",
    "signature": "org.apache.commons.cli.Util.stripLeadingAndTrailingQuotes(java.lang.String)",
    "snippet": "static String stripLeadingAndTrailingQuotes(String str){\n  if (str.startsWith(\"\\\"\")) {\n    str\u003dstr.substring(1,str.length());\n  }\n  if (str.endsWith(\"\\\"\")) {\n    str\u003dstr.substring(0,str.length() - 1);\n  }\n  return str;\n}",
    "begin_line": 57,
    "end_line": 66,
    "comment": "/** \n * Remove the leading and trailing quotes from \u003ccode\u003estr\u003c/code\u003e. E.g. if str is \u0027\"one two\"\u0027, then \u0027one two\u0027 is returned.\n * @param str The string from which the leading and trailing quotesshould be removed.\n * @return The string without the leading and trailing quotes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]