[
  {
    "name": "ReferenceProperty.ReferenceProperty#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty(com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type, java.lang.String)",
    "snippet": "public ReferenceProperty(Type t,String n){\n  _type\u003dt;\n  _name\u003dn;\n}",
    "begin_line": 79,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.managed#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.managed(java.lang.String)",
    "snippet": "public static ReferenceProperty managed(String name){\n  return new ReferenceProperty(Type.MANAGED_REFERENCE,name);\n}",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.back#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.back(java.lang.String)",
    "snippet": "public static ReferenceProperty back(String name){\n  return new ReferenceProperty(Type.BACK_REFERENCE,name);\n}",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.getType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.getType()",
    "snippet": "public Type getType(){\n  return _type;\n}",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.getName#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.getName()",
    "snippet": "public String getName(){\n  return _name;\n}",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isManagedReference#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isManagedReference()",
    "snippet": "public boolean isManagedReference(){\n  return _type \u003d\u003d Type.MANAGED_REFERENCE;\n}",
    "begin_line": 90,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isBackReference#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isBackReference()",
    "snippet": "public boolean isBackReference(){\n  return _type \u003d\u003d Type.BACK_REFERENCE;\n}",
    "begin_line": 91,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.nopInstance#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.nopInstance()",
    "snippet": "public static AnnotationIntrospector nopInstance(){\n  return NopAnnotationIntrospector.instance;\n}",
    "begin_line": 105,
    "end_line": 107,
    "comment": "/** \n * Factory method for accessing \"no operation\" implementation of introspector: instance that will never find any annotation-based configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.pair#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.pair(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public static AnnotationIntrospector pair(AnnotationIntrospector a1,AnnotationIntrospector a2){\n  return new AnnotationIntrospectorPair(a1,a2);\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.allIntrospectors#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors()",
    "snippet": "public Collection\u003cAnnotationIntrospector\u003e allIntrospectors(){\n  return Collections.singletonList(this);\n}",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Method that can be used to collect all \"real\" introspectors that this introspector contains, if any; or this introspector if it is not a container. Used to get access to all container introspectors in their priority order. \u003cp\u003e Default implementation returns a Singleton list with this introspector as contents. This usually works for sub-classes, except for proxy or delegating \"container introspectors\" which need to override implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.allIntrospectors#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.allIntrospectors(java.util.Collection\u003ccom.fasterxml.jackson.databind.AnnotationIntrospector\u003e)",
    "snippet": "public Collection\u003cAnnotationIntrospector\u003e allIntrospectors(Collection\u003cAnnotationIntrospector\u003e result){\n  result.add(this);\n  return result;\n}",
    "begin_line": 144,
    "end_line": 147,
    "comment": "/** \n * Method that can be used to collect all \"real\" introspectors that this introspector contains, if any; or this introspector if it is not a container. Used to get access to all container introspectors in their priority order. \u003cp\u003e Default implementation adds this introspector in result; this usually works for sub-classes, except for proxy or delegating \"container introspectors\" which need to override implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.version#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.version()",
    "snippet": "@Override public abstract Version version();",
    "begin_line": 156,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isAnnotationBundle#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isAnnotationBundle(java.lang.annotation.Annotation)",
    "snippet": "public boolean isAnnotationBundle(Annotation ann){\n  return false;\n}",
    "begin_line": 171,
    "end_line": 173,
    "comment": "/** \n * Method for checking whether given annotation is considered an annotation bundle: if so, all meta-annotations it has will be used instead of annotation (\"bundle\") itself.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findObjectIdInfo#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public ObjectIdInfo findObjectIdInfo(Annotated ann){\n  return null;\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Method for checking whether given annotated thing (type, or accessor) indicates that values referenced (values of type of annotated class, or values referenced by annotated property; latter having precedence) should include Object Identifier, and if so, specify details of Object Identity used.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findObjectReferenceInfo#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdInfo findObjectReferenceInfo(Annotated ann,ObjectIdInfo objectIdInfo){\n  return objectIdInfo;\n}",
    "begin_line": 200,
    "end_line": 202,
    "comment": "/** \n * Method for figuring out additional properties of an Object Identity reference\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findRootName#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public PropertyName findRootName(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 220,
    "end_line": 222,
    "comment": "/** \n * Method for locating name used as \"root name\" (for use by some serializers when outputting root-level object -- mostly for XML compatibility purposes) for given class, if one is defined. Returns null if no declaration found; can return explicit empty String, which is usually ignored as well as null. \u003cp\u003e  NOTE: method signature changed in 2.1, to return  {@link PropertyName}instead of String.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyIgnorals#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonIgnoreProperties.Value findPropertyIgnorals(Annotated ac){\n  return JsonIgnoreProperties.Value.empty();\n}",
    "begin_line": 234,
    "end_line": 239,
    "comment": "/** \n * Method for finding information about properties to ignore either by name, or by more general specification (\"ignore all unknown\"). This method combines multiple aspects of ignorals and deprecates earlier methods such as {@link #findPropertiesToIgnore(Annotated,boolean)} and{@link #findIgnoreUnknownProperties(AnnotatedClass)}.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isIgnorableType#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Boolean isIgnorableType(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 252,
    "end_line": 252,
    "comment": "/** \n * Method for checking whether properties that have specified type (class, not generics aware) should be completely ignored for serialization and deserialization purposes.\n * @param ac Type to check\n * @return Boolean.TRUE if properties of type should be ignored;Boolean.FALSE if they are not to be ignored, null for default handling (which is \u0027do not ignore\u0027)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findFilterId#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findFilterId(Annotated ann){\n  return null;\n}",
    "begin_line": 261,
    "end_line": 261,
    "comment": "/** \n * Method for finding if annotated class has associated filter; and if so, to return id that is used to locate filter.\n * @return Id of the filter to use for filtering properties of annotatedclass, if any; or null if none found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNamingStrategy#274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Object findNamingStrategy(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 274,
    "end_line": 274,
    "comment": "/** \n * Method for finding  {@link PropertyNamingStrategy} for givenclass, if any specified by annotations; and if so, either return a  {@link PropertyNamingStrategy} instance, or Class to use forcreating instance\n * @return Sub-class or instance of {@link PropertyNamingStrategy}, if one is specified for given class; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findClassDescription#287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String findClassDescription(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 287,
    "end_line": 287,
    "comment": "/** \n * Method used to check whether specified class defines a human-readable description to use for documentation. There are no further definitions for contents; for example, whether these may be marked up using HTML (or something like wiki format like Markup) is not defined.\n * @return Human-readable description, if any.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertiesToIgnore#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertiesToIgnore(com.fasterxml.jackson.databind.introspect.Annotated, boolean)",
    "snippet": "@Deprecated public String[] findPropertiesToIgnore(Annotated ac,boolean forSerialization){\n  return null;\n}",
    "begin_line": 298,
    "end_line": 300,
    "comment": "/** \n * @param forSerialization True if requesting properties to ignore for serialization;false if for deserialization\n * @since 2.6\n * @deprecated Since 2.8, use {@link #findPropertyIgnorals} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertiesToIgnore#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertiesToIgnore(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated public String[] findPropertiesToIgnore(Annotated ac){\n  return null;\n}",
    "begin_line": 306,
    "end_line": 308,
    "comment": "/** \n * @deprecated Since 2.6, use variant that takes second argument.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findIgnoreUnknownProperties#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findIgnoreUnknownProperties(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Deprecated public Boolean findIgnoreUnknownProperties(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 316,
    "end_line": 316,
    "comment": "/** \n * Method for checking whether an annotation indicates that all unknown properties\n * @deprecated Since 2.8, use {@link #findPropertyIgnorals} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findAutoDetectVisibility#331",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public VisibilityChecker\u003c?\u003e findAutoDetectVisibility(AnnotatedClass ac,VisibilityChecker\u003c?\u003e checker){\n  return checker;\n}",
    "begin_line": 331,
    "end_line": 333,
    "comment": "/** \n * Method for checking if annotations indicate changes to minimum visibility levels needed for auto-detecting property elements (fields, methods, constructors). A baseline checker is given, and introspector is to either return it as is (if no annotations are found), or build and return a derived instance (using checker\u0027s build methods).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findTypeResolver#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedClass ac,JavaType baseType){\n  return null;\n}",
    "begin_line": 355,
    "end_line": 358,
    "comment": "/** \n * Method for checking if given class has annotations that indicate that specific type resolver is to be used for handling instances. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param ac Annotated class to check for annotations\n * @param baseType Base java type of value for which resolver is to be found\n * @return Type resolver builder for given type, if one found; null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyTypeResolver#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findPropertyTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedMember am,JavaType baseType){\n  return null;\n}",
    "begin_line": 375,
    "end_line": 378,
    "comment": "/** \n * Method for checking if given property entity (field or method) has annotations that indicate that specific type resolver is to be used for handling instances. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param am Annotated member (field or method) to check for annotations\n * @param baseType Base java type of property for which resolver is to be found\n * @return Type resolver builder for properties of given entity, if one found;null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyContentTypeResolver#397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e findPropertyContentTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedMember am,JavaType containerType){\n  return null;\n}",
    "begin_line": 397,
    "end_line": 400,
    "comment": "/** \n * Method for checking if given structured property entity (field or method that has nominal value of Map, Collection or array type) has annotations that indicate that specific type resolver is to be used for handling type information of contained values. This includes not only instantiating resolver builder, but also configuring it based on relevant annotations (not including ones checked with a call to {@link #findSubtypes}\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param am Annotated member (field or method) to check for annotations\n * @param containerType Type of property for which resolver is to be found (must be a container type)\n * @return Type resolver builder for values contained in properties of given entity,if one found; null if none\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSubtypes#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public List\u003cNamedType\u003e findSubtypes(Annotated a){\n  return null;\n}",
    "begin_line": 411,
    "end_line": 411,
    "comment": "/** \n * Method for locating annotation-specified subtypes related to annotated entity (class, method, field). Note that this is only guaranteed to be a list of directly declared subtypes, no recursive processing is guarantees (i.e. caller has to do it if/as necessary)\n * @param a Annotated entity (class, field/method) to check for annotations\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findTypeName#418",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String findTypeName(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 418,
    "end_line": 418,
    "comment": "/** \n * Method for checking if specified type has explicit name.\n * @param ac Class to check for type name annotations\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.isTypeId#425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Boolean isTypeId(AnnotatedMember member){\n  return null;\n}",
    "begin_line": 425,
    "end_line": 425,
    "comment": "/** \n * Method for checking whether given accessor claims to represent type id: if so, its value may be used as an override, instead of generated type id.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findReferenceType#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public ReferenceProperty findReferenceType(AnnotatedMember member){\n  return null;\n}",
    "begin_line": 437,
    "end_line": 437,
    "comment": "/** \n * Method for checking if given member indicates that it is part of a reference (parent/child).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findUnwrappingNameTransformer#447",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member){\n  return null;\n}",
    "begin_line": 447,
    "end_line": 447,
    "comment": "/** \n * Method called to check whether given property is marked to be \"unwrapped\" when being serialized (and appropriately handled in reverse direction, i.e. expect unwrapped representation during deserialization). Return value is the name transformation to use, if wrapping/unwrapping should  be done, or null if not -- note that transformation may simply be identity transformation (no changes).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasIgnoreMarker#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public boolean hasIgnoreMarker(AnnotatedMember m){\n  return false;\n}",
    "begin_line": 456,
    "end_line": 456,
    "comment": "/** \n * Method called to check whether given property is marked to be ignored. This is used to determine whether to ignore properties, on per-property basis, usually combining annotations from multiple accessors (getters, setters, fields, constructor parameters).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findInjectableValue#473",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public JacksonInject.Value findInjectableValue(AnnotatedMember m){\n  Object id\u003dfindInjectableValueId(m);\n  if (id !\u003d null) {\n    return JacksonInject.Value.forId(id);\n  }\n  return null;\n}",
    "begin_line": 473,
    "end_line": 481,
    "comment": "/** \n * Method called to find out whether given member expectes a value to be injected, and if so, what is the identifier of the value to use during injection. Type if identifier needs to be compatible with provider of values (of type  {@link InjectableValues}); often a simple String id is used.\n * @param m Member to check\n * @return Identifier of value to inject, if any; null if no injectionindicator is found\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasRequiredMarker#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Boolean hasRequiredMarker(AnnotatedMember m){\n  return null;\n}",
    "begin_line": 488,
    "end_line": 488,
    "comment": "/** \n * Method that can be called to check whether this member has an annotation that suggests whether value for matching property is required or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findViews#506",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Class\u003c?\u003e[] findViews(Annotated a){\n  return null;\n}",
    "begin_line": 506,
    "end_line": 506,
    "comment": "/** \n * Method for checking if annotated property (represented by a field or getter/setter method) has definitions for views it is to be included in. If null is returned, no view definitions exist and property is always included (or always excluded as per default view inclusion configuration); otherwise it will only be included for views included in returned array. View matches are checked using class inheritance rules (sub-classes inherit inclusions of super-classes) \u003cp\u003e Since 2.9 this method may also be called to find \"default view(s)\" for {@link AnnotatedClass}\n * @param a Annotated property (represented by a method, field or ctor parameter)\n * @return Array of views (represented by classes) that the property is included in;if null, always included (same as returning array containing \u003ccode\u003eObject.class\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findFormat#516",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonFormat.Value findFormat(Annotated memberOrClass){\n  return JsonFormat.Value.empty();\n}",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Method for finding format annotations for property or class. Return value is typically used by serializers and/or deserializers to customize presentation aspects of the serialized value.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findWrapperName#531",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findWrapperName(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findWrapperName(Annotated ann){\n  return null;\n}",
    "begin_line": 531,
    "end_line": 531,
    "comment": "/** \n * Method used to check if specified property has annotation that indicates that it should be wrapped in an element; and if so, name to use. Note that not all serializers and deserializers support use this method: currently (2.1) it is only used by XML-backed handlers.\n * @return Wrapper name to use, if any, or {@link PropertyName#USE_DEFAULT}to indicate that no wrapper element should be used.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyDefaultValue#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public String findPropertyDefaultValue(Annotated ann){\n  return null;\n}",
    "begin_line": 541,
    "end_line": 541,
    "comment": "/** \n * Method for finding suggested default value (as simple textual serialization) for the property. While core databind does not make any use of it, it is exposed for extension modules to use: an expected use is generation of schema representations and documentation.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyDescription#553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public String findPropertyDescription(Annotated ann){\n  return null;\n}",
    "begin_line": 553,
    "end_line": 553,
    "comment": "/** \n * Method used to check whether specified property member (accessor or mutator) defines human-readable description to use for documentation. There are no further definitions for contents; for example, whether these may be marked up using HTML is not defined.\n * @return Human-readable description, if any.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyIndex#566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Integer findPropertyIndex(Annotated ann){\n  return null;\n}",
    "begin_line": 566,
    "end_line": 566,
    "comment": "/** \n * Method used to check whether specified property member (accessor or mutator) defines numeric index, and if so, what is the index value. Possible use cases for index values included use by underlying data format (some binary formats mandate use of index instead of name) and ordering of properties (for documentation, or during serialization).\n * @since 2.4\n * @return Explicitly specified index for the property, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findImplicitPropertyName#581",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public String findImplicitPropertyName(AnnotatedMember member){\n  return null;\n}",
    "begin_line": 581,
    "end_line": 581,
    "comment": "/** \n * Method for finding implicit name for a property that given annotated member (field, method, creator parameter) may represent. This is different from explicit, annotation-based property name, in that it is \"weak\" and does not either proof that a property exists (for example, if visibility is not high enough), or override explicit names. In practice this method is used to introspect optional names for creator parameters (which may or may not be available and cannot be detected by standard databind); or to provide alternate name mangling for fields, getters and/or setters.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyAliases#591",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public List\u003cPropertyName\u003e findPropertyAliases(Annotated ann){\n  return null;\n}",
    "begin_line": 591,
    "end_line": 591,
    "comment": "/** \n * Method called to find if given property has alias(es) defined.\n * @return `null` if member has no information; otherwise a `List` (possiblyempty) of aliases to use.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyAccess#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonProperty.Access findPropertyAccess(Annotated ann){\n  return null;\n}",
    "begin_line": 602,
    "end_line": 602,
    "comment": "/** \n * Method for finding optional access definition for a property, annotated on one of its accessors. If a definition for read-only, write-only or read-write cases, visibility rules may be modified. Note, however, that even more specific annotations (like one for ignoring specific accessor) may further override behavior of the access definition.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.resolveSetterConflict#612",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public AnnotatedMethod resolveSetterConflict(MapperConfig\u003c?\u003e config,AnnotatedMethod setter1,AnnotatedMethod setter2){\n  return null;\n}",
    "begin_line": 612,
    "end_line": 615,
    "comment": "/** \n * Method called in cases where a class has two methods eligible to be used for the same logical property, and default logic is not enough to figure out clear precedence. Introspector may try to choose one to use; or, if unable, return `null` to indicate it cannot resolve the problem.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findInjectableValueId#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Deprecated public Object findInjectableValueId(AnnotatedMember m){\n  return null;\n}",
    "begin_line": 621,
    "end_line": 623,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #findInjectableValue} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializer#638",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findSerializer(Annotated am){\n  return null;\n}",
    "begin_line": 638,
    "end_line": 640,
    "comment": "/** \n * Method for getting a serializer definition on specified method or field. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findKeySerializer#649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findKeySerializer(Annotated am){\n  return null;\n}",
    "begin_line": 649,
    "end_line": 651,
    "comment": "/** \n * Method for getting a serializer definition for keys of associated \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findContentSerializer#661",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findContentSerializer(Annotated am){\n  return null;\n}",
    "begin_line": 661,
    "end_line": 663,
    "comment": "/** \n * Method for getting a serializer definition for content (values) of associated \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003earray\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonSerializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonSerializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNullSerializer#671",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findNullSerializer(Annotated am){\n  return null;\n}",
    "begin_line": 671,
    "end_line": 673,
    "comment": "/** \n * Method for getting a serializer definition for serializer to use for nulls (null values) of associated property or type.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationTyping#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonSerialize.Typing findSerializationTyping(Annotated a){\n  return null;\n}",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Method for accessing declared typing mode annotated (if any). This is used for type detection, unless more granular settings (such as actual exact type; or serializer to use which means no type information is needed) take precedence.\n * @return Typing mode to use, if annotation is found; null otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationConverter#708",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findSerializationConverter(Annotated a){\n  return null;\n}",
    "begin_line": 708,
    "end_line": 710,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated entity(property or class) has indicated to be used as part of serialization. If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used first to convert property value to converter target type, and then serializer for that type is used for actual serialization. \u003cp\u003e This feature is typically used to convert internal values into types that Jackson can convert. \u003cp\u003e Note also that this feature does not necessarily work well with polymorphic type handling, or object identity handling; if such features are needed an explicit serializer is usually better way to handle serialization.\n * @param a Annotated property (field, method) or class to check forannotations\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationContentConverter#730",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Object findSerializationContentConverter(AnnotatedMember a){\n  return null;\n}",
    "begin_line": 730,
    "end_line": 732,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated propertyhas indicated needs to be used for values of container type (this also means that method should only be called for properties of container types, List/Map/array properties). \u003cp\u003e If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used first to convert property value to converter target type, and then serializer for that type is used for actual serialization. \u003cp\u003e Other notes are same as those for  {@link #findSerializationConverter}\n * @param a Annotated property (field, method) to check.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPropertyInclusion#742",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonInclude.Value findPropertyInclusion(Annotated a){\n  return JsonInclude.Value.empty();\n}",
    "begin_line": 742,
    "end_line": 744,
    "comment": "/** \n * Method for checking inclusion criteria for a type (Class) or property (yes, method name is bit unfortunate -- not just for properties!). In case of class, acts as the default for properties POJO contains; for properties acts as override for class defaults and possible global defaults.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationInclusion#764",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationInclusion(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Include)",
    "snippet": "@Deprecated public JsonInclude.Include findSerializationInclusion(Annotated a,JsonInclude.Include defValue){\n  return defValue;\n}",
    "begin_line": 764,
    "end_line": 766,
    "comment": "/** \n * Method for checking whether given annotated entity (class, method, field) defines which Bean/Map properties are to be included in serialization. If no annotation is found, method should return given second argument; otherwise value indicated by the annotation. \u003cp\u003e Note that meaning of inclusion value depends on whether it is for a Class or property (field/method/constructor): in former case, it is the default for all properties; in latter case it is specific override for annotated property.\n * @return Enumerated value indicating which properties to includein serialization\n * @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationInclusionForContent#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationInclusionForContent(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Include)",
    "snippet": "@Deprecated public JsonInclude.Include findSerializationInclusionForContent(Annotated a,JsonInclude.Include defValue){\n  return defValue;\n}",
    "begin_line": 778,
    "end_line": 780,
    "comment": "/** \n * Method for checking whether content (entries) of a  {@link java.util.Map} propertyare to be included during serialization or not. NOTE: this is NOT called for POJO properties, or array/Collection elements.\n * @since 2.5\n * @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.refineSerializationType#795",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType refineSerializationType(final MapperConfig\u003c?\u003e config,final Annotated a,final JavaType baseType) throws JsonMappingException {\n  return baseType;\n}",
    "begin_line": 795,
    "end_line": 799,
    "comment": "/** \n * Method called to find out possible type refinements to use for deserialization, including not just value itself but key and/or content type, if type has those.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationType#805",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated public Class\u003c?\u003e findSerializationType(Annotated a){\n  return null;\n}",
    "begin_line": 805,
    "end_line": 807,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationKeyType#813",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Class\u003c?\u003e findSerializationKeyType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 813,
    "end_line": 815,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationContentType#821",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Class\u003c?\u003e findSerializationContentType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 821,
    "end_line": 823,
    "comment": "/** \n * @deprecated Since 2.7 call {@link #refineSerializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationPropertyOrder#835",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public String[] findSerializationPropertyOrder(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 835,
    "end_line": 837,
    "comment": "/** \n * Method for accessing defined property serialization order (which may be partial). May return null if no ordering is defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSerializationSortAlphabetically#844",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean findSerializationSortAlphabetically(Annotated ann){\n  return null;\n}",
    "begin_line": 844,
    "end_line": 846,
    "comment": "/** \n * Method for checking whether an annotation indicates that serialized properties for which no explicit is defined should be alphabetically (lexicograpically) ordered\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findAndAddVirtualProperties#854",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "public void findAndAddVirtualProperties(MapperConfig\u003c?\u003e config,AnnotatedClass ac,List\u003cBeanPropertyWriter\u003e properties){\n}",
    "begin_line": 854,
    "end_line": 855,
    "comment": "/** \n * Method for adding possible virtual properties to be serialized along with regular properties.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNameForSerialization#877",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findNameForSerialization(Annotated a){\n  return null;\n}",
    "begin_line": 877,
    "end_line": 879,
    "comment": "/** \n * Method for checking whether given property accessors (method, field) has an annotation that suggests property name to use for serialization. Should return null if no annotation is found; otherwise a non-null name (possibly {@link PropertyName#USE_DEFAULT}, which means \"use default heuristics\").\n * @param a Property accessor to check\n * @return Name to use if found; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAsValue#894",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAsValue(Annotated a){\n  if (a instanceof AnnotatedMethod) {\n    if (hasAsValueAnnotation((AnnotatedMethod)a)) {\n      return true;\n    }\n  }\n  return null;\n}",
    "begin_line": 894,
    "end_line": 902,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the return value of annotated method should be used as \"the value\" of the object instance; usually serialized as a primitive value such as String or number.\n * @return {@link Boolean#TRUE} if such annotation is found and is not disabled;{@link Boolean#FALSE} if disabled annotation (block) is found (to indicateaccessor is definitely NOT to be used \"as value\"); or `null` if no information found.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnyGetter#915",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAnyGetter(Annotated a){\n  if (a instanceof AnnotatedMethod) {\n    if (hasAnyGetterAnnotation((AnnotatedMethod)a)) {\n      return true;\n    }\n  }\n  return null;\n}",
    "begin_line": 915,
    "end_line": 924,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the method is to serve as \"any setter\"; method to be used for accessing set of miscellaneous \"extra\" properties, often bound with matching \"any setter\" method.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findEnumValues#937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findEnumValues(java.lang.Class\u003c?\u003e, java.lang.Enum\u003c?\u003e[], java.lang.String[])",
    "snippet": "public String[] findEnumValues(Class\u003c?\u003e enumType,Enum\u003c?\u003e[] enumValues,String[] names){\n  return names;\n}",
    "begin_line": 937,
    "end_line": 940,
    "comment": "/** \n * Method for efficiently figuring out which if given set of \u003ccode\u003eEnum\u003c/code\u003e values have explicitly defined name. Method will overwrite entries in incoming \u003ccode\u003enames\u003c/code\u003e array with explicit names found, if any, leaving other entries unmodified. \u003cp\u003e Default implementation will simply delegate to  {@link #findEnumValue}, which is close enough, although unfortunately NOT 100% equivalent (as it will also consider \u003ccode\u003ename()\u003c/code\u003e to give explicit value).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDefaultEnumValue#950",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDefaultEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e)",
    "snippet": "public Enum\u003c?\u003e findDefaultEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumCls){\n  return null;\n}",
    "begin_line": 950,
    "end_line": 952,
    "comment": "/** \n * Finds the Enum value that should be considered the default value, if possible.\n * @param enumCls The Enum class to scan for the default value.\n * @return null if none found or it\u0027s not possible to determine one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findEnumValue#967",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findEnumValue(java.lang.Enum\u003c?\u003e)",
    "snippet": "@Deprecated public String findEnumValue(Enum\u003c?\u003e value){\n  return value.name();\n}",
    "begin_line": 967,
    "end_line": 969,
    "comment": "/** \n * Method for determining the String value to use for serializing given enumeration entry; used when serializing enumerations as Strings (the standard method).\n * @return Serialized enum value.\n * @deprecated Since 2.8: use {@link #findEnumValues} instead because this methoddoes not properly handle override settings (defaults to \u003ccode\u003eenum.name\u003c/code\u003e without indicating whether that is explicit or not), and is inefficient to call one-by-one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAsValueAnnotation#975",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated public boolean hasAsValueAnnotation(AnnotatedMethod am){\n  return false;\n}",
    "begin_line": 975,
    "end_line": 977,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #hasAsValue(Annotated)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnyGetterAnnotation#983",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated public boolean hasAnyGetterAnnotation(AnnotatedMethod am){\n  return false;\n}",
    "begin_line": 983,
    "end_line": 985,
    "comment": "/** \n * @deprecated Since 2.9 Use {@link #hasAnyGetter} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializer#1001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findDeserializer(Annotated am){\n  return null;\n}",
    "begin_line": 1001,
    "end_line": 1003,
    "comment": "/** \n * Method for getting a deserializer definition on specified method or field. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findKeyDeserializer#1013",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findKeyDeserializer(Annotated am){\n  return null;\n}",
    "begin_line": 1013,
    "end_line": 1015,
    "comment": "/** \n * Method for getting a deserializer definition for keys of associated \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findContentDeserializer#1026",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findContentDeserializer(Annotated am){\n  return null;\n}",
    "begin_line": 1026,
    "end_line": 1028,
    "comment": "/** \n * Method for getting a deserializer definition for content (values) of associated \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003earray\u003c/code\u003e or \u003ccode\u003eMap\u003c/code\u003e property. Type of definition is either instance (of type {@link JsonDeserializer}) or Class (of type \u003ccode\u003eClass\u0026lt;JsonDeserializer\u003e\u003c/code\u003e); if value of different type is returned, a runtime exception may be thrown by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationConverter#1052",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Object findDeserializationConverter(Annotated a){\n  return null;\n}",
    "begin_line": 1052,
    "end_line": 1054,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated entity(property or class) has indicated to be used as part of deserialization. If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used after Jackson has deserializer data into intermediate type (Converter input type), and Converter needs to convert this into its target type to be set as property value. \u003cp\u003e This feature is typically used to convert intermediate Jackson types (that default deserializers can produce) into custom type instances. \u003cp\u003e Note also that this feature does not necessarily work well with polymorphic type handling, or object identity handling; if such features are needed an explicit deserializer is usually better way to handle deserialization.\n * @param a Annotated property (field, method) or class to check forannotations\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationContentConverter#1074",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public Object findDeserializationContentConverter(AnnotatedMember a){\n  return null;\n}",
    "begin_line": 1074,
    "end_line": 1076,
    "comment": "/** \n * Method for finding  {@link Converter} that annotated propertyhas indicated needs to be used for values of container type (this also means that method should only be called for properties of container types, List/Map/array properties). \u003cp\u003e If not null, either has to be actual {@link Converter} instance, or class for such converter;and resulting converter will be used after Jackson has deserializer data into intermediate type (Converter input type), and Converter needs to convert this into its target type to be set as property value. \u003cp\u003e Other notes are same as those for  {@link #findDeserializationConverter}\n * @param a Annotated property (field, method) to check.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.refineDeserializationType#1090",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType refineDeserializationType(final MapperConfig\u003c?\u003e config,final Annotated a,final JavaType baseType) throws JsonMappingException {\n  return baseType;\n}",
    "begin_line": 1090,
    "end_line": 1094,
    "comment": "/** \n * Method called to find out possible type refinements to use for deserialization.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationType#1110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Class\u003c?\u003e findDeserializationType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 1110,
    "end_line": 1112,
    "comment": "/** \n * Method for accessing annotated type definition that a property can have, to be used as the type for deserialization instead of the static (declared) type. Type is usually narrowing conversion (i.e.subtype of declared type). Declared return type of the method is also considered acceptable.\n * @param baseType Assumed type before considering annotations\n * @return Class to use for deserialization instead of declared type\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationKeyType#1127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Class\u003c?\u003e findDeserializationKeyType(Annotated am,JavaType baseKeyType){\n  return null;\n}",
    "begin_line": 1127,
    "end_line": 1129,
    "comment": "/** \n * Method for accessing additional narrowing type definition that a method can have, to define more specific key type to use. It should be only be used with  {@link java.util.Map} types.\n * @param baseKeyType Assumed key type before considering annotations\n * @return Class specifying more specific type to use instead ofdeclared type, if annotation found; null if not\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findDeserializationContentType#1145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Class\u003c?\u003e findDeserializationContentType(Annotated am,JavaType baseContentType){\n  return null;\n}",
    "begin_line": 1145,
    "end_line": 1147,
    "comment": "/** \n * Method for accessing additional narrowing type definition that a method can have, to define more specific content type to use; content refers to Map values and Collection/array elements. It should be only be used with Map, Collection and array types.\n * @param baseContentType Assumed content (value) type before considering annotations\n * @return Class specifying more specific type to use instead ofdeclared type, if annotation found; null if not\n * @deprecated Since 2.7 call {@link #refineDeserializationType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findValueInstantiator#1160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Object findValueInstantiator(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 1160,
    "end_line": 1162,
    "comment": "/** \n * Method getting  {@link ValueInstantiator} to use for giventype (class): return value can either be an instance of instantiator, or class of instantiator to create.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPOJOBuilder#1177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Class\u003c?\u003e findPOJOBuilder(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 1177,
    "end_line": 1179,
    "comment": "/** \n * Method for finding Builder object to use for constructing value instance and binding data (sort of combining value instantiators that can construct, and deserializers that can bind data). \u003cp\u003e Note that unlike accessors for some helper Objects, this method does not allow returning instances: the reason is that builders have state, and a separate instance needs to be created for each deserialization call.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findPOJOBuilderConfig#1184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac){\n  return null;\n}",
    "begin_line": 1184,
    "end_line": 1186,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findNameForDeserialization#1208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public PropertyName findNameForDeserialization(Annotated a){\n  return null;\n}",
    "begin_line": 1208,
    "end_line": 1210,
    "comment": "/** \n * Method for checking whether given property accessors (method, field) has an annotation that suggests property name to use for deserialization (reading JSON into POJOs). Should return null if no annotation is found; otherwise a non-null name (possibly {@link PropertyName#USE_DEFAULT}, which means \"use default heuristics\").\n * @param a Property accessor to check\n * @return Name to use if found; null if not.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnySetter#1223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean hasAnySetter(Annotated a){\n  return null;\n}",
    "begin_line": 1223,
    "end_line": 1225,
    "comment": "/** \n * Method for checking whether given method has an annotation that suggests that the method is to serve as \"any setter\"; method to be used for setting values of any properties for which no dedicated setter method is found.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findSetterInfo#1233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonSetter.Value findSetterInfo(Annotated a){\n  return JsonSetter.Value.empty();\n}",
    "begin_line": 1233,
    "end_line": 1235,
    "comment": "/** \n * Method for finding possible settings for property, given annotations on an accessor.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findMergeInfo#1242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public Boolean findMergeInfo(Annotated a){\n  return null;\n}",
    "begin_line": 1242,
    "end_line": 1244,
    "comment": "/** \n * Method for finding merge settings for property, if any.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findCreatorAnnotation#1261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public JsonCreator.Mode findCreatorAnnotation(MapperConfig\u003c?\u003e config,Annotated a){\n  if (hasCreatorAnnotation(a)) {\n    JsonCreator.Mode mode\u003dfindCreatorBinding(a);\n    if (mode \u003d\u003d null) {\n      mode\u003dJsonCreator.Mode.DEFAULT;\n    }\n    return mode;\n  }\n  return null;\n}",
    "begin_line": 1261,
    "end_line": 1272,
    "comment": "/** \n * Method called to check whether potential Creator (constructor or static factory method) has explicit annotation to indicate it as actual Creator; and if so, which  {@link com.fasterxml.jackson.annotation.JsonCreator.Mode} to use.\u003cp\u003e NOTE: caller needs to consider possibility of both `null` (no annotation found) and  {@link com.fasterxml.jackson.annotation.JsonCreator.Mode#DISABLED} (annotation found,but disabled); latter is necessary as marker in case multiple introspectors are chained, as well as possibly as when using mix-in annotations.\n * @param config Configuration settings in effect (for serialization or deserialization)\n * @param a Annotated accessor (usually constructor or static method) to check\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasCreatorAnnotation#1287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated public boolean hasCreatorAnnotation(Annotated a){\n  return false;\n}",
    "begin_line": 1287,
    "end_line": 1289,
    "comment": "/** \n * Method for checking whether given annotated item (method, constructor) has an annotation that suggests that the method is a \"creator\" (aka factory) method to be used for construct new instances of deserialized values.\n * @return True if such annotation is found (and is not disabled),false otherwise\n * @deprecated Since 2.9 use {@link #findCreatorAnnotation} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.findCreatorBinding#1301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Deprecated public JsonCreator.Mode findCreatorBinding(Annotated a){\n  return null;\n}",
    "begin_line": 1301,
    "end_line": 1303,
    "comment": "/** \n * Method for finding indication of creator binding mode for a creator (something for which  {@link #hasCreatorAnnotation} returnstrue), for cases where there may be ambiguity (currently: single-argument creator with implicit but no explicit name for the argument).\n * @since 2.5\n * @deprecated Since 2.9 use {@link #findCreatorAnnotation} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty.hasAnySetterAnnotation#1309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector.hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Deprecated public boolean hasAnySetterAnnotation(AnnotatedMethod am){\n  return false;\n}",
    "begin_line": 1309,
    "end_line": 1311,
    "comment": "/** \n * @deprecated Since 2.9 use {@link #hasAnySetter} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._findAnnotation#1334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._findAnnotation(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003cA\u003e)",
    "snippet": "protected \u003cA extends Annotation\u003eA _findAnnotation(Annotated annotated,Class\u003cA\u003e annoClass){\n  return annotated.getAnnotation(annoClass);\n}",
    "begin_line": 1334,
    "end_line": 1337,
    "comment": "/** \n * Method that should be used by sub-classes for ALL annotation access; overridable so  that sub-classes may, if they choose to, mangle actual access to block access (\"hide\" annotations) or perhaps change it. \u003cp\u003e Default implementation is simply: \u003ccode\u003e return annotated.getAnnotation(annoClass); \u003c/code\u003e\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._hasAnnotation#1352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._hasAnnotation(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e)",
    "snippet": "protected boolean _hasAnnotation(Annotated annotated,Class\u003c? extends Annotation\u003e annoClass){\n  return annotated.hasAnnotation(annoClass);\n}",
    "begin_line": 1352,
    "end_line": 1354,
    "comment": "/** \n * Method that should be used by sub-classes for ALL annotation existence access; overridable so  that sub-classes may, if they choose to, mangle actual access to block access (\"hide\" annotations) or perhaps change value seen. \u003cp\u003e Default implementation is simply: \u003ccode\u003e return annotated.hasAnnotation(annoClass); \u003c/code\u003e\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ReferenceProperty._hasOneOf#1362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/AnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.AnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.AnnotationIntrospector._hasOneOf(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "protected boolean _hasOneOf(Annotated annotated,Class\u003c? extends Annotation\u003e[] annoClasses){\n  return annotated.hasOneOf(annoClasses);\n}",
    "begin_line": 1362,
    "end_line": 1364,
    "comment": "/** \n * Alternative lookup method that is used to see if annotation has at least one of annotations of types listed in second argument.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.BeanDescription#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.BeanDescription(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BeanDescription(JavaType type){\n  _type\u003dtype;\n}",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getType#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getType()",
    "snippet": "public JavaType getType(){\n  return _type;\n}",
    "begin_line": 50,
    "end_line": 50,
    "comment": "/** \n * Method for accessing declared type of bean being introspected, including full generic type information (from declaration)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getBeanClass#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getBeanClass()",
    "snippet": "public Class\u003c?\u003e getBeanClass(){\n  return _type.getRawClass();\n}",
    "begin_line": 52,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.isNonStaticInnerClass#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.isNonStaticInnerClass()",
    "snippet": "public boolean isNonStaticInnerClass(){\n  return getClassInfo().isNonStaticInnerClass();\n}",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getClassInfo#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getClassInfo()",
    "snippet": "public abstract AnnotatedClass getClassInfo();",
    "begin_line": 65,
    "end_line": 65,
    "comment": "/** \n * Method for accessing low-level information about Class this item describes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getObjectIdInfo#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getObjectIdInfo()",
    "snippet": "public abstract ObjectIdInfo getObjectIdInfo();",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Accessor for getting information about Object Id expected to be used for this POJO type, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.hasKnownClassAnnotations#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.hasKnownClassAnnotations()",
    "snippet": "public abstract boolean hasKnownClassAnnotations();",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * Method for checking whether class being described has any annotations recognized by registered annotation introspector.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.bindingsForBeanType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.bindingsForBeanType()",
    "snippet": "@Deprecated public abstract TypeBindings bindingsForBeanType();",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * Accessor for type bindings that may be needed to fully resolve types of member object, such as return and argument types of methods and constructors, and types of fields.\n * @deprecated Since 2.7, should not need to access bindings directly\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.resolveType#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.resolveType(java.lang.reflect.Type)",
    "snippet": "@Deprecated public abstract JavaType resolveType(java.lang.reflect.Type jdkType);",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * Method for resolving given JDK type, using this bean as the generic type resolution context.\n * @deprecated Since 2.8, should simply call \u003ccode\u003egetType\u003c/code\u003e ofproperty accessor directly.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getClassAnnotations#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getClassAnnotations()",
    "snippet": "public abstract Annotations getClassAnnotations();",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * Method for accessing collection of annotations the bean class has.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findProperties#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findProperties()",
    "snippet": "public abstract List\u003cBeanPropertyDefinition\u003e findProperties();",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * @return Ordered Map with logical property name as key, andmatching getter method as value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getIgnoredPropertyNames#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getIgnoredPropertyNames()",
    "snippet": "public abstract Set\u003cString\u003e getIgnoredPropertyNames();",
    "begin_line": 117,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findBackReferences#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findBackReferences()",
    "snippet": "public abstract List\u003cBeanPropertyDefinition\u003e findBackReferences();",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * Method for locating all back-reference properties (setters, fields) bean has\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findBackReferenceProperties#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findBackReferenceProperties()",
    "snippet": "@Deprecated public abstract Map\u003cString,AnnotatedMember\u003e findBackReferenceProperties();",
    "begin_line": 132,
    "end_line": 132,
    "comment": "/** \n * Method for locating all back-reference properties (setters, fields) bean has\n * @deprecated Since 2.9 use {@link #findBackReferences()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getConstructors#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getConstructors()",
    "snippet": "public abstract List\u003cAnnotatedConstructor\u003e getConstructors();",
    "begin_line": 140,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.getFactoryMethods#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.getFactoryMethods()",
    "snippet": "public abstract List\u003cAnnotatedMethod\u003e getFactoryMethods();",
    "begin_line": 142,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDefaultConstructor#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDefaultConstructor()",
    "snippet": "public abstract AnnotatedConstructor findDefaultConstructor();",
    "begin_line": 149,
    "end_line": 149,
    "comment": "/** \n * Method that will locate the no-arg constructor for this class, if it has one, and that constructor has not been marked as ignorable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findSingleArgConstructor#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findSingleArgConstructor(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Constructor\u003c?\u003e findSingleArgConstructor(Class\u003c?\u003e... argTypes);",
    "begin_line": 157,
    "end_line": 157,
    "comment": "/** \n * Method that can be called to locate a single-arg constructor that takes specified exact type (will not accept supertype constructors)\n * @param argTypes Type(s) of the argument that we are looking for\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findFactoryMethod#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findFactoryMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Method findFactoryMethod(Class\u003c?\u003e... expArgTypes);",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Method that can be called to find if introspected class declares a static \"valueOf\" factory method that returns an instance of introspected type, given one of acceptable types.\n * @param expArgTypes Types that the matching single argument factorymethod can take: will also accept super types of these types (ie. arg just has to be assignable from expArgType)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findJsonValueAccessor#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findJsonValueAccessor()",
    "snippet": "public abstract AnnotatedMember findJsonValueAccessor();",
    "begin_line": 185,
    "end_line": 185,
    "comment": "/** \n * Method for locating accessor (readable field, or \"getter\" method) that has {@link com.fasterxml.jackson.annotation.JsonValue} annotation,if any. If multiple ones are found, an error is reported by throwing  {@link IllegalArgumentException}\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnyGetter#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnyGetter()",
    "snippet": "public abstract AnnotatedMember findAnyGetter();",
    "begin_line": 187,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetterAccessor#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetterAccessor()",
    "snippet": "public abstract AnnotatedMember findAnySetterAccessor();",
    "begin_line": 201,
    "end_line": 201,
    "comment": "/** \n * Method used to locate a mutator (settable field, or 2-argument set method) of introspected class that implements  {@link com.fasterxml.jackson.annotation.JsonAnySetter}. If no such mutator exists null is returned. If more than one are found, an exception is thrown. Additional checks are also made to see that method signature is acceptable: needs to take 2 arguments, first one String or Object; second any can be any type.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findMethod#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public abstract AnnotatedMethod findMethod(String name,Class\u003c?\u003e[] paramTypes);",
    "begin_line": 203,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findJsonValueMethod#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findJsonValueMethod()",
    "snippet": "@Deprecated public abstract AnnotatedMethod findJsonValueMethod();",
    "begin_line": 206,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetter#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetter()",
    "snippet": "@Deprecated public AnnotatedMethod findAnySetter(){\n  AnnotatedMember m\u003dfindAnySetterAccessor();\n  if (m instanceof AnnotatedMethod) {\n    return (AnnotatedMethod)m;\n  }\n  return null;\n}",
    "begin_line": 212,
    "end_line": 218,
    "comment": "/** \n * @deprecated Since 2.9: use {@link #findAnySetterAccessor} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findAnySetterField#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findAnySetterField()",
    "snippet": "@Deprecated public AnnotatedMember findAnySetterField(){\n  AnnotatedMember m\u003dfindAnySetterAccessor();\n  if (m instanceof AnnotatedField) {\n    return m;\n  }\n  return null;\n}",
    "begin_line": 224,
    "end_line": 230,
    "comment": "/** \n * @deprecated Since 2.9: use {@link #findAnySetterAccessor} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPropertyInclusion#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPropertyInclusion(JsonInclude.Value)",
    "snippet": "public abstract JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue);",
    "begin_line": 247,
    "end_line": 247,
    "comment": "/** \n * Method for finding annotation-indicated inclusion definition (if any); possibly overriding given default value. \u003cp\u003e NOTE: does NOT use global inclusion default settings as the base, unless passed as `defValue`.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findExpectedFormat#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findExpectedFormat(JsonFormat.Value)",
    "snippet": "public abstract JsonFormat.Value findExpectedFormat(JsonFormat.Value defValue);",
    "begin_line": 256,
    "end_line": 256,
    "comment": "/** \n * Method for checking what is the expected format for POJO, as defined by defaults and possible annotations. Note that this may be further refined by per-property annotations.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findSerializationConverter#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findSerializationConverter()",
    "snippet": "public abstract Converter\u003cObject,Object\u003e findSerializationConverter();",
    "begin_line": 264,
    "end_line": 264,
    "comment": "/** \n * Method for finding  {@link Converter} used for serializing instancesof this class.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDeserializationConverter#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDeserializationConverter()",
    "snippet": "public abstract Converter\u003cObject,Object\u003e findDeserializationConverter();",
    "begin_line": 272,
    "end_line": 272,
    "comment": "/** \n * Method for finding  {@link Converter} used for serializing instancesof this class.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findClassDescription#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findClassDescription()",
    "snippet": "public String findClassDescription(){\n  return null;\n}",
    "begin_line": 280,
    "end_line": 280,
    "comment": "/** \n * Accessor for possible description for the bean type, used for constructing documentation.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findInjectables#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findInjectables()",
    "snippet": "public abstract Map\u003cObject,AnnotatedMember\u003e findInjectables();",
    "begin_line": 288,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPOJOBuilder#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPOJOBuilder()",
    "snippet": "public abstract Class\u003c?\u003e findPOJOBuilder();",
    "begin_line": 296,
    "end_line": 296,
    "comment": "/** \n * Method for checking if the POJO type has annotations to indicate that a builder is to be used for instantiating instances and handling data binding, instead of standard bean deserializer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findPOJOBuilderConfig#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findPOJOBuilderConfig()",
    "snippet": "public abstract JsonPOJOBuilder.Value findPOJOBuilderConfig();",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * Method for finding configuration for POJO Builder class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.instantiateBean#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.instantiateBean(boolean)",
    "snippet": "public abstract Object instantiateBean(boolean fixAccess);",
    "begin_line": 315,
    "end_line": 315,
    "comment": "/** \n * Method called to create a \"default instance\" of the bean, currently only needed for obtaining default field values which may be used for suppressing serialization of fields that have \"not changed\".\n * @param fixAccess If true, method is allowed to fix access to thedefault constructor (to be able to call non-public constructor); if false, has to use constructor as is.\n * @return Instance of class represented by this descriptor, ifsuitable default constructor was found; null otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDescription.findDefaultViews#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/BeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.BeanDescription",
    "signature": "com.fasterxml.jackson.databind.BeanDescription.findDefaultViews()",
    "snippet": "public abstract Class\u003c?\u003e[] findDefaultViews();",
    "begin_line": 324,
    "end_line": 324,
    "comment": "/** \n * Method for finding out if the POJO specifies default view(s) to use for properties, considering both per-type annotations and global default settings.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getConfig#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getConfig()",
    "snippet": "public abstract MapperConfig\u003c?\u003e getConfig();",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Accessor to currently active configuration (both per-request configs and per-mapper config).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getAnnotationIntrospector#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getAnnotationIntrospector()",
    "snippet": "public abstract AnnotationIntrospector getAnnotationIntrospector();",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Convenience method for accessing serialization view in use (if any); equivalent to: \u003cpre\u003e getConfig().getAnnotationIntrospector(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.isEnabled#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract boolean isEnabled(MapperFeature feature);",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for: \u003cpre\u003e getConfig().isEnabled(feature); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.canOverrideAccessModifiers#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.canOverrideAccessModifiers()",
    "snippet": "public abstract boolean canOverrideAccessModifiers();",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * Convenience method for accessing serialization view in use (if any); equivalent to: \u003cpre\u003e getConfig().canOverrideAccessModifiers(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getActiveView#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getActiveView()",
    "snippet": "public abstract Class\u003c?\u003e getActiveView();",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * Accessor for locating currently active view, if any; returns null if no view has been set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getLocale#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getLocale()",
    "snippet": "public abstract Locale getLocale();",
    "begin_line": 90,
    "end_line": 90,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getTimeZone#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getTimeZone()",
    "snippet": "public abstract TimeZone getTimeZone();",
    "begin_line": 95,
    "end_line": 95,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getDefaultPropertyFormat#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType);",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getAttribute#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getAttribute(java.lang.Object)",
    "snippet": "public abstract Object getAttribute(Object key);",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * Method for accessing attributes available in this context. Per-call attributes have highest precedence; attributes set via  {@link ObjectReader} or {@link ObjectWriter} have lowerprecedence.\n * @param key Key of the attribute to get\n * @return Value of the attribute, if any; null otherwise\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.setAttribute#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract DatabindContext setAttribute(Object key,Object value);",
    "begin_line": 133,
    "end_line": 133,
    "comment": "/** \n * Method for setting per-call value of given attribute. This will override any previously defined value for the attribute within this context.\n * @param key Key of the attribute to set\n * @param value Value to set attribute to\n * @return This context object, to allow chaining\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.constructType#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type type){\n  if (type \u003d\u003d null) {\n    return null;\n  }\n  return getTypeFactory().constructType(type);\n}",
    "begin_line": 145,
    "end_line": 150,
    "comment": "/** \n * Convenience method for constructing  {@link JavaType} for given JDKtype (usually  {@link java.lang.Class})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.constructSpecializedType#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType,Class\u003c?\u003e subclass){\n  if (baseType.getRawClass() \u003d\u003d subclass) {\n    return baseType;\n  }\n  return getConfig().constructSpecializedType(baseType,subclass);\n}",
    "begin_line": 156,
    "end_line": 162,
    "comment": "/** \n * Convenience method for constructing subtypes, retaining generic type parameter (if any)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.resolveSubType#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.resolveSubType(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public JavaType resolveSubType(JavaType baseType,String subClass) throws JsonMappingException {\n  if (subClass.indexOf(\u0027\u003c\u0027) \u003e 0) {\n    JavaType t\u003dgetTypeFactory().constructFromCanonical(subClass);\n    if (t.isTypeOrSubTypeOf(baseType.getRawClass())) {\n      return t;\n    }\n  }\n else {\n    Class\u003c?\u003e cls;\n    try {\n      cls\u003dgetTypeFactory().findClass(subClass);\n    }\n catch (    ClassNotFoundException e) {\n      return null;\n    }\ncatch (    Exception e) {\n      throw invalidTypeIdException(baseType,subClass,String.format(\"problem: (%s) %s\",e.getClass().getName(),ClassUtil.exceptionMessage(e)));\n    }\n    if (baseType.isTypeOrSuperTypeOf(cls)) {\n      return getTypeFactory().constructSpecializedType(baseType,cls);\n    }\n  }\n  throw invalidTypeIdException(baseType,subClass,\"Not a subtype\");\n}",
    "begin_line": 170,
    "end_line": 202,
    "comment": "/** \n * Lookup method called when code needs to resolve class name from input; usually simple lookup\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.invalidTypeIdException#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "protected abstract JsonMappingException invalidTypeIdException(JavaType baseType,String typeId,String extraDesc);",
    "begin_line": 215,
    "end_line": 216,
    "comment": "/** \n * Helper method for constructing exception to indicate that given type id could not be resolved to a valid subtype of specified base type. Most commonly called during polymorphic deserialization. \u003cp\u003e Note that most of the time this method should NOT be called directly: instead, method \u003ccode\u003ehandleUnknownTypeId()\u003c/code\u003e should be called which will call this method if necessary.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.getTypeFactory#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.getTypeFactory()",
    "snippet": "public abstract TypeFactory getTypeFactory();",
    "begin_line": 218,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.objectIdGeneratorInstance#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.objectIdGeneratorInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdGenerator\u003c?\u003e objectIdGeneratorInstance(Annotated annotated,ObjectIdInfo objectIdInfo) throws JsonMappingException {\n  Class\u003c?\u003e implClass\u003dobjectIdInfo.getGeneratorType();\n  final MapperConfig\u003c?\u003e config\u003dgetConfig();\n  HandlerInstantiator hi\u003dconfig.getHandlerInstantiator();\n  ObjectIdGenerator\u003c?\u003e gen\u003d(hi \u003d\u003d null) ? null : hi.objectIdGeneratorInstance(config,annotated,implClass);\n  if (gen \u003d\u003d null) {\n    gen\u003d(ObjectIdGenerator\u003c?\u003e)ClassUtil.createInstance(implClass,config.canOverrideAccessModifiers());\n  }\n  return gen.forScope(objectIdInfo.getScope());\n}",
    "begin_line": 226,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.objectIdResolverInstance#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.objectIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public ObjectIdResolver objectIdResolverInstance(Annotated annotated,ObjectIdInfo objectIdInfo){\n  Class\u003c? extends ObjectIdResolver\u003e implClass\u003dobjectIdInfo.getResolverType();\n  final MapperConfig\u003c?\u003e config\u003dgetConfig();\n  HandlerInstantiator hi\u003dconfig.getHandlerInstantiator();\n  ObjectIdResolver resolver\u003d(hi \u003d\u003d null) ? null : hi.resolverIdGeneratorInstance(config,annotated,implClass);\n  if (resolver \u003d\u003d null) {\n    resolver\u003dClassUtil.createInstance(implClass,config.canOverrideAccessModifiers());\n  }\n  return resolver;\n}",
    "begin_line": 241,
    "end_line": 252,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.converterInstance#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.converterInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\") public Converter\u003cObject,Object\u003e converterInstance(Annotated annotated,Object converterDef) throws JsonMappingException {\n  if (converterDef \u003d\u003d null) {\n    return null;\n  }\n  if (converterDef instanceof Converter\u003c?,?\u003e) {\n    return (Converter\u003cObject,Object\u003e)converterDef;\n  }\n  if (!(converterDef instanceof Class)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n  }\n  Class\u003c?\u003e converterClass\u003d(Class\u003c?\u003e)converterDef;\n  if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n    return null;\n  }\n  if (!Converter.class.isAssignableFrom(converterClass)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n  }\n  final MapperConfig\u003c?\u003e config\u003dgetConfig();\n  HandlerInstantiator hi\u003dconfig.getHandlerInstantiator();\n  Converter\u003c?,?\u003e conv\u003d(hi \u003d\u003d null) ? null : hi.converterInstance(config,annotated,converterClass);\n  if (conv \u003d\u003d null) {\n    conv\u003d(Converter\u003c?,?\u003e)ClassUtil.createInstance(converterClass,config.canOverrideAccessModifiers());\n  }\n  return (Converter\u003cObject,Object\u003e)conv;\n}",
    "begin_line": 261,
    "end_line": 292,
    "comment": "/** \n * Helper method to use to construct a  {@link Converter}, given a definition that may be either actual converter instance, or Class for instantiating one.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.reportBadDefinition#307",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public abstract \u003cT\u003eT reportBadDefinition(JavaType type,String msg) throws JsonMappingException ;",
    "begin_line": 307,
    "end_line": 307,
    "comment": "/** \n * Helper method called to indicate a generic problem that stems from type definition(s), not input data, or input/output state; typically this means throwing a  {@link com.fasterxml.jackson.databind.exc.InvalidDefinitionException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext.reportBadDefinition#312",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public \u003cT\u003eT reportBadDefinition(Class\u003c?\u003e type,String msg) throws JsonMappingException {\n  return reportBadDefinition(constructType(type),msg);\n}",
    "begin_line": 312,
    "end_line": 314,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._format#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._format(java.lang.String, java.lang.Object)",
    "snippet": "protected final String _format(String msg,Object... msgArgs){\n  if (msgArgs.length \u003e 0) {\n    return String.format(msg,msgArgs);\n  }\n  return msg;\n}",
    "begin_line": 325,
    "end_line": 330,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._truncate#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._truncate(java.lang.String)",
    "snippet": "protected final String _truncate(String desc){\n  if (desc \u003d\u003d null) {\n    return \"\";\n  }\n  if (desc.length() \u003c\u003d MAX_ERROR_STR_LEN) {\n    return desc;\n  }\n  return desc.substring(0,MAX_ERROR_STR_LEN) + \"]...[\" + desc.substring(desc.length() - MAX_ERROR_STR_LEN);\n}",
    "begin_line": 335,
    "end_line": 343,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._quotedString#348",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._quotedString(java.lang.String)",
    "snippet": "protected String _quotedString(String desc){\n  if (desc \u003d\u003d null) {\n    return \"[N/A]\";\n  }\n  return String.format(\"\\\"%s\\\"\",_truncate(desc));\n}",
    "begin_line": 348,
    "end_line": 354,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._colonConcat#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._colonConcat(java.lang.String, java.lang.String)",
    "snippet": "protected String _colonConcat(String msgBase,String extra){\n  if (extra \u003d\u003d null) {\n    return msgBase;\n  }\n  return msgBase + \": \" + extra;\n}",
    "begin_line": 359,
    "end_line": 364,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatabindContext._desc#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DatabindContext.java",
    "class_name": "com.fasterxml.jackson.databind.DatabindContext",
    "signature": "com.fasterxml.jackson.databind.DatabindContext._desc(java.lang.String)",
    "snippet": "protected String _desc(String desc){\n  if (desc \u003d\u003d null) {\n    return \"[N/A]\";\n  }\n  return _truncate(desc);\n}",
    "begin_line": 369,
    "end_line": 375,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "public DeserializationConfig(BaseSettings base,SubtypeResolver str,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(base,str,mixins,rootNames,configOverrides);\n  _deserFeatures\u003dcollectFeatureDefaults(DeserializationFeature.class);\n  _nodeFactory\u003dJsonNodeFactory.instance;\n  _problemHandlers\u003dnull;\n  _parserFeatures\u003d0;\n  _parserFeaturesToChange\u003d0;\n  _formatReadFeatures\u003d0;\n  _formatReadFeaturesToChange\u003d0;\n}",
    "begin_line": 99,
    "end_line": 111,
    "comment": "/** \n * Constructor used by ObjectMapper to create default configuration object instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(src,mixins,rootNames,configOverrides);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 118,
    "end_line": 130,
    "comment": "/** \n * Copy-constructor used for making a copy used by new  {@link ObjectMapper}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, int, int, int, int, int, int)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,int mapperFeatures,int deserFeatures,int parserFeatures,int parserFeatureMask,int formatFeatures,int formatFeatureMask){\n  super(src,mapperFeatures);\n  _deserFeatures\u003ddeserFeatures;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _parserFeatures\u003dparserFeatures;\n  _parserFeaturesToChange\u003dparserFeatureMask;\n  _formatReadFeatures\u003dformatFeatures;\n  _formatReadFeaturesToChange\u003dformatFeatureMask;\n}",
    "begin_line": 139,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,SubtypeResolver str){\n  super(src,str);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 158,
    "end_line": 168,
    "comment": "/** \n * Copy constructor used to create a non-shared instance with given mix-in annotation definitions and subtype resolver.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,BaseSettings base){\n  super(src,base);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 170,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,JsonNodeFactory f){\n  super(src);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003df;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 182,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.util.LinkedNode\u003ccom.fasterxml.jackson.databind.deser.DeserializationProblemHandler\u003e)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,LinkedNode\u003cDeserializationProblemHandler\u003e problemHandlers){\n  super(src);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dproblemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 194,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,PropertyName rootName){\n  super(src,rootName);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 207,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "private DeserializationConfig(DeserializationConfig src,Class\u003c?\u003e view){\n  super(src,view);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 219,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src,ContextAttributes attrs){\n  super(src,attrs);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 231,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.DeserializationConfig#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.DeserializationConfig(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected DeserializationConfig(DeserializationConfig src,SimpleMixInResolver mixins){\n  super(src,mixins);\n  _deserFeatures\u003dsrc._deserFeatures;\n  _problemHandlers\u003dsrc._problemHandlers;\n  _nodeFactory\u003dsrc._nodeFactory;\n  _parserFeatures\u003dsrc._parserFeatures;\n  _parserFeaturesToChange\u003dsrc._parserFeaturesToChange;\n  _formatReadFeatures\u003dsrc._formatReadFeatures;\n  _formatReadFeaturesToChange\u003dsrc._formatReadFeaturesToChange;\n}",
    "begin_line": 243,
    "end_line": 253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getBaseSettings#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getBaseSettings()",
    "snippet": "protected BaseSettings getBaseSettings(){\n  return _base;\n}",
    "begin_line": 256,
    "end_line": 256,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig._withBase#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "@Override protected final DeserializationConfig _withBase(BaseSettings newBase){\n  return (_base \u003d\u003d newBase) ? this : new DeserializationConfig(this,newBase);\n}",
    "begin_line": 265,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig._withMapperFeatures#270",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig._withMapperFeatures(int)",
    "snippet": "@Override protected final DeserializationConfig _withMapperFeatures(int mapperFeatures){\n  return new DeserializationConfig(this,mapperFeatures,_deserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 270,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "@Override public DeserializationConfig with(SubtypeResolver str){\n  return (_subtypeResolver \u003d\u003d str) ? this : new DeserializationConfig(this,str);\n}",
    "begin_line": 283,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withRootName#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public DeserializationConfig withRootName(PropertyName rootName){\n  if (rootName \u003d\u003d null) {\n    if (_rootName \u003d\u003d null) {\n      return this;\n    }\n  }\n else   if (rootName.equals(_rootName)) {\n    return this;\n  }\n  return new DeserializationConfig(this,rootName);\n}",
    "begin_line": 288,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withView#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public DeserializationConfig withView(Class\u003c?\u003e view){\n  return (_view \u003d\u003d view) ? this : new DeserializationConfig(this,view);\n}",
    "begin_line": 300,
    "end_line": 302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "@Override public DeserializationConfig with(ContextAttributes attrs){\n  return (attrs \u003d\u003d _attributes) ? this : new DeserializationConfig(this,attrs);\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig with(DeserializationFeature feature){\n  int newDeserFeatures\u003d(_deserFeatures | feature.getMask());\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 319,
    "end_line": 326,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig with(DeserializationFeature first,DeserializationFeature... features){\n  int newDeserFeatures\u003d_deserFeatures | first.getMask();\n  for (  DeserializationFeature f : features) {\n    newDeserFeatures|\u003df.getMask();\n  }\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 332,
    "end_line": 343,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig withFeatures(DeserializationFeature... features){\n  int newDeserFeatures\u003d_deserFeatures;\n  for (  DeserializationFeature f : features) {\n    newDeserFeatures|\u003df.getMask();\n  }\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 349,
    "end_line": 359,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig without(DeserializationFeature feature){\n  int newDeserFeatures\u003d_deserFeatures \u0026 ~feature.getMask();\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 365,
    "end_line": 372,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig without(DeserializationFeature first,DeserializationFeature... features){\n  int newDeserFeatures\u003d_deserFeatures \u0026 ~first.getMask();\n  for (  DeserializationFeature f : features) {\n    newDeserFeatures\u0026\u003d~f.getMask();\n  }\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 378,
    "end_line": 389,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#395",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public DeserializationConfig withoutFeatures(DeserializationFeature... features){\n  int newDeserFeatures\u003d_deserFeatures;\n  for (  DeserializationFeature f : features) {\n    newDeserFeatures\u0026\u003d~f.getMask();\n  }\n  return (newDeserFeatures \u003d\u003d _deserFeatures) ? this : new DeserializationConfig(this,_mapperFeatures,newDeserFeatures,_parserFeatures,_parserFeaturesToChange,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 395,
    "end_line": 405,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(JsonParser.Feature)",
    "snippet": "public DeserializationConfig with(JsonParser.Feature feature){\n  int newSet\u003d_parserFeatures | feature.getMask();\n  int newMask\u003d_parserFeaturesToChange | feature.getMask();\n  return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,newSet,newMask,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 419,
    "end_line": 427,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(JsonParser.Feature)",
    "snippet": "public DeserializationConfig withFeatures(JsonParser.Feature... features){\n  int newSet\u003d_parserFeatures;\n  int newMask\u003d_parserFeaturesToChange;\n  for (  JsonParser.Feature f : features) {\n    int mask\u003df.getMask();\n    newSet|\u003dmask;\n    newMask|\u003dmask;\n  }\n  return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,newSet,newMask,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 435,
    "end_line": 448,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(JsonParser.Feature)",
    "snippet": "public DeserializationConfig without(JsonParser.Feature feature){\n  int newSet\u003d_parserFeatures \u0026 ~feature.getMask();\n  int newMask\u003d_parserFeaturesToChange | feature.getMask();\n  return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,newSet,newMask,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 456,
    "end_line": 464,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(JsonParser.Feature)",
    "snippet": "public DeserializationConfig withoutFeatures(JsonParser.Feature... features){\n  int newSet\u003d_parserFeatures;\n  int newMask\u003d_parserFeaturesToChange;\n  for (  JsonParser.Feature f : features) {\n    int mask\u003df.getMask();\n    newSet\u0026\u003d~mask;\n    newMask|\u003dmask;\n  }\n  return ((_parserFeatures \u003d\u003d newSet) \u0026\u0026 (_parserFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,newSet,newMask,_formatReadFeatures,_formatReadFeaturesToChange);\n}",
    "begin_line": 472,
    "end_line": 485,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#499",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(FormatFeature)",
    "snippet": "public DeserializationConfig with(FormatFeature feature){\n  int newSet\u003d_formatReadFeatures | feature.getMask();\n  int newMask\u003d_formatReadFeaturesToChange | feature.getMask();\n  return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,_parserFeatures,_parserFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 499,
    "end_line": 507,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withFeatures#515",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withFeatures(FormatFeature)",
    "snippet": "public DeserializationConfig withFeatures(FormatFeature... features){\n  int newSet\u003d_formatReadFeatures;\n  int newMask\u003d_formatReadFeaturesToChange;\n  for (  FormatFeature f : features) {\n    int mask\u003df.getMask();\n    newSet|\u003dmask;\n    newMask|\u003dmask;\n  }\n  return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,_parserFeatures,_parserFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 515,
    "end_line": 528,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.without#536",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.without(FormatFeature)",
    "snippet": "public DeserializationConfig without(FormatFeature feature){\n  int newSet\u003d_formatReadFeatures \u0026 ~feature.getMask();\n  int newMask\u003d_formatReadFeaturesToChange | feature.getMask();\n  return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,_parserFeatures,_parserFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 536,
    "end_line": 544,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withoutFeatures#552",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withoutFeatures(FormatFeature)",
    "snippet": "public DeserializationConfig withoutFeatures(FormatFeature... features){\n  int newSet\u003d_formatReadFeatures;\n  int newMask\u003d_formatReadFeaturesToChange;\n  for (  FormatFeature f : features) {\n    int mask\u003df.getMask();\n    newSet\u0026\u003d~mask;\n    newMask|\u003dmask;\n  }\n  return ((_formatReadFeatures \u003d\u003d newSet) \u0026\u0026 (_formatReadFeaturesToChange \u003d\u003d newMask)) ? this : new DeserializationConfig(this,_mapperFeatures,_deserFeatures,_parserFeatures,_parserFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 552,
    "end_line": 565,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.with#577",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.with(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public DeserializationConfig with(JsonNodeFactory f){\n  if (_nodeFactory \u003d\u003d f) {\n    return this;\n  }\n  return new DeserializationConfig(this,f);\n}",
    "begin_line": 577,
    "end_line": 582,
    "comment": "/** \n * Fluent factory method that will construct a new instance with specified  {@link JsonNodeFactory}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withHandler#588",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "public DeserializationConfig withHandler(DeserializationProblemHandler h){\n  if (LinkedNode.contains(_problemHandlers,h)) {\n    return this;\n  }\n  return new DeserializationConfig(this,new LinkedNode\u003cDeserializationProblemHandler\u003e(h,_problemHandlers));\n}",
    "begin_line": 588,
    "end_line": 596,
    "comment": "/** \n * Method that can be used to add a handler that can (try to) resolve non-fatal deserialization problems.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.withNoProblemHandlers#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.withNoProblemHandlers()",
    "snippet": "public DeserializationConfig withNoProblemHandlers(){\n  if (_problemHandlers \u003d\u003d null) {\n    return this;\n  }\n  return new DeserializationConfig(this,(LinkedNode\u003cDeserializationProblemHandler\u003e)null);\n}",
    "begin_line": 602,
    "end_line": 608,
    "comment": "/** \n * Method for removing all configured problem handlers; usually done to replace existing handler(s) with different one(s)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.initialize#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.initialize(JsonParser)",
    "snippet": "public void initialize(JsonParser p){\n  if (_parserFeaturesToChange !\u003d 0) {\n    p.overrideStdFeatures(_parserFeatures,_parserFeaturesToChange);\n  }\n  if (_formatReadFeaturesToChange !\u003d 0) {\n    p.overrideFormatFeatures(_formatReadFeatures,_formatReadFeaturesToChange);\n  }\n}",
    "begin_line": 623,
    "end_line": 630,
    "comment": "/** \n * Method called by  {@link ObjectMapper} and {@link ObjectReader}to modify those  {@link com.fasterxml.jackson.core.JsonParser.Feature} settingsthat have been configured via this config instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.useRootWrapping#639",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.useRootWrapping()",
    "snippet": "@Override public boolean useRootWrapping(){\n  if (_rootName !\u003d null) {\n    return !_rootName.isEmpty();\n  }\n  return isEnabled(DeserializationFeature.UNWRAP_ROOT_VALUE);\n}",
    "begin_line": 639,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.isEnabled#647",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public final boolean isEnabled(DeserializationFeature f){\n  return (_deserFeatures \u0026 f.getMask()) !\u003d 0;\n}",
    "begin_line": 647,
    "end_line": 649,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.isEnabled#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.isEnabled(JsonParser.Feature, JsonFactory)",
    "snippet": "public final boolean isEnabled(JsonParser.Feature f,JsonFactory factory){\n  int mask\u003df.getMask();\n  if ((_parserFeaturesToChange \u0026 mask) !\u003d 0) {\n    return (_parserFeatures \u0026 f.getMask()) !\u003d 0;\n  }\n  return factory.isEnabled(f);\n}",
    "begin_line": 651,
    "end_line": 657,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.hasDeserializationFeatures#665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.hasDeserializationFeatures(int)",
    "snippet": "public final boolean hasDeserializationFeatures(int featureMask){\n  return (_deserFeatures \u0026 featureMask) \u003d\u003d featureMask;\n}",
    "begin_line": 665,
    "end_line": 667,
    "comment": "/** \n * Bulk access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.hasSomeOfFeatures#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.hasSomeOfFeatures(int)",
    "snippet": "public final boolean hasSomeOfFeatures(int featureMask){\n  return (_deserFeatures \u0026 featureMask) !\u003d 0;\n}",
    "begin_line": 675,
    "end_line": 677,
    "comment": "/** \n * Bulk access method for checking that at least one of features specified by mask is enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getDeserializationFeatures#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getDeserializationFeatures()",
    "snippet": "public final int getDeserializationFeatures(){\n  return _deserFeatures;\n}",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Bulk access method for getting the bit mask of all  {@link DeserializationFeature}s that are enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.requiresFullValue#695",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.requiresFullValue()",
    "snippet": "public final boolean requiresFullValue(){\n  return DeserializationFeature.FAIL_ON_TRAILING_TOKENS.enabledIn(_deserFeatures);\n}",
    "begin_line": 695,
    "end_line": 697,
    "comment": "/** \n * Convenience method equivalant to: \u003ccode\u003e isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS) \u003c/code\u003e\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getProblemHandlers#709",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getProblemHandlers()",
    "snippet": "public LinkedNode\u003cDeserializationProblemHandler\u003e getProblemHandlers(){\n  return _problemHandlers;\n}",
    "begin_line": 709,
    "end_line": 711,
    "comment": "/** \n * Method for getting head of the problem handler chain. May be null, if no handlers have been added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.getNodeFactory#713",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.getNodeFactory()",
    "snippet": "public final JsonNodeFactory getNodeFactory(){\n  return _nodeFactory;\n}",
    "begin_line": 713,
    "end_line": 715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspect#730",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspect(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT extends BeanDescription\u003eT introspect(JavaType type){\n  return (T)getClassIntrospector().forDeserialization(this,type,this);\n}",
    "begin_line": 730,
    "end_line": 732,
    "comment": "/** \n * Method that will introspect full bean properties for the purpose of building a bean deserializer\n * @param type Type of class to be introspected\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspectForCreation#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspectForCreation(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT extends BeanDescription\u003eT introspectForCreation(JavaType type){\n  return (T)getClassIntrospector().forCreation(this,type,this);\n}",
    "begin_line": 739,
    "end_line": 741,
    "comment": "/** \n * Method that will introspect subset of bean properties needed to construct bean instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.introspectForBuilder#747",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.introspectForBuilder(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT extends BeanDescription\u003eT introspectForBuilder(JavaType type){\n  return (T)getClassIntrospector().forDeserializationWithBuilder(this,type,this);\n}",
    "begin_line": 747,
    "end_line": 749,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationConfig.findTypeDeserializer#764",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationConfig",
    "signature": "com.fasterxml.jackson.databind.DeserializationConfig.findTypeDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeDeserializer findTypeDeserializer(JavaType baseType) throws JsonMappingException {\n  BeanDescription bean\u003dintrospectClassAnnotations(baseType.getRawClass());\n  AnnotatedClass ac\u003dbean.getClassInfo();\n  TypeResolverBuilder\u003c?\u003e b\u003dgetAnnotationIntrospector().findTypeResolver(this,ac,baseType);\n  Collection\u003cNamedType\u003e subtypes\u003dnull;\n  if (b \u003d\u003d null) {\n    b\u003dgetDefaultTyper(baseType);\n    if (b \u003d\u003d null) {\n      return null;\n    }\n  }\n else {\n    subtypes\u003dgetSubtypeResolver().collectAndResolveSubtypesByTypeId(this,ac);\n  }\n  return b.buildTypeDeserializer(this,baseType,subtypes);\n}",
    "begin_line": 764,
    "end_line": 784,
    "comment": "/** \n * Helper method that is needed to properly handle polymorphic referenced types, such as types referenced by  {@link java.util.concurrent.atomic.AtomicReference}, or various \"optional\" types.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DeserializationContext(DeserializerFactory df){\n  this(df,null);\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.deser.DeserializerCache)",
    "snippet": "protected DeserializationContext(DeserializerFactory df,DeserializerCache cache){\n  if (df \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null DeserializerFactory\");\n  }\n  _factory\u003ddf;\n  if (cache \u003d\u003d null) {\n    cache\u003dnew DeserializerCache();\n  }\n  _cache\u003dcache;\n  _featureFlags\u003d0;\n  _config\u003dnull;\n  _injectableValues\u003dnull;\n  _view\u003dnull;\n  _attributes\u003dnull;\n}",
    "begin_line": 153,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DeserializationContext(DeserializationContext src,DeserializerFactory factory){\n  _cache\u003dsrc._cache;\n  _factory\u003dfactory;\n  _config\u003dsrc._config;\n  _featureFlags\u003dsrc._featureFlags;\n  _view\u003dsrc._view;\n  _parser\u003dsrc._parser;\n  _injectableValues\u003dsrc._injectableValues;\n  _attributes\u003dsrc._attributes;\n}",
    "begin_line": 171,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected DeserializationContext(DeserializationContext src,DeserializationConfig config,JsonParser p,InjectableValues injectableValues){\n  _cache\u003dsrc._cache;\n  _factory\u003dsrc._factory;\n  _config\u003dconfig;\n  _featureFlags\u003dconfig.getDeserializationFeatures();\n  _view\u003dconfig.getActiveView();\n  _parser\u003dp;\n  _injectableValues\u003dinjectableValues;\n  _attributes\u003dconfig.getAttributes();\n}",
    "begin_line": 188,
    "end_line": 201,
    "comment": "/** \n * Constructor used for creating actual per-call instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.DeserializationContext#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.DeserializationContext(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected DeserializationContext(DeserializationContext src){\n  _cache\u003dnew DeserializerCache();\n  _factory\u003dsrc._factory;\n  _config\u003dsrc._config;\n  _featureFlags\u003dsrc._featureFlags;\n  _view\u003dsrc._view;\n  _injectableValues\u003dnull;\n}",
    "begin_line": 206,
    "end_line": 214,
    "comment": "/** \n * Copy-constructor for use with \u003ccode\u003ecopy()\u003c/code\u003e by  {@link ObjectMapper#copy()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getConfig#223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getConfig()",
    "snippet": "@Override public DeserializationConfig getConfig(){\n  return _config;\n}",
    "begin_line": 223,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getActiveView#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getActiveView()",
    "snippet": "@Override public final Class\u003c?\u003e getActiveView(){\n  return _view;\n}",
    "begin_line": 226,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.canOverrideAccessModifiers#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.canOverrideAccessModifiers()",
    "snippet": "@Override public final boolean canOverrideAccessModifiers(){\n  return _config.canOverrideAccessModifiers();\n}",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.isEnabled#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override public final boolean isEnabled(MapperFeature feature){\n  return _config.isEnabled(feature);\n}",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDefaultPropertyFormat#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType){\n  return _config.getDefaultPropertyFormat(baseType);\n}",
    "begin_line": 239,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getAnnotationIntrospector#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getAnnotationIntrospector()",
    "snippet": "@Override public final AnnotationIntrospector getAnnotationIntrospector(){\n  return _config.getAnnotationIntrospector();\n}",
    "begin_line": 244,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getTypeFactory#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getTypeFactory()",
    "snippet": "@Override public final TypeFactory getTypeFactory(){\n  return _config.getTypeFactory();\n}",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getLocale#260",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getLocale()",
    "snippet": "@Override public Locale getLocale(){\n  return _config.getLocale();\n}",
    "begin_line": 260,
    "end_line": 262,
    "comment": "/** \n * Method for accessing default Locale to use: convenience method for \u003cpre\u003e getConfig().getLocale(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getTimeZone#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getTimeZone()",
    "snippet": "@Override public TimeZone getTimeZone(){\n  return _config.getTimeZone();\n}",
    "begin_line": 271,
    "end_line": 273,
    "comment": "/** \n * Method for accessing default TimeZone to use: convenience method for \u003cpre\u003e getConfig().getTimeZone(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getAttribute#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getAttribute(java.lang.Object)",
    "snippet": "@Override public Object getAttribute(Object key){\n  return _attributes.getAttribute(key);\n}",
    "begin_line": 282,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.setAttribute#287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public DeserializationContext setAttribute(Object key,Object value){\n  _attributes\u003d_attributes.withPerCallAttribute(key,value);\n  return this;\n}",
    "begin_line": 287,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getContextualType#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getContextualType()",
    "snippet": "public JavaType getContextualType(){\n  return (_currentType \u003d\u003d null) ? null : _currentType.value();\n}",
    "begin_line": 306,
    "end_line": 308,
    "comment": "/** \n * Accessor to  {@link JavaType} of currently contextualized{@link ContextualDeserializer}, if any. This is sometimes useful for generic  {@link JsonDeserializer}s that do not get passed (or do not retain) type information when being constructed: happens for example for deserializers constructed from annotations.\n * @since 2.5\n * @return Type of {@link ContextualDeserializer} being contextualized,if process is on-going; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getFactory#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getFactory()",
    "snippet": "public DeserializerFactory getFactory(){\n  return _factory;\n}",
    "begin_line": 319,
    "end_line": 321,
    "comment": "/** \n * Method for getting current  {@link DeserializerFactory}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.isEnabled#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public final boolean isEnabled(DeserializationFeature feat){\n  return (_featureFlags \u0026 feat.getMask()) !\u003d 0;\n}",
    "begin_line": 327,
    "end_line": 332,
    "comment": "/** \n * Convenience method for checking whether specified on/off feature is enabled\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDeserializationFeatures#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDeserializationFeatures()",
    "snippet": "public final int getDeserializationFeatures(){\n  return _featureFlags;\n}",
    "begin_line": 340,
    "end_line": 342,
    "comment": "/** \n * Bulk access method for getting the bit mask of all  {@link DeserializationFeature}s that are enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasDeserializationFeatures#350",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasDeserializationFeatures(int)",
    "snippet": "public final boolean hasDeserializationFeatures(int featureMask){\n  return (_featureFlags \u0026 featureMask) \u003d\u003d featureMask;\n}",
    "begin_line": 350,
    "end_line": 352,
    "comment": "/** \n * Bulk access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasSomeOfFeatures#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasSomeOfFeatures(int)",
    "snippet": "public final boolean hasSomeOfFeatures(int featureMask){\n  return (_featureFlags \u0026 featureMask) !\u003d 0;\n}",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Bulk access method for checking that at least one of features specified by mask is enabled.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getParser#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getParser()",
    "snippet": "public final JsonParser getParser(){\n  return _parser;\n}",
    "begin_line": 372,
    "end_line": 372,
    "comment": "/** \n * Method for accessing the currently active parser. May be different from the outermost parser when content is buffered. \u003cp\u003e Use of this method is discouraged: if code has direct access to the active parser, that should be used instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findInjectableValue#374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findInjectableValue(java.lang.Object, com.fasterxml.jackson.databind.BeanProperty, java.lang.Object)",
    "snippet": "public final Object findInjectableValue(Object valueId,BeanProperty forProperty,Object beanInstance) throws JsonMappingException {\n  if (_injectableValues \u003d\u003d null) {\n    reportBadDefinition(ClassUtil.classOf(valueId),String.format(\"No \u0027injectableValues\u0027 configured, cannot inject value with id [%s]\",valueId));\n  }\n  return _injectableValues.findInjectableValue(valueId,this,forProperty,beanInstance);\n}",
    "begin_line": 374,
    "end_line": 383,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getBase64Variant#393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getBase64Variant()",
    "snippet": "public final Base64Variant getBase64Variant(){\n  return _config.getBase64Variant();\n}",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Convenience method for accessing the default Base64 encoding used for decoding base64 encoded binary content. Same as calling: \u003cpre\u003e getConfig().getBase64Variant(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getNodeFactory#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getNodeFactory()",
    "snippet": "public final JsonNodeFactory getNodeFactory(){\n  return _config.getNodeFactory();\n}",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Convenience method, functionally equivalent to: \u003cpre\u003e getConfig().getNodeFactory(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.hasValueDeserializerFor#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.hasValueDeserializerFor(com.fasterxml.jackson.databind.JavaType, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean hasValueDeserializerFor(JavaType type,AtomicReference\u003cThrowable\u003e cause){\n  try {\n    return _cache.hasValueDeserializerFor(this,_factory,type);\n  }\n catch (  JsonMappingException e) {\n    if (cause !\u003d null) {\n      cause.set(e);\n    }\n  }\ncatch (  RuntimeException e) {\n    if (cause \u003d\u003d null) {\n      throw e;\n    }\n    cause.set(e);\n  }\n  return false;\n}",
    "begin_line": 420,
    "end_line": 434,
    "comment": "/** \n * Method for checking whether we could find a deserializer for given type.\n * @param type\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findContextualValueDeserializer#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") public final JsonDeserializer\u003cObject\u003e findContextualValueDeserializer(JavaType type,BeanProperty prop) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_cache.findValueDeserializer(this,_factory,type);\n  if (deser !\u003d null) {\n    deser\u003d(JsonDeserializer\u003cObject\u003e)handleSecondaryContextualization(deser,prop,type);\n  }\n  return deser;\n}",
    "begin_line": 441,
    "end_line": 449,
    "comment": "/** \n * Method for finding a value deserializer, and creating a contextual version if necessary, for value reached via specified property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findNonContextualValueDeserializer#464",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findNonContextualValueDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final JsonDeserializer\u003cObject\u003e findNonContextualValueDeserializer(JavaType type) throws JsonMappingException {\n  return _cache.findValueDeserializer(this,_factory,type);\n}",
    "begin_line": 464,
    "end_line": 468,
    "comment": "/** \n * Variant that will try to locate deserializer for current type, but without performing any contextualization (unlike  {@link #findContextualValueDeserializer}) or checking for need to create a  {@link TypeDeserializer} (unlike{@link #findRootValueDeserializer(JavaType)}. This method is usually called from within  {@link ResolvableDeserializer#resolve}, and expectation is that caller then calls either {@link #handlePrimaryContextualization(JsonDeserializer,BeanProperty,JavaType)} or{@link #handleSecondaryContextualization(JsonDeserializer,BeanProperty,JavaType)} at alater point, as necessary.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findRootValueDeserializer#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findRootValueDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public final JsonDeserializer\u003cObject\u003e findRootValueDeserializer(JavaType type) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_cache.findValueDeserializer(this,_factory,type);\n  if (deser \u003d\u003d null) {\n    return null;\n  }\n  deser\u003d(JsonDeserializer\u003cObject\u003e)handleSecondaryContextualization(deser,null,type);\n  TypeDeserializer typeDeser\u003d_factory.findTypeDeserializer(_config,type);\n  if (typeDeser !\u003d null) {\n    typeDeser\u003dtypeDeser.forProperty(null);\n    return new TypeWrappedDeserializer(typeDeser,deser);\n  }\n  return deser;\n}",
    "begin_line": 474,
    "end_line": 490,
    "comment": "/** \n * Method for finding a deserializer for root-level value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findKeyDeserializer#498",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public final KeyDeserializer findKeyDeserializer(JavaType keyType,BeanProperty prop) throws JsonMappingException {\n  KeyDeserializer kd\u003d_cache.findKeyDeserializer(this,_factory,keyType);\n  if (kd instanceof ContextualKeyDeserializer) {\n    kd\u003d((ContextualKeyDeserializer)kd).createContextual(this,prop);\n  }\n  return kd;\n}",
    "begin_line": 498,
    "end_line": 507,
    "comment": "/** \n * Convenience method, functionally same as: \u003cpre\u003e getDeserializerProvider().findKeyDeserializer(getConfig(), prop.getType(), prop); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findObjectId#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e, ObjectIdResolver)",
    "snippet": "public abstract ReadableObjectId findObjectId(Object id,ObjectIdGenerator\u003c?\u003e generator,ObjectIdResolver resolver);",
    "begin_line": 519,
    "end_line": 519,
    "comment": "/** \n * Method called to find and return entry corresponding to given Object Id: will add an entry if necessary, and never returns null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.checkUnresolvedObjectId#527",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.checkUnresolvedObjectId()",
    "snippet": "public abstract void checkUnresolvedObjectId() throws UnresolvedForwardReference ;",
    "begin_line": 527,
    "end_line": 528,
    "comment": "/** \n * Method called to ensure that every object id encounter during processing are resolved.\n * @throws UnresolvedForwardReference\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.constructType#542",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.constructType(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JavaType constructType(Class\u003c?\u003e cls){\n  return (cls \u003d\u003d null) ? null : _config.constructType(cls);\n}",
    "begin_line": 542,
    "end_line": 544,
    "comment": "/** \n * Convenience method, functionally equivalent to: \u003cpre\u003e getConfig().constructType(cls); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.findClass#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.findClass(java.lang.String)",
    "snippet": "public Class\u003c?\u003e findClass(String className) throws ClassNotFoundException {\n  return getTypeFactory().findClass(className);\n}",
    "begin_line": 554,
    "end_line": 558,
    "comment": "/** \n * Helper method that is to be used when resolving basic class name into Class instance, the reason being that it may be necessary to work around various ClassLoader limitations, as well as to handle primitive type signatures.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.leaseObjectBuffer#572",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.leaseObjectBuffer()",
    "snippet": "public final ObjectBuffer leaseObjectBuffer(){\n  ObjectBuffer buf\u003d_objectBuffer;\n  if (buf \u003d\u003d null) {\n    buf\u003dnew ObjectBuffer();\n  }\n else {\n    _objectBuffer\u003dnull;\n  }\n  return buf;\n}",
    "begin_line": 572,
    "end_line": 581,
    "comment": "/** \n * Method that can be used to get access to a reusable ObjectBuffer, useful for efficiently constructing Object arrays and Lists. Note that leased buffers should be returned once deserializer is done, to allow for reuse during same round of deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.returnObjectBuffer#589",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.returnObjectBuffer(com.fasterxml.jackson.databind.util.ObjectBuffer)",
    "snippet": "public final void returnObjectBuffer(ObjectBuffer buf){\n  if (_objectBuffer \u003d\u003d null || buf.initialCapacity() \u003e\u003d _objectBuffer.initialCapacity()) {\n    _objectBuffer\u003dbuf;\n  }\n}",
    "begin_line": 589,
    "end_line": 598,
    "comment": "/** \n * Method to call to return object buffer previously leased with {@link #leaseObjectBuffer}.\n * @param buf Returned object buffer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getArrayBuilders#604",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getArrayBuilders()",
    "snippet": "public final ArrayBuilders getArrayBuilders(){\n  if (_arrayBuilders \u003d\u003d null) {\n    _arrayBuilders\u003dnew ArrayBuilders();\n  }\n  return _arrayBuilders;\n}",
    "begin_line": 604,
    "end_line": 610,
    "comment": "/** \n * Method for accessing object useful for building arrays of primitive types (such as int[]).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.deserializerInstance#618",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e deserializerInstance(Annotated annotated,Object deserDef) throws JsonMappingException ;",
    "begin_line": 618,
    "end_line": 620,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.keyDeserializerInstance#622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated,Object deserDef) throws JsonMappingException ;",
    "begin_line": 622,
    "end_line": 624,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handlePrimaryContextualization#644",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003c?\u003e handlePrimaryContextualization(JsonDeserializer\u003c?\u003e deser,BeanProperty prop,JavaType type) throws JsonMappingException {\n  if (deser instanceof ContextualDeserializer) {\n    _currentType\u003dnew LinkedNode\u003cJavaType\u003e(type,_currentType);\n    try {\n      deser\u003d((ContextualDeserializer)deser).createContextual(this,prop);\n    }\n  finally {\n      _currentType\u003d_currentType.next();\n    }\n  }\n  return deser;\n}",
    "begin_line": 644,
    "end_line": 657,
    "comment": "/** \n * Method called for primary property deserializers (ones directly created to deserialize values of a POJO property), to handle details of resolving {@link ContextualDeserializer} with given property context.\n * @param prop Property for which the given primary deserializer is used; never null.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleSecondaryContextualization#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003c?\u003e handleSecondaryContextualization(JsonDeserializer\u003c?\u003e deser,BeanProperty prop,JavaType type) throws JsonMappingException {\n  if (deser instanceof ContextualDeserializer) {\n    _currentType\u003dnew LinkedNode\u003cJavaType\u003e(type,_currentType);\n    try {\n      deser\u003d((ContextualDeserializer)deser).createContextual(this,prop);\n    }\n  finally {\n      _currentType\u003d_currentType.next();\n    }\n  }\n  return deser;\n}",
    "begin_line": 675,
    "end_line": 688,
    "comment": "/** \n * Method called for secondary property deserializers (ones NOT directly created to deal with an annotatable POJO property, but instead created as a component -- such as value deserializers for structured types, or deserializers for root values) to handle details of resolving {@link ContextualDeserializer} with given property context.Given that these deserializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.\n * @param prop Property for which deserializer is used, if any; nullwhen deserializing root values\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.parseDate#706",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.parseDate(java.lang.String)",
    "snippet": "public Date parseDate(String dateStr) throws IllegalArgumentException {\n  try {\n    DateFormat df\u003dgetDateFormat();\n    return df.parse(dateStr);\n  }\n catch (  ParseException e) {\n    throw new IllegalArgumentException(String.format(\"Failed to parse Date value \u0027%s\u0027: %s\",dateStr,ClassUtil.exceptionMessage(e)));\n  }\n}",
    "begin_line": 706,
    "end_line": 716,
    "comment": "/** \n * Convenience method for parsing a Date from given String, using currently configured date format (accessed using {@link DeserializationConfig#getDateFormat()}). \u003cp\u003e Implementation will handle thread-safety issues related to date formats such that first time this method is called, date format is cloned, and cloned instance will be retained for use during this deserialization round.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.constructCalendar#722",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.constructCalendar(java.util.Date)",
    "snippet": "public Calendar constructCalendar(Date d){\n  Calendar c\u003dCalendar.getInstance(getTimeZone());\n  c.setTime(d);\n  return c;\n}",
    "begin_line": 722,
    "end_line": 727,
    "comment": "/** \n * Convenience method for constructing Calendar instance set to specified time, to be modified and used by caller.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readValue#746",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readValue(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "public \u003cT\u003eT readValue(JsonParser p,Class\u003cT\u003e type) throws IOException {\n  return readValue(p,getTypeFactory().constructType(type));\n}",
    "begin_line": 746,
    "end_line": 748,
    "comment": "/** \n * Convenience method that may be used by composite or container deserializers, for reading one-off values contained (for sequences, it is more efficient to actually fetch deserializer once for the whole collection). \u003cp\u003e NOTE: when deserializing values of properties contained in composite types, rather use  {@link #readPropertyValue(JsonParser,BeanProperty,Class)}; this method does not allow use of contextual annotations.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readValue#754",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readValue(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(JsonParser p,JavaType type) throws IOException {\n  JsonDeserializer\u003cObject\u003e deser\u003dfindRootValueDeserializer(type);\n  if (deser \u003d\u003d null) {\n    reportBadDefinition(type,\"Could not find JsonDeserializer for type \" + type);\n  }\n  return (T)deser.deserialize(p,this);\n}",
    "begin_line": 754,
    "end_line": 761,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readPropertyValue#771",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue(JsonParser, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003cT\u003e)",
    "snippet": "public \u003cT\u003eT readPropertyValue(JsonParser p,BeanProperty prop,Class\u003cT\u003e type) throws IOException {\n  return readPropertyValue(p,prop,getTypeFactory().constructType(type));\n}",
    "begin_line": 771,
    "end_line": 773,
    "comment": "/** \n * Convenience method that may be used by composite or container deserializers, for reading one-off values for the composite type, taking into account annotations that the property (passed to this method -- usually property that has custom serializer that called this method) has.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.readPropertyValue#779",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.readPropertyValue(JsonParser, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readPropertyValue(JsonParser p,BeanProperty prop,JavaType type) throws IOException {\n  JsonDeserializer\u003cObject\u003e deser\u003dfindContextualValueDeserializer(type,prop);\n  if (deser \u003d\u003d null) {\n    return reportBadDefinition(type,String.format(\"Could not find JsonDeserializer for type %s (via property %s)\",type,ClassUtil.nameOf(prop)));\n  }\n  return (T)deser.deserialize(p,this);\n}",
    "begin_line": 779,
    "end_line": 787,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnknownProperty#804",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(JsonParser, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, java.lang.Object, java.lang.String)",
    "snippet": "public boolean handleUnknownProperty(JsonParser p,JsonDeserializer\u003c?\u003e deser,Object instanceOrClass,String propName) throws IOException {\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    if (h.value().handleUnknownProperty(this,p,deser,instanceOrClass,propName)) {\n      return true;\n    }\n    h\u003dh.next();\n  }\n  if (!isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n    p.skipChildren();\n    return true;\n  }\n  Collection\u003cObject\u003e propIds\u003d(deser \u003d\u003d null) ? null : deser.getKnownPropertyNames();\n  throw UnrecognizedPropertyException.from(_parser,instanceOrClass,propName,propIds);\n}",
    "begin_line": 804,
    "end_line": 825,
    "comment": "/** \n * Method that deserializers should call if they encounter an unrecognized property (and once that is not explicitly designed as ignorable), to inform possibly configured  {@link DeserializationProblemHandler}s and let it handle the problem.\n * @return True if there was a configured problem handler that was able to handle theproblem\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdKey#846",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdKey(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdKey(Class\u003c?\u003e keyClass,String keyValue,String msg,Object... msgArgs) throws IOException {\n  msg\u003d_format(msg,msgArgs);\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object key\u003dh.value().handleWeirdKey(this,keyClass,keyValue,msg);\n    if (key !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if ((key \u003d\u003d null) || keyClass.isInstance(key)) {\n        return key;\n      }\n      throw weirdStringException(keyValue,keyClass,String.format(\"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\",keyClass,key.getClass()));\n    }\n    h\u003dh.next();\n  }\n  throw weirdKeyException(keyClass,keyValue,msg);\n}",
    "begin_line": 846,
    "end_line": 868,
    "comment": "/** \n * Method that deserializers should call if they encounter a String value that cannot be converted to expected key of a  {@link java.util.Map}valued property. Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdNumberValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param keyClass Expected type for key\n * @param keyValue String value from which to deserialize key\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Key value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdStringValue#890",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdStringValue(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdStringValue(Class\u003c?\u003e targetClass,String value,String msg,Object... msgArgs) throws IOException {\n  msg\u003d_format(msg,msgArgs);\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object instance\u003dh.value().handleWeirdStringValue(this,targetClass,value,msg);\n    if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if (_isCompatible(targetClass,instance)) {\n        return instance;\n      }\n      throw weirdStringException(value,targetClass,String.format(\"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\",targetClass,instance.getClass()));\n    }\n    h\u003dh.next();\n  }\n  throw weirdStringException(value,targetClass,msg);\n}",
    "begin_line": 890,
    "end_line": 912,
    "comment": "/** \n * Method that deserializers should call if they encounter a String value that cannot be converted to target property type, in cases where some String values could be acceptable (either with different settings, or different value). Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdStringValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param targetClass Type of property into which incoming number should be converted\n * @param value String value from which to deserialize property value\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Property value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdNumberValue#934",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNumberValue(java.lang.Class\u003c?\u003e, java.lang.Number, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleWeirdNumberValue(Class\u003c?\u003e targetClass,Number value,String msg,Object... msgArgs) throws IOException {\n  msg\u003d_format(msg,msgArgs);\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object key\u003dh.value().handleWeirdNumberValue(this,targetClass,value,msg);\n    if (key !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if (_isCompatible(targetClass,key)) {\n        return key;\n      }\n      throw weirdNumberException(value,targetClass,_format(\"DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s\",targetClass,key.getClass()));\n    }\n    h\u003dh.next();\n  }\n  throw weirdNumberException(value,targetClass,msg);\n}",
    "begin_line": 934,
    "end_line": 955,
    "comment": "/** \n * Method that deserializers should call if they encounter a numeric value that cannot be converted to target property type, in cases where some numeric values could be acceptable (either with different settings, or different numeric value). Default implementation will try to call  {@link DeserializationProblemHandler#handleWeirdNumberValue}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw  {@link InvalidFormatException} with given message.\n * @param targetClass Type of property into which incoming number should be converted\n * @param value Number value from which to deserialize property value\n * @param msg Error message template caller wants to use if exception is to be thrown\n * @param msgArgs Optional arguments to use for message, if any\n * @return Property value to use\n * @throws IOException To indicate unrecoverable problem, usually based on \u003ccode\u003emsg\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleWeirdNativeValue#957",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleWeirdNativeValue(com.fasterxml.jackson.databind.JavaType, java.lang.Object, JsonParser)",
    "snippet": "public Object handleWeirdNativeValue(JavaType targetType,Object badValue,JsonParser p) throws IOException {\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  final Class\u003c?\u003e raw\u003dtargetType.getRawClass();\n  for (; h !\u003d null; h\u003dh.next()) {\n    Object goodValue\u003dh.value().handleWeirdNativeValue(this,targetType,badValue,p);\n    if (goodValue !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if ((goodValue \u003d\u003d null) || raw.isInstance(goodValue)) {\n        return goodValue;\n      }\n      throw JsonMappingException.from(p,_format(\"DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s\",targetType,goodValue.getClass()));\n    }\n  }\n  throw weirdNativeValueException(badValue,raw);\n}",
    "begin_line": 957,
    "end_line": 977,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleMissingInstantiator#997",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.deser.ValueInstantiator, JsonParser, java.lang.String, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\") public Object handleMissingInstantiator(Class\u003c?\u003e instClass,ValueInstantiator valueInst,JsonParser p,String msg,Object... msgArgs) throws IOException {\n  if (p \u003d\u003d null) {\n    p\u003dgetParser();\n  }\n  msg\u003d_format(msg,msgArgs);\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object instance\u003dh.value().handleMissingInstantiator(this,instClass,valueInst,p,msg);\n    if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if (_isCompatible(instClass,instance)) {\n        return instance;\n      }\n      reportBadDefinition(constructType(instClass),String.format(\"DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s\",instClass,ClassUtil.classNameOf(instance)));\n    }\n    h\u003dh.next();\n  }\n  if ((valueInst !\u003d null) \u0026\u0026 !valueInst.canInstantiate()) {\n    msg\u003dString.format(\"Cannot construct instance of %s (no Creators, like default construct, exist): %s\",ClassUtil.nameOf(instClass),msg);\n    return reportBadDefinition(constructType(instClass),msg);\n  }\n  msg\u003dString.format(\"Cannot construct instance of %s (although at least one Creator exists): %s\",ClassUtil.nameOf(instClass),msg);\n  return reportInputMismatch(instClass,msg);\n}",
    "begin_line": 997,
    "end_line": 1033,
    "comment": "/** \n * Method that deserializers should call if they fail to instantiate value due to lack of viable instantiator (usually creator, that is, constructor or static factory method). Method should be called at point where value has not been decoded, so that handler has a chance to handle decoding using alternate mechanism, and handle underlying content (possibly by just skipping it) to keep input state valid\n * @param instClass Type that was to be instantiated\n * @param valueInst (optional) Value instantiator to be used, if any; null if type does notuse one for instantiation (custom deserialiers don\u0027t; standard POJO deserializer does)\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.9 (2.8 had alternate that did not take \u003ccode\u003eValueInstantiator\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleInstantiationProblem#1052",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleInstantiationProblem(java.lang.Class\u003c?\u003e, java.lang.Object, java.lang.Throwable)",
    "snippet": "public Object handleInstantiationProblem(Class\u003c?\u003e instClass,Object argument,Throwable t) throws IOException {\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object instance\u003dh.value().handleInstantiationProblem(this,instClass,argument,t);\n    if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if (_isCompatible(instClass,instance)) {\n        return instance;\n      }\n      reportBadDefinition(constructType(instClass),String.format(\"DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s\",instClass,ClassUtil.classNameOf(instance)));\n    }\n    h\u003dh.next();\n  }\n  ClassUtil.throwIfIOE(t);\n  throw instantiationException(instClass,t);\n}",
    "begin_line": 1052,
    "end_line": 1074,
    "comment": "/** \n * Method that deserializers should call if they fail to instantiate value due to an exception that was thrown by constructor (or other mechanism used to create instances). Default implementation will try to call  {@link DeserializationProblemHandler#handleInstantiationProblem}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with  {@link #instantiationException}.\n * @param instClass Type that was to be instantiated\n * @param argument (optional) Argument that was passed to constructor or equivalentinstantiator; often a  {@link java.lang.String}.\n * @param t Exception that caused failure\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnexpectedToken#1090",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class\u003c?\u003e, JsonParser)",
    "snippet": "public Object handleUnexpectedToken(Class\u003c?\u003e instClass,JsonParser p) throws IOException {\n  return handleUnexpectedToken(instClass,p.getCurrentToken(),p,null);\n}",
    "begin_line": 1090,
    "end_line": 1094,
    "comment": "/** \n * Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter  {@link JsonToken#START_ARRAY} instead of{@link JsonToken#VALUE_NUMBER_INT} or {@link JsonToken#VALUE_NUMBER_FLOAT}.\n * @param instClass Type that was to be instantiated\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnexpectedToken#1111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnexpectedToken(java.lang.Class\u003c?\u003e, JsonToken, JsonParser, java.lang.String, java.lang.Object)",
    "snippet": "public Object handleUnexpectedToken(Class\u003c?\u003e instClass,JsonToken t,JsonParser p,String msg,Object... msgArgs) throws IOException {\n  msg\u003d_format(msg,msgArgs);\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    Object instance\u003dh.value().handleUnexpectedToken(this,instClass,t,p,msg);\n    if (instance !\u003d DeserializationProblemHandler.NOT_HANDLED) {\n      if (_isCompatible(instClass,instance)) {\n        return instance;\n      }\n      reportBadDefinition(constructType(instClass),String.format(\"DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s\",ClassUtil.nameOf(instClass),ClassUtil.classNameOf(instance)));\n    }\n    h\u003dh.next();\n  }\n  if (msg \u003d\u003d null) {\n    if (t \u003d\u003d null) {\n      msg\u003dString.format(\"Unexpected end-of-input when binding data into %s\",ClassUtil.nameOf(instClass));\n    }\n else {\n      msg\u003dString.format(\"Cannot deserialize instance of %s out of %s token\",ClassUtil.nameOf(instClass),t);\n    }\n  }\n  reportInputMismatch(instClass,msg);\n  return null;\n}",
    "begin_line": 1111,
    "end_line": 1141,
    "comment": "/** \n * Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter  {@link JsonToken#START_ARRAY} instead of{@link JsonToken#VALUE_NUMBER_INT} or {@link JsonToken#VALUE_NUMBER_FLOAT}.\n * @param instClass Type that was to be instantiated\n * @param t Token encountered that does match expected\n * @param p Parser that points to the JSON value to decode\n * @return Object that should be constructed, if any; has to be of type \u003ccode\u003einstClass\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleUnknownTypeId#1163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleUnknownTypeId(com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleUnknownTypeId(JavaType baseType,String id,TypeIdResolver idResolver,String extraDesc) throws IOException {\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    JavaType type\u003dh.value().handleUnknownTypeId(this,baseType,id,idResolver,extraDesc);\n    if (type !\u003d null) {\n      if (type.hasRawClass(Void.class)) {\n        return null;\n      }\n      if (type.isTypeOrSubTypeOf(baseType.getRawClass())) {\n        return type;\n      }\n      throw invalidTypeIdException(baseType,id,\"problem handler tried to resolve into non-subtype: \" + type);\n    }\n    h\u003dh.next();\n  }\n  if (!isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n    return null;\n  }\n  throw invalidTypeIdException(baseType,id,extraDesc);\n}",
    "begin_line": 1163,
    "end_line": 1188,
    "comment": "/** \n * Method that deserializers should call if they encounter a type id (for polymorphic deserialization) that cannot be resolved to an actual type; usually since there is no mapping defined. Default implementation will try to call  {@link DeserializationProblemHandler#handleUnknownTypeId}on configured handlers, if any, to allow for recovery; if recovery does not succeed, will throw exception constructed with  {@link #invalidTypeIdException}.\n * @param baseType Base type from which resolution starts\n * @param id Type id that could not be converted\n * @param extraDesc Additional problem description to add to default exception message,if resolution fails.\n * @return {@link JavaType} that id resolves to\n * @throws IOException To indicate unrecoverable problem, if resolution cannotbe made to work\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.handleMissingTypeId#1193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.handleMissingTypeId(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleMissingTypeId(JavaType baseType,TypeIdResolver idResolver,String extraDesc) throws IOException {\n  LinkedNode\u003cDeserializationProblemHandler\u003e h\u003d_config.getProblemHandlers();\n  while (h !\u003d null) {\n    JavaType type\u003dh.value().handleMissingTypeId(this,baseType,idResolver,extraDesc);\n    if (type !\u003d null) {\n      if (type.hasRawClass(Void.class)) {\n        return null;\n      }\n      if (type.isTypeOrSubTypeOf(baseType.getRawClass())) {\n        return type;\n      }\n      throw invalidTypeIdException(baseType,null,\"problem handler tried to resolve into non-subtype: \" + type);\n    }\n    h\u003dh.next();\n  }\n  throw missingTypeIdException(baseType,extraDesc);\n}",
    "begin_line": 1193,
    "end_line": 1219,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext._isCompatible#1224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext._isCompatible(java.lang.Class\u003c?\u003e, java.lang.Object)",
    "snippet": "protected boolean _isCompatible(Class\u003c?\u003e target,Object value){\n  if ((value \u003d\u003d null) || target.isInstance(value)) {\n    return true;\n  }\n  return target.isPrimitive() \u0026\u0026 ClassUtil.wrapperType(target).isInstance(value);\n}",
    "begin_line": 1224,
    "end_line": 1232,
    "comment": "/** \n * @since 2.9.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(JsonDeserializer\u003c?\u003e deser,JsonToken expToken,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw wrongTokenException(getParser(),deser.handledType(),expToken,msg);\n}",
    "begin_line": 1251,
    "end_line": 1257,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1269",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(com.fasterxml.jackson.databind.JavaType, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(JavaType targetType,JsonToken expToken,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw wrongTokenException(getParser(),targetType,expToken,msg);\n}",
    "begin_line": 1269,
    "end_line": 1275,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(java.lang.Class\u003c?\u003e, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "public void reportWrongTokenException(Class\u003c?\u003e targetType,JsonToken expToken,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw wrongTokenException(getParser(),targetType,expToken,msg);\n}",
    "begin_line": 1287,
    "end_line": 1293,
    "comment": "/** \n * Method for deserializers to call  when the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that this method will throw a  {@link JsonMappingException} and norecovery is attempted (via  {@link DeserializationProblemHandler}, as problem is considered to be difficult to recover from, in general.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportUnresolvedObjectId#1298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportUnresolvedObjectId(ObjectIdReader oidReader,Object bean) throws JsonMappingException {\n  String msg\u003dString.format(\"No Object Id found for an instance of %s, to assign to property \u0027%s\u0027\",ClassUtil.classNameOf(bean),oidReader.propertyName);\n  return reportInputMismatch(oidReader.idProperty,msg);\n}",
    "begin_line": 1298,
    "end_line": 1304,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1312",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.BeanProperty, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportInputMismatch(BeanProperty prop,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  JavaType type\u003d(prop \u003d\u003d null) ? null : prop.getType();\n  throw MismatchedInputException.from(getParser(),type,msg);\n}",
    "begin_line": 1312,
    "end_line": 1318,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportInputMismatch(JsonDeserializer\u003c?\u003e src,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw MismatchedInputException.from(getParser(),src.handledType(),msg);\n}",
    "begin_line": 1326,
    "end_line": 1331,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportInputMismatch(Class\u003c?\u003e targetType,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw MismatchedInputException.from(getParser(),targetType,msg);\n}",
    "begin_line": 1339,
    "end_line": 1344,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportInputMismatch#1352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportInputMismatch(JavaType targetType,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw MismatchedInputException.from(getParser(),targetType,msg);\n}",
    "begin_line": 1352,
    "end_line": 1357,
    "comment": "/** \n * Helper method used to indicate a problem with input in cases where more specific \u003ccode\u003ereportXxx()\u003c/code\u003e method was not available.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportTrailingTokens#1359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportTrailingTokens(java.lang.Class\u003c?\u003e, JsonParser, JsonToken)",
    "snippet": "public \u003cT\u003eT reportTrailingTokens(Class\u003c?\u003e targetType,JsonParser p,JsonToken trailingToken) throws JsonMappingException {\n  throw MismatchedInputException.from(p,targetType,String.format(\"Trailing token (of type %s) found after value (bound as %s): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`\",trailingToken,ClassUtil.nameOf(targetType)));\n}",
    "begin_line": 1359,
    "end_line": 1366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportWrongTokenException#1369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportWrongTokenException(JsonParser, JsonToken, java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated public void reportWrongTokenException(JsonParser p,JsonToken expToken,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  throw wrongTokenException(p,expToken,msg);\n}",
    "begin_line": 1369,
    "end_line": 1375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportUnknownProperty#1389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportUnknownProperty(java.lang.Object, java.lang.String, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@Deprecated public void reportUnknownProperty(Object instanceOrClass,String fieldName,JsonDeserializer\u003c?\u003e deser) throws JsonMappingException {\n  if (isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {\n    Collection\u003cObject\u003e propIds\u003d(deser \u003d\u003d null) ? null : deser.getKnownPropertyNames();\n    throw UnrecognizedPropertyException.from(_parser,instanceOrClass,fieldName,propIds);\n  }\n}",
    "begin_line": 1389,
    "end_line": 1399,
    "comment": "/** \n * Helper method for reporting a problem with unhandled unknown property.\n * @param instanceOrClass Either value being populated (if one has beeninstantiated), or Class that indicates type that would be (or have been) instantiated\n * @param deser Deserializer that had the problem, if called by deserializer(or on behalf of one)\n * @deprecated Since 2.8 call {@link #handleUnknownProperty} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportMissingContent#1407",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportMissingContent(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated public void reportMissingContent(String msg,Object... msgArgs) throws JsonMappingException {\n  throw MismatchedInputException.from(getParser(),(JavaType)null,\"No content to map due to end-of-input\");\n}",
    "begin_line": 1407,
    "end_line": 1409,
    "comment": "/** \n * @since 2.8\n * @deprecated Since 2.9: not clear this ever occurs\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadTypeDefinition#1425",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportBadTypeDefinition(BeanDescription bean,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  String beanDesc\u003dClassUtil.nameOf(bean.getBeanClass());\n  msg\u003dString.format(\"Invalid type definition for type %s: %s\",beanDesc,msg);\n  throw InvalidDefinitionException.from(_parser,msg,bean,null);\n}",
    "begin_line": 1425,
    "end_line": 1431,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadPropertyDefinition#1440",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportBadPropertyDefinition(BeanDescription bean,BeanPropertyDefinition prop,String msg,Object... msgArgs) throws JsonMappingException {\n  msg\u003d_format(msg,msgArgs);\n  String propName\u003dClassUtil.nameOf(prop);\n  String beanDesc\u003dClassUtil.nameOf(bean.getBeanClass());\n  msg\u003dString.format(\"Invalid definition for property %s (of type %s): %s\",propName,beanDesc,msg);\n  throw InvalidDefinitionException.from(_parser,msg,bean,prop);\n}",
    "begin_line": 1440,
    "end_line": 1448,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadDefinition#1451",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "@Override public \u003cT\u003eT reportBadDefinition(JavaType type,String msg) throws JsonMappingException {\n  throw InvalidDefinitionException.from(_parser,msg,type);\n}",
    "begin_line": 1451,
    "end_line": 1453,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportBadMerge#1466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportBadMerge(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public \u003cT\u003eT reportBadMerge(JsonDeserializer\u003c?\u003e deser) throws JsonMappingException {\n  if (isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) {\n    return null;\n  }\n  JavaType type\u003dconstructType(deser.handledType());\n  String msg\u003dString.format(\"Invalid configuration: values of type %s cannot be merged\",type);\n  throw InvalidDefinitionException.from(getParser(),msg,type);\n}",
    "begin_line": 1466,
    "end_line": 1474,
    "comment": "/** \n * Method that deserializer may call if it is called to do an update (\"merge\") but deserializer operates on a non-mergeable type. Although this should usually be caught earlier, sometimes it may only be caught during operation and if so this is the method to call. Note that if  {@link MapperFeature#IGNORE_MERGE_FOR_UNMERGEABLE} is enabled,this method will simply return null; otherwise  {@link InvalidDefinitionException}will be thrown.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1493",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, com.fasterxml.jackson.databind.JavaType, JsonToken, java.lang.String)",
    "snippet": "public JsonMappingException wrongTokenException(JsonParser p,JavaType targetType,JsonToken expToken,String extra){\n  String msg\u003dString.format(\"Unexpected token (%s), expected %s\",p.getCurrentToken(),expToken);\n  msg\u003d_colonConcat(msg,extra);\n  return MismatchedInputException.from(p,targetType,msg);\n}",
    "begin_line": 1493,
    "end_line": 1500,
    "comment": "/** \n * Helper method for constructing  {@link JsonMappingException} to indicatethat the token encountered was of type different than what \u003cb\u003eshould\u003c/b\u003e be seen at that position, usually within a sequence of expected tokens. Note that most of the time this method should NOT be directly called; instead,  {@link #reportWrongTokenException} should be called and willcall this method as necessary.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, java.lang.Class\u003c?\u003e, JsonToken, java.lang.String)",
    "snippet": "public JsonMappingException wrongTokenException(JsonParser p,Class\u003c?\u003e targetType,JsonToken expToken,String extra){\n  String msg\u003dString.format(\"Unexpected token (%s), expected %s\",p.getCurrentToken(),expToken);\n  msg\u003d_colonConcat(msg,extra);\n  return MismatchedInputException.from(p,targetType,msg);\n}",
    "begin_line": 1502,
    "end_line": 1509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.wrongTokenException#1512",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.wrongTokenException(JsonParser, JsonToken, java.lang.String)",
    "snippet": "@Deprecated public JsonMappingException wrongTokenException(JsonParser p,JsonToken expToken,String msg){\n  return wrongTokenException(p,(JavaType)null,expToken,msg);\n}",
    "begin_line": 1512,
    "end_line": 1516,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdKeyException#1526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdKeyException(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String)",
    "snippet": "public JsonMappingException weirdKeyException(Class\u003c?\u003e keyClass,String keyValue,String msg){\n  return InvalidFormatException.from(_parser,String.format(\"Cannot deserialize Map key of type %s from String %s: %s\",ClassUtil.nameOf(keyClass),_quotedString(keyValue),msg),keyValue,keyClass);\n}",
    "begin_line": 1526,
    "end_line": 1532,
    "comment": "/** \n * Helper method for constructing exception to indicate that given JSON Object field name was not in format to be able to deserialize specified key type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdKey} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdStringException#1547",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdStringException(java.lang.String, java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException weirdStringException(String value,Class\u003c?\u003e instClass,String msg){\n  return InvalidFormatException.from(_parser,String.format(\"Cannot deserialize value of type %s from String %s: %s\",ClassUtil.nameOf(instClass),_quotedString(value),msg),value,instClass);\n}",
    "begin_line": 1547,
    "end_line": 1553,
    "comment": "/** \n * Helper method for constructing exception to indicate that input JSON String was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdStringValue} should be called which will call this methodif necessary.\n * @param value String value from input being deserialized\n * @param instClass Type that String should be deserialized into\n * @param msg Message that describes specific problem\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdNumberException#1562",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdNumberException(java.lang.Number, java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException weirdNumberException(Number value,Class\u003c?\u003e instClass,String msg){\n  return InvalidFormatException.from(_parser,String.format(\"Cannot deserialize value of type %s from number %s: %s\",ClassUtil.nameOf(instClass),String.valueOf(value),msg),value,instClass);\n}",
    "begin_line": 1562,
    "end_line": 1568,
    "comment": "/** \n * Helper method for constructing exception to indicate that input JSON Number was not suitable for deserializing into given target type. Note that most of the time this method should NOT be called; instead, {@link #handleWeirdNumberValue} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.weirdNativeValueException#1580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.weirdNativeValueException(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonMappingException weirdNativeValueException(Object value,Class\u003c?\u003e instClass){\n  return InvalidFormatException.from(_parser,String.format(\"Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types\",ClassUtil.nameOf(instClass),ClassUtil.classNameOf(value)),value,instClass);\n}",
    "begin_line": 1580,
    "end_line": 1586,
    "comment": "/** \n * Helper method for constructing exception to indicate that input JSON token of type \"native value\" (see  {@link JsonToken#VALUE_EMBEDDED_OBJECT}) is of incompatible type (and there is no delegating creator or such to use) and can not be used to construct value of specified type (usually POJO). Note that most of the time this method should NOT be called; instead, {@link #handleWeirdNativeValue} should be called which will call this method\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.instantiationException#1597",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class\u003c?\u003e, java.lang.Throwable)",
    "snippet": "public JsonMappingException instantiationException(Class\u003c?\u003e instClass,Throwable cause){\n  final JavaType type\u003dconstructType(instClass);\n  String excMsg;\n  if (cause \u003d\u003d null) {\n    excMsg\u003d\"N/A\";\n  }\n else   if ((excMsg\u003dClassUtil.exceptionMessage(cause)) \u003d\u003d null) {\n    excMsg\u003dClassUtil.nameOf(cause.getClass());\n  }\n  String msg\u003dString.format(\"Cannot construct instance of %s, problem: %s\",ClassUtil.nameOf(instClass),excMsg);\n  InvalidDefinitionException e\u003dInvalidDefinitionException.from(_parser,msg,type);\n  e.initCause(cause);\n  return e;\n}",
    "begin_line": 1597,
    "end_line": 1611,
    "comment": "/** \n * Helper method for constructing instantiation exception for specified type, to indicate problem with physically constructing instance of specified class (missing constructor, exception from constructor) \u003cp\u003e Note that most of the time this method should NOT be called directly; instead, {@link #handleInstantiationProblem} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.instantiationException#1622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.instantiationException(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public JsonMappingException instantiationException(Class\u003c?\u003e instClass,String msg0){\n  JavaType type\u003dconstructType(instClass);\n  String msg\u003dString.format(\"Cannot construct instance of %s: %s\",ClassUtil.nameOf(instClass),msg0);\n  return InvalidDefinitionException.from(_parser,msg,type);\n}",
    "begin_line": 1622,
    "end_line": 1628,
    "comment": "/** \n * Helper method for constructing instantiation exception for specified type, to indicate that instantiation failed due to missing instantiator (creator; constructor or factory method). \u003cp\u003e Note that most of the time this method should NOT be called; instead, {@link #handleMissingInstantiator} should be called which will call this methodif necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.invalidTypeIdException#1631",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "@Override public JsonMappingException invalidTypeIdException(JavaType baseType,String typeId,String extraDesc){\n  String msg\u003dString.format(\"Could not resolve type id \u0027%s\u0027 as a subtype of %s\",typeId,baseType);\n  return InvalidTypeIdException.from(_parser,_colonConcat(msg,extraDesc),baseType,typeId);\n}",
    "begin_line": 1631,
    "end_line": 1636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.missingTypeIdException#1641",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.missingTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public JsonMappingException missingTypeIdException(JavaType baseType,String extraDesc){\n  String msg\u003dString.format(\"Missing type id when trying to resolve subtype of %s\",baseType);\n  return InvalidTypeIdException.from(_parser,_colonConcat(msg,extraDesc),baseType,null);\n}",
    "begin_line": 1641,
    "end_line": 1646,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.unknownTypeException#1660",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.unknownTypeException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "@Deprecated public JsonMappingException unknownTypeException(JavaType type,String id,String extraDesc){\n  String msg\u003dString.format(\"Could not resolve type id \u0027%s\u0027 into a subtype of %s\",id,type);\n  msg\u003d_colonConcat(msg,extraDesc);\n  return MismatchedInputException.from(_parser,type,msg);\n}",
    "begin_line": 1660,
    "end_line": 1667,
    "comment": "/** \n * @since 2.5\n * @deprecated Since 2.8 use {@link #handleUnknownTypeId} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.endOfInputException#1676",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.endOfInputException(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JsonMappingException endOfInputException(Class\u003c?\u003e instClass){\n  return MismatchedInputException.from(_parser,instClass,\"Unexpected end-of-input when trying to deserialize a \" + instClass.getName());\n}",
    "begin_line": 1676,
    "end_line": 1679,
    "comment": "/** \n * Helper method for constructing exception to indicate that end-of-input was reached while still expecting more tokens to deserialize value of specified type.\n * @deprecated Since 2.8; currently no way to catch EOF at databind level\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.reportMappingException#1699",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.reportMappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated public void reportMappingException(String msg,Object... msgArgs) throws JsonMappingException {\n  throw JsonMappingException.from(getParser(),_format(msg,msgArgs));\n}",
    "begin_line": 1699,
    "end_line": 1703,
    "comment": "/** \n * Fallback method that may be called if no other \u003ccode\u003ereportXxx\u003c/code\u003e is applicable -- but only in that case.\n * @since 2.8\n * @deprecated Since 2.9: use a more specific method, or {@link #reportBadDefinition(JavaType,String)}, or  {@link #reportInputMismatch} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1717",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String)",
    "snippet": "@Deprecated public JsonMappingException mappingException(String message){\n  return JsonMappingException.from(getParser(),message);\n}",
    "begin_line": 1717,
    "end_line": 1719,
    "comment": "/** \n * Helper method for constructing generic mapping exception with specified message and current location information. Note that application code should almost always call one of \u003ccode\u003ehandleXxx\u003c/code\u003e methods, or  {@link #reportMappingException(String,Object...)}instead.\n * @since 2.6\n * @deprecated Since 2.9 use more specific error reporting methods instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1733",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated public JsonMappingException mappingException(String msg,Object... msgArgs){\n  return JsonMappingException.from(getParser(),_format(msg,msgArgs));\n}",
    "begin_line": 1733,
    "end_line": 1735,
    "comment": "/** \n * Helper method for constructing generic mapping exception with specified message and current location information Note that application code should almost always call one of \u003ccode\u003ehandleXxx\u003c/code\u003e methods, or  {@link #reportMappingException(String,Object...)}instead.\n * @since 2.6\n * @deprecated Since 2.9 use more specific error reporting methods instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1743",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JsonMappingException mappingException(Class\u003c?\u003e targetClass){\n  return mappingException(targetClass,_parser.getCurrentToken());\n}",
    "begin_line": 1743,
    "end_line": 1745,
    "comment": "/** \n * Helper method for constructing generic mapping exception for specified type\n * @deprecated Since 2.8 use {@link #handleUnexpectedToken(Class,JsonParser)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.mappingException#1751",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.mappingException(java.lang.Class\u003c?\u003e, JsonToken)",
    "snippet": "@Deprecated public JsonMappingException mappingException(Class\u003c?\u003e targetClass,JsonToken token){\n  return JsonMappingException.from(_parser,String.format(\"Cannot deserialize instance of %s out of %s token\",ClassUtil.nameOf(targetClass),token));\n}",
    "begin_line": 1751,
    "end_line": 1755,
    "comment": "/** \n * @deprecated Since 2.8 use {@link #handleUnexpectedToken(Class,JsonParser)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationContext.getDateFormat#1763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationContext",
    "signature": "com.fasterxml.jackson.databind.DeserializationContext.getDateFormat()",
    "snippet": "protected DateFormat getDateFormat(){\n  if (_dateFormat !\u003d null) {\n    return _dateFormat;\n  }\n  DateFormat df\u003d_config.getDateFormat();\n  _dateFormat\u003ddf\u003d(DateFormat)df.clone();\n  return df;\n}",
    "begin_line": 1763,
    "end_line": 1776,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.DeserializationFeature#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.DeserializationFeature(boolean)",
    "snippet": "private DeserializationFeature(boolean defaultState){\n  _defaultState\u003ddefaultState;\n  _mask\u003d(1 \u003c\u003c ordinal());\n}",
    "begin_line": 489,
    "end_line": 492,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#495",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.enabledByDefault()",
    "snippet": "@Override public boolean enabledByDefault(){\n  return _defaultState;\n}",
    "begin_line": 495,
    "end_line": 495,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#498",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.getMask()",
    "snippet": "@Override public int getMask(){\n  return _mask;\n}",
    "begin_line": 498,
    "end_line": 498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#501",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/DeserializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.DeserializationFeature",
    "signature": "com.fasterxml.jackson.databind.DeserializationFeature.enabledIn(int)",
    "snippet": "@Override public boolean enabledIn(int flags){\n  return (flags \u0026 _mask) !\u003d 0;\n}",
    "begin_line": 501,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.JavaType#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(java.lang.Class\u003c?\u003e, int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected JavaType(Class\u003c?\u003e raw,int additionalHash,Object valueHandler,Object typeHandler,boolean asStatic){\n  _class\u003draw;\n  _hash\u003draw.getName().hashCode() + additionalHash;\n  _valueHandler\u003dvalueHandler;\n  _typeHandler\u003dtypeHandler;\n  _asStatic\u003dasStatic;\n}",
    "begin_line": 76,
    "end_line": 84,
    "comment": "/** \n * @param raw \"Raw\" (type-erased) class for this type\n * @param additionalHash Additional hash code to use, in additionto hash code of the class name \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.JavaType#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.JavaType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType(JavaType base){\n  _class\u003dbase._class;\n  _hash\u003dbase._hash;\n  _valueHandler\u003dbase._valueHandler;\n  _typeHandler\u003dbase._typeHandler;\n  _asStatic\u003dbase._asStatic;\n}",
    "begin_line": 91,
    "end_line": 98,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withTypeHandler#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withTypeHandler(Object h);",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * \"Copy method\" that will construct a new instance that is identical to this instance, except that it will have specified type handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentTypeHandler#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentTypeHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentTypeHandler(Object h);",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content type (element type for arrays, value type for Maps and so forth) handler assigned.\n * @return Newly created type instance, with given \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withValueHandler#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withValueHandler(Object h);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentValueHandler#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentValueHandler(java.lang.Object)",
    "snippet": "public abstract JavaType withContentValueHandler(Object h);",
    "begin_line": 131,
    "end_line": 131,
    "comment": "/** \n * Mutant factory method that will construct a new instance that is identical to this instance, except that it will have specified content value handler assigned.\n * @return Newly created type instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withHandlersFrom#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType withHandlersFrom(JavaType src){\n  JavaType type\u003dthis;\n  Object h\u003dsrc.getTypeHandler();\n  if (h !\u003d _typeHandler) {\n    type\u003dtype.withTypeHandler(h);\n  }\n  h\u003dsrc.getValueHandler();\n  if (h !\u003d _valueHandler) {\n    type\u003dtype.withValueHandler(h);\n  }\n  return type;\n}",
    "begin_line": 140,
    "end_line": 151,
    "comment": "/** \n * Mutant factory method that will try to copy handlers that the specified source type instance had, if any; this must be done recursively where necessary (as content types may be structured).\n * @since 2.8.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withContentType#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JavaType withContentType(JavaType contentType);",
    "begin_line": 168,
    "end_line": 168,
    "comment": "/** \n * Mutant factory method that may be called on structured types that have a so-called content type (element of arrays, value type of Maps, referenced type of referential types), and will construct a new instance that is identical to this instance, except that it has specified content type, instead of current one. If content type is already set to given type, \u003ccode\u003ethis\u003c/code\u003e is returned. If type does not have a content type (which is the case with \u003ccode\u003eSimpleType\u003c/code\u003e),  {@link IllegalArgumentException}will be thrown.\n * @return Newly created type instance\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.withStaticTyping#181",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.withStaticTyping()",
    "snippet": "public abstract JavaType withStaticTyping();",
    "begin_line": 181,
    "end_line": 181,
    "comment": "/** \n * Method that can be called to get a type instance that indicates that values of the type should be handled using \"static typing\" for purposes of serialization (as opposed to \"dynamic\" aka runtime typing): meaning that no runtime information is needed for determining serializers to use. The main use case is to allow forcing of specific root value serialization type, and specifically in resolving serializers for contained types (element types for arrays, Collections and Maps).\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.refine#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public abstract JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces);",
    "begin_line": 197,
    "end_line": 198,
    "comment": "/** \n * Mutant factory method that will try to create and return a sub-type instance for known parameterized types; for other types will return `null` to indicate that no just refinement makes necessary sense, without trying to detect special status through implemented interfaces.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.forcedNarrowBy#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.forcedNarrowBy(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JavaType forcedNarrowBy(Class\u003c?\u003e subclass){\n  if (subclass \u003d\u003d _class) {\n    return this;\n  }\n  return _narrow(subclass);\n}",
    "begin_line": 209,
    "end_line": 215,
    "comment": "/** \n * Legacy method used for forcing sub-typing of this type into type specified by specific type erasure. Deprecated as of 2.7 as such specializations really ought to go through  {@link TypeFactory}, not directly via  {@link JavaType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType._narrow#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated protected abstract JavaType _narrow(Class\u003c?\u003e subclass);",
    "begin_line": 218,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getRawClass#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getRawClass()",
    "snippet": "@Override public final Class\u003c?\u003e getRawClass(){\n  return _class;\n}",
    "begin_line": 227,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasRawClass#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasRawClass(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final boolean hasRawClass(Class\u003c?\u003e clz){\n  return _class \u003d\u003d clz;\n}",
    "begin_line": 235,
    "end_line": 235,
    "comment": "/** \n * Method that can be used to check whether this type has specified Class as its type erasure. Put another way, returns true if instantiation of this Type is given (type-erased) Class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasContentType#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasContentType()",
    "snippet": "public boolean hasContentType(){\n  return true;\n}",
    "begin_line": 244,
    "end_line": 246,
    "comment": "/** \n * Accessor that allows determining whether  {@link #getContentType()} shouldreturn a non-null value (that is, there is a \"content type\") or not. True if  {@link #isContainerType()} or {@link #isReferenceType()} return true.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isTypeOrSubTypeOf#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isTypeOrSubTypeOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public final boolean isTypeOrSubTypeOf(Class\u003c?\u003e clz){\n  return (_class \u003d\u003d clz) || clz.isAssignableFrom(_class);\n}",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isTypeOrSuperTypeOf#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isTypeOrSuperTypeOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public final boolean isTypeOrSuperTypeOf(Class\u003c?\u003e clz){\n  return (_class \u003d\u003d clz) || _class.isAssignableFrom(clz);\n}",
    "begin_line": 258,
    "end_line": 260,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isAbstract#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isAbstract()",
    "snippet": "@Override public boolean isAbstract(){\n  return Modifier.isAbstract(_class.getModifiers());\n}",
    "begin_line": 263,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isConcrete#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isConcrete()",
    "snippet": "@Override public boolean isConcrete(){\n  int mod\u003d_class.getModifiers();\n  if ((mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0) {\n    return true;\n  }\n  return _class.isPrimitive();\n}",
    "begin_line": 273,
    "end_line": 282,
    "comment": "/** \n * Convenience method for checking whether underlying Java type is a concrete class or not: abstract classes and interfaces are not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isThrowable#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isThrowable()",
    "snippet": "@Override public boolean isThrowable(){\n  return Throwable.class.isAssignableFrom(_class);\n}",
    "begin_line": 285,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isArrayType#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isArrayType()",
    "snippet": "@Override public boolean isArrayType(){\n  return false;\n}",
    "begin_line": 288,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isEnumType#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isEnumType()",
    "snippet": "@Override public final boolean isEnumType(){\n  return _class.isEnum();\n}",
    "begin_line": 291,
    "end_line": 291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isInterface#294",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isInterface()",
    "snippet": "@Override public final boolean isInterface(){\n  return _class.isInterface();\n}",
    "begin_line": 294,
    "end_line": 294,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isPrimitive#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isPrimitive()",
    "snippet": "@Override public final boolean isPrimitive(){\n  return _class.isPrimitive();\n}",
    "begin_line": 297,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isFinal#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isFinal()",
    "snippet": "@Override public final boolean isFinal(){\n  return Modifier.isFinal(_class.getModifiers());\n}",
    "begin_line": 300,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isContainerType#307",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isContainerType()",
    "snippet": "@Override public abstract boolean isContainerType();",
    "begin_line": 307,
    "end_line": 307,
    "comment": "/** \n * @return True if type represented is a container type; this includesarray, Map and Collection types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isCollectionLikeType#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isCollectionLikeType()",
    "snippet": "@Override public boolean isCollectionLikeType(){\n  return false;\n}",
    "begin_line": 315,
    "end_line": 315,
    "comment": "/** \n * @return True if type is either true {@link java.util.Collection} type,or something similar (meaning it has at least one type parameter, which describes type of contents)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isMapLikeType#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isMapLikeType()",
    "snippet": "@Override public boolean isMapLikeType(){\n  return false;\n}",
    "begin_line": 323,
    "end_line": 323,
    "comment": "/** \n * @return True if type is either true {@link java.util.Map} type,or something similar (meaning it has at least two type parameter; first one describing key type, second value type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.isJavaLangObject#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.isJavaLangObject()",
    "snippet": "public final boolean isJavaLangObject(){\n  return _class \u003d\u003d Object.class;\n}",
    "begin_line": 334,
    "end_line": 334,
    "comment": "/** \n * Convenience method, short-hand for \u003ccode\u003e getRawClass() \u003d\u003d Object.class \u003c/code\u003e and used to figure if we basically have \"untyped\" type object.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.useStaticType#344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.useStaticType()",
    "snippet": "public final boolean useStaticType(){\n  return _asStatic;\n}",
    "begin_line": 344,
    "end_line": 344,
    "comment": "/** \n * Accessor for checking whether handlers for dealing with values of this type should use static typing (as opposed to dynamic typing). Note that while value of \u0027true\u0027 does mean that static typing is to be used, value of \u0027false\u0027 may still be overridden by other settings.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasGenericTypes#353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasGenericTypes()",
    "snippet": "@Override public boolean hasGenericTypes(){\n  return containedTypeCount() \u003e 0;\n}",
    "begin_line": 353,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getKeyType#356",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getKeyType()",
    "snippet": "@Override public JavaType getKeyType(){\n  return null;\n}",
    "begin_line": 356,
    "end_line": 356,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentType#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentType()",
    "snippet": "@Override public JavaType getContentType(){\n  return null;\n}",
    "begin_line": 359,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getReferencedType#362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getReferencedType()",
    "snippet": "@Override public JavaType getReferencedType(){\n  return null;\n}",
    "begin_line": 362,
    "end_line": 362,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeCount#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeCount()",
    "snippet": "@Override public abstract int containedTypeCount();",
    "begin_line": 365,
    "end_line": 365,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedType#368",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedType(int)",
    "snippet": "@Override public abstract JavaType containedType(int index);",
    "begin_line": 368,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeName#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeName(int)",
    "snippet": "@Deprecated @Override public abstract String containedTypeName(int index);",
    "begin_line": 372,
    "end_line": 372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getParameterSource#376",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getParameterSource()",
    "snippet": "@Deprecated @Override public Class\u003c?\u003e getParameterSource(){\n  return null;\n}",
    "begin_line": 376,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.containedTypeOrUnknown#402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.containedTypeOrUnknown(int)",
    "snippet": "public JavaType containedTypeOrUnknown(int index){\n  JavaType t\u003dcontainedType(index);\n  return (t \u003d\u003d null) ? TypeFactory.unknownType() : t;\n}",
    "begin_line": 402,
    "end_line": 405,
    "comment": "/** \n * Convenience method that is functionally same as: \u003ccode\u003e JavaType t \u003d containedType(index); if (t \u003d\u003d null) { t \u003d TypeFactory.unknownType(); } \u003c/code\u003e and typically used to eliminate need for null checks for common case where we just want to check if containedType is available first; and if not, use \"unknown type\" (which translates to \u003ccode\u003ejava.lang.Object\u003c/code\u003e basically).\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getBindings#410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getBindings()",
    "snippet": "public abstract TypeBindings getBindings();",
    "begin_line": 410,
    "end_line": 410,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findSuperType#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType findSuperType(Class\u003c?\u003e erasedTarget);",
    "begin_line": 421,
    "end_line": 421,
    "comment": "/** \n * Method that may be called to find representation of given type within type hierarchy of this type: either this type (if this type has given erased type), one of its supertypes that has the erased types, or null if target is neither this type or any of its supertypes.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getSuperClass#429",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getSuperClass()",
    "snippet": "public abstract JavaType getSuperClass();",
    "begin_line": 429,
    "end_line": 429,
    "comment": "/** \n * Accessor for finding fully resolved parent class of this type, if it has one; null if not.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getInterfaces#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getInterfaces()",
    "snippet": "public abstract List\u003cJavaType\u003e getInterfaces();",
    "begin_line": 437,
    "end_line": 437,
    "comment": "/** \n * Accessor for finding fully resolved interfaces this type implements, if any; empty array if none.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.findTypeParameters#445",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JavaType[] findTypeParameters(Class\u003c?\u003e expType);",
    "begin_line": 445,
    "end_line": 445,
    "comment": "/** \n * Method that may be used to find paramaterization this type has for given type-erased generic target type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getValueHandler#457",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getValueHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT getValueHandler(){\n  return (T)_valueHandler;\n}",
    "begin_line": 457,
    "end_line": 457,
    "comment": "/** \n * Method for accessing value handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getTypeHandler#463",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getTypeHandler()",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT getTypeHandler(){\n  return (T)_typeHandler;\n}",
    "begin_line": 463,
    "end_line": 463,
    "comment": "/** \n * Method for accessing type handler associated with this type, if any\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentValueHandler#468",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentValueHandler()",
    "snippet": "public Object getContentValueHandler(){\n  return null;\n}",
    "begin_line": 468,
    "end_line": 468,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getContentTypeHandler#473",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getContentTypeHandler()",
    "snippet": "public Object getContentTypeHandler(){\n  return null;\n}",
    "begin_line": 473,
    "end_line": 473,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasValueHandler#478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasValueHandler()",
    "snippet": "public boolean hasValueHandler(){\n  return _valueHandler !\u003d null;\n}",
    "begin_line": 478,
    "end_line": 478,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hasHandlers#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hasHandlers()",
    "snippet": "public boolean hasHandlers(){\n  return (_typeHandler !\u003d null) || (_valueHandler !\u003d null);\n}",
    "begin_line": 488,
    "end_line": 490,
    "comment": "/** \n * Helper method that checks whether this type, or its (optional) key or content type has  {@link #getValueHandler} or {@link #getTypeHandler()}; that is, are there any non-standard handlers associated with this type object.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#508",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature()",
    "snippet": "public String getGenericSignature(){\n  StringBuilder sb\u003dnew StringBuilder(40);\n  getGenericSignature(sb);\n  return sb.toString();\n}",
    "begin_line": 508,
    "end_line": 512,
    "comment": "/** \n * Method for accessing signature that contains generic type information, in form compatible with JVM 1.5 as per JLS. It is a superset of  {@link #getErasedSignature}, in that generic information can be automatically removed if necessary (just remove outermost angle brackets along with content inside)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getGenericSignature#521",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 521,
    "end_line": 521,
    "comment": "/** \n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#529",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature()",
    "snippet": "public String getErasedSignature(){\n  StringBuilder sb\u003dnew StringBuilder(40);\n  getErasedSignature(sb);\n  return sb.toString();\n}",
    "begin_line": 529,
    "end_line": 533,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.getErasedSignature#546",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 546,
    "end_line": 546,
    "comment": "/** \n * Method for accessing signature without generic type information, in form compatible with all versions of JVM, and specifically used for type descriptions when generating byte code.\n * @param sb StringBuilder to append signature to\n * @return StringBuilder that was passed in; returned to allowcall chaining\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.toString#555",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.toString()",
    "snippet": "@Override public abstract String toString();",
    "begin_line": 555,
    "end_line": 555,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.equals#558",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.equals(java.lang.Object)",
    "snippet": "@Override public abstract boolean equals(Object o);",
    "begin_line": 558,
    "end_line": 558,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JavaType.hashCode#561",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JavaType.java",
    "class_name": "com.fasterxml.jackson.databind.JavaType",
    "signature": "com.fasterxml.jackson.databind.JavaType.hashCode()",
    "snippet": "@Override public final int hashCode(){\n  return _hash;\n}",
    "begin_line": 561,
    "end_line": 561,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.deserialize#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract T deserialize(JsonParser p,DeserializationContext ctxt) throws IOException, JsonProcessingException ;",
    "begin_line": 106,
    "end_line": 107,
    "comment": "/** \n * Method that can be called to ask implementation to deserialize JSON content into the value type this serializer handles. Returned instance is to be constructed by method itself. \u003cp\u003e Pre-condition for this method is that the parser points to the first event that is part of value to deserializer (and which  is never JSON \u0027null\u0027 literal, more on this below): for simple types it may be the only value; and for structured types the Object start marker or a FIELD_NAME. \u003c/p\u003e \u003cp\u003e The two possible input conditions for structured types result from polymorphism via fields. In the ordinary case, Jackson calls this method when it has encountered an OBJECT_START, and the method implementation must advance to the next token to see the first field name. If the application configures polymorphism via a field, then the object looks like the following. \u003cpre\u003e { \"@class\": \"class name\", ... } \u003c/pre\u003e Jackson consumes the two tokens (the \u003ctt\u003e@class\u003c/tt\u003e field name and its value) in order to learn the class and select the deserializer. Thus, the stream is pointing to the FIELD_NAME for the first field after the @class. Thus, if you want your method to work correctly both with and without polymorphism, you must begin your method with: \u003cpre\u003e if (p.getCurrentToken() \u003d\u003d JsonToken.START_OBJECT) { p.nextToken(); } \u003c/pre\u003e This results in the stream pointing to the field name, so that the two conditions align. \u003cp\u003e Post-condition is that the parser will point to the last event that is part of deserialized value (or in case deserialization fails, event that was not recognized or usable, which may be the same event as the one it pointed to upon call). \u003cp\u003e Note that this method is never called for JSON null literal, and thus deserializers need (and should) not check for it.\n * @param p Parsed used for reading JSON content\n * @param ctxt Context that can be used to access information aboutthis deserialization activity.\n * @return Deserialized value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.deserialize#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, T)",
    "snippet": "public T deserialize(JsonParser p,DeserializationContext ctxt,T intoValue) throws IOException {\n  if (ctxt.isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) {\n    return deserialize(p,ctxt);\n  }\n  throw new UnsupportedOperationException(\"Cannot update object of type \" + intoValue.getClass().getName() + \" (by deserializer of type \"+ getClass().getName()+ \")\");\n}",
    "begin_line": 125,
    "end_line": 133,
    "comment": "/** \n * Alternate deserialization method (compared to the most commonly used,  {@link #deserialize(JsonParser,DeserializationContext)}), which takes in initialized value instance, to be configured and/or populated by deserializer. Method is not necessarily used (or supported) by all types (it will not work for immutable types, for obvious reasons): most commonly it is used for Collections and Maps. It may be used both with \"updating readers\" (for POJOs) and when Collections and Maps use \"getter as setter\". \u003cp\u003e Default implementation just throws {@link UnsupportedOperationException}, to indicate that types that do not explicitly add support do not necessarily support update-existing-value operation (esp. immutable types)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.deserializeWithType#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return typeDeserializer.deserializeTypedFromAny(p,ctxt);\n}",
    "begin_line": 149,
    "end_line": 155,
    "comment": "/** \n * Deserialization called when type being deserialized is defined to contain additional type identifier, to allow for correctly instantiating correct subtype. This can be due to annotation on type (or its supertype), or due to global settings without annotations. \u003cp\u003e Default implementation may work for some types, but ideally subclasses should not rely on current default implementation. Implementation is mostly provided to avoid compilation errors with older code.\n * @param typeDeserializer Deserializer to use for handling type information\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.unwrappingDeserializer#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "public JsonDeserializer\u003cT\u003e unwrappingDeserializer(NameTransformer unwrapper){\n  return this;\n}",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * Method that will return deserializer instance that is able to handle \"unwrapped\" value instances If no unwrapped instance can be constructed, will simply return this object as-is. \u003cp\u003e Default implementation just returns \u0027this\u0027 indicating that no unwrapped variant exists\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.replaceDelegatee#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public JsonDeserializer\u003c?\u003e replaceDelegatee(JsonDeserializer\u003c?\u003e delegatee){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * Method that can be called to try to replace deserializer this deserializer delegates calls to. If not supported (either this deserializer does not delegate anything; or it does not want any changes), should either throw  {@link UnsupportedOperationException} (if operation does notmake sense or is not allowed); or return this deserializer as is.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.handledType#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.handledType()",
    "snippet": "public Class\u003c?\u003e handledType(){\n  return null;\n}",
    "begin_line": 208,
    "end_line": 208,
    "comment": "/** \n * Method for accessing type of values this deserializer produces. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type). \u003cp\u003e Default implementation will return null, which means almost same same as returning \u003ccode\u003eObject.class\u003c/code\u003e would; that is, that nothing is known about handled type. \u003cp\u003e\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.isCachable#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.isCachable()",
    "snippet": "public boolean isCachable(){\n  return false;\n}",
    "begin_line": 224,
    "end_line": 224,
    "comment": "/** \n * Method called to see if deserializer instance is cachable and usable for other properties of same type (type for which instance was created). \u003cp\u003e Note that cached instances are still resolved on per-property basis, if instance implements  {@link com.fasterxml.jackson.databind.deser.ResolvableDeserializer}: cached instance is just as the base. This means that in most cases it is safe to cache instances; however, it only makes sense to cache instances if instantiation is expensive, or if instances are heavy-weight. \u003cp\u003e Default implementation returns false, to indicate that no caching is done.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getDelegatee#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getDelegatee()",
    "snippet": "public JsonDeserializer\u003c?\u003e getDelegatee(){\n  return null;\n}",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * Accessor that can be used to determine if this deserializer uses another deserializer for actual deserialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further deserializers); otherwise will return null.\n * @return Deserializer this deserializer delegates calls to, if null;null otherwise.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getKnownPropertyNames#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getKnownPropertyNames()",
    "snippet": "public Collection\u003cObject\u003e getKnownPropertyNames(){\n  return null;\n}",
    "begin_line": 253,
    "end_line": 255,
    "comment": "/** \n * Method that will either return null to indicate that type being deserializers has no concept of properties; or a collection of identifiers for which \u003ccode\u003etoString\u003c/code\u003e will give external property name. This is only to be used for error reporting and diagnostics purposes (most commonly, to accompany \"unknown property\" exception).\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getNullValue#279",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public T getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n  return getNullValue();\n}",
    "begin_line": 279,
    "end_line": 282,
    "comment": "/** \n * Method that can be called to determine value to be used for representing null values (values deserialized when JSON token is  {@link JsonToken#VALUE_NULL}). Usually this is simply Java null, but for some types (especially primitives) it may be necessary to use non-null values. \u003cp\u003e Since version 2.6 (in which the context argument was added), call is expected to be made each and every time a null token needs to be handled. \u003cp\u003e Default implementation simply returns null.\n * @since 2.6 Added to replace earlier no-arguments variant\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getNullAccessPattern#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getNullAccessPattern()",
    "snippet": "@Override public AccessPattern getNullAccessPattern(){\n  return AccessPattern.CONSTANT;\n}",
    "begin_line": 290,
    "end_line": 295,
    "comment": "/** \n * Default implementation indicates that \"null value\" to use for input null is simply Java `null` for all deserializers, unless overridden by sub-classes. This information may be used as optimization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getEmptyAccessPattern#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyAccessPattern()",
    "snippet": "public AccessPattern getEmptyAccessPattern(){\n  return AccessPattern.DYNAMIC;\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * This method may be called in conjunction with calls to {@link #getEmptyValue(DeserializationContext)}, to check whether it needs to be called just once (static values), or each time empty value is needed.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getEmptyValue#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  return getNullValue(ctxt);\n}",
    "begin_line": 333,
    "end_line": 335,
    "comment": "/** \n * Method called to determine value to be used for \"empty\" values (most commonly when deserializing from empty JSON Strings). Usually this is same as  {@link #getNullValue} (which in turnis usually simply Java null), but it can be overridden for types. Or, if type should never be converted from empty String, method can also throw an exception. \u003cp\u003e Since version 2.6 (in which the context argument was added), call is expected to be made each and every time an empty value is needed. \u003cp\u003e Since version 2.9 does not require return of `T` any more. \u003cp\u003e Default implementation simply calls  {@link #getNullValue} andreturns value.\n * @since 2.6 Added to replace earlier no-arguments variant\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getObjectIdReader#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getObjectIdReader()",
    "snippet": "public ObjectIdReader getObjectIdReader(){\n  return null;\n}",
    "begin_line": 355,
    "end_line": 355,
    "comment": "/** \n * Accessor that can be used to check whether this deserializer is expecting to possibly get an Object Identifier value instead of full value serialization, and if so, should be able to resolve it to actual Object instance to return as deserialized value. \u003cp\u003e Default implementation returns null, as support cannot be implemented generically. Some standard deserializers (most notably {@link com.fasterxml.jackson.databind.deser.BeanDeserializer}) do implement this feature, and may return reader instance, depending on exact configuration of instance (which is based on type, and referring property).\n * @return ObjectIdReader used for resolving possible Object Identifiervalue, instead of full value serialization, if deserializer can do that; null if no Object Id is expected.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.findBackReference#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.findBackReference(java.lang.String)",
    "snippet": "public SettableBeanProperty findBackReference(String refName){\n  throw new IllegalArgumentException(\"Cannot handle managed/back reference \u0027\" + refName + \"\u0027: type: value deserializer of type \"+ getClass().getName()+ \" does not support them\");\n}",
    "begin_line": 363,
    "end_line": 367,
    "comment": "/** \n * Method needed by  {@link BeanDeserializerFactory} to properly linkmanaged- and back-reference pairs.\n * @since 2.2 (was moved out of \u003ccode\u003eBeanDeserializerBase\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.supportsUpdate#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public Boolean supportsUpdate(DeserializationConfig config){\n  return null;\n}",
    "begin_line": 388,
    "end_line": 390,
    "comment": "/** \n * Introspection method that may be called to see whether deserializer supports update of an existing value (aka \"merging\") or not. Return value should either be  {@link Boolean#FALSE} if update is not supported at all (immutable values);{@link Boolean#TRUE} if update should usually work (regular POJOs, for example),or \u003ccode\u003enull\u003c/code\u003e if this is either not known, or may sometimes work. \u003cp\u003e Information gathered is typically used to either prevent merging update for property (either by skipping, if based on global defaults; or by exception during deserialization construction if explicit attempt made) if  {@link Boolean#FALSE}returned, or inclusion if  {@link Boolean#TRUE} is specified. If \"unknown\" case(\u003ccode\u003enull\u003c/code\u003e returned) behavior is to exclude property if global defaults used; or to allow if explicit per-type or property merging is defined. \u003cp\u003e Default implementation returns \u003ccode\u003enull\u003c/code\u003e to allow explicit per-type or per-property attempts.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getNullValue#402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getNullValue()",
    "snippet": "@Deprecated public T getNullValue(){\n  return null;\n}",
    "begin_line": 402,
    "end_line": 402,
    "comment": "/** \n * @deprecated Since 2.6 Use overloaded variant that takes context argument\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonDeserializer.getEmptyValue#408",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.getEmptyValue()",
    "snippet": "@Deprecated public Object getEmptyValue(){\n  return getNullValue();\n}",
    "begin_line": 408,
    "end_line": 408,
    "comment": "/** \n * @deprecated Since 2.6 Use overloaded variant that takes context argument\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "None.None#424",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonDeserializer",
    "signature": "com.fasterxml.jackson.databind.JsonDeserializer.None()",
    "snippet": "private None(){\n}",
    "begin_line": 424,
    "end_line": 424,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.Reference#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference()",
    "snippet": "protected Reference(){\n}",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * Default constructor for deserialization/sub-classing purposes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.Reference#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference(java.lang.Object)",
    "snippet": "public Reference(Object from){\n  _from\u003dfrom;\n}",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.Reference#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference(java.lang.Object, java.lang.String)",
    "snippet": "public Reference(Object from,String fieldName){\n  _from\u003dfrom;\n  if (fieldName \u003d\u003d null) {\n    throw new NullPointerException(\"Cannot pass null fieldName\");\n  }\n  _fieldName\u003dfieldName;\n}",
    "begin_line": 86,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.Reference#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.Reference(java.lang.Object, int)",
    "snippet": "public Reference(Object from,int index){\n  _from\u003dfrom;\n  _index\u003dindex;\n}",
    "begin_line": 94,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.setFieldName#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.setFieldName(java.lang.String)",
    "snippet": "void setFieldName(String n){\n  _fieldName\u003dn;\n}",
    "begin_line": 100,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.setIndex#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.setIndex(int)",
    "snippet": "void setIndex(int ix){\n  _index\u003dix;\n}",
    "begin_line": 101,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.setDescription#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.setDescription(java.lang.String)",
    "snippet": "void setDescription(String d){\n  _desc\u003dd;\n}",
    "begin_line": 102,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getFrom#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getFrom()",
    "snippet": "@JsonIgnore public Object getFrom(){\n  return _from;\n}",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * Object through which reference was resolved. Can be either actual instance (usually the case for serialization), or Class (usually the case for deserialization). \u003cp\u003e Note that this value must be `transient` to allow serializability (as often such Object is NOT serializable; or, in case of `Class`, may not available at the point of deserialization). As such will return `null` if instance has been passed using JDK serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getFieldName#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getFieldName()",
    "snippet": "public String getFieldName(){\n  return _fieldName;\n}",
    "begin_line": 117,
    "end_line": 117,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getIndex#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getIndex()",
    "snippet": "public int getIndex(){\n  return _index;\n}",
    "begin_line": 118,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getDescription#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getDescription()",
    "snippet": "public String getDescription(){\n  if (_desc \u003d\u003d null) {\n    StringBuilder sb\u003dnew StringBuilder();\n    if (_from \u003d\u003d null) {\n      sb.append(\"UNKNOWN\");\n    }\n else {\n      Class\u003c?\u003e cls\u003d(_from instanceof Class\u003c?\u003e) ? (Class\u003c?\u003e)_from : _from.getClass();\n      int arrays\u003d0;\n      while (cls.isArray()) {\n        cls\u003dcls.getComponentType();\n        ++arrays;\n      }\n      sb.append(cls.getName());\n      while (--arrays \u003e\u003d 0) {\n        sb.append(\"[]\");\n      }\n    }\n    sb.append(\u0027[\u0027);\n    if (_fieldName !\u003d null) {\n      sb.append(\u0027\"\u0027);\n      sb.append(_fieldName);\n      sb.append(\u0027\"\u0027);\n    }\n else     if (_index \u003e\u003d 0) {\n      sb.append(_index);\n    }\n else {\n      sb.append(\u0027?\u0027);\n    }\n    sb.append(\u0027]\u0027);\n    _desc\u003dsb.toString();\n  }\n  return _desc;\n}",
    "begin_line": 119,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.toString#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.toString()",
    "snippet": "@Override public String toString(){\n  return getDescription();\n}",
    "begin_line": 165,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.writeReplace#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.writeReplace()",
    "snippet": "Object writeReplace(){\n  getDescription();\n  return this;\n}",
    "begin_line": 174,
    "end_line": 179,
    "comment": "/** \n * May need some cleaning here, given that `from` may or may not be serializable. since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.lang.String)",
    "snippet": "@Deprecated public JsonMappingException(String msg){\n  super(msg);\n}",
    "begin_line": 214,
    "end_line": 214,
    "comment": "/** \n * @deprecated Since 2.7 Use variant that takes {@link JsonParser} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.lang.String, java.lang.Throwable)",
    "snippet": "@Deprecated public JsonMappingException(String msg,Throwable rootCause){\n  super(msg,rootCause);\n}",
    "begin_line": 220,
    "end_line": 220,
    "comment": "/** \n * @deprecated Since 2.7 Use variant that takes {@link JsonParser} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.lang.String, JsonLocation)",
    "snippet": "@Deprecated public JsonMappingException(String msg,JsonLocation loc){\n  super(msg,loc);\n}",
    "begin_line": 226,
    "end_line": 226,
    "comment": "/** \n * @deprecated Since 2.7 Use variant that takes {@link JsonParser} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.lang.String, JsonLocation, java.lang.Throwable)",
    "snippet": "@Deprecated public JsonMappingException(String msg,JsonLocation loc,Throwable rootCause){\n  super(msg,loc,rootCause);\n}",
    "begin_line": 232,
    "end_line": 232,
    "comment": "/** \n * @deprecated Since 2.7 Use variant that takes {@link JsonParser} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.io.Closeable, java.lang.String)",
    "snippet": "public JsonMappingException(Closeable processor,String msg){\n  super(msg);\n  _processor\u003dprocessor;\n  if (processor instanceof JsonParser) {\n    _location\u003d((JsonParser)processor).getTokenLocation();\n  }\n}",
    "begin_line": 237,
    "end_line": 246,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.io.Closeable, java.lang.String, java.lang.Throwable)",
    "snippet": "public JsonMappingException(Closeable processor,String msg,Throwable problem){\n  super(msg,problem);\n  _processor\u003dprocessor;\n  if (processor instanceof JsonParser) {\n    _location\u003d((JsonParser)processor).getTokenLocation();\n  }\n}",
    "begin_line": 251,
    "end_line": 257,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.JsonMappingException#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.JsonMappingException(java.io.Closeable, java.lang.String, JsonLocation)",
    "snippet": "public JsonMappingException(Closeable processor,String msg,JsonLocation loc){\n  super(msg,loc);\n  _processor\u003dprocessor;\n}",
    "begin_line": 262,
    "end_line": 265,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#270",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonParser, java.lang.String)",
    "snippet": "public static JsonMappingException from(JsonParser p,String msg){\n  return new JsonMappingException(p,msg);\n}",
    "begin_line": 270,
    "end_line": 272,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonParser, java.lang.String, java.lang.Throwable)",
    "snippet": "public static JsonMappingException from(JsonParser p,String msg,Throwable problem){\n  return new JsonMappingException(p,msg,problem);\n}",
    "begin_line": 277,
    "end_line": 279,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#284",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonGenerator, java.lang.String)",
    "snippet": "public static JsonMappingException from(JsonGenerator g,String msg){\n  return new JsonMappingException(g,msg,(Throwable)null);\n}",
    "begin_line": 284,
    "end_line": 286,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(JsonGenerator, java.lang.String, java.lang.Throwable)",
    "snippet": "public static JsonMappingException from(JsonGenerator g,String msg,Throwable problem){\n  return new JsonMappingException(g,msg,problem);\n}",
    "begin_line": 291,
    "end_line": 293,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "public static JsonMappingException from(DeserializationContext ctxt,String msg){\n  return new JsonMappingException(ctxt.getParser(),msg);\n}",
    "begin_line": 298,
    "end_line": 300,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String, java.lang.Throwable)",
    "snippet": "public static JsonMappingException from(DeserializationContext ctxt,String msg,Throwable t){\n  return new JsonMappingException(ctxt.getParser(),msg,t);\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#312",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.databind.SerializerProvider, java.lang.String)",
    "snippet": "public static JsonMappingException from(SerializerProvider ctxt,String msg){\n  return new JsonMappingException(ctxt.getGenerator(),msg);\n}",
    "begin_line": 312,
    "end_line": 314,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.from#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.from(com.fasterxml.jackson.databind.SerializerProvider, java.lang.String, java.lang.Throwable)",
    "snippet": "public static JsonMappingException from(SerializerProvider ctxt,String msg,Throwable problem){\n  return new JsonMappingException(ctxt.getGenerator(),msg,problem);\n}",
    "begin_line": 319,
    "end_line": 324,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.fromUnexpectedIOE#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.fromUnexpectedIOE(java.io.IOException)",
    "snippet": "public static JsonMappingException fromUnexpectedIOE(IOException src){\n  return new JsonMappingException(null,String.format(\"Unexpected IOException (of type %s): %s\",src.getClass().getName(),ClassUtil.exceptionMessage(src)));\n}",
    "begin_line": 336,
    "end_line": 341,
    "comment": "/** \n * Factory method used when \"upgrading\" an  {@link IOException} into{@link JsonMappingException}: usually only needed to comply with a signature. \u003cp\u003e NOTE: since 2.9 should usually NOT be used on input-side (deserialization) exceptions; instead use method(s) of \u003ccode\u003eInputMismatchException\u003c/code\u003e\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.wrapWithPath#351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(java.lang.Throwable, java.lang.Object, java.lang.String)",
    "snippet": "public static JsonMappingException wrapWithPath(Throwable src,Object refFrom,String refFieldName){\n  return wrapWithPath(src,new Reference(refFrom,refFieldName));\n}",
    "begin_line": 351,
    "end_line": 354,
    "comment": "/** \n * Method that can be called to either create a new JsonMappingException (if underlying exception is not a JsonMappingException), or augment given exception with given path/reference information. This version of method is called when the reference is through a non-indexed object, such as a Map or POJO/bean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.wrapWithPath#364",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(java.lang.Throwable, java.lang.Object, int)",
    "snippet": "public static JsonMappingException wrapWithPath(Throwable src,Object refFrom,int index){\n  return wrapWithPath(src,new Reference(refFrom,index));\n}",
    "begin_line": 364,
    "end_line": 366,
    "comment": "/** \n * Method that can be called to either create a new JsonMappingException (if underlying exception is not a JsonMappingException), or augment given exception with given path/reference information. This version of method is called when the reference is through an index, which happens with arrays and Collections.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.wrapWithPath#374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(java.lang.Throwable, com.fasterxml.jackson.databind.JsonMappingException.Reference)",
    "snippet": "@SuppressWarnings(\"resource\") public static JsonMappingException wrapWithPath(Throwable src,Reference ref){\n  JsonMappingException jme;\n  if (src instanceof JsonMappingException) {\n    jme\u003d(JsonMappingException)src;\n  }\n else {\n    String msg\u003dClassUtil.exceptionMessage(src);\n    if (msg \u003d\u003d null || msg.length() \u003d\u003d 0) {\n      msg\u003d\"(was \" + src.getClass().getName() + \")\";\n    }\n    Closeable proc\u003dnull;\n    if (src instanceof JsonProcessingException) {\n      Object proc0\u003d((JsonProcessingException)src).getProcessor();\n      if (proc0 instanceof Closeable) {\n        proc\u003d(Closeable)proc0;\n      }\n    }\n    jme\u003dnew JsonMappingException(proc,msg,src);\n  }\n  jme.prependPath(ref);\n  return jme;\n}",
    "begin_line": 374,
    "end_line": 398,
    "comment": "/** \n * Method that can be called to either create a new JsonMappingException (if underlying exception is not a JsonMappingException), or augment given exception with given path/reference information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getPath#410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getPath()",
    "snippet": "public List\u003cReference\u003e getPath(){\n  if (_path \u003d\u003d null) {\n    return Collections.emptyList();\n  }\n  return Collections.unmodifiableList(_path);\n}",
    "begin_line": 410,
    "end_line": 416,
    "comment": "/** \n * Method for accessing full structural path within type hierarchy down to problematic property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getPathReference#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getPathReference()",
    "snippet": "public String getPathReference(){\n  return getPathReference(new StringBuilder()).toString();\n}",
    "begin_line": 422,
    "end_line": 425,
    "comment": "/** \n * Method for accessing description of path that lead to the problem that triggered this exception\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getPathReference#427",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getPathReference(java.lang.StringBuilder)",
    "snippet": "public StringBuilder getPathReference(StringBuilder sb){\n  _appendPathDesc(sb);\n  return sb;\n}",
    "begin_line": 427,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.prependPath#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.prependPath(java.lang.Object, java.lang.String)",
    "snippet": "public void prependPath(Object referrer,String fieldName){\n  Reference ref\u003dnew Reference(referrer,fieldName);\n  prependPath(ref);\n}",
    "begin_line": 437,
    "end_line": 441,
    "comment": "/** \n * Method called to prepend a reference information in front of current path\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.prependPath#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.prependPath(java.lang.Object, int)",
    "snippet": "public void prependPath(Object referrer,int index){\n  Reference ref\u003dnew Reference(referrer,index);\n  prependPath(ref);\n}",
    "begin_line": 446,
    "end_line": 450,
    "comment": "/** \n * Method called to prepend a reference information in front of current path\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.prependPath#452",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.prependPath(com.fasterxml.jackson.databind.JsonMappingException.Reference)",
    "snippet": "public void prependPath(Reference r){\n  if (_path \u003d\u003d null) {\n    _path\u003dnew LinkedList\u003cReference\u003e();\n  }\n  if (_path.size() \u003c MAX_REFS_TO_LIST) {\n    _path.addFirst(r);\n  }\n}",
    "begin_line": 452,
    "end_line": 464,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getProcessor#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getProcessor()",
    "snippet": "@Override @JsonIgnore public Object getProcessor(){\n  return _processor;\n}",
    "begin_line": 474,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getLocalizedMessage#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getLocalizedMessage()",
    "snippet": "@Override public String getLocalizedMessage(){\n  return _buildMessage();\n}",
    "begin_line": 477,
    "end_line": 479,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.getMessage#486",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.getMessage()",
    "snippet": "@Override public String getMessage(){\n  return _buildMessage();\n}",
    "begin_line": 486,
    "end_line": 488,
    "comment": "/** \n * Method is overridden so that we can properly inject description of problem path, if such is defined.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference._buildMessage#490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException._buildMessage()",
    "snippet": "protected String _buildMessage(){\n  String msg\u003dsuper.getMessage();\n  if (_path \u003d\u003d null) {\n    return msg;\n  }\n  StringBuilder sb\u003d(msg \u003d\u003d null) ? new StringBuilder() : new StringBuilder(msg);\n  sb.append(\" (through reference chain: \");\n  sb\u003dgetPathReference(sb);\n  sb.append(\u0027)\u0027);\n  return sb.toString();\n}",
    "begin_line": 490,
    "end_line": 507,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference.toString#510",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException.toString()",
    "snippet": "@Override public String toString(){\n  return getClass().getName() + \": \" + getMessage();\n}",
    "begin_line": 510,
    "end_line": 513,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Reference._appendPathDesc#521",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonMappingException.java",
    "class_name": "com.fasterxml.jackson.databind.JsonMappingException",
    "signature": "com.fasterxml.jackson.databind.JsonMappingException._appendPathDesc(java.lang.StringBuilder)",
    "snippet": "protected void _appendPathDesc(StringBuilder sb){\n  if (_path \u003d\u003d null) {\n    return;\n  }\n  Iterator\u003cReference\u003e it\u003d_path.iterator();\n  while (it.hasNext()) {\n    sb.append(it.next().toString());\n    if (it.hasNext()) {\n      sb.append(\"-\u003e\");\n    }\n  }\n}",
    "begin_line": 521,
    "end_line": 533,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.unwrappingSerializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.unwrappingSerializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "public JsonSerializer\u003cT\u003e unwrappingSerializer(NameTransformer unwrapper){\n  return this;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Method that will return serializer instance that produces \"unwrapped\" serialization, if applicable for type being serialized (which is the case for some serializers that produce JSON Objects as output). If no unwrapped serializer can be constructed, will simply return serializer as-is. \u003cp\u003e Default implementation just returns serializer as-is, indicating that no unwrapped variant exists\n * @param unwrapper Name transformation to use to convert between namesof unwrapper properties\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.replaceDelegatee#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.replaceDelegatee(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cT\u003e replaceDelegatee(JsonSerializer\u003c?\u003e delegatee){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 89,
    "end_line": 91,
    "comment": "/** \n * Method that can be called to try to replace serializer this serializer delegates calls to. If not supported (either this serializer does not delegate anything; or it does not want any changes), should either throw  {@link UnsupportedOperationException} (if operation does notmake sense or is not allowed); or return this serializer as is.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.withFilterId#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.withFilterId(java.lang.Object)",
    "snippet": "public JsonSerializer\u003c?\u003e withFilterId(Object filterId){\n  return this;\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Mutant factory method that is called if contextual configuration indicates that a specific filter (as specified by \u003ccode\u003efilterId\u003c/code\u003e) is to be used for serialization. \u003cp\u003e Default implementation simply returns \u003ccode\u003ethis\u003c/code\u003e; sub-classes that do support filtering will need to create and return new instance if filter changes.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.serialize#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public abstract void serialize(T value,JsonGenerator gen,SerializerProvider serializers) throws IOException ;",
    "begin_line": 122,
    "end_line": 123,
    "comment": "/** \n * Method that can be called to ask implementation to serialize values of type this serializer handles.\n * @param value Value to serialize; can \u003cb\u003enot\u003c/b\u003e be null.\n * @param gen Generator used to output resulting Json content\n * @param serializers Provider that can be used to get serializers forserializing Objects value contains, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.serializeWithType#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.serializeWithType(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "public void serializeWithType(T value,JsonGenerator gen,SerializerProvider serializers,TypeSerializer typeSer) throws IOException {\n  Class\u003c?\u003e clz\u003dhandledType();\n  if (clz \u003d\u003d null) {\n    clz\u003dvalue.getClass();\n  }\n  serializers.reportBadDefinition(clz,String.format(\"Type id handling not implemented for type %s (by serializer of type %s)\",clz.getName(),getClass().getName()));\n}",
    "begin_line": 152,
    "end_line": 163,
    "comment": "/** \n * Method that can be called to ask implementation to serialize values of type this serializer handles, using specified type serializer for embedding necessary type information. \u003cp\u003e Default implementation will throw  {@link UnsupportedOperationException}to indicate that proper type handling needs to be implemented. \u003cp\u003e For simple datatypes written as a single scalar value (JSON String, Number, Boolean), implementation would look like: \u003cpre\u003e // note: method to call depends on whether this type is serialized as JSON scalar, object or Array! typeSer.writeTypePrefixForScalar(value, gen); serialize(value, gen, provider); typeSer.writeTypeSuffixForScalar(value, gen); \u003c/pre\u003e and implementations for type serialized as JSON Arrays or Objects would differ slightly, as \u003ccode\u003eSTART-ARRAY\u003c/code\u003e/\u003ccode\u003eEND-ARRAY\u003c/code\u003e and \u003ccode\u003eSTART-OBJECT\u003c/code\u003e/\u003ccode\u003eEND-OBJECT\u003c/code\u003e pairs need to be properly handled with respect to serializing of contents.\n * @param value Value to serialize; can \u003cb\u003enot\u003c/b\u003e be null.\n * @param gen Generator used to output resulting Json content\n * @param serializers Provider that can be used to get serializers forserializing Objects value contains, if any.\n * @param typeSer Type serializer to use for including type information\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.handledType#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.handledType()",
    "snippet": "public Class\u003cT\u003e handledType(){\n  return null;\n}",
    "begin_line": 182,
    "end_line": 182,
    "comment": "/** \n * Method for accessing type of Objects this serializer can handle. Note that this information is not guaranteed to be exact -- it may be a more generic (super-type) -- but it should not be incorrect (return a non-related type). \u003cp\u003e Default implementation will return null, which essentially means same as returning \u003ccode\u003eObject.class\u003c/code\u003e would; that is, that nothing is known about handled type. \u003cp\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isEmpty#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(T)",
    "snippet": "@Deprecated public boolean isEmpty(T value){\n  return isEmpty(null,value);\n}",
    "begin_line": 195,
    "end_line": 197,
    "comment": "/** \n * Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values). \u003cp\u003e Default implementation will consider only null values to be empty.\n * @deprecated Since 2.5 Use {@link #isEmpty(SerializerProvider,Object)} instead;will be removed from 3.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isEmpty#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, T)",
    "snippet": "public boolean isEmpty(SerializerProvider provider,T value){\n  return (value \u003d\u003d null);\n}",
    "begin_line": 210,
    "end_line": 212,
    "comment": "/** \n * Method called to check whether given serializable value is considered \"empty\" value (for purposes of suppressing serialization of empty values). \u003cp\u003e Default implementation will consider only null values to be empty. \u003cp\u003e NOTE: replaces  {@link #isEmpty(Object)}, which was deprecated in 2.5\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.usesObjectId#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.usesObjectId()",
    "snippet": "public boolean usesObjectId(){\n  return false;\n}",
    "begin_line": 218,
    "end_line": 220,
    "comment": "/** \n * Method that can be called to see whether this serializer instance will use Object Id to handle cyclic references.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.isUnwrappingSerializer#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.isUnwrappingSerializer()",
    "snippet": "public boolean isUnwrappingSerializer(){\n  return false;\n}",
    "begin_line": 228,
    "end_line": 230,
    "comment": "/** \n * Accessor for checking whether this serializer is an \"unwrapping\" serializer; this is necessary to know since it may also require caller to suppress writing of the leading property name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.getDelegatee#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.getDelegatee()",
    "snippet": "public JsonSerializer\u003c?\u003e getDelegatee(){\n  return null;\n}",
    "begin_line": 243,
    "end_line": 245,
    "comment": "/** \n * Accessor that can be used to determine if this serializer uses another serializer for actual serialization, by delegating calls. If so, will return immediate delegate (which itself may delegate to further serializers); otherwise will return null.\n * @return Serializer this serializer delegates calls to, if null;null otherwise.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.properties#257",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.properties()",
    "snippet": "public Iterator\u003cPropertyWriter\u003e properties(){\n  return ClassUtil.emptyIterator();\n}",
    "begin_line": 257,
    "end_line": 259,
    "comment": "/** \n * Accessor for iterating over logical properties that the type handled by this serializer has, from serialization perspective. Actual type of properties, if any, will be {@link com.fasterxml.jackson.databind.ser.BeanPropertyWriter}. Of standard Jackson serializers, only  {@link com.fasterxml.jackson.databind.ser.BeanSerializer}exposes properties.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonSerializer.acceptJsonFormatVisitor#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/JsonSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.JsonSerializer",
    "signature": "com.fasterxml.jackson.databind.JsonSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType type) throws JsonMappingException {\n  visitor.expectAnyFormat(type);\n}",
    "begin_line": 273,
    "end_line": 277,
    "comment": "/** \n * Default implementation simply calls  {@link JsonFormatVisitorWrapper#expectAnyFormat(JavaType)}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.MapperFeature#498",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.MapperFeature(boolean)",
    "snippet": "private MapperFeature(boolean defaultState){\n  _defaultState\u003ddefaultState;\n  _mask\u003d(1 \u003c\u003c ordinal());\n}",
    "begin_line": 498,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#504",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.enabledByDefault()",
    "snippet": "@Override public boolean enabledByDefault(){\n  return _defaultState;\n}",
    "begin_line": 504,
    "end_line": 504,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#507",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.getMask()",
    "snippet": "@Override public int getMask(){\n  return _mask;\n}",
    "begin_line": 507,
    "end_line": 507,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#510",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MapperFeature.java",
    "class_name": "com.fasterxml.jackson.databind.MapperFeature",
    "signature": "com.fasterxml.jackson.databind.MapperFeature.enabledIn(int)",
    "snippet": "@Override public boolean enabledIn(int flags){\n  return (flags \u0026 _mask) !\u003d 0;\n}",
    "begin_line": 510,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory()",
    "snippet": "public MappingJsonFactory(){\n  this(null);\n}",
    "begin_line": 22,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory(com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "public MappingJsonFactory(ObjectMapper mapper){\n  super(mapper);\n  if (mapper \u003d\u003d null) {\n    setCodec(new ObjectMapper(this));\n  }\n}",
    "begin_line": 27,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.MappingJsonFactory#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.MappingJsonFactory(JsonFactory, com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "public MappingJsonFactory(JsonFactory src,ObjectMapper mapper){\n  super(src,mapper);\n  if (mapper \u003d\u003d null) {\n    setCodec(new ObjectMapper(this));\n  }\n}",
    "begin_line": 35,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.getCodec#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.getCodec()",
    "snippet": "@Override public final ObjectMapper getCodec(){\n  return (ObjectMapper)_objectCodec;\n}",
    "begin_line": 48,
    "end_line": 48,
    "comment": "/** \n * We\u0027ll override the method to return more specific type; co-variance helps here\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.copy#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.copy()",
    "snippet": "@Override public JsonFactory copy(){\n  _checkInvalidCopy(MappingJsonFactory.class);\n  return new MappingJsonFactory(this,null);\n}",
    "begin_line": 52,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.getFormatName#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.getFormatName()",
    "snippet": "@Override public String getFormatName(){\n  return FORMAT_NAME_JSON;\n}",
    "begin_line": 69,
    "end_line": 75,
    "comment": "/** \n * Sub-classes need to override this method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MappingJsonFactory.hasFormat#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/MappingJsonFactory.java",
    "class_name": "com.fasterxml.jackson.databind.MappingJsonFactory",
    "signature": "com.fasterxml.jackson.databind.MappingJsonFactory.hasFormat(InputAccessor)",
    "snippet": "@Override public MatchStrength hasFormat(InputAccessor acc) throws IOException {\n  if (getClass() \u003d\u003d MappingJsonFactory.class) {\n    return hasJSONFormat(acc);\n  }\n  return null;\n}",
    "begin_line": 81,
    "end_line": 87,
    "comment": "/** \n * Sub-classes need to override this method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.DefaultTypeResolverBuilder#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeResolverBuilder(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)",
    "snippet": "public DefaultTypeResolverBuilder(DefaultTyping t){\n  _appliesFor\u003dt;\n}",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.buildTypeDeserializer#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,JavaType baseType,Collection\u003cNamedType\u003e subtypes){\n  return useForType(baseType) ? super.buildTypeDeserializer(config,baseType,subtypes) : null;\n}",
    "begin_line": 215,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.buildTypeSerializer#222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override public TypeSerializer buildTypeSerializer(SerializationConfig config,JavaType baseType,Collection\u003cNamedType\u003e subtypes){\n  return useForType(baseType) ? super.buildTypeSerializer(config,baseType,subtypes) : null;\n}",
    "begin_line": 222,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.useForType#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.useForType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean useForType(JavaType t){\n  if (t.isPrimitive()) {\n    return false;\n  }\nswitch (_appliesFor) {\ncase NON_CONCRETE_AND_ARRAYS:    while (t.isArrayType()) {\n      t\u003dt.getContentType();\n    }\ncase OBJECT_AND_NON_CONCRETE:  while (t.isReferenceType()) {\n    t\u003dt.getReferencedType();\n  }\nreturn t.isJavaLangObject() || (!t.isConcrete() \u0026\u0026 !TreeNode.class.isAssignableFrom(t.getRawClass()));\ncase NON_FINAL:while (t.isArrayType()) {\nt\u003dt.getContentType();\n}\nwhile (t.isReferenceType()) {\nt\u003dt.getReferencedType();\n}\nreturn !t.isFinal() \u0026\u0026 !TreeNode.class.isAssignableFrom(t.getRawClass());\ndefault:return t.isJavaLangObject();\n}\n}",
    "begin_line": 236,
    "end_line": 274,
    "comment": "/** \n * Method called to check if the default type handler should be used for given type. Note: \"natural types\" (String, Boolean, Integer, Double) will never use typing; that is both due to them being concrete and final, and since actual serializers and deserializers will also ignore any attempts to enforce typing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#479",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper()",
    "snippet": "public ObjectMapper(){\n  this(null,null,null);\n}",
    "begin_line": 479,
    "end_line": 481,
    "comment": "/** \n * Default constructor, which will construct the default {@link JsonFactory} as necessary, use{@link SerializerProvider} as its{@link SerializerProvider}, and {@link BeanSerializerFactory} as its{@link SerializerFactory}. This means that it can serialize all standard JDK types, as well as regular Java Beans (based on method names and Jackson-specific annotations), but does not support JAXB annotations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory)",
    "snippet": "public ObjectMapper(JsonFactory jf){\n  this(jf,null,null);\n}",
    "begin_line": 488,
    "end_line": 490,
    "comment": "/** \n * Constructs instance that uses specified  {@link JsonFactory}for constructing necessary  {@link JsonParser}s and/or {@link JsonGenerator}s.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#497",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(com.fasterxml.jackson.databind.ObjectMapper)",
    "snippet": "protected ObjectMapper(ObjectMapper src){\n  _jsonFactory\u003dsrc._jsonFactory.copy();\n  _jsonFactory.setCodec(this);\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _typeFactory\u003dsrc._typeFactory;\n  _injectableValues\u003dsrc._injectableValues;\n  _configOverrides\u003dsrc._configOverrides.copy();\n  _mixIns\u003dsrc._mixIns.copy();\n  RootNameLookup rootNames\u003dnew RootNameLookup();\n  _serializationConfig\u003dnew SerializationConfig(src._serializationConfig,_mixIns,rootNames,_configOverrides);\n  _deserializationConfig\u003dnew DeserializationConfig(src._deserializationConfig,_mixIns,rootNames,_configOverrides);\n  _serializerProvider\u003dsrc._serializerProvider.copy();\n  _deserializationContext\u003dsrc._deserializationContext.copy();\n  _serializerFactory\u003dsrc._serializerFactory;\n  Set\u003cObject\u003e reg\u003dsrc._registeredModuleTypes;\n  if (reg \u003d\u003d null) {\n    _registeredModuleTypes\u003dnull;\n  }\n else {\n    _registeredModuleTypes\u003dnew LinkedHashSet\u003cObject\u003e(reg);\n  }\n}",
    "begin_line": 497,
    "end_line": 525,
    "comment": "/** \n * Copy-constructor, mostly used to support  {@link #copy}.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.ObjectMapper#539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.ObjectMapper(JsonFactory, com.fasterxml.jackson.databind.ser.DefaultSerializerProvider, com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)",
    "snippet": "public ObjectMapper(JsonFactory jf,DefaultSerializerProvider sp,DefaultDeserializationContext dc){\n  if (jf \u003d\u003d null) {\n    _jsonFactory\u003dnew MappingJsonFactory(this);\n  }\n else {\n    _jsonFactory\u003djf;\n    if (jf.getCodec() \u003d\u003d null) {\n      _jsonFactory.setCodec(this);\n    }\n  }\n  _subtypeResolver\u003dnew StdSubtypeResolver();\n  RootNameLookup rootNames\u003dnew RootNameLookup();\n  _typeFactory\u003dTypeFactory.defaultInstance();\n  SimpleMixInResolver mixins\u003dnew SimpleMixInResolver(null);\n  _mixIns\u003dmixins;\n  BaseSettings base\u003dDEFAULT_BASE.withClassIntrospector(defaultClassIntrospector());\n  _configOverrides\u003dnew ConfigOverrides();\n  _serializationConfig\u003dnew SerializationConfig(base,_subtypeResolver,mixins,rootNames,_configOverrides);\n  _deserializationConfig\u003dnew DeserializationConfig(base,_subtypeResolver,mixins,rootNames,_configOverrides);\n  final boolean needOrder\u003d_jsonFactory.requiresPropertyOrdering();\n  if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) {\n    configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY,needOrder);\n  }\n  _serializerProvider\u003d(sp \u003d\u003d null) ? new DefaultSerializerProvider.Impl() : sp;\n  _deserializationContext\u003d(dc \u003d\u003d null) ? new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc;\n  _serializerFactory\u003dBeanSerializerFactory.instance;\n}",
    "begin_line": 539,
    "end_line": 582,
    "comment": "/** \n * Constructs instance that uses specified  {@link JsonFactory}for constructing necessary  {@link JsonParser}s and/or {@link JsonGenerator}s, and uses given providers for accessing serializers and deserializers.\n * @param jf JsonFactory to use: if null, a new {@link MappingJsonFactory} will be constructed\n * @param sp SerializerProvider to use: if null, a {@link SerializerProvider} will be constructed\n * @param dc Blueprint deserialization context instance to use for creatingactual context objects; if null, will construct standard {@link DeserializationContext}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.defaultClassIntrospector#590",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.defaultClassIntrospector()",
    "snippet": "protected ClassIntrospector defaultClassIntrospector(){\n  return new BasicClassIntrospector();\n}",
    "begin_line": 590,
    "end_line": 592,
    "comment": "/** \n * Overridable helper method used to construct default  {@link ClassIntrospector}to use.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.copy#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.copy()",
    "snippet": "public ObjectMapper copy(){\n  _checkInvalidCopy(ObjectMapper.class);\n  return new ObjectMapper(this);\n}",
    "begin_line": 615,
    "end_line": 618,
    "comment": "/** \n * Method for creating a new  {@link ObjectMapper} instance thathas same initial configuration as this instance. Note that this also requires making a copy of the underlying  {@link JsonFactory}instance. \u003cp\u003e Method is typically used when multiple, differently configured mappers are needed. Although configuration is shared, cached serializers and deserializers are NOT shared, which means that the new instance may be re-configured before use; meaning that it behaves the same way as if an instance was constructed from scratch.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._checkInvalidCopy#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._checkInvalidCopy(java.lang.Class\u003c?\u003e)",
    "snippet": "protected void _checkInvalidCopy(Class\u003c?\u003e exp){\n  if (getClass() !\u003d exp) {\n    throw new IllegalStateException(\"Failed copy(): \" + getClass().getName() + \" (version: \"+ version()+ \") does not override copy(); it has to\");\n  }\n}",
    "begin_line": 623,
    "end_line": 630,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newReader#645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected ObjectReader _newReader(DeserializationConfig config){\n  return new ObjectReader(this,config);\n}",
    "begin_line": 645,
    "end_line": 647,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectReader}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newReader#655",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newReader(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.lang.Object, FormatSchema, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected ObjectReader _newReader(DeserializationConfig config,JavaType valueType,Object valueToUpdate,FormatSchema schema,InjectableValues injectableValues){\n  return new ObjectReader(this,config,valueType,valueToUpdate,schema,injectableValues);\n}",
    "begin_line": 655,
    "end_line": 659,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectReader}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config){\n  return new ObjectWriter(this,config);\n}",
    "begin_line": 667,
    "end_line": 669,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#677",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig, FormatSchema)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config,FormatSchema schema){\n  return new ObjectWriter(this,config,schema);\n}",
    "begin_line": 677,
    "end_line": 679,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._newWriter#687",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._newWriter(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, PrettyPrinter)",
    "snippet": "protected ObjectWriter _newWriter(SerializationConfig config,JavaType rootType,PrettyPrinter pp){\n  return new ObjectWriter(this,config,rootType,pp);\n}",
    "begin_line": 687,
    "end_line": 690,
    "comment": "/** \n * Factory method sub-classes must override, to produce  {@link ObjectWriter}instances of proper sub-type\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.version#703",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.version()",
    "snippet": "@Override public Version version(){\n  return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n}",
    "begin_line": 703,
    "end_line": 705,
    "comment": "/** \n * Method that will return version information stored in and read from jar that contains this class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModule#720",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModule(com.fasterxml.jackson.databind.Module)",
    "snippet": "public ObjectMapper registerModule(Module module){\n  if (isEnabled(MapperFeature.IGNORE_DUPLICATE_MODULE_REGISTRATIONS)) {\n    Object typeId\u003dmodule.getTypeId();\n    if (typeId !\u003d null) {\n      if (_registeredModuleTypes \u003d\u003d null) {\n        _registeredModuleTypes\u003dnew LinkedHashSet\u003cObject\u003e();\n      }\n      if (!_registeredModuleTypes.add(typeId)) {\n        return this;\n      }\n    }\n  }\n  String name\u003dmodule.getModuleName();\n  if (name \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Module without defined name\");\n  }\n  Version version\u003dmodule.version();\n  if (version \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Module without defined version\");\n  }\n  module.setupModule(new Module.SetupContext(){\n    @Override public Version getMapperVersion(){\n      return version();\n    }\n    @SuppressWarnings(\"unchecked\") @Override public \u003cC extends ObjectCodec\u003eC getOwner(){\n      return (C)ObjectMapper.this;\n    }\n    @Override public TypeFactory getTypeFactory(){\n      return _typeFactory;\n    }\n    @Override public boolean isEnabled(    MapperFeature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public boolean isEnabled(    DeserializationFeature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public boolean isEnabled(    SerializationFeature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public boolean isEnabled(    JsonFactory.Feature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public boolean isEnabled(    JsonParser.Feature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public boolean isEnabled(    JsonGenerator.Feature f){\n      return ObjectMapper.this.isEnabled(f);\n    }\n    @Override public MutableConfigOverride configOverride(    Class\u003c?\u003e type){\n      return ObjectMapper.this.configOverride(type);\n    }\n    @Override public void addDeserializers(    Deserializers d){\n      DeserializerFactory df\u003d_deserializationContext._factory.withAdditionalDeserializers(d);\n      _deserializationContext\u003d_deserializationContext.with(df);\n    }\n    @Override public void addKeyDeserializers(    KeyDeserializers d){\n      DeserializerFactory df\u003d_deserializationContext._factory.withAdditionalKeyDeserializers(d);\n      _deserializationContext\u003d_deserializationContext.with(df);\n    }\n    @Override public void addBeanDeserializerModifier(    BeanDeserializerModifier modifier){\n      DeserializerFactory df\u003d_deserializationContext._factory.withDeserializerModifier(modifier);\n      _deserializationContext\u003d_deserializationContext.with(df);\n    }\n    @Override public void addSerializers(    Serializers s){\n      _serializerFactory\u003d_serializerFactory.withAdditionalSerializers(s);\n    }\n    @Override public void addKeySerializers(    Serializers s){\n      _serializerFactory\u003d_serializerFactory.withAdditionalKeySerializers(s);\n    }\n    @Override public void addBeanSerializerModifier(    BeanSerializerModifier modifier){\n      _serializerFactory\u003d_serializerFactory.withSerializerModifier(modifier);\n    }\n    @Override public void addAbstractTypeResolver(    AbstractTypeResolver resolver){\n      DeserializerFactory df\u003d_deserializationContext._factory.withAbstractTypeResolver(resolver);\n      _deserializationContext\u003d_deserializationContext.with(df);\n    }\n    @Override public void addTypeModifier(    TypeModifier modifier){\n      TypeFactory f\u003d_typeFactory;\n      f\u003df.withModifier(modifier);\n      setTypeFactory(f);\n    }\n    @Override public void addValueInstantiators(    ValueInstantiators instantiators){\n      DeserializerFactory df\u003d_deserializationContext._factory.withValueInstantiators(instantiators);\n      _deserializationContext\u003d_deserializationContext.with(df);\n    }\n    @Override public void setClassIntrospector(    ClassIntrospector ci){\n      _deserializationConfig\u003d_deserializationConfig.with(ci);\n      _serializationConfig\u003d_serializationConfig.with(ci);\n    }\n    @Override public void insertAnnotationIntrospector(    AnnotationIntrospector ai){\n      _deserializationConfig\u003d_deserializationConfig.withInsertedAnnotationIntrospector(ai);\n      _serializationConfig\u003d_serializationConfig.withInsertedAnnotationIntrospector(ai);\n    }\n    @Override public void appendAnnotationIntrospector(    AnnotationIntrospector ai){\n      _deserializationConfig\u003d_deserializationConfig.withAppendedAnnotationIntrospector(ai);\n      _serializationConfig\u003d_serializationConfig.withAppendedAnnotationIntrospector(ai);\n    }\n    @Override public void registerSubtypes(    Class\u003c?\u003e... subtypes){\n      ObjectMapper.this.registerSubtypes(subtypes);\n    }\n    @Override public void registerSubtypes(    NamedType... subtypes){\n      ObjectMapper.this.registerSubtypes(subtypes);\n    }\n    @Override public void registerSubtypes(    Collection\u003cClass\u003c?\u003e\u003e subtypes){\n      ObjectMapper.this.registerSubtypes(subtypes);\n    }\n    @Override public void setMixInAnnotations(    Class\u003c?\u003e target,    Class\u003c?\u003e mixinSource){\n      addMixIn(target,mixinSource);\n    }\n    @Override public void addDeserializationProblemHandler(    DeserializationProblemHandler handler){\n      addHandler(handler);\n    }\n    @Override public void setNamingStrategy(    PropertyNamingStrategy naming){\n      setPropertyNamingStrategy(naming);\n    }\n  }\n);\n  return this;\n}",
    "begin_line": 720,
    "end_line": 916,
    "comment": "/** \n * Method for registering a module that can extend functionality provided by this mapper; for example, by adding providers for custom serializers and deserializers.\n * @param module Module to register\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getMapperVersion#756",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getMapperVersion()",
    "snippet": "@Override public Version getMapperVersion(){\n  return version();\n}",
    "begin_line": 756,
    "end_line": 758,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getOwner#762",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getOwner()",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public \u003cC extends ObjectCodec\u003eC getOwner(){\n  return (C)ObjectMapper.this;\n}",
    "begin_line": 762,
    "end_line": 765,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getTypeFactory#768",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()",
    "snippet": "@Override public TypeFactory getTypeFactory(){\n  return _typeFactory;\n}",
    "begin_line": 768,
    "end_line": 770,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#773",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override public boolean isEnabled(MapperFeature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 773,
    "end_line": 775,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "@Override public boolean isEnabled(DeserializationFeature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 778,
    "end_line": 780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#783",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "@Override public boolean isEnabled(SerializationFeature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 783,
    "end_line": 785,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#788",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonFactory.Feature)",
    "snippet": "@Override public boolean isEnabled(JsonFactory.Feature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 788,
    "end_line": 790,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#793",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonParser.Feature)",
    "snippet": "@Override public boolean isEnabled(JsonParser.Feature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 793,
    "end_line": 795,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#798",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonGenerator.Feature)",
    "snippet": "@Override public boolean isEnabled(JsonGenerator.Feature f){\n  return ObjectMapper.this.isEnabled(f);\n}",
    "begin_line": 798,
    "end_line": 800,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configOverride#805",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public MutableConfigOverride configOverride(Class\u003c?\u003e type){\n  return ObjectMapper.this.configOverride(type);\n}",
    "begin_line": 805,
    "end_line": 807,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addDeserializers#812",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "@Override public void addDeserializers(Deserializers d){\n  DeserializerFactory df\u003d_deserializationContext._factory.withAdditionalDeserializers(d);\n  _deserializationContext\u003d_deserializationContext.with(df);\n}",
    "begin_line": 812,
    "end_line": 815,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addKeyDeserializers#818",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "@Override public void addKeyDeserializers(KeyDeserializers d){\n  DeserializerFactory df\u003d_deserializationContext._factory.withAdditionalKeyDeserializers(d);\n  _deserializationContext\u003d_deserializationContext.with(df);\n}",
    "begin_line": 818,
    "end_line": 821,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addBeanDeserializerModifier#824",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addBeanDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "@Override public void addBeanDeserializerModifier(BeanDeserializerModifier modifier){\n  DeserializerFactory df\u003d_deserializationContext._factory.withDeserializerModifier(modifier);\n  _deserializationContext\u003d_deserializationContext.with(df);\n}",
    "begin_line": 824,
    "end_line": 827,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addSerializers#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override public void addSerializers(Serializers s){\n  _serializerFactory\u003d_serializerFactory.withAdditionalSerializers(s);\n}",
    "begin_line": 832,
    "end_line": 834,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addKeySerializers#837",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override public void addKeySerializers(Serializers s){\n  _serializerFactory\u003d_serializerFactory.withAdditionalKeySerializers(s);\n}",
    "begin_line": 837,
    "end_line": 839,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addBeanSerializerModifier#842",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addBeanSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "@Override public void addBeanSerializerModifier(BeanSerializerModifier modifier){\n  _serializerFactory\u003d_serializerFactory.withSerializerModifier(modifier);\n}",
    "begin_line": 842,
    "end_line": 844,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addAbstractTypeResolver#849",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "@Override public void addAbstractTypeResolver(AbstractTypeResolver resolver){\n  DeserializerFactory df\u003d_deserializationContext._factory.withAbstractTypeResolver(resolver);\n  _deserializationContext\u003d_deserializationContext.with(df);\n}",
    "begin_line": 849,
    "end_line": 852,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addTypeModifier#855",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addTypeModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "snippet": "@Override public void addTypeModifier(TypeModifier modifier){\n  TypeFactory f\u003d_typeFactory;\n  f\u003df.withModifier(modifier);\n  setTypeFactory(f);\n}",
    "begin_line": 855,
    "end_line": 859,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addValueInstantiators#862",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "@Override public void addValueInstantiators(ValueInstantiators instantiators){\n  DeserializerFactory df\u003d_deserializationContext._factory.withValueInstantiators(instantiators);\n  _deserializationContext\u003d_deserializationContext.with(df);\n}",
    "begin_line": 862,
    "end_line": 865,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setClassIntrospector#868",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "@Override public void setClassIntrospector(ClassIntrospector ci){\n  _deserializationConfig\u003d_deserializationConfig.with(ci);\n  _serializationConfig\u003d_serializationConfig.with(ci);\n}",
    "begin_line": 868,
    "end_line": 871,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.insertAnnotationIntrospector#874",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.insertAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Override public void insertAnnotationIntrospector(AnnotationIntrospector ai){\n  _deserializationConfig\u003d_deserializationConfig.withInsertedAnnotationIntrospector(ai);\n  _serializationConfig\u003d_serializationConfig.withInsertedAnnotationIntrospector(ai);\n}",
    "begin_line": 874,
    "end_line": 877,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.appendAnnotationIntrospector#880",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.appendAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Override public void appendAnnotationIntrospector(AnnotationIntrospector ai){\n  _deserializationConfig\u003d_deserializationConfig.withAppendedAnnotationIntrospector(ai);\n  _serializationConfig\u003d_serializationConfig.withAppendedAnnotationIntrospector(ai);\n}",
    "begin_line": 880,
    "end_line": 883,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#886",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public void registerSubtypes(Class\u003c?\u003e... subtypes){\n  ObjectMapper.this.registerSubtypes(subtypes);\n}",
    "begin_line": 886,
    "end_line": 888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#891",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "@Override public void registerSubtypes(NamedType... subtypes){\n  ObjectMapper.this.registerSubtypes(subtypes);\n}",
    "begin_line": 891,
    "end_line": 893,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#896",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Override public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes){\n  ObjectMapper.this.registerSubtypes(subtypes);\n}",
    "begin_line": 896,
    "end_line": 898,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInAnnotations#901",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public void setMixInAnnotations(Class\u003c?\u003e target,Class\u003c?\u003e mixinSource){\n  addMixIn(target,mixinSource);\n}",
    "begin_line": 901,
    "end_line": 903,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addDeserializationProblemHandler#906",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addDeserializationProblemHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "@Override public void addDeserializationProblemHandler(DeserializationProblemHandler handler){\n  addHandler(handler);\n}",
    "begin_line": 906,
    "end_line": 908,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setNamingStrategy#911",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "@Override public void setNamingStrategy(PropertyNamingStrategy naming){\n  setPropertyNamingStrategy(naming);\n}",
    "begin_line": 911,
    "end_line": 913,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModules#929",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModules(com.fasterxml.jackson.databind.Module)",
    "snippet": "public ObjectMapper registerModules(Module... modules){\n  for (  Module module : modules) {\n    registerModule(module);\n  }\n  return this;\n}",
    "begin_line": 929,
    "end_line": 935,
    "comment": "/** \n * Convenience method for registering specified modules in order; functionally equivalent to: \u003cpre\u003e for (Module module : modules) { registerModule(module); } \u003c/pre\u003e\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerModules#948",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerModules(java.lang.Iterable\u003c? extends com.fasterxml.jackson.databind.Module\u003e)",
    "snippet": "public ObjectMapper registerModules(Iterable\u003c? extends Module\u003e modules){\n  for (  Module module : modules) {\n    registerModule(module);\n  }\n  return this;\n}",
    "begin_line": 948,
    "end_line": 954,
    "comment": "/** \n * Convenience method for registering specified modules in order; functionally equivalent to: \u003cpre\u003e for (Module module : modules) { registerModule(module); } \u003c/pre\u003e\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getRegisteredModuleIds#963",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getRegisteredModuleIds()",
    "snippet": "public Set\u003cObject\u003e getRegisteredModuleIds(){\n  return Collections.unmodifiableSet(_registeredModuleTypes);\n}",
    "begin_line": 963,
    "end_line": 966,
    "comment": "/** \n * The set of  {@link Module} typeIds that are registered in thisObjectMapper. By default the typeId for a module is it\u0027s full class name (see  {@link Module#getTypeId()}).\n * @since 2.9.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findModules#977",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findModules()",
    "snippet": "public static List\u003cModule\u003e findModules(){\n  return findModules(null);\n}",
    "begin_line": 977,
    "end_line": 979,
    "comment": "/** \n * Method for locating available methods, using JDK  {@link ServiceLoader}facility, along with module-provided SPI. \u003cp\u003e Note that method does not do any caching, so calls should be considered potentially expensive.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findModules#990",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findModules(java.lang.ClassLoader)",
    "snippet": "public static List\u003cModule\u003e findModules(ClassLoader classLoader){\n  ArrayList\u003cModule\u003e modules\u003dnew ArrayList\u003cModule\u003e();\n  ServiceLoader\u003cModule\u003e loader\u003dsecureGetServiceLoader(Module.class,classLoader);\n  for (  Module module : loader) {\n    modules.add(module);\n  }\n  return modules;\n}",
    "begin_line": 990,
    "end_line": 998,
    "comment": "/** \n * Method for locating available methods, using JDK  {@link ServiceLoader}facility, along with module-provided SPI. \u003cp\u003e Note that method does not do any caching, so calls should be considered potentially expensive.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.secureGetServiceLoader#1000",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.secureGetServiceLoader(java.lang.Class\u003cT\u003e, java.lang.ClassLoader)",
    "snippet": "private static \u003cT\u003eServiceLoader\u003cT\u003e secureGetServiceLoader(final Class\u003cT\u003e clazz,final ClassLoader classLoader){\n  final SecurityManager sm\u003dSystem.getSecurityManager();\n  if (sm \u003d\u003d null) {\n    return (classLoader \u003d\u003d null) ? ServiceLoader.load(clazz) : ServiceLoader.load(clazz,classLoader);\n  }\n  return AccessController.doPrivileged(new PrivilegedAction\u003cServiceLoader\u003cT\u003e\u003e(){\n    @Override public ServiceLoader\u003cT\u003e run(){\n      return (classLoader \u003d\u003d null) ? ServiceLoader.load(clazz) : ServiceLoader.load(clazz,classLoader);\n    }\n  }\n);\n}",
    "begin_line": 1000,
    "end_line": 1013,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.run#1008",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.run()",
    "snippet": "@Override public ServiceLoader\u003cT\u003e run(){\n  return (classLoader \u003d\u003d null) ? ServiceLoader.load(clazz) : ServiceLoader.load(clazz,classLoader);\n}",
    "begin_line": 1008,
    "end_line": 1011,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findAndRegisterModules#1027",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findAndRegisterModules()",
    "snippet": "public ObjectMapper findAndRegisterModules(){\n  return registerModules(findModules());\n}",
    "begin_line": 1027,
    "end_line": 1029,
    "comment": "/** \n * Convenience method that is functionally equivalent to: \u003ccode\u003e mapper.registerModules(mapper.findModules()); \u003c/code\u003e \u003cp\u003e As with  {@link #findModules()}, no caching is done for modules, so care needs to be taken to either create and share a single mapper instance; or to cache introspected set of modules.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializationConfig#1045",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializationConfig()",
    "snippet": "public SerializationConfig getSerializationConfig(){\n  return _serializationConfig;\n}",
    "begin_line": 1045,
    "end_line": 1047,
    "comment": "/** \n * Method that returns the shared default  {@link SerializationConfig}object that defines configuration settings for serialization. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDeserializationConfig#1058",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDeserializationConfig()",
    "snippet": "public DeserializationConfig getDeserializationConfig(){\n  return _deserializationConfig;\n}",
    "begin_line": 1058,
    "end_line": 1060,
    "comment": "/** \n * Method that returns the shared default  {@link DeserializationConfig} objectthat defines configuration settings for deserialization. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDeserializationContext#1069",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDeserializationContext()",
    "snippet": "public DeserializationContext getDeserializationContext(){\n  return _deserializationContext;\n}",
    "begin_line": 1069,
    "end_line": 1071,
    "comment": "/** \n * Method for getting current  {@link DeserializationContext}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of context object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializerFactory#1083",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerFactory(com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "public ObjectMapper setSerializerFactory(SerializerFactory f){\n  _serializerFactory\u003df;\n  return this;\n}",
    "begin_line": 1083,
    "end_line": 1086,
    "comment": "/** \n * Method for setting specific  {@link SerializerFactory} to usefor constructing (bean) serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerFactory#1095",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerFactory()",
    "snippet": "public SerializerFactory getSerializerFactory(){\n  return _serializerFactory;\n}",
    "begin_line": 1095,
    "end_line": 1097,
    "comment": "/** \n * Method for getting current  {@link SerializerFactory}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of factory object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializerProvider#1104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)",
    "snippet": "public ObjectMapper setSerializerProvider(DefaultSerializerProvider p){\n  _serializerProvider\u003dp;\n  return this;\n}",
    "begin_line": 1104,
    "end_line": 1107,
    "comment": "/** \n * Method for setting \"blueprint\"  {@link SerializerProvider} instanceto use as the base for actual provider instances to use for handling caching of  {@link JsonSerializer} instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerProvider#1116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerProvider()",
    "snippet": "public SerializerProvider getSerializerProvider(){\n  return _serializerProvider;\n}",
    "begin_line": 1116,
    "end_line": 1118,
    "comment": "/** \n * Accessor for the \"blueprint\" (or, factory) instance, from which instances are created by calling  {@link DefaultSerializerProvider#createInstance}. Note that returned instance cannot be directly used as it is not properly configured: to get a properly configured instance to call, use {@link #getSerializerProviderInstance()} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSerializerProviderInstance#1128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSerializerProviderInstance()",
    "snippet": "public SerializerProvider getSerializerProviderInstance(){\n  return _serializerProvider(_serializationConfig);\n}",
    "begin_line": 1128,
    "end_line": 1130,
    "comment": "/** \n * Accessor for constructing and returning a  {@link SerializerProvider}instance that may be used for accessing serializers. This is same as calling  {@link #getSerializerProvider}, and calling \u003ccode\u003ecreateInstance\u003c/code\u003e on it.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixIns#1155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixIns(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public ObjectMapper setMixIns(Map\u003cClass\u003c?\u003e,Class\u003c?\u003e\u003e sourceMixins){\n  _mixIns.setLocalDefinitions(sourceMixins);\n  return this;\n}",
    "begin_line": 1155,
    "end_line": 1160,
    "comment": "/** \n * Method to use for defining mix-in annotations to use for augmenting annotations that processable (serializable / deserializable) classes have. Mixing in is done when introspecting class annotations and properties. Map passed contains keys that are target classes (ones to augment with new annotation overrides), and values that are source classes (have annotations to use for augmentation). Annotations from source classes (and their supertypes) will \u003cb\u003eoverride\u003c/b\u003e annotations that target classes (and their super-types) have. \u003cp\u003e Note that this method will CLEAR any previously defined mix-ins for this mapper.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addMixIn#1174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addMixIn(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectMapper addMixIn(Class\u003c?\u003e target,Class\u003c?\u003e mixinSource){\n  _mixIns.addLocalDefinition(target,mixinSource);\n  return this;\n}",
    "begin_line": 1174,
    "end_line": 1178,
    "comment": "/** \n * Method to use for adding mix-in annotations to use for augmenting specified class or interface. All annotations from \u003ccode\u003emixinSource\u003c/code\u003e are taken to override annotations that \u003ccode\u003etarget\u003c/code\u003e (or its supertypes) has.\n * @param target Class (or interface) whose annotations to effectively override\n * @param mixinSource Class (or interface) whose annotations are tobe \"added\" to target\u0027s annotations, overriding as necessary\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInResolver#1188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public ObjectMapper setMixInResolver(ClassIntrospector.MixInResolver resolver){\n  SimpleMixInResolver r\u003d_mixIns.withOverrides(resolver);\n  if (r !\u003d _mixIns) {\n    _mixIns\u003dr;\n    _deserializationConfig\u003dnew DeserializationConfig(_deserializationConfig,r);\n    _serializationConfig\u003dnew SerializationConfig(_serializationConfig,r);\n  }\n  return this;\n}",
    "begin_line": 1188,
    "end_line": 1197,
    "comment": "/** \n * Method that can be called to specify given resolver for locating mix-in classes to use, overriding directly added mappings. Note that direct mappings are not cleared, but they are only applied if resolver does not provide mix-in matches.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.findMixInClassFor#1199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls){\n  return _mixIns.findMixInClassFor(cls);\n}",
    "begin_line": 1199,
    "end_line": 1201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.mixInCount#1204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.mixInCount()",
    "snippet": "public int mixInCount(){\n  return _mixIns.localSize();\n}",
    "begin_line": 1204,
    "end_line": 1206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setMixInAnnotations#1212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setMixInAnnotations(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Deprecated public void setMixInAnnotations(Map\u003cClass\u003c?\u003e,Class\u003c?\u003e\u003e sourceMixins){\n  setMixIns(sourceMixins);\n}",
    "begin_line": 1212,
    "end_line": 1214,
    "comment": "/** \n * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #setMixIns}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addMixInAnnotations#1220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addMixInAnnotations(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public final void addMixInAnnotations(Class\u003c?\u003e target,Class\u003c?\u003e mixinSource){\n  addMixIn(target,mixinSource);\n}",
    "begin_line": 1220,
    "end_line": 1222,
    "comment": "/** \n * @deprecated Since 2.5: replaced by a fluent form of the method; {@link #addMixIn(Class,Class)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getVisibilityChecker#1235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getVisibilityChecker()",
    "snippet": "public VisibilityChecker\u003c?\u003e getVisibilityChecker(){\n  return _serializationConfig.getDefaultVisibilityChecker();\n}",
    "begin_line": 1235,
    "end_line": 1237,
    "comment": "/** \n * Method for accessing currently configured visibility checker; object used for determining whether given property element (method, field, constructor) can be auto-detected or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibility#1249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public ObjectMapper setVisibility(VisibilityChecker\u003c?\u003e vc){\n  _configOverrides.setDefaultVisibility(vc);\n  return this;\n}",
    "begin_line": 1249,
    "end_line": 1252,
    "comment": "/** \n * Method for setting currently configured default  {@link VisibilityChecker}, object used for determining whether given property element (method, field, constructor) can be auto-detected or not. This default checker is used as the base visibility: per-class overrides (both via annotations and per-type config overrides) can further change these settings.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibility#1278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibility(PropertyAccessor, JsonAutoDetect.Visibility)",
    "snippet": "public ObjectMapper setVisibility(PropertyAccessor forMethod,JsonAutoDetect.Visibility visibility){\n  VisibilityChecker\u003c?\u003e vc\u003d_configOverrides.getDefaultVisibility();\n  vc\u003dvc.withVisibility(forMethod,visibility);\n  _configOverrides.setDefaultVisibility(vc);\n  return this;\n}",
    "begin_line": 1278,
    "end_line": 1284,
    "comment": "/** \n * Convenience method that allows changing configuration for underlying  {@link VisibilityChecker}s, to change details of what kinds of properties are auto-detected. Basically short cut for doing: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().withVisibility(forMethod, visibility) ); \u003c/pre\u003e one common use case would be to do: \u003cpre\u003e mapper.setVisibility(JsonMethod.FIELD, Visibility.ANY); \u003c/pre\u003e which would make all member fields serializable without further annotations, instead of just public fields (default setting).\n * @param forMethod Type of property descriptor affected (field, getter/isGetter,setter, creator)\n * @param visibility Minimum visibility to require for the property descriptors of type\n * @return Modified mapper instance (that is, \"this\"), to allow chainingof configuration calls\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getSubtypeResolver#1289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getSubtypeResolver()",
    "snippet": "public SubtypeResolver getSubtypeResolver(){\n  return _subtypeResolver;\n}",
    "begin_line": 1289,
    "end_line": 1291,
    "comment": "/** \n * Method for accessing subtype resolver in use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSubtypeResolver#1296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSubtypeResolver(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "public ObjectMapper setSubtypeResolver(SubtypeResolver str){\n  _subtypeResolver\u003dstr;\n  _deserializationConfig\u003d_deserializationConfig.with(str);\n  _serializationConfig\u003d_serializationConfig.with(str);\n  return this;\n}",
    "begin_line": 1296,
    "end_line": 1301,
    "comment": "/** \n * Method for setting custom subtype resolver to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setAnnotationIntrospector#1313",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai){\n  _serializationConfig\u003d_serializationConfig.with(ai);\n  _deserializationConfig\u003d_deserializationConfig.with(ai);\n  return this;\n}",
    "begin_line": 1313,
    "end_line": 1317,
    "comment": "/** \n * Method for setting  {@link AnnotationIntrospector} used by thismapper instance for both serialization and deserialization. Note that doing this will replace the current introspector, which may lead to unavailability of core Jackson annotations. If you want to combine handling of multiple introspectors, have a look at  {@link com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair}.\n * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setAnnotationIntrospectors#1334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setAnnotationIntrospectors(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI,AnnotationIntrospector deserializerAI){\n  _serializationConfig\u003d_serializationConfig.with(serializerAI);\n  _deserializationConfig\u003d_deserializationConfig.with(deserializerAI);\n  return this;\n}",
    "begin_line": 1334,
    "end_line": 1339,
    "comment": "/** \n * Method for changing  {@link AnnotationIntrospector} instances usedby this mapper instance for serialization and deserialization, specifying them separately so that different introspection can be used for different aspects\n * @since 2.1\n * @param serializerAI {@link AnnotationIntrospector} to use for configuringserialization\n * @param deserializerAI {@link AnnotationIntrospector} to use for configuringdeserialization\n * @see com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setPropertyNamingStrategy#1344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s){\n  _serializationConfig\u003d_serializationConfig.with(s);\n  _deserializationConfig\u003d_deserializationConfig.with(s);\n  return this;\n}",
    "begin_line": 1344,
    "end_line": 1348,
    "comment": "/** \n * Method for setting custom property naming strategy to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getPropertyNamingStrategy#1353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getPropertyNamingStrategy()",
    "snippet": "public PropertyNamingStrategy getPropertyNamingStrategy(){\n  return _serializationConfig.getPropertyNamingStrategy();\n}",
    "begin_line": 1353,
    "end_line": 1356,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPrettyPrinter#1368",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPrettyPrinter(PrettyPrinter)",
    "snippet": "public ObjectMapper setDefaultPrettyPrinter(PrettyPrinter pp){\n  _serializationConfig\u003d_serializationConfig.withDefaultPrettyPrinter(pp);\n  return this;\n}",
    "begin_line": 1368,
    "end_line": 1371,
    "comment": "/** \n * Method for specifying  {@link PrettyPrinter} to use when \"default pretty-printing\"is enabled (by enabling  {@link SerializationFeature#INDENT_OUTPUT})\n * @param pp Pretty printer to use by default.\n * @return This mapper, useful for call-chaining\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setVisibilityChecker#1377",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setVisibilityChecker(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "@Deprecated public void setVisibilityChecker(VisibilityChecker\u003c?\u003e vc){\n  setVisibility(vc);\n}",
    "begin_line": 1377,
    "end_line": 1379,
    "comment": "/** \n * @deprecated Since 2.6 use {@link #setVisibility(VisibilityChecker)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setSerializationInclusion#1396",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setSerializationInclusion(JsonInclude.Include)",
    "snippet": "public ObjectMapper setSerializationInclusion(JsonInclude.Include incl){\n  setPropertyInclusion(JsonInclude.Value.construct(incl,incl));\n  return this;\n}",
    "begin_line": 1396,
    "end_line": 1399,
    "comment": "/** \n * Convenience method, equivalent to calling: \u003cpre\u003e setPropertyInclusion(JsonInclude.Value.construct(incl, incl)); \u003c/pre\u003e \u003cp\u003e NOTE: behavior differs slightly from 2.8, where second argument was implied to be \u003ccode\u003eJsonInclude.Include.ALWAYS\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setPropertyInclusion#1406",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Deprecated public ObjectMapper setPropertyInclusion(JsonInclude.Value incl){\n  return setDefaultPropertyInclusion(incl);\n}",
    "begin_line": 1406,
    "end_line": 1408,
    "comment": "/** \n * @since 2.7\n * @deprecated Since 2.9 use {@link #setDefaultPropertyInclusion}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPropertyInclusion#1417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Value)",
    "snippet": "public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Value incl){\n  _configOverrides.setDefaultInclusion(incl);\n  return this;\n}",
    "begin_line": 1417,
    "end_line": 1420,
    "comment": "/** \n * Method for setting default POJO property inclusion strategy for serialization, applied for all properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9 (basically rename of \u003ccode\u003esetPropertyInclusion\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultPropertyInclusion#1430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultPropertyInclusion(JsonInclude.Include)",
    "snippet": "public ObjectMapper setDefaultPropertyInclusion(JsonInclude.Include incl){\n  _configOverrides.setDefaultInclusion(JsonInclude.Value.construct(incl,incl));\n  return this;\n}",
    "begin_line": 1430,
    "end_line": 1433,
    "comment": "/** \n * Short-cut for: \u003cpre\u003e setDefaultPropertyInclusion(JsonInclude.Value.construct(incl, incl)); \u003c/pre\u003e\n * @since 2.9 (basically rename of \u003ccode\u003esetPropertyInclusion\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultSetterInfo#1442",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultSetterInfo(JsonSetter.Value)",
    "snippet": "public ObjectMapper setDefaultSetterInfo(JsonSetter.Value v){\n  _configOverrides.setDefaultSetterInfo(v);\n  return this;\n}",
    "begin_line": 1442,
    "end_line": 1445,
    "comment": "/** \n * Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultVisibility#1455",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultVisibility(JsonAutoDetect.Value)",
    "snippet": "public ObjectMapper setDefaultVisibility(JsonAutoDetect.Value vis){\n  _configOverrides.setDefaultVisibility(VisibilityChecker.Std.construct(vis));\n  return this;\n}",
    "begin_line": 1455,
    "end_line": 1458,
    "comment": "/** \n * Method for setting auto-detection visibility definition defaults, which are in effect unless overridden by annotations (like \u003ccode\u003eJsonAutoDetect\u003c/code\u003e) or per-type visibility overrides.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultMergeable#1467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultMergeable(java.lang.Boolean)",
    "snippet": "public ObjectMapper setDefaultMergeable(Boolean b){\n  _configOverrides.setDefaultMergeable(b);\n  return this;\n}",
    "begin_line": 1467,
    "end_line": 1470,
    "comment": "/** \n * Method for setting default Setter configuration, regarding things like merging, null-handling; used for properties for which there are no per-type or per-property overrides (via annotations or config overrides).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping()",
    "snippet": "public ObjectMapper enableDefaultTyping(){\n  return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE);\n}",
    "begin_line": 1490,
    "end_line": 1492,
    "comment": "/** \n * Convenience method that is equivalent to calling \u003cpre\u003e enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE); \u003c/pre\u003e \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1506",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping)",
    "snippet": "public ObjectMapper enableDefaultTyping(DefaultTyping dti){\n  return enableDefaultTyping(dti,JsonTypeInfo.As.WRAPPER_ARRAY);\n}",
    "begin_line": 1506,
    "end_line": 1508,
    "comment": "/** \n * Convenience method that is equivalent to calling \u003cpre\u003e enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY); \u003c/pre\u003e \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTyping#1528",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTyping(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, JsonTypeInfo.As)",
    "snippet": "public ObjectMapper enableDefaultTyping(DefaultTyping applicability,JsonTypeInfo.As includeAs){\n  if (includeAs \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n    throw new IllegalArgumentException(\"Cannot use includeAs of \" + includeAs);\n  }\n  TypeResolverBuilder\u003c?\u003e typer\u003dnew DefaultTypeResolverBuilder(applicability);\n  typer\u003dtyper.init(JsonTypeInfo.Id.CLASS,null);\n  typer\u003dtyper.inclusion(includeAs);\n  return setDefaultTyping(typer);\n}",
    "begin_line": 1528,
    "end_line": 1542,
    "comment": "/** \n * Method for enabling automatic inclusion of type information, needed for proper deserialization of polymorphic types (unless types have been annotated with  {@link com.fasterxml.jackson.annotation.JsonTypeInfo}). \u003cP\u003e NOTE: use of \u003ccode\u003eJsonTypeInfo.As#EXTERNAL_PROPERTY\u003c/code\u003e \u003cb\u003eNOT SUPPORTED\u003c/b\u003e; and attempts of do so will throw an  {@link IllegalArgumentException} to makethis limitation explicit. \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n * @param applicability Defines kinds of types for which additional type informationis added; see  {@link DefaultTyping} for more information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enableDefaultTypingAsProperty#1558",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enableDefaultTypingAsProperty(com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping, java.lang.String)",
    "snippet": "public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability,String propertyName){\n  TypeResolverBuilder\u003c?\u003e typer\u003dnew DefaultTypeResolverBuilder(applicability);\n  typer\u003dtyper.init(JsonTypeInfo.Id.CLASS,null);\n  typer\u003dtyper.inclusion(JsonTypeInfo.As.PROPERTY);\n  typer\u003dtyper.typeProperty(propertyName);\n  return setDefaultTyping(typer);\n}",
    "begin_line": 1558,
    "end_line": 1566,
    "comment": "/** \n * Method for enabling automatic inclusion of type information -- needed for proper deserialization of polymorphic types (unless types have been annotated with  {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) -- using \"As.PROPERTY\" inclusion mechanism and specified property name to use for inclusion (default being \"@class\" since default type information always uses class name as type identifier) \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, and it is recommended that this is either not done, or, if enabled, use  {@link #setDefaultTyping}passing a custom  {@link TypeResolverBuilder} implementation that white-listslegal types to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disableDefaultTyping#1574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disableDefaultTyping()",
    "snippet": "public ObjectMapper disableDefaultTyping(){\n  return setDefaultTyping(null);\n}",
    "begin_line": 1574,
    "end_line": 1576,
    "comment": "/** \n * Method for disabling automatic inclusion of type information; if so, only explicitly annotated types (ones with {@link com.fasterxml.jackson.annotation.JsonTypeInfo}) will have additional embedded type information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDefaultTyping#1590",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDefaultTyping(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public ObjectMapper setDefaultTyping(TypeResolverBuilder\u003c?\u003e typer){\n  _deserializationConfig\u003d_deserializationConfig.with(typer);\n  _serializationConfig\u003d_serializationConfig.with(typer);\n  return this;\n}",
    "begin_line": 1590,
    "end_line": 1594,
    "comment": "/** \n * Method for enabling automatic inclusion of type information, using specified handler object for determining which types this affects, as well as details of how information is embedded. \u003cp\u003e NOTE: use of Default Typing can be a potential security risk if incoming content comes from untrusted sources, so care should be taken to use a  {@link TypeResolverBuilder} that can limit allowed classes todeserialize.\n * @param typer Type information inclusion handler\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#1603",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "public void registerSubtypes(Class\u003c?\u003e... classes){\n  getSubtypeResolver().registerSubtypes(classes);\n}",
    "begin_line": 1603,
    "end_line": 1605,
    "comment": "/** \n * Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Type for given class is determined from appropriate annotation; or if missing, default name (unqualified class name)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#1615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "public void registerSubtypes(NamedType... types){\n  getSubtypeResolver().registerSubtypes(types);\n}",
    "begin_line": 1615,
    "end_line": 1617,
    "comment": "/** \n * Method for registering specified class as a subtype, so that typename-based resolution can link supertypes to subtypes (as an alternative to using annotations). Name may be provided as part of argument, but if not will be based on annotations or use default name (unqualified class name).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.registerSubtypes#1622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.registerSubtypes(java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes){\n  getSubtypeResolver().registerSubtypes(subtypes);\n}",
    "begin_line": 1622,
    "end_line": 1624,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configOverride#1649",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public MutableConfigOverride configOverride(Class\u003c?\u003e type){\n  return _configOverrides.findOrCreateOverride(type);\n}",
    "begin_line": 1649,
    "end_line": 1651,
    "comment": "/** \n * Accessor for getting a mutable configuration override object for given type, needed to add or change per-type overrides applied to properties of given type. Usage is through returned object by colling \"setter\" methods, which directly modify override object and take effect directly. For example you can do \u003cpre\u003e mapper.configOverride(java.util.Date.class) .setFormat(JsonFormat.Value.forPattern(\"yyyy-MM-dd\")); \u003cpre\u003e to change the default format to use for properties of type {@link java.util.Date} (possibly further overridden by per-propertyannotations)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getTypeFactory#1662",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getTypeFactory()",
    "snippet": "public TypeFactory getTypeFactory(){\n  return _typeFactory;\n}",
    "begin_line": 1662,
    "end_line": 1664,
    "comment": "/** \n * Accessor for getting currently configured  {@link TypeFactory} instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setTypeFactory#1673",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public ObjectMapper setTypeFactory(TypeFactory f){\n  _typeFactory\u003df;\n  _deserializationConfig\u003d_deserializationConfig.with(f);\n  _serializationConfig\u003d_serializationConfig.with(f);\n  return this;\n}",
    "begin_line": 1673,
    "end_line": 1679,
    "comment": "/** \n * Method that can be used to override  {@link TypeFactory} instanceused by this mapper. \u003cp\u003e Note: will also set  {@link TypeFactory} that deserialization andserialization config objects use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.constructType#1686",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type t){\n  return _typeFactory.constructType(t);\n}",
    "begin_line": 1686,
    "end_line": 1688,
    "comment": "/** \n * Convenience method for constructing  {@link JavaType} out of giventype (typically \u003ccode\u003ejava.lang.Class\u003c/code\u003e), but without explicit context.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getNodeFactory#1706",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getNodeFactory()",
    "snippet": "public JsonNodeFactory getNodeFactory(){\n  return _deserializationConfig.getNodeFactory();\n}",
    "begin_line": 1706,
    "end_line": 1708,
    "comment": "/** \n * Method that can be used to get hold of  {@link JsonNodeFactory}that this mapper will use when directly constructing root  {@link JsonNode} instances for Trees.\u003cp\u003e Note: this is just a shortcut for calling \u003cpre\u003e getDeserializationConfig().getNodeFactory() \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setNodeFactory#1715",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setNodeFactory(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public ObjectMapper setNodeFactory(JsonNodeFactory f){\n  _deserializationConfig\u003d_deserializationConfig.with(f);\n  return this;\n}",
    "begin_line": 1715,
    "end_line": 1718,
    "comment": "/** \n * Method for specifying  {@link JsonNodeFactory} to use forconstructing root level tree nodes (via method {@link #createObjectNode}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.addHandler#1724",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.addHandler(com.fasterxml.jackson.databind.deser.DeserializationProblemHandler)",
    "snippet": "public ObjectMapper addHandler(DeserializationProblemHandler h){\n  _deserializationConfig\u003d_deserializationConfig.withHandler(h);\n  return this;\n}",
    "begin_line": 1724,
    "end_line": 1727,
    "comment": "/** \n * Method for adding specified  {@link DeserializationProblemHandler}to be used for handling specific problems during deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.clearProblemHandlers#1733",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.clearProblemHandlers()",
    "snippet": "public ObjectMapper clearProblemHandlers(){\n  _deserializationConfig\u003d_deserializationConfig.withNoProblemHandlers();\n  return this;\n}",
    "begin_line": 1733,
    "end_line": 1736,
    "comment": "/** \n * Method for removing all registered  {@link DeserializationProblemHandler}s instances from this mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setConfig#1752",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public ObjectMapper setConfig(DeserializationConfig config){\n  _deserializationConfig\u003dconfig;\n  return this;\n}",
    "begin_line": 1752,
    "end_line": 1755,
    "comment": "/** \n * Method that allows overriding of the underlying  {@link DeserializationConfig}object. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of  {@link ObjectMapper}, this is only thread-safe if done before calling any deserialization methods.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setFilters#1767",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "@Deprecated public void setFilters(FilterProvider filterProvider){\n  _serializationConfig\u003d_serializationConfig.withFilters(filterProvider);\n}",
    "begin_line": 1767,
    "end_line": 1769,
    "comment": "/** \n * @deprecated Since 2.6, use {@link #setFilterProvider} instead (allows chaining)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setFilterProvider#1782",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setFilterProvider(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public ObjectMapper setFilterProvider(FilterProvider filterProvider){\n  _serializationConfig\u003d_serializationConfig.withFilters(filterProvider);\n  return this;\n}",
    "begin_line": 1782,
    "end_line": 1785,
    "comment": "/** \n * Method for configuring this mapper to use specified  {@link FilterProvider} formapping Filter Ids to actual filter instances. \u003cp\u003e Note that usually it is better to use method  {@link #writer(FilterProvider)}; however, sometimes this method is more convenient. For example, some frameworks only allow configuring of ObjectMapper instances and not  {@link ObjectWriter}s.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setBase64Variant#1797",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setBase64Variant(Base64Variant)",
    "snippet": "public ObjectMapper setBase64Variant(Base64Variant v){\n  _serializationConfig\u003d_serializationConfig.with(v);\n  _deserializationConfig\u003d_deserializationConfig.with(v);\n  return this;\n}",
    "begin_line": 1797,
    "end_line": 1801,
    "comment": "/** \n * Method that will configure default  {@link Base64Variant} that\u003ccode\u003ebyte[]\u003c/code\u003e serializers and deserializers will use.\n * @param v Base64 variant to use\n * @return This mapper, for convenience to allow chaining\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setConfig#1817",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setConfig(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "public ObjectMapper setConfig(SerializationConfig config){\n  _serializationConfig\u003dconfig;\n  return this;\n}",
    "begin_line": 1817,
    "end_line": 1820,
    "comment": "/** \n * Method that allows overriding of the underlying  {@link SerializationConfig}object, which contains serialization-specific configuration settings. It is added as a fallback method that may be used if no other configuration modifier method works: it should not be used if there are alternatives, and its use is generally discouraged. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: only use this method if you know what you are doing -- it allows by-passing some of checks applied to other configuration methods. Also keep in mind that as with all configuration of  {@link ObjectMapper}, this is only thread-safe if done before calling any serialization methods.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getFactory#1846",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getFactory()",
    "snippet": "@Override public JsonFactory getFactory(){\n  return _jsonFactory;\n}",
    "begin_line": 1846,
    "end_line": 1846,
    "comment": "/** \n * Method that can be used to get hold of  {@link JsonFactory} that thismapper uses if it needs to construct  {@link JsonParser}s and/or  {@link JsonGenerator}s. \u003cp\u003e WARNING: note that all  {@link ObjectReader} and {@link ObjectWriter}instances created by this mapper usually share the same configured {@link JsonFactory}, so changes to its configuration will \"leak\". To avoid such observed changes you should always use \"with()\" and \"without()\" method of  {@link ObjectReader} and {@link ObjectWriter}for changing  {@link com.fasterxml.jackson.core.JsonParser.Feature}and  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}settings to use on per-call basis.\n * @return {@link JsonFactory} that this mapper uses when it needs toconstruct Json parser and generators\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getJsonFactory#1853",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getJsonFactory()",
    "snippet": "@Deprecated @Override public JsonFactory getJsonFactory(){\n  return getFactory();\n}",
    "begin_line": 1853,
    "end_line": 1853,
    "comment": "/** \n * @deprecated Since 2.1: Use {@link #getFactory} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setDateFormat#1865",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setDateFormat(java.text.DateFormat)",
    "snippet": "public ObjectMapper setDateFormat(DateFormat dateFormat){\n  _deserializationConfig\u003d_deserializationConfig.with(dateFormat);\n  _serializationConfig\u003d_serializationConfig.with(dateFormat);\n  return this;\n}",
    "begin_line": 1865,
    "end_line": 1870,
    "comment": "/** \n * Method for configuring the default  {@link DateFormat} to use when serializing timevalues as Strings, and deserializing from JSON Strings. This is preferably to directly modifying  {@link SerializationConfig} and{@link DeserializationConfig} instances.If you need per-request configuration, use  {@link #writer(DateFormat)} tocreate properly configured  {@link ObjectWriter} and use that; this because{@link ObjectWriter}s are thread-safe whereas ObjectMapper itself is only thread-safe when configuring methods (such as this one) are NOT called.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getDateFormat#1875",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getDateFormat()",
    "snippet": "public DateFormat getDateFormat(){\n  return _serializationConfig.getDateFormat();\n}",
    "begin_line": 1875,
    "end_line": 1878,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setHandlerInstantiator#1887",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public Object setHandlerInstantiator(HandlerInstantiator hi){\n  _deserializationConfig\u003d_deserializationConfig.with(hi);\n  _serializationConfig\u003d_serializationConfig.with(hi);\n  return this;\n}",
    "begin_line": 1887,
    "end_line": 1892,
    "comment": "/** \n * Method for configuring  {@link HandlerInstantiator} to use for creatinginstances of handlers (such as serializers, deserializers, type and type id resolvers), given a class.\n * @param hi Instantiator to use; if null, use the default implementation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setInjectableValues#1898",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setInjectableValues(com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public ObjectMapper setInjectableValues(InjectableValues injectableValues){\n  _injectableValues\u003dinjectableValues;\n  return this;\n}",
    "begin_line": 1898,
    "end_line": 1901,
    "comment": "/** \n * Method for configuring  {@link InjectableValues} which used to findvalues to inject.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.getInjectableValues#1906",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.getInjectableValues()",
    "snippet": "public InjectableValues getInjectableValues(){\n  return _injectableValues;\n}",
    "begin_line": 1906,
    "end_line": 1908,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setLocale#1914",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setLocale(java.util.Locale)",
    "snippet": "public ObjectMapper setLocale(Locale l){\n  _deserializationConfig\u003d_deserializationConfig.with(l);\n  _serializationConfig\u003d_serializationConfig.with(l);\n  return this;\n}",
    "begin_line": 1914,
    "end_line": 1918,
    "comment": "/** \n * Method for overriding default locale to use for formatting. Default value used is  {@link Locale#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.setTimeZone#1924",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.setTimeZone(java.util.TimeZone)",
    "snippet": "public ObjectMapper setTimeZone(TimeZone tz){\n  _deserializationConfig\u003d_deserializationConfig.with(tz);\n  _serializationConfig\u003d_serializationConfig.with(tz);\n  return this;\n}",
    "begin_line": 1924,
    "end_line": 1928,
    "comment": "/** \n * Method for overriding default TimeZone to use for formatting. Default value used is UTC (NOT default TimeZone of JVM).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#1939",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public boolean isEnabled(MapperFeature f){\n  return _serializationConfig.isEnabled(f);\n}",
    "begin_line": 1939,
    "end_line": 1942,
    "comment": "/** \n * Method for checking whether given  {@link MapperFeature} is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#1948",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "public ObjectMapper configure(MapperFeature f,boolean state){\n  _serializationConfig\u003dstate ? _serializationConfig.with(f) : _serializationConfig.without(f);\n  _deserializationConfig\u003dstate ? _deserializationConfig.with(f) : _deserializationConfig.without(f);\n  return this;\n}",
    "begin_line": 1948,
    "end_line": 1954,
    "comment": "/** \n * Method for changing state of an on/off mapper feature for this mapper instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#1960",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public ObjectMapper enable(MapperFeature... f){\n  _deserializationConfig\u003d_deserializationConfig.with(f);\n  _serializationConfig\u003d_serializationConfig.with(f);\n  return this;\n}",
    "begin_line": 1960,
    "end_line": 1964,
    "comment": "/** \n * Method for enabling specified  {@link MapperConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#1970",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public ObjectMapper disable(MapperFeature... f){\n  _deserializationConfig\u003d_deserializationConfig.without(f);\n  _serializationConfig\u003d_serializationConfig.without(f);\n  return this;\n}",
    "begin_line": 1970,
    "end_line": 1974,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#1986",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public boolean isEnabled(SerializationFeature f){\n  return _serializationConfig.isEnabled(f);\n}",
    "begin_line": 1986,
    "end_line": 1988,
    "comment": "/** \n * Method for checking whether given serialization-specific feature is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#1994",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.SerializationFeature, boolean)",
    "snippet": "public ObjectMapper configure(SerializationFeature f,boolean state){\n  _serializationConfig\u003dstate ? _serializationConfig.with(f) : _serializationConfig.without(f);\n  return this;\n}",
    "begin_line": 1994,
    "end_line": 1998,
    "comment": "/** \n * Method for changing state of an on/off serialization feature for this object mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2004",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper enable(SerializationFeature f){\n  _serializationConfig\u003d_serializationConfig.with(f);\n  return this;\n}",
    "begin_line": 2004,
    "end_line": 2007,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} feature.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2013",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper enable(SerializationFeature first,SerializationFeature... f){\n  _serializationConfig\u003d_serializationConfig.with(first,f);\n  return this;\n}",
    "begin_line": 2013,
    "end_line": 2017,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2023",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper disable(SerializationFeature f){\n  _serializationConfig\u003d_serializationConfig.without(f);\n  return this;\n}",
    "begin_line": 2023,
    "end_line": 2026,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2032",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectMapper disable(SerializationFeature first,SerializationFeature... f){\n  _serializationConfig\u003d_serializationConfig.without(first,f);\n  return this;\n}",
    "begin_line": 2032,
    "end_line": 2036,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2048",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public boolean isEnabled(DeserializationFeature f){\n  return _deserializationConfig.isEnabled(f);\n}",
    "begin_line": 2048,
    "end_line": 2050,
    "comment": "/** \n * Method for checking whether given deserialization-specific feature is enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2056",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(com.fasterxml.jackson.databind.DeserializationFeature, boolean)",
    "snippet": "public ObjectMapper configure(DeserializationFeature f,boolean state){\n  _deserializationConfig\u003dstate ? _deserializationConfig.with(f) : _deserializationConfig.without(f);\n  return this;\n}",
    "begin_line": 2056,
    "end_line": 2060,
    "comment": "/** \n * Method for changing state of an on/off deserialization feature for this object mapper.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2066",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper enable(DeserializationFeature feature){\n  _deserializationConfig\u003d_deserializationConfig.with(feature);\n  return this;\n}",
    "begin_line": 2066,
    "end_line": 2069,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2075",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper enable(DeserializationFeature first,DeserializationFeature... f){\n  _deserializationConfig\u003d_deserializationConfig.with(first,f);\n  return this;\n}",
    "begin_line": 2075,
    "end_line": 2079,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2085",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper disable(DeserializationFeature feature){\n  _deserializationConfig\u003d_deserializationConfig.without(feature);\n  return this;\n}",
    "begin_line": 2085,
    "end_line": 2088,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2094",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectMapper disable(DeserializationFeature first,DeserializationFeature... f){\n  _deserializationConfig\u003d_deserializationConfig.without(first,f);\n  return this;\n}",
    "begin_line": 2094,
    "end_line": 2098,
    "comment": "/** \n * Method for enabling specified  {@link DeserializationConfig} features.Modifies and returns this instance; no new object is created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonParser.Feature)",
    "snippet": "public boolean isEnabled(JsonParser.Feature f){\n  return _deserializationConfig.isEnabled(f,_jsonFactory);\n}",
    "begin_line": 2106,
    "end_line": 2108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(JsonParser.Feature, boolean)",
    "snippet": "public ObjectMapper configure(JsonParser.Feature f,boolean state){\n  _jsonFactory.configure(f,state);\n  return this;\n}",
    "begin_line": 2121,
    "end_line": 2124,
    "comment": "/** \n * Method for changing state of specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#with(JsonParser.Feature)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(JsonParser.Feature)",
    "snippet": "public ObjectMapper enable(JsonParser.Feature... features){\n  for (  JsonParser.Feature f : features) {\n    _jsonFactory.enable(f);\n  }\n  return this;\n}",
    "begin_line": 2138,
    "end_line": 2143,
    "comment": "/** \n * Method for enabling specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#with(JsonParser.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(JsonParser.Feature)",
    "snippet": "public ObjectMapper disable(JsonParser.Feature... features){\n  for (  JsonParser.Feature f : features) {\n    _jsonFactory.disable(f);\n  }\n  return this;\n}",
    "begin_line": 2157,
    "end_line": 2162,
    "comment": "/** \n * Method for disabling specified  {@link com.fasterxml.jackson.core.JsonParser.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectReader}s as well -- to avoid this, use  {@link ObjectReader#without(JsonParser.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonGenerator.Feature)",
    "snippet": "public boolean isEnabled(JsonGenerator.Feature f){\n  return _serializationConfig.isEnabled(f,_jsonFactory);\n}",
    "begin_line": 2170,
    "end_line": 2172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.configure#2185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.configure(JsonGenerator.Feature, boolean)",
    "snippet": "public ObjectMapper configure(JsonGenerator.Feature f,boolean state){\n  _jsonFactory.configure(f,state);\n  return this;\n}",
    "begin_line": 2185,
    "end_line": 2188,
    "comment": "/** \n * Method for changing state of an on/off  {@link JsonGenerator} feature forgenerator instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#with(JsonGenerator.Feature)} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.enable#2202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.enable(JsonGenerator.Feature)",
    "snippet": "public ObjectMapper enable(JsonGenerator.Feature... features){\n  for (  JsonGenerator.Feature f : features) {\n    _jsonFactory.enable(f);\n  }\n  return this;\n}",
    "begin_line": 2202,
    "end_line": 2207,
    "comment": "/** \n * Method for enabling specified  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#with(JsonGenerator.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.disable#2221",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.disable(JsonGenerator.Feature)",
    "snippet": "public ObjectMapper disable(JsonGenerator.Feature... features){\n  for (  JsonGenerator.Feature f : features) {\n    _jsonFactory.disable(f);\n  }\n  return this;\n}",
    "begin_line": 2221,
    "end_line": 2226,
    "comment": "/** \n * Method for disabling specified  {@link com.fasterxml.jackson.core.JsonGenerator.Feature}s for parser instances this object mapper creates. \u003cp\u003e Note that this is equivalent to directly calling same method on  {@link #getFactory}. \u003cp\u003e WARNING: since this method directly modifies state of underlying  {@link JsonFactory}, it will change observed configuration by  {@link ObjectWriter}s as well -- to avoid this, use  {@link ObjectWriter#without(JsonGenerator.Feature)} instead.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.isEnabled#2240",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.isEnabled(JsonFactory.Feature)",
    "snippet": "public boolean isEnabled(JsonFactory.Feature f){\n  return _jsonFactory.isEnabled(f);\n}",
    "begin_line": 2240,
    "end_line": 2242,
    "comment": "/** \n * Convenience method, equivalent to: \u003cpre\u003e getJsonFactory().isEnabled(f); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(JsonParser p,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readValue(getDeserializationConfig(),p,_typeFactory.constructType(valueType));\n}",
    "begin_line": 2273,
    "end_line": 2277,
    "comment": "/** \n * Method to deserialize JSON content into a non-container type (it can be an array type, however): typically a bean, array or a wrapper type (like  {@link java.lang.Boolean}). \u003cp\u003e Note: this method should NOT be used if the result type is a container ( {@link java.util.Collection} or {@link java.util.Map}. The reason is that due to type erasure, key and value types cannot be introspected when using this method.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, TypeReference\u003c?\u003e)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(JsonParser p,TypeReference\u003c?\u003e valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readValue(getDeserializationConfig(),p,_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 2297,
    "end_line": 2301,
    "comment": "/** \n * Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using so-called \"super type token\" (see ) and specifically needs to be used if the root type is a  parameterized (generic) container type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, ResolvedType)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public final \u003cT\u003eT readValue(JsonParser p,ResolvedType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readValue(getDeserializationConfig(),p,(JavaType)valueType);\n}",
    "begin_line": 2320,
    "end_line": 2324,
    "comment": "/** \n * Method to deserialize JSON content into a Java type, reference to which is passed as argument. Type is passed using  Jackson specific type; instance of which can be constructed using {@link TypeFactory}.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(JsonParser p,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readValue(getDeserializationConfig(),p,valueType);\n}",
    "begin_line": 2339,
    "end_line": 2343,
    "comment": "/** \n * Type-safe overloaded method, basically alias for  {@link #readValue(JsonParser,Class)}.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(JsonParser)",
    "snippet": "@Override public \u003cT extends TreeNode\u003eT readTree(JsonParser p) throws IOException, JsonProcessingException {\n  DeserializationConfig cfg\u003dgetDeserializationConfig();\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d null) {\n    t\u003dp.nextToken();\n    if (t \u003d\u003d null) {\n      return null;\n    }\n  }\n  JsonNode n\u003d(JsonNode)_readValue(cfg,p,JSON_NODE_TYPE);\n  if (n \u003d\u003d null) {\n    n\u003dgetNodeFactory().nullNode();\n  }\n  @SuppressWarnings(\"unchecked\") T result\u003d(T)n;\n  return result;\n}",
    "begin_line": 2366,
    "end_line": 2391,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances. Returnsroot of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, ResolvedType)",
    "snippet": "@Override public \u003cT\u003eMappingIterator\u003cT\u003e readValues(JsonParser p,ResolvedType valueType) throws IOException, JsonProcessingException {\n  return readValues(p,(JavaType)valueType);\n}",
    "begin_line": 2412,
    "end_line": 2416,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Method for reading sequence of Objects from parser stream. Sequence can be either root-level \"unwrapped\" sequence (without surrounding JSON array), or a sequence contained in a JSON Array. In either case  {@link JsonParser} \u003cb\u003eMUST\u003c/b\u003e point to the first token ofthe first element, OR not point to any token (in which case it is advanced to the next token). This means, specifically, that for wrapped sequences, parser MUST NOT point to the surrounding \u003ccode\u003eSTART_ARRAY\u003c/code\u003e (one that contains values to read) but rather to the token following it which is the first token of the first value to read. \u003cp\u003e Note that  {@link ObjectReader} has more complete set of variants.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2426",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public \u003cT\u003eMappingIterator\u003cT\u003e readValues(JsonParser p,JavaType valueType) throws IOException, JsonProcessingException {\n  DeserializationConfig config\u003dgetDeserializationConfig();\n  DeserializationContext ctxt\u003dcreateDeserializationContext(p,config);\n  JsonDeserializer\u003c?\u003e deser\u003d_findRootDeserializer(ctxt,valueType);\n  return new MappingIterator\u003cT\u003e(valueType,p,ctxt,deser,false,null);\n}",
    "begin_line": 2426,
    "end_line": 2435,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Type-safe overload of  {@link #readValues(JsonParser,ResolvedType)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, java.lang.Class\u003cT\u003e)",
    "snippet": "@Override public \u003cT\u003eMappingIterator\u003cT\u003e readValues(JsonParser p,Class\u003cT\u003e valueType) throws IOException, JsonProcessingException {\n  return readValues(p,_typeFactory.constructType(valueType));\n}",
    "begin_line": 2446,
    "end_line": 2450,
    "comment": "/** \n * Convenience method, equivalent in function to: \u003cpre\u003e readerFor(valueType).readValues(p); \u003c/pre\u003e \u003cp\u003e Type-safe overload of  {@link #readValues(JsonParser,ResolvedType)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValues#2456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValues(JsonParser, TypeReference\u003c?\u003e)",
    "snippet": "@Override public \u003cT\u003eMappingIterator\u003cT\u003e readValues(JsonParser p,TypeReference\u003c?\u003e valueTypeRef) throws IOException, JsonProcessingException {\n  return readValues(p,_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 2456,
    "end_line": 2460,
    "comment": "/** \n * Method for reading sequence of Objects from parser stream.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2495",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.InputStream)",
    "snippet": "public JsonNode readTree(InputStream in) throws IOException {\n  return _readTreeAndClose(_jsonFactory.createParser(in));\n}",
    "begin_line": 2495,
    "end_line": 2498,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param in Input stream used to read JSON contentfor building the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2523",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.Reader)",
    "snippet": "public JsonNode readTree(Reader r) throws IOException {\n  return _readTreeAndClose(_jsonFactory.createParser(r));\n}",
    "begin_line": 2523,
    "end_line": 2525,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param r Reader used to read JSON contentfor building the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2550",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.lang.String)",
    "snippet": "public JsonNode readTree(String content) throws IOException {\n  return _readTreeAndClose(_jsonFactory.createParser(content));\n}",
    "begin_line": 2550,
    "end_line": 2552,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container). \u003cp\u003e If a low-level I/O problem (missing input, network error) occurs, a  {@link IOException} will be thrown.If a parsing problem occurs (invalid JSON), {@link JsonParseException} will be thrown.If no content is found from input (end-of-input), Java \u003ccode\u003enull\u003c/code\u003e will be returned.\n * @param content JSON content to parse to build the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2570",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(byte[])",
    "snippet": "public JsonNode readTree(byte[] content) throws IOException {\n  return _readTreeAndClose(_jsonFactory.createParser(content));\n}",
    "begin_line": 2570,
    "end_line": 2572,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param content JSON content to parse to build the JSON tree.\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2594",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.io.File)",
    "snippet": "public JsonNode readTree(File file) throws IOException, JsonProcessingException {\n  return _readTreeAndClose(_jsonFactory.createParser(file));\n}",
    "begin_line": 2594,
    "end_line": 2598,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param file File of which contents to parse as JSON for building a tree instance\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readTree#2620",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readTree(java.net.URL)",
    "snippet": "public JsonNode readTree(URL source) throws IOException {\n  return _readTreeAndClose(_jsonFactory.createParser(source));\n}",
    "begin_line": 2620,
    "end_line": 2622,
    "comment": "/** \n * Method to deserialize JSON content as tree expressed using set of  {@link JsonNode} instances.Returns root of the resulting tree (where root can consist of just a single node if the current event is a value event, not container).\n * @param source URL to use for fetching contents to parse as JSON for building a tree instance\n * @return a {@link JsonNode}, if valid JSON content found; null if input has no content to bind -- note, however, that if JSON \u003ccode\u003enull\u003c/code\u003e token is found, it will be represented as a non-null  {@link JsonNode} (one that returns \u003ccode\u003etrue\u003c/code\u003efor  {@link JsonNode#isNull()}\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#2636",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(JsonGenerator, java.lang.Object)",
    "snippet": "@Override public void writeValue(JsonGenerator g,Object value) throws IOException, JsonGenerationException, JsonMappingException {\n  SerializationConfig config\u003dgetSerializationConfig();\n  if (config.isEnabled(SerializationFeature.INDENT_OUTPUT)) {\n    if (g.getPrettyPrinter() \u003d\u003d null) {\n      g.setPrettyPrinter(config.constructDefaultPrettyPrinter());\n    }\n  }\n  if (config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\n    _writeCloseableValue(g,value,config);\n  }\n else {\n    _serializerProvider(config).serializeValue(g,value);\n    if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n      g.flush();\n    }\n  }\n}",
    "begin_line": 2636,
    "end_line": 2660,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using provided  {@link JsonGenerator}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeTree#2669",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator, TreeNode)",
    "snippet": "@Override public void writeTree(JsonGenerator jgen,TreeNode rootNode) throws IOException, JsonProcessingException {\n  SerializationConfig config\u003dgetSerializationConfig();\n  _serializerProvider(config).serializeValue(jgen,rootNode);\n  if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n    jgen.flush();\n  }\n}",
    "begin_line": 2669,
    "end_line": 2677,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeTree#2683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeTree(JsonGenerator, com.fasterxml.jackson.databind.JsonNode)",
    "snippet": "public void writeTree(JsonGenerator jgen,JsonNode rootNode) throws IOException, JsonProcessingException {\n  SerializationConfig config\u003dgetSerializationConfig();\n  _serializerProvider(config).serializeValue(jgen,rootNode);\n  if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n    jgen.flush();\n  }\n}",
    "begin_line": 2683,
    "end_line": 2691,
    "comment": "/** \n * Method to serialize given JSON Tree, using generator provided.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createObjectNode#2701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createObjectNode()",
    "snippet": "@Override public ObjectNode createObjectNode(){\n  return _deserializationConfig.getNodeFactory().objectNode();\n}",
    "begin_line": 2701,
    "end_line": 2703,
    "comment": "/** \n * \u003cp\u003e Note: return type is co-variant, as basic ObjectCodec abstraction cannot refer to concrete node types (as it\u0027s part of core package, whereas impls are part of mapper package)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createArrayNode#2713",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createArrayNode()",
    "snippet": "@Override public ArrayNode createArrayNode(){\n  return _deserializationConfig.getNodeFactory().arrayNode();\n}",
    "begin_line": 2713,
    "end_line": 2715,
    "comment": "/** \n * \u003cp\u003e Note: return type is co-variant, as basic ObjectCodec abstraction cannot refer to concrete node types (as it\u0027s part of core package, whereas impls are part of mapper package)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.treeAsTokens#2724",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeAsTokens(TreeNode)",
    "snippet": "@Override public JsonParser treeAsTokens(TreeNode n){\n  return new TreeTraversingParser((JsonNode)n,this);\n}",
    "begin_line": 2724,
    "end_line": 2726,
    "comment": "/** \n * Method for constructing a  {@link JsonParser} out of JSON treerepresentation.\n * @param n Root node of the tree that resulting parser will read from\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.treeToValue#2739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.treeToValue(TreeNode, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public \u003cT\u003eT treeToValue(TreeNode n,Class\u003cT\u003e valueType) throws JsonProcessingException {\n  try {\n    if (valueType !\u003d Object.class \u0026\u0026 valueType.isAssignableFrom(n.getClass())) {\n      return (T)n;\n    }\n    if (n.asToken() \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n      if (n instanceof POJONode) {\n        Object ob\u003d((POJONode)n).getPojo();\n        if ((ob \u003d\u003d null) || valueType.isInstance(ob)) {\n          return (T)ob;\n        }\n      }\n    }\n    return readValue(treeAsTokens(n),valueType);\n  }\n catch (  JsonProcessingException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw new IllegalArgumentException(e.getMessage(),e);\n  }\n}",
    "begin_line": 2739,
    "end_line": 2764,
    "comment": "/** \n * Convenience conversion method that will bind data given JSON tree contains into specific value (usually bean) type. \u003cp\u003e Functionally equivalent to: \u003cpre\u003e objectMapper.convertValue(n, valueClass); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.valueToTree#2787",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.valueToTree(java.lang.Object)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"resource\"}) public \u003cT extends JsonNode\u003eT valueToTree(Object fromValue) throws IllegalArgumentException {\n  if (fromValue \u003d\u003d null)   return null;\n  TokenBuffer buf\u003dnew TokenBuffer(this,false);\n  if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n    buf\u003dbuf.forceUseOfBigDecimal(true);\n  }\n  JsonNode result;\n  try {\n    writeValue(buf,fromValue);\n    JsonParser p\u003dbuf.asParser();\n    result\u003dreadTree(p);\n    p.close();\n  }\n catch (  IOException e) {\n    throw new IllegalArgumentException(e.getMessage(),e);\n  }\n  return (T)result;\n}",
    "begin_line": 2787,
    "end_line": 2805,
    "comment": "/** \n * Reverse of  {@link #treeToValue}; given a value (usually bean), will construct equivalent JSON Tree representation. Functionally similar to serializing value into JSON and parsing JSON as tree, but more efficient. \u003cp\u003e NOTE: while results are usually identical to that of serialization followed by deserialization, this is not always the case. In some cases serialization into intermediate representation will retain encapsulation of things like raw value ( {@link com.fasterxml.jackson.databind.util.RawValue}) or basic node identity ( {@link JsonNode}). If so, result is a valid tree, but values are not re-constructed through actual JSON representation. So if transformation requires actual materialization of JSON (or other data format that this mapper produces), it will be necessary to do actual serialization.\n * @param \u003c T \u003e Actual node type; usually either basic {@link JsonNode} or{@link com.fasterxml.jackson.databind.node.ObjectNode}\n * @param fromValue Bean value to convert\n * @return Root node of the resulting JSON tree\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canSerialize#2828",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class\u003c?\u003e)",
    "snippet": "public boolean canSerialize(Class\u003c?\u003e type){\n  return _serializerProvider(getSerializationConfig()).hasSerializerFor(type,null);\n}",
    "begin_line": 2828,
    "end_line": 2830,
    "comment": "/** \n * Method that can be called to check whether mapper thinks it could serialize an instance of given Class. Check is done by checking whether a serializer can be found for the type. \u003cp\u003e NOTE: since this method does NOT throw exceptions, but internal processing may, caller usually has little information as to why serialization would fail. If you want access to internal  {@link Exception}, call  {@link #canSerialize(Class,AtomicReference)} instead.\n * @return True if mapper can find a serializer for instances ofgiven class (potentially serializable), false otherwise (not serializable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canSerialize#2839",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canSerialize(java.lang.Class\u003c?\u003e, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean canSerialize(Class\u003c?\u003e type,AtomicReference\u003cThrowable\u003e cause){\n  return _serializerProvider(getSerializationConfig()).hasSerializerFor(type,cause);\n}",
    "begin_line": 2839,
    "end_line": 2841,
    "comment": "/** \n * Method similar to  {@link #canSerialize(Class)} but that can returnactual  {@link Throwable} that was thrown when trying to constructserializer: this may be useful in figuring out what the actual problem is.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canDeserialize#2860",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean canDeserialize(JavaType type){\n  return createDeserializationContext(null,getDeserializationConfig()).hasValueDeserializerFor(type,null);\n}",
    "begin_line": 2860,
    "end_line": 2864,
    "comment": "/** \n * Method that can be called to check whether mapper thinks it could deserialize an Object of given type. Check is done by checking whether a registered deserializer can be found or built for the type; if not (either by no mapping being found, or through an \u003ccode\u003eException\u003c/code\u003e being thrown, false is returned. \u003cp\u003e \u003cb\u003eNOTE\u003c/b\u003e: in case an exception is thrown during course of trying co construct matching deserializer, it will be effectively swallowed. If you want access to that exception, call {@link #canDeserialize(JavaType,AtomicReference)} instead.\n * @return True if mapper can find a serializer for instances ofgiven class (potentially serializable), false otherwise (not serializable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.canDeserialize#2873",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.canDeserialize(com.fasterxml.jackson.databind.JavaType, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean canDeserialize(JavaType type,AtomicReference\u003cThrowable\u003e cause){\n  return createDeserializationContext(null,getDeserializationConfig()).hasValueDeserializerFor(type,cause);\n}",
    "begin_line": 2873,
    "end_line": 2877,
    "comment": "/** \n * Method similar to  {@link #canDeserialize(JavaType)} but that can returnactual  {@link Throwable} that was thrown when trying to constructserializer: this may be useful in figuring out what the actual problem is.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2899",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(File src,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 2899,
    "end_line": 2903,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2918",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(File src,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 2918,
    "end_line": 2922,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.File, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(File src,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 2937,
    "end_line": 2941,
    "comment": "/** \n * Method to deserialize JSON content from given file into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2956",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(URL src,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 2956,
    "end_line": 2960,
    "comment": "/** \n * Method to deserialize JSON content from given resource into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2975",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(URL src,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 2975,
    "end_line": 2979,
    "comment": "/** \n * Method to deserialize JSON content from given resource into given Java type.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#2982",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.net.URL, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(URL src,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 2982,
    "end_line": 2986,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(String content,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(content),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3001,
    "end_line": 3005,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3020",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(String content,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(content),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 3020,
    "end_line": 3024,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3039",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.lang.String, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(String content,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(content),valueType);\n}",
    "begin_line": 3039,
    "end_line": 3043,
    "comment": "/** \n * Method to deserialize JSON content from given JSON content String.\n * @throws IOException if a low-level I/O problem (unexpected end-of-input,network error) occurs (passed through as-is without additional wrapping -- note that this is one case where  {@link DeserializationFeature#WRAP_EXCEPTIONS}does NOT result in wrapping of exception even if enabled)\n * @throws JsonParseException if underlying input contains invalid contentof type  {@link JsonParser} supports (JSON for default case)\n * @throws JsonMappingException if the input JSON structure does not match structureexpected for result type (or has other mismatch issues)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3046",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(Reader src,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3046,
    "end_line": 3050,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3053",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(Reader src,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 3053,
    "end_line": 3057,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3060",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.Reader, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(Reader src,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 3060,
    "end_line": 3064,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3067",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(InputStream src,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3067,
    "end_line": 3071,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3074",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(InputStream src,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 3074,
    "end_line": 3078,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3081",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.InputStream, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(InputStream src,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 3081,
    "end_line": 3085,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3088",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(byte[] src,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3088,
    "end_line": 3092,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3095",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(byte[] src,int offset,int len,Class\u003cT\u003e valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src,offset,len),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3095,
    "end_line": 3100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(byte[] src,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 3103,
    "end_line": 3107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, TypeReference)",
    "snippet": "@SuppressWarnings({\"unchecked\",\"rawtypes\"}) public \u003cT\u003eT readValue(byte[] src,int offset,int len,TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src,offset,len),_typeFactory.constructType(valueTypeRef));\n}",
    "begin_line": 3110,
    "end_line": 3115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(byte[] src,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 3118,
    "end_line": 3122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(byte[], int, int, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(byte[] src,int offset,int len,JavaType valueType) throws IOException, JsonParseException, JsonMappingException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src,offset,len),valueType);\n}",
    "begin_line": 3125,
    "end_line": 3130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.DataInput, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(DataInput src,Class\u003cT\u003e valueType) throws IOException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),_typeFactory.constructType(valueType));\n}",
    "begin_line": 3133,
    "end_line": 3137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readValue#3140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readValue(java.io.DataInput, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT readValue(DataInput src,JavaType valueType) throws IOException {\n  return (T)_readMapAndClose(_jsonFactory.createParser(src),valueType);\n}",
    "begin_line": 3140,
    "end_line": 3143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.File, java.lang.Object)",
    "snippet": "public void writeValue(File resultFile,Object value) throws IOException, JsonGenerationException, JsonMappingException {\n  _configAndWriteValue(_jsonFactory.createGenerator(resultFile,JsonEncoding.UTF8),value);\n}",
    "begin_line": 3156,
    "end_line": 3160,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, written to File provided.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.OutputStream, java.lang.Object)",
    "snippet": "public void writeValue(OutputStream out,Object value) throws IOException, JsonGenerationException, JsonMappingException {\n  _configAndWriteValue(_jsonFactory.createGenerator(out,JsonEncoding.UTF8),value);\n}",
    "begin_line": 3173,
    "end_line": 3177,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using output stream provided (using encoding {@link JsonEncoding#UTF8}). \u003cp\u003e Note: method does not close the underlying stream explicitly here; however,  {@link JsonFactory} this mapper uses may chooseto close the stream depending on its settings (by default, it will try to close it when  {@link JsonGenerator} we constructis closed).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.DataOutput, java.lang.Object)",
    "snippet": "public void writeValue(DataOutput out,Object value) throws IOException {\n  _configAndWriteValue(_jsonFactory.createGenerator(out,JsonEncoding.UTF8),value);\n}",
    "begin_line": 3182,
    "end_line": 3186,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValue#3198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValue(java.io.Writer, java.lang.Object)",
    "snippet": "public void writeValue(Writer w,Object value) throws IOException, JsonGenerationException, JsonMappingException {\n  _configAndWriteValue(_jsonFactory.createGenerator(w),value);\n}",
    "begin_line": 3198,
    "end_line": 3202,
    "comment": "/** \n * Method that can be used to serialize any Java value as JSON output, using Writer provided. \u003cp\u003e Note: method does not close the underlying stream explicitly here; however,  {@link JsonFactory} this mapper uses may chooseto close the stream depending on its settings (by default, it will try to close it when  {@link JsonGenerator} we constructis closed).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValueAsString#3213",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsString(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\") public String writeValueAsString(Object value) throws JsonProcessingException {\n  SegmentedStringWriter sw\u003dnew SegmentedStringWriter(_jsonFactory._getBufferRecycler());\n  try {\n    _configAndWriteValue(_jsonFactory.createGenerator(sw),value);\n  }\n catch (  JsonProcessingException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw JsonMappingException.fromUnexpectedIOE(e);\n  }\n  return sw.getAndClear();\n}",
    "begin_line": 3213,
    "end_line": 3226,
    "comment": "/** \n * Method that can be used to serialize any Java value as a String. Functionally equivalent to calling {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}and constructing String, but more efficient. \u003cp\u003e Note: prior to version 2.1, throws clause included  {@link IOException}; 2.1 removed it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writeValueAsBytes#3238",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writeValueAsBytes(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\") public byte[] writeValueAsBytes(Object value) throws JsonProcessingException {\n  ByteArrayBuilder bb\u003dnew ByteArrayBuilder(_jsonFactory._getBufferRecycler());\n  try {\n    _configAndWriteValue(_jsonFactory.createGenerator(bb,JsonEncoding.UTF8),value);\n  }\n catch (  JsonProcessingException e) {\n    throw e;\n  }\ncatch (  IOException e) {\n    throw JsonMappingException.fromUnexpectedIOE(e);\n  }\n  byte[] result\u003dbb.toByteArray();\n  bb.release();\n  return result;\n}",
    "begin_line": 3238,
    "end_line": 3252,
    "comment": "/** \n * Method that can be used to serialize any Java value as a byte array. Functionally equivalent to calling {@link #writeValue(Writer,Object)} with {@link java.io.ByteArrayOutputStream}and getting bytes, but more efficient. Encoding used will be UTF-8. \u003cp\u003e Note: prior to version 2.1, throws clause included  {@link IOException}; 2.1 removed it.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer()",
    "snippet": "public ObjectWriter writer(){\n  return _newWriter(getSerializationConfig());\n}",
    "begin_line": 3265,
    "end_line": 3267,
    "comment": "/** \n * Convenience method for constructing  {@link ObjectWriter}with default settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectWriter writer(SerializationFeature feature){\n  return _newWriter(getSerializationConfig().with(feature));\n}",
    "begin_line": 3274,
    "end_line": 3276,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} withspecified feature enabled (compared to settings that this mapper instance has).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public ObjectWriter writer(SerializationFeature first,SerializationFeature... other){\n  return _newWriter(getSerializationConfig().with(first,other));\n}",
    "begin_line": 3283,
    "end_line": 3286,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} withspecified features enabled (compared to settings that this mapper instance has).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(java.text.DateFormat)",
    "snippet": "public ObjectWriter writer(DateFormat df){\n  return _newWriter(getSerializationConfig().with(df));\n}",
    "begin_line": 3293,
    "end_line": 3295,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified  {@link DateFormat}; or, if null passed, using timestamp (64-bit number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithView#3301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithView(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectWriter writerWithView(Class\u003c?\u003e serializationView){\n  return _newWriter(getSerializationConfig().withView(serializationView));\n}",
    "begin_line": 3301,
    "end_line": 3303,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified JSON View (filter).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectWriter writerFor(Class\u003c?\u003e rootType){\n  return _newWriter(getSerializationConfig(),((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),null);\n}",
    "begin_line": 3316,
    "end_line": 3320,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(TypeReference\u003c?\u003e)",
    "snippet": "public ObjectWriter writerFor(TypeReference\u003c?\u003e rootType){\n  return _newWriter(getSerializationConfig(),((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),null);\n}",
    "begin_line": 3333,
    "end_line": 3337,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerFor#3350",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerFor(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ObjectWriter writerFor(JavaType rootType){\n  return _newWriter(getSerializationConfig(),rootType,null);\n}",
    "begin_line": 3350,
    "end_line": 3352,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified root type, instead of actual runtime type of value. Type must be a super-type of runtime type. \u003cp\u003e Main reason for using this method is performance, as writer is able to pre-fetch serializer to use before write, and if writer is used more than once this avoids addition per-value serializer lookups.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(PrettyPrinter)",
    "snippet": "public ObjectWriter writer(PrettyPrinter pp){\n  if (pp \u003d\u003d null) {\n    pp\u003dObjectWriter.NULL_PRETTY_PRINTER;\n  }\n  return _newWriter(getSerializationConfig(),null,pp);\n}",
    "begin_line": 3359,
    "end_line": 3364,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified pretty printer for indentation (or if null, no pretty printer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithDefaultPrettyPrinter#3370",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithDefaultPrettyPrinter()",
    "snippet": "public ObjectWriter writerWithDefaultPrettyPrinter(){\n  SerializationConfig config\u003dgetSerializationConfig();\n  return _newWriter(config,null,config.getDefaultPrettyPrinter());\n}",
    "begin_line": 3370,
    "end_line": 3374,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using the default pretty printer for indentation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public ObjectWriter writer(FilterProvider filterProvider){\n  return _newWriter(getSerializationConfig().withFilters(filterProvider));\n}",
    "begin_line": 3380,
    "end_line": 3382,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willserialize objects using specified filter provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(FormatSchema)",
    "snippet": "public ObjectWriter writer(FormatSchema schema){\n  _verifySchemaType(schema);\n  return _newWriter(getSerializationConfig(),schema);\n}",
    "begin_line": 3391,
    "end_line": 3394,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willpass specific schema object to  {@link JsonGenerator} used forwriting content.\n * @param schema Schema to pass to generator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(Base64Variant)",
    "snippet": "public ObjectWriter writer(Base64Variant defaultBase64){\n  return _newWriter(getSerializationConfig().with(defaultBase64));\n}",
    "begin_line": 3402,
    "end_line": 3404,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willuse specified Base64 encoding variant for Base64-encoded binary data.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(CharacterEscapes)",
    "snippet": "public ObjectWriter writer(CharacterEscapes escapes){\n  return _newWriter(getSerializationConfig()).with(escapes);\n}",
    "begin_line": 3412,
    "end_line": 3414,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified character escaping details for output.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writer#3422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writer(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public ObjectWriter writer(ContextAttributes attrs){\n  return _newWriter(getSerializationConfig().with(attrs));\n}",
    "begin_line": 3422,
    "end_line": 3424,
    "comment": "/** \n * Factory method for constructing  {@link ObjectWriter} that willuse specified default attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public ObjectWriter writerWithType(Class\u003c?\u003e rootType){\n  return _newWriter(getSerializationConfig(),((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),null);\n}",
    "begin_line": 3430,
    "end_line": 3435,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(Class)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(TypeReference\u003c?\u003e)",
    "snippet": "@Deprecated public ObjectWriter writerWithType(TypeReference\u003c?\u003e rootType){\n  return _newWriter(getSerializationConfig(),((rootType \u003d\u003d null) ? null : _typeFactory.constructType(rootType)),null);\n}",
    "begin_line": 3441,
    "end_line": 3446,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(TypeReference)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.writerWithType#3452",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.writerWithType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public ObjectWriter writerWithType(JavaType rootType){\n  return _newWriter(getSerializationConfig(),rootType,null);\n}",
    "begin_line": 3452,
    "end_line": 3454,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #writerFor(JavaType)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3468",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader()",
    "snippet": "public ObjectReader reader(){\n  return _newReader(getDeserializationConfig()).with(_injectableValues);\n}",
    "begin_line": 3468,
    "end_line": 3470,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withdefault settings. Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3479",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectReader reader(DeserializationFeature feature){\n  return _newReader(getDeserializationConfig().with(feature));\n}",
    "begin_line": 3479,
    "end_line": 3481,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withspecified feature enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.DeserializationFeature, com.fasterxml.jackson.databind.DeserializationFeature)",
    "snippet": "public ObjectReader reader(DeserializationFeature first,DeserializationFeature... other){\n  return _newReader(getDeserializationConfig().with(first,other));\n}",
    "begin_line": 3490,
    "end_line": 3493,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} withspecified features enabled (compared to settings that this mapper instance has). Note that the resulting instance is NOT usable as is, without defining expected value type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerForUpdating#3505",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerForUpdating(java.lang.Object)",
    "snippet": "public ObjectReader readerForUpdating(Object valueToUpdate){\n  JavaType t\u003d_typeFactory.constructType(valueToUpdate.getClass());\n  return _newReader(getDeserializationConfig(),t,valueToUpdate,null,_injectableValues);\n}",
    "begin_line": 3505,
    "end_line": 3509,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willupdate given Object (usually Bean, but can be a Collection or Map as well, but NOT an array) with JSON data. Deserialization occurs normally except that the root-level value in JSON is not used for instantiating a new object; instead give updateable object is used as root. Runtime type of value object is used for locating deserializer, unless overridden by other factory methods of  {@link ObjectReader}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3517",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ObjectReader readerFor(JavaType type){\n  return _newReader(getDeserializationConfig(),type,null,null,_injectableValues);\n}",
    "begin_line": 3517,
    "end_line": 3520,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3528",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectReader readerFor(Class\u003c?\u003e type){\n  return _newReader(getDeserializationConfig(),_typeFactory.constructType(type),null,null,_injectableValues);\n}",
    "begin_line": 3528,
    "end_line": 3531,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerFor#3539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerFor(TypeReference\u003c?\u003e)",
    "snippet": "public ObjectReader readerFor(TypeReference\u003c?\u003e type){\n  return _newReader(getDeserializationConfig(),_typeFactory.constructType(type),null,null,_injectableValues);\n}",
    "begin_line": 3539,
    "end_line": 3542,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willread or update instances of specified type\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3548",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.node.JsonNodeFactory)",
    "snippet": "public ObjectReader reader(JsonNodeFactory f){\n  return _newReader(getDeserializationConfig()).with(f);\n}",
    "begin_line": 3548,
    "end_line": 3550,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified  {@link JsonNodeFactory} for constructing JSON trees.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3559",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(FormatSchema)",
    "snippet": "public ObjectReader reader(FormatSchema schema){\n  _verifySchemaType(schema);\n  return _newReader(getDeserializationConfig(),null,null,schema,_injectableValues);\n}",
    "begin_line": 3559,
    "end_line": 3563,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willpass specific schema object to  {@link JsonParser} used forreading content.\n * @param schema Schema to pass to parser\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3571",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public ObjectReader reader(InjectableValues injectableValues){\n  return _newReader(getDeserializationConfig(),null,null,null,injectableValues);\n}",
    "begin_line": 3571,
    "end_line": 3574,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified injectable values.\n * @param injectableValues Injectable values to use\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.readerWithView#3580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.readerWithView(java.lang.Class\u003c?\u003e)",
    "snippet": "public ObjectReader readerWithView(Class\u003c?\u003e view){\n  return _newReader(getDeserializationConfig().withView(view));\n}",
    "begin_line": 3580,
    "end_line": 3582,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willdeserialize objects using specified JSON View (filter).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3590",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(Base64Variant)",
    "snippet": "public ObjectReader reader(Base64Variant defaultBase64){\n  return _newReader(getDeserializationConfig().with(defaultBase64));\n}",
    "begin_line": 3590,
    "end_line": 3592,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified Base64 encoding variant for Base64-encoded binary data.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3600",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public ObjectReader reader(ContextAttributes attrs){\n  return _newReader(getDeserializationConfig().with(attrs));\n}",
    "begin_line": 3600,
    "end_line": 3602,
    "comment": "/** \n * Factory method for constructing  {@link ObjectReader} that willuse specified default attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3608",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public ObjectReader reader(JavaType type){\n  return _newReader(getDeserializationConfig(),type,null,null,_injectableValues);\n}",
    "begin_line": 3608,
    "end_line": 3611,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(JavaType)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3617",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public ObjectReader reader(Class\u003c?\u003e type){\n  return _newReader(getDeserializationConfig(),_typeFactory.constructType(type),null,null,_injectableValues);\n}",
    "begin_line": 3617,
    "end_line": 3620,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(Class)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.reader#3626",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.reader(TypeReference\u003c?\u003e)",
    "snippet": "@Deprecated public ObjectReader reader(TypeReference\u003c?\u003e type){\n  return _newReader(getDeserializationConfig(),_typeFactory.constructType(type),null,null,_injectableValues);\n}",
    "begin_line": 3626,
    "end_line": 3629,
    "comment": "/** \n * @deprecated Since 2.5, use {@link #readerFor(TypeReference)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, java.lang.Class\u003cT\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT convertValue(Object fromValue,Class\u003cT\u003e toValueType) throws IllegalArgumentException {\n  return (T)_convert(fromValue,_typeFactory.constructType(toValueType));\n}",
    "begin_line": 3665,
    "end_line": 3669,
    "comment": "/** \n * Convenience method for doing two-step conversion from given value, into instance of given value type, if (but only if!) conversion is needed. If given value is already of requested type, value is returned as is. \u003cp\u003e This method is functionally similar to first serializing given value into JSON, and then binding JSON data into value of given type, but should be more efficient since full serialization does not (need to) occur. However, same converters (serializers, deserializers) will be used as for data binding, meaning same object mapper configuration works. \u003cp\u003e Note that it is possible that in some cases behavior does differ from full serialize-then-deserialize cycle: in most case differences are unintentional (that is, flaws to fix) and should be reported. It is not guaranteed, however, that the behavior is 100% the same: the goal is just to allow efficient value conversions for structurally compatible Objects, according to standard Jackson configuration. \u003cp\u003e Further note that functianality is not designed to support \"advanced\" use cases, such as conversion of polymorphic values, or cases where Object Identity is used.\n * @throws IllegalArgumentException If conversion fails due to incompatible type;if so, root cause will contain underlying checked exception data binding functionality threw\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, TypeReference\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT convertValue(Object fromValue,TypeReference\u003c?\u003e toValueTypeRef) throws IllegalArgumentException {\n  return (T)_convert(fromValue,_typeFactory.constructType(toValueTypeRef));\n}",
    "begin_line": 3675,
    "end_line": 3679,
    "comment": "/** \n * See  {@link #convertValue(Object,Class)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.convertValue#3685",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.convertValue(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT\u003eT convertValue(Object fromValue,JavaType toValueType) throws IllegalArgumentException {\n  return (T)_convert(fromValue,toValueType);\n}",
    "begin_line": 3685,
    "end_line": 3689,
    "comment": "/** \n * See  {@link #convertValue(Object,Class)}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._convert#3700",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._convert(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object _convert(Object fromValue,JavaType toValueType) throws IllegalArgumentException {\n  if (fromValue !\u003d null) {\n    Class\u003c?\u003e targetType\u003dtoValueType.getRawClass();\n    if (targetType !\u003d Object.class \u0026\u0026 !toValueType.hasGenericTypes() \u0026\u0026 targetType.isAssignableFrom(fromValue.getClass())) {\n      return fromValue;\n    }\n  }\n  TokenBuffer buf\u003dnew TokenBuffer(this,false);\n  if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n    buf\u003dbuf.forceUseOfBigDecimal(true);\n  }\n  try {\n    SerializationConfig config\u003dgetSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);\n    _serializerProvider(config).serializeValue(buf,fromValue);\n    final JsonParser p\u003dbuf.asParser();\n    Object result;\n    final DeserializationConfig deserConfig\u003dgetDeserializationConfig();\n    JsonToken t\u003d_initForReading(p,toValueType);\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n      DeserializationContext ctxt\u003dcreateDeserializationContext(p,deserConfig);\n      result\u003d_findRootDeserializer(ctxt,toValueType).getNullValue(ctxt);\n    }\n else     if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n      result\u003dnull;\n    }\n else {\n      DeserializationContext ctxt\u003dcreateDeserializationContext(p,deserConfig);\n      JsonDeserializer\u003cObject\u003e deser\u003d_findRootDeserializer(ctxt,toValueType);\n      result\u003ddeser.deserialize(p,ctxt);\n    }\n    p.close();\n    return result;\n  }\n catch (  IOException e) {\n    throw new IllegalArgumentException(e.getMessage(),e);\n  }\n}",
    "begin_line": 3700,
    "end_line": 3752,
    "comment": "/** \n * Actual conversion implementation: instead of using existing read and write methods, much of code is inlined. Reason for this is that we must avoid root value wrapping/unwrapping both for efficiency and for correctness. If root value wrapping/unwrapping is actually desired, caller must use explicit \u003ccode\u003ewriteValue\u003c/code\u003e and \u003ccode\u003ereadValue\u003c/code\u003e methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.updateValue#3790",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.updateValue(T, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\") public \u003cT\u003eT updateValue(T valueToUpdate,Object overrides) throws JsonMappingException {\n  T result\u003dvalueToUpdate;\n  if ((valueToUpdate !\u003d null) \u0026\u0026 (overrides !\u003d null)) {\n    TokenBuffer buf\u003dnew TokenBuffer(this,false);\n    if (isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n      buf\u003dbuf.forceUseOfBigDecimal(true);\n    }\n    try {\n      SerializationConfig config\u003dgetSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE);\n      _serializerProvider(config).serializeValue(buf,overrides);\n      JsonParser p\u003dbuf.asParser();\n      result\u003dreaderForUpdating(valueToUpdate).readValue(p);\n      p.close();\n    }\n catch (    IOException e) {\n      if (e instanceof JsonMappingException) {\n        throw (JsonMappingException)e;\n      }\n      throw JsonMappingException.fromUnexpectedIOE(e);\n    }\n  }\n  return result;\n}",
    "begin_line": 3790,
    "end_line": 3815,
    "comment": "/** \n * Convenience method similar to  {@link #convertValue(Object,JavaType)} but onein which  \u003cp\u003e Implementation is approximately as follows: \u003col\u003e \u003cli\u003eSerialize `updateWithValue` into  {@link TokenBuffer}\u003c/li\u003e \u003cli\u003eConstruct  {@link ObjectReader} with `valueToUpdate` (using {@link #readerForUpdating(Object)}) \u003c/li\u003e \u003cli\u003eConstruct  {@link JsonParser} (using {@link TokenBuffer#asParser()}) \u003c/li\u003e \u003cli\u003eUpdate using  {@link ObjectReader#readValue(JsonParser)}. \u003c/li\u003e \u003cli\u003eReturn `valueToUpdate` \u003c/li\u003e \u003c/ol\u003e \u003cp\u003e Note that update is \"shallow\" in that only first level of properties (or, immediate contents of container to update) are modified, unless properties themselves indicate that merging should be applied for contents. Such merging can be specified using annotations (see \u003ccode\u003eJsonMerge\u003c/code\u003e) as well as using \"config overrides\" (see {@link #configOverride(Class)} and {@link #setDefaultMergeable(Boolean)}).\n * @param valueToUpdate Object to update\n * @param overrides Object to conceptually serialize and merge into value toupdate; can be thought of as a provider for overrides to apply.\n * @return Either the first argument (`valueToUpdate`), if it is mutable; or a result ofcreating new instance that is result of \"merging\" values (for example, \"updating\" a Java array will create a new array)\n * @throws JsonMappingException if there are structural incompatibilities that prevent update.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.generateJsonSchema#3834",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.generateJsonSchema(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class\u003c?\u003e t) throws JsonMappingException {\n  return _serializerProvider(getSerializationConfig()).generateJsonSchema(t);\n}",
    "begin_line": 3834,
    "end_line": 3837,
    "comment": "/** \n * Generate \u003ca href\u003d\"http://json-schema.org/\"\u003eJson-schema\u003c/a\u003e instance for specified class.\n * @param t The class to generate schema for\n * @return Constructed JSON schema.\n * @deprecated Since 2.6 use external JSON Schema generator (https://github.com/FasterXML/jackson-module-jsonSchema)(which under the hood calls  {@link #acceptJsonFormatVisitor(JavaType,JsonFormatVisitorWrapper)})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.acceptJsonFormatVisitor#3850",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(Class\u003c?\u003e type,JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n  acceptJsonFormatVisitor(_typeFactory.constructType(type),visitor);\n}",
    "begin_line": 3850,
    "end_line": 3854,
    "comment": "/** \n * Method for visiting type hierarchy for given type, using specified visitor. \u003cp\u003e This method can be used for things like generating \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON Schema\u003c/a\u003e instance for specified type.\n * @param type Type to generate schema for (possibly with generic signature)\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.acceptJsonFormatVisitor#3868",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(JavaType type,JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n  if (type \u003d\u003d null) {\n    throw new IllegalArgumentException(\"type must be provided\");\n  }\n  _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type,visitor);\n}",
    "begin_line": 3868,
    "end_line": 3875,
    "comment": "/** \n * Method for visiting type hierarchy for given type, using specified visitor. Visitation uses \u003ccode\u003eSerializer\u003c/code\u003e hierarchy and related properties \u003cp\u003e This method can be used for things like generating \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON Schema\u003c/a\u003e instance for specified type.\n * @param type Type to generate schema for (possibly with generic signature)\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._serializerProvider#3887",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "protected DefaultSerializerProvider _serializerProvider(SerializationConfig config){\n  return _serializerProvider.createInstance(config,_serializerFactory);\n}",
    "begin_line": 3887,
    "end_line": 3889,
    "comment": "/** \n * Overridable helper method used for constructing {@link SerializerProvider} to use for serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._configAndWriteValue#3895",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteValue(JsonGenerator, java.lang.Object)",
    "snippet": "protected final void _configAndWriteValue(JsonGenerator g,Object value) throws IOException {\n  SerializationConfig cfg\u003dgetSerializationConfig();\n  cfg.initialize(g);\n  if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) \u0026\u0026 (value instanceof Closeable)) {\n    _configAndWriteCloseable(g,value,cfg);\n    return;\n  }\n  try {\n    _serializerProvider(cfg).serializeValue(g,value);\n  }\n catch (  Exception e) {\n    ClassUtil.closeOnFailAndThrowAsIOE(g,e);\n    return;\n  }\n  g.close();\n}",
    "begin_line": 3895,
    "end_line": 3911,
    "comment": "/** \n * Method called to configure the generator as necessary and then call write functionality\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._configAndWriteCloseable#3917",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._configAndWriteCloseable(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "private final void _configAndWriteCloseable(JsonGenerator g,Object value,SerializationConfig cfg) throws IOException {\n  Closeable toClose\u003d(Closeable)value;\n  try {\n    _serializerProvider(cfg).serializeValue(g,value);\n    Closeable tmpToClose\u003dtoClose;\n    toClose\u003dnull;\n    tmpToClose.close();\n  }\n catch (  Exception e) {\n    ClassUtil.closeOnFailAndThrowAsIOE(g,toClose,e);\n    return;\n  }\n  g.close();\n}",
    "begin_line": 3917,
    "end_line": 3931,
    "comment": "/** \n * Helper method used when value to serialize is  {@link Closeable} and its \u003ccode\u003eclose()\u003c/code\u003emethod is to be called right after serialization has been called\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._writeCloseableValue#3937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._writeCloseableValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.SerializationConfig)",
    "snippet": "private final void _writeCloseableValue(JsonGenerator g,Object value,SerializationConfig cfg) throws IOException {\n  Closeable toClose\u003d(Closeable)value;\n  try {\n    _serializerProvider(cfg).serializeValue(g,value);\n    if (cfg.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) {\n      g.flush();\n    }\n  }\n catch (  Exception e) {\n    ClassUtil.closeOnFailAndThrowAsIOE(null,toClose,e);\n    return;\n  }\n  toClose.close();\n}",
    "begin_line": 3937,
    "end_line": 3951,
    "comment": "/** \n * Helper method used when value to serialize is  {@link Closeable} and its \u003ccode\u003eclose()\u003c/code\u003emethod is to be called right after serialization has been called\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readValue#3962",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readValue(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected Object _readValue(DeserializationConfig cfg,JsonParser p,JavaType valueType) throws IOException {\n  Object result;\n  JsonToken t\u003d_initForReading(p,valueType);\n  final DeserializationContext ctxt\u003dcreateDeserializationContext(p,cfg);\n  if (t \u003d\u003d JsonToken.VALUE_NULL) {\n    result\u003d_findRootDeserializer(ctxt,valueType).getNullValue(ctxt);\n  }\n else   if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n    result\u003dnull;\n  }\n else {\n    JsonDeserializer\u003cObject\u003e deser\u003d_findRootDeserializer(ctxt,valueType);\n    if (cfg.useRootWrapping()) {\n      result\u003d_unwrapAndDeserialize(p,ctxt,cfg,valueType,deser);\n    }\n else {\n      result\u003ddeser.deserialize(p,ctxt);\n    }\n  }\n  p.clearCurrentToken();\n  if (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n    _verifyNoTrailingTokens(p,ctxt,valueType);\n  }\n  return result;\n}",
    "begin_line": 3962,
    "end_line": 3993,
    "comment": "/** \n * Actual implementation of value reading+binding operation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readMapAndClose#3995",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected Object _readMapAndClose(JsonParser p0,JavaType valueType) throws IOException {\n  try (JsonParser p\u003dp0){\n    Object result;\n    JsonToken t\u003d_initForReading(p,valueType);\n    final DeserializationConfig cfg\u003dgetDeserializationConfig();\n    final DeserializationContext ctxt\u003dcreateDeserializationContext(p,cfg);\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n      result\u003d_findRootDeserializer(ctxt,valueType).getNullValue(ctxt);\n    }\n else     if (t \u003d\u003d JsonToken.END_ARRAY || t \u003d\u003d JsonToken.END_OBJECT) {\n      result\u003dnull;\n    }\n else {\n      JsonDeserializer\u003cObject\u003e deser\u003d_findRootDeserializer(ctxt,valueType);\n      if (cfg.useRootWrapping()) {\n        result\u003d_unwrapAndDeserialize(p,ctxt,cfg,valueType,deser);\n      }\n else {\n        result\u003ddeser.deserialize(p,ctxt);\n      }\n      ctxt.checkUnresolvedObjectId();\n    }\n    if (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n      _verifyNoTrailingTokens(p,ctxt,valueType);\n    }\n    return result;\n  }\n }",
    "begin_line": 3995,
    "end_line": 4022,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._readTreeAndClose#4030",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(JsonParser)",
    "snippet": "protected JsonNode _readTreeAndClose(JsonParser p0) throws IOException {\n  try (JsonParser p\u003dp0){\n    final JavaType valueType\u003dJSON_NODE_TYPE;\n    DeserializationConfig cfg\u003dgetDeserializationConfig();\n    cfg.initialize(p);\n    JsonToken t\u003dp.getCurrentToken();\n    if (t \u003d\u003d null) {\n      t\u003dp.nextToken();\n      if (t \u003d\u003d null) {\n        return null;\n      }\n    }\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n      return cfg.getNodeFactory().nullNode();\n    }\n    DeserializationContext ctxt\u003dcreateDeserializationContext(p,cfg);\n    JsonDeserializer\u003cObject\u003e deser\u003d_findRootDeserializer(ctxt,valueType);\n    Object result;\n    if (cfg.useRootWrapping()) {\n      result\u003d_unwrapAndDeserialize(p,ctxt,cfg,valueType,deser);\n    }\n else {\n      result\u003ddeser.deserialize(p,ctxt);\n      if (cfg.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n        _verifyNoTrailingTokens(p,ctxt,valueType);\n      }\n    }\n    return (JsonNode)result;\n  }\n }",
    "begin_line": 4030,
    "end_line": 4065,
    "comment": "/** \n * Similar to  {@link #_readMapAndClose} but specialized for \u003ccode\u003eJsonNode\u003c/code\u003ereading.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._unwrapAndDeserialize#4067",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._unwrapAndDeserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected Object _unwrapAndDeserialize(JsonParser p,DeserializationContext ctxt,DeserializationConfig config,JavaType rootType,JsonDeserializer\u003cObject\u003e deser) throws IOException {\n  PropertyName expRootName\u003dconfig.findRootName(rootType);\n  String expSimpleName\u003dexpRootName.getSimpleName();\n  if (p.getCurrentToken() !\u003d JsonToken.START_OBJECT) {\n    ctxt.reportWrongTokenException(rootType,JsonToken.START_OBJECT,\"Current token not START_OBJECT (needed to unwrap root name \u0027%s\u0027), but %s\",expSimpleName,p.getCurrentToken());\n  }\n  if (p.nextToken() !\u003d JsonToken.FIELD_NAME) {\n    ctxt.reportWrongTokenException(rootType,JsonToken.FIELD_NAME,\"Current token not FIELD_NAME (to contain expected root name \u0027%s\u0027), but %s\",expSimpleName,p.getCurrentToken());\n  }\n  String actualName\u003dp.getCurrentName();\n  if (!expSimpleName.equals(actualName)) {\n    ctxt.reportInputMismatch(rootType,\"Root name \u0027%s\u0027 does not match expected (\u0027%s\u0027) for type %s\",actualName,expSimpleName,rootType);\n  }\n  p.nextToken();\n  Object result\u003ddeser.deserialize(p,ctxt);\n  if (p.nextToken() !\u003d JsonToken.END_OBJECT) {\n    ctxt.reportWrongTokenException(rootType,JsonToken.END_OBJECT,\"Current token not END_OBJECT (to match wrapper object with root name \u0027%s\u0027), but %s\",expSimpleName,p.getCurrentToken());\n  }\n  if (config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {\n    _verifyNoTrailingTokens(p,ctxt,rootType);\n  }\n  return result;\n}",
    "begin_line": 4067,
    "end_line": 4104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder.createDeserializationContext#4111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper.createDeserializationContext(JsonParser, com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected DefaultDeserializationContext createDeserializationContext(JsonParser p,DeserializationConfig cfg){\n  return _deserializationContext.createInstance(cfg,p,_injectableValues);\n}",
    "begin_line": 4111,
    "end_line": 4114,
    "comment": "/** \n * Internal helper method called to create an instance of  {@link DeserializationContext}for deserializing a single root value. Can be overridden if a custom context is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._initForReading#4131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonToken _initForReading(JsonParser p,JavaType targetType) throws IOException {\n  _deserializationConfig.initialize(p);\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d null) {\n    t\u003dp.nextToken();\n    if (t \u003d\u003d null) {\n      throw MismatchedInputException.from(p,targetType,\"No content to map due to end-of-input\");\n    }\n  }\n  return t;\n}",
    "begin_line": 4131,
    "end_line": 4150,
    "comment": "/** \n * Method called to ensure that given parser is ready for reading content for data binding.\n * @return First token to be used for data binding after this call:can never be null as exception will be thrown if parser cannot provide more tokens.\n * @throws IOException if the underlying input source has problems duringparsing\n * @throws JsonParseException if parser has problems parsing content\n * @throws JsonMappingException if the parser does not have any morecontent to map (note: Json \"null\" value is considered content; enf-of-stream not)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._initForReading#4153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._initForReading(JsonParser)",
    "snippet": "@Deprecated protected JsonToken _initForReading(JsonParser p) throws IOException {\n  return _initForReading(p,null);\n}",
    "begin_line": 4153,
    "end_line": 4155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._verifyNoTrailingTokens#4160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._verifyNoTrailingTokens(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected final void _verifyNoTrailingTokens(JsonParser p,DeserializationContext ctxt,JavaType bindType) throws IOException {\n  JsonToken t\u003dp.nextToken();\n  if (t !\u003d null) {\n    Class\u003c?\u003e bt\u003dClassUtil.rawClass(bindType);\n    ctxt.reportTrailingTokens(bt,p,t);\n  }\n}",
    "begin_line": 4160,
    "end_line": 4169,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._findRootDeserializer#4180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._findRootDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findRootDeserializer(DeserializationContext ctxt,JavaType valueType) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_rootDeserializers.get(valueType);\n  if (deser !\u003d null) {\n    return deser;\n  }\n  deser\u003dctxt.findRootValueDeserializer(valueType);\n  if (deser \u003d\u003d null) {\n    return ctxt.reportBadDefinition(valueType,\"Cannot find a deserializer for type \" + valueType);\n  }\n  _rootDeserializers.put(valueType,deser);\n  return deser;\n}",
    "begin_line": 4180,
    "end_line": 4197,
    "comment": "/** \n * Method called to locate deserializer for the passed root-level value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTypeResolverBuilder._verifySchemaType#4202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ObjectMapper.java",
    "class_name": "com.fasterxml.jackson.databind.ObjectMapper",
    "signature": "com.fasterxml.jackson.databind.ObjectMapper._verifySchemaType(FormatSchema)",
    "snippet": "protected void _verifySchemaType(FormatSchema schema){\n  if (schema !\u003d null) {\n    if (!_jsonFactory.canUseSchema(schema)) {\n      throw new IllegalArgumentException(\"Cannot use FormatSchema of type \" + schema.getClass().getName() + \" for format \"+ _jsonFactory.getFormatName());\n    }\n  }\n}",
    "begin_line": 4202,
    "end_line": 4210,
    "comment": "/** \n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.MergeInfo#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo(com.fasterxml.jackson.databind.introspect.AnnotatedMember, boolean)",
    "snippet": "protected MergeInfo(AnnotatedMember getter,boolean fromDefaults){\n  this.getter\u003dgetter;\n  this.fromDefaults\u003dfromDefaults;\n}",
    "begin_line": 46,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.createForDefaults#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.createForDefaults(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public static MergeInfo createForDefaults(AnnotatedMember getter){\n  return new MergeInfo(getter,true);\n}",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.createForTypeOverride#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.createForTypeOverride(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public static MergeInfo createForTypeOverride(AnnotatedMember getter){\n  return new MergeInfo(getter,false);\n}",
    "begin_line": 55,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.createForPropertyOverride#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.createForPropertyOverride(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public static MergeInfo createForPropertyOverride(AnnotatedMember getter){\n  return new MergeInfo(getter,false);\n}",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.PropertyMetadata#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.PropertyMetadata(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String, com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo, Nulls, Nulls)",
    "snippet": "protected PropertyMetadata(Boolean req,String desc,Integer index,String def,MergeInfo mergeInfo,Nulls valueNulls,Nulls contentNulls){\n  _required\u003dreq;\n  _description\u003ddesc;\n  _index\u003dindex;\n  _defaultValue\u003d(def \u003d\u003d null || def.isEmpty()) ? null : def;\n  _mergeInfo\u003dmergeInfo;\n  _valueNulls\u003dvalueNulls;\n  _contentNulls\u003dcontentNulls;\n}",
    "begin_line": 120,
    "end_line": 130,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.construct#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.construct(java.lang.Boolean, java.lang.String, java.lang.Integer, java.lang.String)",
    "snippet": "public static PropertyMetadata construct(Boolean req,String desc,Integer index,String defaultValue){\n  if ((desc !\u003d null) || (index !\u003d null) || (defaultValue !\u003d null)) {\n    return new PropertyMetadata(req,desc,index,defaultValue,null,null,null);\n  }\n  if (req \u003d\u003d null) {\n    return STD_REQUIRED_OR_OPTIONAL;\n  }\n  return req ? STD_REQUIRED : STD_OPTIONAL;\n}",
    "begin_line": 135,
    "end_line": 145,
    "comment": "/** \n * @since 2.8.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.construct#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.construct(boolean, java.lang.String, java.lang.Integer, java.lang.String)",
    "snippet": "@Deprecated public static PropertyMetadata construct(boolean req,String desc,Integer index,String defaultValue){\n  if (desc !\u003d null || index !\u003d null || defaultValue !\u003d null) {\n    return new PropertyMetadata(req,desc,index,defaultValue,null,null,null);\n  }\n  return req ? STD_REQUIRED : STD_OPTIONAL;\n}",
    "begin_line": 148,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.readResolve#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.readResolve()",
    "snippet": "protected Object readResolve(){\n  if ((_description \u003d\u003d null) \u0026\u0026 (_index \u003d\u003d null) \u0026\u0026 (_defaultValue \u003d\u003d null)\u0026\u0026 (_mergeInfo \u003d\u003d null)\u0026\u0026 (_valueNulls \u003d\u003d null)\u0026\u0026 (_contentNulls \u003d\u003d null)) {\n    if (_required \u003d\u003d null) {\n      return STD_REQUIRED_OR_OPTIONAL;\n    }\n    return _required.booleanValue() ? STD_REQUIRED : STD_OPTIONAL;\n  }\n  return this;\n}",
    "begin_line": 161,
    "end_line": 172,
    "comment": "/** \n * Minor optimization: let\u0027s canonicalize back to placeholders in cases where there is no real data to consider\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withDescription#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withDescription(java.lang.String)",
    "snippet": "public PropertyMetadata withDescription(String desc){\n  return new PropertyMetadata(_required,desc,_index,_defaultValue,_mergeInfo,_valueNulls,_contentNulls);\n}",
    "begin_line": 174,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withMergeInfo#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withMergeInfo(com.fasterxml.jackson.databind.PropertyMetadata.MergeInfo)",
    "snippet": "public PropertyMetadata withMergeInfo(MergeInfo mergeInfo){\n  return new PropertyMetadata(_required,_description,_index,_defaultValue,mergeInfo,_valueNulls,_contentNulls);\n}",
    "begin_line": 182,
    "end_line": 185,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withNulls#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withNulls(Nulls, Nulls)",
    "snippet": "public PropertyMetadata withNulls(Nulls valueNulls,Nulls contentNulls){\n  return new PropertyMetadata(_required,_description,_index,_defaultValue,_mergeInfo,valueNulls,contentNulls);\n}",
    "begin_line": 190,
    "end_line": 194,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withDefaultValue#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withDefaultValue(java.lang.String)",
    "snippet": "public PropertyMetadata withDefaultValue(String def){\n  if ((def \u003d\u003d null) || def.isEmpty()) {\n    if (_defaultValue \u003d\u003d null) {\n      return this;\n    }\n    def\u003dnull;\n  }\n else   if (def.equals(_defaultValue)) {\n    return this;\n  }\n  return new PropertyMetadata(_required,_description,_index,def,_mergeInfo,_valueNulls,_contentNulls);\n}",
    "begin_line": 196,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withIndex#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withIndex(java.lang.Integer)",
    "snippet": "public PropertyMetadata withIndex(Integer index){\n  return new PropertyMetadata(_required,_description,index,_defaultValue,_mergeInfo,_valueNulls,_contentNulls);\n}",
    "begin_line": 209,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.withRequired#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.withRequired(java.lang.Boolean)",
    "snippet": "public PropertyMetadata withRequired(Boolean b){\n  if (b \u003d\u003d null) {\n    if (_required \u003d\u003d null) {\n      return this;\n    }\n  }\n else   if (b.equals(_required)) {\n    return this;\n  }\n  return new PropertyMetadata(b,_description,_index,_defaultValue,_mergeInfo,_valueNulls,_contentNulls);\n}",
    "begin_line": 214,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getDescription#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getDescription()",
    "snippet": "public String getDescription(){\n  return _description;\n}",
    "begin_line": 232,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getDefaultValue#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getDefaultValue()",
    "snippet": "public String getDefaultValue(){\n  return _defaultValue;\n}",
    "begin_line": 237,
    "end_line": 237,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.hasDefaultValue#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.hasDefaultValue()",
    "snippet": "public boolean hasDefaultValue(){\n  return (_defaultValue !\u003d null);\n}",
    "begin_line": 245,
    "end_line": 245,
    "comment": "/** \n * Accessor for determining whether property has declared \"default value\", which may be used by extension modules.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.isRequired#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.isRequired()",
    "snippet": "public boolean isRequired(){\n  return (_required !\u003d null) \u0026\u0026 _required.booleanValue();\n}",
    "begin_line": 247,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getRequired#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getRequired()",
    "snippet": "public Boolean getRequired(){\n  return _required;\n}",
    "begin_line": 249,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getIndex#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getIndex()",
    "snippet": "public Integer getIndex(){\n  return _index;\n}",
    "begin_line": 254,
    "end_line": 254,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.hasIndex#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.hasIndex()",
    "snippet": "public boolean hasIndex(){\n  return _index !\u003d null;\n}",
    "begin_line": 259,
    "end_line": 259,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getMergeInfo#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getMergeInfo()",
    "snippet": "public MergeInfo getMergeInfo(){\n  return _mergeInfo;\n}",
    "begin_line": 264,
    "end_line": 264,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getValueNulls#269",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getValueNulls()",
    "snippet": "public Nulls getValueNulls(){\n  return _valueNulls;\n}",
    "begin_line": 269,
    "end_line": 269,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MergeInfo.getContentNulls#274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyMetadata.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyMetadata",
    "signature": "com.fasterxml.jackson.databind.PropertyMetadata.getContentNulls()",
    "snippet": "public Nulls getContentNulls(){\n  return _contentNulls;\n}",
    "begin_line": 274,
    "end_line": 274,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.PropertyName#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String)",
    "snippet": "public PropertyName(String simpleName){\n  this(simpleName,null);\n}",
    "begin_line": 60,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.PropertyName#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.PropertyName(java.lang.String, java.lang.String)",
    "snippet": "public PropertyName(String simpleName,String namespace){\n  _simpleName\u003dClassUtil.nonNullString(simpleName);\n  _namespace\u003dnamespace;\n}",
    "begin_line": 64,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.readResolve#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.readResolve()",
    "snippet": "protected Object readResolve(){\n  if (_namespace \u003d\u003d null) {\n    if (_simpleName \u003d\u003d null || _USE_DEFAULT.equals(_simpleName)) {\n      return USE_DEFAULT;\n    }\n  }\n  return this;\n}",
    "begin_line": 71,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.construct#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String)",
    "snippet": "public static PropertyName construct(String simpleName){\n  if (simpleName \u003d\u003d null || simpleName.length() \u003d\u003d 0) {\n    return USE_DEFAULT;\n  }\n  return new PropertyName(InternCache.instance.intern(simpleName),null);\n}",
    "begin_line": 90,
    "end_line": 96,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.construct#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.construct(java.lang.String, java.lang.String)",
    "snippet": "public static PropertyName construct(String simpleName,String ns){\n  if (simpleName \u003d\u003d null) {\n    simpleName\u003d\"\";\n  }\n  if (ns \u003d\u003d null \u0026\u0026 simpleName.length() \u003d\u003d 0) {\n    return USE_DEFAULT;\n  }\n  return new PropertyName(InternCache.instance.intern(simpleName),ns);\n}",
    "begin_line": 98,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.internSimpleName#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.internSimpleName()",
    "snippet": "public PropertyName internSimpleName(){\n  if (_simpleName.length() \u003d\u003d 0) {\n    return this;\n  }\n  String interned\u003dInternCache.instance.intern(_simpleName);\n  if (interned \u003d\u003d _simpleName) {\n    return this;\n  }\n  return new PropertyName(interned,_namespace);\n}",
    "begin_line": 109,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.withSimpleName#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.withSimpleName(java.lang.String)",
    "snippet": "public PropertyName withSimpleName(String simpleName){\n  if (simpleName \u003d\u003d null) {\n    simpleName\u003d\"\";\n  }\n  if (simpleName.equals(_simpleName)) {\n    return this;\n  }\n  return new PropertyName(simpleName,_namespace);\n}",
    "begin_line": 125,
    "end_line": 134,
    "comment": "/** \n * Fluent factory method for constructing an instance with different simple name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.withNamespace#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.withNamespace(java.lang.String)",
    "snippet": "public PropertyName withNamespace(String ns){\n  if (ns \u003d\u003d null) {\n    if (_namespace \u003d\u003d null) {\n      return this;\n    }\n  }\n else   if (ns.equals(_namespace)) {\n    return this;\n  }\n  return new PropertyName(_simpleName,ns);\n}",
    "begin_line": 140,
    "end_line": 149,
    "comment": "/** \n * Fluent factory method for constructing an instance with different namespace.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.getSimpleName#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.getSimpleName()",
    "snippet": "public String getSimpleName(){\n  return _simpleName;\n}",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.simpleAsEncoded#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.simpleAsEncoded(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public SerializableString simpleAsEncoded(MapperConfig\u003c?\u003e config){\n  SerializableString sstr\u003d_encodedSimple;\n  if (sstr \u003d\u003d null) {\n    if (config \u003d\u003d null) {\n      sstr\u003dnew SerializedString(_simpleName);\n    }\n else {\n      sstr\u003dconfig.compileString(_simpleName);\n    }\n    _encodedSimple\u003dsstr;\n  }\n  return sstr;\n}",
    "begin_line": 167,
    "end_line": 178,
    "comment": "/** \n * Accessor that may be used to get lazily-constructed efficient representation of the simple name.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.getNamespace#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.getNamespace()",
    "snippet": "public String getNamespace(){\n  return _namespace;\n}",
    "begin_line": 180,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasSimpleName#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasSimpleName()",
    "snippet": "public boolean hasSimpleName(){\n  return _simpleName.length() \u003e 0;\n}",
    "begin_line": 184,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasSimpleName#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasSimpleName(java.lang.String)",
    "snippet": "public boolean hasSimpleName(String str){\n  return _simpleName.equals(str);\n}",
    "begin_line": 191,
    "end_line": 194,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hasNamespace#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hasNamespace()",
    "snippet": "public boolean hasNamespace(){\n  return _namespace !\u003d null;\n}",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.isEmpty#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.isEmpty()",
    "snippet": "public boolean isEmpty(){\n  return (_namespace \u003d\u003d null) \u0026\u0026 (_simpleName.isEmpty());\n}",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * Method that is basically equivalent of: \u003cpre\u003e !hasSimpleName() \u0026lt;\u0026lt; !hasNamespace(); \u003c/pre\u003e\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.equals#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  PropertyName other\u003d(PropertyName)o;\n  if (_simpleName \u003d\u003d null) {\n    if (other._simpleName !\u003d null)     return false;\n  }\n else   if (!_simpleName.equals(other._simpleName)) {\n    return false;\n  }\n  if (_namespace \u003d\u003d null) {\n    return (null \u003d\u003d other._namespace);\n  }\n  return _namespace.equals(other._namespace);\n}",
    "begin_line": 219,
    "end_line": 241,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.hashCode#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.hashCode()",
    "snippet": "@Override public int hashCode(){\n  if (_namespace \u003d\u003d null) {\n    return _simpleName.hashCode();\n  }\n  return _namespace.hashCode() ^ _simpleName.hashCode();\n}",
    "begin_line": 244,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PropertyName.toString#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/PropertyName.java",
    "class_name": "com.fasterxml.jackson.databind.PropertyName",
    "signature": "com.fasterxml.jackson.databind.PropertyName.toString()",
    "snippet": "@Override public String toString(){\n  if (_namespace \u003d\u003d null) {\n    return _simpleName;\n  }\n  return \"{\" + _namespace + \"}\"+ _simpleName;\n}",
    "begin_line": 252,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "public SerializationConfig(BaseSettings base,SubtypeResolver str,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(base,str,mixins,rootNames,configOverrides);\n  _serFeatures\u003dcollectFeatureDefaults(SerializationFeature.class);\n  _filterProvider\u003dnull;\n  _defaultPrettyPrinter\u003dDEFAULT_PRETTY_PRINTER;\n  _generatorFeatures\u003d0;\n  _generatorFeaturesToChange\u003d0;\n  _formatWriteFeatures\u003d0;\n  _formatWriteFeaturesToChange\u003d0;\n}",
    "begin_line": 110,
    "end_line": 122,
    "comment": "/** \n * Constructor used by ObjectMapper to create default configuration object instance.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected SerializationConfig(SerializationConfig src,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(src,mixins,rootNames,configOverrides);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 129,
    "end_line": 141,
    "comment": "/** \n * Copy-constructor used for making a copy to be used by new  {@link ObjectMapper}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "private SerializationConfig(SerializationConfig src,SubtypeResolver str){\n  super(src,str);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 150,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, int, int, int, int, int, int)",
    "snippet": "private SerializationConfig(SerializationConfig src,int mapperFeatures,int serFeatures,int generatorFeatures,int generatorFeatureMask,int formatFeatures,int formatFeaturesMask){\n  super(src,mapperFeatures);\n  _serFeatures\u003dserFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dgeneratorFeatures;\n  _generatorFeaturesToChange\u003dgeneratorFeatureMask;\n  _formatWriteFeatures\u003dformatFeatures;\n  _formatWriteFeaturesToChange\u003dformatFeaturesMask;\n}",
    "begin_line": 162,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "private SerializationConfig(SerializationConfig src,BaseSettings base){\n  super(src,base);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 177,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "private SerializationConfig(SerializationConfig src,FilterProvider filters){\n  super(src);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dfilters;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 189,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "private SerializationConfig(SerializationConfig src,Class\u003c?\u003e view){\n  super(src,view);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 201,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#213",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private SerializationConfig(SerializationConfig src,PropertyName rootName){\n  super(src,rootName);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 213,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected SerializationConfig(SerializationConfig src,ContextAttributes attrs){\n  super(src,attrs);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 228,
    "end_line": 238,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected SerializationConfig(SerializationConfig src,SimpleMixInResolver mixins){\n  super(src,mixins);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003dsrc._defaultPrettyPrinter;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 243,
    "end_line": 253,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.SerializationConfig#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.SerializationConfig(com.fasterxml.jackson.databind.SerializationConfig, PrettyPrinter)",
    "snippet": "protected SerializationConfig(SerializationConfig src,PrettyPrinter defaultPP){\n  super(src);\n  _serFeatures\u003dsrc._serFeatures;\n  _filterProvider\u003dsrc._filterProvider;\n  _defaultPrettyPrinter\u003ddefaultPP;\n  _generatorFeatures\u003dsrc._generatorFeatures;\n  _generatorFeaturesToChange\u003dsrc._generatorFeaturesToChange;\n  _formatWriteFeatures\u003dsrc._formatWriteFeatures;\n  _formatWriteFeaturesToChange\u003dsrc._formatWriteFeaturesToChange;\n}",
    "begin_line": 258,
    "end_line": 268,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig._withBase#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "@Override protected final SerializationConfig _withBase(BaseSettings newBase){\n  return (_base \u003d\u003d newBase) ? this : new SerializationConfig(this,newBase);\n}",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig._withMapperFeatures#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig._withMapperFeatures(int)",
    "snippet": "@Override protected final SerializationConfig _withMapperFeatures(int mapperFeatures){\n  return new SerializationConfig(this,mapperFeatures,_serFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 282,
    "end_line": 286,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withRootName#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public SerializationConfig withRootName(PropertyName rootName){\n  if (rootName \u003d\u003d null) {\n    if (_rootName \u003d\u003d null) {\n      return this;\n    }\n  }\n else   if (rootName.equals(_rootName)) {\n    return this;\n  }\n  return new SerializationConfig(this,rootName);\n}",
    "begin_line": 289,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "@Override public SerializationConfig with(SubtypeResolver str){\n  return (str \u003d\u003d _subtypeResolver) ? this : new SerializationConfig(this,str);\n}",
    "begin_line": 301,
    "end_line": 303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withView#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public SerializationConfig withView(Class\u003c?\u003e view){\n  return (_view \u003d\u003d view) ? this : new SerializationConfig(this,view);\n}",
    "begin_line": 306,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "@Override public SerializationConfig with(ContextAttributes attrs){\n  return (attrs \u003d\u003d _attributes) ? this : new SerializationConfig(this,attrs);\n}",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(java.text.DateFormat)",
    "snippet": "@Override public SerializationConfig with(DateFormat df){\n  SerializationConfig cfg\u003dsuper.with(df);\n  if (df \u003d\u003d null) {\n    return cfg.with(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n  }\n  return cfg.without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n}",
    "begin_line": 327,
    "end_line": 334,
    "comment": "/** \n * In addition to constructing instance with specified date format, will enable or disable \u003ccode\u003eSerializationFeature.WRITE_DATES_AS_TIMESTAMPS\u003c/code\u003e (enable if format set as null; disable if non-null)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig with(SerializationFeature feature){\n  int newSerFeatures\u003d_serFeatures | feature.getMask();\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 346,
    "end_line": 353,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig with(SerializationFeature first,SerializationFeature... features){\n  int newSerFeatures\u003d_serFeatures | first.getMask();\n  for (  SerializationFeature f : features) {\n    newSerFeatures|\u003df.getMask();\n  }\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 359,
    "end_line": 369,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig withFeatures(SerializationFeature... features){\n  int newSerFeatures\u003d_serFeatures;\n  for (  SerializationFeature f : features) {\n    newSerFeatures|\u003df.getMask();\n  }\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 375,
    "end_line": 385,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig without(SerializationFeature feature){\n  int newSerFeatures\u003d_serFeatures \u0026 ~feature.getMask();\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 391,
    "end_line": 398,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#404",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(com.fasterxml.jackson.databind.SerializationFeature, com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig without(SerializationFeature first,SerializationFeature... features){\n  int newSerFeatures\u003d_serFeatures \u0026 ~first.getMask();\n  for (  SerializationFeature f : features) {\n    newSerFeatures\u0026\u003d~f.getMask();\n  }\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 404,
    "end_line": 414,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public SerializationConfig withoutFeatures(SerializationFeature... features){\n  int newSerFeatures\u003d_serFeatures;\n  for (  SerializationFeature f : features) {\n    newSerFeatures\u0026\u003d~f.getMask();\n  }\n  return (newSerFeatures \u003d\u003d _serFeatures) ? this : new SerializationConfig(this,_mapperFeatures,newSerFeatures,_generatorFeatures,_generatorFeaturesToChange,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 420,
    "end_line": 430,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#443",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig with(JsonGenerator.Feature feature){\n  int newSet\u003d_generatorFeatures | feature.getMask();\n  int newMask\u003d_generatorFeaturesToChange | feature.getMask();\n  return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,newSet,newMask,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 443,
    "end_line": 451,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#459",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig withFeatures(JsonGenerator.Feature... features){\n  int newSet\u003d_generatorFeatures;\n  int newMask\u003d_generatorFeaturesToChange;\n  for (  JsonGenerator.Feature f : features) {\n    int mask\u003df.getMask();\n    newSet|\u003dmask;\n    newMask|\u003dmask;\n  }\n  return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,newSet,newMask,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 459,
    "end_line": 472,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig without(JsonGenerator.Feature feature){\n  int newSet\u003d_generatorFeatures \u0026 ~feature.getMask();\n  int newMask\u003d_generatorFeaturesToChange | feature.getMask();\n  return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,newSet,newMask,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 480,
    "end_line": 488,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(JsonGenerator.Feature)",
    "snippet": "public SerializationConfig withoutFeatures(JsonGenerator.Feature... features){\n  int newSet\u003d_generatorFeatures;\n  int newMask\u003d_generatorFeaturesToChange;\n  for (  JsonGenerator.Feature f : features) {\n    int mask\u003df.getMask();\n    newSet\u0026\u003d~mask;\n    newMask|\u003dmask;\n  }\n  return ((_generatorFeatures \u003d\u003d newSet) \u0026\u0026 (_generatorFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,newSet,newMask,_formatWriteFeatures,_formatWriteFeaturesToChange);\n}",
    "begin_line": 496,
    "end_line": 509,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.with#522",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.with(FormatFeature)",
    "snippet": "public SerializationConfig with(FormatFeature feature){\n  int newSet\u003d_formatWriteFeatures | feature.getMask();\n  int newMask\u003d_formatWriteFeaturesToChange | feature.getMask();\n  return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,_generatorFeatures,_generatorFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 522,
    "end_line": 530,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFeatures#538",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFeatures(FormatFeature)",
    "snippet": "public SerializationConfig withFeatures(FormatFeature... features){\n  int newSet\u003d_formatWriteFeatures;\n  int newMask\u003d_formatWriteFeaturesToChange;\n  for (  FormatFeature f : features) {\n    int mask\u003df.getMask();\n    newSet|\u003dmask;\n    newMask|\u003dmask;\n  }\n  return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,_generatorFeatures,_generatorFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 538,
    "end_line": 551,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.without#559",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.without(FormatFeature)",
    "snippet": "public SerializationConfig without(FormatFeature feature){\n  int newSet\u003d_formatWriteFeatures \u0026 ~feature.getMask();\n  int newMask\u003d_formatWriteFeaturesToChange | feature.getMask();\n  return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,_generatorFeatures,_generatorFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 559,
    "end_line": 567,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified feature disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withoutFeatures#575",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withoutFeatures(FormatFeature)",
    "snippet": "public SerializationConfig withoutFeatures(FormatFeature... features){\n  int newSet\u003d_formatWriteFeatures;\n  int newMask\u003d_formatWriteFeaturesToChange;\n  for (  FormatFeature f : features) {\n    int mask\u003df.getMask();\n    newSet\u0026\u003d~mask;\n    newMask|\u003dmask;\n  }\n  return ((_formatWriteFeatures \u003d\u003d newSet) \u0026\u0026 (_formatWriteFeaturesToChange \u003d\u003d newMask)) ? this : new SerializationConfig(this,_mapperFeatures,_serFeatures,_generatorFeatures,_generatorFeaturesToChange,newSet,newMask);\n}",
    "begin_line": 575,
    "end_line": 588,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withFilters#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withFilters(com.fasterxml.jackson.databind.ser.FilterProvider)",
    "snippet": "public SerializationConfig withFilters(FilterProvider filterProvider){\n  return (filterProvider \u003d\u003d _filterProvider) ? this : new SerializationConfig(this,filterProvider);\n}",
    "begin_line": 596,
    "end_line": 598,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withPropertyInclusion#609",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Deprecated public SerializationConfig withPropertyInclusion(JsonInclude.Value incl){\n  _configOverrides.setDefaultInclusion(incl);\n  return this;\n}",
    "begin_line": 609,
    "end_line": 612,
    "comment": "/** \n * Mutant factory method for constructing a new instance with different default inclusion criteria configuration.\n * @since 2.7\n * @deprecated Since 2.9; not needed any more\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.withDefaultPrettyPrinter#617",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.withDefaultPrettyPrinter(PrettyPrinter)",
    "snippet": "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp){\n  return (_defaultPrettyPrinter \u003d\u003d pp) ? this : new SerializationConfig(this,pp);\n}",
    "begin_line": 617,
    "end_line": 619,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.constructDefaultPrettyPrinter#627",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.constructDefaultPrettyPrinter()",
    "snippet": "public PrettyPrinter constructDefaultPrettyPrinter(){\n  PrettyPrinter pp\u003d_defaultPrettyPrinter;\n  if (pp instanceof Instantiatable\u003c?\u003e) {\n    pp\u003d(PrettyPrinter)((Instantiatable\u003c?\u003e)pp).createInstance();\n  }\n  return pp;\n}",
    "begin_line": 627,
    "end_line": 633,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.initialize#648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.initialize(JsonGenerator)",
    "snippet": "public void initialize(JsonGenerator g){\n  if (SerializationFeature.INDENT_OUTPUT.enabledIn(_serFeatures)) {\n    if (g.getPrettyPrinter() \u003d\u003d null) {\n      PrettyPrinter pp\u003dconstructDefaultPrettyPrinter();\n      if (pp !\u003d null) {\n        g.setPrettyPrinter(pp);\n      }\n    }\n  }\n  @SuppressWarnings(\"deprecation\") boolean useBigDec\u003dSerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN.enabledIn(_serFeatures);\n  int mask\u003d_generatorFeaturesToChange;\n  if ((mask !\u003d 0) || useBigDec) {\n    int newFlags\u003d_generatorFeatures;\n    if (useBigDec) {\n      int f\u003dJsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN.getMask();\n      newFlags|\u003df;\n      mask|\u003df;\n    }\n    g.overrideStdFeatures(newFlags,mask);\n  }\n  if (_formatWriteFeaturesToChange !\u003d 0) {\n    g.overrideFormatFeatures(_formatWriteFeatures,_formatWriteFeaturesToChange);\n  }\n}",
    "begin_line": 648,
    "end_line": 676,
    "comment": "/** \n * Method called by  {@link ObjectMapper} and {@link ObjectWriter}to modify those  {@link com.fasterxml.jackson.core.JsonGenerator.Feature} settingsthat have been configured via this config instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getSerializationInclusion#688",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getSerializationInclusion()",
    "snippet": "@Deprecated public JsonInclude.Include getSerializationInclusion(){\n  JsonInclude.Include incl\u003dgetDefaultPropertyInclusion().getValueInclusion();\n  return (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS) ? JsonInclude.Include.ALWAYS : incl;\n}",
    "begin_line": 688,
    "end_line": 692,
    "comment": "/** \n * @deprecated Since 2.7 use {@link #getDefaultPropertyInclusion} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.useRootWrapping#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.useRootWrapping()",
    "snippet": "@Override public boolean useRootWrapping(){\n  if (_rootName !\u003d null) {\n    return !_rootName.isEmpty();\n  }\n  return isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n}",
    "begin_line": 701,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.isEnabled#709",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public final boolean isEnabled(SerializationFeature f){\n  return (_serFeatures \u0026 f.getMask()) !\u003d 0;\n}",
    "begin_line": 709,
    "end_line": 711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.isEnabled#720",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.isEnabled(JsonGenerator.Feature, JsonFactory)",
    "snippet": "public final boolean isEnabled(JsonGenerator.Feature f,JsonFactory factory){\n  int mask\u003df.getMask();\n  if ((_generatorFeaturesToChange \u0026 mask) !\u003d 0) {\n    return (_generatorFeatures \u0026 f.getMask()) !\u003d 0;\n  }\n  return factory.isEnabled(f);\n}",
    "begin_line": 720,
    "end_line": 726,
    "comment": "/** \n * Accessor method that first checks if we have any overrides for feature, and only if not, checks state of passed-in factory.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.hasSerializationFeatures#734",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.hasSerializationFeatures(int)",
    "snippet": "public final boolean hasSerializationFeatures(int featureMask){\n  return (_serFeatures \u0026 featureMask) \u003d\u003d featureMask;\n}",
    "begin_line": 734,
    "end_line": 736,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getSerializationFeatures#738",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getSerializationFeatures()",
    "snippet": "public final int getSerializationFeatures(){\n  return _serFeatures;\n}",
    "begin_line": 738,
    "end_line": 740,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getFilterProvider#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getFilterProvider()",
    "snippet": "public FilterProvider getFilterProvider(){\n  return _filterProvider;\n}",
    "begin_line": 748,
    "end_line": 750,
    "comment": "/** \n * Method for getting provider used for locating filters given id (which is usually provided with filter annotations). Will be null if no provided was set for  {@link ObjectWriter}(or if serialization directly called from  {@link ObjectMapper})\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.getDefaultPrettyPrinter#762",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.getDefaultPrettyPrinter()",
    "snippet": "public PrettyPrinter getDefaultPrettyPrinter(){\n  return _defaultPrettyPrinter;\n}",
    "begin_line": 762,
    "end_line": 764,
    "comment": "/** \n * Accessor for configured blueprint \"default\"  {@link PrettyPrinter} touse, if default pretty-printing is enabled. \u003cp\u003e NOTE: returns the \"blueprint\" instance, and does NOT construct an instance ready to use; call  {@link #constructDefaultPrettyPrinter()} ifactually usable instance is desired.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializationConfig.introspect#777",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationConfig.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationConfig",
    "signature": "com.fasterxml.jackson.databind.SerializationConfig.introspect(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") public \u003cT extends BeanDescription\u003eT introspect(JavaType type){\n  return (T)getClassIntrospector().forSerialization(this,type,this);\n}",
    "begin_line": 777,
    "end_line": 779,
    "comment": "/** \n * Method that will introspect full bean properties for the purpose of building a bean serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.SerializationFeature#428",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.SerializationFeature(boolean)",
    "snippet": "private SerializationFeature(boolean defaultState){\n  _defaultState\u003ddefaultState;\n  _mask\u003d(1 \u003c\u003c ordinal());\n}",
    "begin_line": 428,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledByDefault#434",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.enabledByDefault()",
    "snippet": "@Override public boolean enabledByDefault(){\n  return _defaultState;\n}",
    "begin_line": 434,
    "end_line": 434,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.getMask#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.getMask()",
    "snippet": "@Override public int getMask(){\n  return _mask;\n}",
    "begin_line": 438,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "null.enabledIn#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializationFeature.java",
    "class_name": "com.fasterxml.jackson.databind.SerializationFeature",
    "signature": "com.fasterxml.jackson.databind.SerializationFeature.enabledIn(int)",
    "snippet": "@Override public boolean enabledIn(int flags){\n  return (flags \u0026 _mask) !\u003d 0;\n}",
    "begin_line": 441,
    "end_line": 441,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider()",
    "snippet": "public SerializerProvider(){\n  _config\u003dnull;\n  _serializerFactory\u003dnull;\n  _serializerCache\u003dnew SerializerCache();\n  _knownSerializers\u003dnull;\n  _serializationView\u003dnull;\n  _attributes\u003dnull;\n  _stdNullValueSerializer\u003dtrue;\n}",
    "begin_line": 192,
    "end_line": 205,
    "comment": "/** \n * Constructor for creating master (or \"blue-print\") provider object, which is only used as the template for constructing per-binding instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#213",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected SerializerProvider(SerializerProvider src,SerializationConfig config,SerializerFactory f){\n  _serializerFactory\u003df;\n  _config\u003dconfig;\n  _serializerCache\u003dsrc._serializerCache;\n  _unknownTypeSerializer\u003dsrc._unknownTypeSerializer;\n  _keySerializer\u003dsrc._keySerializer;\n  _nullValueSerializer\u003dsrc._nullValueSerializer;\n  _nullKeySerializer\u003dsrc._nullKeySerializer;\n  _stdNullValueSerializer\u003d(_nullValueSerializer \u003d\u003d DEFAULT_NULL_KEY_SERIALIZER);\n  _serializationView\u003dconfig.getActiveView();\n  _attributes\u003dconfig.getAttributes();\n  _knownSerializers\u003d_serializerCache.getReadOnlyLookupMap();\n}",
    "begin_line": 213,
    "end_line": 234,
    "comment": "/** \n * \"Copy-constructor\", used by sub-classes when creating actual non-blueprint instances to use.\n * @param src Blueprint object used as the baseline for this instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.SerializerProvider#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.SerializerProvider(com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "protected SerializerProvider(SerializerProvider src){\n  _config\u003dnull;\n  _serializationView\u003dnull;\n  _serializerFactory\u003dnull;\n  _knownSerializers\u003dnull;\n  _serializerCache\u003dnew SerializerCache();\n  _unknownTypeSerializer\u003dsrc._unknownTypeSerializer;\n  _keySerializer\u003dsrc._keySerializer;\n  _nullValueSerializer\u003dsrc._nullValueSerializer;\n  _nullKeySerializer\u003dsrc._nullKeySerializer;\n  _stdNullValueSerializer\u003dsrc._stdNullValueSerializer;\n}",
    "begin_line": 241,
    "end_line": 258,
    "comment": "/** \n * Copy-constructor used when making a copy of a blueprint instance.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setDefaultKeySerializer#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setDefaultKeySerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setDefaultKeySerializer(JsonSerializer\u003cObject\u003e ks){\n  if (ks \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\");\n  }\n  _keySerializer\u003dks;\n}",
    "begin_line": 272,
    "end_line": 278,
    "comment": "/** \n * Method that can be used to specify serializer that will be used to write JSON property names matching null keys for Java Maps (which will throw an exception if try write such property name)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setNullValueSerializer#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setNullValueSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setNullValueSerializer(JsonSerializer\u003cObject\u003e nvs){\n  if (nvs \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\");\n  }\n  _nullValueSerializer\u003dnvs;\n}",
    "begin_line": 289,
    "end_line": 295,
    "comment": "/** \n * Method that can be used to specify serializer that will be used to write JSON values matching Java null values instead of default one (which simply writes JSON null). \u003cp\u003e Note that you can get finer control over serializer to use by overriding {@link #findNullValueSerializer}, which gets called once per each property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setNullKeySerializer#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setNullKeySerializer(com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void setNullKeySerializer(JsonSerializer\u003cObject\u003e nks){\n  if (nks \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\");\n  }\n  _nullKeySerializer\u003dnks;\n}",
    "begin_line": 306,
    "end_line": 312,
    "comment": "/** \n * Method that can be used to specify serializer to use for serializing all non-null JSON property names, unless more specific key serializer is found (i.e. if not custom key serializer has been registered for Java type). \u003cp\u003e Note that key serializer registration are different from value serializer registrations.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getConfig#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getConfig()",
    "snippet": "@Override public final SerializationConfig getConfig(){\n  return _config;\n}",
    "begin_line": 325,
    "end_line": 325,
    "comment": "/** \n * Method for accessing configuration for the serialization processing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getAnnotationIntrospector#328",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getAnnotationIntrospector()",
    "snippet": "@Override public final AnnotationIntrospector getAnnotationIntrospector(){\n  return _config.getAnnotationIntrospector();\n}",
    "begin_line": 328,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getTypeFactory#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getTypeFactory()",
    "snippet": "@Override public final TypeFactory getTypeFactory(){\n  return _config.getTypeFactory();\n}",
    "begin_line": 333,
    "end_line": 335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getActiveView#338",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getActiveView()",
    "snippet": "@Override public final Class\u003c?\u003e getActiveView(){\n  return _serializationView;\n}",
    "begin_line": 338,
    "end_line": 338,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getSerializationView#344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getSerializationView()",
    "snippet": "@Deprecated public final Class\u003c?\u003e getSerializationView(){\n  return _serializationView;\n}",
    "begin_line": 344,
    "end_line": 344,
    "comment": "/** \n * @deprecated Since 2.2, use {@link #getActiveView} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.canOverrideAccessModifiers#347",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.canOverrideAccessModifiers()",
    "snippet": "@Override public final boolean canOverrideAccessModifiers(){\n  return _config.canOverrideAccessModifiers();\n}",
    "begin_line": 347,
    "end_line": 349,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isEnabled#352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@Override public final boolean isEnabled(MapperFeature feature){\n  return _config.isEnabled(feature);\n}",
    "begin_line": 352,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultPropertyFormat#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType){\n  return _config.getDefaultPropertyFormat(baseType);\n}",
    "begin_line": 357,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultPropertyInclusion#364",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType){\n  return _config.getDefaultPropertyInclusion();\n}",
    "begin_line": 364,
    "end_line": 366,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getLocale#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getLocale()",
    "snippet": "@Override public Locale getLocale(){\n  return _config.getLocale();\n}",
    "begin_line": 375,
    "end_line": 377,
    "comment": "/** \n * Method for accessing default Locale to use: convenience method for \u003cpre\u003e getConfig().getLocale(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getTimeZone#386",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getTimeZone()",
    "snippet": "@Override public TimeZone getTimeZone(){\n  return _config.getTimeZone();\n}",
    "begin_line": 386,
    "end_line": 388,
    "comment": "/** \n * Method for accessing default TimeZone to use: convenience method for \u003cpre\u003e getConfig().getTimeZone(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getAttribute#397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getAttribute(java.lang.Object)",
    "snippet": "@Override public Object getAttribute(Object key){\n  return _attributes.getAttribute(key);\n}",
    "begin_line": 397,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.setAttribute#402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.setAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public SerializerProvider setAttribute(Object key,Object value){\n  _attributes\u003d_attributes.withPerCallAttribute(key,value);\n  return this;\n}",
    "begin_line": 402,
    "end_line": 406,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isEnabled#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isEnabled(com.fasterxml.jackson.databind.SerializationFeature)",
    "snippet": "public final boolean isEnabled(SerializationFeature feature){\n  return _config.isEnabled(feature);\n}",
    "begin_line": 422,
    "end_line": 424,
    "comment": "/** \n * Convenience method for checking whether specified serialization feature is enabled or not. Shortcut for: \u003cpre\u003e getConfig().isEnabled(feature); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.hasSerializationFeatures#432",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.hasSerializationFeatures(int)",
    "snippet": "public final boolean hasSerializationFeatures(int featureMask){\n  return _config.hasSerializationFeatures(featureMask);\n}",
    "begin_line": 432,
    "end_line": 434,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getFilterProvider#443",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getFilterProvider()",
    "snippet": "public final FilterProvider getFilterProvider(){\n  return _config.getFilterProvider();\n}",
    "begin_line": 443,
    "end_line": 445,
    "comment": "/** \n * Convenience method for accessing provider to find serialization filters used, equivalent to calling: \u003cpre\u003e getConfig().getFilterProvider(); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getGenerator#454",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getGenerator()",
    "snippet": "public JsonGenerator getGenerator(){\n  return null;\n}",
    "begin_line": 454,
    "end_line": 456,
    "comment": "/** \n * \u003cp\u003e NOTE: current implementation simply returns `null` as generator is not yet assigned to this provider.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findObjectId#470",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e)",
    "snippet": "public abstract WritableObjectId findObjectId(Object forPojo,ObjectIdGenerator\u003c?\u003e generatorType);",
    "begin_line": 470,
    "end_line": 471,
    "comment": "/** \n * Method called to find the Object Id for given POJO, if one has been generated. Will always return a non-null Object; contents vary depending on whether an Object Id already exists or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#497",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_serializerCache.untypedValueSerializer(_config.constructType(valueType));\n      if (ser \u003d\u003d null) {\n        ser\u003d_createAndCacheUntypedSerializer(valueType);\n        if (ser \u003d\u003d null) {\n          ser\u003dgetUnknownTypeSerializer(valueType);\n          if (CACHE_UNKNOWN_MAPPINGS) {\n            _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n          }\n          return ser;\n        }\n      }\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)handleSecondaryContextualization(ser,property);\n}",
    "begin_line": 497,
    "end_line": 525,
    "comment": "/** \n * Method called to get hold of a serializer for a value of given type; or if no such serializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked). \u003cp\u003e Note: this method is only called for non-null values; not for keys or null values. For these, check out other accessor methods. \u003cp\u003e Note that serializers produced should NOT handle polymorphic serialization aspects; separate  {@link TypeSerializer} is to be constructed by callerif and as necessary.\n * @throws JsonMappingException if there are fatal problems withaccessing suitable serializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#540",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType,BeanProperty property) throws JsonMappingException {\n  if (valueType \u003d\u003d null) {\n    reportMappingProblem(\"Null passed for `valueType` of `findValueSerializer()`\");\n  }\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_createAndCacheUntypedSerializer(valueType);\n      if (ser \u003d\u003d null) {\n        ser\u003dgetUnknownTypeSerializer(valueType.getRawClass());\n        if (CACHE_UNKNOWN_MAPPINGS) {\n          _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n        }\n        return ser;\n      }\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)handleSecondaryContextualization(ser,property);\n}",
    "begin_line": 540,
    "end_line": 562,
    "comment": "/** \n * Similar to  {@link #findValueSerializer(Class,BeanProperty)}, but takes full generics-aware type instead of raw class. This is necessary for accurate handling of external type information, to handle polymorphic types. \u003cp\u003e Note: this call will also contextualize serializer before returning it.\n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#571",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e findValueSerializer(Class\u003c?\u003e valueType) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_serializerCache.untypedValueSerializer(_config.constructType(valueType));\n      if (ser \u003d\u003d null) {\n        ser\u003d_createAndCacheUntypedSerializer(valueType);\n        if (ser \u003d\u003d null) {\n          ser\u003dgetUnknownTypeSerializer(valueType);\n          if (CACHE_UNKNOWN_MAPPINGS) {\n            _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n          }\n        }\n      }\n    }\n  }\n  return ser;\n}",
    "begin_line": 571,
    "end_line": 591,
    "comment": "/** \n * Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findValueSerializer#600",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e findValueSerializer(JavaType valueType) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_createAndCacheUntypedSerializer(valueType);\n      if (ser \u003d\u003d null) {\n        ser\u003dgetUnknownTypeSerializer(valueType.getRawClass());\n        if (CACHE_UNKNOWN_MAPPINGS) {\n          _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n        }\n      }\n    }\n  }\n  return ser;\n}",
    "begin_line": 600,
    "end_line": 618,
    "comment": "/** \n * Method variant used when we do NOT want contextualization to happen; it will need to be handled at a later point, but caller wants to be able to do that as needed; sometimes to avoid infinite loops\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findPrimaryPropertySerializer#633",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e findPrimaryPropertySerializer(JavaType valueType,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_createAndCacheUntypedSerializer(valueType);\n      if (ser \u003d\u003d null) {\n        ser\u003dgetUnknownTypeSerializer(valueType.getRawClass());\n        if (CACHE_UNKNOWN_MAPPINGS) {\n          _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n        }\n        return ser;\n      }\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)handlePrimaryContextualization(ser,property);\n}",
    "begin_line": 633,
    "end_line": 652,
    "comment": "/** \n * Similar to  {@link #findValueSerializer(JavaType,BeanProperty)}, but used when finding \"primary\" property value serializer (one directly handling value of the property). Difference has to do with contextual resolution, and method(s) called: this method should only be called when caller is certain that this is the primary property value serializer.\n * @param property Property that is being handled; will never be null, and itstype has to match \u003ccode\u003evalueType\u003c/code\u003e parameter.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findPrimaryPropertySerializer#658",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findPrimaryPropertySerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e findPrimaryPropertySerializer(Class\u003c?\u003e valueType,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(valueType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(valueType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_serializerCache.untypedValueSerializer(_config.constructType(valueType));\n      if (ser \u003d\u003d null) {\n        ser\u003d_createAndCacheUntypedSerializer(valueType);\n        if (ser \u003d\u003d null) {\n          ser\u003dgetUnknownTypeSerializer(valueType);\n          if (CACHE_UNKNOWN_MAPPINGS) {\n            _serializerCache.addAndResolveNonTypedSerializer(valueType,ser,this);\n          }\n          return ser;\n        }\n      }\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)handlePrimaryContextualization(ser,property);\n}",
    "begin_line": 658,
    "end_line": 680,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypedValueSerializer#697",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(java.lang.Class\u003c?\u003e, boolean, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(Class\u003c?\u003e valueType,boolean cache,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.typedValueSerializer(valueType);\n  if (ser !\u003d null) {\n    return ser;\n  }\n  ser\u003d_serializerCache.typedValueSerializer(valueType);\n  if (ser !\u003d null) {\n    return ser;\n  }\n  ser\u003dfindValueSerializer(valueType,property);\n  TypeSerializer typeSer\u003d_serializerFactory.createTypeSerializer(_config,_config.constructType(valueType));\n  if (typeSer !\u003d null) {\n    typeSer\u003dtypeSer.forProperty(property);\n    ser\u003dnew TypeWrappedSerializer(typeSer,ser);\n  }\n  if (cache) {\n    _serializerCache.addTypedSerializer(valueType,ser);\n  }\n  return ser;\n}",
    "begin_line": 697,
    "end_line": 724,
    "comment": "/** \n * Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.\n * @param valueType Type for purpose of locating a serializer; usually dynamicruntime type, but can also be static declared type, depending on configuration\n * @param cache Whether resulting value serializer should be cached or not; this is justa hint\n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypedValueSerializer#742",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypedValueSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findTypedValueSerializer(JavaType valueType,boolean cache,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.typedValueSerializer(valueType);\n  if (ser !\u003d null) {\n    return ser;\n  }\n  ser\u003d_serializerCache.typedValueSerializer(valueType);\n  if (ser !\u003d null) {\n    return ser;\n  }\n  ser\u003dfindValueSerializer(valueType,property);\n  TypeSerializer typeSer\u003d_serializerFactory.createTypeSerializer(_config,valueType);\n  if (typeSer !\u003d null) {\n    typeSer\u003dtypeSer.forProperty(property);\n    ser\u003dnew TypeWrappedSerializer(typeSer,ser);\n  }\n  if (cache) {\n    _serializerCache.addTypedSerializer(valueType,ser);\n  }\n  return ser;\n}",
    "begin_line": 742,
    "end_line": 768,
    "comment": "/** \n * Method called to locate regular serializer, matching type serializer, and if both found, wrap them in a serializer that calls both in correct sequence. This method is currently only used for root-level serializer handling to allow for simpler caching. A call can always be replaced by equivalent calls to access serializer and type serializer separately.\n * @param valueType Declared type of value being serialized (which may notbe actual runtime type); used for finding both value serializer and type serializer to use for adding polymorphic type (if any)\n * @param cache Whether resulting value serializer should be cached or not; this is justa hint \n * @param property When creating secondary serializers, property for whichserializer is needed: annotations of the property (or bean that contains it) may be checked to create contextual serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findTypeSerializer#777",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findTypeSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public TypeSerializer findTypeSerializer(JavaType javaType) throws JsonMappingException {\n  return _serializerFactory.createTypeSerializer(_config,javaType);\n}",
    "begin_line": 777,
    "end_line": 779,
    "comment": "/** \n * Method called to get the  {@link TypeSerializer} to use for including Type Id necessaryfor serializing for the given Java class. Useful for schema generators.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findKeySerializer#791",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findKeySerializer(JavaType keyType,BeanProperty property) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_serializerFactory.createKeySerializer(_config,keyType,_keySerializer);\n  return _handleContextualResolvable(ser,property);\n}",
    "begin_line": 791,
    "end_line": 797,
    "comment": "/** \n * Method called to get the serializer to use for serializing non-null Map keys. Separation from regular {@link #findValueSerializer} method is because actual writemethod must be different (@link JsonGenerator#writeFieldName}; but also since behavior for some key types may differ. \u003cp\u003e Note that the serializer itself can be called with instances of any Java object, but not nulls.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findKeySerializer#802",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findKeySerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findKeySerializer(Class\u003c?\u003e rawKeyType,BeanProperty property) throws JsonMappingException {\n  return findKeySerializer(_config.constructType(rawKeyType),property);\n}",
    "begin_line": 802,
    "end_line": 806,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultNullKeySerializer#817",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullKeySerializer()",
    "snippet": "public JsonSerializer\u003cObject\u003e getDefaultNullKeySerializer(){\n  return _nullKeySerializer;\n}",
    "begin_line": 817,
    "end_line": 819,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getDefaultNullValueSerializer#824",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getDefaultNullValueSerializer()",
    "snippet": "public JsonSerializer\u003cObject\u003e getDefaultNullValueSerializer(){\n  return _nullValueSerializer;\n}",
    "begin_line": 824,
    "end_line": 826,
    "comment": "/** \n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findNullKeySerializer#845",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findNullKeySerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findNullKeySerializer(JavaType serializationType,BeanProperty property) throws JsonMappingException {\n  return _nullKeySerializer;\n}",
    "begin_line": 845,
    "end_line": 850,
    "comment": "/** \n * Method called to find a serializer to use for null values for given declared type. Note that type is completely based on declared type, since nulls in Java have no type and thus runtime type cannot be determined.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.findNullValueSerializer#863",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.findNullValueSerializer(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003cObject\u003e findNullValueSerializer(BeanProperty property) throws JsonMappingException {\n  return _nullValueSerializer;\n}",
    "begin_line": 863,
    "end_line": 866,
    "comment": "/** \n * Method called to get the serializer to use for serializing null values for specified property. \u003cp\u003e Default implementation simply calls  {@link #getDefaultNullValueSerializer()}; can be overridden to add custom null serialization for properties of certain type or name. This gives method full granularity to basically override null handling for any specific property or class of properties.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.getUnknownTypeSerializer#880",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.getUnknownTypeSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e getUnknownTypeSerializer(Class\u003c?\u003e unknownType){\n  if (unknownType \u003d\u003d Object.class) {\n    return _unknownTypeSerializer;\n  }\n  return new UnknownSerializer(unknownType);\n}",
    "begin_line": 880,
    "end_line": 887,
    "comment": "/** \n * Method called to get the serializer to use if provider cannot determine an actual type-specific serializer to use; typically when none of  {@link SerializerFactory}instances are able to construct a serializer. \u003cp\u003e Typically, returned serializer will throw an exception, although alternatively  {@link com.fasterxml.jackson.databind.ser.std.ToStringSerializer}could be returned as well.\n * @param unknownType Type for which no serializer is found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.isUnknownTypeSerializer#896",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.isUnknownTypeSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "public boolean isUnknownTypeSerializer(JsonSerializer\u003c?\u003e ser){\n  if ((ser \u003d\u003d _unknownTypeSerializer) || (ser \u003d\u003d null)) {\n    return true;\n  }\n  if (isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n    if (ser.getClass() \u003d\u003d UnknownSerializer.class) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 896,
    "end_line": 908,
    "comment": "/** \n * Helper method called to see if given serializer is considered to be something returned by  {@link #getUnknownTypeSerializer}, that is, something for which no regular serializer was found or constructed.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.serializerInstance#927",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e serializerInstance(Annotated annotated,Object serDef) throws JsonMappingException ;",
    "begin_line": 927,
    "end_line": 929,
    "comment": "/** \n * Method that can be called to construct and configure serializer instance, either given a  {@link Class} to instantiate (with default constructor),or an uninitialized serializer instance. Either way, serialize will be properly resolved (via  {@link com.fasterxml.jackson.databind.ser.ResolvableSerializer}) and/or contextualized (via  {@link com.fasterxml.jackson.databind.ser.ContextualSerializer}) as necessary.\n * @param annotated Annotated entity that contained definition\n * @param serDef Serializer definition: either an instance or class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.includeFilterInstance#941",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Object includeFilterInstance(BeanPropertyDefinition forProperty,Class\u003c?\u003e filterClass) throws JsonMappingException ;",
    "begin_line": 941,
    "end_line": 943,
    "comment": "/** \n * Method that can be called to construct and configure  {@link JsonInclude}filter instance, given a  {@link Class} to instantiate (with default constructor, by default).\n * @param forProperty (optional) If filter is created for a property, that property;`null` if filter created via defaulting, global or per-type.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.includeFilterSuppressNulls#951",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.includeFilterSuppressNulls(java.lang.Object)",
    "snippet": "public abstract boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException ;",
    "begin_line": 951,
    "end_line": 952,
    "comment": "/** \n * Follow-up method that may be called after calling  {@link #includeFilterInstance}, to check handling of `null` values by the filter.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.handlePrimaryContextualization#970",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.handlePrimaryContextualization(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003c?\u003e handlePrimaryContextualization(JsonSerializer\u003c?\u003e ser,BeanProperty property) throws JsonMappingException {\n  if (ser !\u003d null) {\n    if (ser instanceof ContextualSerializer) {\n      ser\u003d((ContextualSerializer)ser).createContextual(this,property);\n    }\n  }\n  return ser;\n}",
    "begin_line": 970,
    "end_line": 980,
    "comment": "/** \n * Method called for primary property serializers (ones directly created to serialize values of a POJO property), to handle details of resolving {@link ContextualSerializer} with given property context.\n * @param property Property for which the given primary serializer is used; never null.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.handleSecondaryContextualization#998",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.handleSecondaryContextualization(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public JsonSerializer\u003c?\u003e handleSecondaryContextualization(JsonSerializer\u003c?\u003e ser,BeanProperty property) throws JsonMappingException {\n  if (ser !\u003d null) {\n    if (ser instanceof ContextualSerializer) {\n      ser\u003d((ContextualSerializer)ser).createContextual(this,property);\n    }\n  }\n  return ser;\n}",
    "begin_line": 998,
    "end_line": 1008,
    "comment": "/** \n * Method called for secondary property serializers (ones NOT directly created to serialize values of a POJO property but instead created as a dependant serializer -- such as value serializers for structured types, or serializers for root values) to handle details of resolving {@link ContextualDeserializer} with given property context.Given that these serializers are not directly related to given property (or, in case of root value property, to any property), annotations accessible may or may not be relevant.\n * @param property Property for which serializer is used, if any; nullwhen deserializing root values\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeValue#1023",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeValue(java.lang.Object, JsonGenerator)",
    "snippet": "public final void defaultSerializeValue(Object value,JsonGenerator gen) throws IOException {\n  if (value \u003d\u003d null) {\n    if (_stdNullValueSerializer) {\n      gen.writeNull();\n    }\n else {\n      _nullValueSerializer.serialize(null,gen,this);\n    }\n  }\n else {\n    Class\u003c?\u003e cls\u003dvalue.getClass();\n    findTypedValueSerializer(cls,true,null).serialize(value,gen,this);\n  }\n}",
    "begin_line": 1023,
    "end_line": 1035,
    "comment": "/** \n * Convenience method that will serialize given value (which can be null) using standard serializer locating functionality. It can be called for all values including field and Map values, but usually field values are best handled calling {@link #defaultSerializeField} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeField#1042",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeField(java.lang.String, java.lang.Object, JsonGenerator)",
    "snippet": "public final void defaultSerializeField(String fieldName,Object value,JsonGenerator gen) throws IOException {\n  gen.writeFieldName(fieldName);\n  if (value \u003d\u003d null) {\n    if (_stdNullValueSerializer) {\n      gen.writeNull();\n    }\n else {\n      _nullValueSerializer.serialize(null,gen,this);\n    }\n  }\n else {\n    Class\u003c?\u003e cls\u003dvalue.getClass();\n    findTypedValueSerializer(cls,true,null).serialize(value,gen,this);\n  }\n}",
    "begin_line": 1042,
    "end_line": 1059,
    "comment": "/** \n * Convenience method that will serialize given field with specified value. Value may be null. Serializer is done using the usual null) using standard serializer locating functionality.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateValue#1068",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(long, JsonGenerator)",
    "snippet": "public final void defaultSerializeDateValue(long timestamp,JsonGenerator gen) throws IOException {\n  if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n    gen.writeNumber(timestamp);\n  }\n else {\n    gen.writeString(_dateFormat().format(new Date(timestamp)));\n  }\n}",
    "begin_line": 1068,
    "end_line": 1076,
    "comment": "/** \n * Method that will handle serialization of Date(-like) values, using {@link SerializationConfig} settings to determine expected serializationbehavior. Note: date here means \"full\" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateValue#1085",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateValue(java.util.Date, JsonGenerator)",
    "snippet": "public final void defaultSerializeDateValue(Date date,JsonGenerator gen) throws IOException {\n  if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) {\n    gen.writeNumber(date.getTime());\n  }\n else {\n    gen.writeString(_dateFormat().format(date));\n  }\n}",
    "begin_line": 1085,
    "end_line": 1092,
    "comment": "/** \n * Method that will handle serialization of Date(-like) values, using {@link SerializationConfig} settings to determine expected serializationbehavior. Note: date here means \"full\" date, that is, date AND time, as per Java convention (and not date-only values like in SQL)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateKey#1099",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(long, JsonGenerator)",
    "snippet": "public void defaultSerializeDateKey(long timestamp,JsonGenerator gen) throws IOException {\n  if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n    gen.writeFieldName(String.valueOf(timestamp));\n  }\n else {\n    gen.writeFieldName(_dateFormat().format(new Date(timestamp)));\n  }\n}",
    "begin_line": 1099,
    "end_line": 1106,
    "comment": "/** \n * Method that will handle serialization of Dates used as  {@link java.util.Map} keys,based on  {@link SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS}value (and if using textual representation, configured date format)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeDateKey#1113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeDateKey(java.util.Date, JsonGenerator)",
    "snippet": "public void defaultSerializeDateKey(Date date,JsonGenerator gen) throws IOException {\n  if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {\n    gen.writeFieldName(String.valueOf(date.getTime()));\n  }\n else {\n    gen.writeFieldName(_dateFormat().format(date));\n  }\n}",
    "begin_line": 1113,
    "end_line": 1120,
    "comment": "/** \n * Method that will handle serialization of Dates used as  {@link java.util.Map} keys,based on  {@link SerializationFeature#WRITE_DATE_KEYS_AS_TIMESTAMPS}value (and if using textual representation, configured date format)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.defaultSerializeNull#1122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.defaultSerializeNull(JsonGenerator)",
    "snippet": "public final void defaultSerializeNull(JsonGenerator gen) throws IOException {\n  if (_stdNullValueSerializer) {\n    gen.writeNull();\n  }\n else {\n    _nullValueSerializer.serialize(null,gen,this);\n  }\n}",
    "begin_line": 1122,
    "end_line": 1129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportMappingProblem#1144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.String, java.lang.Object)",
    "snippet": "public void reportMappingProblem(String message,Object... args) throws JsonMappingException {\n  throw mappingException(message,args);\n}",
    "begin_line": 1144,
    "end_line": 1146,
    "comment": "/** \n * Helper method called to indicate problem; default behavior is to construct and throw a  {@link JsonMappingException}, but in future may collect more than one and only throw after certain number, or at the end of serialization.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadTypeDefinition#1155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadTypeDefinition(com.fasterxml.jackson.databind.BeanDescription, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportBadTypeDefinition(BeanDescription bean,String msg,Object... msgArgs) throws JsonMappingException {\n  String beanDesc\u003d\"N/A\";\n  if (bean !\u003d null) {\n    beanDesc\u003dClassUtil.nameOf(bean.getBeanClass());\n  }\n  msg\u003dString.format(\"Invalid type definition for type %s: %s\",beanDesc,_format(msg,msgArgs));\n  throw InvalidDefinitionException.from(getGenerator(),msg,bean,null);\n}",
    "begin_line": 1155,
    "end_line": 1164,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific Java type, unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadPropertyDefinition#1173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadPropertyDefinition(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.String, java.lang.Object)",
    "snippet": "public \u003cT\u003eT reportBadPropertyDefinition(BeanDescription bean,BeanPropertyDefinition prop,String message,Object... msgArgs) throws JsonMappingException {\n  message\u003d_format(message,msgArgs);\n  String propName\u003d\"N/A\";\n  if (prop !\u003d null) {\n    propName\u003d_quotedString(prop.getName());\n  }\n  String beanDesc\u003d\"N/A\";\n  if (bean !\u003d null) {\n    beanDesc\u003dClassUtil.nameOf(bean.getBeanClass());\n  }\n  message\u003dString.format(\"Invalid definition for property %s (of type %s): %s\",propName,beanDesc,message);\n  throw InvalidDefinitionException.from(getGenerator(),message,bean,prop);\n}",
    "begin_line": 1173,
    "end_line": 1187,
    "comment": "/** \n * Helper method called to indicate problem in POJO (serialization) definitions or settings regarding specific property (of a type), unrelated to actual JSON content to map. Default behavior is to construct and throw a  {@link JsonMappingException}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "@Override public \u003cT\u003eT reportBadDefinition(JavaType type,String msg) throws JsonMappingException {\n  throw InvalidDefinitionException.from(getGenerator(),msg,type);\n}",
    "begin_line": 1190,
    "end_line": 1192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.Throwable)",
    "snippet": "public \u003cT\u003eT reportBadDefinition(JavaType type,String msg,Throwable cause) throws JsonMappingException {\n  InvalidDefinitionException e\u003dInvalidDefinitionException.from(getGenerator(),msg,type);\n  e.initCause(cause);\n  throw e;\n}",
    "begin_line": 1197,
    "end_line": 1202,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportBadDefinition#1207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Throwable)",
    "snippet": "public \u003cT\u003eT reportBadDefinition(Class\u003c?\u003e raw,String msg,Throwable cause) throws JsonMappingException {\n  InvalidDefinitionException e\u003dInvalidDefinitionException.from(getGenerator(),msg,constructType(raw));\n  e.initCause(cause);\n  throw e;\n}",
    "begin_line": 1207,
    "end_line": 1212,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.reportMappingProblem#1221",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.reportMappingProblem(java.lang.Throwable, java.lang.String, java.lang.Object)",
    "snippet": "public void reportMappingProblem(Throwable t,String message,Object... msgArgs) throws JsonMappingException {\n  message\u003d_format(message,msgArgs);\n  throw JsonMappingException.from(getGenerator(),message,t);\n}",
    "begin_line": 1221,
    "end_line": 1224,
    "comment": "/** \n * Helper method called to indicate problem; default behavior is to construct and throw a  {@link JsonMappingException}, but in future may collect more than one and only throw after certain number, or at the end of serialization.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.invalidTypeIdException#1227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.invalidTypeIdException(com.fasterxml.jackson.databind.JavaType, java.lang.String, java.lang.String)",
    "snippet": "@Override public JsonMappingException invalidTypeIdException(JavaType baseType,String typeId,String extraDesc){\n  String msg\u003dString.format(\"Could not resolve type id \u0027%s\u0027 as a subtype of %s\",typeId,baseType);\n  return InvalidTypeIdException.from(null,_colonConcat(msg,extraDesc),baseType,typeId);\n}",
    "begin_line": 1227,
    "end_line": 1232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.mappingException#1250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated public JsonMappingException mappingException(String message,Object... msgArgs){\n  return JsonMappingException.from(getGenerator(),_format(message,msgArgs));\n}",
    "begin_line": 1250,
    "end_line": 1252,
    "comment": "/** \n * Factory method for constructing a  {@link JsonMappingException}; usually only indirectly used by calling {@link #reportMappingProblem(String,Object...)}.\n * @since 2.6\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider.mappingException#1264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider.mappingException(java.lang.Throwable, java.lang.String, java.lang.Object)",
    "snippet": "@Deprecated protected JsonMappingException mappingException(Throwable t,String message,Object... msgArgs){\n  return JsonMappingException.from(getGenerator(),_format(message,msgArgs),t);\n}",
    "begin_line": 1264,
    "end_line": 1266,
    "comment": "/** \n * Factory method for constructing a  {@link JsonMappingException}; usually only indirectly used by calling {@link #reportMappingProblem(Throwable,String,Object...)}\n * @since 2.8\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._reportIncompatibleRootType#1274",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._reportIncompatibleRootType(java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void _reportIncompatibleRootType(Object value,JavaType rootType) throws IOException {\n  if (rootType.isPrimitive()) {\n    Class\u003c?\u003e wrapperType\u003dClassUtil.wrapperType(rootType.getRawClass());\n    if (wrapperType.isAssignableFrom(value.getClass())) {\n      return;\n    }\n  }\n  reportBadDefinition(rootType,String.format(\"Incompatible types: declared root type (%s) vs %s\",rootType,ClassUtil.classNameOf(value)));\n}",
    "begin_line": 1274,
    "end_line": 1287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._findExplicitUntypedSerializer#1296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._findExplicitUntypedSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findExplicitUntypedSerializer(Class\u003c?\u003e runtimeType) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003d_knownSerializers.untypedValueSerializer(runtimeType);\n  if (ser \u003d\u003d null) {\n    ser\u003d_serializerCache.untypedValueSerializer(runtimeType);\n    if (ser \u003d\u003d null) {\n      ser\u003d_createAndCacheUntypedSerializer(runtimeType);\n    }\n  }\n  if (isUnknownTypeSerializer(ser)) {\n    return null;\n  }\n  return ser;\n}",
    "begin_line": 1296,
    "end_line": 1317,
    "comment": "/** \n * Method that will try to find a serializer, either from cache or by constructing one; but will not return an \"unknown\" serializer if this cannot be done but rather returns null.\n * @return Serializer if one can be found, null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createAndCacheUntypedSerializer#1330",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createAndCacheUntypedSerializer(Class\u003c?\u003e rawType) throws JsonMappingException {\n  JavaType fullType\u003d_config.constructType(rawType);\n  JsonSerializer\u003cObject\u003e ser;\n  try {\n    ser\u003d_createUntypedSerializer(fullType);\n  }\n catch (  IllegalArgumentException iae) {\n    ser\u003dnull;\n    reportMappingProblem(iae,ClassUtil.exceptionMessage(iae));\n  }\n  if (ser !\u003d null) {\n    _serializerCache.addAndResolveNonTypedSerializer(rawType,fullType,ser,this);\n  }\n  return ser;\n}",
    "begin_line": 1330,
    "end_line": 1349,
    "comment": "/** \n * Method that will try to construct a value serializer; and if one is successfully created, cache it for reuse.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createAndCacheUntypedSerializer#1351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createAndCacheUntypedSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createAndCacheUntypedSerializer(JavaType type) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser;\n  try {\n    ser\u003d_createUntypedSerializer(type);\n  }\n catch (  IllegalArgumentException iae) {\n    ser\u003dnull;\n    reportMappingProblem(iae,ClassUtil.exceptionMessage(iae));\n  }\n  if (ser !\u003d null) {\n    _serializerCache.addAndResolveNonTypedSerializer(type,ser,this);\n  }\n  return ser;\n}",
    "begin_line": 1351,
    "end_line": 1369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._createUntypedSerializer#1374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._createUntypedSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _createUntypedSerializer(JavaType type) throws JsonMappingException {\nsynchronized (_serializerCache) {\n    return (JsonSerializer\u003cObject\u003e)_serializerFactory.createSerializer(this,type);\n  }\n}",
    "begin_line": 1374,
    "end_line": 1390,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._handleContextualResolvable#1397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._handleContextualResolvable(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonSerializer\u003cObject\u003e _handleContextualResolvable(JsonSerializer\u003c?\u003e ser,BeanProperty property) throws JsonMappingException {\n  if (ser instanceof ResolvableSerializer) {\n    ((ResolvableSerializer)ser).resolve(this);\n  }\n  return (JsonSerializer\u003cObject\u003e)handleSecondaryContextualization(ser,property);\n}",
    "begin_line": 1397,
    "end_line": 1405,
    "comment": "/** \n * Helper method called to resolve and contextualize given serializer, if and as necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._handleResolvable#1408",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._handleResolvable(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonSerializer\u003cObject\u003e _handleResolvable(JsonSerializer\u003c?\u003e ser) throws JsonMappingException {\n  if (ser instanceof ResolvableSerializer) {\n    ((ResolvableSerializer)ser).resolve(this);\n  }\n  return (JsonSerializer\u003cObject\u003e)ser;\n}",
    "begin_line": 1408,
    "end_line": 1415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerProvider._dateFormat#1423",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/SerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.SerializerProvider",
    "signature": "com.fasterxml.jackson.databind.SerializerProvider._dateFormat()",
    "snippet": "protected final DateFormat _dateFormat(){\n  if (_dateFormat !\u003d null) {\n    return _dateFormat;\n  }\n  DateFormat df\u003d_config.getDateFormat();\n  _dateFormat\u003ddf\u003d(DateFormat)df.clone();\n  return df;\n}",
    "begin_line": 1423,
    "end_line": 1443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.BaseSettings#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.BaseSettings(com.fasterxml.jackson.databind.introspect.ClassIntrospector, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.PropertyNamingStrategy, com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e, java.text.DateFormat, com.fasterxml.jackson.databind.cfg.HandlerInstantiator, java.util.Locale, java.util.TimeZone, Base64Variant)",
    "snippet": "public BaseSettings(ClassIntrospector ci,AnnotationIntrospector ai,PropertyNamingStrategy pns,TypeFactory tf,TypeResolverBuilder\u003c?\u003e typer,DateFormat dateFormat,HandlerInstantiator hi,Locale locale,TimeZone tz,Base64Variant defaultBase64){\n  _classIntrospector\u003dci;\n  _annotationIntrospector\u003dai;\n  _propertyNamingStrategy\u003dpns;\n  _typeFactory\u003dtf;\n  _typeResolverBuilder\u003dtyper;\n  _dateFormat\u003ddateFormat;\n  _handlerInstantiator\u003dhi;\n  _locale\u003dlocale;\n  _timeZone\u003dtz;\n  _defaultBase64\u003ddefaultBase64;\n}",
    "begin_line": 133,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.copy#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.copy()",
    "snippet": "public BaseSettings copy(){\n  return new BaseSettings(_classIntrospector.copy(),_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 156,
    "end_line": 168,
    "comment": "/** \n * Turns out we are not necessarily 100% stateless, alas, since  {@link ClassIntrospector}typically has a cache. So this method is needed for deep copy() of Mapper.\n * @since 2.9.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withClassIntrospector#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withClassIntrospector(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "public BaseSettings withClassIntrospector(ClassIntrospector ci){\n  if (_classIntrospector \u003d\u003d ci) {\n    return this;\n  }\n  return new BaseSettings(ci,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 176,
    "end_line": 183,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withAnnotationIntrospector#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai){\n  if (_annotationIntrospector \u003d\u003d ai) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,ai,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 185,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withInsertedAnnotationIntrospector#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withInsertedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai){\n  return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai,_annotationIntrospector));\n}",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withAppendedAnnotationIntrospector#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withAppendedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai){\n  return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector,ai));\n}",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withPropertyNamingStrategy#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withPropertyNamingStrategy(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns){\n  if (_propertyNamingStrategy \u003d\u003d pns) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,pns,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 212,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withTypeFactory#221",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withTypeFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public BaseSettings withTypeFactory(TypeFactory tf){\n  if (_typeFactory \u003d\u003d tf) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,tf,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 221,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withTypeResolverBuilder#230",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withTypeResolverBuilder(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public BaseSettings withTypeResolverBuilder(TypeResolverBuilder\u003c?\u003e typer){\n  if (_typeResolverBuilder \u003d\u003d typer) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,typer,_dateFormat,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 230,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withDateFormat#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withDateFormat(java.text.DateFormat)",
    "snippet": "public BaseSettings withDateFormat(DateFormat df){\n  if (_dateFormat \u003d\u003d df) {\n    return this;\n  }\n  if ((df !\u003d null) \u0026\u0026 hasExplicitTimeZone()) {\n    df\u003d_force(df,_timeZone);\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,df,_handlerInstantiator,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 239,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.withHandlerInstantiator#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.withHandlerInstantiator(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public BaseSettings withHandlerInstantiator(HandlerInstantiator hi){\n  if (_handlerInstantiator \u003d\u003d hi) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,hi,_locale,_timeZone,_defaultBase64);\n}",
    "begin_line": 253,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(java.util.Locale)",
    "snippet": "public BaseSettings with(Locale l){\n  if (_locale \u003d\u003d l) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,l,_timeZone,_defaultBase64);\n}",
    "begin_line": 262,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#276",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(java.util.TimeZone)",
    "snippet": "public BaseSettings with(TimeZone tz){\n  if (tz \u003d\u003d null) {\n    throw new IllegalArgumentException();\n  }\n  if (tz \u003d\u003d _timeZone) {\n    return this;\n  }\n  DateFormat df\u003d_force(_dateFormat,tz);\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,df,_handlerInstantiator,_locale,tz,_defaultBase64);\n}",
    "begin_line": 276,
    "end_line": 290,
    "comment": "/** \n * Fluent factory for constructing a new instance that uses specified TimeZone. Note that timezone used with also be assigned to configured  {@link DateFormat}, changing time formatting defaults.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.with#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.with(Base64Variant)",
    "snippet": "public BaseSettings with(Base64Variant base64){\n  if (base64 \u003d\u003d _defaultBase64) {\n    return this;\n  }\n  return new BaseSettings(_classIntrospector,_annotationIntrospector,_propertyNamingStrategy,_typeFactory,_typeResolverBuilder,_dateFormat,_handlerInstantiator,_locale,_timeZone,base64);\n}",
    "begin_line": 295,
    "end_line": 303,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getClassIntrospector#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getClassIntrospector()",
    "snippet": "public ClassIntrospector getClassIntrospector(){\n  return _classIntrospector;\n}",
    "begin_line": 311,
    "end_line": 313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getAnnotationIntrospector#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getAnnotationIntrospector()",
    "snippet": "public AnnotationIntrospector getAnnotationIntrospector(){\n  return _annotationIntrospector;\n}",
    "begin_line": 315,
    "end_line": 317,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getPropertyNamingStrategy#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getPropertyNamingStrategy()",
    "snippet": "public PropertyNamingStrategy getPropertyNamingStrategy(){\n  return _propertyNamingStrategy;\n}",
    "begin_line": 319,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTypeFactory#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTypeFactory()",
    "snippet": "public TypeFactory getTypeFactory(){\n  return _typeFactory;\n}",
    "begin_line": 323,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTypeResolverBuilder#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTypeResolverBuilder()",
    "snippet": "public TypeResolverBuilder\u003c?\u003e getTypeResolverBuilder(){\n  return _typeResolverBuilder;\n}",
    "begin_line": 327,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getDateFormat#331",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getDateFormat()",
    "snippet": "public DateFormat getDateFormat(){\n  return _dateFormat;\n}",
    "begin_line": 331,
    "end_line": 333,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getHandlerInstantiator#335",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getHandlerInstantiator()",
    "snippet": "public HandlerInstantiator getHandlerInstantiator(){\n  return _handlerInstantiator;\n}",
    "begin_line": 335,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getLocale#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getLocale()",
    "snippet": "public Locale getLocale(){\n  return _locale;\n}",
    "begin_line": 339,
    "end_line": 341,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getTimeZone#343",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getTimeZone()",
    "snippet": "public TimeZone getTimeZone(){\n  TimeZone tz\u003d_timeZone;\n  return (tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz;\n}",
    "begin_line": 343,
    "end_line": 346,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.hasExplicitTimeZone#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.hasExplicitTimeZone()",
    "snippet": "public boolean hasExplicitTimeZone(){\n  return (_timeZone !\u003d null);\n}",
    "begin_line": 355,
    "end_line": 357,
    "comment": "/** \n * Accessor that may be called to determine whether this settings object has been explicitly configured with a TimeZone (true), or is still relying on the default settings (false).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings.getBase64Variant#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings.getBase64Variant()",
    "snippet": "public Base64Variant getBase64Variant(){\n  return _defaultBase64;\n}",
    "begin_line": 359,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BaseSettings._force#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.BaseSettings",
    "signature": "com.fasterxml.jackson.databind.cfg.BaseSettings._force(java.text.DateFormat, java.util.TimeZone)",
    "snippet": "private DateFormat _force(DateFormat df,TimeZone tz){\n  if (df instanceof StdDateFormat) {\n    return ((StdDateFormat)df).withTimeZone(tz);\n  }\n  df\u003d(DateFormat)df.clone();\n  df.setTimeZone(tz);\n  return df;\n}",
    "begin_line": 369,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.ConfigOverride#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.ConfigOverride()",
    "snippet": "protected ConfigOverride(){\n}",
    "begin_line": 76,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.ConfigOverride#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.ConfigOverride(com.fasterxml.jackson.databind.cfg.ConfigOverride)",
    "snippet": "protected ConfigOverride(ConfigOverride src){\n  _format\u003dsrc._format;\n  _include\u003dsrc._include;\n  _includeAsProperty\u003dsrc._includeAsProperty;\n  _ignorals\u003dsrc._ignorals;\n  _setterInfo\u003dsrc._setterInfo;\n  _visibility\u003dsrc._visibility;\n  _isIgnoredType\u003dsrc._isIgnoredType;\n  _mergeable\u003dsrc._mergeable;\n}",
    "begin_line": 77,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.empty#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.empty()",
    "snippet": "public static ConfigOverride empty(){\n  return Empty.INSTANCE;\n}",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Accessor for immutable \"empty\" instance that has no configuration overrides defined.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getFormat#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getFormat()",
    "snippet": "public JsonFormat.Value getFormat(){\n  return _format;\n}",
    "begin_line": 97,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getInclude#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getInclude()",
    "snippet": "public JsonInclude.Value getInclude(){\n  return _include;\n}",
    "begin_line": 98,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getIncludeAsProperty#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getIncludeAsProperty()",
    "snippet": "public JsonInclude.Value getIncludeAsProperty(){\n  return _includeAsProperty;\n}",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getIgnorals#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getIgnorals()",
    "snippet": "public JsonIgnoreProperties.Value getIgnorals(){\n  return _ignorals;\n}",
    "begin_line": 105,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getIsIgnoredType#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getIsIgnoredType()",
    "snippet": "public Boolean getIsIgnoredType(){\n  return _isIgnoredType;\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getSetterInfo#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getSetterInfo()",
    "snippet": "public JsonSetter.Value getSetterInfo(){\n  return _setterInfo;\n}",
    "begin_line": 114,
    "end_line": 114,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getVisibility#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getVisibility()",
    "snippet": "public JsonAutoDetect.Value getVisibility(){\n  return _visibility;\n}",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverride.getMergeable#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.getMergeable()",
    "snippet": "public Boolean getMergeable(){\n  return _mergeable;\n}",
    "begin_line": 124,
    "end_line": 124,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Empty.Empty#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverride.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverride",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverride.Empty()",
    "snippet": "private Empty(){\n}",
    "begin_line": 135,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.ConfigOverrides#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.ConfigOverrides()",
    "snippet": "public ConfigOverrides(){\n  this(null,JsonInclude.Value.empty(),JsonSetter.Value.empty(),VisibilityChecker.Std.defaultInstance(),null);\n}",
    "begin_line": 52,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.ConfigOverrides#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.ConfigOverrides(java.util.Map\u003cjava.lang.Class\u003c?\u003e,com.fasterxml.jackson.databind.cfg.MutableConfigOverride\u003e, JsonInclude.Value, JsonSetter.Value, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, java.lang.Boolean)",
    "snippet": "protected ConfigOverrides(Map\u003cClass\u003c?\u003e,MutableConfigOverride\u003e overrides,JsonInclude.Value defIncl,JsonSetter.Value defSetter,VisibilityChecker\u003c?\u003e defVisibility,Boolean defMergeable){\n  _overrides\u003doverrides;\n  _defaultInclusion\u003ddefIncl;\n  _defaultSetterInfo\u003ddefSetter;\n  _visibilityChecker\u003ddefVisibility;\n  _defaultMergeable\u003ddefMergeable;\n}",
    "begin_line": 62,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.copy#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.copy()",
    "snippet": "public ConfigOverrides copy(){\n  Map\u003cClass\u003c?\u003e,MutableConfigOverride\u003e newOverrides;\n  if (_overrides \u003d\u003d null) {\n    newOverrides\u003dnull;\n  }\n else {\n    newOverrides\u003d_newMap();\n    for (    Map.Entry\u003cClass\u003c?\u003e,MutableConfigOverride\u003e entry : _overrides.entrySet()) {\n      newOverrides.put(entry.getKey(),entry.getValue().copy());\n    }\n  }\n  return new ConfigOverrides(newOverrides,_defaultInclusion,_defaultSetterInfo,_visibilityChecker,_defaultMergeable);\n}",
    "begin_line": 74,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.findOverride#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.findOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public ConfigOverride findOverride(Class\u003c?\u003e type){\n  if (_overrides \u003d\u003d null) {\n    return null;\n  }\n  return _overrides.get(type);\n}",
    "begin_line": 95,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.findOrCreateOverride#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.findOrCreateOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public MutableConfigOverride findOrCreateOverride(Class\u003c?\u003e type){\n  if (_overrides \u003d\u003d null) {\n    _overrides\u003d_newMap();\n  }\n  MutableConfigOverride override\u003d_overrides.get(type);\n  if (override \u003d\u003d null) {\n    override\u003dnew MutableConfigOverride();\n    _overrides.put(type,override);\n  }\n  return override;\n}",
    "begin_line": 102,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultInclusion#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultInclusion()",
    "snippet": "public JsonInclude.Value getDefaultInclusion(){\n  return _defaultInclusion;\n}",
    "begin_line": 120,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultSetterInfo#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultSetterInfo()",
    "snippet": "public JsonSetter.Value getDefaultSetterInfo(){\n  return _defaultSetterInfo;\n}",
    "begin_line": 124,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultMergeable#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultMergeable()",
    "snippet": "public Boolean getDefaultMergeable(){\n  return _defaultMergeable;\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.getDefaultVisibility#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.getDefaultVisibility()",
    "snippet": "public VisibilityChecker\u003c?\u003e getDefaultVisibility(){\n  return _visibilityChecker;\n}",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultInclusion#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultInclusion(JsonInclude.Value)",
    "snippet": "public void setDefaultInclusion(JsonInclude.Value v){\n  _defaultInclusion\u003dv;\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultSetterInfo#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultSetterInfo(JsonSetter.Value)",
    "snippet": "public void setDefaultSetterInfo(JsonSetter.Value v){\n  _defaultSetterInfo\u003dv;\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultMergeable#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultMergeable(java.lang.Boolean)",
    "snippet": "public void setDefaultMergeable(Boolean v){\n  _defaultMergeable\u003dv;\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides.setDefaultVisibility#163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides.setDefaultVisibility(com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "public void setDefaultVisibility(VisibilityChecker\u003c?\u003e v){\n  _visibilityChecker\u003dv;\n}",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConfigOverrides._newMap#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ConfigOverrides.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ConfigOverrides",
    "signature": "com.fasterxml.jackson.databind.cfg.ConfigOverrides._newMap()",
    "snippet": "protected Map\u003cClass\u003c?\u003e,MutableConfigOverride\u003e _newMap(){\n  return new HashMap\u003cClass\u003c?\u003e,MutableConfigOverride\u003e();\n}",
    "begin_line": 173,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.getEmpty#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
    "snippet": "public static ContextAttributes getEmpty(){\n  return Impl.getEmpty();\n}",
    "begin_line": 23,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withSharedAttribute#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract ContextAttributes withSharedAttribute(Object key,Object value);",
    "begin_line": 33,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withSharedAttributes#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "public abstract ContextAttributes withSharedAttributes(Map\u003c?,?\u003e attributes);",
    "begin_line": 35,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withoutSharedAttribute#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withoutSharedAttribute(java.lang.Object)",
    "snippet": "public abstract ContextAttributes withoutSharedAttribute(Object key);",
    "begin_line": 37,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.getAttribute#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getAttribute(java.lang.Object)",
    "snippet": "public abstract Object getAttribute(Object key);",
    "begin_line": 48,
    "end_line": 48,
    "comment": "/** \n * Accessor for value of specified attribute\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContextAttributes.withPerCallAttribute#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withPerCallAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract ContextAttributes withPerCallAttribute(Object key,Object value);",
    "begin_line": 54,
    "end_line": 54,
    "comment": "/** \n * Mutator used during call (via context) to set value of \"non-shared\" part of attribute set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl(java.util.Map\u003c?,?\u003e)",
    "snippet": "protected Impl(Map\u003c?,?\u003e shared){\n  _shared\u003dshared;\n  _nonShared\u003dnull;\n}",
    "begin_line": 92,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.Impl(java.util.Map\u003c?,?\u003e, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected Impl(Map\u003c?,?\u003e shared,Map\u003cObject,Object\u003e nonShared){\n  _shared\u003dshared;\n  _nonShared\u003dnonShared;\n}",
    "begin_line": 97,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.getEmpty#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getEmpty()",
    "snippet": "public static ContextAttributes getEmpty(){\n  return EMPTY;\n}",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withSharedAttribute#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public ContextAttributes withSharedAttribute(Object key,Object value){\n  Map\u003cObject,Object\u003e m;\n  if (this \u003d\u003d EMPTY) {\n    m\u003dnew HashMap\u003cObject,Object\u003e(8);\n  }\n else {\n    m\u003d_copy(_shared);\n  }\n  m.put(key,value);\n  return new Impl(m);\n}",
    "begin_line": 113,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withSharedAttributes#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withSharedAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "@Override public ContextAttributes withSharedAttributes(Map\u003c?,?\u003e shared){\n  return new Impl(shared);\n}",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withoutSharedAttribute#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withoutSharedAttribute(java.lang.Object)",
    "snippet": "@Override public ContextAttributes withoutSharedAttribute(Object key){\n  if (_shared.isEmpty()) {\n    return this;\n  }\n  if (_shared.containsKey(key)) {\n    if (_shared.size() \u003d\u003d 1) {\n      return EMPTY;\n    }\n  }\n else {\n    return this;\n  }\n  Map\u003cObject,Object\u003e m\u003d_copy(_shared);\n  m.remove(key);\n  return new Impl(m);\n}",
    "begin_line": 132,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.getAttribute#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.getAttribute(java.lang.Object)",
    "snippet": "@Override public Object getAttribute(Object key){\n  if (_nonShared !\u003d null) {\n    Object ob\u003d_nonShared.get(key);\n    if (ob !\u003d null) {\n      if (ob \u003d\u003d NULL_SURROGATE) {\n        return null;\n      }\n      return ob;\n    }\n  }\n  return _shared.get(key);\n}",
    "begin_line": 158,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.withPerCallAttribute#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.withPerCallAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public ContextAttributes withPerCallAttribute(Object key,Object value){\n  if (value \u003d\u003d null) {\n    if (_shared.containsKey(key)) {\n      value\u003dNULL_SURROGATE;\n    }\n else     if ((_nonShared \u003d\u003d null) || !_nonShared.containsKey(key)) {\n      return this;\n    }\n else {\n      _nonShared.remove(key);\n      return this;\n    }\n  }\n  if (_nonShared \u003d\u003d null) {\n    return nonSharedInstance(key,value);\n  }\n  _nonShared.put(key,value);\n  return this;\n}",
    "begin_line": 173,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.nonSharedInstance#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes.nonSharedInstance(java.lang.Object, java.lang.Object)",
    "snippet": "protected ContextAttributes nonSharedInstance(Object key,Object value){\n  Map\u003cObject,Object\u003e m\u003dnew HashMap\u003cObject,Object\u003e();\n  if (value \u003d\u003d null) {\n    value\u003dNULL_SURROGATE;\n  }\n  m.put(key,value);\n  return new Impl(_shared,m);\n}",
    "begin_line": 206,
    "end_line": 214,
    "comment": "/** \n * Overridable method that creates initial non-shared instance, with the first explicit set value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl._copy#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/ContextAttributes.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.ContextAttributes",
    "signature": "com.fasterxml.jackson.databind.cfg.ContextAttributes._copy(java.util.Map\u003c?,?\u003e)",
    "snippet": "private Map\u003cObject,Object\u003e _copy(Map\u003c?,?\u003e src){\n  return new HashMap\u003cObject,Object\u003e(src);\n}",
    "begin_line": 216,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.DeserializerFactoryConfig#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.DeserializerFactoryConfig()",
    "snippet": "public DeserializerFactoryConfig(){\n  this(null,null,null,null,null);\n}",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Constructor for creating basic configuration with no additional handlers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.DeserializerFactoryConfig#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.DeserializerFactoryConfig(com.fasterxml.jackson.databind.deser.Deserializers[], com.fasterxml.jackson.databind.deser.KeyDeserializers[], com.fasterxml.jackson.databind.deser.BeanDeserializerModifier[], com.fasterxml.jackson.databind.AbstractTypeResolver[], com.fasterxml.jackson.databind.deser.ValueInstantiators[])",
    "snippet": "protected DeserializerFactoryConfig(Deserializers[] allAdditionalDeserializers,KeyDeserializers[] allAdditionalKeyDeserializers,BeanDeserializerModifier[] modifiers,AbstractTypeResolver[] atr,ValueInstantiators[] vi){\n  _additionalDeserializers\u003d(allAdditionalDeserializers \u003d\u003d null) ? NO_DESERIALIZERS : allAdditionalDeserializers;\n  _additionalKeyDeserializers\u003d(allAdditionalKeyDeserializers \u003d\u003d null) ? DEFAULT_KEY_DESERIALIZERS : allAdditionalKeyDeserializers;\n  _modifiers\u003d(modifiers \u003d\u003d null) ? NO_MODIFIERS : modifiers;\n  _abstractTypeResolvers\u003d(atr \u003d\u003d null) ? NO_ABSTRACT_TYPE_RESOLVERS : atr;\n  _valueInstantiators\u003d(vi \u003d\u003d null) ? NO_VALUE_INSTANTIATORS : vi;\n}",
    "begin_line": 78,
    "end_line": 91,
    "comment": "/** \n * Copy-constructor that will create an instance that contains defined set of additional deserializer providers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAdditionalDeserializers#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "public DeserializerFactoryConfig withAdditionalDeserializers(Deserializers additional){\n  if (additional \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null Deserializers\");\n  }\n  Deserializers[] all\u003dArrayBuilders.insertInListNoDup(_additionalDeserializers,additional);\n  return new DeserializerFactoryConfig(all,_additionalKeyDeserializers,_modifiers,_abstractTypeResolvers,_valueInstantiators);\n}",
    "begin_line": 99,
    "end_line": 107,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same deserializer providers as this instance, plus one specified as argument. Additional provider will be added before existing ones, meaning it has priority over existing definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAdditionalKeyDeserializers#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "public DeserializerFactoryConfig withAdditionalKeyDeserializers(KeyDeserializers additional){\n  if (additional \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null KeyDeserializers\");\n  }\n  KeyDeserializers[] all\u003dArrayBuilders.insertInListNoDup(_additionalKeyDeserializers,additional);\n  return new DeserializerFactoryConfig(_additionalDeserializers,all,_modifiers,_abstractTypeResolvers,_valueInstantiators);\n}",
    "begin_line": 115,
    "end_line": 123,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same key deserializer providers as this instance, plus one specified as argument. Additional provider will be added before existing ones, meaning it has priority over existing definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withDeserializerModifier#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "public DeserializerFactoryConfig withDeserializerModifier(BeanDeserializerModifier modifier){\n  if (modifier \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null modifier\");\n  }\n  BeanDeserializerModifier[] all\u003dArrayBuilders.insertInListNoDup(_modifiers,modifier);\n  return new DeserializerFactoryConfig(_additionalDeserializers,_additionalKeyDeserializers,all,_abstractTypeResolvers,_valueInstantiators);\n}",
    "begin_line": 131,
    "end_line": 139,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus one additional deserialiazer modifier. Added modifier has the highest priority (that is, it gets called before any already registered modifier).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withAbstractTypeResolver#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "public DeserializerFactoryConfig withAbstractTypeResolver(AbstractTypeResolver resolver){\n  if (resolver \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null resolver\");\n  }\n  AbstractTypeResolver[] all\u003dArrayBuilders.insertInListNoDup(_abstractTypeResolvers,resolver);\n  return new DeserializerFactoryConfig(_additionalDeserializers,_additionalKeyDeserializers,_modifiers,all,_valueInstantiators);\n}",
    "begin_line": 148,
    "end_line": 156,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus one additional abstract type resolver. Added resolver has the highest priority (that is, it gets called before any already registered resolver).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.withValueInstantiators#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "public DeserializerFactoryConfig withValueInstantiators(ValueInstantiators instantiators){\n  if (instantiators \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null resolver\");\n  }\n  ValueInstantiators[] all\u003dArrayBuilders.insertInListNoDup(_valueInstantiators,instantiators);\n  return new DeserializerFactoryConfig(_additionalDeserializers,_additionalKeyDeserializers,_modifiers,_abstractTypeResolvers,all);\n}",
    "begin_line": 168,
    "end_line": 176,
    "comment": "/** \n * Fluent/factory method used to construct a configuration object that has same configuration as this instance plus specified additional value instantiator provider object. Added instantiator provider has the highest priority (that is, it gets called before any already registered resolver).\n * @param instantiators Object that can provide {@link com.fasterxml.jackson.databind.deser.ValueInstantiator}s for constructing POJO values during deserialization\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasDeserializers#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasDeserializers()",
    "snippet": "public boolean hasDeserializers(){\n  return _additionalDeserializers.length \u003e 0;\n}",
    "begin_line": 178,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasKeyDeserializers#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasKeyDeserializers()",
    "snippet": "public boolean hasKeyDeserializers(){\n  return _additionalKeyDeserializers.length \u003e 0;\n}",
    "begin_line": 180,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasDeserializerModifiers#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasDeserializerModifiers()",
    "snippet": "public boolean hasDeserializerModifiers(){\n  return _modifiers.length \u003e 0;\n}",
    "begin_line": 182,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasAbstractTypeResolvers#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasAbstractTypeResolvers()",
    "snippet": "public boolean hasAbstractTypeResolvers(){\n  return _abstractTypeResolvers.length \u003e 0;\n}",
    "begin_line": 184,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.hasValueInstantiators#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.hasValueInstantiators()",
    "snippet": "public boolean hasValueInstantiators(){\n  return _valueInstantiators.length \u003e 0;\n}",
    "begin_line": 186,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.deserializers#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.deserializers()",
    "snippet": "public Iterable\u003cDeserializers\u003e deserializers(){\n  return new ArrayIterator\u003cDeserializers\u003e(_additionalDeserializers);\n}",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.keyDeserializers#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.keyDeserializers()",
    "snippet": "public Iterable\u003cKeyDeserializers\u003e keyDeserializers(){\n  return new ArrayIterator\u003cKeyDeserializers\u003e(_additionalKeyDeserializers);\n}",
    "begin_line": 192,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.deserializerModifiers#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.deserializerModifiers()",
    "snippet": "public Iterable\u003cBeanDeserializerModifier\u003e deserializerModifiers(){\n  return new ArrayIterator\u003cBeanDeserializerModifier\u003e(_modifiers);\n}",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.abstractTypeResolvers#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.abstractTypeResolvers()",
    "snippet": "public Iterable\u003cAbstractTypeResolver\u003e abstractTypeResolvers(){\n  return new ArrayIterator\u003cAbstractTypeResolver\u003e(_abstractTypeResolvers);\n}",
    "begin_line": 200,
    "end_line": 202,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactoryConfig.valueInstantiators#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/DeserializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig.valueInstantiators()",
    "snippet": "public Iterable\u003cValueInstantiators\u003e valueInstantiators(){\n  return new ArrayIterator\u003cValueInstantiators\u003e(_valueInstantiators);\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.BaseSettings, int)",
    "snippet": "protected MapperConfig(BaseSettings base,int mapperFeatures){\n  _base\u003dbase;\n  _mapperFeatures\u003dmapperFeatures;\n}",
    "begin_line": 68,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e, int)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src,int mapperFeatures){\n  _base\u003dsrc._base;\n  _mapperFeatures\u003dmapperFeatures;\n}",
    "begin_line": 74,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src,BaseSettings base){\n  _base\u003dbase;\n  _mapperFeatures\u003dsrc._mapperFeatures;\n}",
    "begin_line": 80,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.MapperConfig#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.MapperConfig(com.fasterxml.jackson.databind.cfg.MapperConfig\u003cT\u003e)",
    "snippet": "protected MapperConfig(MapperConfig\u003cT\u003e src){\n  _base\u003dsrc._base;\n  _mapperFeatures\u003dsrc._mapperFeatures;\n}",
    "begin_line": 86,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.collectFeatureDefaults#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.collectFeatureDefaults(java.lang.Class\u003cF\u003e)",
    "snippet": "public static \u003cF extends Enum\u003cF\u003e \u0026 ConfigFeature\u003eint collectFeatureDefaults(Class\u003cF\u003e enumClass){\n  int flags\u003d0;\n  for (  F value : enumClass.getEnumConstants()) {\n    if (value.enabledByDefault()) {\n      flags|\u003dvalue.getMask();\n    }\n  }\n  return flags;\n}",
    "begin_line": 96,
    "end_line": 105,
    "comment": "/** \n * Method that calculates bit set (flags) of all features that are enabled by default.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.with#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract T with(MapperFeature... features);",
    "begin_line": 117,
    "end_line": 117,
    "comment": "/** \n * Method for constructing and returning a new instance with specified mapper features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.without#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.without(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public abstract T without(MapperFeature... features);",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Method for constructing and returning a new instance with specified mapper features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.with#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.with(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "public abstract T with(MapperFeature feature,boolean state);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.isEnabled#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.isEnabled(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "public final boolean isEnabled(MapperFeature f){\n  return (_mapperFeatures \u0026 f.getMask()) !\u003d 0;\n}",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Accessor for simple mapper features (which are shared for serialization, deserialization)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.hasMapperFeatures#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.hasMapperFeatures(int)",
    "snippet": "public final boolean hasMapperFeatures(int featureMask){\n  return (_mapperFeatures \u0026 featureMask) \u003d\u003d featureMask;\n}",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * \"Bulk\" access method for checking that all features specified by mask are enabled.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.isAnnotationProcessingEnabled#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.isAnnotationProcessingEnabled()",
    "snippet": "public final boolean isAnnotationProcessingEnabled(){\n  return isEnabled(MapperFeature.USE_ANNOTATIONS);\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "/** \n * Method for determining whether annotation processing is enabled or not (default settings are typically that it is enabled; must explicitly disable).\n * @return True if annotation processing is enabled; false if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.canOverrideAccessModifiers#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.canOverrideAccessModifiers()",
    "snippet": "public final boolean canOverrideAccessModifiers(){\n  return isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS);\n}",
    "begin_line": 175,
    "end_line": 177,
    "comment": "/** \n * Accessor for determining whether it is ok to try to force override of access modifiers to be able to get or set values of non-public Methods, Fields; to invoke non-public Constructors, Methods; or to instantiate non-public Classes. By default this is enabled, but on some platforms it needs to be prevented since if this would violate security constraints and cause failures.\n * @return True if access modifier overriding is allowed (and may be done forany Field, Method, Constructor or Class); false to prevent any attempts to override.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.shouldSortPropertiesAlphabetically#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.shouldSortPropertiesAlphabetically()",
    "snippet": "public final boolean shouldSortPropertiesAlphabetically(){\n  return isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "/** \n * Accessor for checking whether default settings for property handling indicate that properties should be alphabetically ordered or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.useRootWrapping#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.useRootWrapping()",
    "snippet": "public abstract boolean useRootWrapping();",
    "begin_line": 192,
    "end_line": 192,
    "comment": "/** \n * Accessor for checking whether configuration indicates that \"root wrapping\" (use of an extra property/name pair at root level) is expected or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.compileString#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.compileString(java.lang.String)",
    "snippet": "public SerializableString compileString(String src){\n  return new SerializedString(src);\n}",
    "begin_line": 211,
    "end_line": 217,
    "comment": "/** \n * Method for constructing a specialized textual object that can typically be serialized faster than basic  {@link java.lang.String} (dependingon escaping needed if any, char-to-byte encoding if needed).\n * @param src Text to represent\n * @return Optimized text object constructed\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getClassIntrospector#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getClassIntrospector()",
    "snippet": "public ClassIntrospector getClassIntrospector(){\n  return _base.getClassIntrospector();\n}",
    "begin_line": 225,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getAnnotationIntrospector#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getAnnotationIntrospector()",
    "snippet": "public AnnotationIntrospector getAnnotationIntrospector(){\n  if (isEnabled(MapperFeature.USE_ANNOTATIONS)) {\n    return _base.getAnnotationIntrospector();\n  }\n  return NopAnnotationIntrospector.instance;\n}",
    "begin_line": 235,
    "end_line": 240,
    "comment": "/** \n * Method for getting  {@link AnnotationIntrospector} configuredto introspect annotation values used for configuration. \u003cp\u003e Non-final since it is actually overridden by sub-classes (for now?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getPropertyNamingStrategy#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getPropertyNamingStrategy()",
    "snippet": "public final PropertyNamingStrategy getPropertyNamingStrategy(){\n  return _base.getPropertyNamingStrategy();\n}",
    "begin_line": 242,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getHandlerInstantiator#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getHandlerInstantiator()",
    "snippet": "public final HandlerInstantiator getHandlerInstantiator(){\n  return _base.getHandlerInstantiator();\n}",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultTyper#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultTyper(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final TypeResolverBuilder\u003c?\u003e getDefaultTyper(JavaType baseType){\n  return _base.getTypeResolverBuilder();\n}",
    "begin_line": 262,
    "end_line": 264,
    "comment": "/** \n * Method called to locate a type info handler for types that do not have one explicitly declared via annotations (or other configuration). If such default handler is configured, it is returned; otherwise null is returned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getSubtypeResolver#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getSubtypeResolver()",
    "snippet": "public abstract SubtypeResolver getSubtypeResolver();",
    "begin_line": 266,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getTypeFactory#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getTypeFactory()",
    "snippet": "public final TypeFactory getTypeFactory(){\n  return _base.getTypeFactory();\n}",
    "begin_line": 268,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructType#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(java.lang.Class\u003c?\u003e)",
    "snippet": "public final JavaType constructType(Class\u003c?\u003e cls){\n  return getTypeFactory().constructType(cls);\n}",
    "begin_line": 280,
    "end_line": 282,
    "comment": "/** \n * Helper method that will construct  {@link JavaType} for givenraw class. This is a simple short-cut for: \u003cpre\u003e getTypeFactory().constructType(cls); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructType#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructType(TypeReference\u003c?\u003e)",
    "snippet": "public final JavaType constructType(TypeReference\u003c?\u003e valueTypeRef){\n  return getTypeFactory().constructType(valueTypeRef.getType());\n}",
    "begin_line": 292,
    "end_line": 294,
    "comment": "/** \n * Helper method that will construct  {@link JavaType} for giventype reference This is a simple short-cut for: \u003cpre\u003e getTypeFactory().constructType(valueTypeRef); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.constructSpecializedType#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType,Class\u003c?\u003e subclass){\n  return getTypeFactory().constructSpecializedType(baseType,subclass);\n}",
    "begin_line": 296,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectClassAnnotations#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public BeanDescription introspectClassAnnotations(Class\u003c?\u003e cls){\n  return introspectClassAnnotations(constructType(cls));\n}",
    "begin_line": 310,
    "end_line": 312,
    "comment": "/** \n * Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectClassAnnotations#318",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectClassAnnotations(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public BeanDescription introspectClassAnnotations(JavaType type){\n  return getClassIntrospector().forClassAnnotations(this,type,this);\n}",
    "begin_line": 318,
    "end_line": 320,
    "comment": "/** \n * Accessor for getting bean description that only contains class annotations: useful if no getter/setter/creator information is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectDirectClassAnnotations#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public BeanDescription introspectDirectClassAnnotations(Class\u003c?\u003e cls){\n  return introspectDirectClassAnnotations(constructType(cls));\n}",
    "begin_line": 327,
    "end_line": 329,
    "comment": "/** \n * Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.introspectDirectClassAnnotations#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.introspectDirectClassAnnotations(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public final BeanDescription introspectDirectClassAnnotations(JavaType type){\n  return getClassIntrospector().forDirectClassAnnotations(this,type,this);\n}",
    "begin_line": 336,
    "end_line": 338,
    "comment": "/** \n * Accessor for getting bean description that only contains immediate class annotations: ones from the class, and its direct mix-in, if any, but not from super types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findConfigOverride#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract ConfigOverride findConfigOverride(Class\u003c?\u003e type);",
    "begin_line": 357,
    "end_line": 357,
    "comment": "/** \n * Accessor for finding  {@link ConfigOverride} to use forproperties of given type, if any exist; or return `null` if not. \u003cp\u003e Note that only directly associated override is found; no type hierarchy traversal is performed.\n * @since 2.8\n * @return Override object to use for the type, if defined; null if none.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getConfigOverride#371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract ConfigOverride getConfigOverride(Class\u003c?\u003e type);",
    "begin_line": 371,
    "end_line": 371,
    "comment": "/** \n * Accessor for finding  {@link ConfigOverride} to use forproperties of given type, if any exist; or if none, return an immutable \"empty\" instance with no overrides. \u003cp\u003e Note that only directly associated override is found; no type hierarchy traversal is performed.\n * @since 2.9\n * @return Override object to use for the type, never null (but may be empty)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion()",
    "snippet": "public abstract JsonInclude.Value getDefaultPropertyInclusion();",
    "begin_line": 379,
    "end_line": 379,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, used unless overridden by per-type or per-property overrides.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType);",
    "begin_line": 389,
    "end_line": 389,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type.\u003cbr\u003e NOTE: if no override found, defaults to value returned by {@link #getDefaultPropertyInclusion()}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyInclusion#400",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e, JsonInclude.Value)",
    "snippet": "public JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType,JsonInclude.Value defaultIncl){\n  JsonInclude.Value v\u003dgetConfigOverride(baseType).getInclude();\n  if (v !\u003d null) {\n    return v;\n  }\n  return defaultIncl;\n}",
    "begin_line": 400,
    "end_line": 408,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type; but if none found, returning given \u003ccode\u003edefaultIncl\u003c/code\u003e\n * @param defaultIncl Inclusion setting to return if no overrides found.\n * @since 2.8.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultInclusion#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonInclude.Value getDefaultInclusion(Class\u003c?\u003e baseType,Class\u003c?\u003e propertyType);",
    "begin_line": 422,
    "end_line": 423,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type and possible per-type override for given property type.\u003cbr\u003e NOTE: if no override found, defaults to value returned by {@link #getDefaultPropertyInclusion()}.\n * @param baseType Type of the instance containing the targeted property.\n * @param propertyType Type of the property to look up inclusion setting for.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultInclusion#437",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultInclusion(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, JsonInclude.Value)",
    "snippet": "public JsonInclude.Value getDefaultInclusion(Class\u003c?\u003e baseType,Class\u003c?\u003e propertyType,JsonInclude.Value defaultIncl){\n  JsonInclude.Value baseOverride\u003dgetConfigOverride(baseType).getInclude();\n  JsonInclude.Value propOverride\u003dgetConfigOverride(propertyType).getIncludeAsProperty();\n  JsonInclude.Value result\u003dJsonInclude.Value.mergeAll(defaultIncl,baseOverride,propOverride);\n  return result;\n}",
    "begin_line": 437,
    "end_line": 445,
    "comment": "/** \n * Accessor for default property inclusion to use for serialization, considering possible per-type override for given base type and possible per-type override for given property type; but if none found, returning given \u003ccode\u003edefaultIncl\u003c/code\u003e\n * @param baseType Type of the instance containing the targeted property.\n * @param propertyType Type of the property to look up inclusion setting for.\n * @param defaultIncl Inclusion setting to return if no overrides found.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyFormat#454",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e baseType);",
    "begin_line": 454,
    "end_line": 454,
    "comment": "/** \n * Accessor for default format settings to use for serialization (and, to a degree deserialization), considering baseline settings and per-type defaults for given base type (if any).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyIgnorals#462",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType);",
    "begin_line": 462,
    "end_line": 462,
    "comment": "/** \n * Accessor for default property ignorals to use, if any, for given base type, based on config overrides settings (see  {@link #findConfigOverride(Class)}).\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultPropertyIgnorals#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public abstract JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType,AnnotatedClass actualClass);",
    "begin_line": 472,
    "end_line": 473,
    "comment": "/** \n * Helper method that may be called to see if there are property ignoral definitions from annotations (via  {@link AnnotatedClass}) or through \"config overrides\". If both exist, config overrides have precedence over class annotations.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultVisibilityChecker#484",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker()",
    "snippet": "public abstract VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker();",
    "begin_line": 484,
    "end_line": 484,
    "comment": "/** \n * Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). Can be changed to allow different minimum visibility levels for auto-detection. Note that this is the global handler; individual types (classes) can further override active checker used (using {@link JsonAutoDetect} annotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultVisibilityChecker#496",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultVisibilityChecker(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public abstract VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker(Class\u003c?\u003e baseType,AnnotatedClass actualClass);",
    "begin_line": 496,
    "end_line": 497,
    "comment": "/** \n * Accessor for object used for determining whether specific property elements (method, constructors, fields) can be auto-detected based on their visibility (access modifiers). This is based on global defaults (as would be returned by  {@link #getDefaultVisibilityChecker()}, but then modified by possible class annotation (see  {@link JsonAutoDetect}) and/or per-type config override (see  {@link ConfigOverride#getVisibility()}).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultSetterInfo#507",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultSetterInfo()",
    "snippet": "public abstract JsonSetter.Value getDefaultSetterInfo();",
    "begin_line": 507,
    "end_line": 507,
    "comment": "/** \n * Accessor for the baseline setter info used as the global baseline, not considering possible per-type overrides.\n * @return Global base settings; never null\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultMergeable#517",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable()",
    "snippet": "public abstract Boolean getDefaultMergeable();",
    "begin_line": 517,
    "end_line": 517,
    "comment": "/** \n * Accessor for the baseline merge info used as the global baseline, not considering possible per-type overrides.\n * @return Global base settings, if any; `null` if none.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDefaultMergeable#529",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDefaultMergeable(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract Boolean getDefaultMergeable(Class\u003c?\u003e baseType);",
    "begin_line": 529,
    "end_line": 529,
    "comment": "/** \n * Accessor for the baseline merge info used for given type, including global defaults if no type-specific overrides defined.\n * @return Type-specific settings (if any); global defaults (same as{@link #getDefaultMergeable()}) otherwise, if any defined; or `null` if neither defined\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getDateFormat#553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getDateFormat()",
    "snippet": "public final DateFormat getDateFormat(){\n  return _base.getDateFormat();\n}",
    "begin_line": 553,
    "end_line": 553,
    "comment": "/** \n * Method for accessing currently configured (textual) date format that will be used for reading or writing date values (in case of writing, only if textual output is configured; not if dates are to be serialized as time stamps). \u003cp\u003e Note that typically  {@link DateFormat} instances are \u003cb\u003enot thread-safe\u003c/b\u003e(at least ones provided by JDK): this means that calling code should clone format instance before using it. \u003cp\u003e This method is usually only called by framework itself, since there are convenience methods available via {@link DeserializationContext} and {@link SerializerProvider} thattake care of cloning and thread-safe reuse.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getLocale#560",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getLocale()",
    "snippet": "public final Locale getLocale(){\n  return _base.getLocale();\n}",
    "begin_line": 560,
    "end_line": 560,
    "comment": "/** \n * Method for accessing the default  {@link java.util.Locale} to usefor formatting, unless overridden by local annotations. Initially set to  {@link Locale#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getTimeZone#567",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getTimeZone()",
    "snippet": "public final TimeZone getTimeZone(){\n  return _base.getTimeZone();\n}",
    "begin_line": 567,
    "end_line": 567,
    "comment": "/** \n * Method for accessing the default  {@link java.util.TimeZone} to usefor formatting, unless overridden by local annotations. Initially set to  {@link TimeZone#getDefault()}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getActiveView#572",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getActiveView()",
    "snippet": "public abstract Class\u003c?\u003e getActiveView();",
    "begin_line": 572,
    "end_line": 572,
    "comment": "/** \n * Accessor for finding currently active view, if any (null if none)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getBase64Variant#581",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getBase64Variant()",
    "snippet": "public Base64Variant getBase64Variant(){\n  return _base.getBase64Variant();\n}",
    "begin_line": 581,
    "end_line": 583,
    "comment": "/** \n * Method called during deserialization if Base64 encoded content needs to be decoded. Default version just returns default Jackson uses, which is modified-mime which does not add linefeeds (because those would have to be escaped in JSON strings); but this can be configured on  {@link ObjectWriter}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.getAttributes#592",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.getAttributes()",
    "snippet": "public abstract ContextAttributes getAttributes();",
    "begin_line": 592,
    "end_line": 592,
    "comment": "/** \n * Method for accessing per-instance shared (baseline/default) attribute values; these are used as the basis for per-call attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findRootName#597",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract PropertyName findRootName(JavaType rootType);",
    "begin_line": 597,
    "end_line": 597,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.findRootName#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.findRootName(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract PropertyName findRootName(Class\u003c?\u003e rawRootType);",
    "begin_line": 602,
    "end_line": 602,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.typeResolverBuilderInstance#614",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.typeResolverBuilderInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e\u003e)",
    "snippet": "public TypeResolverBuilder\u003c?\u003e typeResolverBuilderInstance(Annotated annotated,Class\u003c? extends TypeResolverBuilder\u003c?\u003e\u003e builderClass){\n  HandlerInstantiator hi\u003dgetHandlerInstantiator();\n  if (hi !\u003d null) {\n    TypeResolverBuilder\u003c?\u003e builder\u003dhi.typeResolverBuilderInstance(this,annotated,builderClass);\n    if (builder !\u003d null) {\n      return builder;\n    }\n  }\n  return (TypeResolverBuilder\u003c?\u003e)ClassUtil.createInstance(builderClass,canOverrideAccessModifiers());\n}",
    "begin_line": 614,
    "end_line": 625,
    "comment": "/** \n * Method that can be called to obtain an instance of \u003ccode\u003eTypeIdResolver\u003c/code\u003e of specified type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfig.typeIdResolverInstance#631",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfig.typeIdResolverInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Class\u003c? extends com.fasterxml.jackson.databind.jsontype.TypeIdResolver\u003e)",
    "snippet": "public TypeIdResolver typeIdResolverInstance(Annotated annotated,Class\u003c? extends TypeIdResolver\u003e resolverClass){\n  HandlerInstantiator hi\u003dgetHandlerInstantiator();\n  if (hi !\u003d null) {\n    TypeIdResolver builder\u003dhi.typeIdResolverInstance(this,annotated,resolverClass);\n    if (builder !\u003d null) {\n      return builder;\n    }\n  }\n  return (TypeIdResolver)ClassUtil.createInstance(resolverClass,canOverrideAccessModifiers());\n}",
    "begin_line": 631,
    "end_line": 642,
    "comment": "/** \n * Method that can be called to obtain an instance of \u003ccode\u003eTypeIdResolver\u003c/code\u003e of specified type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.BaseSettings, com.fasterxml.jackson.databind.jsontype.SubtypeResolver, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected MapperConfigBase(BaseSettings base,SubtypeResolver str,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(base,DEFAULT_MAPPER_FEATURES);\n  _mixIns\u003dmixins;\n  _subtypeResolver\u003dstr;\n  _rootNames\u003drootNames;\n  _rootName\u003dnull;\n  _view\u003dnull;\n  _attributes\u003dContextAttributes.getEmpty();\n  _configOverrides\u003dconfigOverrides;\n}",
    "begin_line": 121,
    "end_line": 134,
    "comment": "/** \n * Constructor used when creating a new instance (compared to that of creating fluent copies)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver, com.fasterxml.jackson.databind.util.RootNameLookup, com.fasterxml.jackson.databind.cfg.ConfigOverrides)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,SimpleMixInResolver mixins,RootNameLookup rootNames,ConfigOverrides configOverrides){\n  super(src,src._base.copy());\n  _mixIns\u003dmixins;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003drootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dconfigOverrides;\n}",
    "begin_line": 142,
    "end_line": 156,
    "comment": "/** \n * Copy constructor usually called to make a copy for use by ObjectMapper that is copied.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src){\n  super(src);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 162,
    "end_line": 172,
    "comment": "/** \n * Pass-through constructor used when no changes are needed to the base class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,BaseSettings base){\n  super(src,base);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 174,
    "end_line": 184,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, int)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,int mapperFeatures){\n  super(src,mapperFeatures);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 186,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,SubtypeResolver str){\n  super(src);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dstr;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 198,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,PropertyName rootName){\n  super(src);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003drootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 209,
    "end_line": 218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,Class\u003c?\u003e view){\n  super(src);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dview;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 220,
    "end_line": 230,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.introspect.SimpleMixInResolver)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,SimpleMixInResolver mixins){\n  super(src);\n  _mixIns\u003dmixins;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dsrc._attributes;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 235,
    "end_line": 245,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.MapperConfigBase#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.MapperConfigBase(com.fasterxml.jackson.databind.cfg.MapperConfigBase\u003cCFG,T\u003e, com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "protected MapperConfigBase(MapperConfigBase\u003cCFG,T\u003e src,ContextAttributes attr){\n  super(src);\n  _mixIns\u003dsrc._mixIns;\n  _subtypeResolver\u003dsrc._subtypeResolver;\n  _rootNames\u003dsrc._rootNames;\n  _rootName\u003dsrc._rootName;\n  _view\u003dsrc._view;\n  _attributes\u003dattr;\n  _configOverrides\u003dsrc._configOverrides;\n}",
    "begin_line": 250,
    "end_line": 260,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase._withBase#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase._withBase(com.fasterxml.jackson.databind.cfg.BaseSettings)",
    "snippet": "protected abstract T _withBase(BaseSettings newBase);",
    "begin_line": 271,
    "end_line": 271,
    "comment": "/** \n * @since 2.9 (in this case, demoted from sub-classes)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase._withMapperFeatures#276",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase._withMapperFeatures(int)",
    "snippet": "protected abstract T _withMapperFeatures(int mapperFeatures);",
    "begin_line": 276,
    "end_line": 276,
    "comment": "/** \n * @since 2.9 (in this case, demoted from sub-classes)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public final T with(MapperFeature... features){\n  int newMapperFlags\u003d_mapperFeatures;\n  for (  MapperFeature f : features) {\n    newMapperFlags|\u003df.getMask();\n  }\n  if (newMapperFlags \u003d\u003d _mapperFeatures) {\n    return (T)this;\n  }\n  return _withMapperFeatures(newMapperFlags);\n}",
    "begin_line": 290,
    "end_line": 300,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.without#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.without(com.fasterxml.jackson.databind.MapperFeature)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public final T without(MapperFeature... features){\n  int newMapperFlags\u003d_mapperFeatures;\n  for (  MapperFeature f : features) {\n    newMapperFlags\u0026\u003d~f.getMask();\n  }\n  if (newMapperFlags \u003d\u003d _mapperFeatures) {\n    return (T)this;\n  }\n  return _withMapperFeatures(newMapperFlags);\n}",
    "begin_line": 308,
    "end_line": 318,
    "comment": "/** \n * Fluent factory method that will construct and return a new configuration object instance with specified features disabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#322",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.MapperFeature, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public final T with(MapperFeature feature,boolean state){\n  int newMapperFlags;\n  if (state) {\n    newMapperFlags\u003d_mapperFeatures | feature.getMask();\n  }\n else {\n    newMapperFlags\u003d_mapperFeatures \u0026 ~feature.getMask();\n  }\n  if (newMapperFlags \u003d\u003d _mapperFeatures) {\n    return (T)this;\n  }\n  return _withMapperFeatures(newMapperFlags);\n}",
    "begin_line": 322,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T with(AnnotationIntrospector ai){\n  return _withBase(_base.withAnnotationIntrospector(ai));\n}",
    "begin_line": 349,
    "end_line": 351,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link AnnotationIntrospector} to use (replacing old one).\u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAppendedAnnotationIntrospector#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAppendedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T withAppendedAnnotationIntrospector(AnnotationIntrospector ai){\n  return _withBase(_base.withAppendedAnnotationIntrospector(ai));\n}",
    "begin_line": 357,
    "end_line": 359,
    "comment": "/** \n * Method for constructing and returning a new instance with additional {@link AnnotationIntrospector} appended (as the lowest priority one)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withInsertedAnnotationIntrospector#365",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withInsertedAnnotationIntrospector(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "public final T withInsertedAnnotationIntrospector(AnnotationIntrospector ai){\n  return _withBase(_base.withInsertedAnnotationIntrospector(ai));\n}",
    "begin_line": 365,
    "end_line": 367,
    "comment": "/** \n * Method for constructing and returning a new instance with additional {@link AnnotationIntrospector} inserted (as the highest priority one)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#377",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.introspect.ClassIntrospector)",
    "snippet": "public final T with(ClassIntrospector ci){\n  return _withBase(_base.withClassIntrospector(ci));\n}",
    "begin_line": 377,
    "end_line": 379,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link ClassIntrospector}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.cfg.ContextAttributes)",
    "snippet": "public abstract T with(ContextAttributes attrs);",
    "begin_line": 393,
    "end_line": 393,
    "comment": "/** \n * Method for constructing an instance that has specified contextual attributes.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAttributes#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAttributes(java.util.Map\u003c?,?\u003e)",
    "snippet": "public T withAttributes(Map\u003c?,?\u003e attributes){\n  return with(getAttributes().withSharedAttributes(attributes));\n}",
    "begin_line": 401,
    "end_line": 403,
    "comment": "/** \n * Method for constructing an instance that has only specified attributes, removing any attributes that exist before the call.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withAttribute#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withAttribute(java.lang.Object, java.lang.Object)",
    "snippet": "public T withAttribute(Object key,Object value){\n  return with(getAttributes().withSharedAttribute(key,value));\n}",
    "begin_line": 411,
    "end_line": 413,
    "comment": "/** \n * Method for constructing an instance that has specified value for attribute for given key.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withoutAttribute#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withoutAttribute(java.lang.Object)",
    "snippet": "public T withoutAttribute(Object key){\n  return with(getAttributes().withoutSharedAttribute(key));\n}",
    "begin_line": 421,
    "end_line": 423,
    "comment": "/** \n * Method for constructing an instance that has no value for attribute for given key.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#436",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public final T with(TypeFactory tf){\n  return _withBase(_base.withTypeFactory(tf));\n}",
    "begin_line": 436,
    "end_line": 438,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link TypeFactory}to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#444",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder\u003c?\u003e)",
    "snippet": "public final T with(TypeResolverBuilder\u003c?\u003e trb){\n  return _withBase(_base.withTypeResolverBuilder(trb));\n}",
    "begin_line": 444,
    "end_line": 446,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link TypeResolverBuilder} to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "public final T with(PropertyNamingStrategy pns){\n  return _withBase(_base.withPropertyNamingStrategy(pns));\n}",
    "begin_line": 456,
    "end_line": 458,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link PropertyNamingStrategy}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#468",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.cfg.HandlerInstantiator)",
    "snippet": "public final T with(HandlerInstantiator hi){\n  return _withBase(_base.withHandlerInstantiator(hi));\n}",
    "begin_line": 468,
    "end_line": 470,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link HandlerInstantiator}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#482",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(Base64Variant)",
    "snippet": "public final T with(Base64Variant base64){\n  return _withBase(_base.with(base64));\n}",
    "begin_line": 482,
    "end_line": 484,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link Base64Variant} to use with base64-encoded binary values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#493",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.text.DateFormat)",
    "snippet": "public T with(DateFormat df){\n  return _withBase(_base.withDateFormat(df));\n}",
    "begin_line": 493,
    "end_line": 495,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link DateFormat}to use. \u003cp\u003e NOTE: non-final since \u003ccode\u003eSerializationConfig\u003c/code\u003e needs to override this\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#501",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.util.Locale)",
    "snippet": "public final T with(Locale l){\n  return _withBase(_base.with(l));\n}",
    "begin_line": 501,
    "end_line": 503,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link java.util.Locale} to use for formatting.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#509",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(java.util.TimeZone)",
    "snippet": "public final T with(TimeZone tz){\n  return _withBase(_base.with(tz));\n}",
    "begin_line": 509,
    "end_line": 511,
    "comment": "/** \n * Method for constructing and returning a new instance with different default  {@link java.util.TimeZone} to use for formatting of date values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withRootName#529",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withRootName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public abstract T withRootName(PropertyName rootName);",
    "begin_line": 529,
    "end_line": 529,
    "comment": "/** \n * Method for constructing and returning a new instance with different root name to use (none, if null). \u003cp\u003e Note that when a root name is set to a non-Empty String, this will automatically force use of root element wrapping with given name. If empty String passed, will disable root name wrapping; and if null used, will instead use \u003ccode\u003eSerializationFeature\u003c/code\u003e to determine if to use wrapping, and annotation (or default name) for actual root name to use.\n * @param rootName to use: if null, means \"use default\" (clear setting);if empty String (\"\") means that no root name wrapping is used; otherwise defines root name to use.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withRootName#531",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withRootName(java.lang.String)",
    "snippet": "public T withRootName(String rootName){\n  if (rootName \u003d\u003d null) {\n    return withRootName((PropertyName)null);\n  }\n  return withRootName(PropertyName.construct(rootName));\n}",
    "begin_line": 531,
    "end_line": 536,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.with#546",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.with(com.fasterxml.jackson.databind.jsontype.SubtypeResolver)",
    "snippet": "public abstract T with(SubtypeResolver str);",
    "begin_line": 546,
    "end_line": 546,
    "comment": "/** \n * Method for constructing and returning a new instance with different {@link SubtypeResolver}to use. \u003cp\u003e NOTE: make sure to register new instance with \u003ccode\u003eObjectMapper\u003c/code\u003e if directly calling this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.withView#552",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.withView(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract T withView(Class\u003c?\u003e view);",
    "begin_line": 552,
    "end_line": 552,
    "comment": "/** \n * Method for constructing and returning a new instance with different view to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getSubtypeResolver#566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getSubtypeResolver()",
    "snippet": "@Override public final SubtypeResolver getSubtypeResolver(){\n  return _subtypeResolver;\n}",
    "begin_line": 566,
    "end_line": 568,
    "comment": "/** \n * Accessor for object used for finding out all reachable subtypes for supertypes; needed when a logical type name is used instead of class name (or custom scheme).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getRootName#574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getRootName()",
    "snippet": "@Deprecated public final String getRootName(){\n  return (_rootName \u003d\u003d null) ? null : _rootName.getSimpleName();\n}",
    "begin_line": 574,
    "end_line": 576,
    "comment": "/** \n * @deprecated Since 2.6 use {@link #getFullRootName} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getFullRootName#581",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getFullRootName()",
    "snippet": "public final PropertyName getFullRootName(){\n  return _rootName;\n}",
    "begin_line": 581,
    "end_line": 583,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getActiveView#586",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getActiveView()",
    "snippet": "@Override public final Class\u003c?\u003e getActiveView(){\n  return _view;\n}",
    "begin_line": 586,
    "end_line": 588,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getAttributes#591",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getAttributes()",
    "snippet": "@Override public final ContextAttributes getAttributes(){\n  return _attributes;\n}",
    "begin_line": 591,
    "end_line": 593,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getConfigOverride#602",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final ConfigOverride getConfigOverride(Class\u003c?\u003e type){\n  ConfigOverride override\u003d_configOverrides.findOverride(type);\n  return (override \u003d\u003d null) ? EMPTY_OVERRIDE : override;\n}",
    "begin_line": 602,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findConfigOverride#608",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findConfigOverride(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final ConfigOverride findConfigOverride(Class\u003c?\u003e type){\n  return _configOverrides.findOverride(type);\n}",
    "begin_line": 608,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyInclusion#613",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyInclusion()",
    "snippet": "@Override public final JsonInclude.Value getDefaultPropertyInclusion(){\n  return _configOverrides.getDefaultInclusion();\n}",
    "begin_line": 613,
    "end_line": 615,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyInclusion#618",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyInclusion(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonInclude.Value getDefaultPropertyInclusion(Class\u003c?\u003e baseType){\n  JsonInclude.Value v\u003dgetConfigOverride(baseType).getInclude();\n  JsonInclude.Value def\u003dgetDefaultPropertyInclusion();\n  if (def \u003d\u003d null) {\n    return v;\n  }\n  return def.withOverrides(v);\n}",
    "begin_line": 618,
    "end_line": 625,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultInclusion#628",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultInclusion(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonInclude.Value getDefaultInclusion(Class\u003c?\u003e baseType,Class\u003c?\u003e propertyType){\n  JsonInclude.Value v\u003dgetConfigOverride(propertyType).getIncludeAsProperty();\n  JsonInclude.Value def\u003dgetDefaultPropertyInclusion(baseType);\n  if (def \u003d\u003d null) {\n    return v;\n  }\n  return def.withOverrides(v);\n}",
    "begin_line": 628,
    "end_line": 636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyFormat#639",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyFormat(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonFormat.Value getDefaultPropertyFormat(Class\u003c?\u003e type){\n  ConfigOverride overrides\u003d_configOverrides.findOverride(type);\n  if (overrides !\u003d null) {\n    JsonFormat.Value v\u003doverrides.getFormat();\n    if (v !\u003d null) {\n      return v;\n    }\n  }\n  return EMPTY_FORMAT;\n}",
    "begin_line": 639,
    "end_line": 648,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyIgnorals#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e type){\n  ConfigOverride overrides\u003d_configOverrides.findOverride(type);\n  if (overrides !\u003d null) {\n    JsonIgnoreProperties.Value v\u003doverrides.getIgnorals();\n    if (v !\u003d null) {\n      return v;\n    }\n  }\n  return null;\n}",
    "begin_line": 651,
    "end_line": 662,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultPropertyIgnorals#665",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultPropertyIgnorals(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public final JsonIgnoreProperties.Value getDefaultPropertyIgnorals(Class\u003c?\u003e baseType,AnnotatedClass actualClass){\n  AnnotationIntrospector intr\u003dgetAnnotationIntrospector();\n  JsonIgnoreProperties.Value base\u003d(intr \u003d\u003d null) ? null : intr.findPropertyIgnorals(actualClass);\n  JsonIgnoreProperties.Value overrides\u003dgetDefaultPropertyIgnorals(baseType);\n  return JsonIgnoreProperties.Value.merge(base,overrides);\n}",
    "begin_line": 665,
    "end_line": 673,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultVisibilityChecker#676",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker()",
    "snippet": "@Override public final VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker(){\n  VisibilityChecker\u003c?\u003e vchecker\u003d_configOverrides.getDefaultVisibility();\n  if ((_mapperFeatures \u0026 AUTO_DETECT_MASK) !\u003d AUTO_DETECT_MASK) {\n    if (!isEnabled(MapperFeature.AUTO_DETECT_FIELDS)) {\n      vchecker\u003dvchecker.withFieldVisibility(Visibility.NONE);\n    }\n    if (!isEnabled(MapperFeature.AUTO_DETECT_GETTERS)) {\n      vchecker\u003dvchecker.withGetterVisibility(Visibility.NONE);\n    }\n    if (!isEnabled(MapperFeature.AUTO_DETECT_IS_GETTERS)) {\n      vchecker\u003dvchecker.withIsGetterVisibility(Visibility.NONE);\n    }\n    if (!isEnabled(MapperFeature.AUTO_DETECT_SETTERS)) {\n      vchecker\u003dvchecker.withSetterVisibility(Visibility.NONE);\n    }\n    if (!isEnabled(MapperFeature.AUTO_DETECT_CREATORS)) {\n      vchecker\u003dvchecker.withCreatorVisibility(Visibility.NONE);\n    }\n  }\n  return vchecker;\n}",
    "begin_line": 676,
    "end_line": 699,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultVisibilityChecker#702",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultVisibilityChecker(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public final VisibilityChecker\u003c?\u003e getDefaultVisibilityChecker(Class\u003c?\u003e baseType,AnnotatedClass actualClass){\n  VisibilityChecker\u003c?\u003e vc\u003dgetDefaultVisibilityChecker();\n  AnnotationIntrospector intr\u003dgetAnnotationIntrospector();\n  if (intr !\u003d null) {\n    vc\u003dintr.findAutoDetectVisibility(actualClass,vc);\n  }\n  ConfigOverride overrides\u003d_configOverrides.findOverride(baseType);\n  if (overrides !\u003d null) {\n    vc\u003dvc.withOverrides(overrides.getVisibility());\n  }\n  return vc;\n}",
    "begin_line": 702,
    "end_line": 714,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultSetterInfo#717",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultSetterInfo()",
    "snippet": "@Override public final JsonSetter.Value getDefaultSetterInfo(){\n  return _configOverrides.getDefaultSetterInfo();\n}",
    "begin_line": 717,
    "end_line": 719,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultMergeable#722",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultMergeable()",
    "snippet": "@Override public Boolean getDefaultMergeable(){\n  return _configOverrides.getDefaultMergeable();\n}",
    "begin_line": 722,
    "end_line": 724,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.getDefaultMergeable#727",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.getDefaultMergeable(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public Boolean getDefaultMergeable(Class\u003c?\u003e baseType){\n  Boolean b;\n  ConfigOverride cfg\u003d_configOverrides.findOverride(baseType);\n  if (cfg !\u003d null) {\n    b\u003dcfg.getMergeable();\n    if (b !\u003d null) {\n      return b;\n    }\n  }\n  return _configOverrides.getDefaultMergeable();\n}",
    "begin_line": 727,
    "end_line": 737,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findRootName#746",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findRootName(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public PropertyName findRootName(JavaType rootType){\n  if (_rootName !\u003d null) {\n    return _rootName;\n  }\n  return _rootNames.findRootName(rootType,this);\n}",
    "begin_line": 746,
    "end_line": 751,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findRootName#754",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findRootName(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public PropertyName findRootName(Class\u003c?\u003e rawRootType){\n  if (_rootName !\u003d null) {\n    return _rootName;\n  }\n  return _rootNames.findRootName(rawRootType,this);\n}",
    "begin_line": 754,
    "end_line": 759,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.findMixInClassFor#772",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls){\n  return _mixIns.findMixInClassFor(cls);\n}",
    "begin_line": 772,
    "end_line": 774,
    "comment": "/** \n * Method that will check if there are \"mix-in\" classes (with mix-in annotations) for given class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.copy#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.copy()",
    "snippet": "@Override public MixInResolver copy(){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 778,
    "end_line": 780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapperConfigBase.mixInCount#786",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/MapperConfigBase.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.MapperConfigBase",
    "signature": "com.fasterxml.jackson.databind.cfg.MapperConfigBase.mixInCount()",
    "snippet": "public final int mixInCount(){\n  return _mixIns.localSize();\n}",
    "begin_line": 786,
    "end_line": 788,
    "comment": "/** \n * Test-only method -- does not reflect possibly open-ended set that external mix-in resolver might provide.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.SerializerFactoryConfig#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig()",
    "snippet": "public SerializerFactoryConfig(){\n  this(null,null,null);\n}",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.SerializerFactoryConfig#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.SerializerFactoryConfig(com.fasterxml.jackson.databind.ser.Serializers[], com.fasterxml.jackson.databind.ser.Serializers[], com.fasterxml.jackson.databind.ser.BeanSerializerModifier[])",
    "snippet": "protected SerializerFactoryConfig(Serializers[] allAdditionalSerializers,Serializers[] allAdditionalKeySerializers,BeanSerializerModifier[] modifiers){\n  _additionalSerializers\u003d(allAdditionalSerializers \u003d\u003d null) ? NO_SERIALIZERS : allAdditionalSerializers;\n  _additionalKeySerializers\u003d(allAdditionalKeySerializers \u003d\u003d null) ? NO_SERIALIZERS : allAdditionalKeySerializers;\n  _modifiers\u003d(modifiers \u003d\u003d null) ? NO_MODIFIERS : modifiers;\n}",
    "begin_line": 45,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withAdditionalSerializers#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public SerializerFactoryConfig withAdditionalSerializers(Serializers additional){\n  if (additional \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null Serializers\");\n  }\n  Serializers[] all\u003dArrayBuilders.insertInListNoDup(_additionalSerializers,additional);\n  return new SerializerFactoryConfig(all,_additionalKeySerializers,_modifiers);\n}",
    "begin_line": 56,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withAdditionalKeySerializers#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public SerializerFactoryConfig withAdditionalKeySerializers(Serializers additional){\n  if (additional \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null Serializers\");\n  }\n  Serializers[] all\u003dArrayBuilders.insertInListNoDup(_additionalKeySerializers,additional);\n  return new SerializerFactoryConfig(_additionalSerializers,all,_modifiers);\n}",
    "begin_line": 65,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.withSerializerModifier#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "public SerializerFactoryConfig withSerializerModifier(BeanSerializerModifier modifier){\n  if (modifier \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null modifier\");\n  }\n  BeanSerializerModifier[] modifiers\u003dArrayBuilders.insertInListNoDup(_modifiers,modifier);\n  return new SerializerFactoryConfig(_additionalSerializers,_additionalKeySerializers,modifiers);\n}",
    "begin_line": 74,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasSerializers#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasSerializers()",
    "snippet": "public boolean hasSerializers(){\n  return _additionalSerializers.length \u003e 0;\n}",
    "begin_line": 83,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasKeySerializers#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasKeySerializers()",
    "snippet": "public boolean hasKeySerializers(){\n  return _additionalKeySerializers.length \u003e 0;\n}",
    "begin_line": 84,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.hasSerializerModifiers#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.hasSerializerModifiers()",
    "snippet": "public boolean hasSerializerModifiers(){\n  return _modifiers.length \u003e 0;\n}",
    "begin_line": 85,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.serializers#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.serializers()",
    "snippet": "public Iterable\u003cSerializers\u003e serializers(){\n  return new ArrayIterator\u003cSerializers\u003e(_additionalSerializers);\n}",
    "begin_line": 86,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.keySerializers#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.keySerializers()",
    "snippet": "public Iterable\u003cSerializers\u003e keySerializers(){\n  return new ArrayIterator\u003cSerializers\u003e(_additionalKeySerializers);\n}",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactoryConfig.serializerModifiers#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/cfg/SerializerFactoryConfig.java",
    "class_name": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig",
    "signature": "com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig.serializerModifiers()",
    "snippet": "public Iterable\u003cBeanSerializerModifier\u003e serializerModifiers(){\n  return new ArrayIterator\u003cBeanSerializerModifier\u003e(_modifiers);\n}",
    "begin_line": 88,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.BasicDeserializerFactory#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.BasicDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "protected BasicDeserializerFactory(DeserializerFactoryConfig config){\n  _factoryConfig\u003dconfig;\n}",
    "begin_line": 114,
    "end_line": 116,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.getFactoryConfig#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.getFactoryConfig()",
    "snippet": "public DeserializerFactoryConfig getFactoryConfig(){\n  return _factoryConfig;\n}",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Method for getting current  {@link DeserializerFactoryConfig}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withConfig#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config);",
    "begin_line": 129,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAdditionalDeserializers#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "@Override public final DeserializerFactory withAdditionalDeserializers(Deserializers additional){\n  return withConfig(_factoryConfig.withAdditionalDeserializers(additional));\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional deserializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAdditionalKeyDeserializers#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "@Override public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional){\n  return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional));\n}",
    "begin_line": 151,
    "end_line": 153,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link KeyDeserializers}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withDeserializerModifier#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "@Override public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier){\n  return withConfig(_factoryConfig.withDeserializerModifier(modifier));\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link BeanDeserializerModifier}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withAbstractTypeResolver#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "@Override public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver){\n  return withConfig(_factoryConfig.withAbstractTypeResolver(resolver));\n}",
    "begin_line": 169,
    "end_line": 171,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link AbstractTypeResolver}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.withValueInstantiators#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "@Override public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators){\n  return withConfig(_factoryConfig.withValueInstantiators(instantiators));\n}",
    "begin_line": 178,
    "end_line": 180,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link ValueInstantiators}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.mapAbstractType#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.mapAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType mapAbstractType(DeserializationConfig config,JavaType type) throws JsonMappingException {\n  while (true) {\n    JavaType next\u003d_mapAbstractType2(config,type);\n    if (next \u003d\u003d null) {\n      return type;\n    }\n    Class\u003c?\u003e prevCls\u003dtype.getRawClass();\n    Class\u003c?\u003e nextCls\u003dnext.getRawClass();\n    if ((prevCls \u003d\u003d nextCls) || !prevCls.isAssignableFrom(nextCls)) {\n      throw new IllegalArgumentException(\"Invalid abstract type resolution from \" + type + \" to \"+ next+ \": latter is not a subtype of former\");\n    }\n    type\u003dnext;\n  }\n}",
    "begin_line": 189,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._mapAbstractType2#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._mapAbstractType2(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private JavaType _mapAbstractType2(DeserializationConfig config,JavaType type) throws JsonMappingException {\n  Class\u003c?\u003e currClass\u003dtype.getRawClass();\n  if (_factoryConfig.hasAbstractTypeResolvers()) {\n    for (    AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) {\n      JavaType concrete\u003dresolver.findTypeMapping(config,type);\n      if ((concrete !\u003d null) \u0026\u0026 !concrete.hasRawClass(currClass)) {\n        return concrete;\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 212,
    "end_line": 225,
    "comment": "/** \n * Method that will find abstract type mapping for specified type, doing a single lookup through registered abstract type resolvers; will not do recursive lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findValueInstantiator#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public ValueInstantiator findValueInstantiator(DeserializationContext ctxt,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  ValueInstantiator instantiator\u003dnull;\n  AnnotatedClass ac\u003dbeanDesc.getClassInfo();\n  Object instDef\u003dctxt.getAnnotationIntrospector().findValueInstantiator(ac);\n  if (instDef !\u003d null) {\n    instantiator\u003d_valueInstantiatorInstance(config,ac,instDef);\n  }\n  if (instantiator \u003d\u003d null) {\n    instantiator\u003d_findStdValueInstantiator(config,beanDesc);\n    if (instantiator \u003d\u003d null) {\n      instantiator\u003d_constructDefaultValueInstantiator(ctxt,beanDesc);\n    }\n  }\n  if (_factoryConfig.hasValueInstantiators()) {\n    for (    ValueInstantiators insts : _factoryConfig.valueInstantiators()) {\n      instantiator\u003dinsts.findValueInstantiator(config,beanDesc,instantiator);\n      if (instantiator \u003d\u003d null) {\n        ctxt.reportBadTypeDefinition(beanDesc,\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\",insts.getClass().getName());\n      }\n    }\n  }\n  if (instantiator.getIncompleteParameter() !\u003d null) {\n    final AnnotatedParameter nonAnnotatedParam\u003dinstantiator.getIncompleteParameter();\n    final AnnotatedWithParams ctor\u003dnonAnnotatedParam.getOwner();\n    throw new IllegalArgumentException(\"Argument #\" + nonAnnotatedParam.getIndex() + \" of constructor \"+ ctor+ \" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");\n  }\n  return instantiator;\n}",
    "begin_line": 239,
    "end_line": 283,
    "comment": "/** \n * Value instantiator is created both based on creator annotations, and on optional externally provided instantiators (registered through module interface).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findStdValueInstantiator#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findStdValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  Class\u003c?\u003e raw\u003dbeanDesc.getBeanClass();\n  if (raw \u003d\u003d JsonLocation.class) {\n    return new JsonLocationInstantiator();\n  }\n  if (Collection.class.isAssignableFrom(raw)) {\n    if (Collections.EMPTY_SET.getClass() \u003d\u003d raw) {\n      return new ConstantValueInstantiator(Collections.EMPTY_SET);\n    }\n    if (Collections.EMPTY_LIST.getClass() \u003d\u003d raw) {\n      return new ConstantValueInstantiator(Collections.EMPTY_LIST);\n    }\n  }\n else   if (Map.class.isAssignableFrom(raw)) {\n    if (Collections.EMPTY_MAP.getClass() \u003d\u003d raw) {\n      return new ConstantValueInstantiator(Collections.EMPTY_MAP);\n    }\n  }\n  return null;\n}",
    "begin_line": 285,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._constructDefaultValueInstantiator#313",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._constructDefaultValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,BeanDescription beanDesc) throws JsonMappingException {\n  CreatorCollector creators\u003dnew CreatorCollector(beanDesc,ctxt.getConfig());\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  final DeserializationConfig config\u003dctxt.getConfig();\n  VisibilityChecker\u003c?\u003e vchecker\u003dconfig.getDefaultVisibilityChecker(beanDesc.getBeanClass(),beanDesc.getClassInfo());\n  Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorDefs\u003d_findCreatorsFromProperties(ctxt,beanDesc);\n  _addDeserializerFactoryMethods(ctxt,beanDesc,vchecker,intr,creators,creatorDefs);\n  if (beanDesc.getType().isConcrete()) {\n    _addDeserializerConstructors(ctxt,beanDesc,vchecker,intr,creators,creatorDefs);\n  }\n  return creators.constructValueInstantiator(ctxt);\n}",
    "begin_line": 313,
    "end_line": 343,
    "comment": "/** \n * Method that will construct standard default  {@link ValueInstantiator}using annotations (like @JsonCreator) and visibility rules\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCreatorsFromProperties#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCreatorsFromProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e _findCreatorsFromProperties(DeserializationContext ctxt,BeanDescription beanDesc) throws JsonMappingException {\n  Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e result\u003dCollections.emptyMap();\n  for (  BeanPropertyDefinition propDef : beanDesc.findProperties()) {\n    Iterator\u003cAnnotatedParameter\u003e it\u003dpropDef.getConstructorParameters();\n    while (it.hasNext()) {\n      AnnotatedParameter param\u003dit.next();\n      AnnotatedWithParams owner\u003dparam.getOwner();\n      BeanPropertyDefinition[] defs\u003dresult.get(owner);\n      final int index\u003dparam.getIndex();\n      if (defs \u003d\u003d null) {\n        if (result.isEmpty()) {\n          result\u003dnew LinkedHashMap\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e();\n        }\n        defs\u003dnew BeanPropertyDefinition[owner.getParameterCount()];\n        result.put(owner,defs);\n      }\n else {\n        if (defs[index] !\u003d null) {\n          ctxt.reportBadTypeDefinition(beanDesc,\"Conflict: parameter #%d of %s bound to more than one property; %s vs %s\",index,owner,defs[index],propDef);\n        }\n      }\n      defs[index]\u003dpropDef;\n    }\n  }\n  return result;\n}",
    "begin_line": 345,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._valueInstantiatorInstance#376",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._valueInstantiatorInstance(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config,Annotated annotated,Object instDef) throws JsonMappingException {\n  if (instDef \u003d\u003d null) {\n    return null;\n  }\n  ValueInstantiator inst;\n  if (instDef instanceof ValueInstantiator) {\n    return (ValueInstantiator)instDef;\n  }\n  if (!(instDef instanceof Class)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \" + instDef.getClass().getName() + \"; expected type KeyDeserializer or Class\u003cKeyDeserializer\u003e instead\");\n  }\n  Class\u003c?\u003e instClass\u003d(Class\u003c?\u003e)instDef;\n  if (ClassUtil.isBogusClass(instClass)) {\n    return null;\n  }\n  if (!ValueInstantiator.class.isAssignableFrom(instClass)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + instClass.getName() + \"; expected Class\u003cValueInstantiator\u003e\");\n  }\n  HandlerInstantiator hi\u003dconfig.getHandlerInstantiator();\n  if (hi !\u003d null) {\n    inst\u003dhi.valueInstantiatorInstance(config,annotated,instClass);\n    if (inst !\u003d null) {\n      return inst;\n    }\n  }\n  return (ValueInstantiator)ClassUtil.createInstance(instClass,config.canOverrideAccessModifiers());\n}",
    "begin_line": 376,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addDeserializerConstructors#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addDeserializerConstructors(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]\u003e)",
    "snippet": "protected void _addDeserializerConstructors(DeserializationContext ctxt,BeanDescription beanDesc,VisibilityChecker\u003c?\u003e vchecker,AnnotationIntrospector intr,CreatorCollector creators,Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n  final boolean isNonStaticInnerClass\u003dbeanDesc.isNonStaticInnerClass();\n  if (isNonStaticInnerClass) {\n    return;\n  }\n  AnnotatedConstructor defaultCtor\u003dbeanDesc.findDefaultConstructor();\n  if (defaultCtor !\u003d null) {\n    if (!creators.hasDefaultCreator() || _hasCreatorAnnotation(ctxt,defaultCtor)) {\n      creators.setDefaultCreator(defaultCtor);\n    }\n  }\n  List\u003cCreatorCandidate\u003e nonAnnotated\u003dnew LinkedList\u003c\u003e();\n  int explCount\u003d0;\n  for (  AnnotatedConstructor ctor : beanDesc.getConstructors()) {\n    JsonCreator.Mode creatorMode\u003dintr.findCreatorAnnotation(ctxt.getConfig(),ctor);\n    if (Mode.DISABLED \u003d\u003d creatorMode) {\n      continue;\n    }\n    if (creatorMode \u003d\u003d null) {\n      if (vchecker.isCreatorVisible(ctor)) {\n        nonAnnotated.add(CreatorCandidate.construct(intr,ctor,creatorParams.get(ctor)));\n      }\n      continue;\n    }\nswitch (creatorMode) {\ncase DELEGATING:      _addExplicitDelegatingCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,ctor,null));\n    break;\ncase PROPERTIES:  _addExplicitPropertyCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,ctor,creatorParams.get(ctor)));\nbreak;\ndefault:_addExplicitAnyCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,ctor,creatorParams.get(ctor)));\nbreak;\n}\n++explCount;\n}\nif (explCount \u003e 0) {\nreturn;\n}\nList\u003cAnnotatedWithParams\u003e implicitCtors\u003dnull;\nfor (CreatorCandidate candidate : nonAnnotated) {\nfinal int argCount\u003dcandidate.paramCount();\nfinal AnnotatedWithParams ctor\u003dcandidate.creator();\nif (argCount \u003d\u003d 1) {\nBeanPropertyDefinition propDef\u003dcandidate.propertyDef(0);\nboolean useProps\u003d_checkIfCreatorPropertyBased(intr,ctor,propDef);\nif (useProps) {\nSettableBeanProperty[] properties\u003dnew SettableBeanProperty[1];\nPropertyName name\u003dcandidate.paramName(0);\nproperties[0]\u003dconstructCreatorProperty(ctxt,beanDesc,name,0,candidate.parameter(0),candidate.injection(0));\ncreators.addPropertyCreator(ctor,false,properties);\n}\n else {\n_handleSingleArgumentCreator(creators,ctor,false,vchecker.isCreatorVisible(ctor));\nif (propDef !\u003d null) {\n((POJOPropertyBuilder)propDef).removeConstructors();\n}\n}\ncontinue;\n}\nint nonAnnotatedParamIndex\u003d-1;\nSettableBeanProperty[] properties\u003dnew SettableBeanProperty[argCount];\nint explicitNameCount\u003d0;\nint implicitWithCreatorCount\u003d0;\nint injectCount\u003d0;\nfor (int i\u003d0; i \u003c argCount; ++i) {\nfinal AnnotatedParameter param\u003dctor.getParameter(i);\nBeanPropertyDefinition propDef\u003dcandidate.propertyDef(i);\nJacksonInject.Value injectId\u003dintr.findInjectableValue(param);\nfinal PropertyName name\u003d(propDef \u003d\u003d null) ? null : propDef.getFullName();\nif (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n++explicitNameCount;\nproperties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,i,param,injectId);\ncontinue;\n}\nif (injectId !\u003d null) {\n++injectCount;\nproperties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,i,param,injectId);\ncontinue;\n}\nNameTransformer unwrapper\u003dintr.findUnwrappingNameTransformer(param);\nif (unwrapper !\u003d null) {\n_reportUnwrappedCreatorProperty(ctxt,beanDesc,param);\ncontinue;\n}\nif (nonAnnotatedParamIndex \u003c 0) {\nnonAnnotatedParamIndex\u003di;\n}\n}\nfinal int namedCount\u003dexplicitNameCount + implicitWithCreatorCount;\nif ((explicitNameCount \u003e 0) || (injectCount \u003e 0)) {\nif ((namedCount + injectCount) \u003d\u003d argCount) {\ncreators.addPropertyCreator(ctor,false,properties);\ncontinue;\n}\nif ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\ncreators.addDelegatingCreator(ctor,false,properties,0);\ncontinue;\n}\nPropertyName impl\u003dcandidate.findImplicitParamName(nonAnnotatedParamIndex);\nif (impl \u003d\u003d null || impl.isEmpty()) {\nctxt.reportBadTypeDefinition(beanDesc,\"Argument #%d of constructor %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\",nonAnnotatedParamIndex,ctor);\n}\n}\nif (!creators.hasDefaultCreator()) {\nif (implicitCtors \u003d\u003d null) {\nimplicitCtors\u003dnew LinkedList\u003c\u003e();\n}\nimplicitCtors.add(ctor);\n}\n}\nif ((implicitCtors !\u003d null) \u0026\u0026 !creators.hasDelegatingCreator() \u0026\u0026 !creators.hasPropertyBasedCreator()) {\n_checkImplicitlyNamedConstructors(ctxt,beanDesc,vchecker,intr,creators,implicitCtors);\n}\n}",
    "begin_line": 419,
    "end_line": 602,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addExplicitDelegatingCreator#609",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addExplicitDelegatingCreator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.deser.impl.CreatorCandidate)",
    "snippet": "protected void _addExplicitDelegatingCreator(DeserializationContext ctxt,BeanDescription beanDesc,CreatorCollector creators,CreatorCandidate candidate) throws JsonMappingException {\n  int ix\u003d-1;\n  final int argCount\u003dcandidate.paramCount();\n  SettableBeanProperty[] properties\u003dnew SettableBeanProperty[argCount];\n  for (int i\u003d0; i \u003c argCount; ++i) {\n    AnnotatedParameter param\u003dcandidate.parameter(i);\n    JacksonInject.Value injectId\u003dcandidate.injection(i);\n    if (injectId !\u003d null) {\n      properties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,null,i,param,injectId);\n      continue;\n    }\n    if (ix \u003c 0) {\n      ix\u003di;\n      continue;\n    }\n    ctxt.reportBadTypeDefinition(beanDesc,\"More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed\",ix,i,candidate);\n  }\n  if (ix \u003c 0) {\n    ctxt.reportBadTypeDefinition(beanDesc,\"No argument left as delegating for Creator %s: exactly one required\",candidate);\n  }\n  if (argCount \u003d\u003d 1) {\n    _handleSingleArgumentCreator(creators,candidate.creator(),true,true);\n    BeanPropertyDefinition paramDef\u003dcandidate.propertyDef(0);\n    if (paramDef !\u003d null) {\n      ((POJOPropertyBuilder)paramDef).removeConstructors();\n    }\n    return;\n  }\n  creators.addDelegatingCreator(candidate.creator(),true,properties,ix);\n}",
    "begin_line": 609,
    "end_line": 654,
    "comment": "/** \n * Helper method called when there is the explicit \"is-creator\" with mode of \"delegating\"\n * @since 2.9.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addExplicitPropertyCreator#661",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addExplicitPropertyCreator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.deser.impl.CreatorCandidate)",
    "snippet": "protected void _addExplicitPropertyCreator(DeserializationContext ctxt,BeanDescription beanDesc,CreatorCollector creators,CreatorCandidate candidate) throws JsonMappingException {\n  final int paramCount\u003dcandidate.paramCount();\n  SettableBeanProperty[] properties\u003dnew SettableBeanProperty[paramCount];\n  for (int i\u003d0; i \u003c paramCount; ++i) {\n    JacksonInject.Value injectId\u003dcandidate.injection(i);\n    AnnotatedParameter param\u003dcandidate.parameter(i);\n    PropertyName name\u003dcandidate.paramName(i);\n    if (name \u003d\u003d null) {\n      NameTransformer unwrapper\u003dctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(param);\n      if (unwrapper !\u003d null) {\n        _reportUnwrappedCreatorProperty(ctxt,beanDesc,param);\n      }\n      name\u003dcandidate.findImplicitParamName(i);\n      if ((name \u003d\u003d null) \u0026\u0026 (injectId \u003d\u003d null)) {\n        ctxt.reportBadTypeDefinition(beanDesc,\"Argument #%d has no property name, is not Injectable: can not use as Creator %s\",i,candidate);\n      }\n    }\n    properties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,i,param,injectId);\n  }\n  creators.addPropertyCreator(candidate.creator(),true,properties);\n}",
    "begin_line": 661,
    "end_line": 694,
    "comment": "/** \n * Helper method called when there is the explicit \"is-creator\" with mode of \"properties-based\"\n * @since 2.9.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addExplicitAnyCreator#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addExplicitAnyCreator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.deser.impl.CreatorCandidate)",
    "snippet": "protected void _addExplicitAnyCreator(DeserializationContext ctxt,BeanDescription beanDesc,CreatorCollector creators,CreatorCandidate candidate) throws JsonMappingException {\n  if (1 !\u003d candidate.paramCount()) {\n    int oneNotInjected\u003dcandidate.findOnlyParamWithoutInjection();\n    if (oneNotInjected \u003e\u003d 0) {\n      if (candidate.paramName(oneNotInjected) \u003d\u003d null) {\n        _addExplicitDelegatingCreator(ctxt,beanDesc,creators,candidate);\n        return;\n      }\n    }\n    _addExplicitPropertyCreator(ctxt,beanDesc,creators,candidate);\n    return;\n  }\n  AnnotatedParameter param\u003dcandidate.parameter(0);\n  JacksonInject.Value injectId\u003dcandidate.injection(0);\n  PropertyName paramName\u003dcandidate.explicitParamName(0);\n  BeanPropertyDefinition paramDef\u003dcandidate.propertyDef(0);\n  boolean useProps\u003d(paramName !\u003d null) || (injectId !\u003d null);\n  if (!useProps \u0026\u0026 (paramDef !\u003d null)) {\n    paramName\u003dcandidate.paramName(0);\n    useProps\u003d(paramName !\u003d null) \u0026\u0026 paramDef.couldSerialize();\n  }\n  if (useProps) {\n    SettableBeanProperty[] properties\u003dnew SettableBeanProperty[]{constructCreatorProperty(ctxt,beanDesc,paramName,0,param,injectId)};\n    creators.addPropertyCreator(candidate.creator(),true,properties);\n    return;\n  }\n  _handleSingleArgumentCreator(creators,candidate.creator(),true,true);\n  if (paramDef !\u003d null) {\n    ((POJOPropertyBuilder)paramDef).removeConstructors();\n  }\n}",
    "begin_line": 701,
    "end_line": 752,
    "comment": "/** \n * Helper method called when there is the explicit \"is-creator\", but no mode declaration.\n * @since 2.9.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._checkIfCreatorPropertyBased#754",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._checkIfCreatorPropertyBased(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "snippet": "private boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr,AnnotatedWithParams creator,BeanPropertyDefinition propDef){\n  if (((propDef !\u003d null) \u0026\u0026 propDef.isExplicitlyNamed()) || (intr.findInjectableValue(creator.getParameter(0)) !\u003d null)) {\n    return true;\n  }\n  if (propDef !\u003d null) {\n    String implName\u003dpropDef.getName();\n    if (implName !\u003d null \u0026\u0026 !implName.isEmpty()) {\n      if (propDef.couldSerialize()) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 754,
    "end_line": 774,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._checkImplicitlyNamedConstructors#776",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._checkImplicitlyNamedConstructors(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedWithParams\u003e)",
    "snippet": "private void _checkImplicitlyNamedConstructors(DeserializationContext ctxt,BeanDescription beanDesc,VisibilityChecker\u003c?\u003e vchecker,AnnotationIntrospector intr,CreatorCollector creators,List\u003cAnnotatedWithParams\u003e implicitCtors) throws JsonMappingException {\n  AnnotatedWithParams found\u003dnull;\n  SettableBeanProperty[] foundProps\u003dnull;\n  main_loop:   for (  AnnotatedWithParams ctor : implicitCtors) {\n    if (!vchecker.isCreatorVisible(ctor)) {\n      continue;\n    }\n    final int argCount\u003dctor.getParameterCount();\n    SettableBeanProperty[] properties\u003dnew SettableBeanProperty[argCount];\n    for (int i\u003d0; i \u003c argCount; ++i) {\n      final AnnotatedParameter param\u003dctor.getParameter(i);\n      final PropertyName name\u003d_findParamName(param,intr);\n      if (name \u003d\u003d null || name.isEmpty()) {\n        continue main_loop;\n      }\n      properties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,param.getIndex(),param,null);\n    }\n    if (found !\u003d null) {\n      found\u003dnull;\n      break;\n    }\n    found\u003dctor;\n    foundProps\u003dproperties;\n  }\n  if (found !\u003d null) {\n    creators.addPropertyCreator(found,false,foundProps);\n    BasicBeanDescription bbd\u003d(BasicBeanDescription)beanDesc;\n    for (    SettableBeanProperty prop : foundProps) {\n      PropertyName pn\u003dprop.getFullName();\n      if (!bbd.hasProperty(pn)) {\n        BeanPropertyDefinition newDef\u003dSimpleBeanPropertyDefinition.construct(ctxt.getConfig(),prop.getMember(),pn);\n        bbd.addProperty(newDef);\n      }\n    }\n  }\n}",
    "begin_line": 776,
    "end_line": 828,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._addDeserializerFactoryMethods#830",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._addDeserializerFactoryMethods(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.deser.impl.CreatorCollector, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedWithParams,com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[]\u003e)",
    "snippet": "protected void _addDeserializerFactoryMethods(DeserializationContext ctxt,BeanDescription beanDesc,VisibilityChecker\u003c?\u003e vchecker,AnnotationIntrospector intr,CreatorCollector creators,Map\u003cAnnotatedWithParams,BeanPropertyDefinition[]\u003e creatorParams) throws JsonMappingException {\n  List\u003cCreatorCandidate\u003e nonAnnotated\u003dnew LinkedList\u003c\u003e();\n  int explCount\u003d0;\n  for (  AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n    JsonCreator.Mode creatorMode\u003dintr.findCreatorAnnotation(ctxt.getConfig(),factory);\n    final int argCount\u003dfactory.getParameterCount();\n    if (creatorMode \u003d\u003d null) {\n      if ((argCount \u003d\u003d 1) \u0026\u0026 vchecker.isCreatorVisible(factory)) {\n        nonAnnotated.add(CreatorCandidate.construct(intr,factory,null));\n      }\n      continue;\n    }\n    if (creatorMode \u003d\u003d Mode.DISABLED) {\n      continue;\n    }\n    if (argCount \u003d\u003d 0) {\n      creators.setDefaultCreator(factory);\n      continue;\n    }\nswitch (creatorMode) {\ncase DELEGATING:      _addExplicitDelegatingCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,factory,null));\n    break;\ncase PROPERTIES:  _addExplicitPropertyCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,factory,creatorParams.get(factory)));\nbreak;\ncase DEFAULT:default:_addExplicitAnyCreator(ctxt,beanDesc,creators,CreatorCandidate.construct(intr,factory,creatorParams.get(factory)));\nbreak;\n}\n++explCount;\n}\nif (explCount \u003e 0) {\nreturn;\n}\nfor (CreatorCandidate candidate : nonAnnotated) {\nfinal int argCount\u003dcandidate.paramCount();\nAnnotatedWithParams factory\u003dcandidate.creator();\nfinal BeanPropertyDefinition[] propDefs\u003dcreatorParams.get(factory);\nif (argCount !\u003d 1) {\ncontinue;\n}\nBeanPropertyDefinition argDef\u003dcandidate.propertyDef(0);\nboolean useProps\u003d_checkIfCreatorPropertyBased(intr,factory,argDef);\nif (!useProps) {\n_handleSingleArgumentCreator(creators,factory,false,vchecker.isCreatorVisible(factory));\nif (argDef !\u003d null) {\n((POJOPropertyBuilder)argDef).removeConstructors();\n}\ncontinue;\n}\nAnnotatedParameter nonAnnotatedParam\u003dnull;\nSettableBeanProperty[] properties\u003dnew SettableBeanProperty[argCount];\nint implicitNameCount\u003d0;\nint explicitNameCount\u003d0;\nint injectCount\u003d0;\nfor (int i\u003d0; i \u003c argCount; ++i) {\nfinal AnnotatedParameter param\u003dfactory.getParameter(i);\nBeanPropertyDefinition propDef\u003d(propDefs \u003d\u003d null) ? null : propDefs[i];\nJacksonInject.Value injectable\u003dintr.findInjectableValue(param);\nfinal PropertyName name\u003d(propDef \u003d\u003d null) ? null : propDef.getFullName();\nif (propDef !\u003d null \u0026\u0026 propDef.isExplicitlyNamed()) {\n++explicitNameCount;\nproperties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,i,param,injectable);\ncontinue;\n}\nif (injectable !\u003d null) {\n++injectCount;\nproperties[i]\u003dconstructCreatorProperty(ctxt,beanDesc,name,i,param,injectable);\ncontinue;\n}\nNameTransformer unwrapper\u003dintr.findUnwrappingNameTransformer(param);\nif (unwrapper !\u003d null) {\n_reportUnwrappedCreatorProperty(ctxt,beanDesc,param);\ncontinue;\n}\nif (nonAnnotatedParam \u003d\u003d null) {\nnonAnnotatedParam\u003dparam;\n}\n}\nfinal int namedCount\u003dexplicitNameCount + implicitNameCount;\nif (explicitNameCount \u003e 0 || injectCount \u003e 0) {\nif ((namedCount + injectCount) \u003d\u003d argCount) {\ncreators.addPropertyCreator(factory,false,properties);\n}\n else if ((explicitNameCount \u003d\u003d 0) \u0026\u0026 ((injectCount + 1) \u003d\u003d argCount)) {\ncreators.addDelegatingCreator(factory,false,properties,0);\n}\n else {\nctxt.reportBadTypeDefinition(beanDesc,\"Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\",nonAnnotatedParam.getIndex(),factory);\n}\n}\n}\n}",
    "begin_line": 830,
    "end_line": 976,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._handleSingleArgumentCreator#978",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._handleSingleArgumentCreator(com.fasterxml.jackson.databind.deser.impl.CreatorCollector, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean, boolean)",
    "snippet": "protected boolean _handleSingleArgumentCreator(CreatorCollector creators,AnnotatedWithParams ctor,boolean isCreator,boolean isVisible){\n  Class\u003c?\u003e type\u003dctor.getRawParameterType(0);\n  if (type \u003d\u003d String.class || type \u003d\u003d CLASS_CHAR_SEQUENCE) {\n    if (isCreator || isVisible) {\n      creators.addStringCreator(ctor,isCreator);\n    }\n    return true;\n  }\n  if (type \u003d\u003d int.class || type \u003d\u003d Integer.class) {\n    if (isCreator || isVisible) {\n      creators.addIntCreator(ctor,isCreator);\n    }\n    return true;\n  }\n  if (type \u003d\u003d long.class || type \u003d\u003d Long.class) {\n    if (isCreator || isVisible) {\n      creators.addLongCreator(ctor,isCreator);\n    }\n    return true;\n  }\n  if (type \u003d\u003d double.class || type \u003d\u003d Double.class) {\n    if (isCreator || isVisible) {\n      creators.addDoubleCreator(ctor,isCreator);\n    }\n    return true;\n  }\n  if (type \u003d\u003d boolean.class || type \u003d\u003d Boolean.class) {\n    if (isCreator || isVisible) {\n      creators.addBooleanCreator(ctor,isCreator);\n    }\n    return true;\n  }\n  if (isCreator) {\n    creators.addDelegatingCreator(ctor,isCreator,null,0);\n    return true;\n  }\n  return false;\n}",
    "begin_line": 978,
    "end_line": 1019,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._reportUnwrappedCreatorProperty#1023",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._reportUnwrappedCreatorProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt,BeanDescription beanDesc,AnnotatedParameter param) throws JsonMappingException {\n  ctxt.reportBadDefinition(beanDesc.getType(),String.format(\"Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported\",param.getIndex()));\n}",
    "begin_line": 1023,
    "end_line": 1030,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.constructCreatorProperty#1037",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.constructCreatorProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.PropertyName, int, com.fasterxml.jackson.databind.introspect.AnnotatedParameter, JacksonInject.Value)",
    "snippet": "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt,BeanDescription beanDesc,PropertyName name,int index,AnnotatedParameter param,JacksonInject.Value injectable) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  final AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  PropertyMetadata metadata;\n{\n    if (intr \u003d\u003d null) {\n      metadata\u003dPropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    }\n else {\n      Boolean b\u003dintr.hasRequiredMarker(param);\n      String desc\u003dintr.findPropertyDescription(param);\n      Integer idx\u003dintr.findPropertyIndex(param);\n      String def\u003dintr.findPropertyDefaultValue(param);\n      metadata\u003dPropertyMetadata.construct(b,desc,idx,def);\n    }\n  }\n  JavaType type\u003dresolveMemberAndTypeAnnotations(ctxt,param,param.getType());\n  BeanProperty.Std property\u003dnew BeanProperty.Std(name,type,intr.findWrapperName(param),param,metadata);\n  TypeDeserializer typeDeser\u003d(TypeDeserializer)type.getTypeHandler();\n  if (typeDeser \u003d\u003d null) {\n    typeDeser\u003dfindTypeDeserializer(config,type);\n  }\n  Object injectableValueId\u003d(injectable \u003d\u003d null) ? null : injectable.getId();\n  SettableBeanProperty prop\u003dnew CreatorProperty(name,type,property.getWrapperName(),typeDeser,beanDesc.getClassAnnotations(),param,index,injectableValueId,metadata);\n  JsonDeserializer\u003c?\u003e deser\u003dfindDeserializerFromAnnotation(ctxt,param);\n  if (deser \u003d\u003d null) {\n    deser\u003dtype.getValueHandler();\n  }\n  if (deser !\u003d null) {\n    deser\u003dctxt.handlePrimaryContextualization(deser,prop,type);\n    prop\u003dprop.withValueDeserializer(deser);\n  }\n  return prop;\n}",
    "begin_line": 1037,
    "end_line": 1084,
    "comment": "/** \n * Method that will construct a property object that represents a logical property passed via Creator (constructor or static factory method)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findParamName#1086",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findParamName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "private PropertyName _findParamName(AnnotatedParameter param,AnnotationIntrospector intr){\n  if (param !\u003d null \u0026\u0026 intr !\u003d null) {\n    PropertyName name\u003dintr.findNameForDeserialization(param);\n    if (name !\u003d null) {\n      return name;\n    }\n    String str\u003dintr.findImplicitPropertyName(param);\n    if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n      return PropertyName.construct(str);\n    }\n  }\n  return null;\n}",
    "begin_line": 1086,
    "end_line": 1102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createArrayDeserializer#1111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createArrayDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt,ArrayType type,final BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  JavaType elemType\u003dtype.getContentType();\n  JsonDeserializer\u003cObject\u003e contentDeser\u003delemType.getValueHandler();\n  TypeDeserializer elemTypeDeser\u003delemType.getTypeHandler();\n  if (elemTypeDeser \u003d\u003d null) {\n    elemTypeDeser\u003dfindTypeDeserializer(config,elemType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomArrayDeserializer(type,config,beanDesc,elemTypeDeser,contentDeser);\n  if (deser \u003d\u003d null) {\n    if (contentDeser \u003d\u003d null) {\n      Class\u003c?\u003e raw\u003delemType.getRawClass();\n      if (elemType.isPrimitive()) {\n        return PrimitiveArrayDeserializers.forType(raw);\n      }\n      if (raw \u003d\u003d String.class) {\n        return StringArrayDeserializer.instance;\n      }\n    }\n    deser\u003dnew ObjectArrayDeserializer(type,contentDeser,elemTypeDeser);\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deser\u003dmod.modifyArrayDeserializer(config,type,beanDesc,deser);\n    }\n  }\n  return deser;\n}",
    "begin_line": 1111,
    "end_line": 1148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createCollectionDeserializer#1157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createCollectionDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createCollectionDeserializer(DeserializationContext ctxt,CollectionType type,BeanDescription beanDesc) throws JsonMappingException {\n  JavaType contentType\u003dtype.getContentType();\n  JsonDeserializer\u003cObject\u003e contentDeser\u003dcontentType.getValueHandler();\n  final DeserializationConfig config\u003dctxt.getConfig();\n  TypeDeserializer contentTypeDeser\u003dcontentType.getTypeHandler();\n  if (contentTypeDeser \u003d\u003d null) {\n    contentTypeDeser\u003dfindTypeDeserializer(config,contentType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomCollectionDeserializer(type,config,beanDesc,contentTypeDeser,contentDeser);\n  if (deser \u003d\u003d null) {\n    Class\u003c?\u003e collectionClass\u003dtype.getRawClass();\n    if (contentDeser \u003d\u003d null) {\n      if (EnumSet.class.isAssignableFrom(collectionClass)) {\n        deser\u003dnew EnumSetDeserializer(contentType,null);\n      }\n    }\n  }\n  if (deser \u003d\u003d null) {\n    if (type.isInterface() || type.isAbstract()) {\n      CollectionType implType\u003d_mapAbstractCollectionType(type,config);\n      if (implType \u003d\u003d null) {\n        if (type.getTypeHandler() \u003d\u003d null) {\n          throw new IllegalArgumentException(\"Cannot find a deserializer for non-concrete Collection type \" + type);\n        }\n        deser\u003dAbstractDeserializer.constructForNonPOJO(beanDesc);\n      }\n else {\n        type\u003dimplType;\n        beanDesc\u003dconfig.introspectForCreation(type);\n      }\n    }\n    if (deser \u003d\u003d null) {\n      ValueInstantiator inst\u003dfindValueInstantiator(ctxt,beanDesc);\n      if (!inst.canCreateUsingDefault()) {\n        if (type.hasRawClass(ArrayBlockingQueue.class)) {\n          return new ArrayBlockingQueueDeserializer(type,contentDeser,contentTypeDeser,inst);\n        }\n        deser\u003dJavaUtilCollectionsDeserializers.findForCollection(ctxt,type);\n        if (deser !\u003d null) {\n          return deser;\n        }\n      }\n      if (contentType.hasRawClass(String.class)) {\n        deser\u003dnew StringCollectionDeserializer(type,contentDeser,inst);\n      }\n else {\n        deser\u003dnew CollectionDeserializer(type,contentDeser,contentTypeDeser,inst);\n      }\n    }\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deser\u003dmod.modifyCollectionDeserializer(config,type,beanDesc,deser);\n    }\n  }\n  return deser;\n}",
    "begin_line": 1157,
    "end_line": 1238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._mapAbstractCollectionType#1240",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._mapAbstractCollectionType(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "protected CollectionType _mapAbstractCollectionType(JavaType type,DeserializationConfig config){\n  Class\u003c?\u003e collectionClass\u003dtype.getRawClass();\n  collectionClass\u003d_collectionFallbacks.get(collectionClass.getName());\n  if (collectionClass \u003d\u003d null) {\n    return null;\n  }\n  return (CollectionType)config.constructSpecializedType(type,collectionClass);\n}",
    "begin_line": 1240,
    "end_line": 1248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createCollectionLikeDeserializer#1252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createCollectionLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createCollectionLikeDeserializer(DeserializationContext ctxt,CollectionLikeType type,final BeanDescription beanDesc) throws JsonMappingException {\n  JavaType contentType\u003dtype.getContentType();\n  JsonDeserializer\u003cObject\u003e contentDeser\u003dcontentType.getValueHandler();\n  final DeserializationConfig config\u003dctxt.getConfig();\n  TypeDeserializer contentTypeDeser\u003dcontentType.getTypeHandler();\n  if (contentTypeDeser \u003d\u003d null) {\n    contentTypeDeser\u003dfindTypeDeserializer(config,contentType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomCollectionLikeDeserializer(type,config,beanDesc,contentTypeDeser,contentDeser);\n  if (deser !\u003d null) {\n    if (_factoryConfig.hasDeserializerModifiers()) {\n      for (      BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n        deser\u003dmod.modifyCollectionLikeDeserializer(config,type,beanDesc,deser);\n      }\n    }\n  }\n  return deser;\n}",
    "begin_line": 1252,
    "end_line": 1278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createMapDeserializer#1287",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createMapDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createMapDeserializer(DeserializationContext ctxt,MapType type,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  JavaType keyType\u003dtype.getKeyType();\n  JavaType contentType\u003dtype.getContentType();\n  @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e contentDeser\u003d(JsonDeserializer\u003cObject\u003e)contentType.getValueHandler();\n  KeyDeserializer keyDes\u003d(KeyDeserializer)keyType.getValueHandler();\n  TypeDeserializer contentTypeDeser\u003dcontentType.getTypeHandler();\n  if (contentTypeDeser \u003d\u003d null) {\n    contentTypeDeser\u003dfindTypeDeserializer(config,contentType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomMapDeserializer(type,config,beanDesc,keyDes,contentTypeDeser,contentDeser);\n  if (deser \u003d\u003d null) {\n    Class\u003c?\u003e mapClass\u003dtype.getRawClass();\n    if (EnumMap.class.isAssignableFrom(mapClass)) {\n      ValueInstantiator inst;\n      if (mapClass \u003d\u003d EnumMap.class) {\n        inst\u003dnull;\n      }\n else {\n        inst\u003dfindValueInstantiator(ctxt,beanDesc);\n      }\n      Class\u003c?\u003e kt\u003dkeyType.getRawClass();\n      if (kt \u003d\u003d null || !kt.isEnum()) {\n        throw new IllegalArgumentException(\"Cannot construct EnumMap; generic (key) type not available\");\n      }\n      deser\u003dnew EnumMapDeserializer(type,inst,null,contentDeser,contentTypeDeser,null);\n    }\n    if (deser \u003d\u003d null) {\n      if (type.isInterface() || type.isAbstract()) {\n        @SuppressWarnings(\"rawtypes\") Class\u003c? extends Map\u003e fallback\u003d_mapFallbacks.get(mapClass.getName());\n        if (fallback !\u003d null) {\n          mapClass\u003dfallback;\n          type\u003d(MapType)config.constructSpecializedType(type,mapClass);\n          beanDesc\u003dconfig.introspectForCreation(type);\n        }\n else {\n          if (type.getTypeHandler() \u003d\u003d null) {\n            throw new IllegalArgumentException(\"Cannot find a deserializer for non-concrete Map type \" + type);\n          }\n          deser\u003dAbstractDeserializer.constructForNonPOJO(beanDesc);\n        }\n      }\n else {\n        deser\u003dJavaUtilCollectionsDeserializers.findForMap(ctxt,type);\n        if (deser !\u003d null) {\n          return deser;\n        }\n      }\n      if (deser \u003d\u003d null) {\n        ValueInstantiator inst\u003dfindValueInstantiator(ctxt,beanDesc);\n        MapDeserializer md\u003dnew MapDeserializer(type,inst,keyDes,contentDeser,contentTypeDeser);\n        JsonIgnoreProperties.Value ignorals\u003dconfig.getDefaultPropertyIgnorals(Map.class,beanDesc.getClassInfo());\n        Set\u003cString\u003e ignored\u003d(ignorals \u003d\u003d null) ? null : ignorals.findIgnoredForDeserialization();\n        md.setIgnorableProperties(ignored);\n        deser\u003dmd;\n      }\n    }\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deser\u003dmod.modifyMapDeserializer(config,type,beanDesc,deser);\n    }\n  }\n  return deser;\n}",
    "begin_line": 1287,
    "end_line": 1389,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createMapLikeDeserializer#1393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createMapLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createMapLikeDeserializer(DeserializationContext ctxt,MapLikeType type,final BeanDescription beanDesc) throws JsonMappingException {\n  JavaType keyType\u003dtype.getKeyType();\n  JavaType contentType\u003dtype.getContentType();\n  final DeserializationConfig config\u003dctxt.getConfig();\n  @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e contentDeser\u003d(JsonDeserializer\u003cObject\u003e)contentType.getValueHandler();\n  KeyDeserializer keyDes\u003d(KeyDeserializer)keyType.getValueHandler();\n  TypeDeserializer contentTypeDeser\u003dcontentType.getTypeHandler();\n  if (contentTypeDeser \u003d\u003d null) {\n    contentTypeDeser\u003dfindTypeDeserializer(config,contentType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomMapLikeDeserializer(type,config,beanDesc,keyDes,contentTypeDeser,contentDeser);\n  if (deser !\u003d null) {\n    if (_factoryConfig.hasDeserializerModifiers()) {\n      for (      BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n        deser\u003dmod.modifyMapLikeDeserializer(config,type,beanDesc,deser);\n      }\n    }\n  }\n  return deser;\n}",
    "begin_line": 1393,
    "end_line": 1429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createEnumDeserializer#1441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createEnumDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createEnumDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  final Class\u003c?\u003e enumClass\u003dtype.getRawClass();\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomEnumDeserializer(enumClass,config,beanDesc);\n  if (deser \u003d\u003d null) {\n    ValueInstantiator valueInstantiator\u003d_constructDefaultValueInstantiator(ctxt,beanDesc);\n    SettableBeanProperty[] creatorProps\u003d(valueInstantiator \u003d\u003d null) ? null : valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n    for (    AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n      if (_hasCreatorAnnotation(ctxt,factory)) {\n        if (factory.getParameterCount() \u003d\u003d 0) {\n          deser\u003dEnumDeserializer.deserializerForNoArgsCreator(config,enumClass,factory);\n          break;\n        }\n        Class\u003c?\u003e returnType\u003dfactory.getRawReturnType();\n        if (returnType.isAssignableFrom(enumClass)) {\n          deser\u003dEnumDeserializer.deserializerForCreator(config,enumClass,factory,valueInstantiator,creatorProps);\n          break;\n        }\n      }\n    }\n    if (deser \u003d\u003d null) {\n      deser\u003dnew EnumDeserializer(constructEnumResolver(enumClass,config,beanDesc.findJsonValueAccessor()),config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS));\n    }\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deser\u003dmod.modifyEnumDeserializer(config,type,beanDesc,deser);\n    }\n  }\n  return deser;\n}",
    "begin_line": 1441,
    "end_line": 1485,
    "comment": "/** \n * Factory method for constructing serializers of  {@link Enum} types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createTreeDeserializer#1488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createTreeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createTreeDeserializer(DeserializationConfig config,JavaType nodeType,BeanDescription beanDesc) throws JsonMappingException {\n  @SuppressWarnings(\"unchecked\") Class\u003c? extends JsonNode\u003e nodeClass\u003d(Class\u003c? extends JsonNode\u003e)nodeType.getRawClass();\n  JsonDeserializer\u003c?\u003e custom\u003d_findCustomTreeNodeDeserializer(nodeClass,config,beanDesc);\n  if (custom !\u003d null) {\n    return custom;\n  }\n  return JsonNodeDeserializer.getDeserializer(nodeClass);\n}",
    "begin_line": 1488,
    "end_line": 1501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createReferenceDeserializer#1504",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createReferenceDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createReferenceDeserializer(DeserializationContext ctxt,ReferenceType type,BeanDescription beanDesc) throws JsonMappingException {\n  JavaType contentType\u003dtype.getContentType();\n  JsonDeserializer\u003cObject\u003e contentDeser\u003dcontentType.getValueHandler();\n  final DeserializationConfig config\u003dctxt.getConfig();\n  TypeDeserializer contentTypeDeser\u003dcontentType.getTypeHandler();\n  if (contentTypeDeser \u003d\u003d null) {\n    contentTypeDeser\u003dfindTypeDeserializer(config,contentType);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003d_findCustomReferenceDeserializer(type,config,beanDesc,contentTypeDeser,contentDeser);\n  if (deser \u003d\u003d null) {\n    if (type.isTypeOrSubTypeOf(AtomicReference.class)) {\n      Class\u003c?\u003e rawType\u003dtype.getRawClass();\n      ValueInstantiator inst;\n      if (rawType \u003d\u003d AtomicReference.class) {\n        inst\u003dnull;\n      }\n else {\n        inst\u003dfindValueInstantiator(ctxt,beanDesc);\n      }\n      return new AtomicReferenceDeserializer(type,inst,contentTypeDeser,contentDeser);\n    }\n  }\n  if (deser !\u003d null) {\n    if (_factoryConfig.hasDeserializerModifiers()) {\n      for (      BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n        deser\u003dmod.modifyReferenceDeserializer(config,type,beanDesc,deser);\n      }\n    }\n  }\n  return deser;\n}",
    "begin_line": 1504,
    "end_line": 1546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findTypeDeserializer#1555",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public TypeDeserializer findTypeDeserializer(DeserializationConfig config,JavaType baseType) throws JsonMappingException {\n  BeanDescription bean\u003dconfig.introspectClassAnnotations(baseType.getRawClass());\n  AnnotatedClass ac\u003dbean.getClassInfo();\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findTypeResolver(config,ac,baseType);\n  Collection\u003cNamedType\u003e subtypes\u003dnull;\n  if (b \u003d\u003d null) {\n    b\u003dconfig.getDefaultTyper(baseType);\n    if (b \u003d\u003d null) {\n      return null;\n    }\n  }\n else {\n    subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config,ac);\n  }\n  if ((b.getDefaultImpl() \u003d\u003d null) \u0026\u0026 baseType.isAbstract()) {\n    JavaType defaultType\u003dmapAbstractType(config,baseType);\n    if ((defaultType !\u003d null) \u0026\u0026 !defaultType.hasRawClass(baseType.getRawClass())) {\n      b\u003db.defaultImpl(defaultType.getRawClass());\n    }\n  }\n  try {\n    return b.buildTypeDeserializer(config,baseType,subtypes);\n  }\n catch (  IllegalArgumentException e0) {\n    InvalidDefinitionException e\u003dInvalidDefinitionException.from((JsonParser)null,ClassUtil.exceptionMessage(e0),baseType);\n    e.initCause(e0);\n    throw e;\n  }\n}",
    "begin_line": 1555,
    "end_line": 1593,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findOptionalStdDeserializer#1600",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findOptionalStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e findOptionalStdDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  return OptionalHandlerFactory.instance.findDeserializer(type,ctxt.getConfig(),beanDesc);\n}",
    "begin_line": 1600,
    "end_line": 1605,
    "comment": "/** \n * Overridable method called after checking all other types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.createKeyDeserializer#1614",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.createKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,JavaType type) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  KeyDeserializer deser\u003dnull;\n  if (_factoryConfig.hasKeyDeserializers()) {\n    BeanDescription beanDesc\u003dconfig.introspectClassAnnotations(type.getRawClass());\n    for (    KeyDeserializers d : _factoryConfig.keyDeserializers()) {\n      deser\u003dd.findKeyDeserializer(type,config,beanDesc);\n      if (deser !\u003d null) {\n        break;\n      }\n    }\n  }\n  if (deser \u003d\u003d null) {\n    if (type.isEnumType()) {\n      deser\u003d_createEnumKeyDeserializer(ctxt,type);\n    }\n else {\n      deser\u003dStdKeyDeserializers.findStringBasedKeyDeserializer(config,type);\n    }\n  }\n  if (deser !\u003d null) {\n    if (_factoryConfig.hasDeserializerModifiers()) {\n      for (      BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n        deser\u003dmod.modifyKeyDeserializer(config,type,deser);\n      }\n    }\n  }\n  return deser;\n}",
    "begin_line": 1614,
    "end_line": 1646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._createEnumKeyDeserializer#1648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._createEnumKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt,JavaType type) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  Class\u003c?\u003e enumClass\u003dtype.getRawClass();\n  BeanDescription beanDesc\u003dconfig.introspect(type);\n  KeyDeserializer des\u003dfindKeyDeserializerFromAnnotation(ctxt,beanDesc.getClassInfo());\n  if (des !\u003d null) {\n    return des;\n  }\n else {\n    JsonDeserializer\u003c?\u003e custom\u003d_findCustomEnumDeserializer(enumClass,config,beanDesc);\n    if (custom !\u003d null) {\n      return StdKeyDeserializers.constructDelegatingKeyDeserializer(config,type,custom);\n    }\n    JsonDeserializer\u003c?\u003e valueDesForKey\u003dfindDeserializerFromAnnotation(ctxt,beanDesc.getClassInfo());\n    if (valueDesForKey !\u003d null) {\n      return StdKeyDeserializers.constructDelegatingKeyDeserializer(config,type,valueDesForKey);\n    }\n  }\n  EnumResolver enumRes\u003dconstructEnumResolver(enumClass,config,beanDesc.findJsonValueAccessor());\n  for (  AnnotatedMethod factory : beanDesc.getFactoryMethods()) {\n    if (_hasCreatorAnnotation(ctxt,factory)) {\n      int argCount\u003dfactory.getParameterCount();\n      if (argCount \u003d\u003d 1) {\n        Class\u003c?\u003e returnType\u003dfactory.getRawReturnType();\n        if (returnType.isAssignableFrom(enumClass)) {\n          if (factory.getRawParameterType(0) !\u003d String.class) {\n            throw new IllegalArgumentException(\"Parameter #0 type for factory method (\" + factory + \") not suitable, must be java.lang.String\");\n          }\n          if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(factory.getMember(),ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n          }\n          return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes,factory);\n        }\n      }\n      throw new IllegalArgumentException(\"Unsuitable method (\" + factory + \") decorated with @JsonCreator (for Enum type \"+ enumClass.getName()+ \")\");\n    }\n  }\n  return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);\n}",
    "begin_line": 1648,
    "end_line": 1697,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findPropertyTypeDeserializer#1718",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findPropertyTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config,JavaType baseType,AnnotatedMember annotated) throws JsonMappingException {\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findPropertyTypeResolver(config,annotated,baseType);\n  if (b \u003d\u003d null) {\n    return findTypeDeserializer(config,baseType);\n  }\n  Collection\u003cNamedType\u003e subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config,annotated,baseType);\n  return b.buildTypeDeserializer(config,baseType,subtypes);\n}",
    "begin_line": 1718,
    "end_line": 1732,
    "comment": "/** \n * Method called to create a type information deserializer for values of given non-container property, if one is needed. If not needed (no polymorphic handling configured for property), should return null. \u003cp\u003e Note that this method is only called for non-container bean properties, and not for values in container types or root values (or container properties)\n * @param baseType Declared base type of the value to deserializer (actualdeserializer type will be this type or its subtype)\n * @return Type deserializer to use for given base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findPropertyContentTypeDeserializer#1745",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findPropertyContentTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config,JavaType containerType,AnnotatedMember propertyEntity) throws JsonMappingException {\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findPropertyContentTypeResolver(config,propertyEntity,containerType);\n  JavaType contentType\u003dcontainerType.getContentType();\n  if (b \u003d\u003d null) {\n    return findTypeDeserializer(config,contentType);\n  }\n  Collection\u003cNamedType\u003e subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config,propertyEntity,contentType);\n  return b.buildTypeDeserializer(config,contentType,subtypes);\n}",
    "begin_line": 1745,
    "end_line": 1760,
    "comment": "/** \n * Method called to find and create a type information deserializer for values of given container (list, array, map) property, if one is needed. If not needed (no polymorphic handling configured for property), should return null. \u003cp\u003e Note that this method is only called for container bean properties, and not for values in container types or root values (or non-container properties)\n * @param containerType Type of property; must be a container type\n * @param propertyEntity Field or method that contains container property\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findDefaultDeserializer#1769",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findDefaultDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonDeserializer\u003c?\u003e findDefaultDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  Class\u003c?\u003e rawType\u003dtype.getRawClass();\n  if (rawType \u003d\u003d CLASS_OBJECT) {\n    DeserializationConfig config\u003dctxt.getConfig();\n    JavaType lt, mt;\n    if (_factoryConfig.hasAbstractTypeResolvers()) {\n      lt\u003d_findRemappedType(config,List.class);\n      mt\u003d_findRemappedType(config,Map.class);\n    }\n else {\n      lt\u003dmt\u003dnull;\n    }\n    return new UntypedObjectDeserializer(lt,mt);\n  }\n  if (rawType \u003d\u003d CLASS_STRING || rawType \u003d\u003d CLASS_CHAR_SEQUENCE) {\n    return StringDeserializer.instance;\n  }\n  if (rawType \u003d\u003d CLASS_ITERABLE) {\n    TypeFactory tf\u003dctxt.getTypeFactory();\n    JavaType[] tps\u003dtf.findTypeParameters(type,CLASS_ITERABLE);\n    JavaType elemType\u003d(tps \u003d\u003d null || tps.length !\u003d 1) ? TypeFactory.unknownType() : tps[0];\n    CollectionType ct\u003dtf.constructCollectionType(Collection.class,elemType);\n    return createCollectionDeserializer(ctxt,ct,beanDesc);\n  }\n  if (rawType \u003d\u003d CLASS_MAP_ENTRY) {\n    JavaType kt\u003dtype.containedTypeOrUnknown(0);\n    JavaType vt\u003dtype.containedTypeOrUnknown(1);\n    TypeDeserializer vts\u003d(TypeDeserializer)vt.getTypeHandler();\n    if (vts \u003d\u003d null) {\n      vts\u003dfindTypeDeserializer(ctxt.getConfig(),vt);\n    }\n    JsonDeserializer\u003cObject\u003e valueDeser\u003dvt.getValueHandler();\n    KeyDeserializer keyDes\u003d(KeyDeserializer)kt.getValueHandler();\n    return new MapEntryDeserializer(type,keyDes,valueDeser,vts);\n  }\n  String clsName\u003drawType.getName();\n  if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) {\n    JsonDeserializer\u003c?\u003e deser\u003dNumberDeserializers.find(rawType,clsName);\n    if (deser \u003d\u003d null) {\n      deser\u003dDateDeserializers.find(rawType,clsName);\n    }\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  if (rawType \u003d\u003d TokenBuffer.class) {\n    return new TokenBufferDeserializer();\n  }\n  JsonDeserializer\u003c?\u003e deser\u003dfindOptionalStdDeserializer(ctxt,type,beanDesc);\n  if (deser !\u003d null) {\n    return deser;\n  }\n  return JdkDeserializers.find(rawType,clsName);\n}",
    "begin_line": 1769,
    "end_line": 1832,
    "comment": "/** \n * Helper method called to find one of default serializers for \"well-known\" platform types: JDK-provided types, and small number of public Jackson API types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findRemappedType#1834",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findRemappedType(com.fasterxml.jackson.databind.DeserializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JavaType _findRemappedType(DeserializationConfig config,Class\u003c?\u003e rawType) throws JsonMappingException {\n  JavaType type\u003dmapAbstractType(config,config.constructType(rawType));\n  return (type \u003d\u003d null || type.hasRawClass(rawType)) ? null : type;\n}",
    "begin_line": 1834,
    "end_line": 1837,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomTreeNodeDeserializer#1845",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomTreeNodeDeserializer(java.lang.Class\u003c? extends com.fasterxml.jackson.databind.JsonNode\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomTreeNodeDeserializer(Class\u003c? extends JsonNode\u003e type,DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findTreeNodeDeserializer(type,config,beanDesc);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1845,
    "end_line": 1856,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomReferenceDeserializer#1858",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomReferenceDeserializer(com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomReferenceDeserializer(ReferenceType type,DeserializationConfig config,BeanDescription beanDesc,TypeDeserializer contentTypeDeserializer,JsonDeserializer\u003c?\u003e contentDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findReferenceDeserializer(type,config,beanDesc,contentTypeDeserializer,contentDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1858,
    "end_line": 1871,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomBeanDeserializer#1874",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomBeanDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonDeserializer\u003cObject\u003e _findCustomBeanDeserializer(JavaType type,DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findBeanDeserializer(type,config,beanDesc);\n    if (deser !\u003d null) {\n      return (JsonDeserializer\u003cObject\u003e)deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1874,
    "end_line": 1885,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomArrayDeserializer#1887",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomArrayDeserializer(com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomArrayDeserializer(ArrayType type,DeserializationConfig config,BeanDescription beanDesc,TypeDeserializer elementTypeDeserializer,JsonDeserializer\u003c?\u003e elementDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findArrayDeserializer(type,config,beanDesc,elementTypeDeserializer,elementDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1887,
    "end_line": 1900,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomCollectionDeserializer#1902",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomCollectionDeserializer(com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomCollectionDeserializer(CollectionType type,DeserializationConfig config,BeanDescription beanDesc,TypeDeserializer elementTypeDeserializer,JsonDeserializer\u003c?\u003e elementDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findCollectionDeserializer(type,config,beanDesc,elementTypeDeserializer,elementDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1902,
    "end_line": 1915,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomCollectionLikeDeserializer#1917",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomCollectionLikeDeserializer(com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomCollectionLikeDeserializer(CollectionLikeType type,DeserializationConfig config,BeanDescription beanDesc,TypeDeserializer elementTypeDeserializer,JsonDeserializer\u003c?\u003e elementDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findCollectionLikeDeserializer(type,config,beanDesc,elementTypeDeserializer,elementDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1917,
    "end_line": 1930,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomEnumDeserializer#1932",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomEnumDeserializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomEnumDeserializer(Class\u003c?\u003e type,DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findEnumDeserializer(type,config,beanDesc);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1932,
    "end_line": 1943,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomMapDeserializer#1945",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomMapDeserializer(com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomMapDeserializer(MapType type,DeserializationConfig config,BeanDescription beanDesc,KeyDeserializer keyDeserializer,TypeDeserializer elementTypeDeserializer,JsonDeserializer\u003c?\u003e elementDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findMapDeserializer(type,config,beanDesc,keyDeserializer,elementTypeDeserializer,elementDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1945,
    "end_line": 1959,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findCustomMapLikeDeserializer#1961",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findCustomMapLikeDeserializer(com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _findCustomMapLikeDeserializer(MapLikeType type,DeserializationConfig config,BeanDescription beanDesc,KeyDeserializer keyDeserializer,TypeDeserializer elementTypeDeserializer,JsonDeserializer\u003c?\u003e elementDeserializer) throws JsonMappingException {\n  for (  Deserializers d : _factoryConfig.deserializers()) {\n    JsonDeserializer\u003c?\u003e deser\u003dd.findMapLikeDeserializer(type,config,beanDesc,keyDeserializer,elementTypeDeserializer,elementDeserializer);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  return null;\n}",
    "begin_line": 1961,
    "end_line": 1975,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findDeserializerFromAnnotation#1991",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findDeserializerFromAnnotation(DeserializationContext ctxt,Annotated ann) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    Object deserDef\u003dintr.findDeserializer(ann);\n    if (deserDef !\u003d null) {\n      return ctxt.deserializerInstance(ann,deserDef);\n    }\n  }\n  return null;\n}",
    "begin_line": 1991,
    "end_line": 2003,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization; and if so, to instantiate, that deserializer to use. Note that deserializer will NOT yet be contextualized so caller needs to take care to call contextualization appropriately. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findKeyDeserializerFromAnnotation#2010",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findKeyDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt,Annotated ann) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    Object deserDef\u003dintr.findKeyDeserializer(ann);\n    if (deserDef !\u003d null) {\n      return ctxt.keyDeserializerInstance(ann,deserDef);\n    }\n  }\n  return null;\n}",
    "begin_line": 2010,
    "end_line": 2022,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.findContentDeserializerFromAnnotation#2027",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.findContentDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findContentDeserializerFromAnnotation(DeserializationContext ctxt,Annotated ann) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    Object deserDef\u003dintr.findContentDeserializer(ann);\n    if (deserDef !\u003d null) {\n      return ctxt.deserializerInstance(ann,deserDef);\n    }\n  }\n  return null;\n}",
    "begin_line": 2027,
    "end_line": 2039,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.resolveMemberAndTypeAnnotations#2050",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.resolveMemberAndTypeAnnotations(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType resolveMemberAndTypeAnnotations(DeserializationContext ctxt,AnnotatedMember member,JavaType type) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr \u003d\u003d null) {\n    return type;\n  }\n  if (type.isMapLikeType()) {\n    JavaType keyType\u003dtype.getKeyType();\n    if (keyType !\u003d null) {\n      Object kdDef\u003dintr.findKeyDeserializer(member);\n      KeyDeserializer kd\u003dctxt.keyDeserializerInstance(member,kdDef);\n      if (kd !\u003d null) {\n        type\u003d((MapLikeType)type).withKeyValueHandler(kd);\n        keyType\u003dtype.getKeyType();\n      }\n    }\n  }\n  if (type.hasContentType()) {\n    Object cdDef\u003dintr.findContentDeserializer(member);\n    JsonDeserializer\u003c?\u003e cd\u003dctxt.deserializerInstance(member,cdDef);\n    if (cd !\u003d null) {\n      type\u003dtype.withContentValueHandler(cd);\n    }\n    TypeDeserializer contentTypeDeser\u003dfindPropertyContentTypeDeserializer(ctxt.getConfig(),type,(AnnotatedMember)member);\n    if (contentTypeDeser !\u003d null) {\n      type\u003dtype.withContentTypeHandler(contentTypeDeser);\n    }\n  }\n  TypeDeserializer valueTypeDeser\u003dfindPropertyTypeDeserializer(ctxt.getConfig(),type,(AnnotatedMember)member);\n  if (valueTypeDeser !\u003d null) {\n    type\u003dtype.withTypeHandler(valueTypeDeser);\n  }\n  type\u003dintr.refineDeserializationType(ctxt.getConfig(),member,type);\n  return type;\n}",
    "begin_line": 2050,
    "end_line": 2099,
    "comment": "/** \n * Helper method used to resolve additional type-related annotation information like type overrides, or handler (serializer, deserializer) overrides, so that from declared field, property or constructor parameter type is used as the base and modified based on annotations, if any.\n * @since 2.8 Combines functionality of \u003ccode\u003emodifyTypeByAnnotation\u003c/code\u003eand \u003ccode\u003eresolveType\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.constructEnumResolver#2101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.constructEnumResolver(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected EnumResolver constructEnumResolver(Class\u003c?\u003e enumClass,DeserializationConfig config,AnnotatedMember jsonValueAccessor){\n  if (jsonValueAccessor !\u003d null) {\n    if (config.canOverrideAccessModifiers()) {\n      ClassUtil.checkAndFixAccess(jsonValueAccessor.getMember(),config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n    return EnumResolver.constructUnsafeUsingMethod(enumClass,jsonValueAccessor,config.getAnnotationIntrospector());\n  }\n  return EnumResolver.constructUnsafe(enumClass,config.getAnnotationIntrospector());\n}",
    "begin_line": 2101,
    "end_line": 2115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._hasCreatorAnnotation#2120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._hasCreatorAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected boolean _hasCreatorAnnotation(DeserializationContext ctxt,Annotated ann){\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    JsonCreator.Mode mode\u003dintr.findCreatorAnnotation(ctxt.getConfig(),ann);\n    return (mode !\u003d null) \u0026\u0026 (mode !\u003d JsonCreator.Mode.DISABLED);\n  }\n  return false;\n}",
    "begin_line": 2120,
    "end_line": 2128,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.modifyTypeByAnnotation#2143",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.modifyTypeByAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated protected JavaType modifyTypeByAnnotation(DeserializationContext ctxt,Annotated a,JavaType type) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr \u003d\u003d null) {\n    return type;\n  }\n  return intr.refineDeserializationType(ctxt.getConfig(),a,type);\n}",
    "begin_line": 2143,
    "end_line": 2152,
    "comment": "/** \n * Method called to see if given method has annotations that indicate a more specific type than what the argument specifies.\n * @deprecated Since 2.8; call {@link #resolveMemberAndTypeAnnotations} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory.resolveType#2158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory.resolveType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Deprecated protected JavaType resolveType(DeserializationContext ctxt,BeanDescription beanDesc,JavaType type,AnnotatedMember member) throws JsonMappingException {\n  return resolveMemberAndTypeAnnotations(ctxt,member,type);\n}",
    "begin_line": 2158,
    "end_line": 2163,
    "comment": "/** \n * @deprecated since 2.8 call {@link #resolveMemberAndTypeAnnotations} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicDeserializerFactory._findJsonValueFor#2169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BasicDeserializerFactory._findJsonValueFor(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config,JavaType enumType){\n  if (enumType \u003d\u003d null) {\n    return null;\n  }\n  BeanDescription beanDesc\u003dconfig.introspect(enumType);\n  return beanDesc.findJsonValueMethod();\n}",
    "begin_line": 2169,
    "end_line": 2176,
    "comment": "/** \n * @deprecated since 2.8 call \u003ccode\u003efindJsonValueMethod\u003c/code\u003e on {@link BeanDescription} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e, java.util.HashSet\u003cjava.lang.String\u003e, boolean, boolean)",
    "snippet": "public BeanDeserializer(BeanDeserializerBuilder builder,BeanDescription beanDesc,BeanPropertyMap properties,Map\u003cString,SettableBeanProperty\u003e backRefs,HashSet\u003cString\u003e ignorableProps,boolean ignoreAllUnknown,boolean hasViews){\n  super(builder,beanDesc,properties,backRefs,ignorableProps,ignoreAllUnknown,hasViews);\n}",
    "begin_line": 59,
    "end_line": 66,
    "comment": "/** \n * Constructor used by  {@link BeanDeserializerBuilder}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)",
    "snippet": "protected BeanDeserializer(BeanDeserializerBase src){\n  super(src,src._ignoreAllUnknown);\n}",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Copy-constructor that can be used by sub-classes to allow copy-on-write style copying of settings of an existing instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, boolean)",
    "snippet": "protected BeanDeserializer(BeanDeserializerBase src,boolean ignoreAllUnknown){\n  super(src,ignoreAllUnknown);\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "protected BeanDeserializer(BeanDeserializerBase src,NameTransformer unwrapper){\n  super(src,unwrapper);\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)",
    "snippet": "public BeanDeserializer(BeanDeserializerBase src,ObjectIdReader oir){\n  super(src,oir);\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public BeanDeserializer(BeanDeserializerBase src,Set\u003cString\u003e ignorableProps){\n  super(src,ignorableProps);\n}",
    "begin_line": 88,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.BeanDeserializer#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanDeserializer(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap)",
    "snippet": "public BeanDeserializer(BeanDeserializerBase src,BeanPropertyMap props){\n  super(src,props);\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.unwrappingDeserializer#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e unwrappingDeserializer(NameTransformer transformer){\n  if (getClass() !\u003d BeanDeserializer.class) {\n    return this;\n  }\n  if (_currentlyTransforming \u003d\u003d transformer) {\n    return this;\n  }\n  _currentlyTransforming\u003dtransformer;\n  try {\n    return new BeanDeserializer(this,transformer);\n  }\n  finally {\n    _currentlyTransforming\u003dnull;\n  }\n}",
    "begin_line": 97,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.withObjectIdReader#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.withObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)",
    "snippet": "@Override public BeanDeserializer withObjectIdReader(ObjectIdReader oir){\n  return new BeanDeserializer(this,oir);\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.withIgnorableProperties#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.withIgnorableProperties(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "@Override public BeanDeserializer withIgnorableProperties(Set\u003cString\u003e ignorableProps){\n  return new BeanDeserializer(this,ignorableProps);\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.withBeanProperties#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.withBeanProperties(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap)",
    "snippet": "@Override public BeanDeserializerBase withBeanProperties(BeanPropertyMap props){\n  return new BeanDeserializer(this,props);\n}",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.asArrayDeserializer#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.asArrayDeserializer()",
    "snippet": "@Override protected BeanDeserializerBase asArrayDeserializer(){\n  SettableBeanProperty[] props\u003d_beanProperties.getPropertiesInInsertionOrder();\n  return new BeanAsArrayDeserializer(this,props);\n}",
    "begin_line": 131,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserialize#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.isExpectedStartObjectToken()) {\n    if (_vanillaProcessing) {\n      return vanillaDeserialize(p,ctxt,p.nextToken());\n    }\n    p.nextToken();\n    if (_objectIdReader !\u003d null) {\n      return deserializeWithObjectId(p,ctxt);\n    }\n    return deserializeFromObject(p,ctxt);\n  }\n  return _deserializeOther(p,ctxt,p.getCurrentToken());\n}",
    "begin_line": 146,
    "end_line": 162,
    "comment": "/** \n * Main deserialization method for bean-based objects (POJOs).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer._deserializeOther#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeOther(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, JsonToken)",
    "snippet": "protected final Object _deserializeOther(JsonParser p,DeserializationContext ctxt,JsonToken t) throws IOException {\n  if (t !\u003d null) {\nswitch (t) {\ncase VALUE_STRING:      return deserializeFromString(p,ctxt);\ncase VALUE_NUMBER_INT:    return deserializeFromNumber(p,ctxt);\ncase VALUE_NUMBER_FLOAT:  return deserializeFromDouble(p,ctxt);\ncase VALUE_EMBEDDED_OBJECT:return deserializeFromEmbedded(p,ctxt);\ncase VALUE_TRUE:case VALUE_FALSE:return deserializeFromBoolean(p,ctxt);\ncase VALUE_NULL:return deserializeFromNull(p,ctxt);\ncase START_ARRAY:return deserializeFromArray(p,ctxt);\ncase FIELD_NAME:case END_OBJECT:if (_vanillaProcessing) {\nreturn vanillaDeserialize(p,ctxt,t);\n}\nif (_objectIdReader !\u003d null) {\nreturn deserializeWithObjectId(p,ctxt);\n}\nreturn deserializeFromObject(p,ctxt);\ndefault:}\n}\nreturn ctxt.handleUnexpectedToken(handledType(),p);\n}",
    "begin_line": 164,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer._missingToken#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer._missingToken(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Deprecated protected Object _missingToken(JsonParser p,DeserializationContext ctxt) throws IOException {\n  throw ctxt.endOfInputException(handledType());\n}",
    "begin_line": 202,
    "end_line": 204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserialize#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt,Object bean) throws IOException {\n  p.setCurrentValue(bean);\n  if (_injectables !\u003d null) {\n    injectValues(ctxt,bean);\n  }\n  if (_unwrappedPropertyHandler !\u003d null) {\n    return deserializeWithUnwrapped(p,ctxt,bean);\n  }\n  if (_externalTypeIdHandler !\u003d null) {\n    return deserializeWithExternalTypeId(p,ctxt,bean);\n  }\n  String propName;\n  if (p.isExpectedStartObjectToken()) {\n    propName\u003dp.nextFieldName();\n    if (propName \u003d\u003d null) {\n      return bean;\n    }\n  }\n else {\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n      propName\u003dp.getCurrentName();\n    }\n else {\n      return bean;\n    }\n  }\n  if (_needViewProcesing) {\n    Class\u003c?\u003e view\u003dctxt.getActiveView();\n    if (view !\u003d null) {\n      return deserializeWithView(p,ctxt,bean,view);\n    }\n  }\n  do {\n    p.nextToken();\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      try {\n        prop.deserializeAndSet(p,ctxt,bean);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n    handleUnknownVanilla(p,ctxt,bean,propName);\n  }\n while ((propName\u003dp.nextFieldName()) !\u003d null);\n  return bean;\n}",
    "begin_line": 212,
    "end_line": 261,
    "comment": "/** \n * Secondary deserialization method, called in cases where POJO instance is created as part of deserialization, potentially after collecting some or all of the properties to set.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.vanillaDeserialize#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, JsonToken)",
    "snippet": "private final Object vanillaDeserialize(JsonParser p,DeserializationContext ctxt,JsonToken t) throws IOException {\n  final Object bean\u003d_valueInstantiator.createUsingDefault(ctxt);\n  p.setCurrentValue(bean);\n  if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n    String propName\u003dp.getCurrentName();\n    do {\n      p.nextToken();\n      SettableBeanProperty prop\u003d_beanProperties.find(propName);\n      if (prop !\u003d null) {\n        try {\n          prop.deserializeAndSet(p,ctxt,bean);\n        }\n catch (        Exception e) {\n          wrapAndThrow(e,bean,propName,ctxt);\n        }\n        continue;\n      }\n      handleUnknownVanilla(p,ctxt,bean,propName);\n    }\n while ((propName\u003dp.nextFieldName()) !\u003d null);\n  }\n  return bean;\n}",
    "begin_line": 273,
    "end_line": 298,
    "comment": "/** \n * Streamlined version that is only used when no \"special\" features are enabled.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeFromObject#304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeFromObject(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if ((_objectIdReader !\u003d null) \u0026\u0026 _objectIdReader.maySerializeAsObject()) {\n    if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME) \u0026\u0026 _objectIdReader.isValidReferencePropertyName(p.getCurrentName(),p)) {\n      return deserializeFromObjectId(p,ctxt);\n    }\n  }\n  if (_nonStandardCreation) {\n    if (_unwrappedPropertyHandler !\u003d null) {\n      return deserializeWithUnwrapped(p,ctxt);\n    }\n    if (_externalTypeIdHandler !\u003d null) {\n      return deserializeWithExternalTypeId(p,ctxt);\n    }\n    Object bean\u003ddeserializeFromObjectUsingNonDefault(p,ctxt);\n    if (_injectables !\u003d null) {\n      injectValues(ctxt,bean);\n    }\n    return bean;\n  }\n  final Object bean\u003d_valueInstantiator.createUsingDefault(ctxt);\n  p.setCurrentValue(bean);\n  if (p.canReadObjectId()) {\n    Object id\u003dp.getObjectId();\n    if (id !\u003d null) {\n      _handleTypedObjectId(p,ctxt,bean,id);\n    }\n  }\n  if (_injectables !\u003d null) {\n    injectValues(ctxt,bean);\n  }\n  if (_needViewProcesing) {\n    Class\u003c?\u003e view\u003dctxt.getActiveView();\n    if (view !\u003d null) {\n      return deserializeWithView(p,ctxt,bean,view);\n    }\n  }\n  if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n    String propName\u003dp.getCurrentName();\n    do {\n      p.nextToken();\n      SettableBeanProperty prop\u003d_beanProperties.find(propName);\n      if (prop !\u003d null) {\n        try {\n          prop.deserializeAndSet(p,ctxt,bean);\n        }\n catch (        Exception e) {\n          wrapAndThrow(e,bean,propName,ctxt);\n        }\n        continue;\n      }\n      handleUnknownVanilla(p,ctxt,bean,propName);\n    }\n while ((propName\u003dp.nextFieldName()) !\u003d null);\n  }\n  return bean;\n}",
    "begin_line": 304,
    "end_line": 379,
    "comment": "/** \n * General version used when handling needs more advanced features.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer._deserializeUsingPropertyBased#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeUsingPropertyBased(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override @SuppressWarnings(\"resource\") protected Object _deserializeUsingPropertyBased(final JsonParser p,final DeserializationContext ctxt) throws IOException {\n  final PropertyBasedCreator creator\u003d_propertyBasedCreator;\n  PropertyValueBuffer buffer\u003dcreator.startBuilding(p,ctxt,_objectIdReader);\n  TokenBuffer unknown\u003dnull;\n  final Class\u003c?\u003e activeView\u003d_needViewProcesing ? ctxt.getActiveView() : null;\n  JsonToken t\u003dp.getCurrentToken();\n  List\u003cBeanReferring\u003e referrings\u003dnull;\n  for (; t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String propName\u003dp.getCurrentName();\n    p.nextToken();\n    if (buffer.readIdProperty(propName)) {\n      continue;\n    }\n    SettableBeanProperty creatorProp\u003dcreator.findCreatorProperty(propName);\n    if (creatorProp !\u003d null) {\n      Object value;\n      if ((activeView !\u003d null) \u0026\u0026 !creatorProp.visibleInView(activeView)) {\n        p.skipChildren();\n        continue;\n      }\n      value\u003d_deserializeWithErrorWrapping(p,ctxt,creatorProp);\n      if (buffer.assignParameter(creatorProp,value)) {\n        p.nextToken();\n        Object bean;\n        try {\n          bean\u003dcreator.build(ctxt,buffer);\n        }\n catch (        Exception e) {\n          bean\u003dwrapInstantiationProblem(e,ctxt);\n        }\n        if (bean \u003d\u003d null) {\n          return ctxt.handleInstantiationProblem(handledType(),null,_creatorReturnedNullException());\n        }\n        p.setCurrentValue(bean);\n        if (bean.getClass() !\u003d _beanType.getRawClass()) {\n          return handlePolymorphic(p,ctxt,bean,unknown);\n        }\n        if (unknown !\u003d null) {\n          bean\u003dhandleUnknownProperties(ctxt,bean,unknown);\n        }\n        return deserialize(p,ctxt,bean);\n      }\n      continue;\n    }\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      try {\n        buffer.bufferProperty(prop,_deserializeWithErrorWrapping(p,ctxt,prop));\n      }\n catch (      UnresolvedForwardReference reference) {\n        BeanReferring referring\u003dhandleUnresolvedReference(ctxt,prop,buffer,reference);\n        if (referrings \u003d\u003d null) {\n          referrings\u003dnew ArrayList\u003cBeanReferring\u003e();\n        }\n        referrings.add(referring);\n      }\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,handledType(),propName);\n      continue;\n    }\n    if (_anySetter !\u003d null) {\n      try {\n        buffer.bufferAnyProperty(_anySetter,propName,_anySetter.deserialize(p,ctxt));\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,_beanType.getRawClass(),propName,ctxt);\n      }\n      continue;\n    }\n    if (unknown \u003d\u003d null) {\n      unknown\u003dnew TokenBuffer(p,ctxt);\n    }\n    unknown.writeFieldName(propName);\n    unknown.copyCurrentStructure(p);\n  }\n  Object bean;\n  try {\n    bean\u003dcreator.build(ctxt,buffer);\n  }\n catch (  Exception e) {\n    wrapInstantiationProblem(e,ctxt);\n    bean\u003dnull;\n  }\n  if (referrings !\u003d null) {\n    for (    BeanReferring referring : referrings) {\n      referring.setBean(bean);\n    }\n  }\n  if (unknown !\u003d null) {\n    if (bean.getClass() !\u003d _beanType.getRawClass()) {\n      return handlePolymorphic(null,ctxt,bean,unknown);\n    }\n    return handleUnknownProperties(ctxt,bean,unknown);\n  }\n  return bean;\n}",
    "begin_line": 391,
    "end_line": 507,
    "comment": "/** \n * Method called to deserialize bean using \"property-based creator\": this means that a non-default constructor or factory method is called, and then possibly other setters. The trick is that values for creator method need to be buffered, first; and due to non-guaranteed ordering possibly some other properties as well.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.handleUnresolvedReference#512",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.handleUnresolvedReference(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference)",
    "snippet": "private BeanReferring handleUnresolvedReference(DeserializationContext ctxt,SettableBeanProperty prop,PropertyValueBuffer buffer,UnresolvedForwardReference reference) throws JsonMappingException {\n  BeanReferring referring\u003dnew BeanReferring(ctxt,reference,prop.getType(),buffer,prop);\n  reference.getRoid().appendReferring(referring);\n  return referring;\n}",
    "begin_line": 512,
    "end_line": 521,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer._deserializeWithErrorWrapping#523",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeWithErrorWrapping(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected final Object _deserializeWithErrorWrapping(JsonParser p,DeserializationContext ctxt,SettableBeanProperty prop) throws IOException {\n  try {\n    return prop.deserialize(p,ctxt);\n  }\n catch (  Exception e) {\n    wrapAndThrow(e,_beanType.getRawClass(),prop.getName(),ctxt);\n    return null;\n  }\n}",
    "begin_line": 523,
    "end_line": 534,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeFromNull#544",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromNull(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object deserializeFromNull(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.requiresCustomCodec()) {\n    @SuppressWarnings(\"resource\") TokenBuffer tb\u003dnew TokenBuffer(p,ctxt);\n    tb.writeEndObject();\n    JsonParser p2\u003dtb.asParser(p);\n    p2.nextToken();\n    Object ob\u003d_vanillaProcessing ? vanillaDeserialize(p2,ctxt,JsonToken.END_OBJECT) : deserializeFromObject(p2,ctxt);\n    p2.close();\n    return ob;\n  }\n  return ctxt.handleUnexpectedToken(handledType(),p);\n}",
    "begin_line": 544,
    "end_line": 563,
    "comment": "/** \n * Helper method called for rare case of pointing to  {@link JsonToken#VALUE_NULL}token. While this is most often an erroneous condition, there is one specific case with XML handling where polymorphic type with no properties is exposed as such, and should be handled same as empty Object.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeWithView#571",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithView(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "protected final Object deserializeWithView(JsonParser p,DeserializationContext ctxt,Object bean,Class\u003c?\u003e activeView) throws IOException {\n  if (p.hasTokenId(JsonTokenId.ID_FIELD_NAME)) {\n    String propName\u003dp.getCurrentName();\n    do {\n      p.nextToken();\n      SettableBeanProperty prop\u003d_beanProperties.find(propName);\n      if (prop !\u003d null) {\n        if (!prop.visibleInView(activeView)) {\n          p.skipChildren();\n          continue;\n        }\n        try {\n          prop.deserializeAndSet(p,ctxt,bean);\n        }\n catch (        Exception e) {\n          wrapAndThrow(e,bean,propName,ctxt);\n        }\n        continue;\n      }\n      handleUnknownVanilla(p,ctxt,bean,propName);\n    }\n while ((propName\u003dp.nextFieldName()) !\u003d null);\n  }\n  return bean;\n}",
    "begin_line": 571,
    "end_line": 597,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeWithUnwrapped#610",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithUnwrapped(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object deserializeWithUnwrapped(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_delegateDeserializer !\u003d null) {\n    return _valueInstantiator.createUsingDelegate(ctxt,_delegateDeserializer.deserialize(p,ctxt));\n  }\n  if (_propertyBasedCreator !\u003d null) {\n    return deserializeUsingPropertyBasedWithUnwrapped(p,ctxt);\n  }\n  TokenBuffer tokens\u003dnew TokenBuffer(p,ctxt);\n  tokens.writeStartObject();\n  final Object bean\u003d_valueInstantiator.createUsingDefault(ctxt);\n  p.setCurrentValue(bean);\n  if (_injectables !\u003d null) {\n    injectValues(ctxt,bean);\n  }\n  final Class\u003c?\u003e activeView\u003d_needViewProcesing ? ctxt.getActiveView() : null;\n  String propName\u003dp.hasTokenId(JsonTokenId.ID_FIELD_NAME) ? p.getCurrentName() : null;\n  for (; propName !\u003d null; propName\u003dp.nextFieldName()) {\n    p.nextToken();\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      if ((activeView !\u003d null) \u0026\u0026 !prop.visibleInView(activeView)) {\n        p.skipChildren();\n        continue;\n      }\n      try {\n        prop.deserializeAndSet(p,ctxt,bean);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,bean,propName);\n      continue;\n    }\n    if (_anySetter \u003d\u003d null) {\n      tokens.writeFieldName(propName);\n      tokens.copyCurrentStructure(p);\n      continue;\n    }\n    TokenBuffer b2\u003dTokenBuffer.asCopyOfValue(p);\n    tokens.writeFieldName(propName);\n    tokens.append(b2);\n    try {\n      _anySetter.deserializeAndSet(b2.asParserOnFirstToken(),ctxt,bean,propName);\n    }\n catch (    Exception e) {\n      wrapAndThrow(e,bean,propName,ctxt);\n    }\n  }\n  tokens.writeEndObject();\n  _unwrappedPropertyHandler.processUnwrapped(p,ctxt,bean,tokens);\n  return bean;\n}",
    "begin_line": 610,
    "end_line": 675,
    "comment": "/** \n * Method called when there are declared \"unwrapped\" properties which need special handling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeWithUnwrapped#678",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithUnwrapped(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object deserializeWithUnwrapped(JsonParser p,DeserializationContext ctxt,Object bean) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_OBJECT) {\n    t\u003dp.nextToken();\n  }\n  TokenBuffer tokens\u003dnew TokenBuffer(p,ctxt);\n  tokens.writeStartObject();\n  final Class\u003c?\u003e activeView\u003d_needViewProcesing ? ctxt.getActiveView() : null;\n  for (; t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String propName\u003dp.getCurrentName();\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    p.nextToken();\n    if (prop !\u003d null) {\n      if (activeView !\u003d null \u0026\u0026 !prop.visibleInView(activeView)) {\n        p.skipChildren();\n        continue;\n      }\n      try {\n        prop.deserializeAndSet(p,ctxt,bean);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,bean,propName);\n      continue;\n    }\n    if (_anySetter \u003d\u003d null) {\n      tokens.writeFieldName(propName);\n      tokens.copyCurrentStructure(p);\n    }\n else {\n      TokenBuffer b2\u003dTokenBuffer.asCopyOfValue(p);\n      tokens.writeFieldName(propName);\n      tokens.append(b2);\n      try {\n        _anySetter.deserializeAndSet(b2.asParserOnFirstToken(),ctxt,bean,propName);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n  }\n  tokens.writeEndObject();\n  _unwrappedPropertyHandler.processUnwrapped(p,ctxt,bean,tokens);\n  return bean;\n}",
    "begin_line": 678,
    "end_line": 733,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeUsingPropertyBasedWithUnwrapped#736",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithUnwrapped(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithUnwrapped(JsonParser p,DeserializationContext ctxt) throws IOException {\n  final PropertyBasedCreator creator\u003d_propertyBasedCreator;\n  PropertyValueBuffer buffer\u003dcreator.startBuilding(p,ctxt,_objectIdReader);\n  TokenBuffer tokens\u003dnew TokenBuffer(p,ctxt);\n  tokens.writeStartObject();\n  JsonToken t\u003dp.getCurrentToken();\n  for (; t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String propName\u003dp.getCurrentName();\n    p.nextToken();\n    SettableBeanProperty creatorProp\u003dcreator.findCreatorProperty(propName);\n    if (creatorProp !\u003d null) {\n      if (buffer.assignParameter(creatorProp,_deserializeWithErrorWrapping(p,ctxt,creatorProp))) {\n        t\u003dp.nextToken();\n        Object bean;\n        try {\n          bean\u003dcreator.build(ctxt,buffer);\n        }\n catch (        Exception e) {\n          bean\u003dwrapInstantiationProblem(e,ctxt);\n        }\n        p.setCurrentValue(bean);\n        while (t \u003d\u003d JsonToken.FIELD_NAME) {\n          tokens.copyCurrentStructure(p);\n          t\u003dp.nextToken();\n        }\n        if (t !\u003d JsonToken.END_OBJECT) {\n          ctxt.reportWrongTokenException(this,JsonToken.END_OBJECT,\"Attempted to unwrap \u0027%s\u0027 value\",handledType().getName());\n        }\n        tokens.writeEndObject();\n        if (bean.getClass() !\u003d _beanType.getRawClass()) {\n          ctxt.reportInputMismatch(creatorProp,\"Cannot create polymorphic instances with unwrapped values\");\n          return null;\n        }\n        return _unwrappedPropertyHandler.processUnwrapped(p,ctxt,bean,tokens);\n      }\n      continue;\n    }\n    if (buffer.readIdProperty(propName)) {\n      continue;\n    }\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      buffer.bufferProperty(prop,_deserializeWithErrorWrapping(p,ctxt,prop));\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,handledType(),propName);\n      continue;\n    }\n    if (_anySetter \u003d\u003d null) {\n      tokens.writeFieldName(propName);\n      tokens.copyCurrentStructure(p);\n    }\n else {\n      TokenBuffer b2\u003dTokenBuffer.asCopyOfValue(p);\n      tokens.writeFieldName(propName);\n      tokens.append(b2);\n      try {\n        buffer.bufferAnyProperty(_anySetter,propName,_anySetter.deserialize(b2.asParserOnFirstToken(),ctxt));\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,_beanType.getRawClass(),propName,ctxt);\n      }\n      continue;\n    }\n  }\n  Object bean;\n  try {\n    bean\u003dcreator.build(ctxt,buffer);\n  }\n catch (  Exception e) {\n    wrapInstantiationProblem(e,ctxt);\n    return null;\n  }\n  return _unwrappedPropertyHandler.processUnwrapped(p,ctxt,bean,tokens);\n}",
    "begin_line": 736,
    "end_line": 840,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeWithExternalTypeId#849",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object deserializeWithExternalTypeId(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_propertyBasedCreator !\u003d null) {\n    return deserializeUsingPropertyBasedWithExternalTypeId(p,ctxt);\n  }\n  if (_delegateDeserializer !\u003d null) {\n    return _valueInstantiator.createUsingDelegate(ctxt,_delegateDeserializer.deserialize(p,ctxt));\n  }\n  return deserializeWithExternalTypeId(p,ctxt,_valueInstantiator.createUsingDefault(ctxt));\n}",
    "begin_line": 849,
    "end_line": 866,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeWithExternalTypeId#868",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "protected Object deserializeWithExternalTypeId(JsonParser p,DeserializationContext ctxt,Object bean) throws IOException {\n  final Class\u003c?\u003e activeView\u003d_needViewProcesing ? ctxt.getActiveView() : null;\n  final ExternalTypeHandler ext\u003d_externalTypeIdHandler.start();\n  for (JsonToken t\u003dp.getCurrentToken(); t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String propName\u003dp.getCurrentName();\n    t\u003dp.nextToken();\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      if (t.isScalarValue()) {\n        ext.handleTypePropertyValue(p,ctxt,propName,bean);\n      }\n      if (activeView !\u003d null \u0026\u0026 !prop.visibleInView(activeView)) {\n        p.skipChildren();\n        continue;\n      }\n      try {\n        prop.deserializeAndSet(p,ctxt,bean);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,bean,propName);\n      continue;\n    }\n    if (ext.handlePropertyValue(p,ctxt,propName,bean)) {\n      continue;\n    }\n    if (_anySetter !\u003d null) {\n      try {\n        _anySetter.deserializeAndSet(p,ctxt,bean,propName);\n      }\n catch (      Exception e) {\n        wrapAndThrow(e,bean,propName,ctxt);\n      }\n      continue;\n    }\n    handleUnknownProperty(p,ctxt,bean,propName);\n  }\n  return ext.complete(p,ctxt,bean);\n}",
    "begin_line": 868,
    "end_line": 918,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId#921",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p,DeserializationContext ctxt) throws IOException {\n  final ExternalTypeHandler ext\u003d_externalTypeIdHandler.start();\n  final PropertyBasedCreator creator\u003d_propertyBasedCreator;\n  PropertyValueBuffer buffer\u003dcreator.startBuilding(p,ctxt,_objectIdReader);\n  TokenBuffer tokens\u003dnew TokenBuffer(p,ctxt);\n  tokens.writeStartObject();\n  JsonToken t\u003dp.getCurrentToken();\n  for (; t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String propName\u003dp.getCurrentName();\n    p.nextToken();\n    SettableBeanProperty creatorProp\u003dcreator.findCreatorProperty(propName);\n    if (creatorProp !\u003d null) {\n      if (ext.handlePropertyValue(p,ctxt,propName,null)) {\n        ;\n      }\n else {\n        if (buffer.assignParameter(creatorProp,_deserializeWithErrorWrapping(p,ctxt,creatorProp))) {\n          t\u003dp.nextToken();\n          Object bean;\n          try {\n            bean\u003dcreator.build(ctxt,buffer);\n          }\n catch (          Exception e) {\n            wrapAndThrow(e,_beanType.getRawClass(),propName,ctxt);\n            continue;\n          }\n          while (t \u003d\u003d JsonToken.FIELD_NAME) {\n            p.nextToken();\n            tokens.copyCurrentStructure(p);\n            t\u003dp.nextToken();\n          }\n          if (bean.getClass() !\u003d _beanType.getRawClass()) {\n            return ctxt.reportBadDefinition(_beanType,String.format(\"Cannot create polymorphic instances with external type ids (%s -\u003e %s)\",_beanType,bean.getClass()));\n          }\n          return ext.complete(p,ctxt,bean);\n        }\n      }\n      continue;\n    }\n    if (buffer.readIdProperty(propName)) {\n      continue;\n    }\n    SettableBeanProperty prop\u003d_beanProperties.find(propName);\n    if (prop !\u003d null) {\n      buffer.bufferProperty(prop,prop.deserialize(p,ctxt));\n      continue;\n    }\n    if (ext.handlePropertyValue(p,ctxt,propName,null)) {\n      continue;\n    }\n    if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n      handleIgnoredProperty(p,ctxt,handledType(),propName);\n      continue;\n    }\n    if (_anySetter !\u003d null) {\n      buffer.bufferAnyProperty(_anySetter,propName,_anySetter.deserialize(p,ctxt));\n    }\n  }\n  tokens.writeEndObject();\n  try {\n    return ext.complete(p,ctxt,buffer,creator);\n  }\n catch (  Exception e) {\n    return wrapInstantiationProblem(e,ctxt);\n  }\n}",
    "begin_line": 921,
    "end_line": 1005,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializer._creatorReturnedNullException#1013",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer._creatorReturnedNullException()",
    "snippet": "protected Exception _creatorReturnedNullException(){\n  if (_nullFromCreator \u003d\u003d null) {\n    _nullFromCreator\u003dnew NullPointerException(\"JSON Creator returned null\");\n  }\n  return _nullFromCreator;\n}",
    "begin_line": 1013,
    "end_line": 1018,
    "comment": "/** \n * Helper method for getting a lazily construct exception to be reported to  {@link DeserializationContext#handleInstantiationProblem(Class,Object,Throwable)}.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanReferring.BeanReferring#1029",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.BeanReferring(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "BeanReferring(DeserializationContext ctxt,UnresolvedForwardReference ref,JavaType valueType,PropertyValueBuffer buffer,SettableBeanProperty prop){\n  super(ref,valueType);\n  _context\u003dctxt;\n  _prop\u003dprop;\n}",
    "begin_line": 1029,
    "end_line": 1035,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanReferring.setBean#1037",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.setBean(java.lang.Object)",
    "snippet": "public void setBean(Object bean){\n  _bean\u003dbean;\n}",
    "begin_line": 1037,
    "end_line": 1039,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanReferring.handleResolvedForwardReference#1042",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializer.handleResolvedForwardReference(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void handleResolvedForwardReference(Object id,Object value) throws IOException {\n  if (_bean \u003d\u003d null) {\n    _context.reportInputMismatch(_prop,\"Cannot resolve ObjectId forward reference using property \u0027%s\u0027 (of type %s): Bean not yet resolved\",_prop.getName(),_prop.getDeclaringClass().getName());\n  }\n  _prop.set(_bean,value);\n}",
    "begin_line": 1042,
    "end_line": 1050,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e, java.util.Set\u003cjava.lang.String\u003e, boolean, boolean)",
    "snippet": "protected BeanDeserializerBase(BeanDeserializerBuilder builder,BeanDescription beanDesc,BeanPropertyMap properties,Map\u003cString,SettableBeanProperty\u003e backRefs,Set\u003cString\u003e ignorableProps,boolean ignoreAllUnknown,boolean hasViews){\n  super(beanDesc.getType());\n  _beanType\u003dbeanDesc.getType();\n  _valueInstantiator\u003dbuilder.getValueInstantiator();\n  _beanProperties\u003dproperties;\n  _backRefs\u003dbackRefs;\n  _ignorableProps\u003dignorableProps;\n  _ignoreAllUnknown\u003dignoreAllUnknown;\n  _anySetter\u003dbuilder.getAnySetter();\n  List\u003cValueInjector\u003e injectables\u003dbuilder.getInjectables();\n  _injectables\u003d(injectables \u003d\u003d null || injectables.isEmpty()) ? null : injectables.toArray(new ValueInjector[injectables.size()]);\n  _objectIdReader\u003dbuilder.getObjectIdReader();\n  _nonStandardCreation\u003d(_unwrappedPropertyHandler !\u003d null) || _valueInstantiator.canCreateUsingDelegate() || _valueInstantiator.canCreateUsingArrayDelegate()|| _valueInstantiator.canCreateFromObjectWith()|| !_valueInstantiator.canCreateUsingDefault();\n  JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n  _serializationShape\u003d(format \u003d\u003d null) ? null : format.getShape();\n  _needViewProcesing\u003dhasViews;\n  _vanillaProcessing\u003d!_nonStandardCreation \u0026\u0026 (_injectables \u003d\u003d null) \u0026\u0026 !_needViewProcesing\u0026\u0026 (_objectIdReader \u003d\u003d null);\n}",
    "begin_line": 195,
    "end_line": 233,
    "comment": "/** \n * Constructor used when initially building a deserializer instance, given a  {@link BeanDeserializerBuilder} thatcontains configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase)",
    "snippet": "protected BeanDeserializerBase(BeanDeserializerBase src){\n  this(src,src._ignoreAllUnknown);\n}",
    "begin_line": 235,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, boolean)",
    "snippet": "protected BeanDeserializerBase(BeanDeserializerBase src,boolean ignoreAllUnknown){\n  super(src._beanType);\n  _beanType\u003dsrc._beanType;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _beanProperties\u003dsrc._beanProperties;\n  _backRefs\u003dsrc._backRefs;\n  _ignorableProps\u003dsrc._ignorableProps;\n  _ignoreAllUnknown\u003dignoreAllUnknown;\n  _anySetter\u003dsrc._anySetter;\n  _injectables\u003dsrc._injectables;\n  _objectIdReader\u003dsrc._objectIdReader;\n  _nonStandardCreation\u003dsrc._nonStandardCreation;\n  _unwrappedPropertyHandler\u003dsrc._unwrappedPropertyHandler;\n  _needViewProcesing\u003dsrc._needViewProcesing;\n  _serializationShape\u003dsrc._serializationShape;\n  _vanillaProcessing\u003dsrc._vanillaProcessing;\n}",
    "begin_line": 239,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "protected BeanDeserializerBase(BeanDeserializerBase src,NameTransformer unwrapper){\n  super(src._beanType);\n  _beanType\u003dsrc._beanType;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _backRefs\u003dsrc._backRefs;\n  _ignorableProps\u003dsrc._ignorableProps;\n  _ignoreAllUnknown\u003d(unwrapper !\u003d null) || src._ignoreAllUnknown;\n  _anySetter\u003dsrc._anySetter;\n  _injectables\u003dsrc._injectables;\n  _objectIdReader\u003dsrc._objectIdReader;\n  _nonStandardCreation\u003dsrc._nonStandardCreation;\n  UnwrappedPropertyHandler uph\u003dsrc._unwrappedPropertyHandler;\n  if (unwrapper !\u003d null) {\n    if (uph !\u003d null) {\n      uph\u003duph.renameAll(unwrapper);\n    }\n    _beanProperties\u003dsrc._beanProperties.renameAll(unwrapper);\n  }\n else {\n    _beanProperties\u003dsrc._beanProperties;\n  }\n  _unwrappedPropertyHandler\u003duph;\n  _needViewProcesing\u003dsrc._needViewProcesing;\n  _serializationShape\u003dsrc._serializationShape;\n  _vanillaProcessing\u003dfalse;\n}",
    "begin_line": 265,
    "end_line": 301,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)",
    "snippet": "public BeanDeserializerBase(BeanDeserializerBase src,ObjectIdReader oir){\n  super(src._beanType);\n  _beanType\u003dsrc._beanType;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _backRefs\u003dsrc._backRefs;\n  _ignorableProps\u003dsrc._ignorableProps;\n  _ignoreAllUnknown\u003dsrc._ignoreAllUnknown;\n  _anySetter\u003dsrc._anySetter;\n  _injectables\u003dsrc._injectables;\n  _nonStandardCreation\u003dsrc._nonStandardCreation;\n  _unwrappedPropertyHandler\u003dsrc._unwrappedPropertyHandler;\n  _needViewProcesing\u003dsrc._needViewProcesing;\n  _serializationShape\u003dsrc._serializationShape;\n  _objectIdReader\u003doir;\n  if (oir \u003d\u003d null) {\n    _beanProperties\u003dsrc._beanProperties;\n    _vanillaProcessing\u003dsrc._vanillaProcessing;\n  }\n else {\n    ObjectIdValueProperty idProp\u003dnew ObjectIdValueProperty(oir,PropertyMetadata.STD_REQUIRED);\n    _beanProperties\u003dsrc._beanProperties.withProperty(idProp);\n    _vanillaProcessing\u003dfalse;\n  }\n}",
    "begin_line": 303,
    "end_line": 338,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public BeanDeserializerBase(BeanDeserializerBase src,Set\u003cString\u003e ignorableProps){\n  super(src._beanType);\n  _beanType\u003dsrc._beanType;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _backRefs\u003dsrc._backRefs;\n  _ignorableProps\u003dignorableProps;\n  _ignoreAllUnknown\u003dsrc._ignoreAllUnknown;\n  _anySetter\u003dsrc._anySetter;\n  _injectables\u003dsrc._injectables;\n  _nonStandardCreation\u003dsrc._nonStandardCreation;\n  _unwrappedPropertyHandler\u003dsrc._unwrappedPropertyHandler;\n  _needViewProcesing\u003dsrc._needViewProcesing;\n  _serializationShape\u003dsrc._serializationShape;\n  _vanillaProcessing\u003dsrc._vanillaProcessing;\n  _objectIdReader\u003dsrc._objectIdReader;\n  _beanProperties\u003dsrc._beanProperties.withoutProperties(ignorableProps);\n}",
    "begin_line": 340,
    "end_line": 366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.BeanDeserializerBase#371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.BeanDeserializerBase(com.fasterxml.jackson.databind.deser.BeanDeserializerBase, com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap)",
    "snippet": "protected BeanDeserializerBase(BeanDeserializerBase src,BeanPropertyMap beanProps){\n  super(src._beanType);\n  _beanType\u003dsrc._beanType;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _beanProperties\u003dbeanProps;\n  _backRefs\u003dsrc._backRefs;\n  _ignorableProps\u003dsrc._ignorableProps;\n  _ignoreAllUnknown\u003dsrc._ignoreAllUnknown;\n  _anySetter\u003dsrc._anySetter;\n  _injectables\u003dsrc._injectables;\n  _objectIdReader\u003dsrc._objectIdReader;\n  _nonStandardCreation\u003dsrc._nonStandardCreation;\n  _unwrappedPropertyHandler\u003dsrc._unwrappedPropertyHandler;\n  _needViewProcesing\u003dsrc._needViewProcesing;\n  _serializationShape\u003dsrc._serializationShape;\n  _vanillaProcessing\u003dsrc._vanillaProcessing;\n}",
    "begin_line": 371,
    "end_line": 394,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.unwrappingDeserializer#397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.unwrappingDeserializer(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "@Override public abstract JsonDeserializer\u003cObject\u003e unwrappingDeserializer(NameTransformer unwrapper);",
    "begin_line": 397,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.withObjectIdReader#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.withObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)",
    "snippet": "public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir);",
    "begin_line": 399,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.withIgnorableProperties#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.withIgnorableProperties(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public abstract BeanDeserializerBase withIgnorableProperties(Set\u003cString\u003e ignorableProps);",
    "begin_line": 401,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.withBeanProperties#409",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.withBeanProperties(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap)",
    "snippet": "public BeanDeserializerBase withBeanProperties(BeanPropertyMap props){\n  throw new UnsupportedOperationException(\"Class \" + getClass().getName() + \" does not override `withBeanProperties()`, needs to\");\n}",
    "begin_line": 409,
    "end_line": 412,
    "comment": "/** \n * Mutant factory method that custom sub-classes must override; not left as abstract to prevent more drastic backwards compatibility problems.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.asArrayDeserializer#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.asArrayDeserializer()",
    "snippet": "protected abstract BeanDeserializerBase asArrayDeserializer();",
    "begin_line": 421,
    "end_line": 421,
    "comment": "/** \n * Fluent factory for creating a variant that can handle POJO output as a JSON Array. Implementations may ignore this request if no such input is possible.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.resolve#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n  ExternalTypeHandler.Builder extTypes\u003dnull;\n  SettableBeanProperty[] creatorProps;\n  if (_valueInstantiator.canCreateFromObjectWith()) {\n    creatorProps\u003d_valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n    if (_ignorableProps !\u003d null) {\n      for (int i\u003d0, end\u003dcreatorProps.length; i \u003c end; ++i) {\n        SettableBeanProperty prop\u003dcreatorProps[i];\n        if (_ignorableProps.contains(prop.getName())) {\n          creatorProps[i].markAsIgnorable();\n        }\n      }\n    }\n  }\n else {\n    creatorProps\u003dnull;\n  }\n  UnwrappedPropertyHandler unwrapped\u003dnull;\n  for (  SettableBeanProperty prop : _beanProperties) {\n    if (!prop.hasValueDeserializer()) {\n      JsonDeserializer\u003c?\u003e deser\u003dfindConvertingDeserializer(ctxt,prop);\n      if (deser \u003d\u003d null) {\n        deser\u003dctxt.findNonContextualValueDeserializer(prop.getType());\n      }\n      SettableBeanProperty newProp\u003dprop.withValueDeserializer(deser);\n      _replaceProperty(_beanProperties,creatorProps,prop,newProp);\n    }\n  }\n  for (  SettableBeanProperty origProp : _beanProperties) {\n    SettableBeanProperty prop\u003dorigProp;\n    JsonDeserializer\u003c?\u003e deser\u003dprop.getValueDeserializer();\n    deser\u003dctxt.handlePrimaryContextualization(deser,prop,prop.getType());\n    prop\u003dprop.withValueDeserializer(deser);\n    prop\u003d_resolveManagedReferenceProperty(ctxt,prop);\n    if (!(prop instanceof ManagedReferenceProperty)) {\n      prop\u003d_resolvedObjectIdProperty(ctxt,prop);\n    }\n    NameTransformer xform\u003d_findPropertyUnwrapper(ctxt,prop);\n    if (xform !\u003d null) {\n      JsonDeserializer\u003cObject\u003e orig\u003dprop.getValueDeserializer();\n      JsonDeserializer\u003cObject\u003e unwrapping\u003dorig.unwrappingDeserializer(xform);\n      if (unwrapping !\u003d orig \u0026\u0026 unwrapping !\u003d null) {\n        prop\u003dprop.withValueDeserializer(unwrapping);\n        if (unwrapped \u003d\u003d null) {\n          unwrapped\u003dnew UnwrappedPropertyHandler();\n        }\n        unwrapped.addProperty(prop);\n        _beanProperties.remove(prop);\n        continue;\n      }\n    }\n    final PropertyMetadata md\u003dprop.getMetadata();\n    prop\u003d_resolveMergeAndNullSettings(ctxt,prop,md);\n    prop\u003d_resolveInnerClassValuedProperty(ctxt,prop);\n    if (prop !\u003d origProp) {\n      _replaceProperty(_beanProperties,creatorProps,origProp,prop);\n    }\n    if (prop.hasValueTypeDeserializer()) {\n      TypeDeserializer typeDeser\u003dprop.getValueTypeDeserializer();\n      if (typeDeser.getTypeInclusion() \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY) {\n        if (extTypes \u003d\u003d null) {\n          extTypes\u003dExternalTypeHandler.builder(_beanType);\n        }\n        extTypes.addExternal(prop,typeDeser);\n        _beanProperties.remove(prop);\n        continue;\n      }\n    }\n  }\n  if ((_anySetter !\u003d null) \u0026\u0026 !_anySetter.hasValueDeserializer()) {\n    _anySetter\u003d_anySetter.withValueDeserializer(findDeserializer(ctxt,_anySetter.getType(),_anySetter.getProperty()));\n  }\n  if (_valueInstantiator.canCreateUsingDelegate()) {\n    JavaType delegateType\u003d_valueInstantiator.getDelegateType(ctxt.getConfig());\n    if (delegateType \u003d\u003d null) {\n      ctxt.reportBadDefinition(_beanType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\",_beanType,_valueInstantiator.getClass().getName()));\n    }\n    _delegateDeserializer\u003d_findDelegateDeserializer(ctxt,delegateType,_valueInstantiator.getDelegateCreator());\n  }\n  if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n    JavaType delegateType\u003d_valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n    if (delegateType \u003d\u003d null) {\n      ctxt.reportBadDefinition(_beanType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\",_beanType,_valueInstantiator.getClass().getName()));\n    }\n    _arrayDelegateDeserializer\u003d_findDelegateDeserializer(ctxt,delegateType,_valueInstantiator.getArrayDelegateCreator());\n  }\n  if (creatorProps !\u003d null) {\n    _propertyBasedCreator\u003dPropertyBasedCreator.construct(ctxt,_valueInstantiator,creatorProps,_beanProperties);\n  }\n  if (extTypes !\u003d null) {\n    _externalTypeIdHandler\u003dextTypes.build(_beanProperties);\n    _nonStandardCreation\u003dtrue;\n  }\n  _unwrappedPropertyHandler\u003dunwrapped;\n  if (unwrapped !\u003d null) {\n    _nonStandardCreation\u003dtrue;\n  }\n  _vanillaProcessing\u003d_vanillaProcessing \u0026\u0026 !_nonStandardCreation;\n}",
    "begin_line": 435,
    "end_line": 588,
    "comment": "/** \n * Method called to finalize setup of this deserializer, after deserializer itself has been registered. This is needed to handle recursive and transitive dependencies.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._replaceProperty#593",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._replaceProperty(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, com.fasterxml.jackson.databind.deser.SettableBeanProperty[], com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected void _replaceProperty(BeanPropertyMap props,SettableBeanProperty[] creatorProps,SettableBeanProperty origProp,SettableBeanProperty newProp){\n  props.replace(origProp,newProp);\n  if (creatorProps !\u003d null) {\n    for (int i\u003d0, len\u003dcreatorProps.length; i \u003c len; ++i) {\n      if (creatorProps[i] \u003d\u003d origProp) {\n        creatorProps[i]\u003dnewProp;\n        return;\n      }\n    }\n  }\n}",
    "begin_line": 593,
    "end_line": 618,
    "comment": "/** \n * @since 2.8.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._findDelegateDeserializer#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._findDelegateDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "@SuppressWarnings(\"unchecked\") private JsonDeserializer\u003cObject\u003e _findDelegateDeserializer(DeserializationContext ctxt,JavaType delegateType,AnnotatedWithParams delegateCreator) throws JsonMappingException {\n  BeanProperty.Std property\u003dnew BeanProperty.Std(TEMP_PROPERTY_NAME,delegateType,null,delegateCreator,PropertyMetadata.STD_OPTIONAL);\n  TypeDeserializer td\u003ddelegateType.getTypeHandler();\n  if (td \u003d\u003d null) {\n    td\u003dctxt.getConfig().findTypeDeserializer(delegateType);\n  }\n  JsonDeserializer\u003cObject\u003e dd\u003ddelegateType.getValueHandler();\n  if (dd \u003d\u003d null) {\n    dd\u003dfindDeserializer(ctxt,delegateType,property);\n  }\n else {\n    dd\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handleSecondaryContextualization(dd,property,delegateType);\n  }\n  if (td !\u003d null) {\n    td\u003dtd.forProperty(property);\n    return new TypeWrappedDeserializer(td,dd);\n  }\n  return dd;\n}",
    "begin_line": 621,
    "end_line": 645,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.findConvertingDeserializer#657",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findConvertingDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findConvertingDeserializer(DeserializationContext ctxt,SettableBeanProperty prop) throws JsonMappingException {\n  final AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    Object convDef\u003dintr.findDeserializationConverter(prop.getMember());\n    if (convDef !\u003d null) {\n      Converter\u003cObject,Object\u003e conv\u003dctxt.converterInstance(prop.getMember(),convDef);\n      JavaType delegateType\u003dconv.getInputType(ctxt.getTypeFactory());\n      JsonDeserializer\u003c?\u003e deser\u003dctxt.findNonContextualValueDeserializer(delegateType);\n      return new StdDelegatingDeserializer\u003cObject\u003e(conv,delegateType,deser);\n    }\n  }\n  return null;\n}",
    "begin_line": 657,
    "end_line": 674,
    "comment": "/** \n * Helper method that can be used to see if specified property is annotated to indicate use of a converter for property value (in case of container types, it is container type itself, not key or content type). \u003cp\u003e NOTE: returned deserializer is NOT yet contextualized, caller needs to take care to do that.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.createContextual#684",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt,BeanProperty property) throws JsonMappingException {\n  ObjectIdReader oir\u003d_objectIdReader;\n  final AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  final AnnotatedMember accessor\u003d_neitherNull(property,intr) ? property.getMember() : null;\n  if (accessor !\u003d null) {\n    ObjectIdInfo objectIdInfo\u003dintr.findObjectIdInfo(accessor);\n    if (objectIdInfo !\u003d null) {\n      objectIdInfo\u003dintr.findObjectReferenceInfo(accessor,objectIdInfo);\n      Class\u003c?\u003e implClass\u003dobjectIdInfo.getGeneratorType();\n      JavaType idType;\n      SettableBeanProperty idProp;\n      ObjectIdGenerator\u003c?\u003e idGen;\n      ObjectIdResolver resolver\u003dctxt.objectIdResolverInstance(accessor,objectIdInfo);\n      if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n        PropertyName propName\u003dobjectIdInfo.getPropertyName();\n        idProp\u003dfindProperty(propName);\n        if (idProp \u003d\u003d null) {\n          ctxt.reportBadDefinition(_beanType,String.format(\"Invalid Object Id definition for %s: cannot find property with name \u0027%s\u0027\",handledType().getName(),propName));\n        }\n        idType\u003didProp.getType();\n        idGen\u003dnew PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n      }\n else {\n        JavaType type\u003dctxt.constructType(implClass);\n        idType\u003dctxt.getTypeFactory().findTypeParameters(type,ObjectIdGenerator.class)[0];\n        idProp\u003dnull;\n        idGen\u003dctxt.objectIdGeneratorInstance(accessor,objectIdInfo);\n      }\n      JsonDeserializer\u003c?\u003e deser\u003dctxt.findRootValueDeserializer(idType);\n      oir\u003dObjectIdReader.construct(idType,objectIdInfo.getPropertyName(),idGen,deser,idProp,resolver);\n    }\n  }\n  BeanDeserializerBase contextual\u003dthis;\n  if (oir !\u003d null \u0026\u0026 oir !\u003d _objectIdReader) {\n    contextual\u003dcontextual.withObjectIdReader(oir);\n  }\n  if (accessor !\u003d null) {\n    JsonIgnoreProperties.Value ignorals\u003dintr.findPropertyIgnorals(accessor);\n    if (ignorals !\u003d null) {\n      Set\u003cString\u003e ignored\u003dignorals.findIgnoredForDeserialization();\n      if (!ignored.isEmpty()) {\n        Set\u003cString\u003e prev\u003dcontextual._ignorableProps;\n        if ((prev !\u003d null) \u0026\u0026 !prev.isEmpty()) {\n          ignored\u003dnew HashSet\u003cString\u003e(ignored);\n          ignored.addAll(prev);\n        }\n        contextual\u003dcontextual.withIgnorableProperties(ignored);\n      }\n    }\n  }\n  JsonFormat.Value format\u003dfindFormatOverrides(ctxt,property,handledType());\n  JsonFormat.Shape shape\u003dnull;\n  if (format !\u003d null) {\n    if (format.hasShape()) {\n      shape\u003dformat.getShape();\n    }\n    Boolean B\u003dformat.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);\n    if (B !\u003d null) {\n      BeanPropertyMap propsOrig\u003d_beanProperties;\n      BeanPropertyMap props\u003dpropsOrig.withCaseInsensitivity(B.booleanValue());\n      if (props !\u003d propsOrig) {\n        contextual\u003dcontextual.withBeanProperties(props);\n      }\n    }\n  }\n  if (shape \u003d\u003d null) {\n    shape\u003d_serializationShape;\n  }\n  if (shape \u003d\u003d JsonFormat.Shape.ARRAY) {\n    contextual\u003dcontextual.asArrayDeserializer();\n  }\n  return contextual;\n}",
    "begin_line": 684,
    "end_line": 771,
    "comment": "/** \n * Although most of post-processing is done in resolve(), we only get access to referring property\u0027s annotations here; and this is needed to support per-property ObjectIds. We will also consider Shape transformations (read from Array) at this point, since it may come from either Class definition or property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._resolveManagedReferenceProperty#777",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._resolveManagedReferenceProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt,SettableBeanProperty prop) throws JsonMappingException {\n  String refName\u003dprop.getManagedReferenceName();\n  if (refName \u003d\u003d null) {\n    return prop;\n  }\n  JsonDeserializer\u003c?\u003e valueDeser\u003dprop.getValueDeserializer();\n  SettableBeanProperty backProp\u003dvalueDeser.findBackReference(refName);\n  if (backProp \u003d\u003d null) {\n    ctxt.reportBadDefinition(_beanType,String.format(\"Cannot handle managed/back reference \u0027%s\u0027: no back reference property found from type %s\",refName,prop.getType()));\n  }\n  JavaType referredType\u003d_beanType;\n  JavaType backRefType\u003dbackProp.getType();\n  boolean isContainer\u003dprop.getType().isContainerType();\n  if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) {\n    ctxt.reportBadDefinition(_beanType,String.format(\"Cannot handle managed/back reference \u0027%s\u0027: back reference type (%s) not compatible with managed type (%s)\",refName,backRefType.getRawClass().getName(),referredType.getRawClass().getName()));\n  }\n  return new ManagedReferenceProperty(prop,refName,backProp,isContainer);\n}",
    "begin_line": 777,
    "end_line": 803,
    "comment": "/** \n * Helper method called to see if given property is part of \u0027managed\u0027 property pair (managed + back reference), and if so, handle resolution details.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._resolvedObjectIdProperty#809",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._resolvedObjectIdProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt,SettableBeanProperty prop) throws JsonMappingException {\n  ObjectIdInfo objectIdInfo\u003dprop.getObjectIdInfo();\n  JsonDeserializer\u003cObject\u003e valueDeser\u003dprop.getValueDeserializer();\n  ObjectIdReader objectIdReader\u003d(valueDeser \u003d\u003d null) ? null : valueDeser.getObjectIdReader();\n  if (objectIdInfo \u003d\u003d null \u0026\u0026 objectIdReader \u003d\u003d null) {\n    return prop;\n  }\n  return new ObjectIdReferenceProperty(prop,objectIdInfo);\n}",
    "begin_line": 809,
    "end_line": 819,
    "comment": "/** \n * Method that wraps given property with  {@link ObjectIdReferenceProperty}in case where object id resolution is required.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._findPropertyUnwrapper#825",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._findPropertyUnwrapper(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected NameTransformer _findPropertyUnwrapper(DeserializationContext ctxt,SettableBeanProperty prop) throws JsonMappingException {\n  AnnotatedMember am\u003dprop.getMember();\n  if (am !\u003d null) {\n    NameTransformer unwrapper\u003dctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(am);\n    if (unwrapper !\u003d null) {\n      if (prop instanceof CreatorProperty) {\n        ctxt.reportBadDefinition(getValueType(),String.format(\"Cannot define Creator property \\\"%s\\\" as `@JsonUnwrapped`: combination not yet supported\",prop.getName()));\n      }\n      return unwrapper;\n    }\n  }\n  return null;\n}",
    "begin_line": 825,
    "end_line": 844,
    "comment": "/** \n * Helper method called to see if given property might be so-called unwrapped property: these require special handling.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._resolveInnerClassValuedProperty#850",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._resolveInnerClassValuedProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt,SettableBeanProperty prop){\n  JsonDeserializer\u003cObject\u003e deser\u003dprop.getValueDeserializer();\n  if (deser instanceof BeanDeserializerBase) {\n    BeanDeserializerBase bd\u003d(BeanDeserializerBase)deser;\n    ValueInstantiator vi\u003dbd.getValueInstantiator();\n    if (!vi.canCreateUsingDefault()) {\n      Class\u003c?\u003e valueClass\u003dprop.getType().getRawClass();\n      Class\u003c?\u003e enclosing\u003dClassUtil.getOuterClass(valueClass);\n      if ((enclosing !\u003d null) \u0026\u0026 (enclosing \u003d\u003d _beanType.getRawClass())) {\n        for (        Constructor\u003c?\u003e ctor : valueClass.getConstructors()) {\n          Class\u003c?\u003e[] paramTypes\u003dctor.getParameterTypes();\n          if (paramTypes.length \u003d\u003d 1) {\n            if (enclosing.equals(paramTypes[0])) {\n              if (ctxt.canOverrideAccessModifiers()) {\n                ClassUtil.checkAndFixAccess(ctor,ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n              }\n              return new InnerClassProperty(prop,ctor);\n            }\n          }\n        }\n      }\n    }\n  }\n  return prop;\n}",
    "begin_line": 850,
    "end_line": 882,
    "comment": "/** \n * Helper method that will handle gruesome details of dealing with properties that have non-static inner class as value...\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._resolveMergeAndNullSettings#885",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._resolveMergeAndNullSettings(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.PropertyMetadata)",
    "snippet": "protected SettableBeanProperty _resolveMergeAndNullSettings(DeserializationContext ctxt,SettableBeanProperty prop,PropertyMetadata propMetadata) throws JsonMappingException {\n  PropertyMetadata.MergeInfo merge\u003dpropMetadata.getMergeInfo();\n  if (merge !\u003d null) {\n    JsonDeserializer\u003c?\u003e valueDeser\u003dprop.getValueDeserializer();\n    Boolean mayMerge\u003dvalueDeser.supportsUpdate(ctxt.getConfig());\n    if (mayMerge \u003d\u003d null) {\n      if (merge.fromDefaults) {\n        return prop;\n      }\n    }\n else     if (!mayMerge.booleanValue()) {\n      if (!merge.fromDefaults) {\n        ctxt.reportBadMerge(valueDeser);\n      }\n      return prop;\n    }\n    AnnotatedMember accessor\u003dmerge.getter;\n    accessor.fixAccess(ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    if (!(prop instanceof SetterlessProperty)) {\n      prop\u003dMergingSettableBeanProperty.construct(prop,accessor);\n    }\n  }\n  NullValueProvider nuller\u003dfindValueNullProvider(ctxt,prop,propMetadata);\n  if (nuller !\u003d null) {\n    prop\u003dprop.withNullProvider(nuller);\n  }\n  return prop;\n}",
    "begin_line": 885,
    "end_line": 922,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getNullAccessPattern#931",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getNullAccessPattern()",
    "snippet": "@Override public AccessPattern getNullAccessPattern(){\n  return AccessPattern.ALWAYS_NULL;\n}",
    "begin_line": 931,
    "end_line": 934,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getEmptyAccessPattern#937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getEmptyAccessPattern()",
    "snippet": "@Override public AccessPattern getEmptyAccessPattern(){\n  return AccessPattern.DYNAMIC;\n}",
    "begin_line": 937,
    "end_line": 940,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getEmptyValue#943",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  try {\n    return _valueInstantiator.createUsingDefault(ctxt);\n  }\n catch (  IOException e) {\n    return ClassUtil.throwAsMappingException(ctxt,e);\n  }\n}",
    "begin_line": 943,
    "end_line": 950,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.isCachable#959",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return true;\n}",
    "begin_line": 959,
    "end_line": 959,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.supportsUpdate#962",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return Boolean.TRUE;\n}",
    "begin_line": 962,
    "end_line": 967,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handledType#970",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handledType()",
    "snippet": "@Override public Class\u003c?\u003e handledType(){\n  return _beanType.getRawClass();\n}",
    "begin_line": 970,
    "end_line": 972,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getObjectIdReader#980",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getObjectIdReader()",
    "snippet": "@Override public ObjectIdReader getObjectIdReader(){\n  return _objectIdReader;\n}",
    "begin_line": 980,
    "end_line": 982,
    "comment": "/** \n * Overridden to return true for those instances that are handling value for which Object Identity handling is enabled (either via value type or referring property).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.hasProperty#984",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.hasProperty(java.lang.String)",
    "snippet": "public boolean hasProperty(String propertyName){\n  return _beanProperties.find(propertyName) !\u003d null;\n}",
    "begin_line": 984,
    "end_line": 986,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.hasViews#988",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.hasViews()",
    "snippet": "public boolean hasViews(){\n  return _needViewProcesing;\n}",
    "begin_line": 988,
    "end_line": 990,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getPropertyCount#995",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getPropertyCount()",
    "snippet": "public int getPropertyCount(){\n  return _beanProperties.size();\n}",
    "begin_line": 995,
    "end_line": 997,
    "comment": "/** \n * Accessor for checking number of deserialized properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getKnownPropertyNames#1000",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getKnownPropertyNames()",
    "snippet": "@Override public Collection\u003cObject\u003e getKnownPropertyNames(){\n  ArrayList\u003cObject\u003e names\u003dnew ArrayList\u003cObject\u003e();\n  for (  SettableBeanProperty prop : _beanProperties) {\n    names.add(prop.getName());\n  }\n  return names;\n}",
    "begin_line": 1000,
    "end_line": 1006,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getBeanClass#1012",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getBeanClass()",
    "snippet": "@Deprecated public final Class\u003c?\u003e getBeanClass(){\n  return _beanType.getRawClass();\n}",
    "begin_line": 1012,
    "end_line": 1012,
    "comment": "/** \n * @deprecated Since 2.3, use {@link #handledType()} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getValueType#1015",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueType()",
    "snippet": "@Override public JavaType getValueType(){\n  return _beanType;\n}",
    "begin_line": 1015,
    "end_line": 1015,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.properties#1024",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.properties()",
    "snippet": "public Iterator\u003cSettableBeanProperty\u003e properties(){\n  if (_beanProperties \u003d\u003d null) {\n    throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\");\n  }\n  return _beanProperties.iterator();\n}",
    "begin_line": 1024,
    "end_line": 1030,
    "comment": "/** \n * Accessor for iterating over properties this deserializer uses; with the exception that properties passed via Creator methods (specifically, \"property-based constructor\") are not included, but can be accessed separate by calling {@link #creatorProperties}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.creatorProperties#1039",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.creatorProperties()",
    "snippet": "public Iterator\u003cSettableBeanProperty\u003e creatorProperties(){\n  if (_propertyBasedCreator \u003d\u003d null) {\n    return Collections.\u003cSettableBeanProperty\u003eemptyList().iterator();\n  }\n  return _propertyBasedCreator.properties().iterator();\n}",
    "begin_line": 1039,
    "end_line": 1045,
    "comment": "/** \n * Accessor for finding properties that represents values to pass through property-based creator method (constructor or factory method)\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.findProperty#1047",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public SettableBeanProperty findProperty(PropertyName propertyName){\n  return findProperty(propertyName.getSimpleName());\n}",
    "begin_line": 1047,
    "end_line": 1051,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.findProperty#1060",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findProperty(java.lang.String)",
    "snippet": "public SettableBeanProperty findProperty(String propertyName){\n  SettableBeanProperty prop\u003d(_beanProperties \u003d\u003d null) ? null : _beanProperties.find(propertyName);\n  if (prop \u003d\u003d null \u0026\u0026 _propertyBasedCreator !\u003d null) {\n    prop\u003d_propertyBasedCreator.findCreatorProperty(propertyName);\n  }\n  return prop;\n}",
    "begin_line": 1060,
    "end_line": 1068,
    "comment": "/** \n * Accessor for finding the property with given name, if POJO has one. Name used is the external name, i.e. name used in external data representation (JSON).\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.findProperty#1080",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findProperty(int)",
    "snippet": "public SettableBeanProperty findProperty(int propertyIndex){\n  SettableBeanProperty prop\u003d(_beanProperties \u003d\u003d null) ? null : _beanProperties.find(propertyIndex);\n  if (prop \u003d\u003d null \u0026\u0026 _propertyBasedCreator !\u003d null) {\n    prop\u003d_propertyBasedCreator.findCreatorProperty(propertyIndex);\n  }\n  return prop;\n}",
    "begin_line": 1080,
    "end_line": 1088,
    "comment": "/** \n * Alternate find method that tries to locate a property with given \u003ccode\u003eproperty index\u003c/code\u003e. Note that access by index is not necessarily faster than by name, since properties are not directly indexable; however, for most instances difference is not significant as number of properties is low.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.findBackReference#1095",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.findBackReference(java.lang.String)",
    "snippet": "@Override public SettableBeanProperty findBackReference(String logicalName){\n  if (_backRefs \u003d\u003d null) {\n    return null;\n  }\n  return _backRefs.get(logicalName);\n}",
    "begin_line": 1095,
    "end_line": 1101,
    "comment": "/** \n * Method needed by  {@link BeanDeserializerFactory} to properly linkmanaged- and back-reference pairs.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.getValueInstantiator#1104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.getValueInstantiator()",
    "snippet": "@Override public ValueInstantiator getValueInstantiator(){\n  return _valueInstantiator;\n}",
    "begin_line": 1104,
    "end_line": 1106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.replaceProperty#1126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.replaceProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void replaceProperty(SettableBeanProperty original,SettableBeanProperty replacement){\n  _beanProperties.replace(original,replacement);\n}",
    "begin_line": 1126,
    "end_line": 1130,
    "comment": "/** \n * Method that can be used to replace an existing property with a modified one. \u003cp\u003e NOTE: only ever use this method if you know what you are doing; incorrect usage can break deserializer.\n * @param original Property to replace\n * @param replacement Property to replace it with\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromObject#1142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract Object deserializeFromObject(JsonParser p,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 1142,
    "end_line": 1143,
    "comment": "/** \n * General version used when handling needs more advanced features.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeWithType#1146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  if (_objectIdReader !\u003d null) {\n    if (p.canReadObjectId()) {\n      Object id\u003dp.getObjectId();\n      if (id !\u003d null) {\n        Object ob\u003dtypeDeserializer.deserializeTypedFromObject(p,ctxt);\n        return _handleTypedObjectId(p,ctxt,ob,id);\n      }\n    }\n    JsonToken t\u003dp.getCurrentToken();\n    if (t !\u003d null) {\n      if (t.isScalarValue()) {\n        return deserializeFromObjectId(p,ctxt);\n      }\n      if (t \u003d\u003d JsonToken.START_OBJECT) {\n        t\u003dp.nextToken();\n      }\n      if ((t \u003d\u003d JsonToken.FIELD_NAME) \u0026\u0026 _objectIdReader.maySerializeAsObject() \u0026\u0026 _objectIdReader.isValidReferencePropertyName(p.getCurrentName(),p)) {\n        return deserializeFromObjectId(p,ctxt);\n      }\n    }\n  }\n  return typeDeserializer.deserializeTypedFromObject(p,ctxt);\n}",
    "begin_line": 1146,
    "end_line": 1179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._handleTypedObjectId#1187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._handleTypedObjectId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.Object)",
    "snippet": "protected Object _handleTypedObjectId(JsonParser p,DeserializationContext ctxt,Object pojo,Object rawId) throws IOException {\n  JsonDeserializer\u003cObject\u003e idDeser\u003d_objectIdReader.getDeserializer();\n  final Object id;\n  if (idDeser.handledType() \u003d\u003d rawId.getClass()) {\n    id\u003drawId;\n  }\n else {\n    id\u003d_convertObjectId(p,ctxt,rawId,idDeser);\n  }\n  ReadableObjectId roid\u003dctxt.findObjectId(id,_objectIdReader.generator,_objectIdReader.resolver);\n  roid.bindItem(pojo);\n  SettableBeanProperty idProp\u003d_objectIdReader.idProperty;\n  if (idProp !\u003d null) {\n    return idProp.setAndReturn(pojo,id);\n  }\n  return pojo;\n}",
    "begin_line": 1187,
    "end_line": 1212,
    "comment": "/** \n * Offlined method called to handle \"native\" Object Id that has been read and known to be associated with given deserialized POJO.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._convertObjectId#1224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._convertObjectId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object _convertObjectId(JsonParser p,DeserializationContext ctxt,Object rawId,JsonDeserializer\u003cObject\u003e idDeser) throws IOException {\n  TokenBuffer buf\u003dnew TokenBuffer(p,ctxt);\n  if (rawId instanceof String) {\n    buf.writeString((String)rawId);\n  }\n else   if (rawId instanceof Long) {\n    buf.writeNumber(((Long)rawId).longValue());\n  }\n else   if (rawId instanceof Integer) {\n    buf.writeNumber(((Integer)rawId).intValue());\n  }\n else {\n    buf.writeObject(rawId);\n  }\n  JsonParser bufParser\u003dbuf.asParser();\n  bufParser.nextToken();\n  return idDeser.deserialize(bufParser,ctxt);\n}",
    "begin_line": 1224,
    "end_line": 1245,
    "comment": "/** \n * Helper method we need to do necessary conversion from whatever native object id type is, into declared type that Jackson internals expect. This may be simple cast (for String ids), or something more complicated; in latter case we may need to create bogus content buffer to allow use of id deserializer.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeWithObjectId#1256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeWithObjectId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object deserializeWithObjectId(JsonParser p,DeserializationContext ctxt) throws IOException {\n  return deserializeFromObject(p,ctxt);\n}",
    "begin_line": 1256,
    "end_line": 1258,
    "comment": "/** \n * Alternative deserialization method used when we expect to see Object Id; if so, we will need to ensure that the Id is seen before anything else, to ensure that it is available for solving references, even if JSON itself is not ordered that way. This may require buffering in some cases, but usually just a simple lookup to ensure that ordering is correct.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromObjectId#1264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object deserializeFromObjectId(JsonParser p,DeserializationContext ctxt) throws IOException {\n  Object id\u003d_objectIdReader.readObjectReference(p,ctxt);\n  ReadableObjectId roid\u003dctxt.findObjectId(id,_objectIdReader.generator,_objectIdReader.resolver);\n  Object pojo\u003droid.resolve();\n  if (pojo \u003d\u003d null) {\n    throw new UnresolvedForwardReference(p,\"Could not resolve Object Id [\" + id + \"] (for \"+ _beanType+ \").\",p.getCurrentLocation(),roid);\n  }\n  return pojo;\n}",
    "begin_line": 1264,
    "end_line": 1276,
    "comment": "/** \n * Method called in cases where it looks like we got an Object Id to parse and use as a reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromObjectUsingNonDefault#1278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object deserializeFromObjectUsingNonDefault(JsonParser p,DeserializationContext ctxt) throws IOException {\n  final JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  if (delegateDeser !\u003d null) {\n    return _valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n  }\n  if (_propertyBasedCreator !\u003d null) {\n    return _deserializeUsingPropertyBased(p,ctxt);\n  }\n  Class\u003c?\u003e raw\u003d_beanType.getRawClass();\n  if (ClassUtil.isNonStaticInnerClass(raw)) {\n    return ctxt.handleMissingInstantiator(raw,null,p,\"can only instantiate non-static inner class by using default, no-argument constructor\");\n  }\n  return ctxt.handleMissingInstantiator(raw,getValueInstantiator(),p,\"cannot deserialize from Object value (no delegate- or property-based Creator)\");\n}",
    "begin_line": 1278,
    "end_line": 1299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._deserializeUsingPropertyBased#1301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._deserializeUsingPropertyBased(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected abstract Object _deserializeUsingPropertyBased(final JsonParser p,final DeserializationContext ctxt) throws IOException ;",
    "begin_line": 1301,
    "end_line": 1302,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromNumber#1304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromNumber(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromNumber(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_objectIdReader !\u003d null) {\n    return deserializeFromObjectId(p,ctxt);\n  }\n  final JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  NumberType nt\u003dp.getNumberType();\n  if (nt \u003d\u003d NumberType.INT) {\n    if (delegateDeser !\u003d null) {\n      if (!_valueInstantiator.canCreateFromInt()) {\n        Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n        if (_injectables !\u003d null) {\n          injectValues(ctxt,bean);\n        }\n        return bean;\n      }\n    }\n    return _valueInstantiator.createFromInt(ctxt,p.getIntValue());\n  }\n  if (nt \u003d\u003d NumberType.LONG) {\n    if (delegateDeser !\u003d null) {\n      if (!_valueInstantiator.canCreateFromInt()) {\n        Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n        if (_injectables !\u003d null) {\n          injectValues(ctxt,bean);\n        }\n        return bean;\n      }\n    }\n    return _valueInstantiator.createFromLong(ctxt,p.getLongValue());\n  }\n  if (delegateDeser !\u003d null) {\n    Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n    if (_injectables !\u003d null) {\n      injectValues(ctxt,bean);\n    }\n    return bean;\n  }\n  return ctxt.handleMissingInstantiator(handledType(),getValueInstantiator(),p,\"no suitable creator method found to deserialize from Number value (%s)\",p.getNumberValue());\n}",
    "begin_line": 1304,
    "end_line": 1351,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromString#1353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromString(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromString(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_objectIdReader !\u003d null) {\n    return deserializeFromObjectId(p,ctxt);\n  }\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  if (delegateDeser !\u003d null) {\n    if (!_valueInstantiator.canCreateFromString()) {\n      Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n      if (_injectables !\u003d null) {\n        injectValues(ctxt,bean);\n      }\n      return bean;\n    }\n  }\n  return _valueInstantiator.createFromString(ctxt,p.getText());\n}",
    "begin_line": 1353,
    "end_line": 1374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromDouble#1380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromDouble(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromDouble(JsonParser p,DeserializationContext ctxt) throws IOException {\n  NumberType t\u003dp.getNumberType();\n  if ((t \u003d\u003d NumberType.DOUBLE) || (t \u003d\u003d NumberType.FLOAT)) {\n    JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n    if (delegateDeser !\u003d null) {\n      if (!_valueInstantiator.canCreateFromDouble()) {\n        Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n        if (_injectables !\u003d null) {\n          injectValues(ctxt,bean);\n        }\n        return bean;\n      }\n    }\n    return _valueInstantiator.createFromDouble(ctxt,p.getDoubleValue());\n  }\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  if (delegateDeser !\u003d null) {\n    return _valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n  }\n  return ctxt.handleMissingInstantiator(handledType(),getValueInstantiator(),p,\"no suitable creator method found to deserialize from Number value (%s)\",p.getNumberValue());\n}",
    "begin_line": 1380,
    "end_line": 1407,
    "comment": "/** \n * Method called to deserialize POJO value from a JSON floating-point number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromBoolean#1412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromBoolean(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromBoolean(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  if (delegateDeser !\u003d null) {\n    if (!_valueInstantiator.canCreateFromBoolean()) {\n      Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n      if (_injectables !\u003d null) {\n        injectValues(ctxt,bean);\n      }\n      return bean;\n    }\n  }\n  boolean value\u003d(p.getCurrentToken() \u003d\u003d JsonToken.VALUE_TRUE);\n  return _valueInstantiator.createFromBoolean(ctxt,value);\n}",
    "begin_line": 1412,
    "end_line": 1427,
    "comment": "/** \n * Method called to deserialize POJO value from a JSON boolean value (true, false)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromArray#1429",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003d_arrayDelegateDeserializer;\n  if ((delegateDeser !\u003d null) || ((delegateDeser\u003d_delegateDeserializer) !\u003d null)) {\n    Object bean\u003d_valueInstantiator.createUsingArrayDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n    if (_injectables !\u003d null) {\n      injectValues(ctxt,bean);\n    }\n    return bean;\n  }\n  if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n    JsonToken t\u003dp.nextToken();\n    if (t \u003d\u003d JsonToken.END_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n      return null;\n    }\n    final Object value\u003ddeserialize(p,ctxt);\n    if (p.nextToken() !\u003d JsonToken.END_ARRAY) {\n      handleMissingEndArrayForSingle(p,ctxt);\n    }\n    return value;\n  }\n  if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n    JsonToken t\u003dp.nextToken();\n    if (t \u003d\u003d JsonToken.END_ARRAY) {\n      return null;\n    }\n    return ctxt.handleUnexpectedToken(handledType(),JsonToken.START_ARRAY,p,null);\n  }\n  return ctxt.handleUnexpectedToken(handledType(),p);\n}",
    "begin_line": 1429,
    "end_line": 1462,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.deserializeFromEmbedded#1464",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromEmbedded(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object deserializeFromEmbedded(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_objectIdReader !\u003d null) {\n    return deserializeFromObjectId(p,ctxt);\n  }\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003d_delegateDeserializer();\n  if (delegateDeser !\u003d null) {\n    if (!_valueInstantiator.canCreateFromString()) {\n      Object bean\u003d_valueInstantiator.createUsingDelegate(ctxt,delegateDeser.deserialize(p,ctxt));\n      if (_injectables !\u003d null) {\n        injectValues(ctxt,bean);\n      }\n      return bean;\n    }\n  }\n  Object value\u003dp.getEmbeddedObject();\n  if (value !\u003d null) {\n    if (!_beanType.isTypeOrSuperTypeOf(value.getClass())) {\n      value\u003dctxt.handleWeirdNativeValue(_beanType,value,p);\n    }\n  }\n  return value;\n}",
    "begin_line": 1464,
    "end_line": 1497,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._delegateDeserializer#1502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._delegateDeserializer()",
    "snippet": "private final JsonDeserializer\u003cObject\u003e _delegateDeserializer(){\n  JsonDeserializer\u003cObject\u003e deser\u003d_delegateDeserializer;\n  if (deser \u003d\u003d null) {\n    deser\u003d_arrayDelegateDeserializer;\n  }\n  return deser;\n}",
    "begin_line": 1502,
    "end_line": 1508,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.injectValues#1516",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.injectValues(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "protected void injectValues(DeserializationContext ctxt,Object bean) throws IOException {\n  for (  ValueInjector injector : _injectables) {\n    injector.inject(ctxt,bean);\n  }\n}",
    "begin_line": 1516,
    "end_line": 1522,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handleUnknownProperties#1530",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperties(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, com.fasterxml.jackson.databind.util.TokenBuffer)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object handleUnknownProperties(DeserializationContext ctxt,Object bean,TokenBuffer unknownTokens) throws IOException {\n  unknownTokens.writeEndObject();\n  JsonParser bufferParser\u003dunknownTokens.asParser();\n  while (bufferParser.nextToken() !\u003d JsonToken.END_OBJECT) {\n    String propName\u003dbufferParser.getCurrentName();\n    bufferParser.nextToken();\n    handleUnknownProperty(bufferParser,ctxt,bean,propName);\n  }\n  return bean;\n}",
    "begin_line": 1530,
    "end_line": 1546,
    "comment": "/** \n * Method called to handle set of one or more unknown properties, stored in their entirety in given  {@link TokenBuffer}(as field entries, name and value).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handleUnknownVanilla#1552",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)",
    "snippet": "protected void handleUnknownVanilla(JsonParser p,DeserializationContext ctxt,Object bean,String propName) throws IOException {\n  if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n    handleIgnoredProperty(p,ctxt,bean,propName);\n  }\n else   if (_anySetter !\u003d null) {\n    try {\n      _anySetter.deserializeAndSet(p,ctxt,bean,propName);\n    }\n catch (    Exception e) {\n      wrapAndThrow(e,bean,propName,ctxt);\n    }\n  }\n else {\n    handleUnknownProperty(p,ctxt,bean,propName);\n  }\n}",
    "begin_line": 1552,
    "end_line": 1569,
    "comment": "/** \n * Helper method called for an unknown property, when using \"vanilla\" processing.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handleUnknownProperty#1576",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)",
    "snippet": "@Override protected void handleUnknownProperty(JsonParser p,DeserializationContext ctxt,Object beanOrClass,String propName) throws IOException {\n  if (_ignoreAllUnknown) {\n    p.skipChildren();\n    return;\n  }\n  if (_ignorableProps !\u003d null \u0026\u0026 _ignorableProps.contains(propName)) {\n    handleIgnoredProperty(p,ctxt,beanOrClass,propName);\n  }\n  super.handleUnknownProperty(p,ctxt,beanOrClass,propName);\n}",
    "begin_line": 1576,
    "end_line": 1590,
    "comment": "/** \n * Method called when a JSON property is encountered that has not matching setter, any-setter or field, and thus cannot be assigned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handleIgnoredProperty#1598",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleIgnoredProperty(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)",
    "snippet": "protected void handleIgnoredProperty(JsonParser p,DeserializationContext ctxt,Object beanOrClass,String propName) throws IOException {\n  if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)) {\n    throw IgnoredPropertyException.from(p,beanOrClass,propName,getKnownPropertyNames());\n  }\n  p.skipChildren();\n}",
    "begin_line": 1598,
    "end_line": 1606,
    "comment": "/** \n * Method called when an explicitly ignored property (one specified with a name to match, either by property annotation or class annotation) is encountered.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.handlePolymorphic#1620",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handlePolymorphic(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, com.fasterxml.jackson.databind.util.TokenBuffer)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object handlePolymorphic(JsonParser p,DeserializationContext ctxt,Object bean,TokenBuffer unknownTokens) throws IOException {\n  JsonDeserializer\u003cObject\u003e subDeser\u003d_findSubclassDeserializer(ctxt,bean,unknownTokens);\n  if (subDeser !\u003d null) {\n    if (unknownTokens !\u003d null) {\n      unknownTokens.writeEndObject();\n      JsonParser p2\u003dunknownTokens.asParser();\n      p2.nextToken();\n      bean\u003dsubDeser.deserialize(p2,ctxt,bean);\n    }\n    if (p !\u003d null) {\n      bean\u003dsubDeser.deserialize(p,ctxt,bean);\n    }\n    return bean;\n  }\n  if (unknownTokens !\u003d null) {\n    bean\u003dhandleUnknownProperties(ctxt,bean,unknownTokens);\n  }\n  if (p !\u003d null) {\n    bean\u003ddeserialize(p,ctxt,bean);\n  }\n  return bean;\n}",
    "begin_line": 1620,
    "end_line": 1649,
    "comment": "/** \n * Method called in cases where we may have polymorphic deserialization case: that is, type of Creator-constructed bean is not the type of deserializer itself. It should be a sub-class or implementation class; either way, we may have more specific deserializer to use for handling it.\n * @param p (optional) If not null, parser that has more properties to handle(in addition to buffered properties); if null, all properties are passed in buffer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase._findSubclassDeserializer#1655",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase._findSubclassDeserializer(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, com.fasterxml.jackson.databind.util.TokenBuffer)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findSubclassDeserializer(DeserializationContext ctxt,Object bean,TokenBuffer unknownTokens) throws IOException {\n  JsonDeserializer\u003cObject\u003e subDeser;\nsynchronized (this) {\n    subDeser\u003d(_subDeserializers \u003d\u003d null) ? null : _subDeserializers.get(new ClassKey(bean.getClass()));\n  }\n  if (subDeser !\u003d null) {\n    return subDeser;\n  }\n  JavaType type\u003dctxt.constructType(bean.getClass());\n  subDeser\u003dctxt.findRootValueDeserializer(type);\n  if (subDeser !\u003d null) {\nsynchronized (this) {\n      if (_subDeserializers \u003d\u003d null) {\n        _subDeserializers\u003dnew HashMap\u003cClassKey,JsonDeserializer\u003cObject\u003e\u003e();\n        ;\n      }\n      _subDeserializers.put(new ClassKey(bean.getClass()),subDeser);\n    }\n  }\n  return subDeser;\n}",
    "begin_line": 1655,
    "end_line": 1687,
    "comment": "/** \n * Helper method called to (try to) locate deserializer for given sub-type of type that this deserializer handles.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.wrapAndThrow#1707",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapAndThrow(java.lang.Throwable, java.lang.Object, java.lang.String, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public void wrapAndThrow(Throwable t,Object bean,String fieldName,DeserializationContext ctxt) throws IOException {\n  throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t,ctxt),bean,fieldName);\n}",
    "begin_line": 1707,
    "end_line": 1712,
    "comment": "/** \n * Method that will modify caught exception (passed in as argument) as necessary to include reference information, and to ensure it is a subtype of  {@link IOException}, or an unchecked exception. \u003cp\u003e Rules for wrapping and unwrapping are bit complicated; essentially: \u003cul\u003e \u003cli\u003eErrors are to be passed as is (if uncovered via unwrapping) \u003cli\u003e\"Plain\" IOExceptions (ones that are not of type {@link JsonMappingException} are to be passed as is\u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.throwOrReturnThrowable#1714",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.throwOrReturnThrowable(java.lang.Throwable, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "private Throwable throwOrReturnThrowable(Throwable t,DeserializationContext ctxt) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  boolean wrap\u003d(ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n  if (t instanceof IOException) {\n    if (!wrap || !(t instanceof JsonProcessingException)) {\n      throw (IOException)t;\n    }\n  }\n else   if (!wrap) {\n    ClassUtil.throwIfRTE(t);\n  }\n  return t;\n}",
    "begin_line": 1714,
    "end_line": 1736,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBase.wrapInstantiationProblem#1738",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBase.wrapInstantiationProblem(java.lang.Throwable, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object wrapInstantiationProblem(Throwable t,DeserializationContext ctxt) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  if (t instanceof IOException) {\n    throw (IOException)t;\n  }\n  boolean wrap\u003d(ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n  if (!wrap) {\n    ClassUtil.throwIfRTE(t);\n  }\n  return ctxt.handleInstantiationProblem(_beanType.getRawClass(),null,t);\n}",
    "begin_line": 1738,
    "end_line": 1755,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.BeanDeserializerBuilder#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.BeanDeserializerBuilder(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public BeanDeserializerBuilder(BeanDescription beanDesc,DeserializationContext ctxt){\n  _beanDesc\u003dbeanDesc;\n  _context\u003dctxt;\n  _config\u003dctxt.getConfig();\n}",
    "begin_line": 114,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.BeanDeserializerBuilder#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.BeanDeserializerBuilder(com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected BeanDeserializerBuilder(BeanDeserializerBuilder src){\n  _beanDesc\u003dsrc._beanDesc;\n  _context\u003dsrc._context;\n  _config\u003dsrc._config;\n  _properties.putAll(src._properties);\n  _injectables\u003d_copy(src._injectables);\n  _backRefProperties\u003d_copy(src._backRefProperties);\n  _ignorableProps\u003dsrc._ignorableProps;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _objectIdReader\u003dsrc._objectIdReader;\n  _anySetter\u003dsrc._anySetter;\n  _ignoreAllUnknown\u003dsrc._ignoreAllUnknown;\n  _buildMethod\u003dsrc._buildMethod;\n  _builderConfig\u003dsrc._builderConfig;\n}",
    "begin_line": 126,
    "end_line": 146,
    "comment": "/** \n * Copy constructor for sub-classes to use, when constructing custom builder instances\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder._copy#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder._copy(java.util.HashMap\u003cjava.lang.String,com.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e)",
    "snippet": "private static HashMap\u003cString,SettableBeanProperty\u003e _copy(HashMap\u003cString,SettableBeanProperty\u003e src){\n  return (src \u003d\u003d null) ? null : new HashMap\u003cString,SettableBeanProperty\u003e(src);\n}",
    "begin_line": 148,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder._copy#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder._copy(java.util.List\u003cT\u003e)",
    "snippet": "private static \u003cT\u003eList\u003cT\u003e _copy(List\u003cT\u003e src){\n  return (src \u003d\u003d null) ? null : new ArrayList\u003cT\u003e(src);\n}",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addOrReplaceProperty#166",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addOrReplaceProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty, boolean)",
    "snippet": "public void addOrReplaceProperty(SettableBeanProperty prop,boolean allowOverride){\n  _properties.put(prop.getName(),prop);\n}",
    "begin_line": 166,
    "end_line": 168,
    "comment": "/** \n * Method for adding a new property or replacing a property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addProperty#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void addProperty(SettableBeanProperty prop){\n  SettableBeanProperty old\u003d_properties.put(prop.getName(),prop);\n  if (old !\u003d null \u0026\u0026 old !\u003d prop) {\n    throw new IllegalArgumentException(\"Duplicate property \u0027\" + prop.getName() + \"\u0027 for \"+ _beanDesc.getType());\n  }\n}",
    "begin_line": 175,
    "end_line": 181,
    "comment": "/** \n * Method to add a property setter. Will ensure that there is no unexpected override; if one is found will throw a {@link IllegalArgumentException}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addBackReferenceProperty#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addBackReferenceProperty(java.lang.String, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void addBackReferenceProperty(String referenceName,SettableBeanProperty prop){\n  if (_backRefProperties \u003d\u003d null) {\n    _backRefProperties\u003dnew HashMap\u003cString,SettableBeanProperty\u003e(4);\n  }\n  prop.fixAccess(_config);\n  _backRefProperties.put(referenceName,prop);\n}",
    "begin_line": 188,
    "end_line": 207,
    "comment": "/** \n * Method called to add a property that represents so-called back reference; reference that \"points back\" to object that has forward reference to currently built bean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addInjectable#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addInjectable(com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.util.Annotations, com.fasterxml.jackson.databind.introspect.AnnotatedMember, java.lang.Object)",
    "snippet": "public void addInjectable(PropertyName propName,JavaType propType,Annotations contextAnnotations,AnnotatedMember member,Object valueId){\n  if (_injectables \u003d\u003d null) {\n    _injectables\u003dnew ArrayList\u003cValueInjector\u003e();\n  }\n  boolean fixAccess\u003d_config.canOverrideAccessModifiers();\n  boolean forceAccess\u003dfixAccess \u0026\u0026 _config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);\n  if (fixAccess) {\n    member.fixAccess(forceAccess);\n  }\n  _injectables.add(new ValueInjector(propName,propType,member,valueId));\n}",
    "begin_line": 209,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addIgnorable#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addIgnorable(java.lang.String)",
    "snippet": "public void addIgnorable(String propName){\n  if (_ignorableProps \u003d\u003d null) {\n    _ignorableProps\u003dnew HashSet\u003cString\u003e();\n  }\n  _ignorableProps.add(propName);\n}",
    "begin_line": 228,
    "end_line": 234,
    "comment": "/** \n * Method that will add property name as one of properties that can be ignored if not recognized.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.addCreatorProperty#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.addCreatorProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void addCreatorProperty(SettableBeanProperty prop){\n  addProperty(prop);\n}",
    "begin_line": 246,
    "end_line": 249,
    "comment": "/** \n * Method called by deserializer factory, when a \"creator property\" (something that is passed via constructor- or factory method argument; instead of setter or field). \u003cp\u003e Default implementation does not do anything; we may need to revisit this decision if these properties need to be available through accessors. For now, however, we just have to ensure that we don\u0027t try to resolve types that masked setter/field has (see [JACKSON-700] for details).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.setAnySetter#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.setAnySetter(com.fasterxml.jackson.databind.deser.SettableAnyProperty)",
    "snippet": "public void setAnySetter(SettableAnyProperty s){\n  if (_anySetter !\u003d null \u0026\u0026 s !\u003d null) {\n    throw new IllegalStateException(\"_anySetter already set to non-null\");\n  }\n  _anySetter\u003ds;\n}",
    "begin_line": 251,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.setIgnoreUnknownProperties#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.setIgnoreUnknownProperties(boolean)",
    "snippet": "public void setIgnoreUnknownProperties(boolean ignore){\n  _ignoreAllUnknown\u003dignore;\n}",
    "begin_line": 259,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.setValueInstantiator#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.setValueInstantiator(com.fasterxml.jackson.databind.deser.ValueInstantiator)",
    "snippet": "public void setValueInstantiator(ValueInstantiator inst){\n  _valueInstantiator\u003dinst;\n}",
    "begin_line": 263,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.setObjectIdReader#267",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.setObjectIdReader(com.fasterxml.jackson.databind.deser.impl.ObjectIdReader)",
    "snippet": "public void setObjectIdReader(ObjectIdReader r){\n  _objectIdReader\u003dr;\n}",
    "begin_line": 267,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.setPOJOBuilder#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.setPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder.Value)",
    "snippet": "public void setPOJOBuilder(AnnotatedMethod buildMethod,JsonPOJOBuilder.Value config){\n  _buildMethod\u003dbuildMethod;\n  _builderConfig\u003dconfig;\n}",
    "begin_line": 271,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getProperties#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getProperties()",
    "snippet": "public Iterator\u003cSettableBeanProperty\u003e getProperties(){\n  return _properties.values().iterator();\n}",
    "begin_line": 290,
    "end_line": 292,
    "comment": "/** \n * Method that allows accessing all properties that this builder currently contains. \u003cp\u003e Note that properties are returned in order that properties are ordered (explictly, or by rule), which is the serialization order.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.findProperty#294",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.findProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public SettableBeanProperty findProperty(PropertyName propertyName){\n  return _properties.get(propertyName.getSimpleName());\n}",
    "begin_line": 294,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.hasProperty#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.hasProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public boolean hasProperty(PropertyName propertyName){\n  return findProperty(propertyName) !\u003d null;\n}",
    "begin_line": 298,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.removeProperty#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.removeProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public SettableBeanProperty removeProperty(PropertyName name){\n  return _properties.remove(name.getSimpleName());\n}",
    "begin_line": 302,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getAnySetter#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getAnySetter()",
    "snippet": "public SettableAnyProperty getAnySetter(){\n  return _anySetter;\n}",
    "begin_line": 306,
    "end_line": 308,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getValueInstantiator#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getValueInstantiator()",
    "snippet": "public ValueInstantiator getValueInstantiator(){\n  return _valueInstantiator;\n}",
    "begin_line": 310,
    "end_line": 312,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getInjectables#314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getInjectables()",
    "snippet": "public List\u003cValueInjector\u003e getInjectables(){\n  return _injectables;\n}",
    "begin_line": 314,
    "end_line": 316,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getObjectIdReader#318",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getObjectIdReader()",
    "snippet": "public ObjectIdReader getObjectIdReader(){\n  return _objectIdReader;\n}",
    "begin_line": 318,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getBuildMethod#322",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getBuildMethod()",
    "snippet": "public AnnotatedMethod getBuildMethod(){\n  return _buildMethod;\n}",
    "begin_line": 322,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.getBuilderConfig#326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.getBuilderConfig()",
    "snippet": "public JsonPOJOBuilder.Value getBuilderConfig(){\n  return _builderConfig;\n}",
    "begin_line": 326,
    "end_line": 328,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.hasIgnorable#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.hasIgnorable(java.lang.String)",
    "snippet": "public boolean hasIgnorable(String name){\n  return (_ignorableProps !\u003d null) \u0026\u0026 _ignorableProps.contains(name);\n}",
    "begin_line": 333,
    "end_line": 335,
    "comment": "/** \n * @since 2.9.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.build#347",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.build()",
    "snippet": "public JsonDeserializer\u003c?\u003e build(){\n  Collection\u003cSettableBeanProperty\u003e props\u003d_properties.values();\n  _fixAccess(props);\n  BeanPropertyMap propertyMap\u003dBeanPropertyMap.construct(props,_config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES),_collectAliases(props));\n  propertyMap.assignIndexes();\n  boolean anyViews\u003d!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n  if (!anyViews) {\n    for (    SettableBeanProperty prop : props) {\n      if (prop.hasViews()) {\n        anyViews\u003dtrue;\n        break;\n      }\n    }\n  }\n  if (_objectIdReader !\u003d null) {\n    ObjectIdValueProperty prop\u003dnew ObjectIdValueProperty(_objectIdReader,PropertyMetadata.STD_REQUIRED);\n    propertyMap\u003dpropertyMap.withProperty(prop);\n  }\n  return new BeanDeserializer(this,_beanDesc,propertyMap,_backRefProperties,_ignorableProps,_ignoreAllUnknown,anyViews);\n}",
    "begin_line": 347,
    "end_line": 382,
    "comment": "/** \n * Method for constructing a  {@link BeanDeserializer}, given all information collected.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.buildAbstract#391",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.buildAbstract()",
    "snippet": "public AbstractDeserializer buildAbstract(){\n  return new AbstractDeserializer(this,_beanDesc,_backRefProperties,_properties);\n}",
    "begin_line": 391,
    "end_line": 393,
    "comment": "/** \n * Alternate build method used when we must be using some form of abstract resolution, usually by using addition Type Id (\"polymorphic deserialization\")\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder.buildBuilderBased#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder.buildBuilderBased(com.fasterxml.jackson.databind.JavaType, java.lang.String)",
    "snippet": "public JsonDeserializer\u003c?\u003e buildBuilderBased(JavaType valueType,String expBuildMethodName) throws JsonMappingException {\n  if (_buildMethod \u003d\u003d null) {\n    if (!expBuildMethodName.isEmpty()) {\n      _context.reportBadDefinition(_beanDesc.getType(),String.format(\"Builder class %s does not have build method (name: \u0027%s\u0027)\",_beanDesc.getBeanClass().getName(),expBuildMethodName));\n    }\n  }\n else {\n    Class\u003c?\u003e rawBuildType\u003d_buildMethod.getRawReturnType();\n    Class\u003c?\u003e rawValueType\u003dvalueType.getRawClass();\n    if ((rawBuildType !\u003d rawValueType) \u0026\u0026 !rawBuildType.isAssignableFrom(rawValueType) \u0026\u0026 !rawValueType.isAssignableFrom(rawBuildType)) {\n      _context.reportBadDefinition(_beanDesc.getType(),String.format(\"Build method \u0027%s\u0027 has wrong return type (%s), not compatible with POJO type (%s)\",_buildMethod.getFullName(),rawBuildType.getName(),valueType.getRawClass().getName()));\n    }\n  }\n  Collection\u003cSettableBeanProperty\u003e props\u003d_properties.values();\n  _fixAccess(props);\n  BeanPropertyMap propertyMap\u003dBeanPropertyMap.construct(props,_config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES),_collectAliases(props));\n  propertyMap.assignIndexes();\n  boolean anyViews\u003d!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n  if (!anyViews) {\n    for (    SettableBeanProperty prop : props) {\n      if (prop.hasViews()) {\n        anyViews\u003dtrue;\n        break;\n      }\n    }\n  }\n  if (_objectIdReader !\u003d null) {\n    ObjectIdValueProperty prop\u003dnew ObjectIdValueProperty(_objectIdReader,PropertyMetadata.STD_REQUIRED);\n    propertyMap\u003dpropertyMap.withProperty(prop);\n  }\n  return new BuilderBasedDeserializer(this,_beanDesc,valueType,propertyMap,_backRefProperties,_ignorableProps,_ignoreAllUnknown,anyViews);\n}",
    "begin_line": 399,
    "end_line": 455,
    "comment": "/** \n * Method for constructing a specialized deserializer that uses additional external Builder object during data binding.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder._fixAccess#463",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder._fixAccess(java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e)",
    "snippet": "protected void _fixAccess(Collection\u003cSettableBeanProperty\u003e mainProps){\n  for (  SettableBeanProperty prop : mainProps) {\n    prop.fixAccess(_config);\n  }\n  if (_anySetter !\u003d null) {\n    _anySetter.fixAccess(_config);\n  }\n  if (_buildMethod !\u003d null) {\n    _buildMethod.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n  }\n}",
    "begin_line": 463,
    "end_line": 501,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerBuilder._collectAliases#503",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder._collectAliases(java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e)",
    "snippet": "protected Map\u003cString,List\u003cPropertyName\u003e\u003e _collectAliases(Collection\u003cSettableBeanProperty\u003e props){\n  Map\u003cString,List\u003cPropertyName\u003e\u003e mapping\u003dnull;\n  AnnotationIntrospector intr\u003d_config.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    for (    SettableBeanProperty prop : props) {\n      List\u003cPropertyName\u003e aliases\u003dintr.findPropertyAliases(prop.getMember());\n      if ((aliases \u003d\u003d null) || aliases.isEmpty()) {\n        continue;\n      }\n      if (mapping \u003d\u003d null) {\n        mapping\u003dnew HashMap\u003c\u003e();\n      }\n      mapping.put(prop.getName(),aliases);\n    }\n  }\n  if (mapping \u003d\u003d null) {\n    return Collections.emptyMap();\n  }\n  return mapping;\n}",
    "begin_line": 503,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.BeanDeserializerFactory#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.BeanDeserializerFactory(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "public BeanDeserializerFactory(DeserializerFactoryConfig config){\n  super(config);\n}",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.withConfig#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig)",
    "snippet": "@Override public DeserializerFactory withConfig(DeserializerFactoryConfig config){\n  if (_factoryConfig \u003d\u003d config) {\n    return this;\n  }\n  ClassUtil.verifyMustOverride(BeanDeserializerFactory.class,this,\"withConfig\");\n  return new BeanDeserializerFactory(config);\n}",
    "begin_line": 63,
    "end_line": 76,
    "comment": "/** \n * Method used by module registration functionality, to construct a new bean deserializer factory with different configuration settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.createBeanDeserializer#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  JsonDeserializer\u003cObject\u003e custom\u003d_findCustomBeanDeserializer(type,config,beanDesc);\n  if (custom !\u003d null) {\n    return custom;\n  }\n  if (type.isThrowable()) {\n    return buildThrowableDeserializer(ctxt,type,beanDesc);\n  }\n  if (type.isAbstract() \u0026\u0026 !type.isPrimitive() \u0026\u0026 !type.isEnumType()) {\n    JavaType concreteType\u003dmaterializeAbstractType(ctxt,type,beanDesc);\n    if (concreteType !\u003d null) {\n      beanDesc\u003dconfig.introspect(concreteType);\n      return buildBeanDeserializer(ctxt,concreteType,beanDesc);\n    }\n  }\n  @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e deser\u003d(JsonDeserializer\u003cObject\u003e)findStdDeserializer(ctxt,type,beanDesc);\n  if (deser !\u003d null) {\n    return deser;\n  }\n  if (!isPotentialBeanType(type.getRawClass())) {\n    return null;\n  }\n  _validateSubType(ctxt,type,beanDesc);\n  return buildBeanDeserializer(ctxt,type,beanDesc);\n}",
    "begin_line": 90,
    "end_line": 138,
    "comment": "/** \n * Method that  {@link DeserializerCache}s call to create a new deserializer for types other than Collections, Maps, arrays and enums.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.createBuilderBasedDeserializer#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e createBuilderBasedDeserializer(DeserializationContext ctxt,JavaType valueType,BeanDescription beanDesc,Class\u003c?\u003e builderClass) throws JsonMappingException {\n  JavaType builderType\u003dctxt.constructType(builderClass);\n  BeanDescription builderDesc\u003dctxt.getConfig().introspectForBuilder(builderType);\n  return buildBuilderBasedDeserializer(ctxt,valueType,builderDesc);\n}",
    "begin_line": 141,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.findStdDeserializer#155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.findStdDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e findStdDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  JsonDeserializer\u003c?\u003e deser\u003dfindDefaultDeserializer(ctxt,type,beanDesc);\n  if (deser !\u003d null) {\n    if (_factoryConfig.hasDeserializerModifiers()) {\n      for (      BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n        deser\u003dmod.modifyDeserializer(ctxt.getConfig(),beanDesc,deser);\n      }\n    }\n  }\n  return deser;\n}",
    "begin_line": 155,
    "end_line": 171,
    "comment": "/** \n * Method called by  {@link BeanDeserializerFactory} to see if there might be a standarddeserializer registered for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.materializeAbstractType#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.materializeAbstractType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JavaType materializeAbstractType(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  for (  AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {\n    JavaType concrete\u003dr.resolveAbstractType(ctxt.getConfig(),beanDesc);\n    if (concrete !\u003d null) {\n      return concrete;\n    }\n  }\n  return null;\n}",
    "begin_line": 173,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildBeanDeserializer#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonDeserializer\u003cObject\u003e buildBeanDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  ValueInstantiator valueInstantiator;\n  try {\n    valueInstantiator\u003dfindValueInstantiator(ctxt,beanDesc);\n  }\n catch (  NoClassDefFoundError error) {\n    return new ErrorThrowingDeserializer(error);\n  }\ncatch (  IllegalArgumentException e) {\n    throw InvalidDefinitionException.from(ctxt.getParser(),ClassUtil.exceptionMessage(e),beanDesc,null);\n  }\n  BeanDeserializerBuilder builder\u003dconstructBeanDeserializerBuilder(ctxt,beanDesc);\n  builder.setValueInstantiator(valueInstantiator);\n  addBeanProps(ctxt,beanDesc,builder);\n  addObjectIdReader(ctxt,beanDesc,builder);\n  addBackReferenceProperties(ctxt,beanDesc,builder);\n  addInjectables(ctxt,beanDesc,builder);\n  final DeserializationConfig config\u003dctxt.getConfig();\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      builder\u003dmod.updateBuilder(config,beanDesc,builder);\n    }\n  }\n  JsonDeserializer\u003c?\u003e deserializer;\n  if (type.isAbstract() \u0026\u0026 !valueInstantiator.canInstantiate()) {\n    deserializer\u003dbuilder.buildAbstract();\n  }\n else {\n    deserializer\u003dbuilder.build();\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deserializer\u003dmod.modifyDeserializer(config,beanDesc,deserializer);\n    }\n  }\n  return (JsonDeserializer\u003cObject\u003e)deserializer;\n}",
    "begin_line": 202,
    "end_line": 256,
    "comment": "/** \n * Method that is to actually build a bean deserializer instance. All basic sanity checks have been done to know that what we have may be a valid bean type, and that there are no default simple deserializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildBuilderBasedDeserializer#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonDeserializer\u003cObject\u003e buildBuilderBasedDeserializer(DeserializationContext ctxt,JavaType valueType,BeanDescription builderDesc) throws JsonMappingException {\n  ValueInstantiator valueInstantiator;\n  try {\n    valueInstantiator\u003dfindValueInstantiator(ctxt,builderDesc);\n  }\n catch (  NoClassDefFoundError error) {\n    return new ErrorThrowingDeserializer(error);\n  }\ncatch (  IllegalArgumentException e) {\n    throw InvalidDefinitionException.from(ctxt.getParser(),ClassUtil.exceptionMessage(e),builderDesc,null);\n  }\n  final DeserializationConfig config\u003dctxt.getConfig();\n  BeanDeserializerBuilder builder\u003dconstructBeanDeserializerBuilder(ctxt,builderDesc);\n  builder.setValueInstantiator(valueInstantiator);\n  addBeanProps(ctxt,builderDesc,builder);\n  addObjectIdReader(ctxt,builderDesc,builder);\n  addBackReferenceProperties(ctxt,builderDesc,builder);\n  addInjectables(ctxt,builderDesc,builder);\n  JsonPOJOBuilder.Value builderConfig\u003dbuilderDesc.findPOJOBuilderConfig();\n  final String buildMethodName\u003d(builderConfig \u003d\u003d null) ? JsonPOJOBuilder.DEFAULT_BUILD_METHOD : builderConfig.buildMethodName;\n  AnnotatedMethod buildMethod\u003dbuilderDesc.findMethod(buildMethodName,null);\n  if (buildMethod !\u003d null) {\n    if (config.canOverrideAccessModifiers()) {\n      ClassUtil.checkAndFixAccess(buildMethod.getMember(),config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n  }\n  builder.setPOJOBuilder(buildMethod,builderConfig);\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      builder\u003dmod.updateBuilder(config,builderDesc,builder);\n    }\n  }\n  JsonDeserializer\u003c?\u003e deserializer\u003dbuilder.buildBuilderBased(valueType,buildMethodName);\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deserializer\u003dmod.modifyDeserializer(config,builderDesc,deserializer);\n    }\n  }\n  return (JsonDeserializer\u003cObject\u003e)deserializer;\n}",
    "begin_line": 266,
    "end_line": 323,
    "comment": "/** \n * Method for constructing a bean deserializer that uses specified intermediate Builder for binding data, and construction of the value instance. Note that implementation is mostly copied from the regular BeanDeserializer build method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addObjectIdReader#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addObjectIdReader(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addObjectIdReader(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  ObjectIdInfo objectIdInfo\u003dbeanDesc.getObjectIdInfo();\n  if (objectIdInfo \u003d\u003d null) {\n    return;\n  }\n  Class\u003c?\u003e implClass\u003dobjectIdInfo.getGeneratorType();\n  JavaType idType;\n  SettableBeanProperty idProp;\n  ObjectIdGenerator\u003c?\u003e gen;\n  ObjectIdResolver resolver\u003dctxt.objectIdResolverInstance(beanDesc.getClassInfo(),objectIdInfo);\n  if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n    PropertyName propName\u003dobjectIdInfo.getPropertyName();\n    idProp\u003dbuilder.findProperty(propName);\n    if (idProp \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": cannot find property with name \u0027\"+ propName+ \"\u0027\");\n    }\n    idType\u003didProp.getType();\n    gen\u003dnew PropertyBasedObjectIdGenerator(objectIdInfo.getScope());\n  }\n else {\n    JavaType type\u003dctxt.constructType(implClass);\n    idType\u003dctxt.getTypeFactory().findTypeParameters(type,ObjectIdGenerator.class)[0];\n    idProp\u003dnull;\n    gen\u003dctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(),objectIdInfo);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003dctxt.findRootValueDeserializer(idType);\n  builder.setObjectIdReader(ObjectIdReader.construct(idType,objectIdInfo.getPropertyName(),gen,deser,idProp,resolver));\n}",
    "begin_line": 325,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.buildThrowableDeserializer#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.buildThrowableDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\") public JsonDeserializer\u003cObject\u003e buildThrowableDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  BeanDeserializerBuilder builder\u003dconstructBeanDeserializerBuilder(ctxt,beanDesc);\n  builder.setValueInstantiator(findValueInstantiator(ctxt,beanDesc));\n  addBeanProps(ctxt,beanDesc,builder);\n  AnnotatedMethod am\u003dbeanDesc.findMethod(\"initCause\",INIT_CAUSE_PARAMS);\n  if (am !\u003d null) {\n    SimpleBeanPropertyDefinition propDef\u003dSimpleBeanPropertyDefinition.construct(ctxt.getConfig(),am,new PropertyName(\"cause\"));\n    SettableBeanProperty prop\u003dconstructSettableProperty(ctxt,beanDesc,propDef,am.getParameterType(0));\n    if (prop !\u003d null) {\n      builder.addOrReplaceProperty(prop,true);\n    }\n  }\n  builder.addIgnorable(\"localizedMessage\");\n  builder.addIgnorable(\"suppressed\");\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      builder\u003dmod.updateBuilder(config,beanDesc,builder);\n    }\n  }\n  JsonDeserializer\u003c?\u003e deserializer\u003dbuilder.build();\n  if (deserializer instanceof BeanDeserializer) {\n    deserializer\u003dnew ThrowableDeserializer((BeanDeserializer)deserializer);\n  }\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      deserializer\u003dmod.modifyDeserializer(config,beanDesc,deserializer);\n    }\n  }\n  return (JsonDeserializer\u003cObject\u003e)deserializer;\n}",
    "begin_line": 363,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructBeanDeserializerBuilder#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructBeanDeserializerBuilder(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt,BeanDescription beanDesc){\n  return new BeanDeserializerBuilder(beanDesc,ctxt);\n}",
    "begin_line": 435,
    "end_line": 438,
    "comment": "/** \n * Overridable method that constructs a  {@link BeanDeserializerBuilder}which is used to accumulate information needed to create deserializer instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addBeanProps#447",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBeanProps(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addBeanProps(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  final boolean isConcrete\u003d!beanDesc.getType().isAbstract();\n  final SettableBeanProperty[] creatorProps\u003disConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;\n  final boolean hasCreatorProps\u003d(creatorProps !\u003d null);\n  JsonIgnoreProperties.Value ignorals\u003dctxt.getConfig().getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo());\n  Set\u003cString\u003e ignored;\n  if (ignorals !\u003d null) {\n    boolean ignoreAny\u003dignorals.getIgnoreUnknown();\n    builder.setIgnoreUnknownProperties(ignoreAny);\n    ignored\u003dignorals.findIgnoredForDeserialization();\n    for (    String propName : ignored) {\n      builder.addIgnorable(propName);\n    }\n  }\n else {\n    ignored\u003dCollections.emptySet();\n  }\n  AnnotatedMember anySetter\u003dbeanDesc.findAnySetterAccessor();\n  if (anySetter !\u003d null) {\n    builder.setAnySetter(constructAnySetter(ctxt,beanDesc,anySetter));\n  }\n else {\n    Collection\u003cString\u003e ignored2\u003dbeanDesc.getIgnoredPropertyNames();\n    if (ignored2 !\u003d null) {\n      for (      String propName : ignored2) {\n        builder.addIgnorable(propName);\n      }\n    }\n  }\n  final boolean useGettersAsSetters\u003dctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) \u0026\u0026 ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n  List\u003cBeanPropertyDefinition\u003e propDefs\u003dfilterBeanProps(ctxt,beanDesc,builder,beanDesc.findProperties(),ignored);\n  if (_factoryConfig.hasDeserializerModifiers()) {\n    for (    BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {\n      propDefs\u003dmod.updateProperties(ctxt.getConfig(),beanDesc,propDefs);\n    }\n  }\n  for (  BeanPropertyDefinition propDef : propDefs) {\n    SettableBeanProperty prop\u003dnull;\n    if (propDef.hasSetter()) {\n      AnnotatedMethod setter\u003dpropDef.getSetter();\n      JavaType propertyType\u003dsetter.getParameterType(0);\n      prop\u003dconstructSettableProperty(ctxt,beanDesc,propDef,propertyType);\n    }\n else     if (propDef.hasField()) {\n      AnnotatedField field\u003dpropDef.getField();\n      JavaType propertyType\u003dfield.getType();\n      prop\u003dconstructSettableProperty(ctxt,beanDesc,propDef,propertyType);\n    }\n else {\n      AnnotatedMethod getter\u003dpropDef.getGetter();\n      if (getter !\u003d null) {\n        if (useGettersAsSetters \u0026\u0026 _isSetterlessType(getter.getRawType())) {\n          if (builder.hasIgnorable(propDef.getName())) {\n            ;\n          }\n else {\n            prop\u003dconstructSetterlessProperty(ctxt,beanDesc,propDef);\n          }\n        }\n else         if (!propDef.hasConstructorParameter()) {\n          PropertyMetadata md\u003dpropDef.getMetadata();\n          if (md.getMergeInfo() !\u003d null) {\n            prop\u003dconstructSetterlessProperty(ctxt,beanDesc,propDef);\n          }\n        }\n      }\n    }\n    if (hasCreatorProps \u0026\u0026 propDef.hasConstructorParameter()) {\n      final String name\u003dpropDef.getName();\n      CreatorProperty cprop\u003dnull;\n      if (creatorProps !\u003d null) {\n        for (        SettableBeanProperty cp : creatorProps) {\n          if (name.equals(cp.getName()) \u0026\u0026 (cp instanceof CreatorProperty)) {\n            cprop\u003d(CreatorProperty)cp;\n            break;\n          }\n        }\n      }\n      if (cprop \u003d\u003d null) {\n        List\u003cString\u003e n\u003dnew ArrayList\u003c\u003e();\n        for (        SettableBeanProperty cp : creatorProps) {\n          n.add(cp.getName());\n        }\n        ctxt.reportBadPropertyDefinition(beanDesc,propDef,\"Could not find creator property with name \u0027%s\u0027 (known Creator properties: %s)\",name,n);\n        continue;\n      }\n      if (prop !\u003d null) {\n        cprop.setFallbackSetter(prop);\n      }\n      Class\u003c?\u003e[] views\u003dpropDef.findViews();\n      if (views \u003d\u003d null) {\n        views\u003dbeanDesc.findDefaultViews();\n      }\n      cprop.setViews(views);\n      builder.addCreatorProperty(cprop);\n      continue;\n    }\n    if (prop !\u003d null) {\n      Class\u003c?\u003e[] views\u003dpropDef.findViews();\n      if (views \u003d\u003d null) {\n        views\u003dbeanDesc.findDefaultViews();\n      }\n      prop.setViews(views);\n      builder.addProperty(prop);\n    }\n  }\n}",
    "begin_line": 447,
    "end_line": 595,
    "comment": "/** \n * Method called to figure out settable properties for the bean deserializer to use. \u003cp\u003e Note: designed to be overridable, and effort is made to keep interface similar between versions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory._isSetterlessType#597",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory._isSetterlessType(java.lang.Class\u003c?\u003e)",
    "snippet": "private boolean _isSetterlessType(Class\u003c?\u003e rawType){\n  return Collection.class.isAssignableFrom(rawType) || Map.class.isAssignableFrom(rawType);\n}",
    "begin_line": 597,
    "end_line": 603,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.filterBeanProps#611",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.filterBeanProps(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "protected List\u003cBeanPropertyDefinition\u003e filterBeanProps(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder,List\u003cBeanPropertyDefinition\u003e propDefsIn,Set\u003cString\u003e ignored) throws JsonMappingException {\n  ArrayList\u003cBeanPropertyDefinition\u003e result\u003dnew ArrayList\u003cBeanPropertyDefinition\u003e(Math.max(4,propDefsIn.size()));\n  HashMap\u003cClass\u003c?\u003e,Boolean\u003e ignoredTypes\u003dnew HashMap\u003cClass\u003c?\u003e,Boolean\u003e();\n  for (  BeanPropertyDefinition property : propDefsIn) {\n    String name\u003dproperty.getName();\n    if (ignored.contains(name)) {\n      continue;\n    }\n    if (!property.hasConstructorParameter()) {\n      Class\u003c?\u003e rawPropertyType\u003dproperty.getRawPrimaryType();\n      if ((rawPropertyType !\u003d null) \u0026\u0026 isIgnorableType(ctxt.getConfig(),property,rawPropertyType,ignoredTypes)) {\n        builder.addIgnorable(name);\n        continue;\n      }\n    }\n    result.add(property);\n  }\n  return result;\n}",
    "begin_line": 611,
    "end_line": 639,
    "comment": "/** \n * Helper method called to filter out explicit ignored properties, as well as properties that have \"ignorable types\". Note that this will not remove properties that have no setters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addBackReferenceProperties#647",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addBackReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addBackReferenceProperties(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  List\u003cBeanPropertyDefinition\u003e refProps\u003dbeanDesc.findBackReferences();\n  if (refProps !\u003d null) {\n    for (    BeanPropertyDefinition refProp : refProps) {\n      String refName\u003drefProp.findReferenceName();\n      builder.addBackReferenceProperty(refName,constructSettableProperty(ctxt,beanDesc,refProp,refProp.getPrimaryType()));\n    }\n  }\n}",
    "begin_line": 647,
    "end_line": 676,
    "comment": "/** \n * Method that will find if bean has any managed- or back-reference properties, and if so add them to bean, to be linked during resolution phase.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addReferenceProperties#679",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addReferenceProperties(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "@Deprecated protected void addReferenceProperties(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  addBackReferenceProperties(ctxt,beanDesc,builder);\n}",
    "begin_line": 679,
    "end_line": 684,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.addInjectables#690",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.addInjectables(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.deser.BeanDeserializerBuilder)",
    "snippet": "protected void addInjectables(DeserializationContext ctxt,BeanDescription beanDesc,BeanDeserializerBuilder builder) throws JsonMappingException {\n  Map\u003cObject,AnnotatedMember\u003e raw\u003dbeanDesc.findInjectables();\n  if (raw !\u003d null) {\n    for (    Map.Entry\u003cObject,AnnotatedMember\u003e entry : raw.entrySet()) {\n      AnnotatedMember m\u003dentry.getValue();\n      builder.addInjectable(PropertyName.construct(m.getName()),m.getType(),beanDesc.getClassAnnotations(),m,entry.getKey());\n    }\n  }\n}",
    "begin_line": 690,
    "end_line": 703,
    "comment": "/** \n * Method called locate all members used for value injection (if any), constructor  {@link com.fasterxml.jackson.databind.deser.impl.ValueInjector} instances, and add them to builder.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructAnySetter#714",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructAnySetter(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt,BeanDescription beanDesc,AnnotatedMember mutator) throws JsonMappingException {\n  BeanProperty prop;\n  JavaType keyType;\n  JavaType valueType;\n  if (mutator instanceof AnnotatedMethod) {\n    AnnotatedMethod am\u003d(AnnotatedMethod)mutator;\n    keyType\u003dam.getParameterType(0);\n    valueType\u003dam.getParameterType(1);\n    valueType\u003dresolveMemberAndTypeAnnotations(ctxt,mutator,valueType);\n    prop\u003dnew BeanProperty.Std(PropertyName.construct(mutator.getName()),valueType,null,mutator,PropertyMetadata.STD_OPTIONAL);\n  }\n else   if (mutator instanceof AnnotatedField) {\n    AnnotatedField af\u003d(AnnotatedField)mutator;\n    JavaType mapType\u003daf.getType();\n    mapType\u003dresolveMemberAndTypeAnnotations(ctxt,mutator,mapType);\n    keyType\u003dmapType.getKeyType();\n    valueType\u003dmapType.getContentType();\n    prop\u003dnew BeanProperty.Std(PropertyName.construct(mutator.getName()),mapType,null,mutator,PropertyMetadata.STD_OPTIONAL);\n  }\n else {\n    return ctxt.reportBadDefinition(beanDesc.getType(),String.format(\"Unrecognized mutator type for any setter: %s\",mutator.getClass()));\n  }\n  KeyDeserializer keyDeser\u003dfindKeyDeserializerFromAnnotation(ctxt,mutator);\n  if (keyDeser \u003d\u003d null) {\n    keyDeser\u003dkeyType.getValueHandler();\n  }\n  if (keyDeser \u003d\u003d null) {\n    keyDeser\u003dctxt.findKeyDeserializer(keyType,prop);\n  }\n else {\n    if (keyDeser instanceof ContextualKeyDeserializer) {\n      keyDeser\u003d((ContextualKeyDeserializer)keyDeser).createContextual(ctxt,prop);\n    }\n  }\n  JsonDeserializer\u003cObject\u003e deser\u003dfindContentDeserializerFromAnnotation(ctxt,mutator);\n  if (deser \u003d\u003d null) {\n    deser\u003dvalueType.getValueHandler();\n  }\n  if (deser !\u003d null) {\n    deser\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handlePrimaryContextualization(deser,prop,valueType);\n  }\n  TypeDeserializer typeDeser\u003dvalueType.getTypeHandler();\n  return new SettableAnyProperty(prop,mutator,valueType,keyDeser,deser,typeDeser);\n}",
    "begin_line": 714,
    "end_line": 771,
    "comment": "/** \n * Method called to construct fallback  {@link SettableAnyProperty}for handling unknown bean properties, given a method that has been designated as such setter.\n * @param mutator Either 2-argument method (setter, with key and value), or Fieldthat contains Map; either way accessor used for passing \"any values\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructSettableProperty#780",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSettableProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt,BeanDescription beanDesc,BeanPropertyDefinition propDef,JavaType propType0) throws JsonMappingException {\n  AnnotatedMember mutator\u003dpropDef.getNonConstructorMutator();\n  if (mutator \u003d\u003d null) {\n    ctxt.reportBadPropertyDefinition(beanDesc,propDef,\"No non-constructor mutator available\");\n  }\n  JavaType type\u003dresolveMemberAndTypeAnnotations(ctxt,mutator,propType0);\n  TypeDeserializer typeDeser\u003dtype.getTypeHandler();\n  SettableBeanProperty prop;\n  if (mutator instanceof AnnotatedMethod) {\n    prop\u003dnew MethodProperty(propDef,type,typeDeser,beanDesc.getClassAnnotations(),(AnnotatedMethod)mutator);\n  }\n else {\n    prop\u003dnew FieldProperty(propDef,type,typeDeser,beanDesc.getClassAnnotations(),(AnnotatedField)mutator);\n  }\n  JsonDeserializer\u003c?\u003e deser\u003dfindDeserializerFromAnnotation(ctxt,mutator);\n  if (deser \u003d\u003d null) {\n    deser\u003dtype.getValueHandler();\n  }\n  if (deser !\u003d null) {\n    deser\u003dctxt.handlePrimaryContextualization(deser,prop,type);\n    prop\u003dprop.withValueDeserializer(deser);\n  }\n  AnnotationIntrospector.ReferenceProperty ref\u003dpropDef.findReferenceType();\n  if (ref !\u003d null \u0026\u0026 ref.isManagedReference()) {\n    prop.setManagedReferenceName(ref.getName());\n  }\n  ObjectIdInfo objectIdInfo\u003dpropDef.findObjectIdInfo();\n  if (objectIdInfo !\u003d null) {\n    prop.setObjectIdInfo(objectIdInfo);\n  }\n  return prop;\n}",
    "begin_line": 780,
    "end_line": 823,
    "comment": "/** \n * Method that will construct a regular bean property setter using the given setter method.\n * @return Property constructed, if any; or null to indicate thatthere should be no property based on given definitions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.constructSetterlessProperty#829",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.constructSetterlessProperty(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "snippet": "protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt,BeanDescription beanDesc,BeanPropertyDefinition propDef) throws JsonMappingException {\n  final AnnotatedMethod getter\u003dpropDef.getGetter();\n  JavaType type\u003dresolveMemberAndTypeAnnotations(ctxt,getter,getter.getType());\n  TypeDeserializer typeDeser\u003dtype.getTypeHandler();\n  SettableBeanProperty prop\u003dnew SetterlessProperty(propDef,type,typeDeser,beanDesc.getClassAnnotations(),getter);\n  JsonDeserializer\u003c?\u003e deser\u003dfindDeserializerFromAnnotation(ctxt,getter);\n  if (deser \u003d\u003d null) {\n    deser\u003dtype.getValueHandler();\n  }\n  if (deser !\u003d null) {\n    deser\u003dctxt.handlePrimaryContextualization(deser,prop,type);\n    prop\u003dprop.withValueDeserializer(deser);\n  }\n  return prop;\n}",
    "begin_line": 829,
    "end_line": 847,
    "comment": "/** \n * Method that will construct a regular bean property setter using the given setter method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.isPotentialBeanType#863",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isPotentialBeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isPotentialBeanType(Class\u003c?\u003e type){\n  String typeStr\u003dClassUtil.canBeABeanType(type);\n  if (typeStr !\u003d null) {\n    throw new IllegalArgumentException(\"Cannot deserialize Class \" + type.getName() + \" (of type \"+ typeStr+ \") as a Bean\");\n  }\n  if (ClassUtil.isProxyType(type)) {\n    throw new IllegalArgumentException(\"Cannot deserialize Proxy class \" + type.getName() + \" as a Bean\");\n  }\n  typeStr\u003dClassUtil.isLocalType(type,true);\n  if (typeStr !\u003d null) {\n    throw new IllegalArgumentException(\"Cannot deserialize Class \" + type.getName() + \" (of type \"+ typeStr+ \") as a Bean\");\n  }\n  return true;\n}",
    "begin_line": 863,
    "end_line": 880,
    "comment": "/** \n * Helper method used to skip processing for types that we know cannot be (i.e. are never consider to be) beans:  things like primitives, Arrays, Enums, and proxy types. \u003cp\u003e Note that usually we shouldn\u0027t really be getting these sort of types anyway; but better safe than sorry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory.isIgnorableType#886",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.isIgnorableType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Boolean\u003e)",
    "snippet": "protected boolean isIgnorableType(DeserializationConfig config,BeanPropertyDefinition propDef,Class\u003c?\u003e type,Map\u003cClass\u003c?\u003e,Boolean\u003e ignoredTypes){\n  Boolean status\u003dignoredTypes.get(type);\n  if (status !\u003d null) {\n    return status.booleanValue();\n  }\n  if ((type \u003d\u003d String.class) || type.isPrimitive()) {\n    status\u003dBoolean.FALSE;\n  }\n else {\n    status\u003dconfig.getConfigOverride(type).getIsIgnoredType();\n    if (status \u003d\u003d null) {\n      BeanDescription desc\u003dconfig.introspectClassAnnotations(type);\n      status\u003dconfig.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());\n      if (status \u003d\u003d null) {\n        status\u003dBoolean.FALSE;\n      }\n    }\n  }\n  ignoredTypes.put(type,status);\n  return status.booleanValue();\n}",
    "begin_line": 886,
    "end_line": 910,
    "comment": "/** \n * Helper method that will check whether given raw type is marked as always ignorable (for purpose of ignoring properties with type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanDeserializerFactory._validateSubType#915",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory._validateSubType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected void _validateSubType(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  SubTypeValidator.instance().validateSubType(ctxt,type,beanDesc);\n}",
    "begin_line": 915,
    "end_line": 920,
    "comment": "/** \n * @since 2.8.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.deser.DeserializerCache)",
    "snippet": "protected DefaultDeserializationContext(DeserializerFactory df,DeserializerCache cache){\n  super(df,cache);\n}",
    "begin_line": 43,
    "end_line": 45,
    "comment": "/** \n * Constructor that will pass specified deserializer factory and cache: cache may be null (in which case default implementation will be used), factory cannot be null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src,DeserializationConfig config,JsonParser jp,InjectableValues values){\n  super(src,config,jp,values);\n}",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src,DeserializerFactory factory){\n  super(src,factory);\n}",
    "begin_line": 52,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.DefaultDeserializationContext#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.DefaultDeserializationContext(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext)",
    "snippet": "protected DefaultDeserializationContext(DefaultDeserializationContext src){\n  super(src);\n}",
    "begin_line": 60,
    "end_line": 62,
    "comment": "/** \n * @since 2.4.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.copy#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.copy()",
    "snippet": "public DefaultDeserializationContext copy(){\n  throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\");\n}",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Method needed to ensure that  {@link ObjectMapper#copy} will workproperly; specifically, that caches are cleared, but settings will otherwise remain identical; and that no sharing of state occurs.\n * @since 2.4.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.findObjectId#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e, ObjectIdResolver)",
    "snippet": "@Override public ReadableObjectId findObjectId(Object id,ObjectIdGenerator\u003c?\u003e gen,ObjectIdResolver resolverType){\n  if (id \u003d\u003d null) {\n    return null;\n  }\n  final ObjectIdGenerator.IdKey key\u003dgen.key(id);\n  if (_objectIds \u003d\u003d null) {\n    _objectIds\u003dnew LinkedHashMap\u003cObjectIdGenerator.IdKey,ReadableObjectId\u003e();\n  }\n else {\n    ReadableObjectId entry\u003d_objectIds.get(key);\n    if (entry !\u003d null) {\n      return entry;\n    }\n  }\n  ObjectIdResolver resolver\u003dnull;\n  if (_objectIdResolvers \u003d\u003d null) {\n    _objectIdResolvers\u003dnew ArrayList\u003cObjectIdResolver\u003e(8);\n  }\n else {\n    for (    ObjectIdResolver res : _objectIdResolvers) {\n      if (res.canUseFor(resolverType)) {\n        resolver\u003dres;\n        break;\n      }\n    }\n  }\n  if (resolver \u003d\u003d null) {\n    resolver\u003dresolverType.newForDeserialization(this);\n    _objectIdResolvers.add(resolver);\n  }\n  ReadableObjectId entry\u003dcreateReadableObjectId(key);\n  entry.setResolver(resolver);\n  _objectIds.put(key,entry);\n  return entry;\n}",
    "begin_line": 83,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.createReadableObjectId#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createReadableObjectId(IdKey)",
    "snippet": "protected ReadableObjectId createReadableObjectId(IdKey key){\n  return new ReadableObjectId(key);\n}",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Overridable factory method to create a new instance of ReadableObjectId or its subclass. It is meant to be overridden when custom ReadableObjectId is needed for  {@link #tryToResolveUnresolvedObjectId}. Default implementation simply constructs default  {@link ReadableObjectId} withgiven \u003ccode\u003ekey\u003c/code\u003e.\n * @param key The key to associate with the new ReadableObjectId\n * @return New ReadableObjectId instance\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.checkUnresolvedObjectId#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.checkUnresolvedObjectId()",
    "snippet": "@Override public void checkUnresolvedObjectId() throws UnresolvedForwardReference {\n  if (_objectIds \u003d\u003d null) {\n    return;\n  }\n  if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {\n    return;\n  }\n  UnresolvedForwardReference exception\u003dnull;\n  for (  Entry\u003cIdKey,ReadableObjectId\u003e entry : _objectIds.entrySet()) {\n    ReadableObjectId roid\u003dentry.getValue();\n    if (!roid.hasReferringProperties()) {\n      continue;\n    }\n    if (tryToResolveUnresolvedObjectId(roid)) {\n      continue;\n    }\n    if (exception \u003d\u003d null) {\n      exception\u003dnew UnresolvedForwardReference(getParser(),\"Unresolved forward references for: \");\n    }\n    Object key\u003droid.getKey().key;\n    for (Iterator\u003cReferring\u003e iterator\u003droid.referringProperties(); iterator.hasNext(); ) {\n      Referring referring\u003diterator.next();\n      exception.addUnresolvedId(key,referring.getBeanType(),referring.getLocation());\n    }\n  }\n  if (exception !\u003d null) {\n    throw exception;\n  }\n}",
    "begin_line": 145,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.tryToResolveUnresolvedObjectId#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.tryToResolveUnresolvedObjectId(com.fasterxml.jackson.databind.deser.impl.ReadableObjectId)",
    "snippet": "protected boolean tryToResolveUnresolvedObjectId(ReadableObjectId roid){\n  return roid.tryToResolveUnresolved(this);\n}",
    "begin_line": 188,
    "end_line": 191,
    "comment": "/** \n * Overridable helper method called to try to resolve otherwise unresolvable  {@link ReadableObjectId}; and if this succeeds, return \u003ccode\u003etrue\u003c/code\u003e to indicate problem has been resolved in some way, so that caller can avoid reporting it as an error. \u003cp\u003e Default implementation simply calls  {@link ReadableObjectId#tryToResolveUnresolved} andreturns whatever it returns.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.deserializerInstance#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.deserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public JsonDeserializer\u003cObject\u003e deserializerInstance(Annotated ann,Object deserDef) throws JsonMappingException {\n  if (deserDef \u003d\u003d null) {\n    return null;\n  }\n  JsonDeserializer\u003c?\u003e deser;\n  if (deserDef instanceof JsonDeserializer) {\n    deser\u003d(JsonDeserializer\u003c?\u003e)deserDef;\n  }\n else {\n    if (!(deserDef instanceof Class)) {\n      throw new IllegalStateException(\"AnnotationIntrospector returned deserializer definition of type \" + deserDef.getClass().getName() + \"; expected type JsonDeserializer or Class\u003cJsonDeserializer\u003e instead\");\n    }\n    Class\u003c?\u003e deserClass\u003d(Class\u003c?\u003e)deserDef;\n    if (deserClass \u003d\u003d JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n      return null;\n    }\n    if (!JsonDeserializer.class.isAssignableFrom(deserClass)) {\n      throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + deserClass.getName() + \"; expected Class\u003cJsonDeserializer\u003e\");\n    }\n    HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n    deser\u003d(hi \u003d\u003d null) ? null : hi.deserializerInstance(_config,ann,deserClass);\n    if (deser \u003d\u003d null) {\n      deser\u003d(JsonDeserializer\u003c?\u003e)ClassUtil.createInstance(deserClass,_config.canOverrideAccessModifiers());\n    }\n  }\n  if (deser instanceof ResolvableDeserializer) {\n    ((ResolvableDeserializer)deser).resolve(this);\n  }\n  return (JsonDeserializer\u003cObject\u003e)deser;\n}",
    "begin_line": 201,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.keyDeserializerInstance#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.keyDeserializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@Override public final KeyDeserializer keyDeserializerInstance(Annotated ann,Object deserDef) throws JsonMappingException {\n  if (deserDef \u003d\u003d null) {\n    return null;\n  }\n  KeyDeserializer deser;\n  if (deserDef instanceof KeyDeserializer) {\n    deser\u003d(KeyDeserializer)deserDef;\n  }\n else {\n    if (!(deserDef instanceof Class)) {\n      throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \" + deserDef.getClass().getName() + \"; expected type KeyDeserializer or Class\u003cKeyDeserializer\u003e instead\");\n    }\n    Class\u003c?\u003e deserClass\u003d(Class\u003c?\u003e)deserDef;\n    if (deserClass \u003d\u003d KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) {\n      return null;\n    }\n    if (!KeyDeserializer.class.isAssignableFrom(deserClass)) {\n      throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + deserClass.getName() + \"; expected Class\u003cKeyDeserializer\u003e\");\n    }\n    HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n    deser\u003d(hi \u003d\u003d null) ? null : hi.keyDeserializerInstance(_config,ann,deserClass);\n    if (deser \u003d\u003d null) {\n      deser\u003d(KeyDeserializer)ClassUtil.createInstance(deserClass,_config.canOverrideAccessModifiers());\n    }\n  }\n  if (deser instanceof ResolvableDeserializer) {\n    ((ResolvableDeserializer)deser).resolve(this);\n  }\n  return deser;\n}",
    "begin_line": 241,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.with#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.with(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "public abstract DefaultDeserializationContext with(DeserializerFactory factory);",
    "begin_line": 291,
    "end_line": 291,
    "comment": "/** \n * Fluent factory method used for constructing a blueprint instance with different factory\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDeserializationContext.createInstance#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createInstance(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "public abstract DefaultDeserializationContext createInstance(DeserializationConfig config,JsonParser jp,InjectableValues values);",
    "begin_line": 297,
    "end_line": 298,
    "comment": "/** \n * Method called to create actual usable per-deserialization context instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#317",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "public Impl(DeserializerFactory df){\n  super(df,null);\n}",
    "begin_line": 317,
    "end_line": 319,
    "comment": "/** \n * Default constructor for a blueprint object, which will use the standard {@link DeserializerCache}, given factory.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "protected Impl(Impl src,DeserializationConfig config,JsonParser jp,InjectableValues values){\n  super(src,config,jp,values);\n}",
    "begin_line": 321,
    "end_line": 324,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl)",
    "snippet": "protected Impl(Impl src){\n  super(src);\n}",
    "begin_line": 326,
    "end_line": 326,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#328",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl(com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.Impl, com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "protected Impl(Impl src,DeserializerFactory factory){\n  super(src,factory);\n}",
    "begin_line": 328,
    "end_line": 330,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.copy#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.copy()",
    "snippet": "@Override public DefaultDeserializationContext copy(){\n  ClassUtil.verifyMustOverride(Impl.class,this,\"copy\");\n  return new Impl(this);\n}",
    "begin_line": 333,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.createInstance#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.createInstance(com.fasterxml.jackson.databind.DeserializationConfig, JsonParser, com.fasterxml.jackson.databind.InjectableValues)",
    "snippet": "@Override public DefaultDeserializationContext createInstance(DeserializationConfig config,JsonParser p,InjectableValues values){\n  return new Impl(this,config,p,values);\n}",
    "begin_line": 339,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.with#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext",
    "signature": "com.fasterxml.jackson.databind.deser.DefaultDeserializationContext.with(com.fasterxml.jackson.databind.deser.DeserializerFactory)",
    "snippet": "@Override public DefaultDeserializationContext with(DeserializerFactory factory){\n  return new Impl(this,factory);\n}",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleUnknownProperty#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownProperty(com.fasterxml.jackson.databind.DeserializationContext, JsonParser, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, java.lang.Object, java.lang.String)",
    "snippet": "public boolean handleUnknownProperty(DeserializationContext ctxt,JsonParser p,JsonDeserializer\u003c?\u003e deserializer,Object beanOrClass,String propertyName) throws IOException {\n  return false;\n}",
    "begin_line": 70,
    "end_line": 75,
    "comment": "/** \n * Method called when a JSON Object property with an unrecognized name is encountered. Content (supposedly) matching the property are accessible via parser that can be obtained from passed deserialization context. Handler can also choose to skip the content; if so, it MUST return true to indicate it did handle property successfully. Skipping is usually done like so: \u003cpre\u003e parser.skipChildren(); \u003c/pre\u003e \u003cp\u003e Note:  {@link com.fasterxml.jackson.databind.DeserializationFeature#FAIL_ON_UNKNOWN_PROPERTIES}) takes effect only \u003cb\u003eafter\u003c/b\u003e handler is called, and only if handler did \u003cb\u003enot\u003c/b\u003e handle the problem.\n * @param beanOrClass Either bean instance being deserialized (if onehas been instantiated so far); or Class that indicates type that will be instantiated (if no instantiation done yet: for example when bean uses non-default constructors)\n * @param p Parser to use for handling problematic content\n * @return True if the problem is resolved (and content available used or skipped);false if the handler did not anything and the problem is unresolved. Note that in latter case caller will either throw an exception or explicitly skip the content, depending on configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleWeirdKey#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdKey(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String)",
    "snippet": "public Object handleWeirdKey(DeserializationContext ctxt,Class\u003c?\u003e rawKeyType,String keyValue,String failureMsg) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 101,
    "end_line": 107,
    "comment": "/** \n * Method called when a property name from input cannot be converted to a non-Java-String key type (passed as \u003ccode\u003erawKeyType\u003c/code\u003e) due to format problem. Handler may choose to do one of 3 things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual key value to use as replacement, and continue processing. \u003c/li\u003e \u003c/ul\u003e\n * @param failureMsg Message that will be used by caller (by calling{@link DeserializationContext#weirdKeyException(Class,String,String)}) to indicate type of failure unless handler produces key to use\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use as key (possibly \u003ccode\u003enull\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleWeirdStringValue#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdStringValue(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, java.lang.String, java.lang.String)",
    "snippet": "public Object handleWeirdStringValue(DeserializationContext ctxt,Class\u003c?\u003e targetType,String valueToConvert,String failureMsg) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 135,
    "end_line": 141,
    "comment": "/** \n * Method called when a String value cannot be converted to a non-String value type due to specific problem (as opposed to String values never being usable). Handler may choose to do one of 3 things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual converted value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement, and continue processing. \u003c/li\u003e \u003c/ul\u003e\n * @param failureMsg Message that will be used by caller (by calling{@link DeserializationContext#weirdNumberException}) to indicate type of failure unless handler produces key to use\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use as (possibly \u003ccode\u003enull\u003c/code\u003e)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleWeirdNumberValue#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNumberValue(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, java.lang.Number, java.lang.String)",
    "snippet": "public Object handleWeirdNumberValue(DeserializationContext ctxt,Class\u003c?\u003e targetType,Number valueToConvert,String failureMsg) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 169,
    "end_line": 174,
    "comment": "/** \n * Method called when a numeric value (integral or floating-point from input cannot be converted to a non-numeric value type due to specific problem (as opposed to numeric values never being usable). Handler may choose to do one of 3 things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual converted value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement, and continue processing. \u003c/li\u003e \u003c/ul\u003e\n * @param failureMsg Message that will be used by caller (by calling{@link DeserializationContext#weirdNumberException}) to indicate type of failure unless handler produces key to use\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use as (possibly \u003ccode\u003enull\u003c/code\u003e)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleWeirdNativeValue#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleWeirdNativeValue(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, java.lang.Object, JsonParser)",
    "snippet": "public Object handleWeirdNativeValue(DeserializationContext ctxt,JavaType targetType,Object valueToConvert,JsonParser p) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 197,
    "end_line": 202,
    "comment": "/** \n * Method called when an embedded (native) value ( {@link JsonToken#VALUE_EMBEDDED_OBJECT}) cannot be converted directly into expected value type (usually POJO). Handler may choose to do one of 3 things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual converted value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement, and continue processing. \u003c/li\u003e \u003c/ul\u003e\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use (possibly \u003ccode\u003enull\u003c/code\u003e)\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleUnexpectedToken#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnexpectedToken(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, JsonToken, JsonParser, java.lang.String)",
    "snippet": "public Object handleUnexpectedToken(DeserializationContext ctxt,Class\u003c?\u003e targetType,JsonToken t,JsonParser p,String failureMsg) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 231,
    "end_line": 237,
    "comment": "/** \n * Method that deserializers should call if the first token of the value to deserialize is of unexpected type (that is, type of token that deserializer cannot handle). This could occur, for example, if a Number deserializer encounter  {@link JsonToken#START_ARRAY} instead of{@link JsonToken#VALUE_NUMBER_INT} or {@link JsonToken#VALUE_NUMBER_FLOAT}. \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eHandle content to match (by consuming or skipping it), and return actual instantiated value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement; value may be `null` as well as expected target type. \u003c/li\u003e \u003c/ul\u003e\n * @param failureMsg Message that will be used by callerto indicate type of failure unless handler produces value to use\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use (possibly \u003ccode\u003enull\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleInstantiationProblem#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleInstantiationProblem(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, java.lang.Object, java.lang.Throwable)",
    "snippet": "public Object handleInstantiationProblem(DeserializationContext ctxt,Class\u003c?\u003e instClass,Object argument,Throwable t) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 266,
    "end_line": 271,
    "comment": "/** \n * Method called when instance creation for a type fails due to an exception. Handler may choose to do one of following things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual instantiated value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement, and continue processing. \u003c/li\u003e \u003cli\u003eReturn \u003ccode\u003enull\u003c/code\u003e to use null as value but not to try further processing (in cases where properties would otherwise be bound) \u003c/li\u003e \u003c/ul\u003e\n * @param instClass Type that was to be instantiated\n * @param argument (optional) Additional argument that was passed to creator, if any\n * @param t Exception that caused instantiation failure\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use (possibly \u003ccode\u003enull\u003c/code\u003e\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleMissingInstantiator#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.deser.ValueInstantiator, JsonParser, java.lang.String)",
    "snippet": "public Object handleMissingInstantiator(DeserializationContext ctxt,Class\u003c?\u003e instClass,ValueInstantiator valueInsta,JsonParser p,String msg) throws IOException {\n  return handleMissingInstantiator(ctxt,instClass,p,msg);\n}",
    "begin_line": 299,
    "end_line": 307,
    "comment": "/** \n * Method called when instance creation for a type fails due to lack of an instantiator. Method is called before actual deserialization from input is attempted, so handler may do one of following things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning  {@link #NOT_HANDLED}\u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eHandle content to match (by consuming or skipping it), and return actual instantiated value (of type \u003ccode\u003etargetType\u003c/code\u003e) to use as replacement; value may be `null` as well as expected target type. \u003c/li\u003e \u003c/ul\u003e\n * @param instClass Type that was to be instantiated\n * @param p Parser to use for accessing content that needs handling, to eitheruse it or skip it (latter with  {@link JsonParser#skipChildren()}.\n * @return Either {@link #NOT_HANDLED} to indicate that handler does not knowwhat to do (and exception may be thrown), or value to use (possibly \u003ccode\u003enull\u003c/code\u003e\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleUnknownTypeId#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, java.lang.String, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleUnknownTypeId(DeserializationContext ctxt,JavaType baseType,String subTypeId,TypeIdResolver idResolver,String failureMsg) throws IOException {\n  return null;\n}",
    "begin_line": 339,
    "end_line": 345,
    "comment": "/** \n * Handler method called if resolution of type id from given String failed to produce a subtype; usually because logical id is not mapped to actual implementation class. Handler may choose to do one of following things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning `null` \u003c/li\u003e \u003cli\u003eIndicate that nothing should be deserialized, by return `Void.class` \u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual resolved type to use for type id. \u003c/li\u003e \u003c/ul\u003e\n * @param ctxt Deserialization context to use for accessing information orconstructing exception to throw\n * @param baseType Base type to use for resolving subtype id\n * @param subTypeId Subtype id that failed to resolve\n * @param failureMsg Informational message that would be thrown as part ofexception, if resolution still fails\n * @return Actual type to use, if resolved; `null` if handler does not know whatto do; or `Void.class` to indicate that nothing should be deserialized for type with the id (which caller may choose to do... or not)\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleMissingTypeId#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String)",
    "snippet": "public JavaType handleMissingTypeId(DeserializationContext ctxt,JavaType baseType,TypeIdResolver idResolver,String failureMsg) throws IOException {\n  return null;\n}",
    "begin_line": 375,
    "end_line": 381,
    "comment": "/** \n * Handler method called if an expected type id for a polymorphic value is not found and no \"default type\" is specified or allowed. Handler may choose to do one of following things: \u003cul\u003e \u003cli\u003eIndicate it does not know what to do by returning `null` \u003c/li\u003e \u003cli\u003eIndicate that nothing should be deserialized, by return `Void.class` \u003c/li\u003e \u003cli\u003eThrow a  {@link IOException} to indicate specific fail message (instead ofstandard exception caller would throw \u003c/li\u003e \u003cli\u003eReturn actual resolved type to use for this particular case. \u003c/li\u003e \u003c/ul\u003e\n * @param ctxt Deserialization context to use for accessing information orconstructing exception to throw\n * @param baseType Base type to use for resolving subtype id\n * @param failureMsg Informational message that would be thrown as part ofexception, if resolution still fails\n * @return Actual type to use, if resolved; `null` if handler does not know whatto do; or `Void.class` to indicate that nothing should be deserialized for type with the id (which caller may choose to do... or not)\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializationProblemHandler.handleMissingInstantiator#394",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializationProblemHandler.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializationProblemHandler.handleMissingInstantiator(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e, JsonParser, java.lang.String)",
    "snippet": "@Deprecated public Object handleMissingInstantiator(DeserializationContext ctxt,Class\u003c?\u003e instClass,JsonParser p,String msg) throws IOException {\n  return NOT_HANDLED;\n}",
    "begin_line": 394,
    "end_line": 399,
    "comment": "/** \n * @since 2.8\n * @deprecated Since 2.9: use variant that takes {@link ValueInstantiator}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.DeserializerCache#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.DeserializerCache()",
    "snippet": "public DeserializerCache(){\n}",
    "begin_line": 59,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.writeReplace#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.writeReplace()",
    "snippet": "Object writeReplace(){\n  _incompleteDeserializers.clear();\n  return this;\n}",
    "begin_line": 67,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.cachedDeserializersCount#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.cachedDeserializersCount()",
    "snippet": "public int cachedDeserializersCount(){\n  return _cachedDeserializers.size();\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Method that can be used to determine how many deserializers this provider is caching currently  (if it does caching: default implementation does) Exact count depends on what kind of deserializers get cached; default implementation caches only dynamically constructed deserializers, but not eagerly constructed standard deserializers (which is different from how serializer provider works). \u003cp\u003e The main use case for this method is to allow conditional flushing of deserializer cache, if certain number of entries is reached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.flushCachedDeserializers#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.flushCachedDeserializers()",
    "snippet": "public void flushCachedDeserializers(){\n  _cachedDeserializers.clear();\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Method that will drop all dynamically constructed deserializers (ones that are counted as result value for  {@link #cachedDeserializersCount}). This can be used to remove memory usage (in case some deserializers are only used once or so), or to force re-construction of deserializers after configuration changes for mapper than owns the provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findValueDeserializer#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonDeserializer\u003cObject\u003e findValueDeserializer(DeserializationContext ctxt,DeserializerFactory factory,JavaType propertyType) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_findCachedDeserializer(propertyType);\n  if (deser \u003d\u003d null) {\n    deser\u003d_createAndCacheValueDeserializer(ctxt,factory,propertyType);\n    if (deser \u003d\u003d null) {\n      deser\u003d_handleUnknownValueDeserializer(ctxt,propertyType);\n    }\n  }\n  return deser;\n}",
    "begin_line": 135,
    "end_line": 152,
    "comment": "/** \n * Method called to get hold of a deserializer for a value of given type; or if no such deserializer can be found, a default handler (which may do a best-effort generic serialization or just simply throw an exception when invoked). \u003cp\u003e Note: this method is only called for value types; not for keys. Key deserializers can be accessed using  {@link #findKeyDeserializer}. \u003cp\u003e Note also that deserializer returned is guaranteed to be resolved (if it is of type  {@link ResolvableDeserializer}), but not contextualized (wrt  {@link ContextualDeserializer}): caller has to handle latter if necessary.\n * @param ctxt Deserialization context\n * @param propertyType Declared type of the value to deserializer (obtained using\u0027setter\u0027 method signature and/or type annotations\n * @throws JsonMappingException if there are fatal problems withaccessing suitable deserializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findKeyDeserializer#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt,DeserializerFactory factory,JavaType type) throws JsonMappingException {\n  KeyDeserializer kd\u003dfactory.createKeyDeserializer(ctxt,type);\n  if (kd \u003d\u003d null) {\n    return _handleUnknownKeyDeserializer(ctxt,type);\n  }\n  if (kd instanceof ResolvableDeserializer) {\n    ((ResolvableDeserializer)kd).resolve(ctxt);\n  }\n  return kd;\n}",
    "begin_line": 162,
    "end_line": 175,
    "comment": "/** \n * Method called to get hold of a deserializer to use for deserializing keys for  {@link java.util.Map}.\n * @throws JsonMappingException if there are fatal problems withaccessing suitable key deserializer; including that of not finding any serializer\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.hasValueDeserializerFor#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.hasValueDeserializerFor(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public boolean hasValueDeserializerFor(DeserializationContext ctxt,DeserializerFactory factory,JavaType type) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_findCachedDeserializer(type);\n  if (deser \u003d\u003d null) {\n    deser\u003d_createAndCacheValueDeserializer(ctxt,factory,type);\n  }\n  return (deser !\u003d null);\n}",
    "begin_line": 182,
    "end_line": 194,
    "comment": "/** \n * Method called to find out whether provider would be able to find a deserializer for given type, using a root reference (i.e. not through fields or membership in an array or collection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._findCachedDeserializer#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._findCachedDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findCachedDeserializer(JavaType type){\n  if (type \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null JavaType passed\");\n  }\n  if (_hasCustomHandlers(type)) {\n    return null;\n  }\n  return _cachedDeserializers.get(type);\n}",
    "begin_line": 202,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createAndCacheValueDeserializer#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCacheValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _createAndCacheValueDeserializer(DeserializationContext ctxt,DeserializerFactory factory,JavaType type) throws JsonMappingException {\nsynchronized (_incompleteDeserializers) {\n    JsonDeserializer\u003cObject\u003e deser\u003d_findCachedDeserializer(type);\n    if (deser !\u003d null) {\n      return deser;\n    }\n    int count\u003d_incompleteDeserializers.size();\n    if (count \u003e 0) {\n      deser\u003d_incompleteDeserializers.get(type);\n      if (deser !\u003d null) {\n        return deser;\n      }\n    }\n    try {\n      return _createAndCache2(ctxt,factory,type);\n    }\n  finally {\n      if (count \u003d\u003d 0 \u0026\u0026 _incompleteDeserializers.size() \u003e 0) {\n        _incompleteDeserializers.clear();\n      }\n    }\n  }\n}",
    "begin_line": 220,
    "end_line": 252,
    "comment": "/** \n * Method that will try to create a deserializer for given type, and resolve and cache it if necessary\n * @param ctxt Currently active deserialization context\n * @param type Type of property to deserialize\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createAndCache2#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createAndCache2(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _createAndCache2(DeserializationContext ctxt,DeserializerFactory factory,JavaType type) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e deser;\n  try {\n    deser\u003d_createDeserializer(ctxt,factory,type);\n  }\n catch (  IllegalArgumentException iae) {\n    throw JsonMappingException.from(ctxt,ClassUtil.exceptionMessage(iae),iae);\n  }\n  if (deser \u003d\u003d null) {\n    return null;\n  }\n  boolean addToCache\u003d!_hasCustomHandlers(type) \u0026\u0026 deser.isCachable();\n  if (deser instanceof ResolvableDeserializer) {\n    _incompleteDeserializers.put(type,deser);\n    ((ResolvableDeserializer)deser).resolve(ctxt);\n    _incompleteDeserializers.remove(type);\n  }\n  if (addToCache) {\n    _cachedDeserializers.put(type,deser);\n  }\n  return deser;\n}",
    "begin_line": 258,
    "end_line": 300,
    "comment": "/** \n * Method that handles actual construction (via factory) and caching (both intermediate and eventual)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createDeserializer#314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonDeserializer\u003cObject\u003e _createDeserializer(DeserializationContext ctxt,DeserializerFactory factory,JavaType type) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) {\n    type\u003dfactory.mapAbstractType(config,type);\n  }\n  BeanDescription beanDesc\u003dconfig.introspect(type);\n  JsonDeserializer\u003cObject\u003e deser\u003dfindDeserializerFromAnnotation(ctxt,beanDesc.getClassInfo());\n  if (deser !\u003d null) {\n    return deser;\n  }\n  JavaType newType\u003dmodifyTypeByAnnotation(ctxt,beanDesc.getClassInfo(),type);\n  if (newType !\u003d type) {\n    type\u003dnewType;\n    beanDesc\u003dconfig.introspect(newType);\n  }\n  Class\u003c?\u003e builder\u003dbeanDesc.findPOJOBuilder();\n  if (builder !\u003d null) {\n    return (JsonDeserializer\u003cObject\u003e)factory.createBuilderBasedDeserializer(ctxt,type,beanDesc,builder);\n  }\n  Converter\u003cObject,Object\u003e conv\u003dbeanDesc.findDeserializationConverter();\n  if (conv \u003d\u003d null) {\n    return (JsonDeserializer\u003cObject\u003e)_createDeserializer2(ctxt,factory,type,beanDesc);\n  }\n  JavaType delegateType\u003dconv.getInputType(ctxt.getTypeFactory());\n  if (!delegateType.hasRawClass(type.getRawClass())) {\n    beanDesc\u003dconfig.introspect(delegateType);\n  }\n  return new StdDelegatingDeserializer\u003cObject\u003e(conv,delegateType,_createDeserializer2(ctxt,factory,delegateType,beanDesc));\n}",
    "begin_line": 314,
    "end_line": 359,
    "comment": "/** \n * Method that does the heavy lifting of checking for per-type annotations, find out full type, and figure out which actual factory method to call.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._createDeserializer2#361",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._createDeserializer2(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.DeserializerFactory, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonDeserializer\u003c?\u003e _createDeserializer2(DeserializationContext ctxt,DeserializerFactory factory,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  if (type.isEnumType()) {\n    return factory.createEnumDeserializer(ctxt,type,beanDesc);\n  }\n  if (type.isContainerType()) {\n    if (type.isArrayType()) {\n      return factory.createArrayDeserializer(ctxt,(ArrayType)type,beanDesc);\n    }\n    if (type.isMapLikeType()) {\n      JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n      if ((format \u003d\u003d null) || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n        MapLikeType mlt\u003d(MapLikeType)type;\n        if (mlt.isTrueMapType()) {\n          return factory.createMapDeserializer(ctxt,(MapType)mlt,beanDesc);\n        }\n        return factory.createMapLikeDeserializer(ctxt,mlt,beanDesc);\n      }\n    }\n    if (type.isCollectionLikeType()) {\n      JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n      if ((format \u003d\u003d null) || format.getShape() !\u003d JsonFormat.Shape.OBJECT) {\n        CollectionLikeType clt\u003d(CollectionLikeType)type;\n        if (clt.isTrueCollectionType()) {\n          return factory.createCollectionDeserializer(ctxt,(CollectionType)clt,beanDesc);\n        }\n        return factory.createCollectionLikeDeserializer(ctxt,clt,beanDesc);\n      }\n    }\n  }\n  if (type.isReferenceType()) {\n    return factory.createReferenceDeserializer(ctxt,(ReferenceType)type,beanDesc);\n  }\n  if (JsonNode.class.isAssignableFrom(type.getRawClass())) {\n    return factory.createTreeDeserializer(config,type,beanDesc);\n  }\n  return factory.createBeanDeserializer(ctxt,type,beanDesc);\n}",
    "begin_line": 361,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findDeserializerFromAnnotation#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findDeserializerFromAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findDeserializerFromAnnotation(DeserializationContext ctxt,Annotated ann) throws JsonMappingException {\n  Object deserDef\u003dctxt.getAnnotationIntrospector().findDeserializer(ann);\n  if (deserDef \u003d\u003d null) {\n    return null;\n  }\n  JsonDeserializer\u003cObject\u003e deser\u003dctxt.deserializerInstance(ann,deserDef);\n  return findConvertingDeserializer(ctxt,ann,deser);\n}",
    "begin_line": 419,
    "end_line": 430,
    "comment": "/** \n * Helper method called to check if a class or method has annotation that tells which class to use for deserialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findConvertingDeserializer#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findConvertingDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findConvertingDeserializer(DeserializationContext ctxt,Annotated a,JsonDeserializer\u003cObject\u003e deser) throws JsonMappingException {\n  Converter\u003cObject,Object\u003e conv\u003dfindConverter(ctxt,a);\n  if (conv \u003d\u003d null) {\n    return deser;\n  }\n  JavaType delegateType\u003dconv.getInputType(ctxt.getTypeFactory());\n  return (JsonDeserializer\u003cObject\u003e)new StdDelegatingDeserializer\u003cObject\u003e(conv,delegateType,deser);\n}",
    "begin_line": 438,
    "end_line": 448,
    "comment": "/** \n * Helper method that will check whether given annotated entity (usually class, but may also be a property accessor) indicates that a  {@link Converter} is tobe used; and if so, to construct and return suitable serializer for it. If not, will simply return given serializer as is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.findConverter#450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.findConverter(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected Converter\u003cObject,Object\u003e findConverter(DeserializationContext ctxt,Annotated a) throws JsonMappingException {\n  Object convDef\u003dctxt.getAnnotationIntrospector().findDeserializationConverter(a);\n  if (convDef \u003d\u003d null) {\n    return null;\n  }\n  return ctxt.converterInstance(a,convDef);\n}",
    "begin_line": 450,
    "end_line": 459,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache.modifyTypeByAnnotation#476",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache.modifyTypeByAnnotation(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,Annotated a,JavaType type) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (intr \u003d\u003d null) {\n    return type;\n  }\n  if (type.isMapLikeType()) {\n    JavaType keyType\u003dtype.getKeyType();\n    if (keyType !\u003d null \u0026\u0026 keyType.getValueHandler() \u003d\u003d null) {\n      Object kdDef\u003dintr.findKeyDeserializer(a);\n      if (kdDef !\u003d null) {\n        KeyDeserializer kd\u003dctxt.keyDeserializerInstance(a,kdDef);\n        if (kd !\u003d null) {\n          type\u003d((MapLikeType)type).withKeyValueHandler(kd);\n          keyType\u003dtype.getKeyType();\n        }\n      }\n    }\n  }\n  JavaType contentType\u003dtype.getContentType();\n  if (contentType !\u003d null) {\n    if (contentType.getValueHandler() \u003d\u003d null) {\n      Object cdDef\u003dintr.findContentDeserializer(a);\n      if (cdDef !\u003d null) {\n        JsonDeserializer\u003c?\u003e cd\u003dnull;\n        if (cdDef instanceof JsonDeserializer\u003c?\u003e) {\n          cdDef\u003d(JsonDeserializer\u003c?\u003e)cdDef;\n        }\n else {\n          Class\u003c?\u003e cdClass\u003d_verifyAsClass(cdDef,\"findContentDeserializer\",JsonDeserializer.None.class);\n          if (cdClass !\u003d null) {\n            cd\u003dctxt.deserializerInstance(a,cdClass);\n          }\n        }\n        if (cd !\u003d null) {\n          type\u003dtype.withContentValueHandler(cd);\n        }\n      }\n    }\n  }\n  type\u003dintr.refineDeserializationType(ctxt.getConfig(),a,type);\n  return type;\n}",
    "begin_line": 476,
    "end_line": 530,
    "comment": "/** \n * Method called to see if given method has annotations that indicate a more specific type than what the argument specifies. If annotations are present, they must specify compatible Class; instance of which can be assigned using the method. This means that the Class has to be raw class of type, or its sub-class (or, implementing class if original Class instance is an interface).\n * @param a Method or field that the type is associated with\n * @param type Type derived from the setter argument\n * @return Original type if no annotations are present; or a morespecific type derived from it if type annotation(s) was found\n * @throws JsonMappingException if invalid annotation is found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._hasCustomHandlers#544",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._hasCustomHandlers(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private boolean _hasCustomHandlers(JavaType t){\n  if (t.isContainerType()) {\n    JavaType ct\u003dt.getContentType();\n    if (ct !\u003d null) {\n      if ((ct.getValueHandler() !\u003d null) || (ct.getTypeHandler() !\u003d null)) {\n        return true;\n      }\n    }\n    if (t.isMapLikeType()) {\n      JavaType kt\u003dt.getKeyType();\n      if (kt.getValueHandler() !\u003d null) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 544,
    "end_line": 562,
    "comment": "/** \n * Helper method used to prevent both caching and cache lookups for structured types that have custom value handlers\n * @since 2.8.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._verifyAsClass#564",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._verifyAsClass(java.lang.Object, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private Class\u003c?\u003e _verifyAsClass(Object src,String methodName,Class\u003c?\u003e noneClass){\n  if (src \u003d\u003d null) {\n    return null;\n  }\n  if (!(src instanceof Class)) {\n    throw new IllegalStateException(\"AnnotationIntrospector.\" + methodName + \"() returned value of type \"+ src.getClass().getName()+ \": expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n  }\n  Class\u003c?\u003e cls\u003d(Class\u003c?\u003e)src;\n  if (cls \u003d\u003d noneClass || ClassUtil.isBogusClass(cls)) {\n    return null;\n  }\n  return cls;\n}",
    "begin_line": 564,
    "end_line": 577,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._handleUnknownValueDeserializer#585",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._handleUnknownValueDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _handleUnknownValueDeserializer(DeserializationContext ctxt,JavaType type) throws JsonMappingException {\n  Class\u003c?\u003e rawClass\u003dtype.getRawClass();\n  if (!ClassUtil.isConcrete(rawClass)) {\n    return ctxt.reportBadDefinition(type,\"Cannot find a Value deserializer for abstract type \" + type);\n  }\n  return ctxt.reportBadDefinition(type,\"Cannot find a Value deserializer for type \" + type);\n}",
    "begin_line": 585,
    "end_line": 594,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerCache._handleUnknownKeyDeserializer#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerCache",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerCache._handleUnknownKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt,JavaType type) throws JsonMappingException {\n  return ctxt.reportBadDefinition(type,\"Cannot find a (Map) Key deserializer for type \" + type);\n}",
    "begin_line": 596,
    "end_line": 600,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAdditionalDeserializers#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAdditionalDeserializers(com.fasterxml.jackson.databind.deser.Deserializers)",
    "snippet": "public abstract DeserializerFactory withAdditionalDeserializers(Deserializers additional);",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional deserializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAdditionalKeyDeserializers#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAdditionalKeyDeserializers(com.fasterxml.jackson.databind.deser.KeyDeserializers)",
    "snippet": "public abstract DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional);",
    "begin_line": 61,
    "end_line": 61,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link KeyDeserializers}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withDeserializerModifier#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withDeserializerModifier(com.fasterxml.jackson.databind.deser.BeanDeserializerModifier)",
    "snippet": "public abstract DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier);",
    "begin_line": 67,
    "end_line": 67,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link BeanDeserializerModifier}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withAbstractTypeResolver#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withAbstractTypeResolver(com.fasterxml.jackson.databind.AbstractTypeResolver)",
    "snippet": "public abstract DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver);",
    "begin_line": 73,
    "end_line": 73,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link AbstractTypeResolver}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.withValueInstantiators#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.withValueInstantiators(com.fasterxml.jackson.databind.deser.ValueInstantiators)",
    "snippet": "public abstract DeserializerFactory withValueInstantiators(ValueInstantiators instantiators);",
    "begin_line": 79,
    "end_line": 79,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional {@link ValueInstantiators}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.mapAbstractType#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.mapAbstractType(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JavaType mapAbstractType(DeserializationConfig config,JavaType type) throws JsonMappingException ;",
    "begin_line": 93,
    "end_line": 94,
    "comment": "/** \n * Method that can be called to try to resolve an abstract type (interface, abstract class) into a concrete type, or at least something \"more concrete\" (abstract class instead of interface). Will either return passed type, or a more specific type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.findValueInstantiator#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.findValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract ValueInstantiator findValueInstantiator(DeserializationContext ctxt,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Method that is to find all creators (constructors, factory methods) for the bean type to deserialize.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createBeanDeserializer#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createBeanDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e createBeanDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Method called to create (or, for completely immutable deserializers, reuse) a deserializer that can convert JSON content into values of specified Java \"bean\" (POJO) type. At this point it is known that the type is not otherwise recognized as one of structured types (array, Collection, Map) or a well-known JDK type (enum, primitives/wrappers, String); this method only gets called if other options are exhausted. This also means that this method can be overridden to add support for custom types.\n * @param type Type to be deserialized\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createBuilderBasedDeserializer#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createBuilderBasedDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e createBuilderBasedDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc,Class\u003c?\u003e builderClass) throws JsonMappingException ;",
    "begin_line": 124,
    "end_line": 127,
    "comment": "/** \n * Method called to create a deserializer that will use specified Builder class for building value instances.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createEnumDeserializer#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createEnumDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createEnumDeserializer(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createReferenceDeserializer#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createReferenceDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createReferenceDeserializer(DeserializationContext ctxt,ReferenceType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 137,
    "end_line": 139,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createTreeDeserializer#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createTreeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createTreeDeserializer(DeserializationConfig config,JavaType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Method called to create and return a deserializer that can construct JsonNode(s) from JSON content.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createArrayDeserializer#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createArrayDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createArrayDeserializer(DeserializationContext ctxt,ArrayType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Method called to create (or, for completely immutable deserializers, reuse) a deserializer that can convert JSON content into values of specified Java type.\n * @param type Type to be deserialized\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createCollectionDeserializer#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createCollectionDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createCollectionDeserializer(DeserializationContext ctxt,CollectionType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createCollectionLikeDeserializer#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createCollectionLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.CollectionLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createCollectionLikeDeserializer(DeserializationContext ctxt,CollectionLikeType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createMapDeserializer#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createMapDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createMapDeserializer(DeserializationContext ctxt,MapType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createMapLikeDeserializer#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createMapLikeDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.type.MapLikeType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e createMapLikeDeserializer(DeserializationContext ctxt,MapLikeType type,BeanDescription beanDesc) throws JsonMappingException ;",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.createKeyDeserializer#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.createKeyDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract KeyDeserializer createKeyDeserializer(DeserializationContext ctxt,JavaType type) throws JsonMappingException ;",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Method called to find if factory knows how to create a key deserializer for specified type; currently this means checking if a module has registered possible deserializers.\n * @return Key deserializer to use for specified type, if one found; null if not(and default key deserializer should be used)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DeserializerFactory.findTypeDeserializer#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/DeserializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.deser.DeserializerFactory",
    "signature": "com.fasterxml.jackson.databind.deser.DeserializerFactory.findTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract TypeDeserializer findTypeDeserializer(DeserializationConfig config,JavaType baseType) throws JsonMappingException ;",
    "begin_line": 201,
    "end_line": 203,
    "comment": "/** \n * Method called to find and create a type information deserializer for given base type, if one is needed. If not needed (no polymorphic handling configured for type), should return null. \u003cp\u003e Note that this method is usually only directly called for values of container (Collection, array, Map) types and root values, but not for bean property values.\n * @param baseType Declared base type of the value to deserializer (actualdeserializer type will be this type or its subtype)\n * @return Type deserializer to use for given base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.util.Annotations)",
    "snippet": "protected SettableBeanProperty(BeanPropertyDefinition propDef,JavaType type,TypeDeserializer typeDeser,Annotations contextAnnotations){\n  this(propDef.getFullName(),type,propDef.getWrapperName(),typeDeser,contextAnnotations,propDef.getMetadata());\n}",
    "begin_line": 133,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.util.Annotations, com.fasterxml.jackson.databind.PropertyMetadata)",
    "snippet": "protected SettableBeanProperty(PropertyName propName,JavaType type,PropertyName wrapper,TypeDeserializer typeDeser,Annotations contextAnnotations,PropertyMetadata metadata){\n  super(metadata);\n  if (propName \u003d\u003d null) {\n    _propName\u003dPropertyName.NO_NAME;\n  }\n else {\n    _propName\u003dpropName.internSimpleName();\n  }\n  _type\u003dtype;\n  _wrapperName\u003dwrapper;\n  _contextAnnotations\u003dcontextAnnotations;\n  _viewMatcher\u003dnull;\n  if (typeDeser !\u003d null) {\n    typeDeser\u003dtypeDeser.forProperty(this);\n  }\n  _valueTypeDeserializer\u003dtypeDeser;\n  _valueDeserializer\u003dMISSING_VALUE_DESERIALIZER;\n  _nullProvider\u003dMISSING_VALUE_DESERIALIZER;\n}",
    "begin_line": 140,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.PropertyMetadata, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected SettableBeanProperty(PropertyName propName,JavaType type,PropertyMetadata metadata,JsonDeserializer\u003cObject\u003e valueDeser){\n  super(metadata);\n  if (propName \u003d\u003d null) {\n    _propName\u003dPropertyName.NO_NAME;\n  }\n else {\n    _propName\u003dpropName.internSimpleName();\n  }\n  _type\u003dtype;\n  _wrapperName\u003dnull;\n  _contextAnnotations\u003dnull;\n  _viewMatcher\u003dnull;\n  _valueTypeDeserializer\u003dnull;\n  _valueDeserializer\u003dvalueDeser;\n  _nullProvider\u003dvalueDeser;\n}",
    "begin_line": 174,
    "end_line": 192,
    "comment": "/** \n * Constructor only used by  {@link com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty}.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected SettableBeanProperty(SettableBeanProperty src){\n  super(src);\n  _propName\u003dsrc._propName;\n  _type\u003dsrc._type;\n  _wrapperName\u003dsrc._wrapperName;\n  _contextAnnotations\u003dsrc._contextAnnotations;\n  _valueDeserializer\u003dsrc._valueDeserializer;\n  _valueTypeDeserializer\u003dsrc._valueTypeDeserializer;\n  _managedReferenceName\u003dsrc._managedReferenceName;\n  _propertyIndex\u003dsrc._propertyIndex;\n  _viewMatcher\u003dsrc._viewMatcher;\n  _nullProvider\u003dsrc._nullProvider;\n}",
    "begin_line": 197,
    "end_line": 210,
    "comment": "/** \n * Basic copy-constructor for sub-classes to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected SettableBeanProperty(SettableBeanProperty src,JsonDeserializer\u003c?\u003e deser,NullValueProvider nuller){\n  super(src);\n  _propName\u003dsrc._propName;\n  _type\u003dsrc._type;\n  _wrapperName\u003dsrc._wrapperName;\n  _contextAnnotations\u003dsrc._contextAnnotations;\n  _valueTypeDeserializer\u003dsrc._valueTypeDeserializer;\n  _managedReferenceName\u003dsrc._managedReferenceName;\n  _propertyIndex\u003dsrc._propertyIndex;\n  if (deser \u003d\u003d null) {\n    _valueDeserializer\u003dMISSING_VALUE_DESERIALIZER;\n  }\n else {\n    _valueDeserializer\u003d(JsonDeserializer\u003cObject\u003e)deser;\n  }\n  _viewMatcher\u003dsrc._viewMatcher;\n  if (nuller \u003d\u003d MISSING_VALUE_DESERIALIZER) {\n    nuller\u003d_valueDeserializer;\n  }\n  _nullProvider\u003dnuller;\n}",
    "begin_line": 216,
    "end_line": 239,
    "comment": "/** \n * Copy-with-deserializer-change constructor for sub-classes to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.SettableBeanProperty#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.SettableBeanProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected SettableBeanProperty(SettableBeanProperty src,PropertyName newName){\n  super(src);\n  _propName\u003dnewName;\n  _type\u003dsrc._type;\n  _wrapperName\u003dsrc._wrapperName;\n  _contextAnnotations\u003dsrc._contextAnnotations;\n  _valueDeserializer\u003dsrc._valueDeserializer;\n  _valueTypeDeserializer\u003dsrc._valueTypeDeserializer;\n  _managedReferenceName\u003dsrc._managedReferenceName;\n  _propertyIndex\u003dsrc._propertyIndex;\n  _viewMatcher\u003dsrc._viewMatcher;\n  _nullProvider\u003dsrc._nullProvider;\n}",
    "begin_line": 244,
    "end_line": 257,
    "comment": "/** \n * Copy-with-deserializer-change constructor for sub-classes to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.withValueDeserializer#269",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer\u003c?\u003e deser);",
    "begin_line": 269,
    "end_line": 269,
    "comment": "/** \n * Fluent factory method for constructing and returning a new instance with specified value deserializer. Note that this method should NOT change configuration of this instance.\n * @param deser Deserializer to assign to the new property instance\n * @return Newly constructed instance, if value deserializer differs from theone used for this instance; or \u0027this\u0027 if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.withName#281",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public abstract SettableBeanProperty withName(PropertyName newName);",
    "begin_line": 281,
    "end_line": 281,
    "comment": "/** \n * Fluent factory method for constructing and returning a new instance with specified property name. Note that this method should NOT change configuration of this instance.\n * @param newName Name to use for the new instance.\n * @return Newly constructed instance, if property name differs from theone used for this instance; or \u0027this\u0027 if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.withSimpleName#286",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withSimpleName(java.lang.String)",
    "snippet": "public SettableBeanProperty withSimpleName(String simpleName){\n  PropertyName n\u003d(_propName \u003d\u003d null) ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName);\n  return (n \u003d\u003d _propName) ? this : withName(n);\n}",
    "begin_line": 286,
    "end_line": 290,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.withNullProvider#295",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withNullProvider(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "public abstract SettableBeanProperty withNullProvider(NullValueProvider nva);",
    "begin_line": 295,
    "end_line": 295,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.setManagedReferenceName#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setManagedReferenceName(java.lang.String)",
    "snippet": "public void setManagedReferenceName(String n){\n  _managedReferenceName\u003dn;\n}",
    "begin_line": 297,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.setObjectIdInfo#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setObjectIdInfo(com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "public void setObjectIdInfo(ObjectIdInfo objectIdInfo){\n  _objectIdInfo\u003dobjectIdInfo;\n}",
    "begin_line": 301,
    "end_line": 303,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.setViews#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setViews(java.lang.Class\u003c?\u003e[])",
    "snippet": "public void setViews(Class\u003c?\u003e[] views){\n  if (views \u003d\u003d null) {\n    _viewMatcher\u003dnull;\n  }\n else {\n    _viewMatcher\u003dViewMatcher.construct(views);\n  }\n}",
    "begin_line": 305,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.assignIndex#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.assignIndex(int)",
    "snippet": "public void assignIndex(int index){\n  if (_propertyIndex !\u003d -1) {\n    throw new IllegalStateException(\"Property \u0027\" + getName() + \"\u0027 already had index (\"+ _propertyIndex+ \"), trying to assign \"+ index);\n  }\n  _propertyIndex\u003dindex;\n}",
    "begin_line": 316,
    "end_line": 321,
    "comment": "/** \n * Method used to assign index for property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.fixAccess#330",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.fixAccess(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public void fixAccess(DeserializationConfig config){\n  ;\n}",
    "begin_line": 330,
    "end_line": 332,
    "comment": "/** \n * Method called to ensure that the mutator has proper access rights to be called, as per configuration. Overridden by implementations that have mutators that require access, fields and setters.\n * @since 2.8.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.markAsIgnorable#337",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.markAsIgnorable()",
    "snippet": "public void markAsIgnorable(){\n}",
    "begin_line": 337,
    "end_line": 337,
    "comment": "/** \n * @since 2.9.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.isIgnorable#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.isIgnorable()",
    "snippet": "public boolean isIgnorable(){\n  return false;\n}",
    "begin_line": 342,
    "end_line": 342,
    "comment": "/** \n * @since 2.9.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getName#351",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getName()",
    "snippet": "@Override public final String getName(){\n  return _propName.getSimpleName();\n}",
    "begin_line": 351,
    "end_line": 353,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getFullName#356",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getFullName()",
    "snippet": "@Override public PropertyName getFullName(){\n  return _propName;\n}",
    "begin_line": 356,
    "end_line": 358,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getType#361",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _type;\n}",
    "begin_line": 361,
    "end_line": 361,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getWrapperName#364",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getWrapperName()",
    "snippet": "@Override public PropertyName getWrapperName(){\n  return _wrapperName;\n}",
    "begin_line": 364,
    "end_line": 366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getMember#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getMember()",
    "snippet": "@Override public abstract AnnotatedMember getMember();",
    "begin_line": 369,
    "end_line": 369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getAnnotation#372",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public abstract \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls);",
    "begin_line": 372,
    "end_line": 372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getContextAnnotation#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getContextAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public \u003cA extends Annotation\u003eA getContextAnnotation(Class\u003cA\u003e acls){\n  return _contextAnnotations.get(acls);\n}",
    "begin_line": 375,
    "end_line": 377,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.depositSchemaProperty#380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.depositSchemaProperty(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,SerializerProvider provider) throws JsonMappingException {\n  if (isRequired()) {\n    objectVisitor.property(this);\n  }\n else {\n    objectVisitor.optionalProperty(this);\n  }\n}",
    "begin_line": 380,
    "end_line": 389,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getDeclaringClass#397",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getDeclaringClass()",
    "snippet": "protected Class\u003c?\u003e getDeclaringClass(){\n  return getMember().getDeclaringClass();\n}",
    "begin_line": 397,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getManagedReferenceName#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getManagedReferenceName()",
    "snippet": "public String getManagedReferenceName(){\n  return _managedReferenceName;\n}",
    "begin_line": 401,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getObjectIdInfo#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getObjectIdInfo()",
    "snippet": "public ObjectIdInfo getObjectIdInfo(){\n  return _objectIdInfo;\n}",
    "begin_line": 403,
    "end_line": 403,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.hasValueDeserializer#405",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasValueDeserializer()",
    "snippet": "public boolean hasValueDeserializer(){\n  return (_valueDeserializer !\u003d null) \u0026\u0026 (_valueDeserializer !\u003d MISSING_VALUE_DESERIALIZER);\n}",
    "begin_line": 405,
    "end_line": 407,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.hasValueTypeDeserializer#409",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasValueTypeDeserializer()",
    "snippet": "public boolean hasValueTypeDeserializer(){\n  return (_valueTypeDeserializer !\u003d null);\n}",
    "begin_line": 409,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getValueDeserializer#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getValueDeserializer()",
    "snippet": "public JsonDeserializer\u003cObject\u003e getValueDeserializer(){\n  JsonDeserializer\u003cObject\u003e deser\u003d_valueDeserializer;\n  if (deser \u003d\u003d MISSING_VALUE_DESERIALIZER) {\n    return null;\n  }\n  return deser;\n}",
    "begin_line": 411,
    "end_line": 417,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getValueTypeDeserializer#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getValueTypeDeserializer()",
    "snippet": "public TypeDeserializer getValueTypeDeserializer(){\n  return _valueTypeDeserializer;\n}",
    "begin_line": 419,
    "end_line": 419,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getNullValueProvider#424",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getNullValueProvider()",
    "snippet": "public NullValueProvider getNullValueProvider(){\n  return _nullProvider;\n}",
    "begin_line": 424,
    "end_line": 424,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.visibleInView#426",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.visibleInView(java.lang.Class\u003c?\u003e)",
    "snippet": "public boolean visibleInView(Class\u003c?\u003e activeView){\n  return (_viewMatcher \u003d\u003d null) || _viewMatcher.isVisibleForView(activeView);\n}",
    "begin_line": 426,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.hasViews#430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasViews()",
    "snippet": "public boolean hasViews(){\n  return _viewMatcher !\u003d null;\n}",
    "begin_line": 430,
    "end_line": 430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getPropertyIndex#439",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getPropertyIndex()",
    "snippet": "public int getPropertyIndex(){\n  return _propertyIndex;\n}",
    "begin_line": 439,
    "end_line": 439,
    "comment": "/** \n * Method for accessing unique index of this property; indexes are assigned once all properties of a  {@link BeanDeserializer} havebeen collected.\n * @return Index of this property\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getCreatorIndex#447",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getCreatorIndex()",
    "snippet": "public int getCreatorIndex(){\n  throw new IllegalStateException(String.format(\"Internal error: no creator index for property \u0027%s\u0027 (of type %s)\",this.getName(),getClass().getName()));\n}",
    "begin_line": 447,
    "end_line": 452,
    "comment": "/** \n * Method for accessing index of the creator property: for other types of properties will simply return -1.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.getInjectableValueId#458",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getInjectableValueId()",
    "snippet": "public Object getInjectableValueId(){\n  return null;\n}",
    "begin_line": 458,
    "end_line": 458,
    "comment": "/** \n * Accessor for id of injectable value, if this bean property supports value injection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.deserializeAndSet#473",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeAndSet(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "public abstract void deserializeAndSet(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException ;",
    "begin_line": 473,
    "end_line": 474,
    "comment": "/** \n * Method called to deserialize appropriate value, given parser (and context), and set it using appropriate mechanism. Pre-condition is that passed parser must point to the first token that should be consumed to produce the value (the only value for scalars, multiple for Objects and Arrays).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.deserializeSetAndReturn#484",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeSetAndReturn(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "public abstract Object deserializeSetAndReturn(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException ;",
    "begin_line": 484,
    "end_line": 485,
    "comment": "/** \n * Alternative to  {@link #deserializeAndSet} that returnseither return value of setter method called (if one is), or null to indicate that no return value is available. Mostly used to support Builder style deserialization.\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.set#495",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.set(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract void set(Object instance,Object value) throws IOException ;",
    "begin_line": 495,
    "end_line": 495,
    "comment": "/** \n * Method called to assign given value to this property, on specified Object. \u003cp\u003e Note: this is an optional operation, not supported by all implementations, creator-backed properties for example do not support this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.setAndReturn#506",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setAndReturn(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract Object setAndReturn(Object instance,Object value) throws IOException ;",
    "begin_line": 506,
    "end_line": 506,
    "comment": "/** \n * Method called to assign given value to this property, on specified Object, and return whatever delegating accessor returned (if anything) \u003cp\u003e Note: this is an optional operation, not supported by all implementations, creator-backed properties for example do not support this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.deserialize#521",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public final Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NULL)) {\n    return _nullProvider.getNullValue(ctxt);\n  }\n  if (_valueTypeDeserializer !\u003d null) {\n    return _valueDeserializer.deserializeWithType(p,ctxt,_valueTypeDeserializer);\n  }\n  Object value\u003d_valueDeserializer.deserialize(p,ctxt);\n  if (value \u003d\u003d null) {\n    value\u003d_nullProvider.getNullValue(ctxt);\n  }\n  return value;\n}",
    "begin_line": 521,
    "end_line": 535,
    "comment": "/** \n * This method is needed by some specialized bean deserializers, and also called by some  {@link #deserializeAndSet} implementations.\u003cp\u003e Pre-condition is that passed parser must point to the first token that should be consumed to produce the value (the only value for scalars, multiple for Objects and Arrays). \u003cp\u003e  Note that this method is final for performance reasons: to override functionality you must override other methods that call this method; this method should also not be called directly unless you really know what you are doing (and probably not even then).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.deserializeWith#540",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeWith(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "public final Object deserializeWith(JsonParser p,DeserializationContext ctxt,Object toUpdate) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NULL)) {\n    if (NullsConstantProvider.isSkipper(_nullProvider)) {\n      return toUpdate;\n    }\n    return _nullProvider.getNullValue(ctxt);\n  }\n  if (_valueTypeDeserializer !\u003d null) {\n    ctxt.reportBadDefinition(getType(),String.format(\"Cannot merge polymorphic property \u0027%s\u0027\",getName()));\n  }\n  Object value\u003d_valueDeserializer.deserialize(p,ctxt,toUpdate);\n  if (value \u003d\u003d null) {\n    if (NullsConstantProvider.isSkipper(_nullProvider)) {\n      return toUpdate;\n    }\n    value\u003d_nullProvider.getNullValue(ctxt);\n  }\n  return value;\n}",
    "begin_line": 540,
    "end_line": 568,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty._throwAsIOE#580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(JsonParser, java.lang.Exception, java.lang.Object)",
    "snippet": "protected void _throwAsIOE(JsonParser p,Exception e,Object value) throws IOException {\n  if (e instanceof IllegalArgumentException) {\n    String actType\u003dClassUtil.classNameOf(value);\n    StringBuilder msg\u003dnew StringBuilder(\"Problem deserializing property \u0027\").append(getName()).append(\"\u0027 (expected type: \").append(getType()).append(\"; actual type: \").append(actType).append(\")\");\n    String origMsg\u003dClassUtil.exceptionMessage(e);\n    if (origMsg !\u003d null) {\n      msg.append(\", problem: \").append(origMsg);\n    }\n else {\n      msg.append(\" (no error message provided)\");\n    }\n    throw JsonMappingException.from(p,msg.toString(),e);\n  }\n  _throwAsIOE(p,e);\n}",
    "begin_line": 580,
    "end_line": 600,
    "comment": "/** \n * Method that takes in exception of any type, and casts or wraps it to an IOException or its subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty._throwAsIOE#605",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(JsonParser, java.lang.Exception)",
    "snippet": "protected IOException _throwAsIOE(JsonParser p,Exception e) throws IOException {\n  ClassUtil.throwIfIOE(e);\n  ClassUtil.throwIfRTE(e);\n  Throwable th\u003dClassUtil.getRootCause(e);\n  throw JsonMappingException.from(p,ClassUtil.exceptionMessage(th),th);\n}",
    "begin_line": 605,
    "end_line": 612,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty._throwAsIOE#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(java.lang.Exception)",
    "snippet": "@Deprecated protected IOException _throwAsIOE(Exception e) throws IOException {\n  return _throwAsIOE((JsonParser)null,e);\n}",
    "begin_line": 615,
    "end_line": 617,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty._throwAsIOE#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty._throwAsIOE(java.lang.Exception, java.lang.Object)",
    "snippet": "protected void _throwAsIOE(Exception e,Object value) throws IOException {\n  _throwAsIOE((JsonParser)null,e,value);\n}",
    "begin_line": 621,
    "end_line": 623,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SettableBeanProperty.toString#625",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.toString()",
    "snippet": "@Override public String toString(){\n  return \"[property \u0027\" + getName() + \"\u0027]\";\n}",
    "begin_line": 625,
    "end_line": 625,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.Delegating#648",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.Delegating(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected Delegating(SettableBeanProperty d){\n  super(d);\n  delegate\u003dd;\n}",
    "begin_line": 648,
    "end_line": 651,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.withDelegate#657",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withDelegate(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected abstract SettableBeanProperty withDelegate(SettableBeanProperty d);",
    "begin_line": 657,
    "end_line": 657,
    "comment": "/** \n * Method sub-classes must implement, to construct a new instance with given delegate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating._with#659",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty._with(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected SettableBeanProperty _with(SettableBeanProperty newDelegate){\n  if (newDelegate \u003d\u003d delegate) {\n    return this;\n  }\n  return withDelegate(newDelegate);\n}",
    "begin_line": 659,
    "end_line": 664,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.withValueDeserializer#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@Override public SettableBeanProperty withValueDeserializer(JsonDeserializer\u003c?\u003e deser){\n  return _with(delegate.withValueDeserializer(deser));\n}",
    "begin_line": 667,
    "end_line": 669,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.withName#672",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public SettableBeanProperty withName(PropertyName newName){\n  return _with(delegate.withName(newName));\n}",
    "begin_line": 672,
    "end_line": 674,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.withNullProvider#677",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.withNullProvider(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "@Override public SettableBeanProperty withNullProvider(NullValueProvider nva){\n  return _with(delegate.withNullProvider(nva));\n}",
    "begin_line": 677,
    "end_line": 679,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.assignIndex#682",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.assignIndex(int)",
    "snippet": "@Override public void assignIndex(int index){\n  delegate.assignIndex(index);\n}",
    "begin_line": 682,
    "end_line": 684,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.fixAccess#687",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.fixAccess(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public void fixAccess(DeserializationConfig config){\n  delegate.fixAccess(config);\n}",
    "begin_line": 687,
    "end_line": 689,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getDeclaringClass#698",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getDeclaringClass()",
    "snippet": "@Override protected Class\u003c?\u003e getDeclaringClass(){\n  return delegate.getDeclaringClass();\n}",
    "begin_line": 698,
    "end_line": 698,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getManagedReferenceName#701",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getManagedReferenceName()",
    "snippet": "@Override public String getManagedReferenceName(){\n  return delegate.getManagedReferenceName();\n}",
    "begin_line": 701,
    "end_line": 701,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getObjectIdInfo#704",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getObjectIdInfo()",
    "snippet": "@Override public ObjectIdInfo getObjectIdInfo(){\n  return delegate.getObjectIdInfo();\n}",
    "begin_line": 704,
    "end_line": 704,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.hasValueDeserializer#707",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasValueDeserializer()",
    "snippet": "@Override public boolean hasValueDeserializer(){\n  return delegate.hasValueDeserializer();\n}",
    "begin_line": 707,
    "end_line": 707,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.hasValueTypeDeserializer#710",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasValueTypeDeserializer()",
    "snippet": "@Override public boolean hasValueTypeDeserializer(){\n  return delegate.hasValueTypeDeserializer();\n}",
    "begin_line": 710,
    "end_line": 710,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getValueDeserializer#713",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getValueDeserializer()",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e getValueDeserializer(){\n  return delegate.getValueDeserializer();\n}",
    "begin_line": 713,
    "end_line": 713,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getValueTypeDeserializer#716",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getValueTypeDeserializer()",
    "snippet": "@Override public TypeDeserializer getValueTypeDeserializer(){\n  return delegate.getValueTypeDeserializer();\n}",
    "begin_line": 716,
    "end_line": 716,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.visibleInView#719",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.visibleInView(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean visibleInView(Class\u003c?\u003e activeView){\n  return delegate.visibleInView(activeView);\n}",
    "begin_line": 719,
    "end_line": 719,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.hasViews#722",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.hasViews()",
    "snippet": "@Override public boolean hasViews(){\n  return delegate.hasViews();\n}",
    "begin_line": 722,
    "end_line": 722,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getPropertyIndex#725",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getPropertyIndex()",
    "snippet": "@Override public int getPropertyIndex(){\n  return delegate.getPropertyIndex();\n}",
    "begin_line": 725,
    "end_line": 725,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getCreatorIndex#728",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getCreatorIndex()",
    "snippet": "@Override public int getCreatorIndex(){\n  return delegate.getCreatorIndex();\n}",
    "begin_line": 728,
    "end_line": 728,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getInjectableValueId#731",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getInjectableValueId()",
    "snippet": "@Override public Object getInjectableValueId(){\n  return delegate.getInjectableValueId();\n}",
    "begin_line": 731,
    "end_line": 731,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getMember#734",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getMember()",
    "snippet": "@Override public AnnotatedMember getMember(){\n  return delegate.getMember();\n}",
    "begin_line": 734,
    "end_line": 736,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getAnnotation#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls){\n  return delegate.getAnnotation(acls);\n}",
    "begin_line": 739,
    "end_line": 741,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.getDelegate#749",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.getDelegate()",
    "snippet": "public SettableBeanProperty getDelegate(){\n  return delegate;\n}",
    "begin_line": 749,
    "end_line": 751,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.deserializeAndSet#760",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeAndSet(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public void deserializeAndSet(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException {\n  delegate.deserializeAndSet(p,ctxt,instance);\n}",
    "begin_line": 760,
    "end_line": 763,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.deserializeSetAndReturn#766",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.deserializeSetAndReturn(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object deserializeSetAndReturn(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException {\n  return delegate.deserializeSetAndReturn(p,ctxt,instance);\n}",
    "begin_line": 766,
    "end_line": 770,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.set#773",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.set(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void set(Object instance,Object value) throws IOException {\n  delegate.set(instance,value);\n}",
    "begin_line": 773,
    "end_line": 775,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Delegating.setAndReturn#778",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.SettableBeanProperty",
    "signature": "com.fasterxml.jackson.databind.deser.SettableBeanProperty.setAndReturn(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public Object setAndReturn(Object instance,Object value) throws IOException {\n  return delegate.setAndReturn(instance,value);\n}",
    "begin_line": 778,
    "end_line": 780,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getValueClass#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getValueClass()",
    "snippet": "public Class\u003c?\u003e getValueClass(){\n  return Object.class;\n}",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Accessor for raw (type-erased) type of instances to create. \u003cp\u003e NOTE: since this method has not existed since beginning of Jackson 2.0 series, default implementation will just return \u003ccode\u003eObject.class\u003c/code\u003e; implementations are expected to override it with real value.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getValueTypeDesc#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getValueTypeDesc()",
    "snippet": "public String getValueTypeDesc(){\n  Class\u003c?\u003e cls\u003dgetValueClass();\n  if (cls \u003d\u003d null) {\n    return \"UNKNOWN\";\n  }\n  return cls.getName();\n}",
    "begin_line": 57,
    "end_line": 63,
    "comment": "/** \n * Method that returns description of the value type this instantiator handles. Used for error messages, diagnostics.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canInstantiate#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canInstantiate()",
    "snippet": "public boolean canInstantiate(){\n  return canCreateUsingDefault() || canCreateUsingDelegate() || canCreateUsingArrayDelegate()|| canCreateFromObjectWith()|| canCreateFromString()|| canCreateFromInt()|| canCreateFromLong()|| canCreateFromDouble()|| canCreateFromBoolean();\n}",
    "begin_line": 70,
    "end_line": 76,
    "comment": "/** \n * Method that will return true if any of \u003ccode\u003ecanCreateXxx\u003c/code\u003e method returns true: that is, if there is any way that an instance could be created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromString#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromString()",
    "snippet": "public boolean canCreateFromString(){\n  return false;\n}",
    "begin_line": 82,
    "end_line": 82,
    "comment": "/** \n * Method that can be called to check whether a String-based creator is available for this instantiator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromInt#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromInt()",
    "snippet": "public boolean canCreateFromInt(){\n  return false;\n}",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * Method that can be called to check whether an integer (int, Integer) based creator is available to use (to call  {@link #createFromInt}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromLong#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromLong()",
    "snippet": "public boolean canCreateFromLong(){\n  return false;\n}",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * Method that can be called to check whether a long (long, Long) based creator is available to use (to call  {@link #createFromLong}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromDouble#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromDouble()",
    "snippet": "public boolean canCreateFromDouble(){\n  return false;\n}",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * Method that can be called to check whether a double (double / Double) based creator is available to use (to call  {@link #createFromDouble}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromBoolean#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromBoolean()",
    "snippet": "public boolean canCreateFromBoolean(){\n  return false;\n}",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * Method that can be called to check whether a double (boolean / Boolean) based creator is available to use (to call  {@link #createFromDouble}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateUsingDefault#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateUsingDefault()",
    "snippet": "public boolean canCreateUsingDefault(){\n  return getDefaultCreator() !\u003d null;\n}",
    "begin_line": 113,
    "end_line": 113,
    "comment": "/** \n * Method that can be called to check whether a default creator (constructor, or no-arg static factory method) is available for this instantiator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateUsingDelegate#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateUsingDelegate()",
    "snippet": "public boolean canCreateUsingDelegate(){\n  return false;\n}",
    "begin_line": 120,
    "end_line": 120,
    "comment": "/** \n * Method that can be called to check whether a delegate-based creator (single-arg constructor or factory method) is available for this instantiator\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateUsingArrayDelegate#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateUsingArrayDelegate()",
    "snippet": "public boolean canCreateUsingArrayDelegate(){\n  return false;\n}",
    "begin_line": 129,
    "end_line": 129,
    "comment": "/** \n * Method that can be called to check whether a array-delegate-based creator (single-arg constructor or factory method) is available for this instantiator\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.canCreateFromObjectWith#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.canCreateFromObjectWith()",
    "snippet": "public boolean canCreateFromObjectWith(){\n  return false;\n}",
    "begin_line": 136,
    "end_line": 136,
    "comment": "/** \n * Method that can be called to check whether a property-based creator (argument-taking constructor or factory method) is available to instantiate values from JSON Object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getFromObjectArguments#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getFromObjectArguments(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config){\n  return null;\n}",
    "begin_line": 148,
    "end_line": 150,
    "comment": "/** \n * Method called to determine types of instantiation arguments to use when creating instances with creator arguments (when  {@link #canCreateFromObjectWith()} returns  true).These arguments are bound from JSON, using specified property types to locate deserializers. \u003cp\u003e NOTE: all properties will be of type {@link com.fasterxml.jackson.databind.deser.CreatorProperty}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getDelegateType#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getDelegateType(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public JavaType getDelegateType(DeserializationConfig config){\n  return null;\n}",
    "begin_line": 159,
    "end_line": 159,
    "comment": "/** \n * Method that can be used to determine what is the type of delegate type to use, if any; if no delegates are used, will return null. If non-null type is returned, deserializer will bind JSON into specified type (using standard deserializer for that type), and pass that to instantiator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getArrayDelegateType#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getArrayDelegateType(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "public JavaType getArrayDelegateType(DeserializationConfig config){\n  return null;\n}",
    "begin_line": 170,
    "end_line": 170,
    "comment": "/** \n * Method that can be used to determine what is the type of array delegate type to use, if any; if no delegates are used, will return null. If non-null type is returned, deserializer will bind JSON into specified type (using standard deserializer for that type), and pass that to instantiator.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createUsingDefault#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingDefault(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public Object createUsingDefault(DeserializationContext ctxt) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no default no-arguments constructor found\");\n}",
    "begin_line": 188,
    "end_line": 191,
    "comment": "/** \n * Method called to create value instance from a JSON value when no data needs to passed to creator (constructor, factory method); typically this will call the default constructor of the value object. It will only be used if more specific creator methods are not applicable; hence \"default\". \u003cp\u003e This method is called if  {@link #getFromObjectArguments} returnsnull or empty List.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromObjectWith#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromObjectWith(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object[])",
    "snippet": "public Object createFromObjectWith(DeserializationContext ctxt,Object[] args) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no creator with arguments specified\");\n}",
    "begin_line": 201,
    "end_line": 205,
    "comment": "/** \n * Method called to create value instance from JSON Object when instantiation arguments are passed; this is done, for example when passing information specified with \"Creator\" annotations. \u003cp\u003e This method is called if  {@link #getFromObjectArguments} returnsa non-empty List of arguments.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromObjectWith#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromObjectWith(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty[], com.fasterxml.jackson.databind.deser.impl.PropertyValueBuffer)",
    "snippet": "public Object createFromObjectWith(DeserializationContext ctxt,SettableBeanProperty[] props,PropertyValueBuffer buffer) throws IOException {\n  return createFromObjectWith(ctxt,buffer.getParameters(props));\n}",
    "begin_line": 225,
    "end_line": 230,
    "comment": "/** \n * Method that delegates to {@link #createFromObjectWith(DeserializationContext,Object[])} bydefault, but can be overridden if the application should have customized behavior with respect to missing properties. \u003cp\u003e The default implementation of this method uses {@link PropertyValueBuffer#getParameters(SettableBeanProperty[])} to readand validate all properties in bulk, possibly substituting defaults for missing properties or throwing exceptions for missing properties.  An overridden implementation of this method could, for example, use {@link PropertyValueBuffer#hasParameter(SettableBeanProperty)} and{@link PropertyValueBuffer#getParameter(SettableBeanProperty)} to safelyread the present properties only, and to have some other behavior for the missing properties.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createUsingDelegate#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingDelegate(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "public Object createUsingDelegate(DeserializationContext ctxt,Object delegate) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no delegate creator specified\");\n}",
    "begin_line": 236,
    "end_line": 239,
    "comment": "/** \n * Method to called to create value instance from JSON Object using an intermediate \"delegate\" value to pass to createor method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createUsingArrayDelegate#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createUsingArrayDelegate(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "public Object createUsingArrayDelegate(DeserializationContext ctxt,Object delegate) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no array delegate creator specified\");\n}",
    "begin_line": 245,
    "end_line": 248,
    "comment": "/** \n * Method to called to create value instance from JSON Array using an intermediate \"delegate\" value to pass to createor method\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromString#257",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromString(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "public Object createFromString(DeserializationContext ctxt,String value) throws IOException {\n  return _createFromStringFallbacks(ctxt,value);\n}",
    "begin_line": 257,
    "end_line": 259,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromInt#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromInt(com.fasterxml.jackson.databind.DeserializationContext, int)",
    "snippet": "public Object createFromInt(DeserializationContext ctxt,int value) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no int/Int-argument constructor/factory method to deserialize from Number value (%s)\",value);\n}",
    "begin_line": 261,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromLong#267",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromLong(com.fasterxml.jackson.databind.DeserializationContext, long)",
    "snippet": "public Object createFromLong(DeserializationContext ctxt,long value) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no long/Long-argument constructor/factory method to deserialize from Number value (%s)\",value);\n}",
    "begin_line": 267,
    "end_line": 271,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromDouble#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromDouble(com.fasterxml.jackson.databind.DeserializationContext, double)",
    "snippet": "public Object createFromDouble(DeserializationContext ctxt,double value) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no double/Double-argument constructor/factory method to deserialize from Number value (%s)\",value);\n}",
    "begin_line": 273,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.createFromBoolean#279",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.createFromBoolean(com.fasterxml.jackson.databind.DeserializationContext, boolean)",
    "snippet": "public Object createFromBoolean(DeserializationContext ctxt,boolean value) throws IOException {\n  return ctxt.handleMissingInstantiator(getValueClass(),this,null,\"no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)\",value);\n}",
    "begin_line": 279,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getDefaultCreator#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getDefaultCreator()",
    "snippet": "public AnnotatedWithParams getDefaultCreator(){\n  return null;\n}",
    "begin_line": 301,
    "end_line": 301,
    "comment": "/** \n * Method that can be called to try to access member (constructor, static factory method) that is used as the \"default creator\" (creator that is called without arguments; typically default [zero-argument] constructor of the type). Note that implementations not required to return actual object they use (or, they may use some other instantiation) method. That is, even if  {@link #canCreateUsingDefault()} returns true,this method may return null .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getDelegateCreator#311",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getDelegateCreator()",
    "snippet": "public AnnotatedWithParams getDelegateCreator(){\n  return null;\n}",
    "begin_line": 311,
    "end_line": 311,
    "comment": "/** \n * Method that can be called to try to access member (constructor, static factory method) that is used as the \"delegate creator\". Note that implementations not required to return actual object they use (or, they may use some other instantiation) method. That is, even if  {@link #canCreateUsingDelegate()} returns true,this method may return null .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getArrayDelegateCreator#321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getArrayDelegateCreator()",
    "snippet": "public AnnotatedWithParams getArrayDelegateCreator(){\n  return null;\n}",
    "begin_line": 321,
    "end_line": 321,
    "comment": "/** \n * Method that can be called to try to access member (constructor, static factory method) that is used as the \"array delegate creator\". Note that implementations not required to return actual object they use (or, they may use some other instantiation) method. That is, even if  {@link #canCreateUsingArrayDelegate()} returns true,this method may return null .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getWithArgsCreator#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getWithArgsCreator()",
    "snippet": "public AnnotatedWithParams getWithArgsCreator(){\n  return null;\n}",
    "begin_line": 332,
    "end_line": 332,
    "comment": "/** \n * Method that can be called to try to access member (constructor, static factory method) that is used as the \"non-default creator\" (constructor or factory method that takes one or more arguments). Note that implementations not required to return actual object they use (or, they may use some other instantiation) method. That is, even if  {@link #canCreateFromObjectWith()} returns true,this method may return null .\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator.getIncompleteParameter#338",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getIncompleteParameter()",
    "snippet": "public AnnotatedParameter getIncompleteParameter(){\n  return null;\n}",
    "begin_line": 338,
    "end_line": 338,
    "comment": "/** \n * If an incomplete creator was found, this is the first parameter that needs further annotation to help make the creator complete.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueInstantiator._createFromStringFallbacks#349",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator._createFromStringFallbacks(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected Object _createFromStringFallbacks(DeserializationContext ctxt,String value) throws IOException {\n  if (canCreateFromBoolean()) {\n    String str\u003dvalue.trim();\n    if (\"true\".equals(str)) {\n      return createFromBoolean(ctxt,true);\n    }\n    if (\"false\".equals(str)) {\n      return createFromBoolean(ctxt,false);\n    }\n  }\n  if (value.length() \u003d\u003d 0) {\n    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n      return null;\n    }\n  }\n  return ctxt.handleMissingInstantiator(getValueClass(),this,ctxt.getParser(),\"no String-argument constructor/factory method to deserialize from String value (\u0027%s\u0027)\",value);\n}",
    "begin_line": 349,
    "end_line": 374,
    "comment": "/** \n * @since 2.4 (demoted from \u003ccode\u003eStdValueInstantiator\u003c/code\u003e)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Gettable.getValueInstantiator#386",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getValueInstantiator()",
    "snippet": "public ValueInstantiator getValueInstantiator();",
    "begin_line": 386,
    "end_line": 386,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.Base#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.Base(java.lang.Class\u003c?\u003e)",
    "snippet": "public Base(Class\u003c?\u003e type){\n  _valueType\u003dtype;\n}",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.Base#407",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.Base(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public Base(JavaType type){\n  _valueType\u003dtype.getRawClass();\n}",
    "begin_line": 407,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.getValueTypeDesc#412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getValueTypeDesc()",
    "snippet": "@Override public String getValueTypeDesc(){\n  return _valueType.getName();\n}",
    "begin_line": 412,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.getValueClass#417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/ValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.ValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.ValueInstantiator.getValueClass()",
    "snippet": "@Override public Class\u003c?\u003e getValueClass(){\n  return _valueType;\n}",
    "begin_line": 417,
    "end_line": 419,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.BeanPropertyMap#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.BeanPropertyMap(boolean, java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e, java.util.Map\u003cjava.lang.String,java.util.List\u003ccom.fasterxml.jackson.databind.PropertyName\u003e\u003e)",
    "snippet": "public BeanPropertyMap(boolean caseInsensitive,Collection\u003cSettableBeanProperty\u003e props,Map\u003cString,List\u003cPropertyName\u003e\u003e aliasDefs){\n  _caseInsensitive\u003dcaseInsensitive;\n  _propsInOrder\u003dprops.toArray(new SettableBeanProperty[props.size()]);\n  _aliasDefs\u003daliasDefs;\n  _aliasMapping\u003d_buildAliasMapping(aliasDefs);\n  init(props);\n}",
    "begin_line": 82,
    "end_line": 90,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.BeanPropertyMap#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.BeanPropertyMap(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, com.fasterxml.jackson.databind.deser.SettableBeanProperty, int, int)",
    "snippet": "private BeanPropertyMap(BeanPropertyMap src,SettableBeanProperty newProp,int hashIndex,int orderedIndex){\n  _caseInsensitive\u003dsrc._caseInsensitive;\n  _hashMask\u003dsrc._hashMask;\n  _size\u003dsrc._size;\n  _spillCount\u003dsrc._spillCount;\n  _aliasDefs\u003dsrc._aliasDefs;\n  _aliasMapping\u003dsrc._aliasMapping;\n  _hashArea\u003dArrays.copyOf(src._hashArea,src._hashArea.length);\n  _propsInOrder\u003dArrays.copyOf(src._propsInOrder,src._propsInOrder.length);\n  _hashArea[hashIndex]\u003dnewProp;\n  _propsInOrder[orderedIndex]\u003dnewProp;\n}",
    "begin_line": 96,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.BeanPropertyMap#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.BeanPropertyMap(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, com.fasterxml.jackson.databind.deser.SettableBeanProperty, java.lang.String, int)",
    "snippet": "private BeanPropertyMap(BeanPropertyMap src,SettableBeanProperty newProp,String key,int slot){\n  _caseInsensitive\u003dsrc._caseInsensitive;\n  _hashMask\u003dsrc._hashMask;\n  _size\u003dsrc._size;\n  _spillCount\u003dsrc._spillCount;\n  _aliasDefs\u003dsrc._aliasDefs;\n  _aliasMapping\u003dsrc._aliasMapping;\n  _hashArea\u003dArrays.copyOf(src._hashArea,src._hashArea.length);\n  int last\u003dsrc._propsInOrder.length;\n  _propsInOrder\u003dArrays.copyOf(src._propsInOrder,last + 1);\n  _propsInOrder[last]\u003dnewProp;\n  final int hashSize\u003d_hashMask + 1;\n  int ix\u003d(slot \u003c\u003c 1);\n  if (_hashArea[ix] !\u003d null) {\n    ix\u003d(hashSize + (slot \u003e\u003e 1)) \u003c\u003c 1;\n    if (_hashArea[ix] !\u003d null) {\n      ix\u003d((hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1) + _spillCount;\n      _spillCount+\u003d2;\n      if (ix \u003e\u003d _hashArea.length) {\n        _hashArea\u003dArrays.copyOf(_hashArea,_hashArea.length + 4);\n      }\n    }\n  }\n  _hashArea[ix]\u003dkey;\n  _hashArea[ix + 1]\u003dnewProp;\n}",
    "begin_line": 118,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.BeanPropertyMap#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.BeanPropertyMap(boolean, java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e)",
    "snippet": "@Deprecated public BeanPropertyMap(boolean caseInsensitive,Collection\u003cSettableBeanProperty\u003e props){\n  this(caseInsensitive,props,Collections.\u003cString,List\u003cPropertyName\u003e\u003eemptyMap());\n}",
    "begin_line": 157,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.BeanPropertyMap#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.BeanPropertyMap(com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap, boolean)",
    "snippet": "protected BeanPropertyMap(BeanPropertyMap base,boolean caseInsensitive){\n  _caseInsensitive\u003dcaseInsensitive;\n  _aliasDefs\u003dbase._aliasDefs;\n  _aliasMapping\u003dbase._aliasMapping;\n  _propsInOrder\u003dArrays.copyOf(base._propsInOrder,base._propsInOrder.length);\n  init(Arrays.asList(_propsInOrder));\n}",
    "begin_line": 165,
    "end_line": 174,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.withCaseInsensitivity#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.withCaseInsensitivity(boolean)",
    "snippet": "public BeanPropertyMap withCaseInsensitivity(boolean state){\n  if (_caseInsensitive \u003d\u003d state) {\n    return this;\n  }\n  return new BeanPropertyMap(this,state);\n}",
    "begin_line": 183,
    "end_line": 188,
    "comment": "/** \n * Mutant factory method that constructs a new instance if desired case-insensitivity state differs from the state of this instance; if states are the same, returns \u003ccode\u003ethis\u003c/code\u003e.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.init#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.init(java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e)",
    "snippet": "protected void init(Collection\u003cSettableBeanProperty\u003e props){\n  _size\u003dprops.size();\n  final int hashSize\u003dfindSize(_size);\n  _hashMask\u003dhashSize - 1;\n  int alloc\u003d(hashSize + (hashSize \u003e\u003e 1)) * 2;\n  Object[] hashed\u003dnew Object[alloc];\n  int spillCount\u003d0;\n  for (  SettableBeanProperty prop : props) {\n    if (prop \u003d\u003d null) {\n      continue;\n    }\n    String key\u003dgetPropertyName(prop);\n    int slot\u003d_hashCode(key);\n    int ix\u003d(slot \u003c\u003c 1);\n    if (hashed[ix] !\u003d null) {\n      ix\u003d(hashSize + (slot \u003e\u003e 1)) \u003c\u003c 1;\n      if (hashed[ix] !\u003d null) {\n        ix\u003d((hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1) + spillCount;\n        spillCount+\u003d2;\n        if (ix \u003e\u003d hashed.length) {\n          hashed\u003dArrays.copyOf(hashed,hashed.length + 4);\n        }\n      }\n    }\n    hashed[ix]\u003dkey;\n    hashed[ix + 1]\u003dprop;\n  }\n  _hashArea\u003dhashed;\n  _spillCount\u003dspillCount;\n}",
    "begin_line": 190,
    "end_line": 233,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.findSize#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findSize(int)",
    "snippet": "private final static int findSize(int size){\n  if (size \u003c\u003d 5) {\n    return 8;\n  }\n  if (size \u003c\u003d 12) {\n    return 16;\n  }\n  int needed\u003dsize + (size \u003e\u003e 2);\n  int result\u003d32;\n  while (result \u003c needed) {\n    result+\u003dresult;\n  }\n  return result;\n}",
    "begin_line": 235,
    "end_line": 249,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.construct#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.construct(java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e, boolean, java.util.Map\u003cjava.lang.String,java.util.List\u003ccom.fasterxml.jackson.databind.PropertyName\u003e\u003e)",
    "snippet": "public static BeanPropertyMap construct(Collection\u003cSettableBeanProperty\u003e props,boolean caseInsensitive,Map\u003cString,List\u003cPropertyName\u003e\u003e aliasMapping){\n  return new BeanPropertyMap(caseInsensitive,props,aliasMapping);\n}",
    "begin_line": 254,
    "end_line": 257,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.construct#260",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.construct(java.util.Collection\u003ccom.fasterxml.jackson.databind.deser.SettableBeanProperty\u003e, boolean)",
    "snippet": "@Deprecated public static BeanPropertyMap construct(Collection\u003cSettableBeanProperty\u003e props,boolean caseInsensitive){\n  return construct(props,caseInsensitive,Collections.\u003cString,List\u003cPropertyName\u003e\u003eemptyMap());\n}",
    "begin_line": 260,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.withProperty#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.withProperty(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public BeanPropertyMap withProperty(SettableBeanProperty newProp){\n  String key\u003dgetPropertyName(newProp);\n  for (int i\u003d1, end\u003d_hashArea.length; i \u003c end; i+\u003d2) {\n    SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[i];\n    if ((prop !\u003d null) \u0026\u0026 prop.getName().equals(key)) {\n      return new BeanPropertyMap(this,newProp,i,_findFromOrdered(prop));\n    }\n  }\n  final int slot\u003d_hashCode(key);\n  return new BeanPropertyMap(this,newProp,key,slot);\n}",
    "begin_line": 272,
    "end_line": 287,
    "comment": "/** \n * Fluent copy method that creates a new instance that is a copy of this instance except for one additional property that is passed as the argument. Note that method does not modify this instance but constructs and returns a new one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.assignIndexes#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.assignIndexes()",
    "snippet": "public BeanPropertyMap assignIndexes(){\n  int index\u003d0;\n  for (int i\u003d1, end\u003d_hashArea.length; i \u003c end; i+\u003d2) {\n    SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[i];\n    if (prop !\u003d null) {\n      prop.assignIndex(index++);\n    }\n  }\n  return this;\n}",
    "begin_line": 289,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.renameAll#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.renameAll(com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "public BeanPropertyMap renameAll(NameTransformer transformer){\n  if (transformer \u003d\u003d null || (transformer \u003d\u003d NameTransformer.NOP)) {\n    return this;\n  }\n  final int len\u003d_propsInOrder.length;\n  ArrayList\u003cSettableBeanProperty\u003e newProps\u003dnew ArrayList\u003cSettableBeanProperty\u003e(len);\n  for (int i\u003d0; i \u003c len; ++i) {\n    SettableBeanProperty prop\u003d_propsInOrder[i];\n    if (prop \u003d\u003d null) {\n      newProps.add(prop);\n      continue;\n    }\n    newProps.add(_rename(prop,transformer));\n  }\n  return new BeanPropertyMap(_caseInsensitive,newProps,_aliasDefs);\n}",
    "begin_line": 306,
    "end_line": 328,
    "comment": "/** \n * Mutant factory method for constructing a map where all entries use given prefix\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.withoutProperties#343",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.withoutProperties(java.util.Collection\u003cjava.lang.String\u003e)",
    "snippet": "public BeanPropertyMap withoutProperties(Collection\u003cString\u003e toExclude){\n  if (toExclude.isEmpty()) {\n    return this;\n  }\n  final int len\u003d_propsInOrder.length;\n  ArrayList\u003cSettableBeanProperty\u003e newProps\u003dnew ArrayList\u003cSettableBeanProperty\u003e(len);\n  for (int i\u003d0; i \u003c len; ++i) {\n    SettableBeanProperty prop\u003d_propsInOrder[i];\n    if (prop !\u003d null) {\n      if (!toExclude.contains(prop.getName())) {\n        newProps.add(prop);\n      }\n    }\n  }\n  return new BeanPropertyMap(_caseInsensitive,newProps,_aliasDefs);\n}",
    "begin_line": 343,
    "end_line": 364,
    "comment": "/** \n * Mutant factory method that will use this instance as the base, and construct an instance that is otherwise same except for excluding properties with specified names.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.replace#367",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.replace(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "@Deprecated public void replace(SettableBeanProperty newProp){\n  String key\u003dgetPropertyName(newProp);\n  int ix\u003d_findIndexInHash(key);\n  if (ix \u003c 0) {\n    throw new NoSuchElementException(\"No entry \u0027\" + key + \"\u0027 found, can\u0027t replace\");\n  }\n  SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[ix];\n  _hashArea[ix]\u003dnewProp;\n  _propsInOrder[_findFromOrdered(prop)]\u003dnewProp;\n}",
    "begin_line": 367,
    "end_line": 378,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.replace#387",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.replace(com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void replace(SettableBeanProperty origProp,SettableBeanProperty newProp){\n  int i\u003d1;\n  int end\u003d_hashArea.length;\n  for (; ; i+\u003d2) {\n    if (i \u003e end) {\n      throw new NoSuchElementException(\"No entry \u0027\" + origProp.getName() + \"\u0027 found, can\u0027t replace\");\n    }\n    if (_hashArea[i] \u003d\u003d origProp) {\n      _hashArea[i]\u003dnewProp;\n      break;\n    }\n  }\n  _propsInOrder[_findFromOrdered(origProp)]\u003dnewProp;\n}",
    "begin_line": 387,
    "end_line": 402,
    "comment": "/** \n * Specialized method that can be used to replace an existing entry (note: entry MUST exist; otherwise exception is thrown) with specified replacement.\n * @since 2.9.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.remove#408",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.remove(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "public void remove(SettableBeanProperty propToRm){\n  ArrayList\u003cSettableBeanProperty\u003e props\u003dnew ArrayList\u003cSettableBeanProperty\u003e(_size);\n  String key\u003dgetPropertyName(propToRm);\n  boolean found\u003dfalse;\n  for (int i\u003d1, end\u003d_hashArea.length; i \u003c end; i+\u003d2) {\n    SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[i];\n    if (prop \u003d\u003d null) {\n      continue;\n    }\n    if (!found) {\n      found\u003dkey.equals(_hashArea[i - 1]);\n      if (found) {\n        _propsInOrder[_findFromOrdered(prop)]\u003dnull;\n        continue;\n      }\n    }\n    props.add(prop);\n  }\n  if (!found) {\n    throw new NoSuchElementException(\"No entry \u0027\" + propToRm.getName() + \"\u0027 found, can\u0027t remove\");\n  }\n  init(props);\n}",
    "begin_line": 408,
    "end_line": 435,
    "comment": "/** \n * Specialized method for removing specified existing entry. NOTE: entry MUST exist, otherwise an exception is thrown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.size#443",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.size()",
    "snippet": "public int size(){\n  return _size;\n}",
    "begin_line": 443,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.isCaseInsensitive#448",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.isCaseInsensitive()",
    "snippet": "public boolean isCaseInsensitive(){\n  return _caseInsensitive;\n}",
    "begin_line": 448,
    "end_line": 450,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.hasAliases#455",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.hasAliases()",
    "snippet": "public boolean hasAliases(){\n  return !_aliasDefs.isEmpty();\n}",
    "begin_line": 455,
    "end_line": 457,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.iterator#463",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.iterator()",
    "snippet": "@Override public Iterator\u003cSettableBeanProperty\u003e iterator(){\n  return _properties().iterator();\n}",
    "begin_line": 463,
    "end_line": 465,
    "comment": "/** \n * Accessor for traversing over all contained properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._properties#467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._properties()",
    "snippet": "private List\u003cSettableBeanProperty\u003e _properties(){\n  ArrayList\u003cSettableBeanProperty\u003e p\u003dnew ArrayList\u003cSettableBeanProperty\u003e(_size);\n  for (int i\u003d1, end\u003d_hashArea.length; i \u003c end; i+\u003d2) {\n    SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[i];\n    if (prop !\u003d null) {\n      p.add(prop);\n    }\n  }\n  return p;\n}",
    "begin_line": 467,
    "end_line": 476,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.getPropertiesInInsertionOrder#486",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.getPropertiesInInsertionOrder()",
    "snippet": "public SettableBeanProperty[] getPropertiesInInsertionOrder(){\n  return _propsInOrder;\n}",
    "begin_line": 486,
    "end_line": 488,
    "comment": "/** \n * Method that will re-create initial insertion-ordering of properties contained in this map. Note that if properties have been removed, array may contain nulls; otherwise it should be consecutive.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.getPropertyName#492",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.getPropertyName(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "protected final String getPropertyName(SettableBeanProperty prop){\n  return _caseInsensitive ? prop.getName().toLowerCase() : prop.getName();\n}",
    "begin_line": 492,
    "end_line": 494,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.find#505",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.find(int)",
    "snippet": "public SettableBeanProperty find(int index){\n  for (int i\u003d1, end\u003d_hashArea.length; i \u003c end; i+\u003d2) {\n    SettableBeanProperty prop\u003d(SettableBeanProperty)_hashArea[i];\n    if ((prop !\u003d null) \u0026\u0026 (index \u003d\u003d prop.getPropertyIndex())) {\n      return prop;\n    }\n  }\n  return null;\n}",
    "begin_line": 505,
    "end_line": 516,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.find#518",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.find(java.lang.String)",
    "snippet": "public SettableBeanProperty find(String key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot pass null property name\");\n  }\n  if (_caseInsensitive) {\n    key\u003dkey.toLowerCase();\n  }\n  int slot\u003dkey.hashCode() \u0026 _hashMask;\n  int ix\u003d(slot \u003c\u003c 1);\n  Object match\u003d_hashArea[ix];\n  if ((match \u003d\u003d key) || key.equals(match)) {\n    return (SettableBeanProperty)_hashArea[ix + 1];\n  }\n  return _find2(key,slot,match);\n}",
    "begin_line": 518,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._find2#540",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._find2(java.lang.String, int, java.lang.Object)",
    "snippet": "private final SettableBeanProperty _find2(String key,int slot,Object match){\n  if (match \u003d\u003d null) {\n    return _findWithAlias(_aliasMapping.get(key));\n  }\n  int hashSize\u003d_hashMask + 1;\n  int ix\u003dhashSize + (slot \u003e\u003e 1) \u003c\u003c 1;\n  match\u003d_hashArea[ix];\n  if (key.equals(match)) {\n    return (SettableBeanProperty)_hashArea[ix + 1];\n  }\n  if (match !\u003d null) {\n    int i\u003d(hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1;\n    for (int end\u003di + _spillCount; i \u003c end; i+\u003d2) {\n      match\u003d_hashArea[i];\n      if ((match \u003d\u003d key) || key.equals(match)) {\n        return (SettableBeanProperty)_hashArea[i + 1];\n      }\n    }\n  }\n  return _findWithAlias(_aliasMapping.get(key));\n}",
    "begin_line": 540,
    "end_line": 564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._findWithAlias#566",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._findWithAlias(java.lang.String)",
    "snippet": "private SettableBeanProperty _findWithAlias(String keyFromAlias){\n  if (keyFromAlias \u003d\u003d null) {\n    return null;\n  }\n  int slot\u003d_hashCode(keyFromAlias);\n  int ix\u003d(slot \u003c\u003c 1);\n  Object match\u003d_hashArea[ix];\n  if (keyFromAlias.equals(match)) {\n    return (SettableBeanProperty)_hashArea[ix + 1];\n  }\n  if (match \u003d\u003d null) {\n    return null;\n  }\n  return _find2ViaAlias(keyFromAlias,slot,match);\n}",
    "begin_line": 566,
    "end_line": 583,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._find2ViaAlias#585",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._find2ViaAlias(java.lang.String, int, java.lang.Object)",
    "snippet": "private SettableBeanProperty _find2ViaAlias(String key,int slot,Object match){\n  int hashSize\u003d_hashMask + 1;\n  int ix\u003dhashSize + (slot \u003e\u003e 1) \u003c\u003c 1;\n  match\u003d_hashArea[ix];\n  if (key.equals(match)) {\n    return (SettableBeanProperty)_hashArea[ix + 1];\n  }\n  if (match !\u003d null) {\n    int i\u003d(hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1;\n    for (int end\u003di + _spillCount; i \u003c end; i+\u003d2) {\n      match\u003d_hashArea[i];\n      if ((match \u003d\u003d key) || key.equals(match)) {\n        return (SettableBeanProperty)_hashArea[i + 1];\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 585,
    "end_line": 604,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.findDeserializeAndSet#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.findDeserializeAndSet(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)",
    "snippet": "public boolean findDeserializeAndSet(JsonParser p,DeserializationContext ctxt,Object bean,String key) throws IOException {\n  final SettableBeanProperty prop\u003dfind(key);\n  if (prop \u003d\u003d null) {\n    return false;\n  }\n  try {\n    prop.deserializeAndSet(p,ctxt,bean);\n  }\n catch (  Exception e) {\n    wrapAndThrow(e,bean,key,ctxt);\n  }\n  return true;\n}",
    "begin_line": 621,
    "end_line": 634,
    "comment": "/** \n * Convenience method that tries to find property with given name, and if it is found, call  {@link SettableBeanProperty#deserializeAndSet}on it, and return true; or, if not found, return false. Note, too, that if deserialization is attempted, possible exceptions are wrapped if and as necessary, so caller need not handle those.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.toString#643",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.toString()",
    "snippet": "@Override public String toString(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(\"Properties\u003d[\");\n  int count\u003d0;\n  Iterator\u003cSettableBeanProperty\u003e it\u003diterator();\n  while (it.hasNext()) {\n    SettableBeanProperty prop\u003dit.next();\n    if (count++ \u003e 0) {\n      sb.append(\", \");\n    }\n    sb.append(prop.getName());\n    sb.append(\u0027(\u0027);\n    sb.append(prop.getType());\n    sb.append(\u0027)\u0027);\n  }\n  sb.append(\u0027]\u0027);\n  if (!_aliasDefs.isEmpty()) {\n    sb.append(\"(aliases: \");\n    sb.append(_aliasDefs);\n    sb.append(\")\");\n  }\n  return sb.toString();\n}",
    "begin_line": 643,
    "end_line": 667,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._rename#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._rename(com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.util.NameTransformer)",
    "snippet": "protected SettableBeanProperty _rename(SettableBeanProperty prop,NameTransformer xf){\n  if (prop \u003d\u003d null) {\n    return prop;\n  }\n  String newName\u003dxf.transform(prop.getName());\n  prop\u003dprop.withSimpleName(newName);\n  JsonDeserializer\u003c?\u003e deser\u003dprop.getValueDeserializer();\n  if (deser !\u003d null) {\n    @SuppressWarnings(\"unchecked\") JsonDeserializer\u003cObject\u003e newDeser\u003d(JsonDeserializer\u003cObject\u003e)deser.unwrappingDeserializer(xf);\n    if (newDeser !\u003d deser) {\n      prop\u003dprop.withValueDeserializer(newDeser);\n    }\n  }\n  return prop;\n}",
    "begin_line": 675,
    "end_line": 692,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap.wrapAndThrow#694",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap.wrapAndThrow(java.lang.Throwable, java.lang.Object, java.lang.String, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected void wrapAndThrow(Throwable t,Object bean,String fieldName,DeserializationContext ctxt) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  boolean wrap\u003d(ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n  if (t instanceof IOException) {\n    if (!wrap || !(t instanceof JsonProcessingException)) {\n      throw (IOException)t;\n    }\n  }\n else   if (!wrap) {\n    ClassUtil.throwIfRTE(t);\n  }\n  throw JsonMappingException.wrapWithPath(t,bean,fieldName);\n}",
    "begin_line": 694,
    "end_line": 714,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._findIndexInHash#724",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._findIndexInHash(java.lang.String)",
    "snippet": "private final int _findIndexInHash(String key){\n  final int slot\u003d_hashCode(key);\n  int ix\u003d(slot \u003c\u003c 1);\n  if (key.equals(_hashArea[ix])) {\n    return ix + 1;\n  }\n  int hashSize\u003d_hashMask + 1;\n  ix\u003dhashSize + (slot \u003e\u003e 1) \u003c\u003c 1;\n  if (key.equals(_hashArea[ix])) {\n    return ix + 1;\n  }\n  int i\u003d(hashSize + (hashSize \u003e\u003e 1)) \u003c\u003c 1;\n  for (int end\u003di + _spillCount; i \u003c end; i+\u003d2) {\n    if (key.equals(_hashArea[i])) {\n      return i + 1;\n    }\n  }\n  return -1;\n}",
    "begin_line": 724,
    "end_line": 747,
    "comment": "/** \n * Helper method used to find exact location of a property with name given exactly, not subject to case changes, within hash area. Expectation is that such property SHOULD exist, although no exception is thrown.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._findFromOrdered#749",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._findFromOrdered(com.fasterxml.jackson.databind.deser.SettableBeanProperty)",
    "snippet": "private final int _findFromOrdered(SettableBeanProperty prop){\n  for (int i\u003d0, end\u003d_propsInOrder.length; i \u003c end; ++i) {\n    if (_propsInOrder[i] \u003d\u003d prop) {\n      return i;\n    }\n  }\n  throw new IllegalStateException(\"Illegal state: property \u0027\" + prop.getName() + \"\u0027 missing from _propsInOrder\");\n}",
    "begin_line": 749,
    "end_line": 756,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._hashCode#759",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._hashCode(java.lang.String)",
    "snippet": "private final int _hashCode(String key){\n  return key.hashCode() \u0026 _hashMask;\n}",
    "begin_line": 759,
    "end_line": 770,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyMap._buildAliasMapping#773",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "signature": "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap._buildAliasMapping(java.util.Map\u003cjava.lang.String,java.util.List\u003ccom.fasterxml.jackson.databind.PropertyName\u003e\u003e)",
    "snippet": "private Map\u003cString,String\u003e _buildAliasMapping(Map\u003cString,List\u003cPropertyName\u003e\u003e defs){\n  if ((defs \u003d\u003d null) || defs.isEmpty()) {\n    return Collections.emptyMap();\n  }\n  Map\u003cString,String\u003e aliases\u003dnew HashMap\u003c\u003e();\n  for (  Map.Entry\u003cString,List\u003cPropertyName\u003e\u003e entry : defs.entrySet()) {\n    String key\u003dentry.getKey();\n    if (_caseInsensitive) {\n      key\u003dkey.toLowerCase();\n    }\n    for (    PropertyName pn : entry.getValue()) {\n      String mapped\u003dpn.getSimpleName();\n      if (_caseInsensitive) {\n        mapped\u003dmapped.toLowerCase();\n      }\n      aliases.put(mapped,key);\n    }\n  }\n  return aliases;\n}",
    "begin_line": 773,
    "end_line": 793,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.CreatorCandidate#17",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.CreatorCandidate(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param[], int)",
    "snippet": "protected CreatorCandidate(AnnotationIntrospector intr,AnnotatedWithParams ct,Param[] params,int count){\n  _intr\u003dintr;\n  _creator\u003dct;\n  _params\u003dparams;\n  _paramCount\u003dcount;\n}",
    "begin_line": 17,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.construct#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.construct(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition[])",
    "snippet": "public static CreatorCandidate construct(AnnotationIntrospector intr,AnnotatedWithParams creator,BeanPropertyDefinition[] propDefs){\n  final int pcount\u003dcreator.getParameterCount();\n  Param[] params\u003dnew Param[pcount];\n  for (int i\u003d0; i \u003c pcount; ++i) {\n    AnnotatedParameter annParam\u003dcreator.getParameter(i);\n    JacksonInject.Value injectId\u003dintr.findInjectableValue(annParam);\n    params[i]\u003dnew Param(annParam,(propDefs \u003d\u003d null) ? null : propDefs[i],injectId);\n  }\n  return new CreatorCandidate(intr,creator,params,pcount);\n}",
    "begin_line": 25,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.creator#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.creator()",
    "snippet": "public AnnotatedWithParams creator(){\n  return _creator;\n}",
    "begin_line": 38,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.paramCount#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.paramCount()",
    "snippet": "public int paramCount(){\n  return _paramCount;\n}",
    "begin_line": 39,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.injection#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.injection(int)",
    "snippet": "public JacksonInject.Value injection(int i){\n  return _params[i].injection;\n}",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.parameter#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.parameter(int)",
    "snippet": "public AnnotatedParameter parameter(int i){\n  return _params[i].annotated;\n}",
    "begin_line": 41,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.propertyDef#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.propertyDef(int)",
    "snippet": "public BeanPropertyDefinition propertyDef(int i){\n  return _params[i].propDef;\n}",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.paramName#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.paramName(int)",
    "snippet": "public PropertyName paramName(int i){\n  BeanPropertyDefinition propDef\u003d_params[i].propDef;\n  if (propDef !\u003d null) {\n    return propDef.getFullName();\n  }\n  return null;\n}",
    "begin_line": 44,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.explicitParamName#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.explicitParamName(int)",
    "snippet": "public PropertyName explicitParamName(int i){\n  BeanPropertyDefinition propDef\u003d_params[i].propDef;\n  if (propDef !\u003d null) {\n    if (propDef.isExplicitlyNamed()) {\n      return propDef.getFullName();\n    }\n  }\n  return null;\n}",
    "begin_line": 52,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.findImplicitParamName#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.findImplicitParamName(int)",
    "snippet": "public PropertyName findImplicitParamName(int i){\n  String str\u003d_intr.findImplicitPropertyName(_params[i].annotated);\n  if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n    return PropertyName.construct(str);\n  }\n  return null;\n}",
    "begin_line": 62,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.findOnlyParamWithoutInjection#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.findOnlyParamWithoutInjection()",
    "snippet": "public int findOnlyParamWithoutInjection(){\n  int missing\u003d-1;\n  for (int i\u003d0; i \u003c _paramCount; ++i) {\n    if (_params[i].injection \u003d\u003d null) {\n      if (missing \u003e\u003d 0) {\n        return -1;\n      }\n      missing\u003di;\n    }\n  }\n  return missing;\n}",
    "begin_line": 75,
    "end_line": 87,
    "comment": "/** \n * Specialized accessor that finds index of the one and only parameter with NO injection and returns that; or, if none or more than one found, returns -1.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCandidate.toString#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.toString()",
    "snippet": "@Override public String toString(){\n  return _creator.toString();\n}",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Param.Param#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.Param(com.fasterxml.jackson.databind.introspect.AnnotatedParameter, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, JacksonInject.Value)",
    "snippet": "public Param(AnnotatedParameter p,BeanPropertyDefinition pd,JacksonInject.Value i){\n  annotated\u003dp;\n  propDef\u003dpd;\n  injection\u003di;\n}",
    "begin_line": 99,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Param.fullName#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.fullName()",
    "snippet": "public PropertyName fullName(){\n  if (propDef \u003d\u003d null) {\n    return null;\n  }\n  return propDef.getFullName();\n}",
    "begin_line": 107,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Param.hasFullName#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCandidate.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCandidate.hasFullName()",
    "snippet": "public boolean hasFullName(){\n  if (propDef \u003d\u003d null) {\n    return false;\n  }\n  PropertyName n\u003dpropDef.getFullName();\n  return n.hasSimpleName();\n}",
    "begin_line": 114,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.CreatorCollector#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.CreatorCollector(com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public CreatorCollector(BeanDescription beanDesc,MapperConfig\u003c?\u003e config){\n  _beanDesc\u003dbeanDesc;\n  _canFixAccess\u003dconfig.canOverrideAccessModifiers();\n  _forceAccess\u003dconfig.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS);\n}",
    "begin_line": 77,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.constructValueInstantiator#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.constructValueInstantiator(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public ValueInstantiator constructValueInstantiator(DeserializationContext ctxt) throws JsonMappingException {\n  final DeserializationConfig config\u003dctxt.getConfig();\n  final JavaType delegateType\u003d_computeDelegateType(ctxt,_creators[C_DELEGATE],_delegateArgs);\n  final JavaType arrayDelegateType\u003d_computeDelegateType(ctxt,_creators[C_ARRAY_DELEGATE],_arrayDelegateArgs);\n  final JavaType type\u003d_beanDesc.getType();\n  AnnotatedWithParams defaultCtor\u003dStdTypeConstructor.tryToOptimize(_creators[C_DEFAULT]);\n  StdValueInstantiator inst\u003dnew StdValueInstantiator(config,type);\n  inst.configureFromObjectSettings(defaultCtor,_creators[C_DELEGATE],delegateType,_delegateArgs,_creators[C_PROPS],_propertyBasedArgs);\n  inst.configureFromArraySettings(_creators[C_ARRAY_DELEGATE],arrayDelegateType,_arrayDelegateArgs);\n  inst.configureFromStringCreator(_creators[C_STRING]);\n  inst.configureFromIntCreator(_creators[C_INT]);\n  inst.configureFromLongCreator(_creators[C_LONG]);\n  inst.configureFromDoubleCreator(_creators[C_DOUBLE]);\n  inst.configureFromBooleanCreator(_creators[C_BOOLEAN]);\n  return inst;\n}",
    "begin_line": 84,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.setDefaultCreator#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.setDefaultCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void setDefaultCreator(AnnotatedWithParams creator){\n  _creators[C_DEFAULT]\u003d_fixAccess(creator);\n}",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Method called to indicate the default creator: no-arguments constructor or factory method that is called to instantiate a value before populating it with data. Default creator is only used if no other creators are indicated.\n * @param creator Creator method; no-arguments constructor or static factory method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addStringCreator#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addStringCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean)",
    "snippet": "public void addStringCreator(AnnotatedWithParams creator,boolean explicit){\n  verifyNonDup(creator,C_STRING,explicit);\n}",
    "begin_line": 134,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addIntCreator#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addIntCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean)",
    "snippet": "public void addIntCreator(AnnotatedWithParams creator,boolean explicit){\n  verifyNonDup(creator,C_INT,explicit);\n}",
    "begin_line": 138,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addLongCreator#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addLongCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean)",
    "snippet": "public void addLongCreator(AnnotatedWithParams creator,boolean explicit){\n  verifyNonDup(creator,C_LONG,explicit);\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addDoubleCreator#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addDoubleCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean)",
    "snippet": "public void addDoubleCreator(AnnotatedWithParams creator,boolean explicit){\n  verifyNonDup(creator,C_DOUBLE,explicit);\n}",
    "begin_line": 146,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addBooleanCreator#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addBooleanCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean)",
    "snippet": "public void addBooleanCreator(AnnotatedWithParams creator,boolean explicit){\n  verifyNonDup(creator,C_BOOLEAN,explicit);\n}",
    "begin_line": 150,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addDelegatingCreator#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addDelegatingCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean, com.fasterxml.jackson.databind.deser.SettableBeanProperty[], int)",
    "snippet": "public void addDelegatingCreator(AnnotatedWithParams creator,boolean explicit,SettableBeanProperty[] injectables,int delegateeIndex){\n  if (creator.getParameterType(delegateeIndex).isCollectionLikeType()) {\n    if (verifyNonDup(creator,C_ARRAY_DELEGATE,explicit)) {\n      _arrayDelegateArgs\u003dinjectables;\n    }\n  }\n else {\n    if (verifyNonDup(creator,C_DELEGATE,explicit)) {\n      _delegateArgs\u003dinjectables;\n    }\n  }\n}",
    "begin_line": 154,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.addPropertyCreator#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.addPropertyCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, boolean, com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "snippet": "public void addPropertyCreator(AnnotatedWithParams creator,boolean explicit,SettableBeanProperty[] properties){\n  if (verifyNonDup(creator,C_PROPS,explicit)) {\n    if (properties.length \u003e 1) {\n      HashMap\u003cString,Integer\u003e names\u003dnew HashMap\u003cString,Integer\u003e();\n      for (int i\u003d0, len\u003dproperties.length; i \u003c len; ++i) {\n        String name\u003dproperties[i].getName();\n        if (name.isEmpty() \u0026\u0026 (properties[i].getInjectableValueId() !\u003d null)) {\n          continue;\n        }\n        Integer old\u003dnames.put(name,Integer.valueOf(i));\n        if (old !\u003d null) {\n          throw new IllegalArgumentException(String.format(\"Duplicate creator property \\\"%s\\\" (index %s vs %d) for type %s \",name,old,i,ClassUtil.nameOf(_beanDesc.getBeanClass())));\n        }\n      }\n    }\n    _propertyBasedArgs\u003dproperties;\n  }\n}",
    "begin_line": 169,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.hasDefaultCreator#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.hasDefaultCreator()",
    "snippet": "public boolean hasDefaultCreator(){\n  return _creators[C_DEFAULT] !\u003d null;\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.hasDelegatingCreator#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.hasDelegatingCreator()",
    "snippet": "public boolean hasDelegatingCreator(){\n  return _creators[C_DELEGATE] !\u003d null;\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.hasPropertyBasedCreator#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.hasPropertyBasedCreator()",
    "snippet": "public boolean hasPropertyBasedCreator(){\n  return _creators[C_PROPS] !\u003d null;\n}",
    "begin_line": 218,
    "end_line": 220,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector._computeDelegateType#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector._computeDelegateType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "snippet": "private JavaType _computeDelegateType(DeserializationContext ctxt,AnnotatedWithParams creator,SettableBeanProperty[] delegateArgs) throws JsonMappingException {\n  if (!_hasNonDefaultCreator || (creator \u003d\u003d null)) {\n    return null;\n  }\n  int ix\u003d0;\n  if (delegateArgs !\u003d null) {\n    for (int i\u003d0, len\u003ddelegateArgs.length; i \u003c len; ++i) {\n      if (delegateArgs[i] \u003d\u003d null) {\n        ix\u003di;\n        break;\n      }\n    }\n  }\n  final DeserializationConfig config\u003dctxt.getConfig();\n  JavaType baseType\u003dcreator.getParameterType(ix);\n  AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  if (intr !\u003d null) {\n    AnnotatedParameter delegate\u003dcreator.getParameter(ix);\n    Object deserDef\u003dintr.findDeserializer(delegate);\n    if (deserDef !\u003d null) {\n      JsonDeserializer\u003cObject\u003e deser\u003dctxt.deserializerInstance(delegate,deserDef);\n      baseType\u003dbaseType.withValueHandler(deser);\n    }\n else {\n      baseType\u003dintr.refineDeserializationType(config,delegate,baseType);\n    }\n  }\n  return baseType;\n}",
    "begin_line": 228,
    "end_line": 267,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector._fixAccess#269",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector._fixAccess(T)",
    "snippet": "private \u003cT extends AnnotatedMember\u003eT _fixAccess(T member){\n  if (member !\u003d null \u0026\u0026 _canFixAccess) {\n    ClassUtil.checkAndFixAccess((Member)member.getAnnotated(),_forceAccess);\n  }\n  return member;\n}",
    "begin_line": 269,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector.verifyNonDup#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.verifyNonDup(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, int, boolean)",
    "snippet": "protected boolean verifyNonDup(AnnotatedWithParams newOne,int typeIndex,boolean explicit){\n  final int mask\u003d(1 \u003c\u003c typeIndex);\n  _hasNonDefaultCreator\u003dtrue;\n  AnnotatedWithParams oldOne\u003d_creators[typeIndex];\n  if (oldOne !\u003d null) {\n    boolean verify;\n    if ((_explicitCreators \u0026 mask) !\u003d 0) {\n      if (!explicit) {\n        return false;\n      }\n      verify\u003dtrue;\n    }\n else {\n      verify\u003d!explicit;\n    }\n    if (verify \u0026\u0026 (oldOne.getClass() \u003d\u003d newOne.getClass())) {\n      Class\u003c?\u003e oldType\u003doldOne.getRawParameterType(0);\n      Class\u003c?\u003e newType\u003dnewOne.getRawParameterType(0);\n      if (oldType \u003d\u003d newType) {\n        if (_isEnumValueOf(newOne)) {\n          return false;\n        }\n        if (_isEnumValueOf(oldOne)) {\n          ;\n        }\n else {\n          throw new IllegalArgumentException(String.format(\"Conflicting %s creators: already had %s creator %s, encountered another: %s\",TYPE_DESCS[typeIndex],explicit ? \"explicitly marked\" : \"implicitly discovered\",oldOne,newOne));\n        }\n      }\n else       if (newType.isAssignableFrom(oldType)) {\n        return false;\n      }\n    }\n  }\n  if (explicit) {\n    _explicitCreators|\u003dmask;\n  }\n  _creators[typeIndex]\u003d_fixAccess(newOne);\n  return true;\n}",
    "begin_line": 280,
    "end_line": 339,
    "comment": "/** \n * @return True if specified Creator is to be used\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CreatorCollector._isEnumValueOf#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector._isEnumValueOf(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "protected boolean _isEnumValueOf(AnnotatedWithParams creator){\n  return creator.getDeclaringClass().isEnum() \u0026\u0026 \"valueOf\".equals(creator.getName());\n}",
    "begin_line": 346,
    "end_line": 349,
    "comment": "/** \n * Helper method for recognizing `Enum.valueOf()` factory method\n * @since 2.8.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.StdTypeConstructor#378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.StdTypeConstructor(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, int)",
    "snippet": "public StdTypeConstructor(AnnotatedWithParams base,int t){\n  super(base,null);\n  _base\u003dbase;\n  _type\u003dt;\n}",
    "begin_line": 378,
    "end_line": 382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.tryToOptimize#384",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.tryToOptimize(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public static AnnotatedWithParams tryToOptimize(AnnotatedWithParams src){\n  if (src !\u003d null) {\n    final Class\u003c?\u003e rawType\u003dsrc.getDeclaringClass();\n    if (rawType \u003d\u003d List.class || rawType \u003d\u003d ArrayList.class) {\n      return new StdTypeConstructor(src,TYPE_ARRAY_LIST);\n    }\n    if (rawType \u003d\u003d LinkedHashMap.class) {\n      return new StdTypeConstructor(src,TYPE_LINKED_HASH_MAP);\n    }\n    if (rawType \u003d\u003d HashMap.class) {\n      return new StdTypeConstructor(src,TYPE_HASH_MAP);\n    }\n  }\n  return src;\n}",
    "begin_line": 384,
    "end_line": 399,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor._construct#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector._construct()",
    "snippet": "protected final Object _construct(){\nswitch (_type) {\ncase TYPE_ARRAY_LIST:    return new ArrayList\u003cObject\u003e();\ncase TYPE_LINKED_HASH_MAP:  return new LinkedHashMap\u003cString,Object\u003e();\ncase TYPE_HASH_MAP:return new HashMap\u003cString,Object\u003e();\n}\nthrow new IllegalStateException(\"Unknown type \" + _type);\n}",
    "begin_line": 401,
    "end_line": 411,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getParameterCount#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getParameterCount()",
    "snippet": "@Override public int getParameterCount(){\n  return _base.getParameterCount();\n}",
    "begin_line": 414,
    "end_line": 416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getRawParameterType#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getRawParameterType(int)",
    "snippet": "@Override public Class\u003c?\u003e getRawParameterType(int index){\n  return _base.getRawParameterType(index);\n}",
    "begin_line": 419,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getParameterType#424",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getParameterType(int)",
    "snippet": "@Override public JavaType getParameterType(int index){\n  return _base.getParameterType(index);\n}",
    "begin_line": 424,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getGenericParameterType#430",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getGenericParameterType(int)",
    "snippet": "@Override @Deprecated public Type getGenericParameterType(int index){\n  return _base.getGenericParameterType(index);\n}",
    "begin_line": 430,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.call#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.call()",
    "snippet": "@Override public Object call() throws Exception {\n  return _construct();\n}",
    "begin_line": 435,
    "end_line": 437,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.call#440",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.call(java.lang.Object[])",
    "snippet": "@Override public Object call(Object[] args) throws Exception {\n  return _construct();\n}",
    "begin_line": 440,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.call1#445",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.call1(java.lang.Object)",
    "snippet": "@Override public Object call1(Object arg) throws Exception {\n  return _construct();\n}",
    "begin_line": 445,
    "end_line": 447,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getDeclaringClass#450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getDeclaringClass()",
    "snippet": "@Override public Class\u003c?\u003e getDeclaringClass(){\n  return _base.getDeclaringClass();\n}",
    "begin_line": 450,
    "end_line": 452,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getMember#455",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getMember()",
    "snippet": "@Override public Member getMember(){\n  return _base.getMember();\n}",
    "begin_line": 455,
    "end_line": 457,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.setValue#460",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void setValue(Object pojo,Object value) throws UnsupportedOperationException, IllegalArgumentException {\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 460,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getValue#466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getValue(java.lang.Object)",
    "snippet": "@Override public Object getValue(Object pojo) throws UnsupportedOperationException, IllegalArgumentException {\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 466,
    "end_line": 469,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.withAnnotations#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "@Override public Annotated withAnnotations(AnnotationMap fallback){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 472,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getAnnotated#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getAnnotated()",
    "snippet": "@Override public AnnotatedElement getAnnotated(){\n  return _base.getAnnotated();\n}",
    "begin_line": 477,
    "end_line": 479,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getModifiers#482",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getModifiers()",
    "snippet": "@Override protected int getModifiers(){\n  return _base.getMember().getModifiers();\n}",
    "begin_line": 482,
    "end_line": 484,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getName#487",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getName()",
    "snippet": "@Override public String getName(){\n  return _base.getName();\n}",
    "begin_line": 487,
    "end_line": 489,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getType#492",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _base.getType();\n}",
    "begin_line": 492,
    "end_line": 494,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.getRawType#497",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _base.getRawType();\n}",
    "begin_line": 497,
    "end_line": 499,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.equals#502",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  return (o \u003d\u003d this);\n}",
    "begin_line": 502,
    "end_line": 504,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.hashCode#507",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _base.hashCode();\n}",
    "begin_line": 507,
    "end_line": 509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeConstructor.toString#512",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector",
    "signature": "com.fasterxml.jackson.databind.deser.impl.CreatorCollector.toString()",
    "snippet": "@Override public String toString(){\n  return _base.toString();\n}",
    "begin_line": 512,
    "end_line": 514,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingDeserializer.FailingDeserializer#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer.FailingDeserializer(java.lang.String)",
    "snippet": "public FailingDeserializer(String m){\n  super(Object.class);\n  _message\u003dm;\n}",
    "begin_line": 22,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingDeserializer.deserialize#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/FailingDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.FailingDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  ctxt.reportInputMismatch(this,_message);\n  return null;\n}",
    "begin_line": 28,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.MethodProperty#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.MethodProperty(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.util.Annotations, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public MethodProperty(BeanPropertyDefinition propDef,JavaType type,TypeDeserializer typeDeser,Annotations contextAnnotations,AnnotatedMethod method){\n  super(propDef,type,typeDeser,contextAnnotations);\n  _annotated\u003dmethod;\n  _setter\u003dmethod.getAnnotated();\n  _skipNulls\u003dNullsConstantProvider.isSkipper(_nullProvider);\n}",
    "begin_line": 38,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.MethodProperty#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.MethodProperty(com.fasterxml.jackson.databind.deser.impl.MethodProperty, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "protected MethodProperty(MethodProperty src,JsonDeserializer\u003c?\u003e deser,NullValueProvider nva){\n  super(src,deser,nva);\n  _annotated\u003dsrc._annotated;\n  _setter\u003dsrc._setter;\n  _skipNulls\u003dNullsConstantProvider.isSkipper(nva);\n}",
    "begin_line": 48,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.MethodProperty#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.MethodProperty(com.fasterxml.jackson.databind.deser.impl.MethodProperty, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected MethodProperty(MethodProperty src,PropertyName newName){\n  super(src,newName);\n  _annotated\u003dsrc._annotated;\n  _setter\u003dsrc._setter;\n  _skipNulls\u003dsrc._skipNulls;\n}",
    "begin_line": 56,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.MethodProperty#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.MethodProperty(com.fasterxml.jackson.databind.deser.impl.MethodProperty, java.lang.reflect.Method)",
    "snippet": "protected MethodProperty(MethodProperty src,Method m){\n  super(src);\n  _annotated\u003dsrc._annotated;\n  _setter\u003dm;\n  _skipNulls\u003dsrc._skipNulls;\n}",
    "begin_line": 66,
    "end_line": 71,
    "comment": "/** \n * Constructor used for JDK Serialization when reading persisted object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.withName#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.withName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public SettableBeanProperty withName(PropertyName newName){\n  return new MethodProperty(this,newName);\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.withValueDeserializer#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.withValueDeserializer(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@Override public SettableBeanProperty withValueDeserializer(JsonDeserializer\u003c?\u003e deser){\n  if (_valueDeserializer \u003d\u003d deser) {\n    return this;\n  }\n  return new MethodProperty(this,deser,_nullProvider);\n}",
    "begin_line": 79,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.withNullProvider#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.withNullProvider(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "@Override public SettableBeanProperty withNullProvider(NullValueProvider nva){\n  return new MethodProperty(this,_valueDeserializer,nva);\n}",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.fixAccess#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.fixAccess(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public void fixAccess(DeserializationConfig config){\n  _annotated.fixAccess(config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n}",
    "begin_line": 92,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.getAnnotation#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls){\n  return (_annotated \u003d\u003d null) ? null : _annotated.getAnnotation(acls);\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.getMember#108",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.getMember()",
    "snippet": "@Override public AnnotatedMember getMember(){\n  return _annotated;\n}",
    "begin_line": 108,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.deserializeAndSet#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeAndSet(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public void deserializeAndSet(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException {\n  Object value;\n  if (p.hasToken(JsonToken.VALUE_NULL)) {\n    if (_skipNulls) {\n      return;\n    }\n    value\u003d_nullProvider.getNullValue(ctxt);\n  }\n else   if (_valueTypeDeserializer \u003d\u003d null) {\n    value\u003d_valueDeserializer.deserialize(p,ctxt);\n    if (value \u003d\u003d null) {\n      if (_skipNulls) {\n        return;\n      }\n      value\u003d_nullProvider.getNullValue(ctxt);\n    }\n  }\n else {\n    value\u003d_valueDeserializer.deserializeWithType(p,ctxt,_valueTypeDeserializer);\n  }\n  try {\n    _setter.invoke(instance,value);\n  }\n catch (  Exception e) {\n    _throwAsIOE(p,e,value);\n  }\n}",
    "begin_line": 117,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.deserializeSetAndReturn#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.deserializeSetAndReturn(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object deserializeSetAndReturn(JsonParser p,DeserializationContext ctxt,Object instance) throws IOException {\n  Object value;\n  if (p.hasToken(JsonToken.VALUE_NULL)) {\n    if (_skipNulls) {\n      return instance;\n    }\n    value\u003d_nullProvider.getNullValue(ctxt);\n  }\n else   if (_valueTypeDeserializer \u003d\u003d null) {\n    value\u003d_valueDeserializer.deserialize(p,ctxt);\n    if (value \u003d\u003d null) {\n      if (_skipNulls) {\n        return instance;\n      }\n      value\u003d_nullProvider.getNullValue(ctxt);\n    }\n  }\n else {\n    value\u003d_valueDeserializer.deserializeWithType(p,ctxt,_valueTypeDeserializer);\n  }\n  try {\n    Object result\u003d_setter.invoke(instance,value);\n    return (result \u003d\u003d null) ? instance : result;\n  }\n catch (  Exception e) {\n    _throwAsIOE(p,e,value);\n    return null;\n  }\n}",
    "begin_line": 146,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.set#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.set(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public final void set(Object instance,Object value) throws IOException {\n  try {\n    _setter.invoke(instance,value);\n  }\n catch (  Exception e) {\n    _throwAsIOE(e,value);\n  }\n}",
    "begin_line": 177,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.setAndReturn#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.setAndReturn(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public Object setAndReturn(Object instance,Object value) throws IOException {\n  try {\n    Object result\u003d_setter.invoke(instance,value);\n    return (result \u003d\u003d null) ? instance : result;\n  }\n catch (  Exception e) {\n    _throwAsIOE(e,value);\n    return null;\n  }\n}",
    "begin_line": 188,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodProperty.readResolve#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.MethodProperty",
    "signature": "com.fasterxml.jackson.databind.deser.impl.MethodProperty.readResolve()",
    "snippet": "Object readResolve(){\n  return new MethodProperty(this,_annotated.getAnnotated());\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.NullsConstantProvider#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.NullsConstantProvider(java.lang.Object)",
    "snippet": "protected NullsConstantProvider(Object nvl){\n  _nullValue\u003dnvl;\n  _access\u003d(_nullValue \u003d\u003d null) ? AccessPattern.ALWAYS_NULL : AccessPattern.CONSTANT;\n}",
    "begin_line": 25,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.skipper#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.skipper()",
    "snippet": "public static NullsConstantProvider skipper(){\n  return SKIPPER;\n}",
    "begin_line": 37,
    "end_line": 39,
    "comment": "/** \n * Static accessor for a stateless instance used as marker, to indicate that all input `null` values should be skipped (ignored), so that no corresponding property value is set (with POJOs), and no content values (array/Collection elements, Map entries) are added.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.nuller#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.nuller()",
    "snippet": "public static NullsConstantProvider nuller(){\n  return NULLER;\n}",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.forValue#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.forValue(java.lang.Object)",
    "snippet": "public static NullsConstantProvider forValue(Object nvl){\n  if (nvl \u003d\u003d null) {\n    return NULLER;\n  }\n  return new NullsConstantProvider(nvl);\n}",
    "begin_line": 45,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.isSkipper#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.isSkipper(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "public static boolean isSkipper(NullValueProvider p){\n  return (p \u003d\u003d SKIPPER);\n}",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Utility method that can be used to check if given null value provider is \"skipper\", marker provider that means that all input `null`s should be skipped (ignored), instead of converted\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.isNuller#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.isNuller(com.fasterxml.jackson.databind.deser.NullValueProvider)",
    "snippet": "public static boolean isNuller(NullValueProvider p){\n  return (p \u003d\u003d NULLER);\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Utility method that can be used to check if given null value provider is \"nuller\", no-operation provider that will always simply return Java `null` for any and all input `null`s.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.getNullAccessPattern#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.getNullAccessPattern()",
    "snippet": "@Override public AccessPattern getNullAccessPattern(){\n  return _access;\n}",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullsConstantProvider.getNullValue#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/NullsConstantProvider.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider",
    "signature": "com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getNullValue(DeserializationContext ctxt){\n  return _nullValue;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.TypeWrappedDeserializer#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.TypeWrappedDeserializer(com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public TypeWrappedDeserializer(TypeDeserializer typeDeser,JsonDeserializer\u003c?\u003e deser){\n  super();\n  _typeDeserializer\u003dtypeDeser;\n  _deserializer\u003d(JsonDeserializer\u003cObject\u003e)deser;\n}",
    "begin_line": 28,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.handledType#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.handledType()",
    "snippet": "@Override public Class\u003c?\u003e handledType(){\n  return _deserializer.handledType();\n}",
    "begin_line": 36,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.supportsUpdate#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return _deserializer.supportsUpdate(config);\n}",
    "begin_line": 41,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.getDelegatee#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getDelegatee()",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e getDelegatee(){\n  return _deserializer.getDelegatee();\n}",
    "begin_line": 46,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.getKnownPropertyNames#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getKnownPropertyNames()",
    "snippet": "@Override public Collection\u003cObject\u003e getKnownPropertyNames(){\n  return _deserializer.getKnownPropertyNames();\n}",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.getNullValue#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n  return _deserializer.getNullValue(ctxt);\n}",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.getEmptyValue#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  return _deserializer.getEmptyValue(ctxt);\n}",
    "begin_line": 61,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.deserialize#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  return _deserializer.deserializeWithType(p,ctxt,_typeDeserializer);\n}",
    "begin_line": 66,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.deserializeWithType#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  throw new IllegalStateException(\"Type-wrapped deserializer\u0027s deserializeWithType should never get called\");\n}",
    "begin_line": 72,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeWrappedDeserializer.deserialize#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/impl/TypeWrappedDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt,Object intoValue) throws IOException {\n  return _deserializer.deserialize(p,ctxt,intoValue);\n}",
    "begin_line": 80,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.CollectionDeserializer#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.deser.ValueInstantiator)",
    "snippet": "public CollectionDeserializer(JavaType collectionType,JsonDeserializer\u003cObject\u003e valueDeser,TypeDeserializer valueTypeDeser,ValueInstantiator valueInstantiator){\n  this(collectionType,valueDeser,valueTypeDeser,valueInstantiator,null,null,null);\n}",
    "begin_line": 69,
    "end_line": 74,
    "comment": "/** \n * Constructor for context-free instances, where we do not yet know which property is using this deserializer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.CollectionDeserializer#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.deser.ValueInstantiator, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)",
    "snippet": "protected CollectionDeserializer(JavaType collectionType,JsonDeserializer\u003cObject\u003e valueDeser,TypeDeserializer valueTypeDeser,ValueInstantiator valueInstantiator,JsonDeserializer\u003cObject\u003e delegateDeser,NullValueProvider nuller,Boolean unwrapSingle){\n  super(collectionType,nuller,unwrapSingle);\n  _valueDeserializer\u003dvalueDeser;\n  _valueTypeDeserializer\u003dvalueTypeDeser;\n  _valueInstantiator\u003dvalueInstantiator;\n  _delegateDeserializer\u003ddelegateDeser;\n}",
    "begin_line": 81,
    "end_line": 91,
    "comment": "/** \n * Constructor used when creating contextualized instances.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.CollectionDeserializer#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionDeserializer(com.fasterxml.jackson.databind.deser.std.CollectionDeserializer)",
    "snippet": "protected CollectionDeserializer(CollectionDeserializer src){\n  super(src);\n  _valueDeserializer\u003dsrc._valueDeserializer;\n  _valueTypeDeserializer\u003dsrc._valueTypeDeserializer;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n}",
    "begin_line": 97,
    "end_line": 104,
    "comment": "/** \n * Copy-constructor that can be used by sub-classes to allow copy-on-write styling copying of settings of an existing instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.withResolved#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.withResolved(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected CollectionDeserializer withResolved(JsonDeserializer\u003c?\u003e dd,JsonDeserializer\u003c?\u003e vd,TypeDeserializer vtd,NullValueProvider nuller,Boolean unwrapSingle){\n  return new CollectionDeserializer(_containerType,(JsonDeserializer\u003cObject\u003e)vd,vtd,_valueInstantiator,(JsonDeserializer\u003cObject\u003e)dd,nuller,unwrapSingle);\n}",
    "begin_line": 112,
    "end_line": 121,
    "comment": "/** \n * Fluent-factory method call to construct contextual instance.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.isCachable#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null) \u0026\u0026 (_delegateDeserializer \u003d\u003d null);\n}",
    "begin_line": 125,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.createContextual#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public CollectionDeserializer createContextual(DeserializationContext ctxt,BeanProperty property) throws JsonMappingException {\n  JsonDeserializer\u003cObject\u003e delegateDeser\u003dnull;\n  if (_valueInstantiator !\u003d null) {\n    if (_valueInstantiator.canCreateUsingDelegate()) {\n      JavaType delegateType\u003d_valueInstantiator.getDelegateType(ctxt.getConfig());\n      if (delegateType \u003d\u003d null) {\n        ctxt.reportBadDefinition(_containerType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\",_containerType,_valueInstantiator.getClass().getName()));\n      }\n      delegateDeser\u003dfindDeserializer(ctxt,delegateType,property);\n    }\n else     if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n      JavaType delegateType\u003d_valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n      if (delegateType \u003d\u003d null) {\n        ctxt.reportBadDefinition(_containerType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\",_containerType,_valueInstantiator.getClass().getName()));\n      }\n      delegateDeser\u003dfindDeserializer(ctxt,delegateType,property);\n    }\n  }\n  Boolean unwrapSingle\u003dfindFormatFeature(ctxt,property,Collection.class,JsonFormat.Feature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n  JsonDeserializer\u003c?\u003e valueDeser\u003d_valueDeserializer;\n  valueDeser\u003dfindConvertingContentDeserializer(ctxt,property,valueDeser);\n  final JavaType vt\u003d_containerType.getContentType();\n  if (valueDeser \u003d\u003d null) {\n    valueDeser\u003dctxt.findContextualValueDeserializer(vt,property);\n  }\n else {\n    valueDeser\u003dctxt.handleSecondaryContextualization(valueDeser,property,vt);\n  }\n  TypeDeserializer valueTypeDeser\u003d_valueTypeDeserializer;\n  if (valueTypeDeser !\u003d null) {\n    valueTypeDeser\u003dvalueTypeDeser.forProperty(property);\n  }\n  NullValueProvider nuller\u003dfindContentNullProvider(ctxt,property,valueDeser);\n  if ((unwrapSingle !\u003d _unwrapSingle) || (nuller !\u003d _nullProvider) || (delegateDeser !\u003d _delegateDeserializer)|| (valueDeser !\u003d _valueDeserializer)|| (valueTypeDeser !\u003d _valueTypeDeserializer)) {\n    return withResolved(delegateDeser,valueDeser,valueTypeDeser,nuller,unwrapSingle);\n  }\n  return this;\n}",
    "begin_line": 145,
    "end_line": 203,
    "comment": "/** \n * Method called to finalize setup of this deserializer, when it is known for which property deserializer is needed for.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.getContentDeserializer#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.getContentDeserializer()",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e getContentDeserializer(){\n  return _valueDeserializer;\n}",
    "begin_line": 212,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.getValueInstantiator#217",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.getValueInstantiator()",
    "snippet": "@Override public ValueInstantiator getValueInstantiator(){\n  return _valueInstantiator;\n}",
    "begin_line": 217,
    "end_line": 219,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.deserialize#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public Collection\u003cObject\u003e deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_delegateDeserializer !\u003d null) {\n    return (Collection\u003cObject\u003e)_valueInstantiator.createUsingDelegate(ctxt,_delegateDeserializer.deserialize(p,ctxt));\n  }\n  if (p.hasToken(JsonToken.VALUE_STRING)) {\n    String str\u003dp.getText();\n    if (str.length() \u003d\u003d 0) {\n      return (Collection\u003cObject\u003e)_valueInstantiator.createFromString(ctxt,str);\n    }\n  }\n  return deserialize(p,ctxt,createDefaultInstance(ctxt));\n}",
    "begin_line": 229,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.createDefaultInstance#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.createDefaultInstance(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected Collection\u003cObject\u003e createDefaultInstance(DeserializationContext ctxt) throws IOException {\n  return (Collection\u003cObject\u003e)_valueInstantiator.createUsingDefault(ctxt);\n}",
    "begin_line": 252,
    "end_line": 256,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.deserialize#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Collection\u003cjava.lang.Object\u003e)",
    "snippet": "@Override public Collection\u003cObject\u003e deserialize(JsonParser p,DeserializationContext ctxt,Collection\u003cObject\u003e result) throws IOException {\n  if (!p.isExpectedStartArrayToken()) {\n    return handleNonArray(p,ctxt,result);\n  }\n  p.setCurrentValue(result);\n  JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  if (valueDes.getObjectIdReader() !\u003d null) {\n    return _deserializeWithObjectId(p,ctxt,result);\n  }\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  JsonToken t;\n  while ((t\u003dp.nextToken()) !\u003d JsonToken.END_ARRAY) {\n    try {\n      Object value;\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        value\u003d_nullProvider.getNullValue(ctxt);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      result.add(value);\n    }\n catch (    Exception e) {\n      boolean wrap\u003d(ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n      if (!wrap) {\n        ClassUtil.throwIfRTE(e);\n      }\n      throw JsonMappingException.wrapWithPath(e,result,result.size());\n    }\n  }\n  return result;\n}",
    "begin_line": 259,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.deserializeWithType#309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return typeDeserializer.deserializeTypedFromArray(p,ctxt);\n}",
    "begin_line": 309,
    "end_line": 315,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer.handleNonArray#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleNonArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Collection\u003cjava.lang.Object\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected final Collection\u003cObject\u003e handleNonArray(JsonParser p,DeserializationContext ctxt,Collection\u003cObject\u003e result) throws IOException {\n  boolean canWrap\u003d(_unwrapSingle \u003d\u003d Boolean.TRUE) || ((_unwrapSingle \u003d\u003d null) \u0026\u0026 ctxt.isEnabled(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY));\n  if (!canWrap) {\n    return (Collection\u003cObject\u003e)ctxt.handleUnexpectedToken(_containerType.getRawClass(),p);\n  }\n  JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  JsonToken t\u003dp.getCurrentToken();\n  Object value;\n  try {\n    if (t \u003d\u003d JsonToken.VALUE_NULL) {\n      if (_skipNullValues) {\n        return result;\n      }\n      value\u003d_nullProvider.getNullValue(ctxt);\n    }\n else     if (typeDeser \u003d\u003d null) {\n      value\u003dvalueDes.deserialize(p,ctxt);\n    }\n else {\n      value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n    }\n  }\n catch (  Exception e) {\n    throw JsonMappingException.wrapWithPath(e,Object.class,result.size());\n  }\n  result.add(value);\n  return result;\n}",
    "begin_line": 323,
    "end_line": 358,
    "comment": "/** \n * Helper method called when current token is no START_ARRAY. Will either throw an exception, or try to handle value as if member of implicit array, depending on configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionDeserializer._deserializeWithObjectId#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer._deserializeWithObjectId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Collection\u003cjava.lang.Object\u003e)",
    "snippet": "protected Collection\u003cObject\u003e _deserializeWithObjectId(JsonParser p,DeserializationContext ctxt,Collection\u003cObject\u003e result) throws IOException {\n  if (!p.isExpectedStartArrayToken()) {\n    return handleNonArray(p,ctxt,result);\n  }\n  p.setCurrentValue(result);\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  CollectionReferringAccumulator referringAccumulator\u003dnew CollectionReferringAccumulator(_containerType.getContentType().getRawClass(),result);\n  JsonToken t;\n  while ((t\u003dp.nextToken()) !\u003d JsonToken.END_ARRAY) {\n    try {\n      Object value;\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        value\u003d_nullProvider.getNullValue(ctxt);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      referringAccumulator.add(value);\n    }\n catch (    UnresolvedForwardReference reference) {\n      Referring ref\u003dreferringAccumulator.handleUnresolvedReference(reference);\n      reference.getRoid().appendReferring(ref);\n    }\ncatch (    Exception e) {\n      boolean wrap\u003d(ctxt \u003d\u003d null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);\n      if (!wrap) {\n        ClassUtil.throwIfRTE(e);\n      }\n      throw JsonMappingException.wrapWithPath(e,result,result.size());\n    }\n  }\n  return result;\n}",
    "begin_line": 360,
    "end_line": 403,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferringAccumulator.CollectionReferringAccumulator#418",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferringAccumulator(java.lang.Class\u003c?\u003e, java.util.Collection\u003cjava.lang.Object\u003e)",
    "snippet": "public CollectionReferringAccumulator(Class\u003c?\u003e elementType,Collection\u003cObject\u003e result){\n  _elementType\u003delementType;\n  _result\u003dresult;\n}",
    "begin_line": 418,
    "end_line": 421,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferringAccumulator.add#423",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.add(java.lang.Object)",
    "snippet": "public void add(Object value){\n  if (_accumulator.isEmpty()) {\n    _result.add(value);\n  }\n else {\n    CollectionReferring ref\u003d_accumulator.get(_accumulator.size() - 1);\n    ref.next.add(value);\n  }\n}",
    "begin_line": 423,
    "end_line": 431,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferringAccumulator.handleUnresolvedReference#433",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleUnresolvedReference(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference)",
    "snippet": "public Referring handleUnresolvedReference(UnresolvedForwardReference reference){\n  CollectionReferring id\u003dnew CollectionReferring(this,reference,_elementType);\n  _accumulator.add(id);\n  return id;\n}",
    "begin_line": 433,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferringAccumulator.resolveForwardReference#440",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.resolveForwardReference(java.lang.Object, java.lang.Object)",
    "snippet": "public void resolveForwardReference(Object id,Object value) throws IOException {\n  Iterator\u003cCollectionReferring\u003e iterator\u003d_accumulator.iterator();\n  Collection\u003cObject\u003e previous\u003d_result;\n  while (iterator.hasNext()) {\n    CollectionReferring ref\u003diterator.next();\n    if (ref.hasId(id)) {\n      iterator.remove();\n      previous.add(value);\n      previous.addAll(ref.next);\n      return;\n    }\n    previous\u003dref.next;\n  }\n  throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id + \"] that wasn\u0027t previously seen as unresolved.\");\n}",
    "begin_line": 440,
    "end_line": 460,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferring.CollectionReferring#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferring(com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.CollectionReferringAccumulator, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, java.lang.Class\u003c?\u003e)",
    "snippet": "CollectionReferring(CollectionReferringAccumulator parent,UnresolvedForwardReference reference,Class\u003c?\u003e contentType){\n  super(reference,contentType);\n  _parent\u003dparent;\n}",
    "begin_line": 472,
    "end_line": 477,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionReferring.handleResolvedForwardReference#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.CollectionDeserializer.handleResolvedForwardReference(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void handleResolvedForwardReference(Object id,Object value) throws IOException {\n  _parent.resolveForwardReference(id,value);\n}",
    "begin_line": 480,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.ContainerDeserializerBase#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.ContainerDeserializerBase(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)",
    "snippet": "protected ContainerDeserializerBase(JavaType selfType,NullValueProvider nuller,Boolean unwrapSingle){\n  super(selfType);\n  _containerType\u003dselfType;\n  _unwrapSingle\u003dunwrapSingle;\n  _nullProvider\u003dnuller;\n  _skipNullValues\u003dNullsConstantProvider.isSkipper(nuller);\n}",
    "begin_line": 50,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.ContainerDeserializerBase#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.ContainerDeserializerBase(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected ContainerDeserializerBase(JavaType selfType){\n  this(selfType,null,null);\n}",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.ContainerDeserializerBase#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.ContainerDeserializerBase(com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase\u003c?\u003e)",
    "snippet": "protected ContainerDeserializerBase(ContainerDeserializerBase\u003c?\u003e base){\n  this(base,base._nullProvider,base._unwrapSingle);\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.ContainerDeserializerBase#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.ContainerDeserializerBase(com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase\u003c?\u003e, com.fasterxml.jackson.databind.deser.NullValueProvider, java.lang.Boolean)",
    "snippet": "protected ContainerDeserializerBase(ContainerDeserializerBase\u003c?\u003e base,NullValueProvider nuller,Boolean unwrapSingle){\n  super(base._containerType);\n  _containerType\u003dbase._containerType;\n  _nullProvider\u003dnuller;\n  _unwrapSingle\u003dunwrapSingle;\n  _skipNullValues\u003dNullsConstantProvider.isSkipper(nuller);\n}",
    "begin_line": 73,
    "end_line": 80,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getValueType#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getValueType()",
    "snippet": "@Override public JavaType getValueType(){\n  return _containerType;\n}",
    "begin_line": 89,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.supportsUpdate#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return Boolean.TRUE;\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.findBackReference#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.findBackReference(java.lang.String)",
    "snippet": "@Override public SettableBeanProperty findBackReference(String refName){\n  JsonDeserializer\u003cObject\u003e valueDeser\u003dgetContentDeserializer();\n  if (valueDeser \u003d\u003d null) {\n    throw new IllegalArgumentException(String.format(\"Cannot handle managed/back reference \u0027%s\u0027: type: container deserializer of type %s returned null for \u0027getContentDeserializer()\u0027\",refName,getClass().getName()));\n  }\n  return valueDeser.findBackReference(refName);\n}",
    "begin_line": 97,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getContentType#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getContentType()",
    "snippet": "public JavaType getContentType(){\n  if (_containerType \u003d\u003d null) {\n    return TypeFactory.unknownType();\n  }\n  return _containerType.getContentType();\n}",
    "begin_line": 117,
    "end_line": 122,
    "comment": "/** \n * Accessor for declared type of contained value elements; either exact type, or one of its supertypes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getContentDeserializer#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getContentDeserializer()",
    "snippet": "public abstract JsonDeserializer\u003cObject\u003e getContentDeserializer();",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * Accesor for deserializer use for deserializing content values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getValueInstantiator#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getValueInstantiator()",
    "snippet": "@Override public ValueInstantiator getValueInstantiator(){\n  return null;\n}",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getEmptyAccessPattern#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getEmptyAccessPattern()",
    "snippet": "@Override public AccessPattern getEmptyAccessPattern(){\n  return AccessPattern.DYNAMIC;\n}",
    "begin_line": 138,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.getEmptyValue#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  ValueInstantiator vi\u003dgetValueInstantiator();\n  if (vi \u003d\u003d null || !vi.canCreateUsingDefault()) {\n    JavaType type\u003dgetValueType();\n    ctxt.reportBadDefinition(type,String.format(\"Cannot create empty instance of %s, no default Creator\",type));\n  }\n  try {\n    return vi.createUsingDefault(ctxt);\n  }\n catch (  IOException e) {\n    return ClassUtil.throwAsMappingException(ctxt,e);\n  }\n}",
    "begin_line": 145,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ContainerDeserializerBase.wrapAndThrow#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/ContainerDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase.wrapAndThrow(java.lang.Throwable, java.lang.Object, java.lang.String)",
    "snippet": "protected \u003cBOGUS\u003eBOGUS wrapAndThrow(Throwable t,Object ref,String key) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  if (t instanceof IOException \u0026\u0026 !(t instanceof JsonMappingException)) {\n    throw (IOException)t;\n  }\n  throw JsonMappingException.wrapWithPath(t,ref,ClassUtil.nonNull(key,\"N/A\"));\n}",
    "begin_line": 168,
    "end_line": 183,
    "comment": "/** \n * Helper method called by various Map(-like) deserializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer.types#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.types()",
    "snippet": "public static Class\u003c?\u003e[] types(){\n  return new Class\u003c?\u003e[]{File.class,URL.class,URI.class,Class.class,JavaType.class,Currency.class,Pattern.class,Locale.class,Charset.class,TimeZone.class,InetAddress.class,InetSocketAddress.class,StringBuilder.class};\n}",
    "begin_line": 56,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer.FromStringDeserializer#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.FromStringDeserializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected FromStringDeserializer(Class\u003c?\u003e vc){\n  super(vc);\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer.findDeserializer#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.findDeserializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Std findDeserializer(Class\u003c?\u003e rawType){\n  int kind\u003d0;\n  if (rawType \u003d\u003d File.class) {\n    kind\u003dStd.STD_FILE;\n  }\n else   if (rawType \u003d\u003d URL.class) {\n    kind\u003dStd.STD_URL;\n  }\n else   if (rawType \u003d\u003d URI.class) {\n    kind\u003dStd.STD_URI;\n  }\n else   if (rawType \u003d\u003d Class.class) {\n    kind\u003dStd.STD_CLASS;\n  }\n else   if (rawType \u003d\u003d JavaType.class) {\n    kind\u003dStd.STD_JAVA_TYPE;\n  }\n else   if (rawType \u003d\u003d Currency.class) {\n    kind\u003dStd.STD_CURRENCY;\n  }\n else   if (rawType \u003d\u003d Pattern.class) {\n    kind\u003dStd.STD_PATTERN;\n  }\n else   if (rawType \u003d\u003d Locale.class) {\n    kind\u003dStd.STD_LOCALE;\n  }\n else   if (rawType \u003d\u003d Charset.class) {\n    kind\u003dStd.STD_CHARSET;\n  }\n else   if (rawType \u003d\u003d TimeZone.class) {\n    kind\u003dStd.STD_TIME_ZONE;\n  }\n else   if (rawType \u003d\u003d InetAddress.class) {\n    kind\u003dStd.STD_INET_ADDRESS;\n  }\n else   if (rawType \u003d\u003d InetSocketAddress.class) {\n    kind\u003dStd.STD_INET_SOCKET_ADDRESS;\n  }\n else   if (rawType \u003d\u003d StringBuilder.class) {\n    kind\u003dStd.STD_STRING_BUILDER;\n  }\n else {\n    return null;\n  }\n  return new Std(rawType,kind);\n}",
    "begin_line": 88,
    "end_line": 121,
    "comment": "/** \n * Factory method for trying to find a deserializer for one of supported types that have simple from-String serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer.deserialize#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public T deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  String text\u003dp.getValueAsString();\n  if (text !\u003d null) {\n    if (text.length() \u003d\u003d 0 || (text\u003dtext.trim()).length() \u003d\u003d 0) {\n      return _deserializeFromEmptyString();\n    }\n    Exception cause\u003dnull;\n    try {\n      return _deserialize(text,ctxt);\n    }\n catch (    IllegalArgumentException|MalformedURLException e) {\n      cause\u003de;\n    }\n    String msg\u003d\"not a valid textual representation\";\n    String m2\u003dcause.getMessage();\n    if (m2 !\u003d null) {\n      msg\u003dmsg + \", problem: \" + m2;\n    }\n    JsonMappingException e\u003dctxt.weirdStringException(text,_valueClass,msg);\n    e.initCause(cause);\n    throw e;\n  }\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    return _deserializeFromArray(p,ctxt);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n    Object ob\u003dp.getEmbeddedObject();\n    if (ob \u003d\u003d null) {\n      return null;\n    }\n    if (_valueClass.isAssignableFrom(ob.getClass())) {\n      return (T)ob;\n    }\n    return _deserializeEmbedded(ob,ctxt);\n  }\n  return (T)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 131,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer._deserialize#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserialize(java.lang.String, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected abstract T _deserialize(String value,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 180,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer._deserializeEmbedded#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserializeEmbedded(java.lang.Object, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected T _deserializeEmbedded(Object ob,DeserializationContext ctxt) throws IOException {\n  ctxt.reportInputMismatch(this,\"Don\u0027t know how to convert embedded Object of type %s into %s\",ob.getClass().getName(),_valueClass.getName());\n  return null;\n}",
    "begin_line": 182,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FromStringDeserializer._deserializeFromEmptyString#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserializeFromEmptyString()",
    "snippet": "protected T _deserializeFromEmptyString() throws IOException {\n  return null;\n}",
    "begin_line": 190,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer.Std(java.lang.Class\u003c?\u003e, int)",
    "snippet": "protected Std(Class\u003c?\u003e valueType,int kind){\n  super(valueType);\n  _kind\u003dkind;\n}",
    "begin_line": 226,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._deserialize#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserialize(java.lang.String, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override protected Object _deserialize(String value,DeserializationContext ctxt) throws IOException {\nswitch (_kind) {\ncase STD_FILE:    return new File(value);\ncase STD_URL:  return new URL(value);\ncase STD_URI:return URI.create(value);\ncase STD_CLASS:try {\nreturn ctxt.findClass(value);\n}\n catch (Exception e) {\nreturn ctxt.handleInstantiationProblem(_valueClass,value,ClassUtil.getRootCause(e));\n}\ncase STD_JAVA_TYPE:return ctxt.getTypeFactory().constructFromCanonical(value);\ncase STD_CURRENCY:return Currency.getInstance(value);\ncase STD_PATTERN:return Pattern.compile(value);\ncase STD_LOCALE:{\nint ix\u003d_firstHyphenOrUnderscore(value);\nif (ix \u003c 0) {\nreturn new Locale(value);\n}\nString first\u003dvalue.substring(0,ix);\nvalue\u003dvalue.substring(ix + 1);\nix\u003d_firstHyphenOrUnderscore(value);\nif (ix \u003c 0) {\nreturn new Locale(first,value);\n}\nString second\u003dvalue.substring(0,ix);\nreturn new Locale(first,second,value.substring(ix + 1));\n}\ncase STD_CHARSET:return Charset.forName(value);\ncase STD_TIME_ZONE:return TimeZone.getTimeZone(value);\ncase STD_INET_ADDRESS:return InetAddress.getByName(value);\ncase STD_INET_SOCKET_ADDRESS:if (value.startsWith(\"[\")) {\nint i\u003dvalue.lastIndexOf(\u0027]\u0027);\nif (i \u003d\u003d -1) {\nthrow new InvalidFormatException(ctxt.getParser(),\"Bracketed IPv6 address must contain closing bracket\",value,InetSocketAddress.class);\n}\nint j\u003dvalue.indexOf(\u0027:\u0027,i);\nint port\u003dj \u003e -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\nreturn new InetSocketAddress(value.substring(0,i + 1),port);\n}\nint ix\u003dvalue.indexOf(\u0027:\u0027);\nif (ix \u003e\u003d 0 \u0026\u0026 value.indexOf(\u0027:\u0027,ix + 1) \u003c 0) {\nint port\u003dInteger.parseInt(value.substring(ix + 1));\nreturn new InetSocketAddress(value.substring(0,ix),port);\n}\nreturn new InetSocketAddress(value,0);\ncase STD_STRING_BUILDER:return new StringBuilder(value);\n}\nVersionUtil.throwInternal();\nreturn null;\n}",
    "begin_line": 232,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._deserializeFromEmptyString#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._deserializeFromEmptyString()",
    "snippet": "@Override protected Object _deserializeFromEmptyString() throws IOException {\n  if (_kind \u003d\u003d STD_URI) {\n    return URI.create(\"\");\n  }\n  if (_kind \u003d\u003d STD_LOCALE) {\n    return Locale.ROOT;\n  }\n  if (_kind \u003d\u003d STD_STRING_BUILDER) {\n    return new StringBuilder();\n  }\n  return super._deserializeFromEmptyString();\n}",
    "begin_line": 308,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._firstHyphenOrUnderscore#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.FromStringDeserializer._firstHyphenOrUnderscore(java.lang.String)",
    "snippet": "protected int _firstHyphenOrUnderscore(String str){\n  for (int i\u003d0, end\u003dstr.length(); i \u003c end; ++i) {\n    char c\u003dstr.charAt(i);\n    if (c \u003d\u003d \u0027_\u0027 || c \u003d\u003d \u0027-\u0027) {\n      return i;\n    }\n  }\n  return -1;\n}",
    "begin_line": 323,
    "end_line": 332,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JdkDeserializers.find#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.JdkDeserializers.find(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType,String clsName){\n  if (_classNames.contains(clsName)) {\n    JsonDeserializer\u003c?\u003e d\u003dFromStringDeserializer.findDeserializer(rawType);\n    if (d !\u003d null) {\n      return d;\n    }\n    if (rawType \u003d\u003d UUID.class) {\n      return new UUIDDeserializer();\n    }\n    if (rawType \u003d\u003d StackTraceElement.class) {\n      return new StackTraceElementDeserializer();\n    }\n    if (rawType \u003d\u003d AtomicBoolean.class) {\n      return new AtomicBooleanDeserializer();\n    }\n    if (rawType \u003d\u003d ByteBuffer.class) {\n      return new ByteBufferDeserializer();\n    }\n    if (rawType \u003d\u003d Void.class) {\n      return NullifyingDeserializer.instance;\n    }\n  }\n  return null;\n}",
    "begin_line": 29,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.MapDeserializer#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.deser.ValueInstantiator, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "public MapDeserializer(JavaType mapType,ValueInstantiator valueInstantiator,KeyDeserializer keyDeser,JsonDeserializer\u003cObject\u003e valueDeser,TypeDeserializer valueTypeDeser){\n  super(mapType,null,null);\n  _keyDeserializer\u003dkeyDeser;\n  _valueDeserializer\u003dvalueDeser;\n  _valueTypeDeserializer\u003dvalueTypeDeser;\n  _valueInstantiator\u003dvalueInstantiator;\n  _hasDefaultCreator\u003dvalueInstantiator.canCreateUsingDefault();\n  _delegateDeserializer\u003dnull;\n  _propertyBasedCreator\u003dnull;\n  _standardStringKey\u003d_isStdKeyDeser(mapType,keyDeser);\n}",
    "begin_line": 95,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.MapDeserializer#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapDeserializer(com.fasterxml.jackson.databind.deser.std.MapDeserializer)",
    "snippet": "protected MapDeserializer(MapDeserializer src){\n  super(src);\n  _keyDeserializer\u003dsrc._keyDeserializer;\n  _valueDeserializer\u003dsrc._valueDeserializer;\n  _valueTypeDeserializer\u003dsrc._valueTypeDeserializer;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _hasDefaultCreator\u003dsrc._hasDefaultCreator;\n  _ignorableProperties\u003dsrc._ignorableProperties;\n  _standardStringKey\u003dsrc._standardStringKey;\n}",
    "begin_line": 114,
    "end_line": 128,
    "comment": "/** \n * Copy-constructor that can be used by sub-classes to allow copy-on-write styling copying of settings of an existing instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.MapDeserializer#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapDeserializer(com.fasterxml.jackson.databind.deser.std.MapDeserializer, com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.deser.NullValueProvider, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "protected MapDeserializer(MapDeserializer src,KeyDeserializer keyDeser,JsonDeserializer\u003cObject\u003e valueDeser,TypeDeserializer valueTypeDeser,NullValueProvider nuller,Set\u003cString\u003e ignorable){\n  super(src,nuller,src._unwrapSingle);\n  _keyDeserializer\u003dkeyDeser;\n  _valueDeserializer\u003dvalueDeser;\n  _valueTypeDeserializer\u003dvalueTypeDeser;\n  _valueInstantiator\u003dsrc._valueInstantiator;\n  _propertyBasedCreator\u003dsrc._propertyBasedCreator;\n  _delegateDeserializer\u003dsrc._delegateDeserializer;\n  _hasDefaultCreator\u003dsrc._hasDefaultCreator;\n  _ignorableProperties\u003dignorable;\n  _standardStringKey\u003d_isStdKeyDeser(_containerType,keyDeser);\n}",
    "begin_line": 130,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.withResolved#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.withResolved(com.fasterxml.jackson.databind.KeyDeserializer, com.fasterxml.jackson.databind.jsontype.TypeDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.deser.NullValueProvider, java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected MapDeserializer withResolved(KeyDeserializer keyDeser,TypeDeserializer valueTypeDeser,JsonDeserializer\u003c?\u003e valueDeser,NullValueProvider nuller,Set\u003cString\u003e ignorable){\n  if ((_keyDeserializer \u003d\u003d keyDeser) \u0026\u0026 (_valueDeserializer \u003d\u003d valueDeser) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d valueTypeDeser)\u0026\u0026 (_nullProvider \u003d\u003d nuller)\u0026\u0026 (_ignorableProperties \u003d\u003d ignorable)) {\n    return this;\n  }\n  return new MapDeserializer(this,keyDeser,(JsonDeserializer\u003cObject\u003e)valueDeser,valueTypeDeser,nuller,ignorable);\n}",
    "begin_line": 154,
    "end_line": 168,
    "comment": "/** \n * Fluent factory method used to create a copy with slightly different settings. When sub-classing, MUST be overridden.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._isStdKeyDeser#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._isStdKeyDeser(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.KeyDeserializer)",
    "snippet": "protected final boolean _isStdKeyDeser(JavaType mapType,KeyDeserializer keyDeser){\n  if (keyDeser \u003d\u003d null) {\n    return true;\n  }\n  JavaType keyType\u003dmapType.getKeyType();\n  if (keyType \u003d\u003d null) {\n    return true;\n  }\n  Class\u003c?\u003e rawKeyType\u003dkeyType.getRawClass();\n  return ((rawKeyType \u003d\u003d String.class || rawKeyType \u003d\u003d Object.class) \u0026\u0026 isDefaultKeyDeserializer(keyDeser));\n}",
    "begin_line": 174,
    "end_line": 186,
    "comment": "/** \n * Helper method used to check whether we can just use the default key deserialization, where JSON String becomes Java String.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.setIgnorableProperties#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.setIgnorableProperties(java.lang.String[])",
    "snippet": "public void setIgnorableProperties(String[] ignorable){\n  _ignorableProperties\u003d(ignorable \u003d\u003d null || ignorable.length \u003d\u003d 0) ? null : ArrayBuilders.arrayToSet(ignorable);\n}",
    "begin_line": 188,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.setIgnorableProperties#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.setIgnorableProperties(java.util.Set\u003cjava.lang.String\u003e)",
    "snippet": "public void setIgnorableProperties(Set\u003cString\u003e ignorable){\n  _ignorableProperties\u003d(ignorable \u003d\u003d null || ignorable.size() \u003d\u003d 0) ? null : ignorable;\n}",
    "begin_line": 193,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.resolve#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n  if (_valueInstantiator.canCreateUsingDelegate()) {\n    JavaType delegateType\u003d_valueInstantiator.getDelegateType(ctxt.getConfig());\n    if (delegateType \u003d\u003d null) {\n      ctxt.reportBadDefinition(_containerType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingDelegate()\u0027, but null for \u0027getDelegateType()\u0027\",_containerType,_valueInstantiator.getClass().getName()));\n    }\n    _delegateDeserializer\u003dfindDeserializer(ctxt,delegateType,null);\n  }\n else   if (_valueInstantiator.canCreateUsingArrayDelegate()) {\n    JavaType delegateType\u003d_valueInstantiator.getArrayDelegateType(ctxt.getConfig());\n    if (delegateType \u003d\u003d null) {\n      ctxt.reportBadDefinition(_containerType,String.format(\"Invalid delegate-creator definition for %s: value instantiator (%s) returned true for \u0027canCreateUsingArrayDelegate()\u0027, but null for \u0027getArrayDelegateType()\u0027\",_containerType,_valueInstantiator.getClass().getName()));\n    }\n    _delegateDeserializer\u003dfindDeserializer(ctxt,delegateType,null);\n  }\n  if (_valueInstantiator.canCreateFromObjectWith()) {\n    SettableBeanProperty[] creatorProps\u003d_valueInstantiator.getFromObjectArguments(ctxt.getConfig());\n    _propertyBasedCreator\u003dPropertyBasedCreator.construct(ctxt,_valueInstantiator,creatorProps,ctxt.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES));\n  }\n  _standardStringKey\u003d_isStdKeyDeser(_containerType,_keyDeserializer);\n}",
    "begin_line": 205,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.createContextual#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt,BeanProperty property) throws JsonMappingException {\n  KeyDeserializer keyDeser\u003d_keyDeserializer;\n  if (keyDeser \u003d\u003d null) {\n    keyDeser\u003dctxt.findKeyDeserializer(_containerType.getKeyType(),property);\n  }\n else {\n    if (keyDeser instanceof ContextualKeyDeserializer) {\n      keyDeser\u003d((ContextualKeyDeserializer)keyDeser).createContextual(ctxt,property);\n    }\n  }\n  JsonDeserializer\u003c?\u003e valueDeser\u003d_valueDeserializer;\n  if (property !\u003d null) {\n    valueDeser\u003dfindConvertingContentDeserializer(ctxt,property,valueDeser);\n  }\n  final JavaType vt\u003d_containerType.getContentType();\n  if (valueDeser \u003d\u003d null) {\n    valueDeser\u003dctxt.findContextualValueDeserializer(vt,property);\n  }\n else {\n    valueDeser\u003dctxt.handleSecondaryContextualization(valueDeser,property,vt);\n  }\n  TypeDeserializer vtd\u003d_valueTypeDeserializer;\n  if (vtd !\u003d null) {\n    vtd\u003dvtd.forProperty(property);\n  }\n  Set\u003cString\u003e ignored\u003d_ignorableProperties;\n  AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (_neitherNull(intr,property)) {\n    AnnotatedMember member\u003dproperty.getMember();\n    if (member !\u003d null) {\n      JsonIgnoreProperties.Value ignorals\u003dintr.findPropertyIgnorals(member);\n      if (ignorals !\u003d null) {\n        Set\u003cString\u003e ignoresToAdd\u003dignorals.findIgnoredForDeserialization();\n        if (!ignoresToAdd.isEmpty()) {\n          ignored\u003d(ignored \u003d\u003d null) ? new HashSet\u003cString\u003e() : new HashSet\u003cString\u003e(ignored);\n          for (          String str : ignoresToAdd) {\n            ignored.add(str);\n          }\n        }\n      }\n    }\n  }\n  return withResolved(keyDeser,vtd,valueDeser,findContentNullProvider(ctxt,property,valueDeser),ignored);\n}",
    "begin_line": 243,
    "end_line": 289,
    "comment": "/** \n * Method called to finalize setup of this deserializer, when it is known for which property deserializer is needed for.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.getContentDeserializer#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.getContentDeserializer()",
    "snippet": "@Override public JsonDeserializer\u003cObject\u003e getContentDeserializer(){\n  return _valueDeserializer;\n}",
    "begin_line": 298,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.getValueInstantiator#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.getValueInstantiator()",
    "snippet": "@Override public ValueInstantiator getValueInstantiator(){\n  return _valueInstantiator;\n}",
    "begin_line": 303,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.isCachable#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return (_valueDeserializer \u003d\u003d null) \u0026\u0026 (_keyDeserializer \u003d\u003d null) \u0026\u0026 (_valueTypeDeserializer \u003d\u003d null)\u0026\u0026 (_ignorableProperties \u003d\u003d null);\n}",
    "begin_line": 327,
    "end_line": 334,
    "comment": "/** \n * Turns out that these are expensive enough to create so that caching does make sense. \u003cp\u003e IMPORTANT: but, note, that instances CAN NOT BE CACHED if there is a value type deserializer; this caused an issue with 2.4.4 of JAXB Annotations (failing a test). It is also possible that some other settings could make deserializers un-cacheable; but on the other hand, caching can make a big positive difference with performance... so it\u0027s a hard choice.\n * @since 2.4.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.deserialize#338",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public Map\u003cObject,Object\u003e deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (_propertyBasedCreator !\u003d null) {\n    return _deserializeUsingCreator(p,ctxt);\n  }\n  if (_delegateDeserializer !\u003d null) {\n    return (Map\u003cObject,Object\u003e)_valueInstantiator.createUsingDelegate(ctxt,_delegateDeserializer.deserialize(p,ctxt));\n  }\n  if (!_hasDefaultCreator) {\n    return (Map\u003cObject,Object\u003e)ctxt.handleMissingInstantiator(getMapClass(),getValueInstantiator(),p,\"no default constructor found\");\n  }\n  JsonToken t\u003dp.getCurrentToken();\n  if (t !\u003d JsonToken.START_OBJECT \u0026\u0026 t !\u003d JsonToken.FIELD_NAME \u0026\u0026 t !\u003d JsonToken.END_OBJECT) {\n    if (t \u003d\u003d JsonToken.VALUE_STRING) {\n      return (Map\u003cObject,Object\u003e)_valueInstantiator.createFromString(ctxt,p.getText());\n    }\n    return _deserializeFromEmpty(p,ctxt);\n  }\n  final Map\u003cObject,Object\u003e result\u003d(Map\u003cObject,Object\u003e)_valueInstantiator.createUsingDefault(ctxt);\n  if (_standardStringKey) {\n    _readAndBindStringKeyMap(p,ctxt,result);\n    return result;\n  }\n  _readAndBind(p,ctxt,result);\n  return result;\n}",
    "begin_line": 338,
    "end_line": 369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.deserialize#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public Map\u003cObject,Object\u003e deserialize(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e result) throws IOException {\n  p.setCurrentValue(result);\n  JsonToken t\u003dp.getCurrentToken();\n  if (t !\u003d JsonToken.START_OBJECT \u0026\u0026 t !\u003d JsonToken.FIELD_NAME) {\n    return (Map\u003cObject,Object\u003e)ctxt.handleUnexpectedToken(getMapClass(),p);\n  }\n  if (_standardStringKey) {\n    _readAndUpdateStringKeyMap(p,ctxt,result);\n    return result;\n  }\n  _readAndUpdate(p,ctxt,result);\n  return result;\n}",
    "begin_line": 373,
    "end_line": 392,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.deserializeWithType#395",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return typeDeserializer.deserializeTypedFromObject(p,ctxt);\n}",
    "begin_line": 395,
    "end_line": 401,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.getMapClass#410",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.getMapClass()",
    "snippet": "@SuppressWarnings(\"unchecked\") public final Class\u003c?\u003e getMapClass(){\n  return (Class\u003cMap\u003cObject,Object\u003e\u003e)_containerType.getRawClass();\n}",
    "begin_line": 410,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.getValueType#412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.getValueType()",
    "snippet": "@Override public JavaType getValueType(){\n  return _containerType;\n}",
    "begin_line": 412,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._readAndBind#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBind(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected final void _readAndBind(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e result) throws IOException {\n  final KeyDeserializer keyDes\u003d_keyDeserializer;\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  MapReferringAccumulator referringAccumulator\u003dnull;\n  boolean useObjectId\u003dvalueDes.getObjectIdReader() !\u003d null;\n  if (useObjectId) {\n    referringAccumulator\u003dnew MapReferringAccumulator(_containerType.getContentType().getRawClass(),result);\n  }\n  String keyStr;\n  if (p.isExpectedStartObjectToken()) {\n    keyStr\u003dp.nextFieldName();\n  }\n else {\n    JsonToken t\u003dp.getCurrentToken();\n    if (t !\u003d JsonToken.FIELD_NAME) {\n      if (t \u003d\u003d JsonToken.END_OBJECT) {\n        return;\n      }\n      ctxt.reportWrongTokenException(this,JsonToken.FIELD_NAME,null);\n    }\n    keyStr\u003dp.getCurrentName();\n  }\n  for (; keyStr !\u003d null; keyStr\u003dp.nextFieldName()) {\n    Object key\u003dkeyDes.deserializeKey(keyStr,ctxt);\n    JsonToken t\u003dp.nextToken();\n    if (_ignorableProperties !\u003d null \u0026\u0026 _ignorableProperties.contains(keyStr)) {\n      p.skipChildren();\n      continue;\n    }\n    try {\n      Object value;\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        value\u003d_nullProvider.getNullValue(ctxt);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      if (useObjectId) {\n        referringAccumulator.put(key,value);\n      }\n else {\n        result.put(key,value);\n      }\n    }\n catch (    UnresolvedForwardReference reference) {\n      handleUnresolvedReference(ctxt,referringAccumulator,key,reference);\n    }\ncatch (    Exception e) {\n      wrapAndThrow(e,result,keyStr);\n    }\n  }\n}",
    "begin_line": 420,
    "end_line": 480,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._readAndBindStringKeyMap#487",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndBindStringKeyMap(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected final void _readAndBindStringKeyMap(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e result) throws IOException {\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  MapReferringAccumulator referringAccumulator\u003dnull;\n  boolean useObjectId\u003d(valueDes.getObjectIdReader() !\u003d null);\n  if (useObjectId) {\n    referringAccumulator\u003dnew MapReferringAccumulator(_containerType.getContentType().getRawClass(),result);\n  }\n  String key;\n  if (p.isExpectedStartObjectToken()) {\n    key\u003dp.nextFieldName();\n  }\n else {\n    JsonToken t\u003dp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\n      return;\n    }\n    if (t !\u003d JsonToken.FIELD_NAME) {\n      ctxt.reportWrongTokenException(this,JsonToken.FIELD_NAME,null);\n    }\n    key\u003dp.getCurrentName();\n  }\n  for (; key !\u003d null; key\u003dp.nextFieldName()) {\n    JsonToken t\u003dp.nextToken();\n    if (_ignorableProperties !\u003d null \u0026\u0026 _ignorableProperties.contains(key)) {\n      p.skipChildren();\n      continue;\n    }\n    try {\n      Object value;\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        value\u003d_nullProvider.getNullValue(ctxt);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      if (useObjectId) {\n        referringAccumulator.put(key,value);\n      }\n else {\n        result.put(key,value);\n      }\n    }\n catch (    UnresolvedForwardReference reference) {\n      handleUnresolvedReference(ctxt,referringAccumulator,key,reference);\n    }\ncatch (    Exception e) {\n      wrapAndThrow(e,result,key);\n    }\n  }\n}",
    "begin_line": 487,
    "end_line": 543,
    "comment": "/** \n * Optimized method used when keys can be deserialized as plain old {@link java.lang.String}s, and there is no custom deserialized specified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._deserializeUsingCreator#546",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._deserializeUsingCreator(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") public Map\u003cObject,Object\u003e _deserializeUsingCreator(JsonParser p,DeserializationContext ctxt) throws IOException {\n  final PropertyBasedCreator creator\u003d_propertyBasedCreator;\n  PropertyValueBuffer buffer\u003dcreator.startBuilding(p,ctxt,null);\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  String key;\n  if (p.isExpectedStartObjectToken()) {\n    key\u003dp.nextFieldName();\n  }\n else   if (p.hasToken(JsonToken.FIELD_NAME)) {\n    key\u003dp.getCurrentName();\n  }\n else {\n    key\u003dnull;\n  }\n  for (; key !\u003d null; key\u003dp.nextFieldName()) {\n    JsonToken t\u003dp.nextToken();\n    if (_ignorableProperties !\u003d null \u0026\u0026 _ignorableProperties.contains(key)) {\n      p.skipChildren();\n      continue;\n    }\n    SettableBeanProperty prop\u003dcreator.findCreatorProperty(key);\n    if (prop !\u003d null) {\n      if (buffer.assignParameter(prop,prop.deserialize(p,ctxt))) {\n        p.nextToken();\n        Map\u003cObject,Object\u003e result;\n        try {\n          result\u003d(Map\u003cObject,Object\u003e)creator.build(ctxt,buffer);\n        }\n catch (        Exception e) {\n          return wrapAndThrow(e,_containerType.getRawClass(),key);\n        }\n        _readAndBind(p,ctxt,result);\n        return result;\n      }\n      continue;\n    }\n    Object actualKey\u003d_keyDeserializer.deserializeKey(key,ctxt);\n    Object value;\n    try {\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        value\u003d_nullProvider.getNullValue(ctxt);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n    }\n catch (    Exception e) {\n      wrapAndThrow(e,_containerType.getRawClass(),key);\n      return null;\n    }\n    buffer.bufferMapProperty(actualKey,value);\n  }\n  try {\n    return (Map\u003cObject,Object\u003e)creator.build(ctxt,buffer);\n  }\n catch (  Exception e) {\n    wrapAndThrow(e,_containerType.getRawClass(),key);\n    return null;\n  }\n}",
    "begin_line": 546,
    "end_line": 616,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._readAndUpdate#627",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndUpdate(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected final void _readAndUpdate(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e result) throws IOException {\n  final KeyDeserializer keyDes\u003d_keyDeserializer;\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  String keyStr;\n  if (p.isExpectedStartObjectToken()) {\n    keyStr\u003dp.nextFieldName();\n  }\n else {\n    JsonToken t\u003dp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\n      return;\n    }\n    if (t !\u003d JsonToken.FIELD_NAME) {\n      ctxt.reportWrongTokenException(this,JsonToken.FIELD_NAME,null);\n    }\n    keyStr\u003dp.getCurrentName();\n  }\n  for (; keyStr !\u003d null; keyStr\u003dp.nextFieldName()) {\n    Object key\u003dkeyDes.deserializeKey(keyStr,ctxt);\n    JsonToken t\u003dp.nextToken();\n    if (_ignorableProperties !\u003d null \u0026\u0026 _ignorableProperties.contains(keyStr)) {\n      p.skipChildren();\n      continue;\n    }\n    try {\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        result.put(key,_nullProvider.getNullValue(ctxt));\n        continue;\n      }\n      Object old\u003dresult.get(key);\n      Object value;\n      if (old !\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt,old);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      if (value !\u003d old) {\n        result.put(key,value);\n      }\n    }\n catch (    Exception e) {\n      wrapAndThrow(e,result,keyStr);\n    }\n  }\n}",
    "begin_line": 627,
    "end_line": 684,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer._readAndUpdateStringKeyMap#693",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer._readAndUpdateStringKeyMap(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected final void _readAndUpdateStringKeyMap(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e result) throws IOException {\n  final JsonDeserializer\u003cObject\u003e valueDes\u003d_valueDeserializer;\n  final TypeDeserializer typeDeser\u003d_valueTypeDeserializer;\n  String key;\n  if (p.isExpectedStartObjectToken()) {\n    key\u003dp.nextFieldName();\n  }\n else {\n    JsonToken t\u003dp.getCurrentToken();\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\n      return;\n    }\n    if (t !\u003d JsonToken.FIELD_NAME) {\n      ctxt.reportWrongTokenException(this,JsonToken.FIELD_NAME,null);\n    }\n    key\u003dp.getCurrentName();\n  }\n  for (; key !\u003d null; key\u003dp.nextFieldName()) {\n    JsonToken t\u003dp.nextToken();\n    if (_ignorableProperties !\u003d null \u0026\u0026 _ignorableProperties.contains(key)) {\n      p.skipChildren();\n      continue;\n    }\n    try {\n      if (t \u003d\u003d JsonToken.VALUE_NULL) {\n        if (_skipNullValues) {\n          continue;\n        }\n        result.put(key,_nullProvider.getNullValue(ctxt));\n        continue;\n      }\n      Object old\u003dresult.get(key);\n      Object value;\n      if (old !\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt,old);\n      }\n else       if (typeDeser \u003d\u003d null) {\n        value\u003dvalueDes.deserialize(p,ctxt);\n      }\n else {\n        value\u003dvalueDes.deserializeWithType(p,ctxt,typeDeser);\n      }\n      if (value !\u003d old) {\n        result.put(key,value);\n      }\n    }\n catch (    Exception e) {\n      wrapAndThrow(e,result,key);\n    }\n  }\n}",
    "begin_line": 693,
    "end_line": 747,
    "comment": "/** \n * Optimized method used when keys can be deserialized as plain old {@link java.lang.String}s, and there is no custom deserialized specified.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapDeserializer.handleUnresolvedReference#755",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.handleUnresolvedReference(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferringAccumulator, java.lang.Object, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference)",
    "snippet": "private void handleUnresolvedReference(DeserializationContext ctxt,MapReferringAccumulator accumulator,Object key,UnresolvedForwardReference reference) throws JsonMappingException {\n  if (accumulator \u003d\u003d null) {\n    ctxt.reportInputMismatch(this,\"Unresolved forward reference but no identity info: \" + reference);\n  }\n  Referring referring\u003daccumulator.handleUnresolvedReference(reference,key);\n  reference.getRoid().appendReferring(referring);\n}",
    "begin_line": 755,
    "end_line": 766,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferringAccumulator.MapReferringAccumulator#776",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferringAccumulator(java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "public MapReferringAccumulator(Class\u003c?\u003e valueType,Map\u003cObject,Object\u003e result){\n  _valueType\u003dvalueType;\n  _result\u003dresult;\n}",
    "begin_line": 776,
    "end_line": 779,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferringAccumulator.put#781",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.put(java.lang.Object, java.lang.Object)",
    "snippet": "public void put(Object key,Object value){\n  if (_accumulator.isEmpty()) {\n    _result.put(key,value);\n  }\n else {\n    MapReferring ref\u003d_accumulator.get(_accumulator.size() - 1);\n    ref.next.put(key,value);\n  }\n}",
    "begin_line": 781,
    "end_line": 789,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferringAccumulator.handleUnresolvedReference#791",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.handleUnresolvedReference(com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, java.lang.Object)",
    "snippet": "public Referring handleUnresolvedReference(UnresolvedForwardReference reference,Object key){\n  MapReferring id\u003dnew MapReferring(this,reference,_valueType,key);\n  _accumulator.add(id);\n  return id;\n}",
    "begin_line": 791,
    "end_line": 796,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferringAccumulator.resolveForwardReference#798",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.resolveForwardReference(java.lang.Object, java.lang.Object)",
    "snippet": "public void resolveForwardReference(Object id,Object value) throws IOException {\n  Iterator\u003cMapReferring\u003e iterator\u003d_accumulator.iterator();\n  Map\u003cObject,Object\u003e previous\u003d_result;\n  while (iterator.hasNext()) {\n    MapReferring ref\u003diterator.next();\n    if (ref.hasId(id)) {\n      iterator.remove();\n      previous.put(ref.key,value);\n      previous.putAll(ref.next);\n      return;\n    }\n    previous\u003dref.next;\n  }\n  throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id + \"] that wasn\u0027t previously seen as unresolved.\");\n}",
    "begin_line": 798,
    "end_line": 818,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferring.MapReferring#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferring(com.fasterxml.jackson.databind.deser.std.MapDeserializer.MapReferringAccumulator, com.fasterxml.jackson.databind.deser.UnresolvedForwardReference, java.lang.Class\u003c?\u003e, java.lang.Object)",
    "snippet": "MapReferring(MapReferringAccumulator parent,UnresolvedForwardReference ref,Class\u003c?\u003e valueType,Object key){\n  super(ref,valueType);\n  _parent\u003dparent;\n  this.key\u003dkey;\n}",
    "begin_line": 832,
    "end_line": 838,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapReferring.handleResolvedForwardReference#841",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/MapDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.MapDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.MapDeserializer.handleResolvedForwardReference(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void handleResolvedForwardReference(Object id,Object value) throws IOException {\n  _parent.resolveForwardReference(id,value);\n}",
    "begin_line": 841,
    "end_line": 843,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberDeserializers.find#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.find(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public static JsonDeserializer\u003c?\u003e find(Class\u003c?\u003e rawType,String clsName){\n  if (rawType.isPrimitive()) {\n    if (rawType \u003d\u003d Integer.TYPE) {\n      return IntegerDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Boolean.TYPE) {\n      return BooleanDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Long.TYPE) {\n      return LongDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Double.TYPE) {\n      return DoubleDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Character.TYPE) {\n      return CharacterDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Byte.TYPE) {\n      return ByteDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Short.TYPE) {\n      return ShortDeserializer.primitiveInstance;\n    }\n    if (rawType \u003d\u003d Float.TYPE) {\n      return FloatDeserializer.primitiveInstance;\n    }\n  }\n else   if (_classNames.contains(clsName)) {\n    if (rawType \u003d\u003d Integer.class) {\n      return IntegerDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Boolean.class) {\n      return BooleanDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Long.class) {\n      return LongDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Double.class) {\n      return DoubleDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Character.class) {\n      return CharacterDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Byte.class) {\n      return ByteDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Short.class) {\n      return ShortDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Float.class) {\n      return FloatDeserializer.wrapperInstance;\n    }\n    if (rawType \u003d\u003d Number.class) {\n      return NumberDeserializer.instance;\n    }\n    if (rawType \u003d\u003d BigDecimal.class) {\n      return BigDecimalDeserializer.instance;\n    }\n    if (rawType \u003d\u003d BigInteger.class) {\n      return BigIntegerDeserializer.instance;\n    }\n  }\n else {\n    return null;\n  }\n  throw new IllegalArgumentException(\"Internal error: can\u0027t find deserializer for \" + rawType.getName());\n}",
    "begin_line": 44,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrimitiveOrWrapperDeserializer.PrimitiveOrWrapperDeserializer#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.PrimitiveOrWrapperDeserializer(java.lang.Class\u003cT\u003e, T, T)",
    "snippet": "protected PrimitiveOrWrapperDeserializer(Class\u003cT\u003e vc,T nvl,T empty){\n  super(vc);\n  _nullValue\u003dnvl;\n  _emptyValue\u003dempty;\n  _primitive\u003dvc.isPrimitive();\n}",
    "begin_line": 131,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrimitiveOrWrapperDeserializer.getNullAccessPattern#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.getNullAccessPattern()",
    "snippet": "@Override public AccessPattern getNullAccessPattern(){\n  if (_primitive) {\n    return AccessPattern.DYNAMIC;\n  }\n  if (_nullValue \u003d\u003d null) {\n    return AccessPattern.ALWAYS_NULL;\n  }\n  return AccessPattern.CONSTANT;\n}",
    "begin_line": 139,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrimitiveOrWrapperDeserializer.getNullValue#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.getNullValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public final T getNullValue(DeserializationContext ctxt) throws JsonMappingException {\n  if (_primitive \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n    ctxt.reportInputMismatch(this,\"Cannot map `null` into type %s (set DeserializationConfig.DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES to \u0027false\u0027 to allow)\",handledType().toString());\n  }\n  return _nullValue;\n}",
    "begin_line": 152,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PrimitiveOrWrapperDeserializer.getEmptyValue#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  return _emptyValue;\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanDeserializer.BooleanDeserializer#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BooleanDeserializer(java.lang.Class\u003cjava.lang.Boolean\u003e, java.lang.Boolean)",
    "snippet": "public BooleanDeserializer(Class\u003cBoolean\u003e cls,Boolean nvl){\n  super(cls,nvl,Boolean.FALSE);\n}",
    "begin_line": 184,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanDeserializer.deserialize#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Boolean deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_TRUE) {\n    return Boolean.TRUE;\n  }\n  if (t \u003d\u003d JsonToken.VALUE_FALSE) {\n    return Boolean.FALSE;\n  }\n  return _parseBoolean(p,ctxt);\n}",
    "begin_line": 190,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanDeserializer.deserializeWithType#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Boolean deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_TRUE) {\n    return Boolean.TRUE;\n  }\n  if (t \u003d\u003d JsonToken.VALUE_FALSE) {\n    return Boolean.FALSE;\n  }\n  return _parseBoolean(p,ctxt);\n}",
    "begin_line": 205,
    "end_line": 217,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanDeserializer._parseBoolean#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseBoolean(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final Boolean _parseBoolean(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_NULL) {\n    return (Boolean)_coerceNullToken(ctxt,_primitive);\n  }\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    return _deserializeFromArray(p,ctxt);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT) {\n    return Boolean.valueOf(_parseBooleanFromInt(p,ctxt));\n  }\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    if (\"true\".equals(text) || \"True\".equals(text)) {\n      _verifyStringForScalarCoercion(ctxt,text);\n      return Boolean.TRUE;\n    }\n    if (\"false\".equals(text) || \"False\".equals(text)) {\n      _verifyStringForScalarCoercion(ctxt,text);\n      return Boolean.FALSE;\n    }\n    if (text.length() \u003d\u003d 0) {\n      return (Boolean)_coerceEmptyString(ctxt,_primitive);\n    }\n    if (_hasTextualNull(text)) {\n      return (Boolean)_coerceTextualNull(ctxt,_primitive);\n    }\n    return (Boolean)ctxt.handleWeirdStringValue(_valueClass,text,\"only \\\"true\\\" or \\\"false\\\" recognized\");\n  }\n  if (t \u003d\u003d JsonToken.VALUE_TRUE) {\n    return Boolean.TRUE;\n  }\n  if (t \u003d\u003d JsonToken.VALUE_FALSE) {\n    return Boolean.FALSE;\n  }\n  return (Boolean)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 219,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteDeserializer.ByteDeserializer#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ByteDeserializer(java.lang.Class\u003cjava.lang.Byte\u003e, java.lang.Byte)",
    "snippet": "public ByteDeserializer(Class\u003cByte\u003e cls,Byte nvl){\n  super(cls,nvl,(byte)0);\n}",
    "begin_line": 275,
    "end_line": 278,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteDeserializer.deserialize#281",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Byte deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getByteValue();\n  }\n  return _parseByte(p,ctxt);\n}",
    "begin_line": 281,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ByteDeserializer._parseByte#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseByte(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Byte _parseByte(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    if (_hasTextualNull(text)) {\n      return (Byte)_coerceTextualNull(ctxt,_primitive);\n    }\n    int len\u003dtext.length();\n    if (len \u003d\u003d 0) {\n      return (Byte)_coerceEmptyString(ctxt,_primitive);\n    }\n    _verifyStringForScalarCoercion(ctxt,text);\n    int value;\n    try {\n      value\u003dNumberInput.parseInt(text);\n    }\n catch (    IllegalArgumentException iae) {\n      return (Byte)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Byte value\");\n    }\n    if (_byteOverflow(value)) {\n      return (Byte)ctxt.handleWeirdStringValue(_valueClass,text,\"overflow, value cannot be represented as 8-bit value\");\n    }\n    return Byte.valueOf((byte)value);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n    if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n      _failDoubleToIntCoercion(p,ctxt,\"Byte\");\n    }\n    return p.getByteValue();\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NULL) {\n    return (Byte)_coerceNullToken(ctxt,_primitive);\n  }\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    return _deserializeFromArray(p,ctxt);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT) {\n    return p.getByteValue();\n  }\n  return (Byte)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 289,
    "end_line": 335,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortDeserializer.ShortDeserializer#347",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.ShortDeserializer(java.lang.Class\u003cjava.lang.Short\u003e, java.lang.Short)",
    "snippet": "public ShortDeserializer(Class\u003cShort\u003e cls,Short nvl){\n  super(cls,nvl,(short)0);\n}",
    "begin_line": 347,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortDeserializer.deserialize#353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Short deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  return _parseShort(p,ctxt);\n}",
    "begin_line": 353,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortDeserializer._parseShort#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseShort(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Short _parseShort(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT) {\n    return p.getShortValue();\n  }\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    int len\u003dtext.length();\n    if (len \u003d\u003d 0) {\n      return (Short)_coerceEmptyString(ctxt,_primitive);\n    }\n    if (_hasTextualNull(text)) {\n      return (Short)_coerceTextualNull(ctxt,_primitive);\n    }\n    _verifyStringForScalarCoercion(ctxt,text);\n    int value;\n    try {\n      value\u003dNumberInput.parseInt(text);\n    }\n catch (    IllegalArgumentException iae) {\n      return (Short)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Short value\");\n    }\n    if (_shortOverflow(value)) {\n      return (Short)ctxt.handleWeirdStringValue(_valueClass,text,\"overflow, value cannot be represented as 16-bit value\");\n    }\n    return Short.valueOf((short)value);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n    if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n      _failDoubleToIntCoercion(p,ctxt,\"Short\");\n    }\n    return p.getShortValue();\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NULL) {\n    return (Short)_coerceNullToken(ctxt,_primitive);\n  }\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    return _deserializeFromArray(p,ctxt);\n  }\n  return (Short)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 359,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterDeserializer.CharacterDeserializer#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.CharacterDeserializer(java.lang.Class\u003cjava.lang.Character\u003e, java.lang.Character)",
    "snippet": "public CharacterDeserializer(Class\u003cCharacter\u003e cls,Character nvl){\n  super(cls,nvl,\u0027\\0\u0027);\n}",
    "begin_line": 414,
    "end_line": 417,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CharacterDeserializer.deserialize#420",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Character deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:    _verifyNumberForScalarCoercion(ctxt,p);\n  int value\u003dp.getIntValue();\nif (value \u003e\u003d 0 \u0026\u0026 value \u003c\u003d 0xFFFF) {\n  return Character.valueOf((char)value);\n}\nbreak;\ncase JsonTokenId.ID_STRING:String text\u003dp.getText();\nif (text.length() \u003d\u003d 1) {\nreturn Character.valueOf(text.charAt(0));\n}\nif (text.length() \u003d\u003d 0) {\nreturn (Character)_coerceEmptyString(ctxt,_primitive);\n}\nbreak;\ncase JsonTokenId.ID_NULL:return (Character)_coerceNullToken(ctxt,_primitive);\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\ndefault:}\nreturn (Character)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 420,
    "end_line": 449,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerDeserializer.IntegerDeserializer#461",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.IntegerDeserializer(java.lang.Class\u003cjava.lang.Integer\u003e, java.lang.Integer)",
    "snippet": "public IntegerDeserializer(Class\u003cInteger\u003e cls,Integer nvl){\n  super(cls,nvl,0);\n}",
    "begin_line": 461,
    "end_line": 463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerDeserializer.isCachable#467",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return true;\n}",
    "begin_line": 467,
    "end_line": 467,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerDeserializer.deserialize#470",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Integer deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getIntValue();\n  }\n  return _parseInteger(p,ctxt);\n}",
    "begin_line": 470,
    "end_line": 475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerDeserializer.deserializeWithType#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Integer deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getIntValue();\n  }\n  return _parseInteger(p,ctxt);\n}",
    "begin_line": 480,
    "end_line": 487,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerDeserializer._parseInteger#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseInteger(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final Integer _parseInteger(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:    return Integer.valueOf(p.getIntValue());\ncase JsonTokenId.ID_NUMBER_FLOAT:  if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n    _failDoubleToIntCoercion(p,ctxt,\"Integer\");\n  }\nreturn Integer.valueOf(p.getValueAsInt());\ncase JsonTokenId.ID_STRING:String text\u003dp.getText().trim();\nint len\u003dtext.length();\nif (len \u003d\u003d 0) {\nreturn (Integer)_coerceEmptyString(ctxt,_primitive);\n}\nif (_hasTextualNull(text)) {\nreturn (Integer)_coerceTextualNull(ctxt,_primitive);\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nif (len \u003e 9) {\nlong l\u003dLong.parseLong(text);\nif (_intOverflow(l)) {\nreturn (Integer)ctxt.handleWeirdStringValue(_valueClass,text,String.format(\"Overflow: numeric value (%s) out of range of Integer (%d - %d)\",text,Integer.MIN_VALUE,Integer.MAX_VALUE));\n}\nreturn Integer.valueOf((int)l);\n}\nreturn Integer.valueOf(NumberInput.parseInt(text));\n}\n catch (IllegalArgumentException iae) {\nreturn (Integer)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Integer value\");\n}\ncase JsonTokenId.ID_NULL:return (Integer)_coerceNullToken(ctxt,_primitive);\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\n}\nreturn (Integer)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 489,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongDeserializer.LongDeserializer#544",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.LongDeserializer(java.lang.Class\u003cjava.lang.Long\u003e, java.lang.Long)",
    "snippet": "public LongDeserializer(Class\u003cLong\u003e cls,Long nvl){\n  super(cls,nvl,0L);\n}",
    "begin_line": 544,
    "end_line": 546,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongDeserializer.isCachable#550",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return true;\n}",
    "begin_line": 550,
    "end_line": 550,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongDeserializer.deserialize#553",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Long deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getLongValue();\n  }\n  return _parseLong(p,ctxt);\n}",
    "begin_line": 553,
    "end_line": 558,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongDeserializer._parseLong#560",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseLong(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final Long _parseLong(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:    return p.getLongValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:  if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n    _failDoubleToIntCoercion(p,ctxt,\"Long\");\n  }\nreturn p.getValueAsLong();\ncase JsonTokenId.ID_STRING:String text\u003dp.getText().trim();\nif (text.length() \u003d\u003d 0) {\nreturn (Long)_coerceEmptyString(ctxt,_primitive);\n}\nif (_hasTextualNull(text)) {\nreturn (Long)_coerceTextualNull(ctxt,_primitive);\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nreturn Long.valueOf(NumberInput.parseLong(text));\n}\n catch (IllegalArgumentException iae) {\n}\nreturn (Long)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Long value\");\ncase JsonTokenId.ID_NULL:return (Long)_coerceNullToken(ctxt,_primitive);\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\n}\nreturn (Long)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 560,
    "end_line": 594,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatDeserializer.FloatDeserializer#606",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.FloatDeserializer(java.lang.Class\u003cjava.lang.Float\u003e, java.lang.Float)",
    "snippet": "public FloatDeserializer(Class\u003cFloat\u003e cls,Float nvl){\n  super(cls,nvl,0.f);\n}",
    "begin_line": 606,
    "end_line": 608,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatDeserializer.deserialize#611",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Float deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  return _parseFloat(p,ctxt);\n}",
    "begin_line": 611,
    "end_line": 614,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatDeserializer._parseFloat#616",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseFloat(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final Float _parseFloat(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT || t \u003d\u003d JsonToken.VALUE_NUMBER_INT) {\n    return p.getFloatValue();\n  }\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    if ((text.length() \u003d\u003d 0)) {\n      return (Float)_coerceEmptyString(ctxt,_primitive);\n    }\n    if (_hasTextualNull(text)) {\n      return (Float)_coerceTextualNull(ctxt,_primitive);\n    }\nswitch (text.charAt(0)) {\ncase \u0027I\u0027:      if (_isPosInf(text)) {\n        return Float.POSITIVE_INFINITY;\n      }\n    break;\ncase \u0027N\u0027:  if (_isNaN(text)) {\n    return Float.NaN;\n  }\nbreak;\ncase \u0027-\u0027:if (_isNegInf(text)) {\nreturn Float.NEGATIVE_INFINITY;\n}\nbreak;\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nreturn Float.parseFloat(text);\n}\n catch (IllegalArgumentException iae) {\n}\nreturn (Float)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Float value\");\n}\nif (t \u003d\u003d JsonToken.VALUE_NULL) {\nreturn (Float)_coerceNullToken(ctxt,_primitive);\n}\nif (t \u003d\u003d JsonToken.START_ARRAY) {\nreturn _deserializeFromArray(p,ctxt);\n}\nreturn (Float)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 616,
    "end_line": 666,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleDeserializer.DoubleDeserializer#678",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.DoubleDeserializer(java.lang.Class\u003cjava.lang.Double\u003e, java.lang.Double)",
    "snippet": "public DoubleDeserializer(Class\u003cDouble\u003e cls,Double nvl){\n  super(cls,nvl,0.d);\n}",
    "begin_line": 678,
    "end_line": 680,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleDeserializer.deserialize#683",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Double deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  return _parseDouble(p,ctxt);\n}",
    "begin_line": 683,
    "end_line": 685,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleDeserializer.deserializeWithType#690",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Double deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return _parseDouble(p,ctxt);\n}",
    "begin_line": 690,
    "end_line": 694,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleDeserializer._parseDouble#696",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers._parseDouble(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final Double _parseDouble(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT || t \u003d\u003d JsonToken.VALUE_NUMBER_FLOAT) {\n    return p.getDoubleValue();\n  }\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    if ((text.length() \u003d\u003d 0)) {\n      return (Double)_coerceEmptyString(ctxt,_primitive);\n    }\n    if (_hasTextualNull(text)) {\n      return (Double)_coerceTextualNull(ctxt,_primitive);\n    }\nswitch (text.charAt(0)) {\ncase \u0027I\u0027:      if (_isPosInf(text)) {\n        return Double.POSITIVE_INFINITY;\n      }\n    break;\ncase \u0027N\u0027:  if (_isNaN(text)) {\n    return Double.NaN;\n  }\nbreak;\ncase \u0027-\u0027:if (_isNegInf(text)) {\nreturn Double.NEGATIVE_INFINITY;\n}\nbreak;\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nreturn parseDouble(text);\n}\n catch (IllegalArgumentException iae) {\n}\nreturn (Double)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid Double value\");\n}\nif (t \u003d\u003d JsonToken.VALUE_NULL) {\nreturn (Double)_coerceNullToken(ctxt,_primitive);\n}\nif (t \u003d\u003d JsonToken.START_ARRAY) {\nreturn _deserializeFromArray(p,ctxt);\n}\nreturn (Double)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 696,
    "end_line": 742,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberDeserializer.NumberDeserializer#762",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.NumberDeserializer()",
    "snippet": "public NumberDeserializer(){\n  super(Number.class);\n}",
    "begin_line": 762,
    "end_line": 764,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberDeserializer.deserialize#767",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:    if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n      return _coerceIntegral(p,ctxt);\n    }\n  return p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n  if (!p.isNaN()) {\n    return p.getDecimalValue();\n  }\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_STRING:String text\u003dp.getText().trim();\nif ((text.length() \u003d\u003d 0)) {\nreturn getNullValue(ctxt);\n}\nif (_hasTextualNull(text)) {\nreturn getNullValue(ctxt);\n}\nif (_isPosInf(text)) {\nreturn Double.POSITIVE_INFINITY;\n}\nif (_isNegInf(text)) {\nreturn Double.NEGATIVE_INFINITY;\n}\nif (_isNaN(text)) {\nreturn Double.NaN;\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nif (!_isIntNumber(text)) {\nif (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn new BigDecimal(text);\n}\nreturn Double.valueOf(text);\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\nreturn new BigInteger(text);\n}\nlong value\u003dLong.parseLong(text);\nif (!ctxt.isEnabled(DeserializationFeature.USE_LONG_FOR_INTS)) {\nif (value \u003c\u003d Integer.MAX_VALUE \u0026\u0026 value \u003e\u003d Integer.MIN_VALUE) {\nreturn Integer.valueOf((int)value);\n}\n}\nreturn Long.valueOf(value);\n}\n catch (IllegalArgumentException iae) {\nreturn ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid number\");\n}\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\n}\nreturn ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 767,
    "end_line": 834,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberDeserializer.deserializeWithType#843",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:case JsonTokenId.ID_NUMBER_FLOAT:case JsonTokenId.ID_STRING:    return deserialize(p,ctxt);\n}\nreturn typeDeserializer.deserializeTypedFromScalar(p,ctxt);\n}",
    "begin_line": 843,
    "end_line": 855,
    "comment": "/** \n * As mentioned in class Javadoc, there is additional complexity in handling potentially mixed type information here. Because of this, we must actually check for \"raw\" integers and doubles first, before calling type deserializer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigIntegerDeserializer.BigIntegerDeserializer#876",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigIntegerDeserializer()",
    "snippet": "public BigIntegerDeserializer(){\n  super(BigInteger.class);\n}",
    "begin_line": 876,
    "end_line": 876,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigIntegerDeserializer.getEmptyValue#879",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt){\n  return BigInteger.ZERO;\n}",
    "begin_line": 879,
    "end_line": 881,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigIntegerDeserializer.deserialize#885",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"incomplete-switch\") @Override public BigInteger deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:switch (p.getNumberType()) {\ncase INT:case LONG:case BIG_INTEGER:      return p.getBigIntegerValue();\n  }\nbreak;\ncase JsonTokenId.ID_NUMBER_FLOAT:if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n_failDoubleToIntCoercion(p,ctxt,\"java.math.BigInteger\");\n}\nreturn p.getDecimalValue().toBigInteger();\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\ncase JsonTokenId.ID_STRING:String text\u003dp.getText().trim();\nif (_isEmptyOrTextualNull(text)) {\n_verifyNullForScalarCoercion(ctxt,text);\nreturn getNullValue(ctxt);\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nreturn new BigInteger(text);\n}\n catch (IllegalArgumentException iae) {\n}\nreturn (BigInteger)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid representation\");\n}\nreturn (BigInteger)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 885,
    "end_line": 919,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigDecimalDeserializer.BigDecimalDeserializer#929",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.BigDecimalDeserializer()",
    "snippet": "public BigDecimalDeserializer(){\n  super(BigDecimal.class);\n}",
    "begin_line": 929,
    "end_line": 929,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigDecimalDeserializer.getEmptyValue#932",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt){\n  return BigDecimal.ZERO;\n}",
    "begin_line": 932,
    "end_line": 934,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BigDecimalDeserializer.deserialize#937",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/NumberDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.NumberDeserializers.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public BigDecimal deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_NUMBER_INT:case JsonTokenId.ID_NUMBER_FLOAT:    return p.getDecimalValue();\ncase JsonTokenId.ID_STRING:  String text\u003dp.getText().trim();\nif (_isEmptyOrTextualNull(text)) {\n  _verifyNullForScalarCoercion(ctxt,text);\n  return getNullValue(ctxt);\n}\n_verifyStringForScalarCoercion(ctxt,text);\ntry {\nreturn new BigDecimal(text);\n}\n catch (IllegalArgumentException iae) {\n}\nreturn (BigDecimal)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid representation\");\ncase JsonTokenId.ID_START_ARRAY:return _deserializeFromArray(p,ctxt);\n}\nreturn (BigDecimal)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 937,
    "end_line": 962,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.StdDeserializer#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.StdDeserializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected StdDeserializer(Class\u003c?\u003e vc){\n  _valueClass\u003dvc;\n}",
    "begin_line": 61,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.StdDeserializer#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.StdDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected StdDeserializer(JavaType valueType){\n  _valueClass\u003d(valueType \u003d\u003d null) ? Object.class : valueType.getRawClass();\n}",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.StdDeserializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.StdDeserializer(com.fasterxml.jackson.databind.deser.std.StdDeserializer\u003c?\u003e)",
    "snippet": "protected StdDeserializer(StdDeserializer\u003c?\u003e src){\n  _valueClass\u003dsrc._valueClass;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Copy-constructor for sub-classes to use, most often when creating new instances for  {@link com.fasterxml.jackson.databind.deser.ContextualDeserializer}.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.handledType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handledType()",
    "snippet": "@Override public Class\u003c?\u003e handledType(){\n  return _valueClass;\n}",
    "begin_line": 87,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.getValueClass#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.getValueClass()",
    "snippet": "@Deprecated public final Class\u003c?\u003e getValueClass(){\n  return _valueClass;\n}",
    "begin_line": 99,
    "end_line": 99,
    "comment": "/** \n * @deprecated Since 2.3 use {@link #handledType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.getValueType#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.getValueType()",
    "snippet": "public JavaType getValueType(){\n  return null;\n}",
    "begin_line": 106,
    "end_line": 106,
    "comment": "/** \n * Exact structured type this deserializer handles, if known. \u003cp\u003e Default implementation just returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.isDefaultDeserializer#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.isDefaultDeserializer(com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected boolean isDefaultDeserializer(JsonDeserializer\u003c?\u003e deserializer){\n  return ClassUtil.isJacksonStdImpl(deserializer);\n}",
    "begin_line": 114,
    "end_line": 116,
    "comment": "/** \n * Method that can be called to determine if given deserializer is the default deserializer Jackson uses; as opposed to a custom deserializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on deserializer class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.isDefaultKeyDeserializer#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.isDefaultKeyDeserializer(com.fasterxml.jackson.databind.KeyDeserializer)",
    "snippet": "protected boolean isDefaultKeyDeserializer(KeyDeserializer keyDeser){\n  return ClassUtil.isJacksonStdImpl(keyDeser);\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.deserializeWithType#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return typeDeserializer.deserializeTypedFromAny(p,ctxt);\n}",
    "begin_line": 134,
    "end_line": 137,
    "comment": "/** \n * Base implementation that does not assume specific type inclusion mechanism. Sub-classes are expected to override this method if they are to handle type information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseBooleanPrimitive#147",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBooleanPrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final boolean _parseBooleanPrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_TRUE)   return true;\n  if (t \u003d\u003d JsonToken.VALUE_FALSE)   return false;\n  if (t \u003d\u003d JsonToken.VALUE_NULL) {\n    _verifyNullForPrimitive(ctxt);\n    return false;\n  }\n  if (t \u003d\u003d JsonToken.VALUE_NUMBER_INT) {\n    return _parseBooleanFromInt(p,ctxt);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String text\u003dp.getText().trim();\n    if (\"true\".equals(text) || \"True\".equals(text)) {\n      return true;\n    }\n    if (\"false\".equals(text) || \"False\".equals(text)) {\n      return false;\n    }\n    if (_isEmptyOrTextualNull(text)) {\n      _verifyNullForPrimitiveCoercion(ctxt,text);\n      return false;\n    }\n    Boolean b\u003d(Boolean)ctxt.handleWeirdStringValue(_valueClass,text,\"only \\\"true\\\" or \\\"false\\\" recognized\");\n    return Boolean.TRUE.equals(b);\n  }\n  if (t \u003d\u003d JsonToken.START_ARRAY \u0026\u0026 ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n    p.nextToken();\n    final boolean parsed\u003d_parseBooleanPrimitive(p,ctxt);\n    _verifyEndArrayForSingle(p,ctxt);\n    return parsed;\n  }\n  return ((Boolean)ctxt.handleUnexpectedToken(_valueClass,p)).booleanValue();\n}",
    "begin_line": 147,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseBooleanFromInt#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBooleanFromInt(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected boolean _parseBooleanFromInt(JsonParser p,DeserializationContext ctxt) throws IOException {\n  _verifyNumberForScalarCoercion(ctxt,p);\n  return !\"0\".equals(p.getText());\n}",
    "begin_line": 190,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseBytePrimitive#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseBytePrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final byte _parseBytePrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  int value\u003d_parseIntPrimitive(p,ctxt);\n  if (_byteOverflow(value)) {\n    Number v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,String.valueOf(value),\"overflow, value cannot be represented as 8-bit value\");\n    return _nonNullNumber(v).byteValue();\n  }\n  return (byte)value;\n}",
    "begin_line": 203,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseShortPrimitive#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseShortPrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final short _parseShortPrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  int value\u003d_parseIntPrimitive(p,ctxt);\n  if (_shortOverflow(value)) {\n    Number v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,String.valueOf(value),\"overflow, value cannot be represented as 16-bit value\");\n    return _nonNullNumber(v).shortValue();\n  }\n  return (short)value;\n}",
    "begin_line": 216,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseIntPrimitive#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseIntPrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final int _parseIntPrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getIntValue();\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_STRING:    String text\u003dp.getText().trim();\n  if (_isEmptyOrTextualNull(text)) {\n    _verifyNullForPrimitiveCoercion(ctxt,text);\n    return 0;\n  }\nreturn _parseIntPrimitive(ctxt,text);\ncase JsonTokenId.ID_NUMBER_FLOAT:if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n_failDoubleToIntCoercion(p,ctxt,\"int\");\n}\nreturn p.getValueAsInt();\ncase JsonTokenId.ID_NULL:_verifyNullForPrimitive(ctxt);\nreturn 0;\ncase JsonTokenId.ID_START_ARRAY:if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\np.nextToken();\nfinal int parsed\u003d_parseIntPrimitive(p,ctxt);\n_verifyEndArrayForSingle(p,ctxt);\nreturn parsed;\n}\nbreak;\ndefault:}\nreturn ((Number)ctxt.handleUnexpectedToken(_valueClass,p)).intValue();\n}",
    "begin_line": 229,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseIntPrimitive#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseIntPrimitive(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final int _parseIntPrimitive(DeserializationContext ctxt,String text) throws IOException {\n  try {\n    if (text.length() \u003e 9) {\n      long l\u003dLong.parseLong(text);\n      if (_intOverflow(l)) {\n        Number v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,text,\"Overflow: numeric value (%s) out of range of int (%d -%d)\",text,Integer.MIN_VALUE,Integer.MAX_VALUE);\n        return _nonNullNumber(v).intValue();\n      }\n      return (int)l;\n    }\n    return NumberInput.parseInt(text);\n  }\n catch (  IllegalArgumentException iae) {\n    Number v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid int value\");\n    return _nonNullNumber(v).intValue();\n  }\n}",
    "begin_line": 268,
    "end_line": 287,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseLongPrimitive#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseLongPrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final long _parseLongPrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) {\n    return p.getLongValue();\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_STRING:    String text\u003dp.getText().trim();\n  if (_isEmptyOrTextualNull(text)) {\n    _verifyNullForPrimitiveCoercion(ctxt,text);\n    return 0L;\n  }\nreturn _parseLongPrimitive(ctxt,text);\ncase JsonTokenId.ID_NUMBER_FLOAT:if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {\n_failDoubleToIntCoercion(p,ctxt,\"long\");\n}\nreturn p.getValueAsLong();\ncase JsonTokenId.ID_NULL:_verifyNullForPrimitive(ctxt);\nreturn 0L;\ncase JsonTokenId.ID_START_ARRAY:if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\np.nextToken();\nfinal long parsed\u003d_parseLongPrimitive(p,ctxt);\n_verifyEndArrayForSingle(p,ctxt);\nreturn parsed;\n}\nbreak;\n}\nreturn ((Number)ctxt.handleUnexpectedToken(_valueClass,p)).longValue();\n}",
    "begin_line": 289,
    "end_line": 321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseLongPrimitive#326",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseLongPrimitive(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final long _parseLongPrimitive(DeserializationContext ctxt,String text) throws IOException {\n  try {\n    return NumberInput.parseLong(text);\n  }\n catch (  IllegalArgumentException iae) {\n  }\n{\n    Number v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid long value\");\n    return _nonNullNumber(v).longValue();\n  }\n}",
    "begin_line": 326,
    "end_line": 336,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseFloatPrimitive#338",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseFloatPrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final float _parseFloatPrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT)) {\n    return p.getFloatValue();\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_STRING:    String text\u003dp.getText().trim();\n  if (_isEmptyOrTextualNull(text)) {\n    _verifyNullForPrimitiveCoercion(ctxt,text);\n    return 0.0f;\n  }\nreturn _parseFloatPrimitive(ctxt,text);\ncase JsonTokenId.ID_NUMBER_INT:return p.getFloatValue();\ncase JsonTokenId.ID_NULL:_verifyNullForPrimitive(ctxt);\nreturn 0.0f;\ncase JsonTokenId.ID_START_ARRAY:if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\np.nextToken();\nfinal float parsed\u003d_parseFloatPrimitive(p,ctxt);\n_verifyEndArrayForSingle(p,ctxt);\nreturn parsed;\n}\nbreak;\n}\nreturn ((Number)ctxt.handleUnexpectedToken(_valueClass,p)).floatValue();\n}",
    "begin_line": 338,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseFloatPrimitive#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseFloatPrimitive(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final float _parseFloatPrimitive(DeserializationContext ctxt,String text) throws IOException {\nswitch (text.charAt(0)) {\ncase \u0027I\u0027:    if (_isPosInf(text)) {\n      return Float.POSITIVE_INFINITY;\n    }\n  break;\ncase \u0027N\u0027:if (_isNaN(text)) {\n  return Float.NaN;\n}\nbreak;\ncase \u0027-\u0027:if (_isNegInf(text)) {\nreturn Float.NEGATIVE_INFINITY;\n}\nbreak;\n}\ntry {\nreturn Float.parseFloat(text);\n}\n catch (IllegalArgumentException iae) {\n}\nNumber v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid float value\");\nreturn _nonNullNumber(v).floatValue();\n}",
    "begin_line": 373,
    "end_line": 397,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseDoublePrimitive#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDoublePrimitive(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final double _parseDoublePrimitive(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT)) {\n    return p.getDoubleValue();\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_STRING:    String text\u003dp.getText().trim();\n  if (_isEmptyOrTextualNull(text)) {\n    _verifyNullForPrimitiveCoercion(ctxt,text);\n    return 0.0;\n  }\nreturn _parseDoublePrimitive(ctxt,text);\ncase JsonTokenId.ID_NUMBER_INT:return p.getDoubleValue();\ncase JsonTokenId.ID_NULL:_verifyNullForPrimitive(ctxt);\nreturn 0.0;\ncase JsonTokenId.ID_START_ARRAY:if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\np.nextToken();\nfinal double parsed\u003d_parseDoublePrimitive(p,ctxt);\n_verifyEndArrayForSingle(p,ctxt);\nreturn parsed;\n}\nbreak;\n}\nreturn ((Number)ctxt.handleUnexpectedToken(_valueClass,p)).doubleValue();\n}",
    "begin_line": 399,
    "end_line": 429,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseDoublePrimitive#434",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDoublePrimitive(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final double _parseDoublePrimitive(DeserializationContext ctxt,String text) throws IOException {\nswitch (text.charAt(0)) {\ncase \u0027I\u0027:    if (_isPosInf(text)) {\n      return Double.POSITIVE_INFINITY;\n    }\n  break;\ncase \u0027N\u0027:if (_isNaN(text)) {\n  return Double.NaN;\n}\nbreak;\ncase \u0027-\u0027:if (_isNegInf(text)) {\nreturn Double.NEGATIVE_INFINITY;\n}\nbreak;\n}\ntry {\nreturn parseDouble(text);\n}\n catch (IllegalArgumentException iae) {\n}\nNumber v\u003d(Number)ctxt.handleWeirdStringValue(_valueClass,text,\"not a valid double value (as String to convert)\");\nreturn _nonNullNumber(v).doubleValue();\n}",
    "begin_line": 434,
    "end_line": 460,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseDate#462",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDate(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected java.util.Date _parseDate(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_STRING:    return _parseDate(p.getText().trim(),ctxt);\ncase JsonTokenId.ID_NUMBER_INT:{\n    long ts;\n    try {\n      ts\u003dp.getLongValue();\n    }\n catch (    JsonParseException e) {\n      Number v\u003d(Number)ctxt.handleWeirdNumberValue(_valueClass,p.getNumberValue(),\"not a valid 64-bit long for creating `java.util.Date`\");\n      ts\u003dv.longValue();\n    }\n    return new java.util.Date(ts);\n  }\ncase JsonTokenId.ID_NULL:return (java.util.Date)getNullValue(ctxt);\ncase JsonTokenId.ID_START_ARRAY:return _parseDateFromArray(p,ctxt);\n}\nreturn (java.util.Date)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 462,
    "end_line": 486,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseDateFromArray#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDateFromArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected java.util.Date _parseDateFromArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t;\n  if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS)) {\n    t\u003dp.nextToken();\n    if (t \u003d\u003d JsonToken.END_ARRAY) {\n      if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n        return (java.util.Date)getNullValue(ctxt);\n      }\n    }\n    if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n      final Date parsed\u003d_parseDate(p,ctxt);\n      _verifyEndArrayForSingle(p,ctxt);\n      return parsed;\n    }\n  }\n else {\n    t\u003dp.getCurrentToken();\n  }\n  return (java.util.Date)ctxt.handleUnexpectedToken(_valueClass,t,p,null);\n}",
    "begin_line": 489,
    "end_line": 509,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseDate#514",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseDate(java.lang.String, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected java.util.Date _parseDate(String value,DeserializationContext ctxt) throws IOException {\n  try {\n    if (_isEmptyOrTextualNull(value)) {\n      return (java.util.Date)getNullValue(ctxt);\n    }\n    return ctxt.parseDate(value);\n  }\n catch (  IllegalArgumentException iae) {\n    return (java.util.Date)ctxt.handleWeirdStringValue(_valueClass,value,\"not a valid representation (error: %s)\",ClassUtil.exceptionMessage(iae));\n  }\n}",
    "begin_line": 514,
    "end_line": 528,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.parseDouble#534",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.parseDouble(java.lang.String)",
    "snippet": "protected final static double parseDouble(String numStr) throws NumberFormatException {\n  if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr)) {\n    return Double.MIN_NORMAL;\n  }\n  return Double.parseDouble(numStr);\n}",
    "begin_line": 534,
    "end_line": 541,
    "comment": "/** \n * Helper method for encapsulating calls to low-level double value parsing; single place just because we need a work-around that must be applied to all calls.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._parseString#549",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._parseString(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final String _parseString(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    return p.getText();\n  }\n  String value\u003dp.getValueAsString();\n  if (value !\u003d null) {\n    return value;\n  }\n  return (String)ctxt.handleUnexpectedToken(String.class,p);\n}",
    "begin_line": 549,
    "end_line": 571,
    "comment": "/** \n * Helper method used for accessing String value, if possible, doing necessary conversion or throwing exception as necessary.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._deserializeFromEmpty#580",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromEmpty(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected T _deserializeFromEmpty(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n      t\u003dp.nextToken();\n      if (t \u003d\u003d JsonToken.END_ARRAY) {\n        return null;\n      }\n      return (T)ctxt.handleUnexpectedToken(handledType(),p);\n    }\n  }\n else   if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n      String str\u003dp.getText().trim();\n      if (str.isEmpty()) {\n        return null;\n      }\n    }\n  }\n  return (T)ctxt.handleUnexpectedToken(handledType(),p);\n}",
    "begin_line": 580,
    "end_line": 601,
    "comment": "/** \n * Helper method that may be used to support fallback for Empty String / Empty Array non-standard representations; usually for things serialized as JSON Objects.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._hasTextualNull#610",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._hasTextualNull(java.lang.String)",
    "snippet": "protected boolean _hasTextualNull(String value){\n  return \"null\".equals(value);\n}",
    "begin_line": 610,
    "end_line": 612,
    "comment": "/** \n * Helper method called to determine if we are seeing String value of \"null\", and, further, that it should be coerced to null just like null token.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._isEmptyOrTextualNull#617",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._isEmptyOrTextualNull(java.lang.String)",
    "snippet": "protected boolean _isEmptyOrTextualNull(String value){\n  return value.isEmpty() || \"null\".equals(value);\n}",
    "begin_line": 617,
    "end_line": 619,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._isNegInf#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._isNegInf(java.lang.String)",
    "snippet": "protected final boolean _isNegInf(String text){\n  return \"-Infinity\".equals(text) || \"-INF\".equals(text);\n}",
    "begin_line": 621,
    "end_line": 623,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._isPosInf#625",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._isPosInf(java.lang.String)",
    "snippet": "protected final boolean _isPosInf(String text){\n  return \"Infinity\".equals(text) || \"INF\".equals(text);\n}",
    "begin_line": 625,
    "end_line": 627,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._isNaN#629",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._isNaN(java.lang.String)",
    "snippet": "protected final boolean _isNaN(String text){\n  return \"NaN\".equals(text);\n}",
    "begin_line": 629,
    "end_line": 629,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._deserializeFromArray#654",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeFromArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected T _deserializeFromArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t;\n  if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS)) {\n    t\u003dp.nextToken();\n    if (t \u003d\u003d JsonToken.END_ARRAY) {\n      if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {\n        return getNullValue(ctxt);\n      }\n    }\n    if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {\n      final T parsed\u003ddeserialize(p,ctxt);\n      if (p.nextToken() !\u003d JsonToken.END_ARRAY) {\n        handleMissingEndArrayForSingle(p,ctxt);\n      }\n      return parsed;\n    }\n  }\n else {\n    t\u003dp.getCurrentToken();\n  }\n  @SuppressWarnings(\"unchecked\") T result\u003d(T)ctxt.handleUnexpectedToken(_valueClass,t,p,null);\n  return result;\n}",
    "begin_line": 654,
    "end_line": 677,
    "comment": "/** \n * Helper method that allows easy support for array-related  {@link DeserializationFeature}s `ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT` and `UNWRAP_SINGLE_VALUE_ARRAYS`: checks for either empty array, or single-value array-wrapped value (respectively), and either reports an exception (if no match, or feature(s) not enabled), or returns appropriate result value. \u003cp\u003e This method should NOT be called if Array representation is explicitly supported for type: it should only be called in case it is otherwise unrecognized. \u003cp\u003e NOTE: in case of unwrapped single element, will handle actual decoding by calling  {@link #_deserializeWrappedValue}, which by default calls {@link #deserialize(JsonParser,DeserializationContext)}.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._deserializeWrappedValue#687",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._deserializeWrappedValue(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected T _deserializeWrappedValue(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.START_ARRAY)) {\n    String msg\u003dString.format(\"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\",ClassUtil.nameOf(_valueClass),JsonToken.START_ARRAY,\"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");\n    @SuppressWarnings(\"unchecked\") T result\u003d(T)ctxt.handleUnexpectedToken(_valueClass,p.getCurrentToken(),p,msg);\n    return result;\n  }\n  return (T)deserialize(p,ctxt);\n}",
    "begin_line": 687,
    "end_line": 701,
    "comment": "/** \n * Helper called to support  {@link DeserializationFeature#UNWRAP_SINGLE_VALUE_ARRAYS}: default implementation simply calls {@link #deserialize(JsonParser,DeserializationContext)}, but handling may be overridden.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._failDoubleToIntCoercion#709",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._failDoubleToIntCoercion(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected void _failDoubleToIntCoercion(JsonParser p,DeserializationContext ctxt,String type) throws IOException {\n  ctxt.reportInputMismatch(handledType(),\"Cannot coerce a floating-point value (\u0027%s\u0027) into %s (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)\",p.getValueAsString(),type);\n}",
    "begin_line": 709,
    "end_line": 715,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._coerceIntegral#728",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceIntegral(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object _coerceIntegral(JsonParser p,DeserializationContext ctxt) throws IOException {\n  int feats\u003dctxt.getDeserializationFeatures();\n  if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(feats)) {\n    return p.getBigIntegerValue();\n  }\n  if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(feats)) {\n    return p.getLongValue();\n  }\n  return p.getBigIntegerValue();\n}",
    "begin_line": 728,
    "end_line": 738,
    "comment": "/** \n * Helper method called in case where an integral number is encountered, but config settings suggest that a coercion may be needed to \"upgrade\" {@link java.lang.Number} into \"bigger\" type like {@link java.lang.Long} or{@link java.math.BigInteger}\n * @see DeserializationFeature#USE_BIG_INTEGER_FOR_INTS\n * @see DeserializationFeature#USE_LONG_FOR_INTS\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._coerceNullToken#746",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceNullToken(com.fasterxml.jackson.databind.DeserializationContext, boolean)",
    "snippet": "protected Object _coerceNullToken(DeserializationContext ctxt,boolean isPrimitive) throws JsonMappingException {\n  if (isPrimitive) {\n    _verifyNullForPrimitive(ctxt);\n  }\n  return getNullValue(ctxt);\n}",
    "begin_line": 746,
    "end_line": 752,
    "comment": "/** \n * Method to call when JSON `null` token is encountered. Note: only called when this deserializer encounters it but NOT when reached via property\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._coerceTextualNull#759",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceTextualNull(com.fasterxml.jackson.databind.DeserializationContext, boolean)",
    "snippet": "protected Object _coerceTextualNull(DeserializationContext ctxt,boolean isPrimitive) throws JsonMappingException {\n  Enum\u003c?\u003e feat;\n  boolean enable;\n  if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {\n    feat\u003dMapperFeature.ALLOW_COERCION_OF_SCALARS;\n    enable\u003dtrue;\n  }\n else   if (isPrimitive \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n    feat\u003dDeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;\n    enable\u003dfalse;\n  }\n else {\n    return getNullValue(ctxt);\n  }\n  _reportFailedNullCoerce(ctxt,enable,feat,\"String \\\"null\\\"\");\n  return null;\n}",
    "begin_line": 759,
    "end_line": 775,
    "comment": "/** \n * Method called when JSON String with value \"null\" is encountered.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._coerceEmptyString#782",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coerceEmptyString(com.fasterxml.jackson.databind.DeserializationContext, boolean)",
    "snippet": "protected Object _coerceEmptyString(DeserializationContext ctxt,boolean isPrimitive) throws JsonMappingException {\n  Enum\u003c?\u003e feat;\n  boolean enable;\n  if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {\n    feat\u003dMapperFeature.ALLOW_COERCION_OF_SCALARS;\n    enable\u003dtrue;\n  }\n else   if (isPrimitive \u0026\u0026 ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n    feat\u003dDeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;\n    enable\u003dfalse;\n  }\n else {\n    return getNullValue(ctxt);\n  }\n  _reportFailedNullCoerce(ctxt,enable,feat,\"empty String (\\\"\\\")\");\n  return null;\n}",
    "begin_line": 782,
    "end_line": 798,
    "comment": "/** \n * Method called when JSON String with value \"\" (that is, zero length) is encountered.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyNullForPrimitive#801",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForPrimitive(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException {\n  if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n    ctxt.reportInputMismatch(this,\"Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)\",_coercedTypeDesc());\n  }\n}",
    "begin_line": 801,
    "end_line": 808,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyNullForPrimitiveCoercion#812",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForPrimitiveCoercion(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt,String str) throws JsonMappingException {\n  Enum\u003c?\u003e feat;\n  boolean enable;\n  if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {\n    feat\u003dMapperFeature.ALLOW_COERCION_OF_SCALARS;\n    enable\u003dtrue;\n  }\n else   if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) {\n    feat\u003dDeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;\n    enable\u003dfalse;\n  }\n else {\n    return;\n  }\n  String strDesc\u003dstr.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\",str);\n  _reportFailedNullCoerce(ctxt,enable,feat,strDesc);\n}",
    "begin_line": 812,
    "end_line": 828,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyNullForScalarCoercion#832",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNullForScalarCoercion(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final void _verifyNullForScalarCoercion(DeserializationContext ctxt,String str) throws JsonMappingException {\n  if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {\n    String strDesc\u003dstr.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\",str);\n    _reportFailedNullCoerce(ctxt,true,MapperFeature.ALLOW_COERCION_OF_SCALARS,strDesc);\n  }\n}",
    "begin_line": 832,
    "end_line": 838,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyStringForScalarCoercion#841",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyStringForScalarCoercion(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected void _verifyStringForScalarCoercion(DeserializationContext ctxt,String str) throws JsonMappingException {\n  MapperFeature feat\u003dMapperFeature.ALLOW_COERCION_OF_SCALARS;\n  if (!ctxt.isEnabled(feat)) {\n    ctxt.reportInputMismatch(this,\"Cannot coerce String \\\"%s\\\" %s (enable `%s.%s` to allow)\",str,_coercedTypeDesc(),feat.getClass().getSimpleName(),feat.name());\n  }\n}",
    "begin_line": 841,
    "end_line": 848,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyNumberForScalarCoercion#851",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyNumberForScalarCoercion(com.fasterxml.jackson.databind.DeserializationContext, JsonParser)",
    "snippet": "protected void _verifyNumberForScalarCoercion(DeserializationContext ctxt,JsonParser p) throws IOException {\n  MapperFeature feat\u003dMapperFeature.ALLOW_COERCION_OF_SCALARS;\n  if (!ctxt.isEnabled(feat)) {\n    String valueDesc\u003dp.getText();\n    ctxt.reportInputMismatch(this,\"Cannot coerce Number (%s) %s (enable `%s.%s` to allow)\",valueDesc,_coercedTypeDesc(),feat.getClass().getSimpleName(),feat.name());\n  }\n}",
    "begin_line": 851,
    "end_line": 861,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._reportFailedNullCoerce#863",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._reportFailedNullCoerce(com.fasterxml.jackson.databind.DeserializationContext, boolean, java.lang.Enum\u003c?\u003e, java.lang.String)",
    "snippet": "protected void _reportFailedNullCoerce(DeserializationContext ctxt,boolean state,Enum\u003c?\u003e feature,String inputDesc) throws JsonMappingException {\n  String enableDesc\u003dstate ? \"enable\" : \"disable\";\n  ctxt.reportInputMismatch(this,\"Cannot coerce %s to Null value %s (%s `%s.%s` to allow)\",inputDesc,_coercedTypeDesc(),enableDesc,feature.getClass().getSimpleName(),feature.name());\n}",
    "begin_line": 863,
    "end_line": 869,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._coercedTypeDesc#880",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._coercedTypeDesc()",
    "snippet": "protected String _coercedTypeDesc(){\n  boolean structured;\n  String typeDesc;\n  JavaType t\u003dgetValueType();\n  if ((t !\u003d null) \u0026\u0026 !t.isPrimitive()) {\n    structured\u003d(t.isContainerType() || t.isReferenceType());\n    typeDesc\u003d\"\u0027\" + t.toString() + \"\u0027\";\n  }\n else {\n    Class\u003c?\u003e cls\u003dhandledType();\n    structured\u003dcls.isArray() || Collection.class.isAssignableFrom(cls) || Map.class.isAssignableFrom(cls);\n    typeDesc\u003dClassUtil.nameOf(cls);\n  }\n  if (structured) {\n    return \"as content of type \" + typeDesc;\n  }\n  return \"for type \" + typeDesc;\n}",
    "begin_line": 880,
    "end_line": 899,
    "comment": "/** \n * Helper method called to get a description of type into which a scalar value coercion is (most likely) being applied, to be used for constructing exception messages on coerce failure.\n * @return Message with backtick-enclosed name of type this deserializer supports\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findDeserializer#916",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e findDeserializer(DeserializationContext ctxt,JavaType type,BeanProperty property) throws JsonMappingException {\n  return ctxt.findContextualValueDeserializer(type,property);\n}",
    "begin_line": 916,
    "end_line": 921,
    "comment": "/** \n * Helper method used to locate deserializers for properties the type this deserializer handles contains (usually for properties of bean types)\n * @param type Type of property to deserialize\n * @param property Actual property object (field, method, constuctor parameter) usedfor passing deserialized values; provided so deserializer can be contextualized if necessary\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._isIntNumber#927",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._isIntNumber(java.lang.String)",
    "snippet": "protected final boolean _isIntNumber(String text){\n  final int len\u003dtext.length();\n  if (len \u003e 0) {\n    char c\u003dtext.charAt(0);\n    int i\u003d(c \u003d\u003d \u0027-\u0027 || c \u003d\u003d \u0027+\u0027) ? 1 : 0;\n    for (; i \u003c len; ++i) {\n      int ch\u003dtext.charAt(i);\n      if (ch \u003e \u00279\u0027 || ch \u003c \u00270\u0027) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n}",
    "begin_line": 927,
    "end_line": 943,
    "comment": "/** \n * Helper method to check whether given text refers to what looks like a clean simple integer number, consisting of optional sign followed by a sequence of digits.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findConvertingContentDeserializer#961",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findConvertingContentDeserializer(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected JsonDeserializer\u003c?\u003e findConvertingContentDeserializer(DeserializationContext ctxt,BeanProperty prop,JsonDeserializer\u003c?\u003e existingDeserializer) throws JsonMappingException {\n  final AnnotationIntrospector intr\u003dctxt.getAnnotationIntrospector();\n  if (_neitherNull(intr,prop)) {\n    AnnotatedMember member\u003dprop.getMember();\n    if (member !\u003d null) {\n      Object convDef\u003dintr.findDeserializationContentConverter(member);\n      if (convDef !\u003d null) {\n        Converter\u003cObject,Object\u003e conv\u003dctxt.converterInstance(prop.getMember(),convDef);\n        JavaType delegateType\u003dconv.getInputType(ctxt.getTypeFactory());\n        if (existingDeserializer \u003d\u003d null) {\n          existingDeserializer\u003dctxt.findContextualValueDeserializer(delegateType,prop);\n        }\n        return new StdDelegatingDeserializer\u003cObject\u003e(conv,delegateType,existingDeserializer);\n      }\n    }\n  }\n  return existingDeserializer;\n}",
    "begin_line": 961,
    "end_line": 981,
    "comment": "/** \n * Helper method that can be used to see if specified property has annotation indicating that a converter is to be used for contained values (contents of structured types; array/List/Map values)\n * @param existingDeserializer (optional) configured contentserializer if one already exists.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findFormatOverrides#998",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findFormatOverrides(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,BeanProperty prop,Class\u003c?\u003e typeForDefaults){\n  if (prop !\u003d null) {\n    return prop.findPropertyFormat(ctxt.getConfig(),typeForDefaults);\n  }\n  return ctxt.getDefaultPropertyFormat(typeForDefaults);\n}",
    "begin_line": 998,
    "end_line": 1006,
    "comment": "/** \n * Helper method that may be used to find if this deserializer has specific {@link JsonFormat} settings, either via property, or through type-specificdefaulting.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findFormatFeature#1018",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findFormatFeature(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e, JsonFormat.Feature)",
    "snippet": "protected Boolean findFormatFeature(DeserializationContext ctxt,BeanProperty prop,Class\u003c?\u003e typeForDefaults,JsonFormat.Feature feat){\n  JsonFormat.Value format\u003dfindFormatOverrides(ctxt,prop,typeForDefaults);\n  if (format !\u003d null) {\n    return format.getFeature(feat);\n  }\n  return null;\n}",
    "begin_line": 1018,
    "end_line": 1026,
    "comment": "/** \n * Convenience method that uses  {@link #findFormatOverrides} to find possibledefaults and/of overrides, and then calls \u003ccode\u003eJsonFormat.Value.getFeature(feat)\u003c/code\u003e to find whether that feature has been specifically marked as enabled or disabled.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findValueNullProvider#1035",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findValueNullProvider(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.deser.SettableBeanProperty, com.fasterxml.jackson.databind.PropertyMetadata)",
    "snippet": "protected final NullValueProvider findValueNullProvider(DeserializationContext ctxt,SettableBeanProperty prop,PropertyMetadata propMetadata) throws JsonMappingException {\n  if (prop !\u003d null) {\n    return _findNullProvider(ctxt,prop,propMetadata.getValueNulls(),prop.getValueDeserializer());\n  }\n  return null;\n}",
    "begin_line": 1035,
    "end_line": 1044,
    "comment": "/** \n * Method called to find  {@link NullValueProvider} for a primary property, using\"value nulls\" setting. If no provider found (not defined, or is \"skip\"), will return `null`.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findContentNullProvider#1054",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findContentNullProvider(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected NullValueProvider findContentNullProvider(DeserializationContext ctxt,BeanProperty prop,JsonDeserializer\u003c?\u003e valueDeser) throws JsonMappingException {\n  final Nulls nulls\u003dfindContentNullStyle(ctxt,prop);\n  if (nulls \u003d\u003d Nulls.SKIP) {\n    return NullsConstantProvider.skipper();\n  }\n  NullValueProvider prov\u003d_findNullProvider(ctxt,prop,nulls,valueDeser);\n  if (prov !\u003d null) {\n    return prov;\n  }\n  return valueDeser;\n}",
    "begin_line": 1054,
    "end_line": 1067,
    "comment": "/** \n * Method called to find  {@link NullValueProvider} for a contents of a structuredprimary property (Collection, Map, array), using \"content nulls\" setting. If no provider found (not defined), will return given value deserializer (which is a null value provider itself).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.findContentNullStyle#1069",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.findContentNullStyle(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "protected Nulls findContentNullStyle(DeserializationContext ctxt,BeanProperty prop) throws JsonMappingException {\n  if (prop !\u003d null) {\n    return prop.getMetadata().getContentNulls();\n  }\n  return null;\n}",
    "begin_line": 1069,
    "end_line": 1076,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._findNullProvider#1079",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._findNullProvider(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty, Nulls, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "protected final NullValueProvider _findNullProvider(DeserializationContext ctxt,BeanProperty prop,Nulls nulls,JsonDeserializer\u003c?\u003e valueDeser) throws JsonMappingException {\n  if (nulls \u003d\u003d Nulls.FAIL) {\n    if (prop \u003d\u003d null) {\n      return NullsFailProvider.constructForRootValue(ctxt.constructType(valueDeser.handledType()));\n    }\n    return NullsFailProvider.constructForProperty(prop);\n  }\n  if (nulls \u003d\u003d Nulls.AS_EMPTY) {\n    if (valueDeser \u003d\u003d null) {\n      return null;\n    }\n    if (valueDeser instanceof BeanDeserializerBase) {\n      ValueInstantiator vi\u003d((BeanDeserializerBase)valueDeser).getValueInstantiator();\n      if (!vi.canCreateUsingDefault()) {\n        final JavaType type\u003dprop.getType();\n        ctxt.reportBadDefinition(type,String.format(\"Cannot create empty instance of %s, no default Creator\",type));\n      }\n    }\n{\n      AccessPattern access\u003dvalueDeser.getEmptyAccessPattern();\n      if (access \u003d\u003d AccessPattern.ALWAYS_NULL) {\n        return NullsConstantProvider.nuller();\n      }\n      if (access \u003d\u003d AccessPattern.CONSTANT) {\n        return NullsConstantProvider.forValue(valueDeser.getEmptyValue(ctxt));\n      }\n    }\n    return new NullsAsEmptyProvider(valueDeser);\n  }\n  if (nulls \u003d\u003d Nulls.SKIP) {\n    return NullsConstantProvider.skipper();\n  }\n  return null;\n}",
    "begin_line": 1079,
    "end_line": 1123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.handleUnknownProperty#1145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object, java.lang.String)",
    "snippet": "protected void handleUnknownProperty(JsonParser p,DeserializationContext ctxt,Object instanceOrClass,String propName) throws IOException {\n  if (instanceOrClass \u003d\u003d null) {\n    instanceOrClass\u003dhandledType();\n  }\n  if (ctxt.handleUnknownProperty(p,this,instanceOrClass,propName)) {\n    return;\n  }\n  p.skipChildren();\n}",
    "begin_line": 1145,
    "end_line": 1160,
    "comment": "/** \n * Method called to deal with a property that did not map to a known Bean property. Method can deal with the problem as it sees fit (ignore, throw exception); but if it does return, it has to skip the matching Json content parser has.\n * @param p Parser that points to value of the unknown property\n * @param ctxt Context for deserialization; allows access to the parser,error reporting functionality\n * @param instanceOrClass Instance that is being populated by thisdeserializer, or if not known, Class that would be instantiated. If null, will assume type is what  {@link #getValueClass} returns.\n * @param propName Name of the property that cannot be mapped\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer.handleMissingEndArrayForSingle#1162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleMissingEndArrayForSingle(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected void handleMissingEndArrayForSingle(JsonParser p,DeserializationContext ctxt) throws IOException {\n  ctxt.reportWrongTokenException(this,JsonToken.END_ARRAY,\"Attempted to unwrap \u0027%s\u0027 value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value\",handledType().getName());\n}",
    "begin_line": 1162,
    "end_line": 1170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._verifyEndArrayForSingle#1172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._verifyEndArrayForSingle(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected void _verifyEndArrayForSingle(JsonParser p,DeserializationContext ctxt) throws IOException {\n  JsonToken t\u003dp.nextToken();\n  if (t !\u003d JsonToken.END_ARRAY) {\n    handleMissingEndArrayForSingle(p,ctxt);\n  }\n}",
    "begin_line": 1172,
    "end_line": 1178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._neitherNull#1189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._neitherNull(java.lang.Object, java.lang.Object)",
    "snippet": "protected final static boolean _neitherNull(Object a,Object b){\n  return (a !\u003d null) \u0026\u0026 (b !\u003d null);\n}",
    "begin_line": 1189,
    "end_line": 1191,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._byteOverflow#1196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._byteOverflow(int)",
    "snippet": "protected final boolean _byteOverflow(int value){\n  return (value \u003c Byte.MIN_VALUE || value \u003e 255);\n}",
    "begin_line": 1196,
    "end_line": 1200,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._shortOverflow#1205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._shortOverflow(int)",
    "snippet": "protected final boolean _shortOverflow(int value){\n  return (value \u003c Short.MIN_VALUE || value \u003e Short.MAX_VALUE);\n}",
    "begin_line": 1205,
    "end_line": 1207,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._intOverflow#1212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._intOverflow(long)",
    "snippet": "protected final boolean _intOverflow(long value){\n  return (value \u003c Integer.MIN_VALUE || value \u003e Integer.MAX_VALUE);\n}",
    "begin_line": 1212,
    "end_line": 1214,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDeserializer._nonNullNumber#1219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdDeserializer._nonNullNumber(java.lang.Number)",
    "snippet": "protected Number _nonNullNumber(Number n){\n  if (n \u003d\u003d null) {\n    n\u003dInteger.valueOf(0);\n  }\n  return n;\n}",
    "begin_line": 1219,
    "end_line": 1224,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructEnumKeyDeserializer#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructEnumKeyDeserializer(com.fasterxml.jackson.databind.util.EnumResolver)",
    "snippet": "public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumResolver){\n  return new StdKeyDeserializer.EnumKD(enumResolver,null);\n}",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructEnumKeyDeserializer#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructEnumKeyDeserializer(com.fasterxml.jackson.databind.util.EnumResolver, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public static KeyDeserializer constructEnumKeyDeserializer(EnumResolver enumResolver,AnnotatedMethod factory){\n  return new StdKeyDeserializer.EnumKD(enumResolver,factory);\n}",
    "begin_line": 37,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.constructDelegatingKeyDeserializer#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.constructDelegatingKeyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "public static KeyDeserializer constructDelegatingKeyDeserializer(DeserializationConfig config,JavaType type,JsonDeserializer\u003c?\u003e deser){\n  return new StdKeyDeserializer.DelegatingKD(type.getRawClass(),deser);\n}",
    "begin_line": 42,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.findStringBasedKeyDeserializer#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.findStringBasedKeyDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static KeyDeserializer findStringBasedKeyDeserializer(DeserializationConfig config,JavaType type){\n  BeanDescription beanDesc\u003dconfig.introspect(type);\n  Constructor\u003c?\u003e ctor\u003dbeanDesc.findSingleArgConstructor(String.class);\n  if (ctor !\u003d null) {\n    if (config.canOverrideAccessModifiers()) {\n      ClassUtil.checkAndFixAccess(ctor,config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n    return new StdKeyDeserializer.StringCtorKeyDeserializer(ctor);\n  }\n  Method m\u003dbeanDesc.findFactoryMethod(String.class);\n  if (m !\u003d null) {\n    if (config.canOverrideAccessModifiers()) {\n      ClassUtil.checkAndFixAccess(m,config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n    return new StdKeyDeserializer.StringFactoryKeyDeserializer(m);\n  }\n  return null;\n}",
    "begin_line": 48,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdKeyDeserializers.findKeyDeserializer#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdKeyDeserializers.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdKeyDeserializers.findKeyDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@Override public KeyDeserializer findKeyDeserializer(JavaType type,DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  Class\u003c?\u003e raw\u003dtype.getRawClass();\n  if (raw.isPrimitive()) {\n    raw\u003dClassUtil.wrapperType(raw);\n  }\n  return StdKeyDeserializer.forType(raw);\n}",
    "begin_line": 84,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.StdScalarDeserializer#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(java.lang.Class\u003c?\u003e)",
    "snippet": "protected StdScalarDeserializer(Class\u003c?\u003e vc){\n  super(vc);\n}",
    "begin_line": 18,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.StdScalarDeserializer#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected StdScalarDeserializer(JavaType valueType){\n  super(valueType);\n}",
    "begin_line": 19,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.StdScalarDeserializer#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.StdScalarDeserializer(com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer\u003c?\u003e)",
    "snippet": "protected StdScalarDeserializer(StdScalarDeserializer\u003c?\u003e src){\n  super(src);\n}",
    "begin_line": 22,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.deserializeWithType#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return typeDeserializer.deserializeTypedFromScalar(p,ctxt);\n}",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.deserialize#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, T)",
    "snippet": "@Override public T deserialize(JsonParser p,DeserializationContext ctxt,T intoValue) throws IOException {\n  ctxt.reportBadMerge(this);\n  return deserialize(p,ctxt);\n}",
    "begin_line": 34,
    "end_line": 39,
    "comment": "/** \n * Overridden to simply call \u003ccode\u003edeserialize()\u003c/code\u003e method that does not take value to update, since scalar values are usually non-mergeable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.supportsUpdate#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return Boolean.FALSE;\n}",
    "begin_line": 46,
    "end_line": 48,
    "comment": "/** \n * By default assumption is that scalar types cannot be updated: many are immutable values (such as primitives and wrappers)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.getNullAccessPattern#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.getNullAccessPattern()",
    "snippet": "@Override public AccessPattern getNullAccessPattern(){\n  return AccessPattern.ALWAYS_NULL;\n}",
    "begin_line": 52,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarDeserializer.getEmptyAccessPattern#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdScalarDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdScalarDeserializer.getEmptyAccessPattern()",
    "snippet": "@Override public AccessPattern getEmptyAccessPattern(){\n  return AccessPattern.CONSTANT;\n}",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.StdValueInstantiator#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.StdValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public StdValueInstantiator(DeserializationConfig config,Class\u003c?\u003e valueType){\n  _valueTypeDesc\u003dClassUtil.nameOf(valueType);\n  _valueClass\u003d(valueType \u003d\u003d null) ? Object.class : valueType;\n}",
    "begin_line": 82,
    "end_line": 85,
    "comment": "/** \n * @deprecated Since 2.7 use constructor that takes {@link JavaType} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.StdValueInstantiator#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.StdValueInstantiator(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public StdValueInstantiator(DeserializationConfig config,JavaType valueType){\n  _valueTypeDesc\u003d(valueType \u003d\u003d null) ? \"UNKNOWN TYPE\" : valueType.toString();\n  _valueClass\u003d(valueType \u003d\u003d null) ? Object.class : valueType.getRawClass();\n}",
    "begin_line": 87,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.StdValueInstantiator#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.StdValueInstantiator(com.fasterxml.jackson.databind.deser.std.StdValueInstantiator)",
    "snippet": "protected StdValueInstantiator(StdValueInstantiator src){\n  _valueTypeDesc\u003dsrc._valueTypeDesc;\n  _valueClass\u003dsrc._valueClass;\n  _defaultCreator\u003dsrc._defaultCreator;\n  _constructorArguments\u003dsrc._constructorArguments;\n  _withArgsCreator\u003dsrc._withArgsCreator;\n  _delegateType\u003dsrc._delegateType;\n  _delegateCreator\u003dsrc._delegateCreator;\n  _delegateArguments\u003dsrc._delegateArguments;\n  _arrayDelegateType\u003dsrc._arrayDelegateType;\n  _arrayDelegateCreator\u003dsrc._arrayDelegateCreator;\n  _arrayDelegateArguments\u003dsrc._arrayDelegateArguments;\n  _fromStringCreator\u003dsrc._fromStringCreator;\n  _fromIntCreator\u003dsrc._fromIntCreator;\n  _fromLongCreator\u003dsrc._fromLongCreator;\n  _fromDoubleCreator\u003dsrc._fromDoubleCreator;\n  _fromBooleanCreator\u003dsrc._fromBooleanCreator;\n}",
    "begin_line": 96,
    "end_line": 119,
    "comment": "/** \n * Copy-constructor that sub-classes can use when creating new instances by fluent-style construction\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromObjectSettings#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromObjectSettings(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.deser.SettableBeanProperty[], com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "snippet": "public void configureFromObjectSettings(AnnotatedWithParams defaultCreator,AnnotatedWithParams delegateCreator,JavaType delegateType,SettableBeanProperty[] delegateArgs,AnnotatedWithParams withArgsCreator,SettableBeanProperty[] constructorArgs){\n  _defaultCreator\u003ddefaultCreator;\n  _delegateCreator\u003ddelegateCreator;\n  _delegateType\u003ddelegateType;\n  _delegateArguments\u003ddelegateArgs;\n  _withArgsCreator\u003dwithArgsCreator;\n  _constructorArguments\u003dconstructorArgs;\n}",
    "begin_line": 126,
    "end_line": 136,
    "comment": "/** \n * Method for setting properties related to instantiating values from JSON Object. We will choose basically only one approach (out of possible three), and clear other properties\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromArraySettings#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromArraySettings(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.deser.SettableBeanProperty[])",
    "snippet": "public void configureFromArraySettings(AnnotatedWithParams arrayDelegateCreator,JavaType arrayDelegateType,SettableBeanProperty[] arrayDelegateArgs){\n  _arrayDelegateCreator\u003darrayDelegateCreator;\n  _arrayDelegateType\u003darrayDelegateType;\n  _arrayDelegateArguments\u003darrayDelegateArgs;\n}",
    "begin_line": 138,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromStringCreator#148",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromStringCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void configureFromStringCreator(AnnotatedWithParams creator){\n  _fromStringCreator\u003dcreator;\n}",
    "begin_line": 148,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromIntCreator#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromIntCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void configureFromIntCreator(AnnotatedWithParams creator){\n  _fromIntCreator\u003dcreator;\n}",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromLongCreator#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromLongCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void configureFromLongCreator(AnnotatedWithParams creator){\n  _fromLongCreator\u003dcreator;\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromDoubleCreator#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromDoubleCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void configureFromDoubleCreator(AnnotatedWithParams creator){\n  _fromDoubleCreator\u003dcreator;\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureFromBooleanCreator#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureFromBooleanCreator(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams)",
    "snippet": "public void configureFromBooleanCreator(AnnotatedWithParams creator){\n  _fromBooleanCreator\u003dcreator;\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.configureIncompleteParameter#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.configureIncompleteParameter(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "public void configureIncompleteParameter(AnnotatedParameter parameter){\n  _incompleteParameter\u003dparameter;\n}",
    "begin_line": 168,
    "end_line": 170,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getValueTypeDesc#179",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getValueTypeDesc()",
    "snippet": "@Override public String getValueTypeDesc(){\n  return _valueTypeDesc;\n}",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getValueClass#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getValueClass()",
    "snippet": "@Override public Class\u003c?\u003e getValueClass(){\n  return _valueClass;\n}",
    "begin_line": 184,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromString#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromString()",
    "snippet": "@Override public boolean canCreateFromString(){\n  return (_fromStringCreator !\u003d null);\n}",
    "begin_line": 189,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromInt#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromInt()",
    "snippet": "@Override public boolean canCreateFromInt(){\n  return (_fromIntCreator !\u003d null);\n}",
    "begin_line": 194,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromLong#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromLong()",
    "snippet": "@Override public boolean canCreateFromLong(){\n  return (_fromLongCreator !\u003d null);\n}",
    "begin_line": 199,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromDouble#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromDouble()",
    "snippet": "@Override public boolean canCreateFromDouble(){\n  return (_fromDoubleCreator !\u003d null);\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromBoolean#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromBoolean()",
    "snippet": "@Override public boolean canCreateFromBoolean(){\n  return (_fromBooleanCreator !\u003d null);\n}",
    "begin_line": 209,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateUsingDefault#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateUsingDefault()",
    "snippet": "@Override public boolean canCreateUsingDefault(){\n  return (_defaultCreator !\u003d null);\n}",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateUsingDelegate#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateUsingDelegate()",
    "snippet": "@Override public boolean canCreateUsingDelegate(){\n  return (_delegateType !\u003d null);\n}",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateUsingArrayDelegate#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateUsingArrayDelegate()",
    "snippet": "@Override public boolean canCreateUsingArrayDelegate(){\n  return (_arrayDelegateType !\u003d null);\n}",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canCreateFromObjectWith#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canCreateFromObjectWith()",
    "snippet": "@Override public boolean canCreateFromObjectWith(){\n  return (_withArgsCreator !\u003d null);\n}",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.canInstantiate#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.canInstantiate()",
    "snippet": "@Override public boolean canInstantiate(){\n  return canCreateUsingDefault() || canCreateUsingDelegate() || canCreateUsingArrayDelegate()|| canCreateFromObjectWith()|| canCreateFromString()|| canCreateFromInt()|| canCreateFromLong()|| canCreateFromDouble()|| canCreateFromBoolean();\n}",
    "begin_line": 234,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getDelegateType#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getDelegateType(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public JavaType getDelegateType(DeserializationConfig config){\n  return _delegateType;\n}",
    "begin_line": 243,
    "end_line": 245,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getArrayDelegateType#248",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getArrayDelegateType(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public JavaType getArrayDelegateType(DeserializationConfig config){\n  return _arrayDelegateType;\n}",
    "begin_line": 248,
    "end_line": 250,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getFromObjectArguments#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getFromObjectArguments(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config){\n  return _constructorArguments;\n}",
    "begin_line": 253,
    "end_line": 255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createUsingDefault#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDefault(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object createUsingDefault(DeserializationContext ctxt) throws IOException {\n  if (_defaultCreator \u003d\u003d null) {\n    return super.createUsingDefault(ctxt);\n  }\n  try {\n    return _defaultCreator.call();\n  }\n catch (  Exception e) {\n    return ctxt.handleInstantiationProblem(_valueClass,null,rewrapCtorProblem(ctxt,e));\n  }\n}",
    "begin_line": 264,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromObjectWith#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromObjectWith(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object[])",
    "snippet": "@Override public Object createFromObjectWith(DeserializationContext ctxt,Object[] args) throws IOException {\n  if (_withArgsCreator \u003d\u003d null) {\n    return super.createFromObjectWith(ctxt,args);\n  }\n  try {\n    return _withArgsCreator.call(args);\n  }\n catch (  Exception e) {\n    return ctxt.handleInstantiationProblem(_valueClass,args,rewrapCtorProblem(ctxt,e));\n  }\n}",
    "begin_line": 277,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createUsingDelegate#290",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingDelegate(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object createUsingDelegate(DeserializationContext ctxt,Object delegate) throws IOException {\n  if (_delegateCreator \u003d\u003d null) {\n    if (_arrayDelegateCreator !\u003d null) {\n      return _createUsingDelegate(_arrayDelegateCreator,_arrayDelegateArguments,ctxt,delegate);\n    }\n  }\n  return _createUsingDelegate(_delegateCreator,_delegateArguments,ctxt,delegate);\n}",
    "begin_line": 290,
    "end_line": 299,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createUsingArrayDelegate#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createUsingArrayDelegate(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@Override public Object createUsingArrayDelegate(DeserializationContext ctxt,Object delegate) throws IOException {\n  if (_arrayDelegateCreator \u003d\u003d null) {\n    if (_delegateCreator !\u003d null) {\n      return createUsingDelegate(ctxt,delegate);\n    }\n  }\n  return _createUsingDelegate(_arrayDelegateCreator,_arrayDelegateArguments,ctxt,delegate);\n}",
    "begin_line": 302,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromString#320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromString(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "@Override public Object createFromString(DeserializationContext ctxt,String value) throws IOException {\n  if (_fromStringCreator \u003d\u003d null) {\n    return _createFromStringFallbacks(ctxt,value);\n  }\n  try {\n    return _fromStringCreator.call1(value);\n  }\n catch (  Throwable t) {\n    return ctxt.handleInstantiationProblem(_fromStringCreator.getDeclaringClass(),value,rewrapCtorProblem(ctxt,t));\n  }\n}",
    "begin_line": 320,
    "end_line": 331,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromInt#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromInt(com.fasterxml.jackson.databind.DeserializationContext, int)",
    "snippet": "@Override public Object createFromInt(DeserializationContext ctxt,int value) throws IOException {\n  if (_fromIntCreator !\u003d null) {\n    Object arg\u003dInteger.valueOf(value);\n    try {\n      return _fromIntCreator.call1(arg);\n    }\n catch (    Throwable t0) {\n      return ctxt.handleInstantiationProblem(_fromIntCreator.getDeclaringClass(),arg,rewrapCtorProblem(ctxt,t0));\n    }\n  }\n  if (_fromLongCreator !\u003d null) {\n    Object arg\u003dLong.valueOf(value);\n    try {\n      return _fromLongCreator.call1(arg);\n    }\n catch (    Throwable t0) {\n      return ctxt.handleInstantiationProblem(_fromLongCreator.getDeclaringClass(),arg,rewrapCtorProblem(ctxt,t0));\n    }\n  }\n  return super.createFromInt(ctxt,value);\n}",
    "begin_line": 334,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromLong#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromLong(com.fasterxml.jackson.databind.DeserializationContext, long)",
    "snippet": "@Override public Object createFromLong(DeserializationContext ctxt,long value) throws IOException {\n  if (_fromLongCreator \u003d\u003d null) {\n    return super.createFromLong(ctxt,value);\n  }\n  Object arg\u003dLong.valueOf(value);\n  try {\n    return _fromLongCreator.call1(arg);\n  }\n catch (  Throwable t0) {\n    return ctxt.handleInstantiationProblem(_fromLongCreator.getDeclaringClass(),arg,rewrapCtorProblem(ctxt,t0));\n  }\n}",
    "begin_line": 360,
    "end_line": 372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromDouble#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromDouble(com.fasterxml.jackson.databind.DeserializationContext, double)",
    "snippet": "@Override public Object createFromDouble(DeserializationContext ctxt,double value) throws IOException {\n  if (_fromDoubleCreator \u003d\u003d null) {\n    return super.createFromDouble(ctxt,value);\n  }\n  Object arg\u003dDouble.valueOf(value);\n  try {\n    return _fromDoubleCreator.call1(arg);\n  }\n catch (  Throwable t0) {\n    return ctxt.handleInstantiationProblem(_fromDoubleCreator.getDeclaringClass(),arg,rewrapCtorProblem(ctxt,t0));\n  }\n}",
    "begin_line": 375,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.createFromBoolean#390",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.createFromBoolean(com.fasterxml.jackson.databind.DeserializationContext, boolean)",
    "snippet": "@Override public Object createFromBoolean(DeserializationContext ctxt,boolean value) throws IOException {\n  if (_fromBooleanCreator \u003d\u003d null) {\n    return super.createFromBoolean(ctxt,value);\n  }\n  final Boolean arg\u003dBoolean.valueOf(value);\n  try {\n    return _fromBooleanCreator.call1(arg);\n  }\n catch (  Throwable t0) {\n    return ctxt.handleInstantiationProblem(_fromBooleanCreator.getDeclaringClass(),arg,rewrapCtorProblem(ctxt,t0));\n  }\n}",
    "begin_line": 390,
    "end_line": 402,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getDelegateCreator#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getDelegateCreator()",
    "snippet": "@Override public AnnotatedWithParams getDelegateCreator(){\n  return _delegateCreator;\n}",
    "begin_line": 411,
    "end_line": 413,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getArrayDelegateCreator#416",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getArrayDelegateCreator()",
    "snippet": "@Override public AnnotatedWithParams getArrayDelegateCreator(){\n  return _arrayDelegateCreator;\n}",
    "begin_line": 416,
    "end_line": 418,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getDefaultCreator#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getDefaultCreator()",
    "snippet": "@Override public AnnotatedWithParams getDefaultCreator(){\n  return _defaultCreator;\n}",
    "begin_line": 421,
    "end_line": 423,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getWithArgsCreator#426",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getWithArgsCreator()",
    "snippet": "@Override public AnnotatedWithParams getWithArgsCreator(){\n  return _withArgsCreator;\n}",
    "begin_line": 426,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.getIncompleteParameter#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.getIncompleteParameter()",
    "snippet": "@Override public AnnotatedParameter getIncompleteParameter(){\n  return _incompleteParameter;\n}",
    "begin_line": 431,
    "end_line": 433,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.wrapException#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapException(java.lang.Throwable)",
    "snippet": "@Deprecated protected JsonMappingException wrapException(Throwable t){\n  for (Throwable curr\u003dt; curr !\u003d null; curr\u003dcurr.getCause()) {\n    if (curr instanceof JsonMappingException) {\n      return (JsonMappingException)curr;\n    }\n  }\n  return new JsonMappingException(null,\"Instantiation of \" + getValueTypeDesc() + \" value failed: \"+ ClassUtil.exceptionMessage(t),t);\n}",
    "begin_line": 446,
    "end_line": 457,
    "comment": "/** \n * @deprecated Since 2.7 call either {@link #unwrapAndWrapException} or{@link #wrapAsJsonMappingException}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.unwrapAndWrapException#462",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.unwrapAndWrapException(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Throwable)",
    "snippet": "protected JsonMappingException unwrapAndWrapException(DeserializationContext ctxt,Throwable t){\n  for (Throwable curr\u003dt; curr !\u003d null; curr\u003dcurr.getCause()) {\n    if (curr instanceof JsonMappingException) {\n      return (JsonMappingException)curr;\n    }\n  }\n  return ctxt.instantiationException(getValueClass(),t);\n}",
    "begin_line": 462,
    "end_line": 472,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.wrapAsJsonMappingException#477",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.wrapAsJsonMappingException(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Throwable)",
    "snippet": "protected JsonMappingException wrapAsJsonMappingException(DeserializationContext ctxt,Throwable t){\n  if (t instanceof JsonMappingException) {\n    return (JsonMappingException)t;\n  }\n  return ctxt.instantiationException(getValueClass(),t);\n}",
    "begin_line": 477,
    "end_line": 485,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator.rewrapCtorProblem#490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator.rewrapCtorProblem(com.fasterxml.jackson.databind.DeserializationContext, java.lang.Throwable)",
    "snippet": "protected JsonMappingException rewrapCtorProblem(DeserializationContext ctxt,Throwable t){\n  if ((t instanceof ExceptionInInitializerError) || (t instanceof InvocationTargetException)) {\n    Throwable cause\u003dt.getCause();\n    if (cause !\u003d null) {\n      t\u003dcause;\n    }\n  }\n  return wrapAsJsonMappingException(ctxt,t);\n}",
    "begin_line": 490,
    "end_line": 504,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdValueInstantiator._createUsingDelegate#512",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator",
    "signature": "com.fasterxml.jackson.databind.deser.std.StdValueInstantiator._createUsingDelegate(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.deser.SettableBeanProperty[], com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "private Object _createUsingDelegate(AnnotatedWithParams delegateCreator,SettableBeanProperty[] delegateArguments,DeserializationContext ctxt,Object delegate) throws IOException {\n  if (delegateCreator \u003d\u003d null) {\n    throw new IllegalStateException(\"No delegate constructor for \" + getValueTypeDesc());\n  }\n  try {\n    if (delegateArguments \u003d\u003d null) {\n      return delegateCreator.call1(delegate);\n    }\n    final int len\u003ddelegateArguments.length;\n    Object[] args\u003dnew Object[len];\n    for (int i\u003d0; i \u003c len; ++i) {\n      SettableBeanProperty prop\u003ddelegateArguments[i];\n      if (prop \u003d\u003d null) {\n        args[i]\u003ddelegate;\n      }\n else {\n        args[i]\u003dctxt.findInjectableValue(prop.getInjectableValueId(),prop,null);\n      }\n    }\n    return delegateCreator.call(args);\n  }\n catch (  Throwable t) {\n    throw rewrapCtorProblem(ctxt,t);\n  }\n}",
    "begin_line": 512,
    "end_line": 542,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringDeserializer.StringDeserializer#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StringDeserializer.StringDeserializer()",
    "snippet": "public StringDeserializer(){\n  super(String.class);\n}",
    "begin_line": 20,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringDeserializer.isCachable#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StringDeserializer.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return true;\n}",
    "begin_line": 24,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringDeserializer.getEmptyValue#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StringDeserializer.getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object getEmptyValue(DeserializationContext ctxt) throws JsonMappingException {\n  return \"\";\n}",
    "begin_line": 27,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringDeserializer.deserialize#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public String deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.hasToken(JsonToken.VALUE_STRING)) {\n    return p.getText();\n  }\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_ARRAY) {\n    return _deserializeFromArray(p,ctxt);\n  }\n  if (t \u003d\u003d JsonToken.VALUE_EMBEDDED_OBJECT) {\n    Object ob\u003dp.getEmbeddedObject();\n    if (ob \u003d\u003d null) {\n      return null;\n    }\n    if (ob instanceof byte[]) {\n      return ctxt.getBase64Variant().encode((byte[])ob,false);\n    }\n    return ob.toString();\n  }\n  if (t.isScalarValue()) {\n    String text\u003dp.getValueAsString();\n    if (text !\u003d null) {\n      return text;\n    }\n  }\n  return (String)ctxt.handleUnexpectedToken(_valueClass,p);\n}",
    "begin_line": 32,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringDeserializer.deserializeWithType#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/StringDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.StringDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.StringDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public String deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\n  return deserialize(p,ctxt);\n}",
    "begin_line": 69,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.UntypedObjectDeserializer#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer()",
    "snippet": "@Deprecated public UntypedObjectDeserializer(){\n  this(null,null);\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * @deprecated Since 2.6 use variant takes type arguments\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.UntypedObjectDeserializer#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public UntypedObjectDeserializer(JavaType listType,JavaType mapType){\n  super(Object.class);\n  _listType\u003dlistType;\n  _mapType\u003dmapType;\n  _nonMerging\u003dfalse;\n}",
    "begin_line": 84,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.UntypedObjectDeserializer#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer(com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e, com.fasterxml.jackson.databind.JsonDeserializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public UntypedObjectDeserializer(UntypedObjectDeserializer base,JsonDeserializer\u003c?\u003e mapDeser,JsonDeserializer\u003c?\u003e listDeser,JsonDeserializer\u003c?\u003e stringDeser,JsonDeserializer\u003c?\u003e numberDeser){\n  super(Object.class);\n  _mapDeserializer\u003d(JsonDeserializer\u003cObject\u003e)mapDeser;\n  _listDeserializer\u003d(JsonDeserializer\u003cObject\u003e)listDeser;\n  _stringDeserializer\u003d(JsonDeserializer\u003cObject\u003e)stringDeser;\n  _numberDeserializer\u003d(JsonDeserializer\u003cObject\u003e)numberDeser;\n  _listType\u003dbase._listType;\n  _mapType\u003dbase._mapType;\n  _nonMerging\u003dbase._nonMerging;\n}",
    "begin_line": 92,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.UntypedObjectDeserializer#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.UntypedObjectDeserializer(com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer, boolean)",
    "snippet": "protected UntypedObjectDeserializer(UntypedObjectDeserializer base,boolean nonMerging){\n  super(Object.class);\n  _mapDeserializer\u003dbase._mapDeserializer;\n  _listDeserializer\u003dbase._listDeserializer;\n  _stringDeserializer\u003dbase._stringDeserializer;\n  _numberDeserializer\u003dbase._numberDeserializer;\n  _listType\u003dbase._listType;\n  _mapType\u003dbase._mapType;\n  _nonMerging\u003dnonMerging;\n}",
    "begin_line": 109,
    "end_line": 120,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.resolve#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.resolve(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public void resolve(DeserializationContext ctxt) throws JsonMappingException {\n  JavaType obType\u003dctxt.constructType(Object.class);\n  JavaType stringType\u003dctxt.constructType(String.class);\n  TypeFactory tf\u003dctxt.getTypeFactory();\n  if (_listType \u003d\u003d null) {\n    _listDeserializer\u003d_clearIfStdImpl(_findCustomDeser(ctxt,tf.constructCollectionType(List.class,obType)));\n  }\n else {\n    _listDeserializer\u003d_findCustomDeser(ctxt,_listType);\n  }\n  if (_mapType \u003d\u003d null) {\n    _mapDeserializer\u003d_clearIfStdImpl(_findCustomDeser(ctxt,tf.constructMapType(Map.class,stringType,obType)));\n  }\n else {\n    _mapDeserializer\u003d_findCustomDeser(ctxt,_mapType);\n  }\n  _stringDeserializer\u003d_clearIfStdImpl(_findCustomDeser(ctxt,stringType));\n  _numberDeserializer\u003d_clearIfStdImpl(_findCustomDeser(ctxt,tf.constructType(Number.class)));\n  JavaType unknown\u003dTypeFactory.unknownType();\n  _mapDeserializer\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handleSecondaryContextualization(_mapDeserializer,null,unknown);\n  _listDeserializer\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handleSecondaryContextualization(_listDeserializer,null,unknown);\n  _stringDeserializer\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handleSecondaryContextualization(_stringDeserializer,null,unknown);\n  _numberDeserializer\u003d(JsonDeserializer\u003cObject\u003e)ctxt.handleSecondaryContextualization(_numberDeserializer,null,unknown);\n}",
    "begin_line": 135,
    "end_line": 173,
    "comment": "/** \n * We need to implement this method to properly find things to delegate to: it cannot be done earlier since delegated deserializers almost certainly require access to this instance (at least \"List\" and \"Map\" ones)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer._findCustomDeser#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer._findCustomDeser(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _findCustomDeser(DeserializationContext ctxt,JavaType type) throws JsonMappingException {\n  return ctxt.findNonContextualValueDeserializer(type);\n}",
    "begin_line": 175,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer._clearIfStdImpl#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer._clearIfStdImpl(com.fasterxml.jackson.databind.JsonDeserializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonDeserializer\u003cObject\u003e _clearIfStdImpl(JsonDeserializer\u003cObject\u003e deser){\n  return ClassUtil.isJacksonStdImpl(deser) ? null : deser;\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.createContextual#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.createContextual(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e createContextual(DeserializationContext ctxt,BeanProperty property) throws JsonMappingException {\n  boolean preventMerge\u003d(property \u003d\u003d null) \u0026\u0026 Boolean.FALSE.equals(ctxt.getConfig().getDefaultMergeable(Object.class));\n  if ((_stringDeserializer \u003d\u003d null) \u0026\u0026 (_numberDeserializer \u003d\u003d null) \u0026\u0026 (_mapDeserializer \u003d\u003d null)\u0026\u0026 (_listDeserializer \u003d\u003d null)\u0026\u0026 getClass() \u003d\u003d UntypedObjectDeserializer.class) {\n    return Vanilla.instance(preventMerge);\n  }\n  if (preventMerge !\u003d _nonMerging) {\n    return new UntypedObjectDeserializer(this,preventMerge);\n  }\n  return this;\n}",
    "begin_line": 192,
    "end_line": 209,
    "comment": "/** \n * We only use contextualization for optimizing the case where no customization occurred; if so, can slip in a more streamlined version.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.isCachable#222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.isCachable()",
    "snippet": "@Override public boolean isCachable(){\n  return true;\n}",
    "begin_line": 222,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.supportsUpdate#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return null;\n}",
    "begin_line": 231,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.deserialize#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_START_OBJECT:case JsonTokenId.ID_FIELD_NAME:case JsonTokenId.ID_END_OBJECT:    if (_mapDeserializer !\u003d null) {\n      return _mapDeserializer.deserialize(p,ctxt);\n    }\n  return mapObject(p,ctxt);\ncase JsonTokenId.ID_START_ARRAY:if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n  return mapArrayToArray(p,ctxt);\n}\nif (_listDeserializer !\u003d null) {\nreturn _listDeserializer.deserialize(p,ctxt);\n}\nreturn mapArray(p,ctxt);\ncase JsonTokenId.ID_EMBEDDED_OBJECT:return p.getEmbeddedObject();\ncase JsonTokenId.ID_STRING:if (_stringDeserializer !\u003d null) {\nreturn _stringDeserializer.deserialize(p,ctxt);\n}\nreturn p.getText();\ncase JsonTokenId.ID_NUMBER_INT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt);\n}\nif (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\nreturn _coerceIntegral(p,ctxt);\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt);\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn p.getDecimalValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_TRUE:return Boolean.TRUE;\ncase JsonTokenId.ID_FALSE:return Boolean.FALSE;\ncase JsonTokenId.ID_NULL:return null;\ndefault:}\nreturn ctxt.handleUnexpectedToken(Object.class,p);\n}",
    "begin_line": 237,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.deserializeWithType#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_START_ARRAY:case JsonTokenId.ID_START_OBJECT:case JsonTokenId.ID_FIELD_NAME:    return typeDeserializer.deserializeTypedFromAny(p,ctxt);\ncase JsonTokenId.ID_EMBEDDED_OBJECT:  return p.getEmbeddedObject();\ncase JsonTokenId.ID_STRING:if (_stringDeserializer !\u003d null) {\n  return _stringDeserializer.deserialize(p,ctxt);\n}\nreturn p.getText();\ncase JsonTokenId.ID_NUMBER_INT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt);\n}\nif (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\nreturn _coerceIntegral(p,ctxt);\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt);\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn p.getDecimalValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_TRUE:return Boolean.TRUE;\ncase JsonTokenId.ID_FALSE:return Boolean.FALSE;\ncase JsonTokenId.ID_NULL:return null;\ndefault:}\nreturn ctxt.handleUnexpectedToken(Object.class,p);\n}",
    "begin_line": 303,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.deserialize#359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public Object deserialize(JsonParser p,DeserializationContext ctxt,Object intoValue) throws IOException {\n  if (_nonMerging) {\n    return deserialize(p,ctxt);\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_START_OBJECT:case JsonTokenId.ID_FIELD_NAME:case JsonTokenId.ID_END_OBJECT:    if (_mapDeserializer !\u003d null) {\n      return _mapDeserializer.deserialize(p,ctxt,intoValue);\n    }\n  if (intoValue instanceof Map\u003c?,?\u003e) {\n    return mapObject(p,ctxt,(Map\u003cObject,Object\u003e)intoValue);\n  }\nreturn mapObject(p,ctxt);\ncase JsonTokenId.ID_START_ARRAY:if (_listDeserializer !\u003d null) {\nreturn _listDeserializer.deserialize(p,ctxt,intoValue);\n}\nif (intoValue instanceof Collection\u003c?\u003e) {\nreturn mapArray(p,ctxt,(Collection\u003cObject\u003e)intoValue);\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\nreturn mapArrayToArray(p,ctxt);\n}\nreturn mapArray(p,ctxt);\ncase JsonTokenId.ID_EMBEDDED_OBJECT:return p.getEmbeddedObject();\ncase JsonTokenId.ID_STRING:if (_stringDeserializer !\u003d null) {\nreturn _stringDeserializer.deserialize(p,ctxt,intoValue);\n}\nreturn p.getText();\ncase JsonTokenId.ID_NUMBER_INT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt,intoValue);\n}\nif (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\nreturn _coerceIntegral(p,ctxt);\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (_numberDeserializer !\u003d null) {\nreturn _numberDeserializer.deserialize(p,ctxt,intoValue);\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn p.getDecimalValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_TRUE:return Boolean.TRUE;\ncase JsonTokenId.ID_FALSE:return Boolean.FALSE;\ncase JsonTokenId.ID_NULL:return null;\ndefault:}\nreturn deserialize(p,ctxt);\n}",
    "begin_line": 359,
    "end_line": 427,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.mapArray#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object mapArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    return new ArrayList\u003cObject\u003e(2);\n  }\n  Object value\u003ddeserialize(p,ctxt);\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    ArrayList\u003cObject\u003e l\u003dnew ArrayList\u003cObject\u003e(2);\n    l.add(value);\n    return l;\n  }\n  Object value2\u003ddeserialize(p,ctxt);\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    ArrayList\u003cObject\u003e l\u003dnew ArrayList\u003cObject\u003e(2);\n    l.add(value);\n    l.add(value2);\n    return l;\n  }\n  ObjectBuffer buffer\u003dctxt.leaseObjectBuffer();\n  Object[] values\u003dbuffer.resetAndStart();\n  int ptr\u003d0;\n  values[ptr++]\u003dvalue;\n  values[ptr++]\u003dvalue2;\n  int totalSize\u003dptr;\n  do {\n    value\u003ddeserialize(p,ctxt);\n    ++totalSize;\n    if (ptr \u003e\u003d values.length) {\n      values\u003dbuffer.appendCompletedChunk(values);\n      ptr\u003d0;\n    }\n    values[ptr++]\u003dvalue;\n  }\n while (p.nextToken() !\u003d JsonToken.END_ARRAY);\n  ArrayList\u003cObject\u003e result\u003dnew ArrayList\u003cObject\u003e(totalSize);\n  buffer.completeAndClearBuffer(values,ptr,result);\n  return result;\n}",
    "begin_line": 438,
    "end_line": 476,
    "comment": "/** \n * Method called to map a JSON Array into a Java value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.mapArray#478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Collection\u003cjava.lang.Object\u003e)",
    "snippet": "protected Object mapArray(JsonParser p,DeserializationContext ctxt,Collection\u003cObject\u003e result) throws IOException {\n  while (p.nextToken() !\u003d JsonToken.END_ARRAY) {\n    result.add(deserialize(p,ctxt));\n  }\n  return result;\n}",
    "begin_line": 478,
    "end_line": 487,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.mapObject#492",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object mapObject(JsonParser p,DeserializationContext ctxt) throws IOException {\n  String key1;\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_OBJECT) {\n    key1\u003dp.nextFieldName();\n  }\n else   if (t \u003d\u003d JsonToken.FIELD_NAME) {\n    key1\u003dp.getCurrentName();\n  }\n else {\n    if (t !\u003d JsonToken.END_OBJECT) {\n      return ctxt.handleUnexpectedToken(handledType(),p);\n    }\n    key1\u003dnull;\n  }\n  if (key1 \u003d\u003d null) {\n    return new LinkedHashMap\u003cString,Object\u003e(2);\n  }\n  p.nextToken();\n  Object value1\u003ddeserialize(p,ctxt);\n  String key2\u003dp.nextFieldName();\n  if (key2 \u003d\u003d null) {\n    LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e(2);\n    result.put(key1,value1);\n    return result;\n  }\n  p.nextToken();\n  Object value2\u003ddeserialize(p,ctxt);\n  String key\u003dp.nextFieldName();\n  if (key \u003d\u003d null) {\n    LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e(4);\n    result.put(key1,value1);\n    result.put(key2,value2);\n    return result;\n  }\n  LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e();\n  result.put(key1,value1);\n  result.put(key2,value2);\n  do {\n    p.nextToken();\n    result.put(key,deserialize(p,ctxt));\n  }\n while ((key\u003dp.nextFieldName()) !\u003d null);\n  return result;\n}",
    "begin_line": 492,
    "end_line": 546,
    "comment": "/** \n * Method called to map a JSON Object into a Java value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.mapArrayToArray#551",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapArrayToArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object[] mapArrayToArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    return NO_OBJECTS;\n  }\n  ObjectBuffer buffer\u003dctxt.leaseObjectBuffer();\n  Object[] values\u003dbuffer.resetAndStart();\n  int ptr\u003d0;\n  do {\n    Object value\u003ddeserialize(p,ctxt);\n    if (ptr \u003e\u003d values.length) {\n      values\u003dbuffer.appendCompletedChunk(values);\n      ptr\u003d0;\n    }\n    values[ptr++]\u003dvalue;\n  }\n while (p.nextToken() !\u003d JsonToken.END_ARRAY);\n  return buffer.completeAndClearBuffer(values,ptr);\n}",
    "begin_line": 551,
    "end_line": 569,
    "comment": "/** \n * Method called to map a JSON Array into a Java Object array (Object[]).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UntypedObjectDeserializer.mapObject#571",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.util.Map\u003cjava.lang.Object,java.lang.Object\u003e)",
    "snippet": "protected Object mapObject(JsonParser p,DeserializationContext ctxt,Map\u003cObject,Object\u003e m) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_OBJECT) {\n    t\u003dp.nextToken();\n  }\n  if (t \u003d\u003d JsonToken.END_OBJECT) {\n    return m;\n  }\n  String key\u003dp.getCurrentName();\n  do {\n    p.nextToken();\n    Object old\u003dm.get(key);\n    Object newV;\n    if (old !\u003d null) {\n      newV\u003ddeserialize(p,ctxt,old);\n    }\n else {\n      newV\u003ddeserialize(p,ctxt);\n    }\n    if (newV !\u003d old) {\n      m.put(key,newV);\n    }\n  }\n while ((key\u003dp.nextFieldName()) !\u003d null);\n  return m;\n}",
    "begin_line": 571,
    "end_line": 599,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.Vanilla#621",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla()",
    "snippet": "public Vanilla(){\n  this(false);\n}",
    "begin_line": 621,
    "end_line": 621,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.Vanilla#623",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla(boolean)",
    "snippet": "protected Vanilla(boolean nonMerging){\n  super(Object.class);\n  _nonMerging\u003dnonMerging;\n}",
    "begin_line": 623,
    "end_line": 626,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.instance#628",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.instance(boolean)",
    "snippet": "public static Vanilla instance(boolean nonMerging){\n  if (nonMerging) {\n    return new Vanilla(true);\n  }\n  return std;\n}",
    "begin_line": 628,
    "end_line": 633,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.supportsUpdate#636",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.supportsUpdate(com.fasterxml.jackson.databind.DeserializationConfig)",
    "snippet": "@Override public Boolean supportsUpdate(DeserializationConfig config){\n  return _nonMerging ? Boolean.FALSE : null;\n}",
    "begin_line": 636,
    "end_line": 640,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.deserialize#643",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_START_OBJECT:{\n      JsonToken t\u003dp.nextToken();\n      if (t \u003d\u003d JsonToken.END_OBJECT) {\n        return new LinkedHashMap\u003cString,Object\u003e(2);\n      }\n    }\ncase JsonTokenId.ID_FIELD_NAME:  return mapObject(p,ctxt);\ncase JsonTokenId.ID_START_ARRAY:{\n  JsonToken t\u003dp.nextToken();\n  if (t \u003d\u003d JsonToken.END_ARRAY) {\n    if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n      return NO_OBJECTS;\n    }\n    return new ArrayList\u003cObject\u003e(2);\n  }\n}\nif (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\nreturn mapArrayToArray(p,ctxt);\n}\nreturn mapArray(p,ctxt);\ncase JsonTokenId.ID_EMBEDDED_OBJECT:return p.getEmbeddedObject();\ncase JsonTokenId.ID_STRING:return p.getText();\ncase JsonTokenId.ID_NUMBER_INT:if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\nreturn _coerceIntegral(p,ctxt);\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn p.getDecimalValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_TRUE:return Boolean.TRUE;\ncase JsonTokenId.ID_FALSE:return Boolean.FALSE;\ncase JsonTokenId.ID_END_OBJECT:return new LinkedHashMap\u003cString,Object\u003e(2);\ncase JsonTokenId.ID_NULL:return null;\ndefault:}\nreturn ctxt.handleUnexpectedToken(Object.class,p);\n}",
    "begin_line": 643,
    "end_line": 703,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.deserializeWithType#706",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserializeWithType(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.jsontype.TypeDeserializer)",
    "snippet": "@Override public Object deserializeWithType(JsonParser p,DeserializationContext ctxt,TypeDeserializer typeDeserializer) throws IOException {\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_START_ARRAY:case JsonTokenId.ID_START_OBJECT:case JsonTokenId.ID_FIELD_NAME:    return typeDeserializer.deserializeTypedFromAny(p,ctxt);\ncase JsonTokenId.ID_STRING:  return p.getText();\ncase JsonTokenId.ID_NUMBER_INT:if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n  return p.getBigIntegerValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_NUMBER_FLOAT:if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\nreturn p.getDecimalValue();\n}\nreturn p.getNumberValue();\ncase JsonTokenId.ID_TRUE:return Boolean.TRUE;\ncase JsonTokenId.ID_FALSE:return Boolean.FALSE;\ncase JsonTokenId.ID_EMBEDDED_OBJECT:return p.getEmbeddedObject();\ncase JsonTokenId.ID_NULL:return null;\ndefault:}\nreturn ctxt.handleUnexpectedToken(Object.class,p);\n}",
    "begin_line": 706,
    "end_line": 741,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.deserialize#745",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public Object deserialize(JsonParser p,DeserializationContext ctxt,Object intoValue) throws IOException {\n  if (_nonMerging) {\n    return deserialize(p,ctxt);\n  }\nswitch (p.getCurrentTokenId()) {\ncase JsonTokenId.ID_END_OBJECT:case JsonTokenId.ID_END_ARRAY:    return intoValue;\ncase JsonTokenId.ID_START_OBJECT:{\n    JsonToken t\u003dp.nextToken();\n    if (t \u003d\u003d JsonToken.END_OBJECT) {\n      return intoValue;\n    }\n  }\ncase JsonTokenId.ID_FIELD_NAME:if (intoValue instanceof Map\u003c?,?\u003e) {\n  Map\u003cObject,Object\u003e m\u003d(Map\u003cObject,Object\u003e)intoValue;\n  String key\u003dp.getCurrentName();\n  do {\n    p.nextToken();\n    Object old\u003dm.get(key);\n    Object newV;\n    if (old !\u003d null) {\n      newV\u003ddeserialize(p,ctxt,old);\n    }\n else {\n      newV\u003ddeserialize(p,ctxt);\n    }\n    if (newV !\u003d old) {\n      m.put(key,newV);\n    }\n  }\n while ((key\u003dp.nextFieldName()) !\u003d null);\n  return intoValue;\n}\nbreak;\ncase JsonTokenId.ID_START_ARRAY:{\nJsonToken t\u003dp.nextToken();\nif (t \u003d\u003d JsonToken.END_ARRAY) {\nreturn intoValue;\n}\n}\nif (intoValue instanceof Collection\u003c?\u003e) {\nCollection\u003cObject\u003e c\u003d(Collection\u003cObject\u003e)intoValue;\ndo {\nc.add(deserialize(p,ctxt));\n}\n while (p.nextToken() !\u003d JsonToken.END_ARRAY);\nreturn intoValue;\n}\nbreak;\n}\nreturn deserialize(p,ctxt);\n}",
    "begin_line": 745,
    "end_line": 807,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.mapArray#809",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object mapArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  Object value\u003ddeserialize(p,ctxt);\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    ArrayList\u003cObject\u003e l\u003dnew ArrayList\u003cObject\u003e(2);\n    l.add(value);\n    return l;\n  }\n  Object value2\u003ddeserialize(p,ctxt);\n  if (p.nextToken() \u003d\u003d JsonToken.END_ARRAY) {\n    ArrayList\u003cObject\u003e l\u003dnew ArrayList\u003cObject\u003e(2);\n    l.add(value);\n    l.add(value2);\n    return l;\n  }\n  ObjectBuffer buffer\u003dctxt.leaseObjectBuffer();\n  Object[] values\u003dbuffer.resetAndStart();\n  int ptr\u003d0;\n  values[ptr++]\u003dvalue;\n  values[ptr++]\u003dvalue2;\n  int totalSize\u003dptr;\n  do {\n    value\u003ddeserialize(p,ctxt);\n    ++totalSize;\n    if (ptr \u003e\u003d values.length) {\n      values\u003dbuffer.appendCompletedChunk(values);\n      ptr\u003d0;\n    }\n    values[ptr++]\u003dvalue;\n  }\n while (p.nextToken() !\u003d JsonToken.END_ARRAY);\n  ArrayList\u003cObject\u003e result\u003dnew ArrayList\u003cObject\u003e(totalSize);\n  buffer.completeAndClearBuffer(values,ptr,result);\n  return result;\n}",
    "begin_line": 809,
    "end_line": 843,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.mapArrayToArray#848",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapArrayToArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object[] mapArrayToArray(JsonParser p,DeserializationContext ctxt) throws IOException {\n  ObjectBuffer buffer\u003dctxt.leaseObjectBuffer();\n  Object[] values\u003dbuffer.resetAndStart();\n  int ptr\u003d0;\n  do {\n    Object value\u003ddeserialize(p,ctxt);\n    if (ptr \u003e\u003d values.length) {\n      values\u003dbuffer.appendCompletedChunk(values);\n      ptr\u003d0;\n    }\n    values[ptr++]\u003dvalue;\n  }\n while (p.nextToken() !\u003d JsonToken.END_ARRAY);\n  return buffer.completeAndClearBuffer(values,ptr);\n}",
    "begin_line": 848,
    "end_line": 861,
    "comment": "/** \n * Method called to map a JSON Array into a Java Object array (Object[]).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Vanilla.mapObject#866",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer",
    "signature": "com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.mapObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected Object mapObject(JsonParser p,DeserializationContext ctxt) throws IOException {\n  String key1\u003dp.getText();\n  p.nextToken();\n  Object value1\u003ddeserialize(p,ctxt);\n  String key2\u003dp.nextFieldName();\n  if (key2 \u003d\u003d null) {\n    LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e(2);\n    result.put(key1,value1);\n    return result;\n  }\n  p.nextToken();\n  Object value2\u003ddeserialize(p,ctxt);\n  String key\u003dp.nextFieldName();\n  if (key \u003d\u003d null) {\n    LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e(4);\n    result.put(key1,value1);\n    result.put(key2,value2);\n    return result;\n  }\n  LinkedHashMap\u003cString,Object\u003e result\u003dnew LinkedHashMap\u003cString,Object\u003e();\n  result.put(key1,value1);\n  result.put(key2,value2);\n  do {\n    p.nextToken();\n    result.put(key,deserialize(p,ctxt));\n  }\n while ((key\u003dp.nextFieldName()) !\u003d null);\n  return result;\n}",
    "begin_line": 866,
    "end_line": 898,
    "comment": "/** \n * Method called to map a JSON Object into a Java value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.instance#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.instance()",
    "snippet": "public static Java7Support instance(){\n  return IMPL;\n}",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.findTransient#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.findTransient(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public abstract Boolean findTransient(Annotated a);",
    "begin_line": 38,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.hasCreatorAnnotation#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "public abstract Boolean hasCreatorAnnotation(Annotated a);",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.findConstructorName#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "public abstract PropertyName findConstructorName(AnnotatedParameter p);",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getClassJavaNioFilePath#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getClassJavaNioFilePath()",
    "snippet": "public abstract Class\u003c?\u003e getClassJavaNioFilePath();",
    "begin_line": 44,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getDeserializerForJavaNioFilePath#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getDeserializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonDeserializer\u003c?\u003e getDeserializerForJavaNioFilePath(Class\u003c?\u003e rawType);",
    "begin_line": 46,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7Support.getSerializerForJavaNioFilePath#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7Support.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7Support",
    "signature": "com.fasterxml.jackson.databind.ext.Java7Support.getSerializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract JsonSerializer\u003c?\u003e getSerializerForJavaNioFilePath(Class\u003c?\u003e rawType);",
    "begin_line": 48,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.Java7SupportImpl#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.Java7SupportImpl()",
    "snippet": "public Java7SupportImpl(){\n  Class\u003c?\u003e cls\u003dTransient.class;\n  cls\u003dConstructorProperties.class;\n  _bogus\u003dcls;\n}",
    "begin_line": 22,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getClassJavaNioFilePath#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getClassJavaNioFilePath()",
    "snippet": "@Override public Class\u003c?\u003e getClassJavaNioFilePath(){\n  return Path.class;\n}",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getDeserializerForJavaNioFilePath#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getDeserializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JsonDeserializer\u003c?\u003e getDeserializerForJavaNioFilePath(Class\u003c?\u003e rawType){\n  if (rawType \u003d\u003d Path.class) {\n    return new NioPathDeserializer();\n  }\n  return null;\n}",
    "begin_line": 35,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.getSerializerForJavaNioFilePath#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.getSerializerForJavaNioFilePath(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e getSerializerForJavaNioFilePath(Class\u003c?\u003e rawType){\n  if (Path.class.isAssignableFrom(rawType)) {\n    return new NioPathSerializer();\n  }\n  return null;\n}",
    "begin_line": 43,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.findTransient#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.findTransient(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean findTransient(Annotated a){\n  Transient t\u003da.getAnnotation(Transient.class);\n  if (t !\u003d null) {\n    return t.value();\n  }\n  return null;\n}",
    "begin_line": 51,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.hasCreatorAnnotation#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean hasCreatorAnnotation(Annotated a){\n  ConstructorProperties props\u003da.getAnnotation(ConstructorProperties.class);\n  if (props !\u003d null) {\n    return Boolean.TRUE;\n  }\n  return null;\n}",
    "begin_line": 60,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Java7SupportImpl.findConstructorName#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/Java7SupportImpl.java",
    "class_name": "com.fasterxml.jackson.databind.ext.Java7SupportImpl",
    "signature": "com.fasterxml.jackson.databind.ext.Java7SupportImpl.findConstructorName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "@Override public PropertyName findConstructorName(AnnotatedParameter p){\n  AnnotatedWithParams ctor\u003dp.getOwner();\n  if (ctor !\u003d null) {\n    ConstructorProperties props\u003dctor.getAnnotation(ConstructorProperties.class);\n    if (props !\u003d null) {\n      String[] names\u003dprops.value();\n      int ix\u003dp.getIndex();\n      if (ix \u003c names.length) {\n        return PropertyName.construct(names[ix]);\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 71,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalHandlerFactory.OptionalHandlerFactory#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "signature": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.OptionalHandlerFactory()",
    "snippet": "protected OptionalHandlerFactory(){\n}",
    "begin_line": 78,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalHandlerFactory.findSerializer#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "signature": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.findSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonSerializer\u003c?\u003e findSerializer(SerializationConfig config,JavaType type,BeanDescription beanDesc){\n  final Class\u003c?\u003e rawType\u003dtype.getRawClass();\n  if (_jdk7Helper !\u003d null) {\n    JsonSerializer\u003c?\u003e ser\u003d_jdk7Helper.getSerializerForJavaNioFilePath(rawType);\n    if (ser !\u003d null) {\n      return ser;\n    }\n  }\n  if ((CLASS_DOM_NODE !\u003d null) \u0026\u0026 CLASS_DOM_NODE.isAssignableFrom(rawType)) {\n    return (JsonSerializer\u003c?\u003e)instantiate(SERIALIZER_FOR_DOM_NODE);\n  }\n  String className\u003drawType.getName();\n  String factoryName;\n  if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSuperClassStartingWith(rawType,PACKAGE_PREFIX_JAVAX_XML)) {\n    factoryName\u003dSERIALIZERS_FOR_JAVAX_XML;\n  }\n else {\n    return null;\n  }\n  Object ob\u003dinstantiate(factoryName);\n  if (ob \u003d\u003d null) {\n    return null;\n  }\n  return ((Serializers)ob).findSerializer(config,type,beanDesc);\n}",
    "begin_line": 86,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalHandlerFactory.findDeserializer#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "signature": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.findDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonDeserializer\u003c?\u003e findDeserializer(JavaType type,DeserializationConfig config,BeanDescription beanDesc) throws JsonMappingException {\n  final Class\u003c?\u003e rawType\u003dtype.getRawClass();\n  if (_jdk7Helper !\u003d null) {\n    JsonDeserializer\u003c?\u003e deser\u003d_jdk7Helper.getDeserializerForJavaNioFilePath(rawType);\n    if (deser !\u003d null) {\n      return deser;\n    }\n  }\n  if ((CLASS_DOM_NODE !\u003d null) \u0026\u0026 CLASS_DOM_NODE.isAssignableFrom(rawType)) {\n    return (JsonDeserializer\u003c?\u003e)instantiate(DESERIALIZER_FOR_DOM_NODE);\n  }\n  if ((CLASS_DOM_DOCUMENT !\u003d null) \u0026\u0026 CLASS_DOM_DOCUMENT.isAssignableFrom(rawType)) {\n    return (JsonDeserializer\u003c?\u003e)instantiate(DESERIALIZER_FOR_DOM_DOCUMENT);\n  }\n  String className\u003drawType.getName();\n  String factoryName;\n  if (className.startsWith(PACKAGE_PREFIX_JAVAX_XML) || hasSuperClassStartingWith(rawType,PACKAGE_PREFIX_JAVAX_XML)) {\n    factoryName\u003dDESERIALIZERS_FOR_JAVAX_XML;\n  }\n else {\n    return null;\n  }\n  Object ob\u003dinstantiate(factoryName);\n  if (ob \u003d\u003d null) {\n    return null;\n  }\n  return ((Deserializers)ob).findBeanDeserializer(type,config,beanDesc);\n}",
    "begin_line": 115,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalHandlerFactory.instantiate#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "signature": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.instantiate(java.lang.String)",
    "snippet": "private Object instantiate(String className){\n  try {\n    return ClassUtil.createInstance(Class.forName(className),false);\n  }\n catch (  LinkageError e) {\n  }\ncatch (  Exception e) {\n  }\n  return null;\n}",
    "begin_line": 154,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalHandlerFactory.hasSuperClassStartingWith#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory",
    "signature": "com.fasterxml.jackson.databind.ext.OptionalHandlerFactory.hasSuperClassStartingWith(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "private boolean hasSuperClassStartingWith(Class\u003c?\u003e rawType,String prefix){\n  for (Class\u003c?\u003e supertype\u003drawType.getSuperclass(); supertype !\u003d null; supertype\u003dsupertype.getSuperclass()) {\n    if (supertype \u003d\u003d Object.class) {\n      return false;\n    }\n    if (supertype.getName().startsWith(prefix)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 172,
    "end_line": 183,
    "comment": "/** \n * Since 2.7 we only need to check for class extension, as all implemented types are classes, not interfaces. This has performance implications for some cases, as we do not need to go over interfaces implemented, just superclasses\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.Annotated#17",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.Annotated()",
    "snippet": "protected Annotated(){\n}",
    "begin_line": 17,
    "end_line": 17,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getAnnotation#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "public abstract \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls);",
    "begin_line": 19,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hasAnnotation#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hasAnnotation(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract boolean hasAnnotation(Class\u003c?\u003e acls);",
    "begin_line": 21,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hasOneOf#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "public abstract boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses);",
    "begin_line": 26,
    "end_line": 26,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getAnnotated#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getAnnotated()",
    "snippet": "public abstract AnnotatedElement getAnnotated();",
    "begin_line": 33,
    "end_line": 33,
    "comment": "/** \n * Method that can be used to find actual JDK element that this instance represents. It is non-null, except for method/constructor parameters which do not have a JDK counterpart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getModifiers#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getModifiers()",
    "snippet": "protected abstract int getModifiers();",
    "begin_line": 35,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.isPublic#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.isPublic()",
    "snippet": "public boolean isPublic(){\n  return Modifier.isPublic(getModifiers());\n}",
    "begin_line": 37,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getName#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getName()",
    "snippet": "public abstract String getName();",
    "begin_line": 41,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getType#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getType()",
    "snippet": "public abstract JavaType getType();",
    "begin_line": 49,
    "end_line": 49,
    "comment": "/** \n * Full generic type of the annotated element; definition of what exactly this means depends on sub-class.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getType#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getType(com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "@Deprecated public final JavaType getType(TypeBindings bogus){\n  return getType();\n}",
    "begin_line": 55,
    "end_line": 57,
    "comment": "/** \n * @deprecated Since 2.7 Use {@link #getType()} instead. To be removed from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getGenericType#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getGenericType()",
    "snippet": "@Deprecated public Type getGenericType(){\n  return getRawType();\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * JDK declared generic type of the annotated element; definition of what exactly this means depends on sub-class. Note that such type cannot be reliably resolved without  {@link TypeResolutionContext}, and as a result use of this method was deprecated in Jackson 2.7: see {@link #getType} for replacement.\n * @deprecated Since 2.7 should instead use {@link #getType()}. To be removed from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.getRawType#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.getRawType()",
    "snippet": "public abstract Class\u003c?\u003e getRawType();",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * \"Raw\" type (type-erased class) of the annotated element; definition of what exactly this means depends on sub-class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.annotations#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.annotations()",
    "snippet": "@Deprecated public abstract Iterable\u003cAnnotation\u003e annotations();",
    "begin_line": 87,
    "end_line": 87,
    "comment": "/** \n * Accessor that can be used to iterate over all the annotations associated with annotated component.\n * @since 2.3\n * @deprecated Since 2.9 should instead use {@link #getAnnotated()}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.equals#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.equals(java.lang.Object)",
    "snippet": "@Override public abstract boolean equals(Object o);",
    "begin_line": 92,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.hashCode#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.hashCode()",
    "snippet": "@Override public abstract int hashCode();",
    "begin_line": 95,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Annotated.toString#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/Annotated.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.Annotated",
    "signature": "com.fasterxml.jackson.databind.introspect.Annotated.toString()",
    "snippet": "@Override public abstract String toString();",
    "begin_line": 98,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.AnnotatedClass#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.AnnotatedClass(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.util.Annotations, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "AnnotatedClass(JavaType type,Class\u003c?\u003e rawType,List\u003cJavaType\u003e superTypes,Class\u003c?\u003e primaryMixIn,Annotations classAnnotations,TypeBindings bindings,AnnotationIntrospector aintr,MixInResolver mir,TypeFactory tf){\n  _type\u003dtype;\n  _class\u003drawType;\n  _superTypes\u003dsuperTypes;\n  _primaryMixIn\u003dprimaryMixIn;\n  _classAnnotations\u003dclassAnnotations;\n  _bindings\u003dbindings;\n  _annotationIntrospector\u003daintr;\n  _mixInResolver\u003dmir;\n  _typeFactory\u003dtf;\n}",
    "begin_line": 130,
    "end_line": 143,
    "comment": "/** \n * Constructor will not do any initializations, to allow for configuring instances differently depending on use cases\n * @param type Fully resolved type; may be `null`, but ONLY if no member fields ormethods are to be accessed\n * @param rawType Type-erased class; pass if no `type` needed or available\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.AnnotatedClass#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.AnnotatedClass(java.lang.Class\u003c?\u003e)",
    "snippet": "AnnotatedClass(Class\u003c?\u003e rawType){\n  _type\u003dnull;\n  _class\u003drawType;\n  _superTypes\u003dCollections.emptyList();\n  _primaryMixIn\u003dnull;\n  _classAnnotations\u003dAnnotationCollector.emptyAnnotations();\n  _bindings\u003dTypeBindings.emptyBindings();\n  _annotationIntrospector\u003dnull;\n  _mixInResolver\u003dnull;\n  _typeFactory\u003dnull;\n}",
    "begin_line": 151,
    "end_line": 161,
    "comment": "/** \n * Constructor (only) used for creating primordial simple types (during bootstrapping) and array type placeholders where no fields or methods are needed.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.construct#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.construct(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "@Deprecated public static AnnotatedClass construct(JavaType type,MapperConfig\u003c?\u003e config){\n  return construct(type,config,(MixInResolver)config);\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.construct#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.construct(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Deprecated public static AnnotatedClass construct(JavaType type,MapperConfig\u003c?\u003e config,MixInResolver mir){\n  return AnnotatedClassResolver.resolve(config,type,mir);\n}",
    "begin_line": 175,
    "end_line": 179,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.constructWithoutSuperTypes#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "@Deprecated public static AnnotatedClass constructWithoutSuperTypes(Class\u003c?\u003e raw,MapperConfig\u003c?\u003e config){\n  return constructWithoutSuperTypes(raw,config,config);\n}",
    "begin_line": 190,
    "end_line": 192,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.constructWithoutSuperTypes#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.constructWithoutSuperTypes(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Deprecated public static AnnotatedClass constructWithoutSuperTypes(Class\u003c?\u003e raw,MapperConfig\u003c?\u003e config,MixInResolver mir){\n  return AnnotatedClassResolver.resolveWithoutSuperTypes(config,raw,mir);\n}",
    "begin_line": 198,
    "end_line": 202,
    "comment": "/** \n * @deprecated Since 2.9, use methods in {@link AnnotatedClassResolver} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.resolveType#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.resolveType(java.lang.reflect.Type)",
    "snippet": "@Override public JavaType resolveType(Type type){\n  return _typeFactory.constructType(type,_bindings);\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotated#222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotated()",
    "snippet": "@Override public Class\u003c?\u003e getAnnotated(){\n  return _class;\n}",
    "begin_line": 222,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getModifiers#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getModifiers()",
    "snippet": "@Override public int getModifiers(){\n  return _class.getModifiers();\n}",
    "begin_line": 225,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getName#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getName()",
    "snippet": "@Override public String getName(){\n  return _class.getName();\n}",
    "begin_line": 228,
    "end_line": 228,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotation#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls){\n  return _classAnnotations.get(acls);\n}",
    "begin_line": 231,
    "end_line": 233,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasAnnotation#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasAnnotation(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean hasAnnotation(Class\u003c?\u003e acls){\n  return _classAnnotations.has(acls);\n}",
    "begin_line": 236,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasOneOf#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  return _classAnnotations.hasOneOf(annoClasses);\n}",
    "begin_line": 241,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getRawType#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _class;\n}",
    "begin_line": 246,
    "end_line": 248,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.annotations#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.annotations()",
    "snippet": "@Override @Deprecated public Iterable\u003cAnnotation\u003e annotations(){\n  if (_classAnnotations instanceof AnnotationMap) {\n    return ((AnnotationMap)_classAnnotations).annotations();\n  }\n else   if (_classAnnotations instanceof AnnotationCollector.OneAnnotation || _classAnnotations instanceof AnnotationCollector.TwoAnnotations) {\n    throw new UnsupportedOperationException(\"please use getAnnotations/ hasAnnotation to check for Annotations\");\n  }\n  return Collections.emptyList();\n}",
    "begin_line": 252,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getType#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _type;\n}",
    "begin_line": 263,
    "end_line": 265,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getAnnotations#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getAnnotations()",
    "snippet": "public Annotations getAnnotations(){\n  return _classAnnotations;\n}",
    "begin_line": 273,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hasAnnotations#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hasAnnotations()",
    "snippet": "public boolean hasAnnotations(){\n  return _classAnnotations.size() \u003e 0;\n}",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getDefaultConstructor#281",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getDefaultConstructor()",
    "snippet": "public AnnotatedConstructor getDefaultConstructor(){\n  return _creators().defaultConstructor;\n}",
    "begin_line": 281,
    "end_line": 283,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getConstructors#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getConstructors()",
    "snippet": "public List\u003cAnnotatedConstructor\u003e getConstructors(){\n  return _creators().constructors;\n}",
    "begin_line": 285,
    "end_line": 287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getFactoryMethods#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getFactoryMethods()",
    "snippet": "public List\u003cAnnotatedMethod\u003e getFactoryMethods(){\n  return _creators().creatorMethods;\n}",
    "begin_line": 292,
    "end_line": 294,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getStaticMethods#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getStaticMethods()",
    "snippet": "@Deprecated public List\u003cAnnotatedMethod\u003e getStaticMethods(){\n  return getFactoryMethods();\n}",
    "begin_line": 300,
    "end_line": 302,
    "comment": "/** \n * @deprecated Since 2.9; use {@link #getFactoryMethods} instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.memberMethods#304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.memberMethods()",
    "snippet": "public Iterable\u003cAnnotatedMethod\u003e memberMethods(){\n  return _methods();\n}",
    "begin_line": 304,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getMemberMethodCount#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getMemberMethodCount()",
    "snippet": "public int getMemberMethodCount(){\n  return _methods().size();\n}",
    "begin_line": 308,
    "end_line": 310,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.findMethod#312",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public AnnotatedMethod findMethod(String name,Class\u003c?\u003e[] paramTypes){\n  return _methods().find(name,paramTypes);\n}",
    "begin_line": 312,
    "end_line": 314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.getFieldCount#316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.getFieldCount()",
    "snippet": "public int getFieldCount(){\n  return _fields().size();\n}",
    "begin_line": 316,
    "end_line": 318,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.fields#320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.fields()",
    "snippet": "public Iterable\u003cAnnotatedField\u003e fields(){\n  return _fields();\n}",
    "begin_line": 320,
    "end_line": 322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.isNonStaticInnerClass#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.isNonStaticInnerClass()",
    "snippet": "public boolean isNonStaticInnerClass(){\n  Boolean B\u003d_nonStaticInnerClass;\n  if (B \u003d\u003d null) {\n    _nonStaticInnerClass\u003dB\u003dClassUtil.isNonStaticInnerClass(_class);\n  }\n  return B.booleanValue();\n}",
    "begin_line": 327,
    "end_line": 334,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._fields#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._fields()",
    "snippet": "private final List\u003cAnnotatedField\u003e _fields(){\n  List\u003cAnnotatedField\u003e f\u003d_fields;\n  if (f \u003d\u003d null) {\n    if (_type \u003d\u003d null) {\n      f\u003dCollections.emptyList();\n    }\n else {\n      f\u003dAnnotatedFieldCollector.collectFields(_annotationIntrospector,this,_mixInResolver,_typeFactory,_type);\n    }\n    _fields\u003df;\n  }\n  return f;\n}",
    "begin_line": 342,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._methods#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._methods()",
    "snippet": "private final AnnotatedMethodMap _methods(){\n  AnnotatedMethodMap m\u003d_memberMethods;\n  if (m \u003d\u003d null) {\n    if (_type \u003d\u003d null) {\n      m\u003dnew AnnotatedMethodMap();\n    }\n else {\n      m\u003dAnnotatedMethodCollector.collectMethods(_annotationIntrospector,this,_mixInResolver,_typeFactory,_type,_superTypes,_primaryMixIn);\n    }\n    _memberMethods\u003dm;\n  }\n  return m;\n}",
    "begin_line": 357,
    "end_line": 373,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass._creators#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass._creators()",
    "snippet": "private final Creators _creators(){\n  Creators c\u003d_creators;\n  if (c \u003d\u003d null) {\n    if (_type \u003d\u003d null) {\n      c\u003dNO_CREATORS;\n    }\n else {\n      c\u003dAnnotatedCreatorCollector.collectCreators(_annotationIntrospector,this,_type,_primaryMixIn);\n    }\n    _creators\u003dc;\n  }\n  return c;\n}",
    "begin_line": 375,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.toString#396",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.toString()",
    "snippet": "@Override public String toString(){\n  return \"[AnnotedClass \" + _class.getName() + \"]\";\n}",
    "begin_line": 396,
    "end_line": 398,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.hashCode#401",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _class.getName().hashCode();\n}",
    "begin_line": 401,
    "end_line": 403,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClass.equals#406",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (!ClassUtil.hasClass(o,getClass())) {\n    return false;\n  }\n  return ((AnnotatedClass)o)._class \u003d\u003d _class;\n}",
    "begin_line": 406,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Creators.Creators#438",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClass.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClass",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClass.Creators(com.fasterxml.jackson.databind.introspect.AnnotatedConstructor, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedConstructor\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.AnnotatedMethod\u003e)",
    "snippet": "public Creators(AnnotatedConstructor defCtor,List\u003cAnnotatedConstructor\u003e ctors,List\u003cAnnotatedMethod\u003e ctorMethods){\n  defaultConstructor\u003ddefCtor;\n  constructors\u003dctors;\n  creatorMethods\u003dctorMethods;\n}",
    "begin_line": 438,
    "end_line": 445,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.AnnotatedClassResolver#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.AnnotatedClassResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "AnnotatedClassResolver(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r){\n  _config\u003dconfig;\n  _type\u003dtype;\n  _class\u003dtype.getRawClass();\n  _mixInResolver\u003dr;\n  _bindings\u003dtype.getBindings();\n  _intr\u003dconfig.isAnnotationProcessingEnabled() ? config.getAnnotationIntrospector() : null;\n  _primaryMixin\u003d_config.findMixInClassFor(_class);\n}",
    "begin_line": 36,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.AnnotatedClassResolver#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.AnnotatedClassResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "AnnotatedClassResolver(MapperConfig\u003c?\u003e config,Class\u003c?\u003e cls,MixInResolver r){\n  _config\u003dconfig;\n  _type\u003dnull;\n  _class\u003dcls;\n  _mixInResolver\u003dr;\n  _bindings\u003dTypeBindings.emptyBindings();\n  if (config \u003d\u003d null) {\n    _intr\u003dnull;\n    _primaryMixin\u003dnull;\n  }\n else {\n    _intr\u003dconfig.isAnnotationProcessingEnabled() ? config.getAnnotationIntrospector() : null;\n    _primaryMixin\u003d_config.findMixInClassFor(_class);\n  }\n}",
    "begin_line": 47,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolve#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolve(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolve(MapperConfig\u003c?\u003e config,JavaType forType,MixInResolver r){\n  if (forType.isArrayType() \u0026\u0026 skippableArray(config,forType.getRawClass())) {\n    return createArrayType(config,forType.getRawClass());\n  }\n  return new AnnotatedClassResolver(config,forType,r).resolveFully();\n}",
    "begin_line": 63,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config,Class\u003c?\u003e forType){\n  return resolveWithoutSuperTypes(config,forType,config);\n}",
    "begin_line": 72,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config,JavaType forType,MixInResolver r){\n  if (forType.isArrayType() \u0026\u0026 skippableArray(config,forType.getRawClass())) {\n    return createArrayType(config,forType.getRawClass());\n  }\n  return new AnnotatedClassResolver(config,forType,r).resolveWithoutSuperTypes();\n}",
    "begin_line": 76,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public static AnnotatedClass resolveWithoutSuperTypes(MapperConfig\u003c?\u003e config,Class\u003c?\u003e forType,MixInResolver r){\n  if (forType.isArray() \u0026\u0026 skippableArray(config,forType)) {\n    return createArrayType(config,forType);\n  }\n  return new AnnotatedClassResolver(config,forType,r).resolveWithoutSuperTypes();\n}",
    "begin_line": 85,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.skippableArray#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.skippableArray(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private static boolean skippableArray(MapperConfig\u003c?\u003e config,Class\u003c?\u003e type){\n  return (config \u003d\u003d null) || (config.findMixInClassFor(type) \u003d\u003d null);\n}",
    "begin_line": 94,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.createPrimordial#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.createPrimordial(java.lang.Class\u003c?\u003e)",
    "snippet": "static AnnotatedClass createPrimordial(Class\u003c?\u003e raw){\n  return new AnnotatedClass(raw);\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Internal helper method used for resolving a small set of \"primordial\" types for which we do not accept any annotation information or overrides. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.createArrayType#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.createArrayType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "static AnnotatedClass createArrayType(MapperConfig\u003c?\u003e config,Class\u003c?\u003e raw){\n  return new AnnotatedClass(raw);\n}",
    "begin_line": 111,
    "end_line": 113,
    "comment": "/** \n * Internal helper method used for resolving array types, unless they happen to have associated mix-in to apply.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveFully#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveFully()",
    "snippet": "AnnotatedClass resolveFully(){\n  List\u003cJavaType\u003e superTypes\u003dClassUtil.findSuperTypes(_type,null,false);\n  return new AnnotatedClass(_type,_class,superTypes,_primaryMixin,resolveClassAnnotations(superTypes),_bindings,_intr,_mixInResolver,_config.getTypeFactory());\n}",
    "begin_line": 115,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveWithoutSuperTypes#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveWithoutSuperTypes()",
    "snippet": "AnnotatedClass resolveWithoutSuperTypes(){\n  List\u003cJavaType\u003e superTypes\u003dCollections.\u003cJavaType\u003eemptyList();\n  return new AnnotatedClass(null,_class,superTypes,_primaryMixin,resolveClassAnnotations(superTypes),_bindings,_intr,_config,_config.getTypeFactory());\n}",
    "begin_line": 123,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver.resolveClassAnnotations#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver.resolveClassAnnotations(java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "private Annotations resolveClassAnnotations(List\u003cJavaType\u003e superTypes){\n  if (_intr \u003d\u003d null) {\n    return NO_ANNOTATIONS;\n  }\n  AnnotationCollector resolvedCA\u003dAnnotationCollector.emptyCollector();\n  if (_primaryMixin !\u003d null) {\n    resolvedCA\u003d_addClassMixIns(resolvedCA,_class,_primaryMixin);\n  }\n  resolvedCA\u003d_addAnnotationsIfNotPresent(resolvedCA,ClassUtil.findClassAnnotations(_class));\n  for (  JavaType type : superTypes) {\n    if (_mixInResolver !\u003d null) {\n      Class\u003c?\u003e cls\u003dtype.getRawClass();\n      resolvedCA\u003d_addClassMixIns(resolvedCA,cls,_mixInResolver.findMixInClassFor(cls));\n    }\n    resolvedCA\u003d_addAnnotationsIfNotPresent(resolvedCA,ClassUtil.findClassAnnotations(type.getRawClass()));\n  }\n  if (_mixInResolver !\u003d null) {\n    resolvedCA\u003d_addClassMixIns(resolvedCA,Object.class,_mixInResolver.findMixInClassFor(Object.class));\n  }\n  return resolvedCA.asAnnotations();\n}",
    "begin_line": 141,
    "end_line": 178,
    "comment": "/** \n * Initialization method that will recursively collect Jackson annotations for this class and all super classes and interfaces.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addClassMixIns#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addClassMixIns(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private AnnotationCollector _addClassMixIns(AnnotationCollector annotations,Class\u003c?\u003e target,Class\u003c?\u003e mixin){\n  if (mixin !\u003d null) {\n    annotations\u003d_addAnnotationsIfNotPresent(annotations,ClassUtil.findClassAnnotations(mixin));\n    for (    Class\u003c?\u003e parent : ClassUtil.findSuperClasses(mixin,target,false)) {\n      annotations\u003d_addAnnotationsIfNotPresent(annotations,ClassUtil.findClassAnnotations(parent));\n    }\n  }\n  return annotations;\n}",
    "begin_line": 180,
    "end_line": 197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addAnnotationsIfNotPresent#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addAnnotationsIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation[])",
    "snippet": "private AnnotationCollector _addAnnotationsIfNotPresent(AnnotationCollector c,Annotation[] anns){\n  if (anns !\u003d null) {\n    for (    Annotation ann : anns) {\n      if (!c.isPresent(ann)) {\n        c\u003dc.addOrOverride(ann);\n        if (_intr.isAnnotationBundle(ann)) {\n          c\u003d_addFromBundleIfNotPresent(c,ann);\n        }\n      }\n    }\n  }\n  return c;\n}",
    "begin_line": 199,
    "end_line": 214,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedClassResolver._addFromBundleIfNotPresent#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedClassResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedClassResolver._addFromBundleIfNotPresent(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation)",
    "snippet": "private AnnotationCollector _addFromBundleIfNotPresent(AnnotationCollector c,Annotation bundle){\n  for (  Annotation ann : ClassUtil.findClassAnnotations(bundle.annotationType())) {\n    if ((ann instanceof Target) || (ann instanceof Retention)) {\n      continue;\n    }\n    if (!c.isPresent(ann)) {\n      c\u003dc.addOrOverride(ann);\n      if (_intr.isAnnotationBundle(ann)) {\n        c\u003d_addFromBundleIfNotPresent(c,ann);\n      }\n    }\n  }\n  return c;\n}",
    "begin_line": 216,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.AnnotatedConstructor#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.AnnotatedConstructor(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.reflect.Constructor\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotationMap, com.fasterxml.jackson.databind.introspect.AnnotationMap[])",
    "snippet": "public AnnotatedConstructor(TypeResolutionContext ctxt,Constructor\u003c?\u003e constructor,AnnotationMap classAnn,AnnotationMap[] paramAnn){\n  super(ctxt,classAnn,paramAnn);\n  if (constructor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null constructor not allowed\");\n  }\n  _constructor\u003dconstructor;\n}",
    "begin_line": 29,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.AnnotatedConstructor#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.AnnotatedConstructor(com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization)",
    "snippet": "protected AnnotatedConstructor(Serialization ser){\n  super(null,null,null);\n  _constructor\u003dnull;\n  _serialization\u003dser;\n}",
    "begin_line": 43,
    "end_line": 48,
    "comment": "/** \n * Method used for JDK serialization support\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.withAnnotations#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "@Override public AnnotatedConstructor withAnnotations(AnnotationMap ann){\n  return new AnnotatedConstructor(_typeContext,_constructor,ann,_paramAnnotations);\n}",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getAnnotated#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getAnnotated()",
    "snippet": "@Override public Constructor\u003c?\u003e getAnnotated(){\n  return _constructor;\n}",
    "begin_line": 62,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getModifiers#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getModifiers()",
    "snippet": "@Override public int getModifiers(){\n  return _constructor.getModifiers();\n}",
    "begin_line": 65,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getName#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getName()",
    "snippet": "@Override public String getName(){\n  return _constructor.getName();\n}",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getType#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _typeContext.resolveType(getRawType());\n}",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getRawType#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _constructor.getDeclaringClass();\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getParameterCount#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getParameterCount()",
    "snippet": "@Override public int getParameterCount(){\n  return _constructor.getParameterTypes().length;\n}",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getRawParameterType#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getRawParameterType(int)",
    "snippet": "@Override public Class\u003c?\u003e getRawParameterType(int index){\n  Class\u003c?\u003e[] types\u003d_constructor.getParameterTypes();\n  return (index \u003e\u003d types.length) ? null : types[index];\n}",
    "begin_line": 92,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getParameterType#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getParameterType(int)",
    "snippet": "@Override public JavaType getParameterType(int index){\n  Type[] types\u003d_constructor.getGenericParameterTypes();\n  if (index \u003e\u003d types.length) {\n    return null;\n  }\n  return _typeContext.resolveType(types[index]);\n}",
    "begin_line": 99,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getGenericParameterType#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getGenericParameterType(int)",
    "snippet": "@Override @Deprecated public Type getGenericParameterType(int index){\n  Type[] types\u003d_constructor.getGenericParameterTypes();\n  if (index \u003e\u003d types.length) {\n    return null;\n  }\n  return types[index];\n}",
    "begin_line": 109,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.call#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call()",
    "snippet": "@Override public final Object call() throws Exception {\n  return _constructor.newInstance();\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.call#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call(java.lang.Object[])",
    "snippet": "@Override public final Object call(Object[] args) throws Exception {\n  return _constructor.newInstance(args);\n}",
    "begin_line": 123,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.call1#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.call1(java.lang.Object)",
    "snippet": "@Override public final Object call1(Object arg) throws Exception {\n  return _constructor.newInstance(arg);\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getDeclaringClass#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getDeclaringClass()",
    "snippet": "@Override public Class\u003c?\u003e getDeclaringClass(){\n  return _constructor.getDeclaringClass();\n}",
    "begin_line": 139,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getMember#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getMember()",
    "snippet": "@Override public Member getMember(){\n  return _constructor;\n}",
    "begin_line": 142,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.setValue#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void setValue(Object pojo,Object value) throws UnsupportedOperationException {\n  throw new UnsupportedOperationException(\"Cannot call setValue() on constructor of \" + getDeclaringClass().getName());\n}",
    "begin_line": 145,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.getValue#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.getValue(java.lang.Object)",
    "snippet": "@Override public Object getValue(Object pojo) throws UnsupportedOperationException {\n  throw new UnsupportedOperationException(\"Cannot call getValue() on constructor of \" + getDeclaringClass().getName());\n}",
    "begin_line": 153,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.toString#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.toString()",
    "snippet": "@Override public String toString(){\n  return \"[constructor for \" + getName() + \", annotations: \"+ _annotations+ \"]\";\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.hashCode#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _constructor.getName().hashCode();\n}",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.equals#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  return ClassUtil.hasClass(o,getClass()) \u0026\u0026 (((AnnotatedConstructor)o)._constructor \u003d\u003d _constructor);\n}",
    "begin_line": 177,
    "end_line": 181,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.writeReplace#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.writeReplace()",
    "snippet": "Object writeReplace(){\n  return new AnnotatedConstructor(new Serialization(_constructor));\n}",
    "begin_line": 189,
    "end_line": 191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedConstructor.readResolve#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.readResolve()",
    "snippet": "Object readResolve(){\n  Class\u003c?\u003e clazz\u003d_serialization.clazz;\n  try {\n    Constructor\u003c?\u003e ctor\u003dclazz.getDeclaredConstructor(_serialization.args);\n    if (!ctor.isAccessible()) {\n      ClassUtil.checkAndFixAccess(ctor,false);\n    }\n    return new AnnotatedConstructor(null,ctor,null,null);\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"Could not find constructor with \" + _serialization.args.length + \" args from Class \u0027\"+ clazz.getName());\n  }\n}",
    "begin_line": 193,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Serialization.Serialization#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedConstructor.Serialization(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "public Serialization(Constructor\u003c?\u003e ctor){\n  clazz\u003dctor.getDeclaringClass();\n  args\u003dctor.getParameterTypes();\n}",
    "begin_line": 220,
    "end_line": 223,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.AnnotatedCreatorCollector#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.AnnotatedCreatorCollector(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.TypeResolutionContext)",
    "snippet": "AnnotatedCreatorCollector(AnnotationIntrospector intr,TypeResolutionContext tc){\n  super(intr);\n  _typeContext\u003dtc;\n}",
    "begin_line": 34,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.collectCreators#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.collectCreators(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public static Creators collectCreators(AnnotationIntrospector intr,TypeResolutionContext tc,JavaType type,Class\u003c?\u003e primaryMixIn){\n  return new AnnotatedCreatorCollector(intr,tc).collect(type,primaryMixIn);\n}",
    "begin_line": 41,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.collect#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.collect(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "Creators collect(JavaType type,Class\u003c?\u003e primaryMixIn){\n  List\u003cAnnotatedConstructor\u003e constructors\u003d_findPotentialConstructors(type,primaryMixIn);\n  List\u003cAnnotatedMethod\u003e factories\u003d_findPotentialFactories(type,primaryMixIn);\n  if (_intr !\u003d null) {\n    if (_defaultConstructor !\u003d null) {\n      if (_intr.hasIgnoreMarker(_defaultConstructor)) {\n        _defaultConstructor\u003dnull;\n      }\n    }\n    for (int i\u003dconstructors.size(); --i \u003e\u003d 0; ) {\n      if (_intr.hasIgnoreMarker(constructors.get(i))) {\n        constructors.remove(i);\n      }\n    }\n    for (int i\u003dfactories.size(); --i \u003e\u003d 0; ) {\n      if (_intr.hasIgnoreMarker(factories.get(i))) {\n        factories.remove(i);\n      }\n    }\n  }\n  return new AnnotatedClass.Creators(_defaultConstructor,constructors,factories);\n}",
    "begin_line": 50,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector._findPotentialConstructors#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector._findPotentialConstructors(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "private List\u003cAnnotatedConstructor\u003e _findPotentialConstructors(JavaType type,Class\u003c?\u003e primaryMixIn){\n  ClassUtil.Ctor defaultCtor\u003dnull;\n  List\u003cClassUtil.Ctor\u003e ctors\u003dnull;\n  if (!type.isEnumType()) {\n    ClassUtil.Ctor[] declaredCtors\u003dClassUtil.getConstructors(type.getRawClass());\n    for (    ClassUtil.Ctor ctor : declaredCtors) {\n      if (!isIncludableConstructor(ctor.getConstructor())) {\n        continue;\n      }\n      if (ctor.getParamCount() \u003d\u003d 0) {\n        defaultCtor\u003dctor;\n      }\n else {\n        if (ctors \u003d\u003d null) {\n          ctors\u003dnew ArrayList\u003c\u003e();\n        }\n        ctors.add(ctor);\n      }\n    }\n  }\n  List\u003cAnnotatedConstructor\u003e result;\n  int ctorCount;\n  if (ctors \u003d\u003d null) {\n    result\u003dCollections.emptyList();\n    if (defaultCtor \u003d\u003d null) {\n      return result;\n    }\n    ctorCount\u003d0;\n  }\n else {\n    ctorCount\u003dctors.size();\n    result\u003dnew ArrayList\u003c\u003e(ctorCount);\n    for (int i\u003d0; i \u003c ctorCount; ++i) {\n      result.add(null);\n    }\n  }\n  if (primaryMixIn !\u003d null) {\n    MemberKey[] ctorKeys\u003dnull;\n    for (    ClassUtil.Ctor mixinCtor : ClassUtil.getConstructors(primaryMixIn)) {\n      if (mixinCtor.getParamCount() \u003d\u003d 0) {\n        if (defaultCtor !\u003d null) {\n          _defaultConstructor\u003dconstructDefaultConstructor(defaultCtor,mixinCtor);\n          defaultCtor\u003dnull;\n        }\n        continue;\n      }\n      if (ctors !\u003d null) {\n        if (ctorKeys \u003d\u003d null) {\n          ctorKeys\u003dnew MemberKey[ctorCount];\n          for (int i\u003d0; i \u003c ctorCount; ++i) {\n            ctorKeys[i]\u003dnew MemberKey(ctors.get(i).getConstructor());\n          }\n        }\n        MemberKey key\u003dnew MemberKey(mixinCtor.getConstructor());\n        for (int i\u003d0; i \u003c ctorCount; ++i) {\n          if (key.equals(ctorKeys[i])) {\n            result.set(i,constructNonDefaultConstructor(ctors.get(i),mixinCtor));\n            break;\n          }\n        }\n      }\n    }\n  }\n  if (defaultCtor !\u003d null) {\n    _defaultConstructor\u003dconstructDefaultConstructor(defaultCtor,null);\n  }\n  for (int i\u003d0; i \u003c ctorCount; ++i) {\n    AnnotatedConstructor ctor\u003dresult.get(i);\n    if (ctor \u003d\u003d null) {\n      result.set(i,constructNonDefaultConstructor(ctors.get(i),null));\n    }\n  }\n  return result;\n}",
    "begin_line": 89,
    "end_line": 175,
    "comment": "/** \n * Helper method for locating constructors (and matching mix-in overrides) we might want to use; this is needed in order to mix information between the two and construct resulting  {@link AnnotatedConstructor}s\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector._findPotentialFactories#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector._findPotentialFactories(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "private List\u003cAnnotatedMethod\u003e _findPotentialFactories(JavaType type,Class\u003c?\u003e primaryMixIn){\n  List\u003cMethod\u003e candidates\u003dnull;\n  for (  Method m : ClassUtil.getClassMethods(type.getRawClass())) {\n    if (!Modifier.isStatic(m.getModifiers())) {\n      continue;\n    }\n    if (candidates \u003d\u003d null) {\n      candidates\u003dnew ArrayList\u003c\u003e();\n    }\n    candidates.add(m);\n  }\n  if (candidates \u003d\u003d null) {\n    return Collections.emptyList();\n  }\n  int factoryCount\u003dcandidates.size();\n  List\u003cAnnotatedMethod\u003e result\u003dnew ArrayList\u003c\u003e(factoryCount);\n  for (int i\u003d0; i \u003c factoryCount; ++i) {\n    result.add(null);\n  }\n  if (primaryMixIn !\u003d null) {\n    MemberKey[] methodKeys\u003dnull;\n    for (    Method mixinFactory : ClassUtil.getDeclaredMethods(primaryMixIn)) {\n      if (!Modifier.isStatic(mixinFactory.getModifiers())) {\n        continue;\n      }\n      if (methodKeys \u003d\u003d null) {\n        methodKeys\u003dnew MemberKey[factoryCount];\n        for (int i\u003d0; i \u003c factoryCount; ++i) {\n          methodKeys[i]\u003dnew MemberKey(candidates.get(i));\n        }\n      }\n      MemberKey key\u003dnew MemberKey(mixinFactory);\n      for (int i\u003d0; i \u003c factoryCount; ++i) {\n        if (key.equals(methodKeys[i])) {\n          result.set(i,constructFactoryCreator(candidates.get(i),mixinFactory));\n          break;\n        }\n      }\n    }\n  }\n  for (int i\u003d0; i \u003c factoryCount; ++i) {\n    AnnotatedMethod factory\u003dresult.get(i);\n    if (factory \u003d\u003d null) {\n      result.set(i,constructFactoryCreator(candidates.get(i),null));\n    }\n  }\n  return result;\n}",
    "begin_line": 177,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.constructDefaultConstructor#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.constructDefaultConstructor(com.fasterxml.jackson.databind.util.ClassUtil.Ctor, com.fasterxml.jackson.databind.util.ClassUtil.Ctor)",
    "snippet": "protected AnnotatedConstructor constructDefaultConstructor(ClassUtil.Ctor ctor,ClassUtil.Ctor mixin){\n  if (_intr \u003d\u003d null) {\n    return new AnnotatedConstructor(_typeContext,ctor.getConstructor(),_emptyAnnotationMap(),NO_ANNOTATION_MAPS);\n  }\n  return new AnnotatedConstructor(_typeContext,ctor.getConstructor(),collectAnnotations(ctor,mixin),collectAnnotations(ctor.getConstructor().getParameterAnnotations(),(mixin \u003d\u003d null) ? null : mixin.getConstructor().getParameterAnnotations()));\n}",
    "begin_line": 236,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.constructNonDefaultConstructor#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.constructNonDefaultConstructor(com.fasterxml.jackson.databind.util.ClassUtil.Ctor, com.fasterxml.jackson.databind.util.ClassUtil.Ctor)",
    "snippet": "protected AnnotatedConstructor constructNonDefaultConstructor(ClassUtil.Ctor ctor,ClassUtil.Ctor mixin){\n  final int paramCount\u003dctor.getParamCount();\n  if (_intr \u003d\u003d null) {\n    return new AnnotatedConstructor(_typeContext,ctor.getConstructor(),_emptyAnnotationMap(),_emptyAnnotationMaps(paramCount));\n  }\n  if (paramCount \u003d\u003d 0) {\n    return new AnnotatedConstructor(_typeContext,ctor.getConstructor(),collectAnnotations(ctor,mixin),NO_ANNOTATION_MAPS);\n  }\n  AnnotationMap[] resolvedAnnotations;\n  Annotation[][] paramAnns\u003dctor.getParameterAnnotations();\n  if (paramCount !\u003d paramAnns.length) {\n    resolvedAnnotations\u003dnull;\n    Class\u003c?\u003e dc\u003dctor.getDeclaringClass();\n    if (dc.isEnum() \u0026\u0026 (paramCount \u003d\u003d paramAnns.length + 2)) {\n      Annotation[][] old\u003dparamAnns;\n      paramAnns\u003dnew Annotation[old.length + 2][];\n      System.arraycopy(old,0,paramAnns,2,old.length);\n      resolvedAnnotations\u003dcollectAnnotations(paramAnns,null);\n    }\n else     if (dc.isMemberClass()) {\n      if (paramCount \u003d\u003d (paramAnns.length + 1)) {\n        Annotation[][] old\u003dparamAnns;\n        paramAnns\u003dnew Annotation[old.length + 1][];\n        System.arraycopy(old,0,paramAnns,1,old.length);\n        paramAnns[0]\u003dNO_ANNOTATIONS;\n        resolvedAnnotations\u003dcollectAnnotations(paramAnns,null);\n      }\n    }\n    if (resolvedAnnotations \u003d\u003d null) {\n      throw new IllegalStateException(String.format(\"Internal error: constructor for %s has mismatch: %d parameters; %d sets of annotations\",ctor.getDeclaringClass().getName(),paramCount,paramAnns.length));\n    }\n  }\n else {\n    resolvedAnnotations\u003dcollectAnnotations(paramAnns,(mixin \u003d\u003d null) ? null : mixin.getParameterAnnotations());\n  }\n  return new AnnotatedConstructor(_typeContext,ctor.getConstructor(),collectAnnotations(ctor,mixin),resolvedAnnotations);\n}",
    "begin_line": 249,
    "end_line": 304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.constructFactoryCreator#306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.constructFactoryCreator(java.lang.reflect.Method, java.lang.reflect.Method)",
    "snippet": "protected AnnotatedMethod constructFactoryCreator(Method m,Method mixin){\n  final int paramCount\u003dm.getParameterTypes().length;\n  if (_intr \u003d\u003d null) {\n    return new AnnotatedMethod(_typeContext,m,_emptyAnnotationMap(),_emptyAnnotationMaps(paramCount));\n  }\n  if (paramCount \u003d\u003d 0) {\n    return new AnnotatedMethod(_typeContext,m,collectAnnotations(m,mixin),NO_ANNOTATION_MAPS);\n  }\n  return new AnnotatedMethod(_typeContext,m,collectAnnotations(m,mixin),collectAnnotations(m.getParameterAnnotations(),(mixin \u003d\u003d null) ? null : mixin.getParameterAnnotations()));\n}",
    "begin_line": 306,
    "end_line": 320,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.collectAnnotations#322",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.collectAnnotations(java.lang.annotation.Annotation[][], java.lang.annotation.Annotation[][])",
    "snippet": "private AnnotationMap[] collectAnnotations(Annotation[][] mainAnns,Annotation[][] mixinAnns){\n  final int count\u003dmainAnns.length;\n  AnnotationMap[] result\u003dnew AnnotationMap[count];\n  for (int i\u003d0; i \u003c count; ++i) {\n    AnnotationCollector c\u003dcollectAnnotations(AnnotationCollector.emptyCollector(),mainAnns[i]);\n    if (mixinAnns !\u003d null) {\n      c\u003dcollectAnnotations(c,mixinAnns[i]);\n    }\n    result[i]\u003dc.asAnnotationMap();\n  }\n  return result;\n}",
    "begin_line": 322,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.collectAnnotations#338",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.collectAnnotations(com.fasterxml.jackson.databind.util.ClassUtil.Ctor, com.fasterxml.jackson.databind.util.ClassUtil.Ctor)",
    "snippet": "private AnnotationMap collectAnnotations(ClassUtil.Ctor main,ClassUtil.Ctor mixin){\n  AnnotationCollector c\u003dcollectAnnotations(main.getConstructor().getDeclaredAnnotations());\n  if (mixin !\u003d null) {\n    c\u003dcollectAnnotations(c,mixin.getConstructor().getDeclaredAnnotations());\n  }\n  return c.asAnnotationMap();\n}",
    "begin_line": 338,
    "end_line": 344,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.collectAnnotations#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.collectAnnotations(java.lang.reflect.AnnotatedElement, java.lang.reflect.AnnotatedElement)",
    "snippet": "private final AnnotationMap collectAnnotations(AnnotatedElement main,AnnotatedElement mixin){\n  AnnotationCollector c\u003dcollectAnnotations(main.getDeclaredAnnotations());\n  if (mixin !\u003d null) {\n    c\u003dcollectAnnotations(c,mixin.getDeclaredAnnotations());\n  }\n  return c.asAnnotationMap();\n}",
    "begin_line": 346,
    "end_line": 352,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedCreatorCollector.isIncludableConstructor#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedCreatorCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedCreatorCollector.isIncludableConstructor(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "private static boolean isIncludableConstructor(Constructor\u003c?\u003e c){\n  return !c.isSynthetic();\n}",
    "begin_line": 355,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.AnnotatedField#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.AnnotatedField(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.reflect.Field, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "public AnnotatedField(TypeResolutionContext contextClass,Field field,AnnotationMap annMap){\n  super(contextClass,annMap);\n  _field\u003dfield;\n}",
    "begin_line": 37,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.withAnnotations#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "@Override public AnnotatedField withAnnotations(AnnotationMap ann){\n  return new AnnotatedField(_typeContext,_field,ann);\n}",
    "begin_line": 44,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.AnnotatedField#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.AnnotatedField(com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization)",
    "snippet": "protected AnnotatedField(Serialization ser){\n  super(null,null);\n  _field\u003dnull;\n  _serialization\u003dser;\n}",
    "begin_line": 51,
    "end_line": 56,
    "comment": "/** \n * Method used for JDK serialization support\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getAnnotated#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getAnnotated()",
    "snippet": "@Override public Field getAnnotated(){\n  return _field;\n}",
    "begin_line": 65,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getModifiers#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getModifiers()",
    "snippet": "@Override public int getModifiers(){\n  return _field.getModifiers();\n}",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getName#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getName()",
    "snippet": "@Override public String getName(){\n  return _field.getName();\n}",
    "begin_line": 71,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getRawType#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _field.getType();\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getGenericType#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getGenericType()",
    "snippet": "@Deprecated @Override public Type getGenericType(){\n  return _field.getGenericType();\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getType#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _typeContext.resolveType(_field.getGenericType());\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getDeclaringClass#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getDeclaringClass()",
    "snippet": "@Override public Class\u003c?\u003e getDeclaringClass(){\n  return _field.getDeclaringClass();\n}",
    "begin_line": 96,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getMember#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getMember()",
    "snippet": "@Override public Member getMember(){\n  return _field;\n}",
    "begin_line": 99,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.setValue#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void setValue(Object pojo,Object value) throws IllegalArgumentException {\n  try {\n    _field.set(pojo,value);\n  }\n catch (  IllegalAccessException e) {\n    throw new IllegalArgumentException(\"Failed to setValue() for field \" + getFullName() + \": \"+ e.getMessage(),e);\n  }\n}",
    "begin_line": 102,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getValue#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getValue(java.lang.Object)",
    "snippet": "@Override public Object getValue(Object pojo) throws IllegalArgumentException {\n  try {\n    return _field.get(pojo);\n  }\n catch (  IllegalAccessException e) {\n    throw new IllegalArgumentException(\"Failed to getValue() for field \" + getFullName() + \": \"+ e.getMessage(),e);\n  }\n}",
    "begin_line": 113,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.getAnnotationCount#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.getAnnotationCount()",
    "snippet": "public int getAnnotationCount(){\n  return _annotations.size();\n}",
    "begin_line": 129,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.isTransient#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.isTransient()",
    "snippet": "public boolean isTransient(){\n  return Modifier.isTransient(getModifiers());\n}",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.hashCode#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _field.getName().hashCode();\n}",
    "begin_line": 137,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.equals#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  return ClassUtil.hasClass(o,getClass()) \u0026\u0026 (((AnnotatedField)o)._field \u003d\u003d _field);\n}",
    "begin_line": 142,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.toString#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.toString()",
    "snippet": "@Override public String toString(){\n  return \"[field \" + getFullName() + \"]\";\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.writeReplace#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.writeReplace()",
    "snippet": "Object writeReplace(){\n  return new AnnotatedField(new Serialization(_field));\n}",
    "begin_line": 159,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedField.readResolve#163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.readResolve()",
    "snippet": "Object readResolve(){\n  Class\u003c?\u003e clazz\u003d_serialization.clazz;\n  try {\n    Field f\u003dclazz.getDeclaredField(_serialization.name);\n    if (!f.isAccessible()) {\n      ClassUtil.checkAndFixAccess(f,false);\n    }\n    return new AnnotatedField(null,f,null);\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"Could not find method \u0027\" + _serialization.name + \"\u0027 from Class \u0027\"+ clazz.getName());\n  }\n}",
    "begin_line": 163,
    "end_line": 176,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Serialization.Serialization#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedField.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedField",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedField.Serialization(java.lang.reflect.Field)",
    "snippet": "public Serialization(Field f){\n  clazz\u003df.getDeclaringClass();\n  name\u003df.getName();\n}",
    "begin_line": 190,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector.AnnotatedFieldCollector#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.AnnotatedFieldCollector(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "AnnotatedFieldCollector(AnnotationIntrospector intr,TypeFactory types,MixInResolver mixins){\n  super(intr);\n  _typeFactory\u003dtypes;\n  _mixInResolver\u003d(intr \u003d\u003d null) ? null : mixins;\n}",
    "begin_line": 23,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector.collectFields#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.collectFields(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static List\u003cAnnotatedField\u003e collectFields(AnnotationIntrospector intr,TypeResolutionContext tc,MixInResolver mixins,TypeFactory types,JavaType type){\n  return new AnnotatedFieldCollector(intr,types,mixins).collect(tc,type);\n}",
    "begin_line": 31,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector.collect#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.collect(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "List\u003cAnnotatedField\u003e collect(TypeResolutionContext tc,JavaType type){\n  Map\u003cString,FieldBuilder\u003e foundFields\u003d_findFields(tc,type,null);\n  if (foundFields \u003d\u003d null) {\n    return Collections.emptyList();\n  }\n  List\u003cAnnotatedField\u003e result\u003dnew ArrayList\u003c\u003e(foundFields.size());\n  for (  FieldBuilder b : foundFields.values()) {\n    result.add(b.build());\n  }\n  return result;\n}",
    "begin_line": 39,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector._findFields#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector._findFields(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.JavaType, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder\u003e)",
    "snippet": "private Map\u003cString,FieldBuilder\u003e _findFields(TypeResolutionContext tc,JavaType type,Map\u003cString,FieldBuilder\u003e fields){\n  JavaType parent\u003dtype.getSuperClass();\n  if (parent \u003d\u003d null) {\n    return fields;\n  }\n  final Class\u003c?\u003e cls\u003dtype.getRawClass();\n  fields\u003d_findFields(new TypeResolutionContext.Basic(_typeFactory,parent.getBindings()),parent,fields);\n  for (  Field f : ClassUtil.getDeclaredFields(cls)) {\n    if (!_isIncludableField(f)) {\n      continue;\n    }\n    if (fields \u003d\u003d null) {\n      fields\u003dnew LinkedHashMap\u003c\u003e();\n    }\n    FieldBuilder b\u003dnew FieldBuilder(tc,f);\n    if (_intr !\u003d null) {\n      b.annotations\u003dcollectAnnotations(b.annotations,f.getDeclaredAnnotations());\n    }\n    fields.put(f.getName(),b);\n  }\n  if (_mixInResolver !\u003d null) {\n    Class\u003c?\u003e mixin\u003d_mixInResolver.findMixInClassFor(cls);\n    if (mixin !\u003d null) {\n      _addFieldMixIns(mixin,cls,fields);\n    }\n  }\n  return fields;\n}",
    "begin_line": 52,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector._addFieldMixIns#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector._addFieldMixIns(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder\u003e)",
    "snippet": "private void _addFieldMixIns(Class\u003c?\u003e mixInCls,Class\u003c?\u003e targetClass,Map\u003cString,FieldBuilder\u003e fields){\n  List\u003cClass\u003c?\u003e\u003e parents\u003dClassUtil.findSuperClasses(mixInCls,targetClass,true);\n  for (  Class\u003c?\u003e mixin : parents) {\n    for (    Field mixinField : ClassUtil.getDeclaredFields(mixin)) {\n      if (!_isIncludableField(mixinField)) {\n        continue;\n      }\n      String name\u003dmixinField.getName();\n      FieldBuilder b\u003dfields.get(name);\n      if (b !\u003d null) {\n        b.annotations\u003dcollectAnnotations(b.annotations,mixinField.getDeclaredAnnotations());\n      }\n    }\n  }\n}",
    "begin_line": 98,
    "end_line": 116,
    "comment": "/** \n * Method called to add field mix-ins from given mix-in class (and its fields) into already collected actual fields (from introspected classes and their super-classes)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedFieldCollector._isIncludableField#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector._isIncludableField(java.lang.reflect.Field)",
    "snippet": "private boolean _isIncludableField(Field f){\n  if (f.isSynthetic()) {\n    return false;\n  }\n  int mods\u003df.getModifiers();\n  if (Modifier.isStatic(mods)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 118,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FieldBuilder.FieldBuilder#139",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.FieldBuilder(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.reflect.Field)",
    "snippet": "public FieldBuilder(TypeResolutionContext tc,Field f){\n  typeContext\u003dtc;\n  field\u003df;\n  annotations\u003dAnnotationCollector.emptyCollector();\n}",
    "begin_line": 139,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FieldBuilder.build#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedFieldCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedFieldCollector.build()",
    "snippet": "public AnnotatedField build(){\n  return new AnnotatedField(typeContext,field,annotations.asAnnotationMap());\n}",
    "begin_line": 145,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.AnnotatedMember#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.AnnotatedMember(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "protected AnnotatedMember(TypeResolutionContext ctxt,AnnotationMap annotations){\n  super();\n  _typeContext\u003dctxt;\n  _annotations\u003dannotations;\n}",
    "begin_line": 35,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.AnnotatedMember#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.AnnotatedMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected AnnotatedMember(AnnotatedMember base){\n  _typeContext\u003dbase._typeContext;\n  _annotations\u003dbase._annotations;\n}",
    "begin_line": 46,
    "end_line": 49,
    "comment": "/** \n * Copy-constructor.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.withAnnotations#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "public abstract Annotated withAnnotations(AnnotationMap fallback);",
    "begin_line": 57,
    "end_line": 57,
    "comment": "/** \n * Fluent factory method that will construct a new instance that uses specified instance annotations instead of currently configured ones.\n * @since 2.9 (promoted from `Annotated`)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getDeclaringClass#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getDeclaringClass()",
    "snippet": "public abstract Class\u003c?\u003e getDeclaringClass();",
    "begin_line": 62,
    "end_line": 62,
    "comment": "/** \n * Actual physical class in which this memmber was declared.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getMember#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getMember()",
    "snippet": "public abstract Member getMember();",
    "begin_line": 64,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getFullName#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getFullName()",
    "snippet": "public String getFullName(){\n  return getDeclaringClass().getName() + \"#\" + getName();\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getTypeContext#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getTypeContext()",
    "snippet": "@Deprecated public TypeResolutionContext getTypeContext(){\n  return _typeContext;\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Accessor for  {@link TypeResolutionContext} that is used for resolvingfull generic type of this member.\n * @since 2.7\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getAnnotation#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getAnnotation(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public final \u003cA extends Annotation\u003eA getAnnotation(Class\u003cA\u003e acls){\n  if (_annotations \u003d\u003d null) {\n    return null;\n  }\n  return _annotations.get(acls);\n}",
    "begin_line": 84,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.hasAnnotation#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.hasAnnotation(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final boolean hasAnnotation(Class\u003c?\u003e acls){\n  if (_annotations \u003d\u003d null) {\n    return false;\n  }\n  return _annotations.has(acls);\n}",
    "begin_line": 92,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.hasOneOf#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  if (_annotations \u003d\u003d null) {\n    return false;\n  }\n  return _annotations.hasOneOf(annoClasses);\n}",
    "begin_line": 100,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.annotations#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.annotations()",
    "snippet": "@Override @Deprecated public Iterable\u003cAnnotation\u003e annotations(){\n  if (_annotations \u003d\u003d null) {\n    return Collections.emptyList();\n  }\n  return _annotations.annotations();\n}",
    "begin_line": 109,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getAllAnnotations#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getAllAnnotations()",
    "snippet": "public AnnotationMap getAllAnnotations(){\n  return _annotations;\n}",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * \u003cp\u003e NOTE: promoted in 2.9 from `Annotated` up\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.fixAccess#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.fixAccess(boolean)",
    "snippet": "public final void fixAccess(boolean force){\n  Member m\u003dgetMember();\n  if (m !\u003d null) {\n    ClassUtil.checkAndFixAccess(m,force);\n  }\n}",
    "begin_line": 136,
    "end_line": 141,
    "comment": "/** \n * Method that can be called to modify access rights, by calling {@link java.lang.reflect.AccessibleObject#setAccessible} onthe underlying annotated element. \u003cp\u003e Note that caller should verify that {@link com.fasterxml.jackson.databind.MapperFeature#CAN_OVERRIDE_ACCESS_MODIFIERS}is enabled before calling this method; as well as pass \u003ccode\u003eforce\u003c/code\u003e flag appropriately.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.setValue#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "public abstract void setValue(Object pojo,Object value) throws UnsupportedOperationException, IllegalArgumentException ;",
    "begin_line": 152,
    "end_line": 153,
    "comment": "/** \n * Optional method that can be used to assign value of this member on given object, if this is a supported operation for member type. \u003cp\u003e This is implemented for fields and single-argument member methods; but not for constructor parameters or other types of methods (like static methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMember.getValue#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMember.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMember",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMember.getValue(java.lang.Object)",
    "snippet": "public abstract Object getValue(Object pojo) throws UnsupportedOperationException, IllegalArgumentException ;",
    "begin_line": 164,
    "end_line": 165,
    "comment": "/** \n * Optional method that can be used to access the value of this member on given object, if this is a supported operation for member type. \u003cp\u003e This is implemented for fields and no-argument member methods; but not for constructor parameters or other types of methods (like static methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.AnnotatedMethod#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.AnnotatedMethod(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.reflect.Method, com.fasterxml.jackson.databind.introspect.AnnotationMap, com.fasterxml.jackson.databind.introspect.AnnotationMap[])",
    "snippet": "public AnnotatedMethod(TypeResolutionContext ctxt,Method method,AnnotationMap classAnn,AnnotationMap[] paramAnnotations){\n  super(ctxt,classAnn,paramAnnotations);\n  if (method \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Cannot construct AnnotatedMethod with null Method\");\n  }\n  _method\u003dmethod;\n}",
    "begin_line": 34,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.AnnotatedMethod#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.AnnotatedMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization)",
    "snippet": "protected AnnotatedMethod(Serialization ser){\n  super(null,null,null);\n  _method\u003dnull;\n  _serialization\u003dser;\n}",
    "begin_line": 48,
    "end_line": 53,
    "comment": "/** \n * Method used for JDK serialization support\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.withAnnotations#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "@Override public AnnotatedMethod withAnnotations(AnnotationMap ann){\n  return new AnnotatedMethod(_typeContext,_method,ann,_paramAnnotations);\n}",
    "begin_line": 56,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getAnnotated#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getAnnotated()",
    "snippet": "@Override public Method getAnnotated(){\n  return _method;\n}",
    "begin_line": 62,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getModifiers#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getModifiers()",
    "snippet": "@Override public int getModifiers(){\n  return _method.getModifiers();\n}",
    "begin_line": 65,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getName#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getName()",
    "snippet": "@Override public String getName(){\n  return _method.getName();\n}",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getType#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _typeContext.resolveType(_method.getGenericReturnType());\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * For methods, this returns declared return type, which is only useful with getters (setters do not return anything; hence `Void` would be returned here)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getRawType#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _method.getReturnType();\n}",
    "begin_line": 86,
    "end_line": 88,
    "comment": "/** \n * For methods, this returns declared return type, which is only useful with getters (setters do not usually return anything; hence \"void\" type is returned here)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getGenericType#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getGenericType()",
    "snippet": "@Deprecated @Override public Type getGenericType(){\n  return _method.getGenericReturnType();\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.call#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.call()",
    "snippet": "@Override public final Object call() throws Exception {\n  return _method.invoke(null);\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.call#108",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.call(java.lang.Object[])",
    "snippet": "@Override public final Object call(Object[] args) throws Exception {\n  return _method.invoke(null,args);\n}",
    "begin_line": 108,
    "end_line": 110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.call1#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.call1(java.lang.Object)",
    "snippet": "@Override public final Object call1(Object arg) throws Exception {\n  return _method.invoke(null,arg);\n}",
    "begin_line": 113,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.callOn#117",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.callOn(java.lang.Object)",
    "snippet": "public final Object callOn(Object pojo) throws Exception {\n  return _method.invoke(pojo,(Object[])null);\n}",
    "begin_line": 117,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.callOnWith#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.callOnWith(java.lang.Object, java.lang.Object)",
    "snippet": "public final Object callOnWith(Object pojo,Object... args) throws Exception {\n  return _method.invoke(pojo,args);\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getParameterCount#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getParameterCount()",
    "snippet": "@Override public int getParameterCount(){\n  return getRawParameterTypes().length;\n}",
    "begin_line": 132,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getRawParameterType#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getRawParameterType(int)",
    "snippet": "@Override public Class\u003c?\u003e getRawParameterType(int index){\n  Class\u003c?\u003e[] types\u003dgetRawParameterTypes();\n  return (index \u003e\u003d types.length) ? null : types[index];\n}",
    "begin_line": 137,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getParameterType#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getParameterType(int)",
    "snippet": "@Override public JavaType getParameterType(int index){\n  Type[] types\u003d_method.getGenericParameterTypes();\n  if (index \u003e\u003d types.length) {\n    return null;\n  }\n  return _typeContext.resolveType(types[index]);\n}",
    "begin_line": 144,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getGenericParameterType#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getGenericParameterType(int)",
    "snippet": "@Override @Deprecated public Type getGenericParameterType(int index){\n  Type[] types\u003dgetGenericParameterTypes();\n  if (index \u003e\u003d types.length) {\n    return null;\n  }\n  return types[index];\n}",
    "begin_line": 154,
    "end_line": 160,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getDeclaringClass#163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getDeclaringClass()",
    "snippet": "@Override public Class\u003c?\u003e getDeclaringClass(){\n  return _method.getDeclaringClass();\n}",
    "begin_line": 163,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getMember#166",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getMember()",
    "snippet": "@Override public Method getMember(){\n  return _method;\n}",
    "begin_line": 166,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.setValue#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void setValue(Object pojo,Object value) throws IllegalArgumentException {\n  try {\n    _method.invoke(pojo,value);\n  }\n catch (  IllegalAccessException|InvocationTargetException e) {\n    throw new IllegalArgumentException(\"Failed to setValue() with method \" + getFullName() + \": \"+ e.getMessage(),e);\n  }\n}",
    "begin_line": 169,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getValue#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getValue(java.lang.Object)",
    "snippet": "@Override public Object getValue(Object pojo) throws IllegalArgumentException {\n  try {\n    return _method.invoke(pojo,(Object[])null);\n  }\n catch (  IllegalAccessException|InvocationTargetException e) {\n    throw new IllegalArgumentException(\"Failed to getValue() with method \" + getFullName() + \": \"+ e.getMessage(),e);\n  }\n}",
    "begin_line": 180,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getFullName#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getFullName()",
    "snippet": "@Override public String getFullName(){\n  return String.format(\"%s(%d params)\",super.getFullName(),getParameterCount());\n}",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getRawParameterTypes#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getRawParameterTypes()",
    "snippet": "public Class\u003c?\u003e[] getRawParameterTypes(){\n  if (_paramClasses \u003d\u003d null) {\n    _paramClasses\u003d_method.getParameterTypes();\n  }\n  return _paramClasses;\n}",
    "begin_line": 201,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getGenericParameterTypes#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getGenericParameterTypes()",
    "snippet": "@Deprecated public Type[] getGenericParameterTypes(){\n  return _method.getGenericParameterTypes();\n}",
    "begin_line": 210,
    "end_line": 212,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.getRawReturnType#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.getRawReturnType()",
    "snippet": "public Class\u003c?\u003e getRawReturnType(){\n  return _method.getReturnType();\n}",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.hasReturnType#225",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.hasReturnType()",
    "snippet": "public boolean hasReturnType(){\n  Class\u003c?\u003e rt\u003dgetRawReturnType();\n  return (rt !\u003d Void.TYPE \u0026\u0026 rt !\u003d Void.class);\n}",
    "begin_line": 225,
    "end_line": 228,
    "comment": "/** \n * Helper method that can be used to check whether method returns a value or not; if return type declared as \u003ccode\u003evoid\u003c/code\u003e, returns false, otherwise true\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.toString#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.toString()",
    "snippet": "@Override public String toString(){\n  return \"[method \" + getFullName() + \"]\";\n}",
    "begin_line": 237,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.hashCode#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _method.getName().hashCode();\n}",
    "begin_line": 242,
    "end_line": 244,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.equals#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  return ClassUtil.hasClass(o,getClass()) \u0026\u0026 (((AnnotatedMethod)o)._method \u003d\u003d _method);\n}",
    "begin_line": 247,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.writeReplace#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.writeReplace()",
    "snippet": "Object writeReplace(){\n  return new AnnotatedMethod(new Serialization(_method));\n}",
    "begin_line": 259,
    "end_line": 261,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethod.readResolve#263",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.readResolve()",
    "snippet": "Object readResolve(){\n  Class\u003c?\u003e clazz\u003d_serialization.clazz;\n  try {\n    Method m\u003dclazz.getDeclaredMethod(_serialization.name,_serialization.args);\n    if (!m.isAccessible()) {\n      ClassUtil.checkAndFixAccess(m,false);\n    }\n    return new AnnotatedMethod(null,m,null,null);\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(\"Could not find method \u0027\" + _serialization.name + \"\u0027 from Class \u0027\"+ clazz.getName());\n  }\n}",
    "begin_line": 263,
    "end_line": 277,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Serialization.Serialization#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethod.Serialization(java.lang.reflect.Method)",
    "snippet": "public Serialization(Method setter){\n  clazz\u003dsetter.getDeclaringClass();\n  name\u003dsetter.getName();\n  args\u003dsetter.getParameterTypes();\n}",
    "begin_line": 292,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector.AnnotatedMethodCollector#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.AnnotatedMethodCollector(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "AnnotatedMethodCollector(AnnotationIntrospector intr,MixInResolver mixins){\n  super(intr);\n  _mixInResolver\u003d(intr \u003d\u003d null) ? null : mixins;\n}",
    "begin_line": 19,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector.collectMethods#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.collectMethods(com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.JavaType, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public static AnnotatedMethodMap collectMethods(AnnotationIntrospector intr,TypeResolutionContext tc,MixInResolver mixins,TypeFactory types,JavaType type,List\u003cJavaType\u003e superTypes,Class\u003c?\u003e primaryMixIn){\n  return new AnnotatedMethodCollector(intr,mixins).collect(types,tc,type,superTypes,primaryMixIn);\n}",
    "begin_line": 26,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector.collect#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.collect(com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.JavaType, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "AnnotatedMethodMap collect(TypeFactory typeFactory,TypeResolutionContext tc,JavaType mainType,List\u003cJavaType\u003e superTypes,Class\u003c?\u003e primaryMixIn){\n  Map\u003cMemberKey,MethodBuilder\u003e methods\u003dnew LinkedHashMap\u003c\u003e();\n  _addMemberMethods(tc,mainType.getRawClass(),methods,primaryMixIn);\n  for (  JavaType type : superTypes) {\n    Class\u003c?\u003e mixin\u003d(_mixInResolver \u003d\u003d null) ? null : _mixInResolver.findMixInClassFor(type.getRawClass());\n    _addMemberMethods(new TypeResolutionContext.Basic(typeFactory,type.getBindings()),type.getRawClass(),methods,mixin);\n  }\n  boolean checkJavaLangObject\u003dfalse;\n  if (_mixInResolver !\u003d null) {\n    Class\u003c?\u003e mixin\u003d_mixInResolver.findMixInClassFor(Object.class);\n    if (mixin !\u003d null) {\n      _addMethodMixIns(tc,mainType.getRawClass(),methods,mixin);\n      checkJavaLangObject\u003dtrue;\n    }\n  }\n  if (checkJavaLangObject \u0026\u0026 (_intr !\u003d null) \u0026\u0026 !methods.isEmpty()) {\n    for (    Map.Entry\u003cMemberKey,MethodBuilder\u003e entry : methods.entrySet()) {\n      MemberKey k\u003dentry.getKey();\n      if (!\"hashCode\".equals(k.getName()) || (0 !\u003d k.argCount())) {\n        continue;\n      }\n      try {\n        Method m\u003dObject.class.getDeclaredMethod(k.getName());\n        if (m !\u003d null) {\n          MethodBuilder b\u003dentry.getValue();\n          b.annotations\u003dcollectDefaultAnnotations(b.annotations,m.getDeclaredAnnotations());\n          b.method\u003dm;\n        }\n      }\n catch (      Exception e) {\n      }\n    }\n  }\n  if (methods.isEmpty()) {\n    return new AnnotatedMethodMap();\n  }\n  Map\u003cMemberKey,AnnotatedMethod\u003e actual\u003dnew LinkedHashMap\u003c\u003e(methods.size());\n  for (  Map.Entry\u003cMemberKey,MethodBuilder\u003e entry : methods.entrySet()) {\n    AnnotatedMethod am\u003dentry.getValue().build();\n    if (am !\u003d null) {\n      actual.put(entry.getKey(),am);\n    }\n  }\n  return new AnnotatedMethodMap(actual);\n}",
    "begin_line": 36,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector._addMemberMethods#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector._addMemberMethods(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.Class\u003c?\u003e, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.MethodBuilder\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private void _addMemberMethods(TypeResolutionContext tc,Class\u003c?\u003e cls,Map\u003cMemberKey,MethodBuilder\u003e methods,Class\u003c?\u003e mixInCls){\n  if (mixInCls !\u003d null) {\n    _addMethodMixIns(tc,cls,methods,mixInCls);\n  }\n  if (cls \u003d\u003d null) {\n    return;\n  }\n  for (  Method m : ClassUtil.getClassMethods(cls)) {\n    if (!_isIncludableMemberMethod(m)) {\n      continue;\n    }\n    final MemberKey key\u003dnew MemberKey(m);\n    MethodBuilder b\u003dmethods.get(key);\n    if (b \u003d\u003d null) {\n      AnnotationCollector c\u003d(_intr \u003d\u003d null) ? AnnotationCollector.emptyCollector() : collectAnnotations(m.getDeclaredAnnotations());\n      methods.put(key,new MethodBuilder(tc,m,c));\n    }\n else {\n      if (_intr !\u003d null) {\n        b.annotations\u003dcollectDefaultAnnotations(b.annotations,m.getDeclaredAnnotations());\n      }\n      Method old\u003db.method;\n      if (old \u003d\u003d null) {\n        b.method\u003dm;\n      }\n else       if (Modifier.isAbstract(old.getModifiers()) \u0026\u0026 !Modifier.isAbstract(m.getModifiers())) {\n        b.method\u003dm;\n        b.typeContext\u003dtc;\n      }\n    }\n  }\n}",
    "begin_line": 99,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector._addMethodMixIns#145",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector._addMethodMixIns(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.Class\u003c?\u003e, java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.MethodBuilder\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "protected void _addMethodMixIns(TypeResolutionContext tc,Class\u003c?\u003e targetClass,Map\u003cMemberKey,MethodBuilder\u003e methods,Class\u003c?\u003e mixInCls){\n  if (_intr \u003d\u003d null) {\n    return;\n  }\n  for (  Class\u003c?\u003e mixin : ClassUtil.findRawSuperTypes(mixInCls,targetClass,true)) {\n    for (    Method m : ClassUtil.getDeclaredMethods(mixin)) {\n      if (!_isIncludableMemberMethod(m)) {\n        continue;\n      }\n      final MemberKey key\u003dnew MemberKey(m);\n      MethodBuilder b\u003dmethods.get(key);\n      Annotation[] anns\u003dm.getDeclaredAnnotations();\n      if (b \u003d\u003d null) {\n        methods.put(key,new MethodBuilder(tc,null,collectAnnotations(anns)));\n      }\n else {\n        b.annotations\u003dcollectDefaultAnnotations(b.annotations,anns);\n      }\n    }\n  }\n}",
    "begin_line": 145,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodCollector._isIncludableMemberMethod#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector._isIncludableMemberMethod(java.lang.reflect.Method)",
    "snippet": "private boolean _isIncludableMemberMethod(Method m){\n  if (Modifier.isStatic(m.getModifiers()) || m.isSynthetic() || m.isBridge()) {\n    return false;\n  }\n  int pcount\u003dm.getParameterTypes().length;\n  return (pcount \u003c\u003d 2);\n}",
    "begin_line": 170,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodBuilder.MethodBuilder#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.MethodBuilder(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, java.lang.reflect.Method, com.fasterxml.jackson.databind.introspect.AnnotationCollector)",
    "snippet": "public MethodBuilder(TypeResolutionContext tc,Method m,AnnotationCollector ann){\n  typeContext\u003dtc;\n  method\u003dm;\n  annotations\u003dann;\n}",
    "begin_line": 191,
    "end_line": 196,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MethodBuilder.build#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodCollector.build()",
    "snippet": "public AnnotatedMethod build(){\n  if (method \u003d\u003d null) {\n    return null;\n  }\n  return new AnnotatedMethod(typeContext,method,annotations.asAnnotationMap(),null);\n}",
    "begin_line": 198,
    "end_line": 205,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.AnnotatedMethodMap#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.AnnotatedMethodMap()",
    "snippet": "public AnnotatedMethodMap(){\n}",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.AnnotatedMethodMap#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.AnnotatedMethodMap(java.util.Map\u003ccom.fasterxml.jackson.databind.introspect.MemberKey,com.fasterxml.jackson.databind.introspect.AnnotatedMethod\u003e)",
    "snippet": "public AnnotatedMethodMap(Map\u003cMemberKey,AnnotatedMethod\u003e m){\n  _methods\u003dm;\n}",
    "begin_line": 21,
    "end_line": 23,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.size#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.size()",
    "snippet": "public int size(){\n  return (_methods \u003d\u003d null) ? 0 : _methods.size();\n}",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.find#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.find(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public AnnotatedMethod find(String name,Class\u003c?\u003e[] paramTypes){\n  if (_methods \u003d\u003d null) {\n    return null;\n  }\n  return _methods.get(new MemberKey(name,paramTypes));\n}",
    "begin_line": 29,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.find#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.find(java.lang.reflect.Method)",
    "snippet": "public AnnotatedMethod find(Method m){\n  if (_methods \u003d\u003d null) {\n    return null;\n  }\n  return _methods.get(new MemberKey(m));\n}",
    "begin_line": 37,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedMethodMap.iterator#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedMethodMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedMethodMap.iterator()",
    "snippet": "@Override public Iterator\u003cAnnotatedMethod\u003e iterator(){\n  if (_methods \u003d\u003d null) {\n    return Collections.emptyIterator();\n  }\n  return _methods.values().iterator();\n}",
    "begin_line": 52,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.AnnotatedParameter#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.AnnotatedParameter(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.introspect.AnnotationMap, int)",
    "snippet": "public AnnotatedParameter(AnnotatedWithParams owner,JavaType type,TypeResolutionContext typeContext,AnnotationMap annotations,int index){\n  super(typeContext,annotations);\n  _owner\u003downer;\n  _type\u003dtype;\n  _index\u003dindex;\n}",
    "begin_line": 41,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.withAnnotations#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.withAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "@Override public AnnotatedParameter withAnnotations(AnnotationMap ann){\n  if (ann \u003d\u003d _annotations) {\n    return this;\n  }\n  return _owner.replaceParameterAnnotations(_index,ann);\n}",
    "begin_line": 52,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getAnnotated#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getAnnotated()",
    "snippet": "@Override public AnnotatedElement getAnnotated(){\n  return null;\n}",
    "begin_line": 70,
    "end_line": 70,
    "comment": "/** \n * Since there is no matching JDK element, this method will always return null\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getModifiers#77",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getModifiers()",
    "snippet": "@Override public int getModifiers(){\n  return _owner.getModifiers();\n}",
    "begin_line": 77,
    "end_line": 77,
    "comment": "/** \n * Returns modifiers of the constructor, as parameters do not have independent modifiers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getName#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getName()",
    "snippet": "@Override public String getName(){\n  return \"\";\n}",
    "begin_line": 84,
    "end_line": 84,
    "comment": "/** \n * Parameters have no names in bytecode (unlike in source code), will always return empty String (\"\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getRawType#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getRawType()",
    "snippet": "@Override public Class\u003c?\u003e getRawType(){\n  return _type.getRawClass();\n}",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getType#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getType()",
    "snippet": "@Override public JavaType getType(){\n  return _type;\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getGenericType#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getGenericType()",
    "snippet": "@Deprecated @Override public Type getGenericType(){\n  return _owner.getGenericParameterType(_index);\n}",
    "begin_line": 98,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getDeclaringClass#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getDeclaringClass()",
    "snippet": "@Override public Class\u003c?\u003e getDeclaringClass(){\n  return _owner.getDeclaringClass();\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getMember#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getMember()",
    "snippet": "@Override public Member getMember(){\n  return _owner.getMember();\n}",
    "begin_line": 114,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.setValue#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.setValue(java.lang.Object, java.lang.Object)",
    "snippet": "@Override public void setValue(Object pojo,Object value) throws UnsupportedOperationException {\n  throw new UnsupportedOperationException(\"Cannot call setValue() on constructor parameter of \" + getDeclaringClass().getName());\n}",
    "begin_line": 122,
    "end_line": 126,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getValue#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getValue(java.lang.Object)",
    "snippet": "@Override public Object getValue(Object pojo) throws UnsupportedOperationException {\n  throw new UnsupportedOperationException(\"Cannot call getValue() on constructor parameter of \" + getDeclaringClass().getName());\n}",
    "begin_line": 129,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getParameterType#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getParameterType()",
    "snippet": "public Type getParameterType(){\n  return _type;\n}",
    "begin_line": 141,
    "end_line": 141,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getOwner#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getOwner()",
    "snippet": "public AnnotatedWithParams getOwner(){\n  return _owner;\n}",
    "begin_line": 149,
    "end_line": 149,
    "comment": "/** \n * Accessor for \u0027owner\u0027 of this parameter; method or constructor that has this parameter as member of its argument list.\n * @return Owner (member or creator) object of this parameter\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.getIndex#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.getIndex()",
    "snippet": "public int getIndex(){\n  return _index;\n}",
    "begin_line": 156,
    "end_line": 156,
    "comment": "/** \n * Accessor for index of this parameter within argument list\n * @return Index of this parameter within argument list\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.hashCode#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _owner.hashCode() + _index;\n}",
    "begin_line": 165,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.equals#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (!ClassUtil.hasClass(o,getClass())) {\n    return false;\n  }\n  AnnotatedParameter other\u003d(AnnotatedParameter)o;\n  return other._owner.equals(_owner) \u0026\u0026 (other._index \u003d\u003d _index);\n}",
    "begin_line": 170,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedParameter.toString#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedParameter.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedParameter.toString()",
    "snippet": "@Override public String toString(){\n  return \"[parameter #\" + getIndex() + \", annotations: \"+ _annotations+ \"]\";\n}",
    "begin_line": 180,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.AnnotatedWithParams#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.AnnotatedWithParams(com.fasterxml.jackson.databind.introspect.TypeResolutionContext, com.fasterxml.jackson.databind.introspect.AnnotationMap, com.fasterxml.jackson.databind.introspect.AnnotationMap[])",
    "snippet": "protected AnnotatedWithParams(TypeResolutionContext ctxt,AnnotationMap annotations,AnnotationMap[] paramAnnotations){\n  super(ctxt,annotations);\n  _paramAnnotations\u003dparamAnnotations;\n}",
    "begin_line": 29,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.AnnotatedWithParams#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.AnnotatedWithParams(com.fasterxml.jackson.databind.introspect.AnnotatedWithParams, com.fasterxml.jackson.databind.introspect.AnnotationMap[])",
    "snippet": "protected AnnotatedWithParams(AnnotatedWithParams base,AnnotationMap[] paramAnnotations){\n  super(base);\n  _paramAnnotations\u003dparamAnnotations;\n}",
    "begin_line": 38,
    "end_line": 41,
    "comment": "/** \n * @since 2.8.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.addOrOverrideParam#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.addOrOverrideParam(int, java.lang.annotation.Annotation)",
    "snippet": "public final void addOrOverrideParam(int paramIndex,Annotation a){\n  AnnotationMap old\u003d_paramAnnotations[paramIndex];\n  if (old \u003d\u003d null) {\n    old\u003dnew AnnotationMap();\n    _paramAnnotations[paramIndex]\u003dold;\n  }\n  old.add(a);\n}",
    "begin_line": 49,
    "end_line": 57,
    "comment": "/** \n * Method called to override a method parameter annotation, usually due to a mix-in annotation masking or overriding an annotation \u0027real\u0027 method has.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.replaceParameterAnnotations#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.replaceParameterAnnotations(int, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "protected AnnotatedParameter replaceParameterAnnotations(int index,AnnotationMap ann){\n  _paramAnnotations[index]\u003dann;\n  return getParameter(index);\n}",
    "begin_line": 63,
    "end_line": 67,
    "comment": "/** \n * Method called by parameter object when an augmented instance is created; needs to replace parameter with new instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getParameterAnnotations#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getParameterAnnotations(int)",
    "snippet": "public final AnnotationMap getParameterAnnotations(int index){\n  if (_paramAnnotations !\u003d null) {\n    if (index \u003e\u003d 0 \u0026\u0026 index \u003c _paramAnnotations.length) {\n      return _paramAnnotations[index];\n    }\n  }\n  return null;\n}",
    "begin_line": 75,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getParameter#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getParameter(int)",
    "snippet": "public final AnnotatedParameter getParameter(int index){\n  return new AnnotatedParameter(this,getParameterType(index),_typeContext,getParameterAnnotations(index),index);\n}",
    "begin_line": 85,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getParameterCount#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getParameterCount()",
    "snippet": "public abstract int getParameterCount();",
    "begin_line": 90,
    "end_line": 90,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getRawParameterType#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getRawParameterType(int)",
    "snippet": "public abstract Class\u003c?\u003e getRawParameterType(int index);",
    "begin_line": 92,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getParameterType#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getParameterType(int)",
    "snippet": "public abstract JavaType getParameterType(int index);",
    "begin_line": 97,
    "end_line": 97,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getGenericParameterType#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getGenericParameterType(int)",
    "snippet": "@Deprecated public abstract Type getGenericParameterType(int index);",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * @deprecated Since 2.7, remove in 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.getAnnotationCount#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.getAnnotationCount()",
    "snippet": "public final int getAnnotationCount(){\n  return _annotations.size();\n}",
    "begin_line": 105,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.call#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.call()",
    "snippet": "public abstract Object call() throws Exception ;",
    "begin_line": 115,
    "end_line": 115,
    "comment": "/** \n * Method that can be used to (try to) call this object without arguments. This may succeed or fail, depending on expected number of arguments: caller needs to take care to pass correct number. Exceptions are thrown directly from actual low-level call. \u003cp\u003e Note: only works for constructors and static methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.call#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.call(java.lang.Object[])",
    "snippet": "public abstract Object call(Object[] args) throws Exception ;",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * Method that can be used to (try to) call this object with specified arguments. This may succeed or fail, depending on expected number of arguments: caller needs to take care to pass correct number. Exceptions are thrown directly from actual low-level call. \u003cp\u003e Note: only works for constructors and static methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotatedWithParams.call1#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotatedWithParams.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotatedWithParams.call1(java.lang.Object)",
    "snippet": "public abstract Object call1(Object arg) throws Exception ;",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * Method that can be used to (try to) call this object with single arguments. This may succeed or fail, depending on expected number of arguments: caller needs to take care to pass correct number. Exceptions are thrown directly from actual low-level call. \u003cp\u003e Note: only works for constructors and static methods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.AnnotationCollector#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.AnnotationCollector(java.lang.Object)",
    "snippet": "protected AnnotationCollector(Object d){\n  _data\u003dd;\n}",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyAnnotations#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyAnnotations()",
    "snippet": "public static Annotations emptyAnnotations(){\n  return NO_ANNOTATIONS;\n}",
    "begin_line": 29,
    "end_line": 29,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyCollector#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyCollector()",
    "snippet": "public static AnnotationCollector emptyCollector(){\n  return EmptyCollector.instance;\n}",
    "begin_line": 31,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.emptyCollector#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.emptyCollector(java.lang.Object)",
    "snippet": "public static AnnotationCollector emptyCollector(Object data){\n  return new EmptyCollector(data);\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.asAnnotations#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "public abstract Annotations asAnnotations();",
    "begin_line": 39,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.asAnnotationMap#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "public abstract AnnotationMap asAnnotationMap();",
    "begin_line": 40,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.getData#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.getData()",
    "snippet": "public Object getData(){\n  return _data;\n}",
    "begin_line": 42,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.isPresent#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "public abstract boolean isPresent(Annotation ann);",
    "begin_line": 52,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationCollector.addOrOverride#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "public abstract AnnotationCollector addOrOverride(Annotation ann);",
    "begin_line": 54,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.EmptyCollector#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.EmptyCollector(java.lang.Object)",
    "snippet": "EmptyCollector(Object data){\n  super(data);\n}",
    "begin_line": 66,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.asAnnotations#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override public Annotations asAnnotations(){\n  return NO_ANNOTATIONS;\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.asAnnotationMap#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override public AnnotationMap asAnnotationMap(){\n  return new AnnotationMap();\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.isPresent#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override public boolean isPresent(Annotation ann){\n  return false;\n}",
    "begin_line": 79,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EmptyCollector.addOrOverride#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override public AnnotationCollector addOrOverride(Annotation ann){\n  return new OneCollector(_data,ann.annotationType(),ann);\n}",
    "begin_line": 82,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.OneCollector#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneCollector(java.lang.Object, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public OneCollector(Object data,Class\u003c?\u003e type,Annotation value){\n  super(data);\n  _type\u003dtype;\n  _value\u003dvalue;\n}",
    "begin_line": 92,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.asAnnotations#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override public Annotations asAnnotations(){\n  return new OneAnnotation(_type,_value);\n}",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.asAnnotationMap#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override public AnnotationMap asAnnotationMap(){\n  return AnnotationMap.of(_type,_value);\n}",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.isPresent#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override public boolean isPresent(Annotation ann){\n  return ann.annotationType() \u003d\u003d _type;\n}",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneCollector.addOrOverride#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override public AnnotationCollector addOrOverride(Annotation ann){\n  final Class\u003c?\u003e type\u003dann.annotationType();\n  if (_type \u003d\u003d type) {\n    _value\u003dann;\n    return this;\n  }\n  return new NCollector(_data,_type,_value,type,ann);\n}",
    "begin_line": 115,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.NCollector#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.NCollector(java.lang.Object, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public NCollector(Object data,Class\u003c?\u003e type1,Annotation value1,Class\u003c?\u003e type2,Annotation value2){\n  super(data);\n  _annotations\u003dnew HashMap\u003c\u003e();\n  _annotations.put(type1,value1);\n  _annotations.put(type2,value2);\n}",
    "begin_line": 130,
    "end_line": 137,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.asAnnotations#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotations()",
    "snippet": "@Override public Annotations asAnnotations(){\n  if (_annotations.size() \u003d\u003d 2) {\n    Iterator\u003cMap.Entry\u003cClass\u003c?\u003e,Annotation\u003e\u003e it\u003d_annotations.entrySet().iterator();\n    Map.Entry\u003cClass\u003c?\u003e,Annotation\u003e en1\u003dit.next(), en2\u003dit.next();\n    return new TwoAnnotations(en1.getKey(),en1.getValue(),en2.getKey(),en2.getValue());\n  }\n  return new AnnotationMap(_annotations);\n}",
    "begin_line": 140,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.asAnnotationMap#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.asAnnotationMap()",
    "snippet": "@Override public AnnotationMap asAnnotationMap(){\n  AnnotationMap result\u003dnew AnnotationMap();\n  for (  Annotation ann : _annotations.values()) {\n    result.add(ann);\n  }\n  return result;\n}",
    "begin_line": 151,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.isPresent#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.isPresent(java.lang.annotation.Annotation)",
    "snippet": "@Override public boolean isPresent(Annotation ann){\n  return _annotations.containsKey(ann.annotationType());\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NCollector.addOrOverride#165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.addOrOverride(java.lang.annotation.Annotation)",
    "snippet": "@Override public AnnotationCollector addOrOverride(Annotation ann){\n  _annotations.put(ann.annotationType(),ann);\n  return this;\n}",
    "begin_line": 165,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.NoAnnotations#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.NoAnnotations()",
    "snippet": "NoAnnotations(){\n}",
    "begin_line": 188,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.get#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@Override public \u003cA extends Annotation\u003eA get(Class\u003cA\u003e cls){\n  return null;\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.has#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean has(Class\u003c?\u003e cls){\n  return false;\n}",
    "begin_line": 196,
    "end_line": 198,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.hasOneOf#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  return false;\n}",
    "begin_line": 201,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NoAnnotations.size#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override public int size(){\n  return 0;\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.OneAnnotation#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.OneAnnotation(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public OneAnnotation(Class\u003c?\u003e type,Annotation value){\n  _type\u003dtype;\n  _value\u003dvalue;\n}",
    "begin_line": 219,
    "end_line": 222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.get#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public \u003cA extends Annotation\u003eA get(Class\u003cA\u003e cls){\n  if (_type \u003d\u003d cls) {\n    return (A)_value;\n  }\n  return null;\n}",
    "begin_line": 226,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.has#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean has(Class\u003c?\u003e cls){\n  return (_type \u003d\u003d cls);\n}",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.hasOneOf#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  for (  Class\u003c?\u003e cls : annoClasses) {\n    if (cls \u003d\u003d _type) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 239,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OneAnnotation.size#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override public int size(){\n  return 1;\n}",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.TwoAnnotations#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.TwoAnnotations(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation, java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public TwoAnnotations(Class\u003c?\u003e type1,Annotation value1,Class\u003c?\u003e type2,Annotation value2){\n  _type1\u003dtype1;\n  _value1\u003dvalue1;\n  _type2\u003dtype2;\n  _value2\u003dvalue2;\n}",
    "begin_line": 262,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.get#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public \u003cA extends Annotation\u003eA get(Class\u003cA\u003e cls){\n  if (_type1 \u003d\u003d cls) {\n    return (A)_value1;\n  }\n  if (_type2 \u003d\u003d cls) {\n    return (A)_value2;\n  }\n  return null;\n}",
    "begin_line": 272,
    "end_line": 280,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.has#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean has(Class\u003c?\u003e cls){\n  return (_type1 \u003d\u003d cls) || (_type2 \u003d\u003d cls);\n}",
    "begin_line": 283,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.hasOneOf#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  for (  Class\u003c?\u003e cls : annoClasses) {\n    if ((cls \u003d\u003d _type1) || (cls \u003d\u003d _type2)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 288,
    "end_line": 295,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TwoAnnotations.size#298",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationCollector.size()",
    "snippet": "@Override public int size(){\n  return 2;\n}",
    "begin_line": 298,
    "end_line": 300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.AnnotationMap#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.AnnotationMap()",
    "snippet": "public AnnotationMap(){\n}",
    "begin_line": 18,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.of#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.of(java.lang.Class\u003c?\u003e, java.lang.annotation.Annotation)",
    "snippet": "public static AnnotationMap of(Class\u003c?\u003e type,Annotation value){\n  HashMap\u003cClass\u003c?\u003e,Annotation\u003e ann\u003dnew HashMap\u003c\u003e(4);\n  ann.put(type,value);\n  return new AnnotationMap(ann);\n}",
    "begin_line": 20,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.AnnotationMap#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.AnnotationMap(java.util.HashMap\u003cjava.lang.Class\u003c?\u003e,java.lang.annotation.Annotation\u003e)",
    "snippet": "AnnotationMap(HashMap\u003cClass\u003c?\u003e,Annotation\u003e a){\n  _annotations\u003da;\n}",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.get#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.get(java.lang.Class\u003cA\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") @Override public \u003cA extends Annotation\u003eA get(Class\u003cA\u003e cls){\n  if (_annotations \u003d\u003d null) {\n    return null;\n  }\n  return (A)_annotations.get(cls);\n}",
    "begin_line": 38,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.has#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.has(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public boolean has(Class\u003c?\u003e cls){\n  if (_annotations \u003d\u003d null) {\n    return false;\n  }\n  return _annotations.containsKey(cls);\n}",
    "begin_line": 47,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.hasOneOf#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.hasOneOf(java.lang.Class\u003c? extends java.lang.annotation.Annotation\u003e[])",
    "snippet": "@Override public boolean hasOneOf(Class\u003c? extends Annotation\u003e[] annoClasses){\n  if (_annotations !\u003d null) {\n    for (int i\u003d0, end\u003dannoClasses.length; i \u003c end; ++i) {\n      if (_annotations.containsKey(annoClasses[i])) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 62,
    "end_line": 71,
    "comment": "/** \n * Helper method that can be used for a \"bulk\" check to see if at least one of given annotation types is included within this map.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.annotations#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.annotations()",
    "snippet": "public Iterable\u003cAnnotation\u003e annotations(){\n  if (_annotations \u003d\u003d null || _annotations.size() \u003d\u003d 0) {\n    return Collections.emptyList();\n  }\n  return _annotations.values();\n}",
    "begin_line": 82,
    "end_line": 87,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.merge#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.merge(com.fasterxml.jackson.databind.introspect.AnnotationMap, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "public static AnnotationMap merge(AnnotationMap primary,AnnotationMap secondary){\n  if (primary \u003d\u003d null || primary._annotations \u003d\u003d null || primary._annotations.isEmpty()) {\n    return secondary;\n  }\n  if (secondary \u003d\u003d null || secondary._annotations \u003d\u003d null || secondary._annotations.isEmpty()) {\n    return primary;\n  }\n  HashMap\u003cClass\u003c?\u003e,Annotation\u003e annotations\u003dnew HashMap\u003cClass\u003c?\u003e,Annotation\u003e();\n  for (  Annotation ann : secondary._annotations.values()) {\n    annotations.put(ann.annotationType(),ann);\n  }\n  for (  Annotation ann : primary._annotations.values()) {\n    annotations.put(ann.annotationType(),ann);\n  }\n  return new AnnotationMap(annotations);\n}",
    "begin_line": 89,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.size#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.size()",
    "snippet": "@Override public int size(){\n  return (_annotations \u003d\u003d null) ? 0 : _annotations.size();\n}",
    "begin_line": 110,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.addIfNotPresent#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.addIfNotPresent(java.lang.annotation.Annotation)",
    "snippet": "public boolean addIfNotPresent(Annotation ann){\n  if (_annotations \u003d\u003d null || !_annotations.containsKey(ann.annotationType())) {\n    _add(ann);\n    return true;\n  }\n  return false;\n}",
    "begin_line": 118,
    "end_line": 125,
    "comment": "/** \n * Method called to add specified annotation in the Map, but only if it didn\u0027t yet exist.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.add#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.add(java.lang.annotation.Annotation)",
    "snippet": "public boolean add(Annotation ann){\n  return _add(ann);\n}",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Method called to add specified annotation in the Map.\n * @return True if the addition changed the contents, that is, this map did notalready have specified annotation\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap.toString#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap.toString()",
    "snippet": "@Override public String toString(){\n  if (_annotations \u003d\u003d null) {\n    return \"[null]\";\n  }\n  return _annotations.toString();\n}",
    "begin_line": 138,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AnnotationMap._add#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/AnnotationMap.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.AnnotationMap",
    "signature": "com.fasterxml.jackson.databind.introspect.AnnotationMap._add(java.lang.annotation.Annotation)",
    "snippet": "protected final boolean _add(Annotation ann){\n  if (_annotations \u003d\u003d null) {\n    _annotations\u003dnew HashMap\u003cClass\u003c?\u003e,Annotation\u003e();\n  }\n  Annotation previous\u003d_annotations.put(ann.annotationType(),ann);\n  return (previous \u003d\u003d null) || !previous.equals(ann);\n}",
    "begin_line": 151,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "protected BasicBeanDescription(POJOPropertiesCollector coll,JavaType type,AnnotatedClass classDef){\n  super(type);\n  _propCollector\u003dcoll;\n  _config\u003dcoll.getConfig();\n  if (_config \u003d\u003d null) {\n    _annotationIntrospector\u003dnull;\n  }\n else {\n    _annotationIntrospector\u003d_config.getAnnotationIntrospector();\n  }\n  _classInfo\u003dclassDef;\n}",
    "begin_line": 93,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected BasicBeanDescription(MapperConfig\u003c?\u003e config,JavaType type,AnnotatedClass classDef,List\u003cBeanPropertyDefinition\u003e props){\n  super(type);\n  _propCollector\u003dnull;\n  _config\u003dconfig;\n  if (_config \u003d\u003d null) {\n    _annotationIntrospector\u003dnull;\n  }\n else {\n    _annotationIntrospector\u003d_config.getAnnotationIntrospector();\n  }\n  _classInfo\u003dclassDef;\n  _properties\u003dprops;\n}",
    "begin_line": 112,
    "end_line": 126,
    "comment": "/** \n * Alternate constructor used in cases where property information is not needed, only class info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.BasicBeanDescription#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.BasicBeanDescription(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "protected BasicBeanDescription(POJOPropertiesCollector coll){\n  this(coll,coll.getType(),coll.getClassDef());\n  _objectIdInfo\u003dcoll.getObjectIdInfo();\n}",
    "begin_line": 128,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forDeserialization#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forDeserialization(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll){\n  return new BasicBeanDescription(coll);\n}",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Factory method to use for constructing an instance to use for building deserializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forSerialization#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forSerialization(com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector)",
    "snippet": "public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll){\n  return new BasicBeanDescription(coll);\n}",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Factory method to use for constructing an instance to use for building serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.forOtherUse#155",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.forOtherUse(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public static BasicBeanDescription forOtherUse(MapperConfig\u003c?\u003e config,JavaType type,AnnotatedClass ac){\n  return new BasicBeanDescription(config,type,ac,Collections.\u003cBeanPropertyDefinition\u003eemptyList());\n}",
    "begin_line": 155,
    "end_line": 160,
    "comment": "/** \n * Factory method to use for constructing an instance to use for purposes other than building serializers or deserializers; will only have information on class, not on properties.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._properties#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._properties()",
    "snippet": "protected List\u003cBeanPropertyDefinition\u003e _properties(){\n  if (_properties \u003d\u003d null) {\n    _properties\u003d_propCollector.getProperties();\n  }\n  return _properties;\n}",
    "begin_line": 162,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.removeProperty#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.removeProperty(java.lang.String)",
    "snippet": "public boolean removeProperty(String propName){\n  Iterator\u003cBeanPropertyDefinition\u003e it\u003d_properties().iterator();\n  while (it.hasNext()) {\n    BeanPropertyDefinition prop\u003dit.next();\n    if (prop.getName().equals(propName)) {\n      it.remove();\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 182,
    "end_line": 193,
    "comment": "/** \n * Method that can be used to prune unwanted properties, during construction of serializers and deserializers. Use with utmost care, if at all...\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.addProperty#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.addProperty(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition)",
    "snippet": "public boolean addProperty(BeanPropertyDefinition def){\n  if (hasProperty(def.getFullName())) {\n    return false;\n  }\n  _properties().add(def);\n  return true;\n}",
    "begin_line": 195,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.hasProperty#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.hasProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public boolean hasProperty(PropertyName name){\n  return findProperty(name) !\u003d null;\n}",
    "begin_line": 208,
    "end_line": 210,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findProperty#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findProperty(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public BeanPropertyDefinition findProperty(PropertyName name){\n  for (  BeanPropertyDefinition prop : _properties()) {\n    if (prop.hasName(name)) {\n      return prop;\n    }\n  }\n  return null;\n}",
    "begin_line": 215,
    "end_line": 223,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getClassInfo#232",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getClassInfo()",
    "snippet": "@Override public AnnotatedClass getClassInfo(){\n  return _classInfo;\n}",
    "begin_line": 232,
    "end_line": 232,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getObjectIdInfo#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getObjectIdInfo()",
    "snippet": "@Override public ObjectIdInfo getObjectIdInfo(){\n  return _objectIdInfo;\n}",
    "begin_line": 235,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findProperties#238",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findProperties()",
    "snippet": "@Override public List\u003cBeanPropertyDefinition\u003e findProperties(){\n  return _properties();\n}",
    "begin_line": 238,
    "end_line": 240,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findJsonValueMethod#244",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueMethod()",
    "snippet": "@Override @Deprecated public AnnotatedMethod findJsonValueMethod(){\n  return (_propCollector \u003d\u003d null) ? null : _propCollector.getJsonValueMethod();\n}",
    "begin_line": 244,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findJsonValueAccessor#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findJsonValueAccessor()",
    "snippet": "@Override public AnnotatedMember findJsonValueAccessor(){\n  return (_propCollector \u003d\u003d null) ? null : _propCollector.getJsonValueAccessor();\n}",
    "begin_line": 250,
    "end_line": 253,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getIgnoredPropertyNames#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getIgnoredPropertyNames()",
    "snippet": "@Override public Set\u003cString\u003e getIgnoredPropertyNames(){\n  Set\u003cString\u003e ign\u003d(_propCollector \u003d\u003d null) ? null : _propCollector.getIgnoredPropertyNames();\n  if (ign \u003d\u003d null) {\n    return Collections.emptySet();\n  }\n  return ign;\n}",
    "begin_line": 256,
    "end_line": 263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.hasKnownClassAnnotations#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.hasKnownClassAnnotations()",
    "snippet": "@Override public boolean hasKnownClassAnnotations(){\n  return _classInfo.hasAnnotations();\n}",
    "begin_line": 266,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getClassAnnotations#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getClassAnnotations()",
    "snippet": "@Override public Annotations getClassAnnotations(){\n  return _classInfo.getAnnotations();\n}",
    "begin_line": 271,
    "end_line": 273,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.bindingsForBeanType#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.bindingsForBeanType()",
    "snippet": "@Override @Deprecated public TypeBindings bindingsForBeanType(){\n  return _type.getBindings();\n}",
    "begin_line": 277,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.resolveType#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.resolveType(java.lang.reflect.Type)",
    "snippet": "@Override @Deprecated public JavaType resolveType(java.lang.reflect.Type jdkType){\n  if (jdkType \u003d\u003d null) {\n    return null;\n  }\n  return _config.getTypeFactory().constructType(jdkType,_type.getBindings());\n}",
    "begin_line": 283,
    "end_line": 288,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDefaultConstructor#291",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDefaultConstructor()",
    "snippet": "@Override public AnnotatedConstructor findDefaultConstructor(){\n  return _classInfo.getDefaultConstructor();\n}",
    "begin_line": 291,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findAnySetterAccessor#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findAnySetterAccessor()",
    "snippet": "@Override public AnnotatedMember findAnySetterAccessor() throws IllegalArgumentException {\n  if (_propCollector !\u003d null) {\n    AnnotatedMethod anyMethod\u003d_propCollector.getAnySetterMethod();\n    if (anyMethod !\u003d null) {\n      Class\u003c?\u003e type\u003danyMethod.getRawParameterType(0);\n      if ((type !\u003d String.class) \u0026\u0026 (type !\u003d Object.class)) {\n        throw new IllegalArgumentException(String.format(\"Invalid \u0027any-setter\u0027 annotation on method \u0027%s()\u0027: first argument not of type String or Object, but %s\",anyMethod.getName(),type.getName()));\n      }\n      return anyMethod;\n    }\n    AnnotatedMember anyField\u003d_propCollector.getAnySetterField();\n    if (anyField !\u003d null) {\n      Class\u003c?\u003e type\u003danyField.getRawType();\n      if (!Map.class.isAssignableFrom(type)) {\n        throw new IllegalArgumentException(String.format(\"Invalid \u0027any-setter\u0027 annotation on field \u0027%s\u0027: type is not instance of java.util.Map\",anyField.getName()));\n      }\n      return anyField;\n    }\n  }\n  return null;\n}",
    "begin_line": 296,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findInjectables#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findInjectables()",
    "snippet": "@Override public Map\u003cObject,AnnotatedMember\u003e findInjectables(){\n  if (_propCollector !\u003d null) {\n    return _propCollector.getInjectables();\n  }\n  return Collections.emptyMap();\n}",
    "begin_line": 332,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getConstructors#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getConstructors()",
    "snippet": "@Override public List\u003cAnnotatedConstructor\u003e getConstructors(){\n  return _classInfo.getConstructors();\n}",
    "begin_line": 340,
    "end_line": 342,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.instantiateBean#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.instantiateBean(boolean)",
    "snippet": "@Override public Object instantiateBean(boolean fixAccess){\n  AnnotatedConstructor ac\u003d_classInfo.getDefaultConstructor();\n  if (ac \u003d\u003d null) {\n    return null;\n  }\n  if (fixAccess) {\n    ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n  }\n  try {\n    return ac.getAnnotated().newInstance();\n  }\n catch (  Exception e) {\n    Throwable t\u003de;\n    while (t.getCause() !\u003d null) {\n      t\u003dt.getCause();\n    }\n    ClassUtil.throwIfError(t);\n    ClassUtil.throwIfRTE(t);\n    throw new IllegalArgumentException(\"Failed to instantiate bean of type \" + _classInfo.getAnnotated().getName() + \": (\"+ t.getClass().getName()+ \") \"+ ClassUtil.exceptionMessage(t),t);\n  }\n}",
    "begin_line": 345,
    "end_line": 366,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findMethod#375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findMethod(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "@Override public AnnotatedMethod findMethod(String name,Class\u003c?\u003e[] paramTypes){\n  return _classInfo.findMethod(name,paramTypes);\n}",
    "begin_line": 375,
    "end_line": 377,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findExpectedFormat#386",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findExpectedFormat(JsonFormat.Value)",
    "snippet": "@Override public JsonFormat.Value findExpectedFormat(JsonFormat.Value defValue){\n  if (_annotationIntrospector !\u003d null) {\n    JsonFormat.Value v\u003d_annotationIntrospector.findFormat(_classInfo);\n    if (v !\u003d null) {\n      if (defValue \u003d\u003d null) {\n        defValue\u003dv;\n      }\n else {\n        defValue\u003ddefValue.withOverrides(v);\n      }\n    }\n  }\n  JsonFormat.Value v\u003d_config.getDefaultPropertyFormat(_classInfo.getRawType());\n  if (v !\u003d null) {\n    if (defValue \u003d\u003d null) {\n      defValue\u003dv;\n    }\n else {\n      defValue\u003ddefValue.withOverrides(v);\n    }\n  }\n  return defValue;\n}",
    "begin_line": 386,
    "end_line": 409,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDefaultViews#412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDefaultViews()",
    "snippet": "@Override public Class\u003c?\u003e[] findDefaultViews(){\n  if (!_defaultViewsResolved) {\n    _defaultViewsResolved\u003dtrue;\n    Class\u003c?\u003e[] def\u003d(_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findViews(_classInfo);\n    if (def \u003d\u003d null) {\n      if (!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {\n        def\u003dNO_VIEWS;\n      }\n    }\n    _defaultViews\u003ddef;\n  }\n  return _defaultViews;\n}",
    "begin_line": 412,
    "end_line": 427,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findSerializationConverter#436",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findSerializationConverter()",
    "snippet": "@Override public Converter\u003cObject,Object\u003e findSerializationConverter(){\n  if (_annotationIntrospector \u003d\u003d null) {\n    return null;\n  }\n  return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo));\n}",
    "begin_line": 436,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPropertyInclusion#451",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPropertyInclusion(JsonInclude.Value)",
    "snippet": "@Override public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue){\n  if (_annotationIntrospector !\u003d null) {\n    JsonInclude.Value incl\u003d_annotationIntrospector.findPropertyInclusion(_classInfo);\n    if (incl !\u003d null) {\n      return (defValue \u003d\u003d null) ? incl : defValue.withOverrides(incl);\n    }\n  }\n  return defValue;\n}",
    "begin_line": 451,
    "end_line": 459,
    "comment": "/** \n * Method for determining whether null properties should be written out for a Bean of introspected type. This is based on global feature (lowest priority, passed as argument) and per-class annotation (highest priority).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findAnyGetter#468",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findAnyGetter()",
    "snippet": "@Override public AnnotatedMember findAnyGetter() throws IllegalArgumentException {\n  AnnotatedMember anyGetter\u003d(_propCollector \u003d\u003d null) ? null : _propCollector.getAnyGetter();\n  if (anyGetter !\u003d null) {\n    Class\u003c?\u003e type\u003danyGetter.getRawType();\n    if (!Map.class.isAssignableFrom(type)) {\n      throw new IllegalArgumentException(\"Invalid \u0027any-getter\u0027 annotation on method \" + anyGetter.getName() + \"(): return type is not instance of java.util.Map\");\n    }\n  }\n  return anyGetter;\n}",
    "begin_line": 468,
    "end_line": 482,
    "comment": "/** \n * Method used to locate the method of introspected class that implements  {@link com.fasterxml.jackson.annotation.JsonAnyGetter}. If no such method exists null is returned. If more than one are found, an exception is thrown.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findBackReferences#485",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findBackReferences()",
    "snippet": "@Override public List\u003cBeanPropertyDefinition\u003e findBackReferences(){\n  List\u003cBeanPropertyDefinition\u003e result\u003dnull;\n  HashSet\u003cString\u003e names\u003dnull;\n  for (  BeanPropertyDefinition property : _properties()) {\n    AnnotationIntrospector.ReferenceProperty refDef\u003dproperty.findReferenceType();\n    if ((refDef \u003d\u003d null) || !refDef.isBackReference()) {\n      continue;\n    }\n    final String refName\u003drefDef.getName();\n    if (result \u003d\u003d null) {\n      result\u003dnew ArrayList\u003cBeanPropertyDefinition\u003e();\n      names\u003dnew HashSet\u003c\u003e();\n      names.add(refName);\n    }\n else {\n      if (!names.add(refName)) {\n        throw new IllegalArgumentException(\"Multiple back-reference properties with name \u0027\" + refName + \"\u0027\");\n      }\n    }\n    result.add(property);\n  }\n  return result;\n}",
    "begin_line": 485,
    "end_line": 507,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findBackReferenceProperties#511",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findBackReferenceProperties()",
    "snippet": "@Deprecated @Override public Map\u003cString,AnnotatedMember\u003e findBackReferenceProperties(){\n  List\u003cBeanPropertyDefinition\u003e props\u003dfindBackReferences();\n  if (props \u003d\u003d null) {\n    return null;\n  }\n  Map\u003cString,AnnotatedMember\u003e result\u003dnew HashMap\u003c\u003e();\n  for (  BeanPropertyDefinition prop : props) {\n    result.put(prop.getName(),prop.getMutator());\n  }\n  return result;\n}",
    "begin_line": 511,
    "end_line": 522,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.getFactoryMethods#531",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.getFactoryMethods()",
    "snippet": "@Override public List\u003cAnnotatedMethod\u003e getFactoryMethods(){\n  List\u003cAnnotatedMethod\u003e candidates\u003d_classInfo.getFactoryMethods();\n  if (candidates.isEmpty()) {\n    return candidates;\n  }\n  List\u003cAnnotatedMethod\u003e result\u003dnull;\n  for (  AnnotatedMethod am : candidates) {\n    if (isFactoryMethod(am)) {\n      if (result \u003d\u003d null) {\n        result\u003dnew ArrayList\u003cAnnotatedMethod\u003e();\n      }\n      result.add(am);\n    }\n  }\n  if (result \u003d\u003d null) {\n    return Collections.emptyList();\n  }\n  return result;\n}",
    "begin_line": 531,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findSingleArgConstructor#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findSingleArgConstructor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public Constructor\u003c?\u003e findSingleArgConstructor(Class\u003c?\u003e... argTypes){\n  for (  AnnotatedConstructor ac : _classInfo.getConstructors()) {\n    if (ac.getParameterCount() \u003d\u003d 1) {\n      Class\u003c?\u003e actArg\u003dac.getRawParameterType(0);\n      for (      Class\u003c?\u003e expArg : argTypes) {\n        if (expArg \u003d\u003d actArg) {\n          return ac.getAnnotated();\n        }\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 554,
    "end_line": 571,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findFactoryMethod#574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findFactoryMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public Method findFactoryMethod(Class\u003c?\u003e... expArgTypes){\n  for (  AnnotatedMethod am : _classInfo.getFactoryMethods()) {\n    if (isFactoryMethod(am) \u0026\u0026 am.getParameterCount() \u003d\u003d 1) {\n      Class\u003c?\u003e actualArgType\u003dam.getRawParameterType(0);\n      for (      Class\u003c?\u003e expArgType : expArgTypes) {\n        if (actualArgType.isAssignableFrom(expArgType)) {\n          return am.getAnnotated();\n        }\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 574,
    "end_line": 591,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.isFactoryMethod#593",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.isFactoryMethod(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected boolean isFactoryMethod(AnnotatedMethod am){\n  Class\u003c?\u003e rt\u003dam.getRawReturnType();\n  if (!getBeanClass().isAssignableFrom(rt)) {\n    return false;\n  }\n  JsonCreator.Mode mode\u003d_annotationIntrospector.findCreatorAnnotation(_config,am);\n  if ((mode !\u003d null) \u0026\u0026 (mode !\u003d JsonCreator.Mode.DISABLED)) {\n    return true;\n  }\n  final String name\u003dam.getName();\n  if (\"valueOf\".equals(name)) {\n    if (am.getParameterCount() \u003d\u003d 1) {\n      return true;\n    }\n  }\n  if (\"fromString\".equals(name)) {\n    if (am.getParameterCount() \u003d\u003d 1) {\n      Class\u003c?\u003e cls\u003dam.getRawParameterType(0);\n      if (cls \u003d\u003d String.class || CharSequence.class.isAssignableFrom(cls)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 593,
    "end_line": 626,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._findCreatorPropertyName#632",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._findCreatorPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "@Deprecated protected PropertyName _findCreatorPropertyName(AnnotatedParameter param){\n  PropertyName name\u003d_annotationIntrospector.findNameForDeserialization(param);\n  if (name \u003d\u003d null || name.isEmpty()) {\n    String str\u003d_annotationIntrospector.findImplicitPropertyName(param);\n    if (str !\u003d null \u0026\u0026 !str.isEmpty()) {\n      name\u003dPropertyName.construct(str);\n    }\n  }\n  return name;\n}",
    "begin_line": 632,
    "end_line": 642,
    "comment": "/** \n * @deprecated since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPOJOBuilder#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPOJOBuilder()",
    "snippet": "@Override public Class\u003c?\u003e findPOJOBuilder(){\n  return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPOJOBuilder(_classInfo);\n}",
    "begin_line": 651,
    "end_line": 654,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findPOJOBuilderConfig#657",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findPOJOBuilderConfig()",
    "snippet": "@Override public JsonPOJOBuilder.Value findPOJOBuilderConfig(){\n  return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo);\n}",
    "begin_line": 657,
    "end_line": 661,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findDeserializationConverter#664",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findDeserializationConverter()",
    "snippet": "@Override public Converter\u003cObject,Object\u003e findDeserializationConverter(){\n  if (_annotationIntrospector \u003d\u003d null) {\n    return null;\n  }\n  return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo));\n}",
    "begin_line": 664,
    "end_line": 670,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription.findClassDescription#673",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription.findClassDescription()",
    "snippet": "@Override public String findClassDescription(){\n  return (_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findClassDescription(_classInfo);\n}",
    "begin_line": 673,
    "end_line": 676,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._findPropertyFields#697",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._findPropertyFields(java.util.Collection\u003cjava.lang.String\u003e, boolean)",
    "snippet": "@Deprecated public LinkedHashMap\u003cString,AnnotatedField\u003e _findPropertyFields(Collection\u003cString\u003e ignoredProperties,boolean forSerialization){\n  LinkedHashMap\u003cString,AnnotatedField\u003e results\u003dnew LinkedHashMap\u003cString,AnnotatedField\u003e();\n  for (  BeanPropertyDefinition property : _properties()) {\n    AnnotatedField f\u003dproperty.getField();\n    if (f !\u003d null) {\n      String name\u003dproperty.getName();\n      if (ignoredProperties !\u003d null) {\n        if (ignoredProperties.contains(name)) {\n          continue;\n        }\n      }\n      results.put(name,f);\n    }\n  }\n  return results;\n}",
    "begin_line": 697,
    "end_line": 714,
    "comment": "/** \n * @param ignoredProperties (optional) names of properties to ignore;any fields that would be recognized as one of these properties is ignored.\n * @param forSerialization If true, will collect serializable propertyfields; if false, deserializable\n * @return Ordered Map with logical property name as key, andmatching field as value.\n * @deprecated Since 2.7.2, does not seem to be used?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicBeanDescription._createConverter#723",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicBeanDescription._createConverter(java.lang.Object)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected Converter\u003cObject,Object\u003e _createConverter(Object converterDef){\n  if (converterDef \u003d\u003d null) {\n    return null;\n  }\n  if (converterDef instanceof Converter\u003c?,?\u003e) {\n    return (Converter\u003cObject,Object\u003e)converterDef;\n  }\n  if (!(converterDef instanceof Class)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" + converterDef.getClass().getName() + \"; expected type Converter or Class\u003cConverter\u003e instead\");\n  }\n  Class\u003c?\u003e converterClass\u003d(Class\u003c?\u003e)converterDef;\n  if (converterClass \u003d\u003d Converter.None.class || ClassUtil.isBogusClass(converterClass)) {\n    return null;\n  }\n  if (!Converter.class.isAssignableFrom(converterClass)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + converterClass.getName() + \"; expected Class\u003cConverter\u003e\");\n  }\n  HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n  Converter\u003c?,?\u003e conv\u003d(hi \u003d\u003d null) ? null : hi.converterInstance(_config,_classInfo,converterClass);\n  if (conv \u003d\u003d null) {\n    conv\u003d(Converter\u003c?,?\u003e)ClassUtil.createInstance(converterClass,_config.canOverrideAccessModifiers());\n  }\n  return (Converter\u003cObject,Object\u003e)conv;\n}",
    "begin_line": 723,
    "end_line": 751,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.BasicClassIntrospector#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.BasicClassIntrospector()",
    "snippet": "public BasicClassIntrospector(){\n  _cachedFCA\u003dnew LRUMap\u003cJavaType,BasicBeanDescription\u003e(16,64);\n}",
    "begin_line": 65,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.copy#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.copy()",
    "snippet": "@Override public ClassIntrospector copy(){\n  return new BasicClassIntrospector();\n}",
    "begin_line": 71,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forSerialization#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forSerialization(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forSerialization(SerializationConfig cfg,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003d_findStdTypeDesc(type);\n  if (desc \u003d\u003d null) {\n    desc\u003d_findStdJdkCollectionDesc(cfg,type);\n    if (desc \u003d\u003d null) {\n      desc\u003dBasicBeanDescription.forSerialization(collectProperties(cfg,type,r,true,\"set\"));\n    }\n    _cachedFCA.putIfAbsent(type,desc);\n  }\n  return desc;\n}",
    "begin_line": 82,
    "end_line": 99,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDeserialization#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDeserialization(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forDeserialization(DeserializationConfig cfg,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003d_findStdTypeDesc(type);\n  if (desc \u003d\u003d null) {\n    desc\u003d_findStdJdkCollectionDesc(cfg,type);\n    if (desc \u003d\u003d null) {\n      desc\u003dBasicBeanDescription.forDeserialization(collectProperties(cfg,type,r,false,\"set\"));\n    }\n    _cachedFCA.putIfAbsent(type,desc);\n  }\n  return desc;\n}",
    "begin_line": 102,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDeserializationWithBuilder#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDeserializationWithBuilder(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003dBasicBeanDescription.forDeserialization(collectPropertiesWithBuilder(cfg,type,r,false));\n  _cachedFCA.putIfAbsent(type,desc);\n  return desc;\n}",
    "begin_line": 122,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forCreation#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forCreation(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forCreation(DeserializationConfig cfg,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003d_findStdTypeDesc(type);\n  if (desc \u003d\u003d null) {\n    desc\u003d_findStdJdkCollectionDesc(cfg,type);\n    if (desc \u003d\u003d null) {\n      desc\u003dBasicBeanDescription.forDeserialization(collectProperties(cfg,type,r,false,\"set\"));\n    }\n  }\n  return desc;\n}",
    "begin_line": 135,
    "end_line": 151,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forClassAnnotations#154",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forClassAnnotations(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003d_findStdTypeDesc(type);\n  if (desc \u003d\u003d null) {\n    desc\u003d_cachedFCA.get(type);\n    if (desc \u003d\u003d null) {\n      desc\u003dBasicBeanDescription.forOtherUse(config,type,_resolveAnnotatedClass(config,type,r));\n      _cachedFCA.put(type,desc);\n    }\n  }\n  return desc;\n}",
    "begin_line": 154,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.forDirectClassAnnotations#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "@Override public BasicBeanDescription forDirectClassAnnotations(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r){\n  BasicBeanDescription desc\u003d_findStdTypeDesc(type);\n  if (desc \u003d\u003d null) {\n    desc\u003dBasicBeanDescription.forOtherUse(config,type,_resolveAnnotatedWithoutSuperTypes(config,type,r));\n  }\n  return desc;\n}",
    "begin_line": 170,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.collectProperties#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, boolean, java.lang.String)",
    "snippet": "protected POJOPropertiesCollector collectProperties(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r,boolean forSerialization,String mutatorPrefix){\n  return constructPropertyCollector(config,_resolveAnnotatedClass(config,type,r),type,forSerialization,mutatorPrefix);\n}",
    "begin_line": 187,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.collectPropertiesWithBuilder#196",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.collectPropertiesWithBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, boolean)",
    "snippet": "protected POJOPropertiesCollector collectPropertiesWithBuilder(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r,boolean forSerialization){\n  AnnotatedClass ac\u003d_resolveAnnotatedClass(config,type,r);\n  AnnotationIntrospector ai\u003dconfig.isAnnotationProcessingEnabled() ? config.getAnnotationIntrospector() : null;\n  JsonPOJOBuilder.Value builderConfig\u003d(ai \u003d\u003d null) ? null : ai.findPOJOBuilderConfig(ac);\n  String mutatorPrefix\u003d(builderConfig \u003d\u003d null) ? JsonPOJOBuilder.DEFAULT_WITH_PREFIX : builderConfig.withPrefix;\n  return constructPropertyCollector(config,ac,type,forSerialization,mutatorPrefix);\n}",
    "begin_line": 196,
    "end_line": 204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector.constructPropertyCollector#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector.constructPropertyCollector(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType, boolean, java.lang.String)",
    "snippet": "protected POJOPropertiesCollector constructPropertyCollector(MapperConfig\u003c?\u003e config,AnnotatedClass ac,JavaType type,boolean forSerialization,String mutatorPrefix){\n  return new POJOPropertiesCollector(config,forSerialization,type,ac,mutatorPrefix);\n}",
    "begin_line": 210,
    "end_line": 214,
    "comment": "/** \n * Overridable method called for creating  {@link POJOPropertiesCollector} instanceto use; override is needed if a custom sub-class is to be used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._findStdTypeDesc#220",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._findStdTypeDesc(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BasicBeanDescription _findStdTypeDesc(JavaType type){\n  Class\u003c?\u003e cls\u003dtype.getRawClass();\n  if (cls.isPrimitive()) {\n    if (cls \u003d\u003d Boolean.TYPE) {\n      return BOOLEAN_DESC;\n    }\n    if (cls \u003d\u003d Integer.TYPE) {\n      return INT_DESC;\n    }\n    if (cls \u003d\u003d Long.TYPE) {\n      return LONG_DESC;\n    }\n  }\n else {\n    if (cls \u003d\u003d String.class) {\n      return STRING_DESC;\n    }\n  }\n  return null;\n}",
    "begin_line": 220,
    "end_line": 239,
    "comment": "/** \n * Method called to see if type is one of core JDK types that we have cached for efficiency.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._isStdJDKCollection#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._isStdJDKCollection(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected boolean _isStdJDKCollection(JavaType type){\n  if (!type.isContainerType() || type.isArrayType()) {\n    return false;\n  }\n  Class\u003c?\u003e raw\u003dtype.getRawClass();\n  String pkgName\u003dClassUtil.getPackageName(raw);\n  if (pkgName !\u003d null) {\n    if (pkgName.startsWith(\"java.lang\") || pkgName.startsWith(\"java.util\")) {\n      if (Collection.class.isAssignableFrom(raw) || Map.class.isAssignableFrom(raw)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 246,
    "end_line": 266,
    "comment": "/** \n * Helper method used to decide whether we can omit introspection for members (methods, fields, constructors); we may do so for a limited number of container types JDK provides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._findStdJdkCollectionDesc#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._findStdJdkCollectionDesc(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BasicBeanDescription _findStdJdkCollectionDesc(MapperConfig\u003c?\u003e cfg,JavaType type){\n  if (_isStdJDKCollection(type)) {\n    return BasicBeanDescription.forOtherUse(cfg,type,_resolveAnnotatedClass(cfg,type,cfg));\n  }\n  return null;\n}",
    "begin_line": 268,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._resolveAnnotatedClass#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._resolveAnnotatedClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "protected AnnotatedClass _resolveAnnotatedClass(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r){\n  return AnnotatedClassResolver.resolve(config,type,r);\n}",
    "begin_line": 280,
    "end_line": 283,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicClassIntrospector._resolveAnnotatedWithoutSuperTypes#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BasicClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.BasicClassIntrospector._resolveAnnotatedWithoutSuperTypes(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "protected AnnotatedClass _resolveAnnotatedWithoutSuperTypes(MapperConfig\u003c?\u003e config,JavaType type,MixInResolver r){\n  return AnnotatedClassResolver.resolveWithoutSuperTypes(config,type,r);\n}",
    "begin_line": 288,
    "end_line": 291,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.withName#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.withName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public abstract BeanPropertyDefinition withName(PropertyName newName);",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * Method that can be used to create a definition with same settings as this one, but with different (external) name; that is, one for which {@link #getName()} would return \u003ccode\u003enewName\u003c/code\u003e.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.withSimpleName#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.withSimpleName(java.lang.String)",
    "snippet": "public abstract BeanPropertyDefinition withSimpleName(String newSimpleName);",
    "begin_line": 47,
    "end_line": 47,
    "comment": "/** \n * Alternate \"mutant factory\" that will only change simple name, but leave other optional parts (like namespace) as is.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getName#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getName()",
    "snippet": "@Override public abstract String getName();",
    "begin_line": 59,
    "end_line": 59,
    "comment": "/** \n * Accessor for name used for external representation (in JSON).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getFullName#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getFullName()",
    "snippet": "public abstract PropertyName getFullName();",
    "begin_line": 61,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.hasName#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.hasName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public boolean hasName(PropertyName name){\n  return getFullName().equals(name);\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getInternalName#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getInternalName()",
    "snippet": "public abstract String getInternalName();",
    "begin_line": 76,
    "end_line": 76,
    "comment": "/** \n * Accessor that can be used to determine implicit name from underlying element(s) before possible renaming. This is the \"internal\" name derived from accessor (\"x\" from \"getX\"), and is not based on annotations or naming strategy.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getWrapperName#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getWrapperName()",
    "snippet": "public abstract PropertyName getWrapperName();",
    "begin_line": 83,
    "end_line": 83,
    "comment": "/** \n * Accessor for finding wrapper name to use for property (if any).\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.isExplicitlyIncluded#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.isExplicitlyIncluded()",
    "snippet": "public abstract boolean isExplicitlyIncluded();",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * Accessor that can be called to check whether property was included due to an explicit marker (usually annotation), or just by naming convention.\n * @return True if property was explicitly included (usually by havingone of components being annotated); false if inclusion was purely due to naming or visibility definitions (that is, implicit)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.isExplicitlyNamed#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.isExplicitlyNamed()",
    "snippet": "public boolean isExplicitlyNamed(){\n  return isExplicitlyIncluded();\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Accessor that can be called to check whether property name was due to an explicit marker (usually annotation), or just by naming convention or use of \"use-default-name\" marker (annotation). \u003cp\u003e Note that entries that return true from this method will always return true for  {@link #isExplicitlyIncluded()}, but not necessarily vice versa.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getPrimaryType#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getPrimaryType()",
    "snippet": "public abstract JavaType getPrimaryType();",
    "begin_line": 120,
    "end_line": 120,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getRawPrimaryType#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getRawPrimaryType()",
    "snippet": "public abstract Class\u003c?\u003e getRawPrimaryType();",
    "begin_line": 125,
    "end_line": 125,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getMetadata#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getMetadata()",
    "snippet": "public abstract PropertyMetadata getMetadata();",
    "begin_line": 134,
    "end_line": 134,
    "comment": "/** \n * Method for accessing additional metadata. NOTE: will never return null, so de-referencing return value is safe.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.isRequired#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.isRequired()",
    "snippet": "public boolean isRequired(){\n  return getMetadata().isRequired();\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * Method used to check if this property is expected to have a value; and if none found, should either be considered invalid (and most likely fail deserialization), or handled by other means (by providing default value)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.couldDeserialize#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.couldDeserialize()",
    "snippet": "public boolean couldDeserialize(){\n  return getMutator() !\u003d null;\n}",
    "begin_line": 152,
    "end_line": 152,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.couldSerialize#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.couldSerialize()",
    "snippet": "public boolean couldSerialize(){\n  return getAccessor() !\u003d null;\n}",
    "begin_line": 153,
    "end_line": 153,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.hasGetter#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.hasGetter()",
    "snippet": "public abstract boolean hasGetter();",
    "begin_line": 161,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.hasSetter#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.hasSetter()",
    "snippet": "public abstract boolean hasSetter();",
    "begin_line": 162,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.hasField#163",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.hasField()",
    "snippet": "public abstract boolean hasField();",
    "begin_line": 163,
    "end_line": 163,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.hasConstructorParameter#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.hasConstructorParameter()",
    "snippet": "public abstract boolean hasConstructorParameter();",
    "begin_line": 164,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getGetter#166",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getGetter()",
    "snippet": "public abstract AnnotatedMethod getGetter();",
    "begin_line": 166,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getSetter#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getSetter()",
    "snippet": "public abstract AnnotatedMethod getSetter();",
    "begin_line": 167,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getField#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getField()",
    "snippet": "public abstract AnnotatedField getField();",
    "begin_line": 168,
    "end_line": 168,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getConstructorParameter#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getConstructorParameter()",
    "snippet": "public abstract AnnotatedParameter getConstructorParameter();",
    "begin_line": 169,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getConstructorParameters#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getConstructorParameters()",
    "snippet": "public Iterator\u003cAnnotatedParameter\u003e getConstructorParameters(){\n  return ClassUtil.emptyIterator();\n}",
    "begin_line": 177,
    "end_line": 179,
    "comment": "/** \n * Additional method that may be called instead of  {@link #getConstructorParameter()}to get access to all constructor parameters, not just the highest priority one.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getAccessor#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getAccessor()",
    "snippet": "public AnnotatedMember getAccessor(){\n  AnnotatedMember m\u003dgetGetter();\n  if (m \u003d\u003d null) {\n    m\u003dgetField();\n  }\n  return m;\n}",
    "begin_line": 186,
    "end_line": 193,
    "comment": "/** \n * Method used to find accessor (getter, field to access) to use for accessing value of the property. Null if no such member exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getMutator#200",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getMutator()",
    "snippet": "public AnnotatedMember getMutator(){\n  AnnotatedMember acc\u003dgetConstructorParameter();\n  if (acc \u003d\u003d null) {\n    acc\u003dgetSetter();\n    if (acc \u003d\u003d null) {\n      acc\u003dgetField();\n    }\n  }\n  return acc;\n}",
    "begin_line": 200,
    "end_line": 209,
    "comment": "/** \n * Method used to find mutator (constructor parameter, setter, field) to use for changing value of the property. Null if no such member exists.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getNonConstructorMutator#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getNonConstructorMutator()",
    "snippet": "public AnnotatedMember getNonConstructorMutator(){\n  AnnotatedMember m\u003dgetSetter();\n  if (m \u003d\u003d null) {\n    m\u003dgetField();\n  }\n  return m;\n}",
    "begin_line": 214,
    "end_line": 220,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.getPrimaryMember#231",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.getPrimaryMember()",
    "snippet": "public abstract AnnotatedMember getPrimaryMember();",
    "begin_line": 231,
    "end_line": 231,
    "comment": "/** \n * Method used to find the property member (getter, setter, field) that has the highest precedence in current context (getter method when serializing, if available, and so forth), if any. \u003cp\u003e Note: abstract since 2.5\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.findViews#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.findViews()",
    "snippet": "public Class\u003c?\u003e[] findViews(){\n  return null;\n}",
    "begin_line": 245,
    "end_line": 245,
    "comment": "/** \n * Method used to find View-inclusion definitions for the property.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.findReferenceType#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.findReferenceType()",
    "snippet": "public AnnotationIntrospector.ReferenceProperty findReferenceType(){\n  return null;\n}",
    "begin_line": 251,
    "end_line": 251,
    "comment": "/** \n * Method used to find whether property is part of a bi-directional reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.findReferenceName#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.findReferenceName()",
    "snippet": "public String findReferenceName(){\n  AnnotationIntrospector.ReferenceProperty ref\u003dfindReferenceType();\n  return (ref \u003d\u003d null) ? null : ref.getName();\n}",
    "begin_line": 256,
    "end_line": 259,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.isTypeId#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.isTypeId()",
    "snippet": "public boolean isTypeId(){\n  return false;\n}",
    "begin_line": 266,
    "end_line": 266,
    "comment": "/** \n * Method used to check whether this logical property has a marker to indicate it should be used as the type id for polymorphic type handling.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.findObjectIdInfo#273",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.findObjectIdInfo()",
    "snippet": "public ObjectIdInfo findObjectIdInfo(){\n  return null;\n}",
    "begin_line": 273,
    "end_line": 273,
    "comment": "/** \n * Method used to check whether this logical property indicates that value POJOs should be written using additional Object Identifier (or, when multiple references exist, all but first AS Object Identifier).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanPropertyDefinition.findInclusion#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/BeanPropertyDefinition.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition",
    "signature": "com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition.findInclusion()",
    "snippet": "public abstract JsonInclude.Value findInclusion();",
    "begin_line": 283,
    "end_line": 283,
    "comment": "/** \n * Method used to check if this property has specific inclusion override associated with it or not. It should NOT check for any default settings (global, per-type, or containing POJO settings)\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.findMixInClassFor#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls);",
    "begin_line": 35,
    "end_line": 35,
    "comment": "/** \n * Method that will check if there are \"mix-in\" classes (with mix-in annotations) for given class\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.copy#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.copy()",
    "snippet": "public MixInResolver copy();",
    "begin_line": 45,
    "end_line": 45,
    "comment": "/** \n * Method called to create a new, non-shared copy, to be used by different \u003ccode\u003eObjectMapper\u003c/code\u003e instance, and one that should not be connected to this instance, if resolver has mutable state. If resolver is immutable may simply return `this`.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.ClassIntrospector#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.ClassIntrospector()",
    "snippet": "protected ClassIntrospector(){\n}",
    "begin_line": 48,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.copy#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.copy()",
    "snippet": "public abstract ClassIntrospector copy();",
    "begin_line": 55,
    "end_line": 55,
    "comment": "/** \n * Method that may be needed when `copy()`ing `ObjectMapper` instances.\n * @since 2.9.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forSerialization#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forSerialization(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forSerialization(SerializationConfig cfg,JavaType type,MixInResolver r);",
    "begin_line": 67,
    "end_line": 68,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for serialization purposes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDeserialization#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDeserialization(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDeserialization(DeserializationConfig cfg,JavaType type,MixInResolver r);",
    "begin_line": 74,
    "end_line": 75,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for deserialization purposes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDeserializationWithBuilder#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDeserializationWithBuilder(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDeserializationWithBuilder(DeserializationConfig cfg,JavaType type,MixInResolver r);",
    "begin_line": 82,
    "end_line": 83,
    "comment": "/** \n * Factory method that constructs an introspector that has all information needed for constructing deserializers that use intermediate Builder objects.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forCreation#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forCreation(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forCreation(DeserializationConfig cfg,JavaType type,MixInResolver r);",
    "begin_line": 91,
    "end_line": 92,
    "comment": "/** \n * Factory method that constructs an introspector that has information necessary for creating instances of given class (\"creator\"), as well as class annotations, but no information on member methods\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forClassAnnotations#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forClassAnnotations(MapperConfig\u003c?\u003e cfg,JavaType type,MixInResolver r);",
    "begin_line": 99,
    "end_line": 100,
    "comment": "/** \n * Factory method that constructs an introspector that only has information regarding annotations class itself (or its supertypes) has, but nothing on methods or constructors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MixInResolver.forDirectClassAnnotations#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ClassIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ClassIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.ClassIntrospector.forDirectClassAnnotations(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public abstract BeanDescription forDirectClassAnnotations(MapperConfig\u003c?\u003e cfg,JavaType type,MixInResolver r);",
    "begin_line": 107,
    "end_line": 108,
    "comment": "/** \n * Factory method that constructs an introspector that only has information regarding annotations class itself has (but NOT including its supertypes), but nothing on methods or constructors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.CollectorBase#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.CollectorBase(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "protected CollectorBase(AnnotationIntrospector intr){\n  _intr\u003dintr;\n}",
    "begin_line": 18,
    "end_line": 20,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.collectAnnotations#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.collectAnnotations(java.lang.annotation.Annotation[])",
    "snippet": "protected final AnnotationCollector collectAnnotations(Annotation[] anns){\n  AnnotationCollector c\u003dAnnotationCollector.emptyCollector();\n  for (int i\u003d0, end\u003danns.length; i \u003c end; ++i) {\n    Annotation ann\u003danns[i];\n    c\u003dc.addOrOverride(ann);\n    if (_intr.isAnnotationBundle(ann)) {\n      c\u003dcollectFromBundle(c,ann);\n    }\n  }\n  return c;\n}",
    "begin_line": 24,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.collectAnnotations#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.collectAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation[])",
    "snippet": "protected final AnnotationCollector collectAnnotations(AnnotationCollector c,Annotation[] anns){\n  for (int i\u003d0, end\u003danns.length; i \u003c end; ++i) {\n    Annotation ann\u003danns[i];\n    c\u003dc.addOrOverride(ann);\n    if (_intr.isAnnotationBundle(ann)) {\n      c\u003dcollectFromBundle(c,ann);\n    }\n  }\n  return c;\n}",
    "begin_line": 36,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.collectFromBundle#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.collectFromBundle(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation)",
    "snippet": "protected final AnnotationCollector collectFromBundle(AnnotationCollector c,Annotation bundle){\n  Annotation[] anns\u003dClassUtil.findClassAnnotations(bundle.annotationType());\n  for (int i\u003d0, end\u003danns.length; i \u003c end; ++i) {\n    Annotation ann\u003danns[i];\n    if (_ignorableAnnotation(ann)) {\n      continue;\n    }\n    if (_intr.isAnnotationBundle(ann)) {\n      if (!c.isPresent(ann)) {\n        c\u003dc.addOrOverride(ann);\n        c\u003dcollectFromBundle(c,ann);\n      }\n    }\n else {\n      c\u003dc.addOrOverride(ann);\n    }\n  }\n  return c;\n}",
    "begin_line": 47,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.collectDefaultAnnotations#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.collectDefaultAnnotations(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation[])",
    "snippet": "protected final AnnotationCollector collectDefaultAnnotations(AnnotationCollector c,Annotation[] anns){\n  for (int i\u003d0, end\u003danns.length; i \u003c end; ++i) {\n    Annotation ann\u003danns[i];\n    if (!c.isPresent(ann)) {\n      c\u003dc.addOrOverride(ann);\n      if (_intr.isAnnotationBundle(ann)) {\n        c\u003dcollectDefaultFromBundle(c,ann);\n      }\n    }\n  }\n  return c;\n}",
    "begin_line": 71,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase.collectDefaultFromBundle#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase.collectDefaultFromBundle(com.fasterxml.jackson.databind.introspect.AnnotationCollector, java.lang.annotation.Annotation)",
    "snippet": "protected final AnnotationCollector collectDefaultFromBundle(AnnotationCollector c,Annotation bundle){\n  Annotation[] anns\u003dClassUtil.findClassAnnotations(bundle.annotationType());\n  for (int i\u003d0, end\u003danns.length; i \u003c end; ++i) {\n    Annotation ann\u003danns[i];\n    if (_ignorableAnnotation(ann)) {\n      continue;\n    }\n    if (!c.isPresent(ann)) {\n      c\u003dc.addOrOverride(ann);\n      if (_intr.isAnnotationBundle(ann)) {\n        c\u003dcollectFromBundle(c,ann);\n      }\n    }\n  }\n  return c;\n}",
    "begin_line": 85,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase._ignorableAnnotation#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase._ignorableAnnotation(java.lang.annotation.Annotation)",
    "snippet": "protected final static boolean _ignorableAnnotation(Annotation a){\n  return (a instanceof Target) || (a instanceof Retention);\n}",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase._emptyAnnotationMap#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase._emptyAnnotationMap()",
    "snippet": "static AnnotationMap _emptyAnnotationMap(){\n  return new AnnotationMap();\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectorBase._emptyAnnotationMaps#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/CollectorBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.CollectorBase",
    "signature": "com.fasterxml.jackson.databind.introspect.CollectorBase._emptyAnnotationMaps(int)",
    "snippet": "static AnnotationMap[] _emptyAnnotationMaps(int count){\n  if (count \u003d\u003d 0) {\n    return NO_ANNOTATION_MAPS;\n  }\n  AnnotationMap[] maps\u003dnew AnnotationMap[count];\n  for (int i\u003d0; i \u003c count; ++i) {\n    maps[i]\u003d_emptyAnnotationMap();\n  }\n  return maps;\n}",
    "begin_line": 113,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.ConcreteBeanPropertyBase#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.ConcreteBeanPropertyBase(com.fasterxml.jackson.databind.PropertyMetadata)",
    "snippet": "protected ConcreteBeanPropertyBase(PropertyMetadata md){\n  _metadata\u003d(md \u003d\u003d null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL : md;\n}",
    "begin_line": 44,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.ConcreteBeanPropertyBase#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.ConcreteBeanPropertyBase(com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase)",
    "snippet": "protected ConcreteBeanPropertyBase(ConcreteBeanPropertyBase src){\n  _metadata\u003dsrc._metadata;\n  _propertyFormat\u003dsrc._propertyFormat;\n}",
    "begin_line": 48,
    "end_line": 51,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.isRequired#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.isRequired()",
    "snippet": "@Override public boolean isRequired(){\n  return _metadata.isRequired();\n}",
    "begin_line": 54,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.getMetadata#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.getMetadata()",
    "snippet": "@Override public PropertyMetadata getMetadata(){\n  return _metadata;\n}",
    "begin_line": 57,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.isVirtual#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.isVirtual()",
    "snippet": "@Override public boolean isVirtual(){\n  return false;\n}",
    "begin_line": 60,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.findFormatOverrides#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.findFormatOverrides(com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Override @Deprecated public final JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr){\n  JsonFormat.Value f\u003dnull;\n  if (intr !\u003d null) {\n    AnnotatedMember member\u003dgetMember();\n    if (member !\u003d null) {\n      f\u003dintr.findFormat(member);\n    }\n  }\n  if (f \u003d\u003d null) {\n    f\u003dEMPTY_FORMAT;\n  }\n  return f;\n}",
    "begin_line": 64,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.findPropertyFormat#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.findPropertyFormat(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JsonFormat.Value findPropertyFormat(MapperConfig\u003c?\u003e config,Class\u003c?\u003e baseType){\n  JsonFormat.Value v\u003d_propertyFormat;\n  if (v \u003d\u003d null) {\n    JsonFormat.Value v1\u003dconfig.getDefaultPropertyFormat(baseType);\n    JsonFormat.Value v2\u003dnull;\n    AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n      AnnotatedMember member\u003dgetMember();\n      if (member !\u003d null) {\n        v2\u003dintr.findFormat(member);\n      }\n    }\n    if (v1 \u003d\u003d null) {\n      v\u003d(v2 \u003d\u003d null) ? EMPTY_FORMAT : v2;\n    }\n else {\n      v\u003d(v2 \u003d\u003d null) ? v1 : v1.withOverrides(v2);\n    }\n    _propertyFormat\u003dv;\n  }\n  return v;\n}",
    "begin_line": 79,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.findPropertyInclusion#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.findPropertyInclusion(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JsonInclude.Value findPropertyInclusion(MapperConfig\u003c?\u003e config,Class\u003c?\u003e baseType){\n  AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  AnnotatedMember member\u003dgetMember();\n  if (member \u003d\u003d null) {\n    JsonInclude.Value def\u003dconfig.getDefaultPropertyInclusion(baseType);\n    return def;\n  }\n  JsonInclude.Value v0\u003dconfig.getDefaultInclusion(baseType,member.getRawType());\n  if (intr \u003d\u003d null) {\n    return v0;\n  }\n  JsonInclude.Value v\u003dintr.findPropertyInclusion(member);\n  if (v0 \u003d\u003d null) {\n    return v;\n  }\n  return v0.withOverrides(v);\n}",
    "begin_line": 105,
    "end_line": 122,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ConcreteBeanPropertyBase.findAliases#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/ConcreteBeanPropertyBase.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase",
    "signature": "com.fasterxml.jackson.databind.introspect.ConcreteBeanPropertyBase.findAliases(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "@Override public List\u003cPropertyName\u003e findAliases(MapperConfig\u003c?\u003e config){\n  List\u003cPropertyName\u003e aliases\u003d_aliases;\n  if (aliases \u003d\u003d null) {\n    AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n    if (intr !\u003d null) {\n      aliases\u003dintr.findPropertyAliases(getMember());\n    }\n    if (aliases \u003d\u003d null) {\n      aliases\u003dCollections.emptyList();\n    }\n    _aliases\u003daliases;\n  }\n  return aliases;\n}",
    "begin_line": 125,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.JacksonAnnotationIntrospector#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.JacksonAnnotationIntrospector()",
    "snippet": "public JacksonAnnotationIntrospector(){\n}",
    "begin_line": 106,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.version#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.version()",
    "snippet": "@Override public Version version(){\n  return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION;\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.readResolve#113",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.readResolve()",
    "snippet": "protected Object readResolve(){\n  if (_annotationsInside \u003d\u003d null) {\n    _annotationsInside\u003dnew LRUMap\u003cClass\u003c?\u003e,Boolean\u003e(48,48);\n  }\n  return this;\n}",
    "begin_line": 113,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.setConstructorPropertiesImpliesCreator#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.setConstructorPropertiesImpliesCreator(boolean)",
    "snippet": "public JacksonAnnotationIntrospector setConstructorPropertiesImpliesCreator(boolean b){\n  _cfgConstructorPropertiesImpliesCreator\u003db;\n  return this;\n}",
    "begin_line": 136,
    "end_line": 140,
    "comment": "/** \n * Method for changing behavior of  {@link java.beans.ConstructorProperties}: if set to `true`, existence DOES indicate that the given constructor should be considered a creator; `false` that it should NOT be considered a creator without explicit use of \u003ccode\u003eJsonCreator\u003c/code\u003e annotation. \u003cp\u003e Default setting is `true`\n * @since 2.7.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isAnnotationBundle#153",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isAnnotationBundle(java.lang.annotation.Annotation)",
    "snippet": "@Override public boolean isAnnotationBundle(Annotation ann){\n  Class\u003c?\u003e type\u003dann.annotationType();\n  Boolean b\u003d_annotationsInside.get(type);\n  if (b \u003d\u003d null) {\n    b\u003dtype.getAnnotation(JacksonAnnotationsInside.class) !\u003d null;\n    _annotationsInside.putIfAbsent(type,b);\n  }\n  return b.booleanValue();\n}",
    "begin_line": 153,
    "end_line": 165,
    "comment": "/** \n * Annotations with meta-annotation  {@link JacksonAnnotationsInside}are considered bundles.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findEnumValue#179",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValue(java.lang.Enum\u003c?\u003e)",
    "snippet": "@Override @Deprecated public String findEnumValue(Enum\u003c?\u003e value){\n  try {\n    Field f\u003dvalue.getClass().getField(value.name());\n    if (f !\u003d null) {\n      JsonProperty prop\u003df.getAnnotation(JsonProperty.class);\n      if (prop !\u003d null) {\n        String n\u003dprop.value();\n        if (n !\u003d null \u0026\u0026 !n.isEmpty()) {\n          return n;\n        }\n      }\n    }\n  }\n catch (  SecurityException e) {\n  }\ncatch (  NoSuchFieldException e) {\n  }\n  return value.name();\n}",
    "begin_line": 179,
    "end_line": 202,
    "comment": "/** \n * Since 2.6, we have supported use of  {@link JsonProperty} for specifyingexplicit serialized name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findEnumValues#205",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findEnumValues(java.lang.Class\u003c?\u003e, java.lang.Enum\u003c?\u003e[], java.lang.String[])",
    "snippet": "@Override public String[] findEnumValues(Class\u003c?\u003e enumType,Enum\u003c?\u003e[] enumValues,String[] names){\n  HashMap\u003cString,String\u003e expl\u003dnull;\n  for (  Field f : ClassUtil.getDeclaredFields(enumType)) {\n    if (!f.isEnumConstant()) {\n      continue;\n    }\n    JsonProperty prop\u003df.getAnnotation(JsonProperty.class);\n    if (prop \u003d\u003d null) {\n      continue;\n    }\n    String n\u003dprop.value();\n    if (n.isEmpty()) {\n      continue;\n    }\n    if (expl \u003d\u003d null) {\n      expl\u003dnew HashMap\u003cString,String\u003e();\n    }\n    expl.put(f.getName(),n);\n  }\n  if (expl !\u003d null) {\n    for (int i\u003d0, end\u003denumValues.length; i \u003c end; ++i) {\n      String defName\u003denumValues[i].name();\n      String explValue\u003dexpl.get(defName);\n      if (explValue !\u003d null) {\n        names[i]\u003dexplValue;\n      }\n    }\n  }\n  return names;\n}",
    "begin_line": 205,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDefaultEnumValue#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDefaultEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e)",
    "snippet": "@Override public Enum\u003c?\u003e findDefaultEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumCls){\n  return ClassUtil.findFirstAnnotatedEnumValue(enumCls,JsonEnumDefaultValue.class);\n}",
    "begin_line": 247,
    "end_line": 249,
    "comment": "/** \n * Finds the Enum value that should be considered the default value, if possible. \u003cp\u003e This implementation relies on  {@link JsonEnumDefaultValue} annotation to determine the default value if present.\n * @param enumCls The Enum class to scan for the default value.\n * @return null if none found or it\u0027s not possible to determine one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findRootName#258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findRootName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public PropertyName findRootName(AnnotatedClass ac){\n  JsonRootName ann\u003d_findAnnotation(ac,JsonRootName.class);\n  if (ann \u003d\u003d null) {\n    return null;\n  }\n  String ns\u003dann.namespace();\n  if (ns !\u003d null \u0026\u0026 ns.length() \u003d\u003d 0) {\n    ns\u003dnull;\n  }\n  return PropertyName.construct(ann.value(),ns);\n}",
    "begin_line": 258,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyIgnorals#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyIgnorals(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonIgnoreProperties.Value findPropertyIgnorals(Annotated a){\n  JsonIgnoreProperties v\u003d_findAnnotation(a,JsonIgnoreProperties.class);\n  if (v \u003d\u003d null) {\n    return JsonIgnoreProperties.Value.empty();\n  }\n  return JsonIgnoreProperties.Value.from(v);\n}",
    "begin_line": 272,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isIgnorableType#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isIgnorableType(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Boolean isIgnorableType(AnnotatedClass ac){\n  JsonIgnoreType ignore\u003d_findAnnotation(ac,JsonIgnoreType.class);\n  return (ignore \u003d\u003d null) ? null : ignore.value();\n}",
    "begin_line": 282,
    "end_line": 285,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findFilterId#288",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFilterId(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findFilterId(Annotated a){\n  JsonFilter ann\u003d_findAnnotation(a,JsonFilter.class);\n  if (ann !\u003d null) {\n    String id\u003dann.value();\n    if (id.length() \u003e 0) {\n      return id;\n    }\n  }\n  return null;\n}",
    "begin_line": 288,
    "end_line": 298,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNamingStrategy#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNamingStrategy(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Object findNamingStrategy(AnnotatedClass ac){\n  JsonNaming ann\u003d_findAnnotation(ac,JsonNaming.class);\n  return (ann \u003d\u003d null) ? null : ann.value();\n}",
    "begin_line": 301,
    "end_line": 305,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findClassDescription#308",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findClassDescription(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public String findClassDescription(AnnotatedClass ac){\n  JsonClassDescription ann\u003d_findAnnotation(ac,JsonClassDescription.class);\n  return (ann \u003d\u003d null) ? null : ann.value();\n}",
    "begin_line": 308,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findAutoDetectVisibility#320",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findAutoDetectVisibility(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.introspect.VisibilityChecker\u003c?\u003e)",
    "snippet": "@Override public VisibilityChecker\u003c?\u003e findAutoDetectVisibility(AnnotatedClass ac,VisibilityChecker\u003c?\u003e checker){\n  JsonAutoDetect ann\u003d_findAnnotation(ac,JsonAutoDetect.class);\n  return (ann \u003d\u003d null) ? checker : checker.with(ann);\n}",
    "begin_line": 320,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findImplicitPropertyName#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findImplicitPropertyName(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public String findImplicitPropertyName(AnnotatedMember m){\n  PropertyName n\u003d_findConstructorName(m);\n  return (n \u003d\u003d null) ? null : n.getSimpleName();\n}",
    "begin_line": 334,
    "end_line": 337,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyAliases#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyAliases(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public List\u003cPropertyName\u003e findPropertyAliases(Annotated m){\n  JsonAlias ann\u003d_findAnnotation(m,JsonAlias.class);\n  if (ann \u003d\u003d null) {\n    return null;\n  }\n  String[] strs\u003dann.value();\n  final int len\u003dstrs.length;\n  if (len \u003d\u003d 0) {\n    return Collections.emptyList();\n  }\n  List\u003cPropertyName\u003e result\u003dnew ArrayList\u003c\u003e(len);\n  for (int i\u003d0; i \u003c len; ++i) {\n    result.add(PropertyName.construct(strs[i]));\n  }\n  return result;\n}",
    "begin_line": 340,
    "end_line": 355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasIgnoreMarker#358",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasIgnoreMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public boolean hasIgnoreMarker(AnnotatedMember m){\n  return _isIgnorable(m);\n}",
    "begin_line": 358,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasRequiredMarker#363",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasRequiredMarker(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Boolean hasRequiredMarker(AnnotatedMember m){\n  JsonProperty ann\u003d_findAnnotation(m,JsonProperty.class);\n  if (ann !\u003d null) {\n    return ann.required();\n  }\n  return null;\n}",
    "begin_line": 363,
    "end_line": 370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyAccess#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyAccess(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonProperty.Access findPropertyAccess(Annotated m){\n  JsonProperty ann\u003d_findAnnotation(m,JsonProperty.class);\n  if (ann !\u003d null) {\n    return ann.access();\n  }\n  return null;\n}",
    "begin_line": 373,
    "end_line": 379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyDescription#382",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyDescription(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public String findPropertyDescription(Annotated ann){\n  JsonPropertyDescription desc\u003d_findAnnotation(ann,JsonPropertyDescription.class);\n  return (desc \u003d\u003d null) ? null : desc.value();\n}",
    "begin_line": 382,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyIndex#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyIndex(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Integer findPropertyIndex(Annotated ann){\n  JsonProperty prop\u003d_findAnnotation(ann,JsonProperty.class);\n  if (prop !\u003d null) {\n    int ix\u003dprop.index();\n    if (ix !\u003d JsonProperty.INDEX_UNKNOWN) {\n      return Integer.valueOf(ix);\n    }\n  }\n  return null;\n}",
    "begin_line": 388,
    "end_line": 397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyDefaultValue#400",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyDefaultValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public String findPropertyDefaultValue(Annotated ann){\n  JsonProperty prop\u003d_findAnnotation(ann,JsonProperty.class);\n  if (prop \u003d\u003d null) {\n    return null;\n  }\n  String str\u003dprop.defaultValue();\n  return str.isEmpty() ? null : str;\n}",
    "begin_line": 400,
    "end_line": 408,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findFormat#411",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findFormat(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonFormat.Value findFormat(Annotated ann){\n  JsonFormat f\u003d_findAnnotation(ann,JsonFormat.class);\n  return (f \u003d\u003d null) ? null : new JsonFormat.Value(f);\n}",
    "begin_line": 411,
    "end_line": 414,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findReferenceType#417",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findReferenceType(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public ReferenceProperty findReferenceType(AnnotatedMember member){\n  JsonManagedReference ref1\u003d_findAnnotation(member,JsonManagedReference.class);\n  if (ref1 !\u003d null) {\n    return AnnotationIntrospector.ReferenceProperty.managed(ref1.value());\n  }\n  JsonBackReference ref2\u003d_findAnnotation(member,JsonBackReference.class);\n  if (ref2 !\u003d null) {\n    return AnnotationIntrospector.ReferenceProperty.back(ref2.value());\n  }\n  return null;\n}",
    "begin_line": 417,
    "end_line": 428,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findUnwrappingNameTransformer#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findUnwrappingNameTransformer(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public NameTransformer findUnwrappingNameTransformer(AnnotatedMember member){\n  JsonUnwrapped ann\u003d_findAnnotation(member,JsonUnwrapped.class);\n  if (ann \u003d\u003d null || !ann.enabled()) {\n    return null;\n  }\n  String prefix\u003dann.prefix();\n  String suffix\u003dann.suffix();\n  return NameTransformer.simpleTransformer(prefix,suffix);\n}",
    "begin_line": 431,
    "end_line": 442,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findInjectableValue#445",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findInjectableValue(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public JacksonInject.Value findInjectableValue(AnnotatedMember m){\n  JacksonInject ann\u003d_findAnnotation(m,JacksonInject.class);\n  if (ann \u003d\u003d null) {\n    return null;\n  }\n  JacksonInject.Value v\u003dJacksonInject.Value.from(ann);\n  if (!v.hasId()) {\n    Object id;\n    if (!(m instanceof AnnotatedMethod)) {\n      id\u003dm.getRawType().getName();\n    }\n else {\n      AnnotatedMethod am\u003d(AnnotatedMethod)m;\n      if (am.getParameterCount() \u003d\u003d 0) {\n        id\u003dm.getRawType().getName();\n      }\n else {\n        id\u003dam.getRawParameterType(0).getName();\n      }\n    }\n    v\u003dv.withId(id);\n  }\n  return v;\n}",
    "begin_line": 445,
    "end_line": 468,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findInjectableValueId#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override @Deprecated public Object findInjectableValueId(AnnotatedMember m){\n  JacksonInject.Value v\u003dfindInjectableValue(m);\n  return (v \u003d\u003d null) ? null : v.getId();\n}",
    "begin_line": 472,
    "end_line": 475,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findViews#478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findViews(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Class\u003c?\u003e[] findViews(Annotated a){\n  JsonView ann\u003d_findAnnotation(a,JsonView.class);\n  return (ann \u003d\u003d null) ? null : ann.value();\n}",
    "begin_line": 478,
    "end_line": 482,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.resolveSetterConflict#485",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.resolveSetterConflict(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override public AnnotatedMethod resolveSetterConflict(MapperConfig\u003c?\u003e config,AnnotatedMethod setter1,AnnotatedMethod setter2){\n  Class\u003c?\u003e cls1\u003dsetter1.getRawParameterType(0);\n  Class\u003c?\u003e cls2\u003dsetter2.getRawParameterType(0);\n  if (cls1.isPrimitive()) {\n    if (!cls2.isPrimitive()) {\n      return setter1;\n    }\n  }\n else   if (cls2.isPrimitive()) {\n    return setter2;\n  }\n  if (cls1 \u003d\u003d String.class) {\n    if (cls2 !\u003d String.class) {\n      return setter1;\n    }\n  }\n else   if (cls2 \u003d\u003d String.class) {\n    return setter2;\n  }\n  return null;\n}",
    "begin_line": 485,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findTypeResolver#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public TypeResolverBuilder\u003c?\u003e findTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedClass ac,JavaType baseType){\n  return _findTypeResolver(config,ac,baseType);\n}",
    "begin_line": 519,
    "end_line": 523,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyTypeResolver#526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public TypeResolverBuilder\u003c?\u003e findPropertyTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedMember am,JavaType baseType){\n  if (baseType.isContainerType() || baseType.isReferenceType()) {\n    return null;\n  }\n  return _findTypeResolver(config,am,baseType);\n}",
    "begin_line": 526,
    "end_line": 538,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyContentTypeResolver#541",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyContentTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public TypeResolverBuilder\u003c?\u003e findPropertyContentTypeResolver(MapperConfig\u003c?\u003e config,AnnotatedMember am,JavaType containerType){\n  if (containerType.getContentType() \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Must call method with a container or reference type (got \" + containerType + \")\");\n  }\n  return _findTypeResolver(config,am,containerType);\n}",
    "begin_line": 541,
    "end_line": 551,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSubtypes#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSubtypes(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public List\u003cNamedType\u003e findSubtypes(Annotated a){\n  JsonSubTypes t\u003d_findAnnotation(a,JsonSubTypes.class);\n  if (t \u003d\u003d null)   return null;\n  JsonSubTypes.Type[] types\u003dt.value();\n  ArrayList\u003cNamedType\u003e result\u003dnew ArrayList\u003cNamedType\u003e(types.length);\n  for (  JsonSubTypes.Type type : types) {\n    result.add(new NamedType(type.value(),type.name()));\n  }\n  return result;\n}",
    "begin_line": 554,
    "end_line": 564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findTypeName#567",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findTypeName(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public String findTypeName(AnnotatedClass ac){\n  JsonTypeName tn\u003d_findAnnotation(ac,JsonTypeName.class);\n  return (tn \u003d\u003d null) ? null : tn.value();\n}",
    "begin_line": 567,
    "end_line": 571,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.isTypeId#574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.isTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Boolean isTypeId(AnnotatedMember member){\n  return _hasAnnotation(member,JsonTypeId.class);\n}",
    "begin_line": 574,
    "end_line": 576,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findObjectIdInfo#585",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectIdInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public ObjectIdInfo findObjectIdInfo(Annotated ann){\n  JsonIdentityInfo info\u003d_findAnnotation(ann,JsonIdentityInfo.class);\n  if (info \u003d\u003d null || info.generator() \u003d\u003d ObjectIdGenerators.None.class) {\n    return null;\n  }\n  PropertyName name\u003dPropertyName.construct(info.property());\n  return new ObjectIdInfo(name,info.scope(),info.generator(),info.resolver());\n}",
    "begin_line": 585,
    "end_line": 593,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findObjectReferenceInfo#596",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findObjectReferenceInfo(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.introspect.ObjectIdInfo)",
    "snippet": "@Override public ObjectIdInfo findObjectReferenceInfo(Annotated ann,ObjectIdInfo objectIdInfo){\n  JsonIdentityReference ref\u003d_findAnnotation(ann,JsonIdentityReference.class);\n  if (ref \u003d\u003d null) {\n    return objectIdInfo;\n  }\n  if (objectIdInfo \u003d\u003d null) {\n    objectIdInfo\u003dObjectIdInfo.empty();\n  }\n  return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n}",
    "begin_line": 596,
    "end_line": 605,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializer#614",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findSerializer(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonSerializer\u003e serClass\u003dann.using();\n    if (serClass !\u003d JsonSerializer.None.class) {\n      return serClass;\n    }\n  }\n  JsonRawValue annRaw\u003d_findAnnotation(a,JsonRawValue.class);\n  if ((annRaw !\u003d null) \u0026\u0026 annRaw.value()) {\n    Class\u003c?\u003e cls\u003da.getRawType();\n    return new RawSerializer\u003cObject\u003e(cls);\n  }\n  return null;\n}",
    "begin_line": 614,
    "end_line": 636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findKeySerializer#639",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findKeySerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findKeySerializer(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonSerializer\u003e serClass\u003dann.keyUsing();\n    if (serClass !\u003d JsonSerializer.None.class) {\n      return serClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 639,
    "end_line": 650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findContentSerializer#653",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findContentSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findContentSerializer(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonSerializer\u003e serClass\u003dann.contentUsing();\n    if (serClass !\u003d JsonSerializer.None.class) {\n      return serClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 653,
    "end_line": 664,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNullSerializer#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNullSerializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findNullSerializer(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonSerializer\u003e serClass\u003dann.nullsUsing();\n    if (serClass !\u003d JsonSerializer.None.class) {\n      return serClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 667,
    "end_line": 678,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPropertyInclusion#681",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonInclude.Value findPropertyInclusion(Annotated a){\n  JsonInclude inc\u003d_findAnnotation(a,JsonInclude.class);\n  JsonInclude.Value value\u003d(inc \u003d\u003d null) ? JsonInclude.Value.empty() : JsonInclude.Value.from(inc);\n  if (value.getValueInclusion() \u003d\u003d JsonInclude.Include.USE_DEFAULTS) {\n    value\u003d_refinePropertyInclusion(a,value);\n  }\n  return value;\n}",
    "begin_line": 681,
    "end_line": 691,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._refinePropertyInclusion#694",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._refinePropertyInclusion(com.fasterxml.jackson.databind.introspect.Annotated, JsonInclude.Value)",
    "snippet": "@SuppressWarnings(\"deprecation\") private JsonInclude.Value _refinePropertyInclusion(Annotated a,JsonInclude.Value value){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  if (ann !\u003d null) {\nswitch (ann.include()) {\ncase ALWAYS:      return value.withValueInclusion(JsonInclude.Include.ALWAYS);\ncase NON_NULL:    return value.withValueInclusion(JsonInclude.Include.NON_NULL);\ncase NON_DEFAULT:  return value.withValueInclusion(JsonInclude.Include.NON_DEFAULT);\ncase NON_EMPTY:return value.withValueInclusion(JsonInclude.Include.NON_EMPTY);\ncase DEFAULT_INCLUSION:default:}\n}\nreturn value;\n}",
    "begin_line": 694,
    "end_line": 711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationTyping#714",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationTyping(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonSerialize.Typing findSerializationTyping(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  return (ann \u003d\u003d null) ? null : ann.typing();\n}",
    "begin_line": 714,
    "end_line": 718,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationConverter#721",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findSerializationConverter(Annotated a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(),Converter.None.class);\n}",
    "begin_line": 721,
    "end_line": 724,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationContentConverter#727",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Object findSerializationContentConverter(AnnotatedMember a){\n  JsonSerialize ann\u003d_findAnnotation(a,JsonSerialize.class);\n  return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(),Converter.None.class);\n}",
    "begin_line": 727,
    "end_line": 730,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.refineSerializationType#739",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineSerializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType refineSerializationType(final MapperConfig\u003c?\u003e config,final Annotated a,final JavaType baseType) throws JsonMappingException {\n  JavaType type\u003dbaseType;\n  final TypeFactory tf\u003dconfig.getTypeFactory();\n  final JsonSerialize jsonSer\u003d_findAnnotation(a,JsonSerialize.class);\n  final Class\u003c?\u003e serClass\u003d(jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.as());\n  if (serClass !\u003d null) {\n    if (type.hasRawClass(serClass)) {\n      type\u003dtype.withStaticTyping();\n    }\n else {\n      Class\u003c?\u003e currRaw\u003dtype.getRawClass();\n      try {\n        if (serClass.isAssignableFrom(currRaw)) {\n          type\u003dtf.constructGeneralizedType(type,serClass);\n        }\n else         if (currRaw.isAssignableFrom(serClass)) {\n          type\u003dtf.constructSpecializedType(type,serClass);\n        }\n else         if (_primitiveAndWrapper(currRaw,serClass)) {\n          type\u003dtype.withStaticTyping();\n        }\n else {\n          throw new JsonMappingException(null,String.format(\"Cannot refine serialization type %s into %s; types not related\",type,serClass.getName()));\n        }\n      }\n catch (      IllegalArgumentException iae) {\n        throw new JsonMappingException(null,String.format(\"Failed to widen type %s with annotation (value %s), from \u0027%s\u0027: %s\",type,serClass.getName(),a.getName(),iae.getMessage()),iae);\n      }\n    }\n  }\n  if (type.isMapLikeType()) {\n    JavaType keyType\u003dtype.getKeyType();\n    final Class\u003c?\u003e keyClass\u003d(jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.keyAs());\n    if (keyClass !\u003d null) {\n      if (keyType.hasRawClass(keyClass)) {\n        keyType\u003dkeyType.withStaticTyping();\n      }\n else {\n        Class\u003c?\u003e currRaw\u003dkeyType.getRawClass();\n        try {\n          if (keyClass.isAssignableFrom(currRaw)) {\n            keyType\u003dtf.constructGeneralizedType(keyType,keyClass);\n          }\n else           if (currRaw.isAssignableFrom(keyClass)) {\n            keyType\u003dtf.constructSpecializedType(keyType,keyClass);\n          }\n else           if (_primitiveAndWrapper(currRaw,keyClass)) {\n            keyType\u003dkeyType.withStaticTyping();\n          }\n else {\n            throw new JsonMappingException(null,String.format(\"Cannot refine serialization key type %s into %s; types not related\",keyType,keyClass.getName()));\n          }\n        }\n catch (        IllegalArgumentException iae) {\n          throw new JsonMappingException(null,String.format(\"Failed to widen key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",type,keyClass.getName(),a.getName(),iae.getMessage()),iae);\n        }\n      }\n      type\u003d((MapLikeType)type).withKeyType(keyType);\n    }\n  }\n  JavaType contentType\u003dtype.getContentType();\n  if (contentType !\u003d null) {\n    final Class\u003c?\u003e contentClass\u003d(jsonSer \u003d\u003d null) ? null : _classIfExplicit(jsonSer.contentAs());\n    if (contentClass !\u003d null) {\n      if (contentType.hasRawClass(contentClass)) {\n        contentType\u003dcontentType.withStaticTyping();\n      }\n else {\n        Class\u003c?\u003e currRaw\u003dcontentType.getRawClass();\n        try {\n          if (contentClass.isAssignableFrom(currRaw)) {\n            contentType\u003dtf.constructGeneralizedType(contentType,contentClass);\n          }\n else           if (currRaw.isAssignableFrom(contentClass)) {\n            contentType\u003dtf.constructSpecializedType(contentType,contentClass);\n          }\n else           if (_primitiveAndWrapper(currRaw,contentClass)) {\n            contentType\u003dcontentType.withStaticTyping();\n          }\n else {\n            throw new JsonMappingException(null,String.format(\"Cannot refine serialization content type %s into %s; types not related\",contentType,contentClass.getName()));\n          }\n        }\n catch (        IllegalArgumentException iae) {\n          throw new JsonMappingException(null,String.format(\"Internal error: failed to refine value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",type,contentClass.getName(),a.getName(),iae.getMessage()),iae);\n        }\n      }\n      type\u003dtype.withContentType(contentType);\n    }\n  }\n  return type;\n}",
    "begin_line": 739,
    "end_line": 854,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationType#858",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationType(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findSerializationType(Annotated am){\n  return null;\n}",
    "begin_line": 858,
    "end_line": 860,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationKeyType#864",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findSerializationKeyType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 864,
    "end_line": 866,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationContentType#870",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findSerializationContentType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 870,
    "end_line": 872,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationPropertyOrder#881",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationPropertyOrder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public String[] findSerializationPropertyOrder(AnnotatedClass ac){\n  JsonPropertyOrder order\u003d_findAnnotation(ac,JsonPropertyOrder.class);\n  return (order \u003d\u003d null) ? null : order.value();\n}",
    "begin_line": 881,
    "end_line": 884,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSerializationSortAlphabetically#887",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSerializationSortAlphabetically(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean findSerializationSortAlphabetically(Annotated ann){\n  return _findSortAlpha(ann);\n}",
    "begin_line": 887,
    "end_line": 889,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findSortAlpha#891",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findSortAlpha(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "private final Boolean _findSortAlpha(Annotated ann){\n  JsonPropertyOrder order\u003d_findAnnotation(ann,JsonPropertyOrder.class);\n  if ((order !\u003d null) \u0026\u0026 order.alphabetic()) {\n    return Boolean.TRUE;\n  }\n  return null;\n}",
    "begin_line": 891,
    "end_line": 899,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findAndAddVirtualProperties#902",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findAndAddVirtualProperties(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "@Override public void findAndAddVirtualProperties(MapperConfig\u003c?\u003e config,AnnotatedClass ac,List\u003cBeanPropertyWriter\u003e properties){\n  JsonAppend ann\u003d_findAnnotation(ac,JsonAppend.class);\n  if (ann \u003d\u003d null) {\n    return;\n  }\n  final boolean prepend\u003dann.prepend();\n  JavaType propType\u003dnull;\n  JsonAppend.Attr[] attrs\u003dann.attrs();\n  for (int i\u003d0, len\u003dattrs.length; i \u003c len; ++i) {\n    if (propType \u003d\u003d null) {\n      propType\u003dconfig.constructType(Object.class);\n    }\n    BeanPropertyWriter bpw\u003d_constructVirtualProperty(attrs[i],config,ac,propType);\n    if (prepend) {\n      properties.add(i,bpw);\n    }\n else {\n      properties.add(bpw);\n    }\n  }\n  JsonAppend.Prop[] props\u003dann.props();\n  for (int i\u003d0, len\u003dprops.length; i \u003c len; ++i) {\n    BeanPropertyWriter bpw\u003d_constructVirtualProperty(props[i],config,ac);\n    if (prepend) {\n      properties.add(i,bpw);\n    }\n else {\n      properties.add(bpw);\n    }\n  }\n}",
    "begin_line": 902,
    "end_line": 937,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructVirtualProperty#939",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Attr, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr,MapperConfig\u003c?\u003e config,AnnotatedClass ac,JavaType type){\n  PropertyMetadata metadata\u003dattr.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n  String attrName\u003dattr.value();\n  PropertyName propName\u003d_propertyName(attr.propName(),attr.propNamespace());\n  if (!propName.hasSimpleName()) {\n    propName\u003dPropertyName.construct(attrName);\n  }\n  AnnotatedMember member\u003dnew VirtualAnnotatedMember(ac,ac.getRawType(),attrName,type);\n  SimpleBeanPropertyDefinition propDef\u003dSimpleBeanPropertyDefinition.construct(config,member,propName,metadata,attr.include());\n  return AttributePropertyWriter.construct(attrName,propDef,ac.getAnnotations(),type);\n}",
    "begin_line": 939,
    "end_line": 961,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructVirtualProperty#963",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructVirtualProperty(com.fasterxml.jackson.databind.annotation.JsonAppend.Prop, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop,MapperConfig\u003c?\u003e config,AnnotatedClass ac){\n  PropertyMetadata metadata\u003dprop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;\n  PropertyName propName\u003d_propertyName(prop.name(),prop.namespace());\n  JavaType type\u003dconfig.constructType(prop.type());\n  AnnotatedMember member\u003dnew VirtualAnnotatedMember(ac,ac.getRawType(),propName.getSimpleName(),type);\n  SimpleBeanPropertyDefinition propDef\u003dSimpleBeanPropertyDefinition.construct(config,member,propName,metadata,prop.include());\n  Class\u003c?\u003e implClass\u003dprop.value();\n  HandlerInstantiator hi\u003dconfig.getHandlerInstantiator();\n  VirtualBeanPropertyWriter bpw\u003d(hi \u003d\u003d null) ? null : hi.virtualPropertyWriterInstance(config,implClass);\n  if (bpw \u003d\u003d null) {\n    bpw\u003d(VirtualBeanPropertyWriter)ClassUtil.createInstance(implClass,config.canOverrideAccessModifiers());\n  }\n  return bpw.withConfig(config,ac,propDef,type);\n}",
    "begin_line": 963,
    "end_line": 989,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNameForSerialization#998",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForSerialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public PropertyName findNameForSerialization(Annotated a){\n  boolean useDefault\u003dfalse;\n  JsonGetter jg\u003d_findAnnotation(a,JsonGetter.class);\n  if (jg !\u003d null) {\n    String s\u003djg.value();\n    if (!s.isEmpty()) {\n      return PropertyName.construct(s);\n    }\n    useDefault\u003dtrue;\n  }\n  JsonProperty pann\u003d_findAnnotation(a,JsonProperty.class);\n  if (pann !\u003d null) {\n    return PropertyName.construct(pann.value());\n  }\n  if (useDefault || _hasOneOf(a,ANNOTATIONS_TO_INFER_SER)) {\n    return PropertyName.USE_DEFAULT;\n  }\n  return null;\n}",
    "begin_line": 998,
    "end_line": 1018,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAsValue#1021",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAsValue(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean hasAsValue(Annotated a){\n  JsonValue ann\u003d_findAnnotation(a,JsonValue.class);\n  if (ann \u003d\u003d null) {\n    return null;\n  }\n  return ann.value();\n}",
    "begin_line": 1021,
    "end_line": 1027,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnyGetter#1030",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnyGetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean hasAnyGetter(Annotated a){\n  JsonAnyGetter ann\u003d_findAnnotation(a,JsonAnyGetter.class);\n  if (ann \u003d\u003d null) {\n    return null;\n  }\n  return ann.enabled();\n}",
    "begin_line": 1030,
    "end_line": 1036,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnyGetterAnnotation#1040",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnyGetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override @Deprecated public boolean hasAnyGetterAnnotation(AnnotatedMethod am){\n  return _hasAnnotation(am,JsonAnyGetter.class);\n}",
    "begin_line": 1040,
    "end_line": 1043,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAsValueAnnotation#1047",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAsValueAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override @Deprecated public boolean hasAsValueAnnotation(AnnotatedMethod am){\n  JsonValue ann\u003d_findAnnotation(am,JsonValue.class);\n  return (ann !\u003d null) \u0026\u0026 ann.value();\n}",
    "begin_line": 1047,
    "end_line": 1051,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializer#1060",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findDeserializer(Annotated a){\n  JsonDeserialize ann\u003d_findAnnotation(a,JsonDeserialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonDeserializer\u003e deserClass\u003dann.using();\n    if (deserClass !\u003d JsonDeserializer.None.class) {\n      return deserClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 1060,
    "end_line": 1071,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findKeyDeserializer#1074",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findKeyDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findKeyDeserializer(Annotated a){\n  JsonDeserialize ann\u003d_findAnnotation(a,JsonDeserialize.class);\n  if (ann !\u003d null) {\n    Class\u003c? extends KeyDeserializer\u003e deserClass\u003dann.keyUsing();\n    if (deserClass !\u003d KeyDeserializer.None.class) {\n      return deserClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 1074,
    "end_line": 1084,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findContentDeserializer#1087",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findContentDeserializer(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findContentDeserializer(Annotated a){\n  JsonDeserialize ann\u003d_findAnnotation(a,JsonDeserialize.class);\n  if (ann !\u003d null) {\n    @SuppressWarnings(\"rawtypes\") Class\u003c? extends JsonDeserializer\u003e deserClass\u003dann.contentUsing();\n    if (deserClass !\u003d JsonDeserializer.None.class) {\n      return deserClass;\n    }\n  }\n  return null;\n}",
    "begin_line": 1087,
    "end_line": 1098,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationConverter#1101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationConverter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Object findDeserializationConverter(Annotated a){\n  JsonDeserialize ann\u003d_findAnnotation(a,JsonDeserialize.class);\n  return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.converter(),Converter.None.class);\n}",
    "begin_line": 1101,
    "end_line": 1105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationContentConverter#1108",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationContentConverter(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Object findDeserializationContentConverter(AnnotatedMember a){\n  JsonDeserialize ann\u003d_findAnnotation(a,JsonDeserialize.class);\n  return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.contentConverter(),Converter.None.class);\n}",
    "begin_line": 1108,
    "end_line": 1112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.refineDeserializationType#1121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.refineDeserializationType(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType refineDeserializationType(final MapperConfig\u003c?\u003e config,final Annotated a,final JavaType baseType) throws JsonMappingException {\n  JavaType type\u003dbaseType;\n  final TypeFactory tf\u003dconfig.getTypeFactory();\n  final JsonDeserialize jsonDeser\u003d_findAnnotation(a,JsonDeserialize.class);\n  final Class\u003c?\u003e valueClass\u003d(jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.as());\n  if ((valueClass !\u003d null) \u0026\u0026 !type.hasRawClass(valueClass) \u0026\u0026 !_primitiveAndWrapper(type,valueClass)) {\n    try {\n      type\u003dtf.constructSpecializedType(type,valueClass);\n    }\n catch (    IllegalArgumentException iae) {\n      throw new JsonMappingException(null,String.format(\"Failed to narrow type %s with annotation (value %s), from \u0027%s\u0027: %s\",type,valueClass.getName(),a.getName(),iae.getMessage()),iae);\n    }\n  }\n  if (type.isMapLikeType()) {\n    JavaType keyType\u003dtype.getKeyType();\n    final Class\u003c?\u003e keyClass\u003d(jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.keyAs());\n    if ((keyClass !\u003d null) \u0026\u0026 !_primitiveAndWrapper(keyType,keyClass)) {\n      try {\n        keyType\u003dtf.constructSpecializedType(keyType,keyClass);\n        type\u003d((MapLikeType)type).withKeyType(keyType);\n      }\n catch (      IllegalArgumentException iae) {\n        throw new JsonMappingException(null,String.format(\"Failed to narrow key type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",type,keyClass.getName(),a.getName(),iae.getMessage()),iae);\n      }\n    }\n  }\n  JavaType contentType\u003dtype.getContentType();\n  if (contentType !\u003d null) {\n    final Class\u003c?\u003e contentClass\u003d(jsonDeser \u003d\u003d null) ? null : _classIfExplicit(jsonDeser.contentAs());\n    if ((contentClass !\u003d null) \u0026\u0026 !_primitiveAndWrapper(contentType,contentClass)) {\n      try {\n        contentType\u003dtf.constructSpecializedType(contentType,contentClass);\n        type\u003dtype.withContentType(contentType);\n      }\n catch (      IllegalArgumentException iae) {\n        throw new JsonMappingException(null,String.format(\"Failed to narrow value type of %s with concrete-type annotation (value %s), from \u0027%s\u0027: %s\",type,contentClass.getName(),a.getName(),iae.getMessage()),iae);\n      }\n    }\n  }\n  return type;\n}",
    "begin_line": 1121,
    "end_line": 1179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationContentType#1183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationContentType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findDeserializationContentType(Annotated am,JavaType baseContentType){\n  return null;\n}",
    "begin_line": 1183,
    "end_line": 1185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationType#1189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findDeserializationType(Annotated am,JavaType baseType){\n  return null;\n}",
    "begin_line": 1189,
    "end_line": 1191,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findDeserializationKeyType#1195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findDeserializationKeyType(com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @Deprecated public Class\u003c?\u003e findDeserializationKeyType(Annotated am,JavaType baseKeyType){\n  return null;\n}",
    "begin_line": 1195,
    "end_line": 1197,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findValueInstantiator#1206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findValueInstantiator(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Object findValueInstantiator(AnnotatedClass ac){\n  JsonValueInstantiator ann\u003d_findAnnotation(ac,JsonValueInstantiator.class);\n  return (ann \u003d\u003d null) ? null : ann.value();\n}",
    "begin_line": 1206,
    "end_line": 1211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPOJOBuilder#1214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPOJOBuilder(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Class\u003c?\u003e findPOJOBuilder(AnnotatedClass ac){\n  JsonDeserialize ann\u003d_findAnnotation(ac,JsonDeserialize.class);\n  return (ann \u003d\u003d null) ? null : _classIfExplicit(ann.builder());\n}",
    "begin_line": 1214,
    "end_line": 1218,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findPOJOBuilderConfig#1221",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findPOJOBuilderConfig(com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac){\n  JsonPOJOBuilder ann\u003d_findAnnotation(ac,JsonPOJOBuilder.class);\n  return (ann \u003d\u003d null) ? null : new JsonPOJOBuilder.Value(ann);\n}",
    "begin_line": 1221,
    "end_line": 1225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findNameForDeserialization#1234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findNameForDeserialization(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public PropertyName findNameForDeserialization(Annotated a){\n  boolean useDefault\u003dfalse;\n  JsonSetter js\u003d_findAnnotation(a,JsonSetter.class);\n  if (js !\u003d null) {\n    String s\u003djs.value();\n    if (s.isEmpty()) {\n      useDefault\u003dtrue;\n    }\n else {\n      return PropertyName.construct(s);\n    }\n  }\n  JsonProperty pann\u003d_findAnnotation(a,JsonProperty.class);\n  if (pann !\u003d null) {\n    return PropertyName.construct(pann.value());\n  }\n  if (useDefault || _hasOneOf(a,ANNOTATIONS_TO_INFER_DESER)) {\n    return PropertyName.USE_DEFAULT;\n  }\n  return null;\n}",
    "begin_line": 1234,
    "end_line": 1257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnySetter#1260",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnySetter(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean hasAnySetter(Annotated a){\n  JsonAnySetter ann\u003d_findAnnotation(a,JsonAnySetter.class);\n  return (ann \u003d\u003d null) ? null : ann.enabled();\n}",
    "begin_line": 1260,
    "end_line": 1263,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findSetterInfo#1266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findSetterInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonSetter.Value findSetterInfo(Annotated a){\n  return JsonSetter.Value.from(_findAnnotation(a,JsonSetter.class));\n}",
    "begin_line": 1266,
    "end_line": 1268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findMergeInfo#1271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findMergeInfo(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public Boolean findMergeInfo(Annotated a){\n  JsonMerge ann\u003d_findAnnotation(a,JsonMerge.class);\n  return (ann \u003d\u003d null) ? null : ann.value().asBoolean();\n}",
    "begin_line": 1271,
    "end_line": 1274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasAnySetterAnnotation#1278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasAnySetterAnnotation(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override @Deprecated public boolean hasAnySetterAnnotation(AnnotatedMethod am){\n  return _hasAnnotation(am,JsonAnySetter.class);\n}",
    "begin_line": 1278,
    "end_line": 1280,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.hasCreatorAnnotation#1284",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.hasCreatorAnnotation(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override @Deprecated public boolean hasCreatorAnnotation(Annotated a){\n  JsonCreator ann\u003d_findAnnotation(a,JsonCreator.class);\n  if (ann !\u003d null) {\n    return (ann.mode() !\u003d JsonCreator.Mode.DISABLED);\n  }\n  if (_cfgConstructorPropertiesImpliesCreator) {\n    if (a instanceof AnnotatedConstructor) {\n      if (_java7Helper !\u003d null) {\n        Boolean b\u003d_java7Helper.hasCreatorAnnotation(a);\n        if (b !\u003d null) {\n          return b.booleanValue();\n        }\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 1284,
    "end_line": 1306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findCreatorBinding#1310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findCreatorBinding(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override @Deprecated public JsonCreator.Mode findCreatorBinding(Annotated a){\n  JsonCreator ann\u003d_findAnnotation(a,JsonCreator.class);\n  return (ann \u003d\u003d null) ? null : ann.mode();\n}",
    "begin_line": 1310,
    "end_line": 1313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector.findCreatorAnnotation#1316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector.findCreatorAnnotation(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@Override public JsonCreator.Mode findCreatorAnnotation(MapperConfig\u003c?\u003e config,Annotated a){\n  JsonCreator ann\u003d_findAnnotation(a,JsonCreator.class);\n  if (ann !\u003d null) {\n    return ann.mode();\n  }\n  if (_cfgConstructorPropertiesImpliesCreator \u0026\u0026 config.isEnabled(MapperFeature.INFER_CREATOR_FROM_CONSTRUCTOR_PROPERTIES)) {\n    if (a instanceof AnnotatedConstructor) {\n      if (_java7Helper !\u003d null) {\n        Boolean b\u003d_java7Helper.hasCreatorAnnotation(a);\n        if ((b !\u003d null) \u0026\u0026 b.booleanValue()) {\n          return JsonCreator.Mode.PROPERTIES;\n        }\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 1316,
    "end_line": 1336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._isIgnorable#1344",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._isIgnorable(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected boolean _isIgnorable(Annotated a){\n  JsonIgnore ann\u003d_findAnnotation(a,JsonIgnore.class);\n  if (ann !\u003d null) {\n    return ann.value();\n  }\n  if (_java7Helper !\u003d null) {\n    Boolean b\u003d_java7Helper.findTransient(a);\n    if (b !\u003d null) {\n      return b.booleanValue();\n    }\n  }\n  return false;\n}",
    "begin_line": 1344,
    "end_line": 1357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._classIfExplicit#1359",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._classIfExplicit(java.lang.Class\u003c?\u003e)",
    "snippet": "protected Class\u003c?\u003e _classIfExplicit(Class\u003c?\u003e cls){\n  if (cls \u003d\u003d null || ClassUtil.isBogusClass(cls)) {\n    return null;\n  }\n  return cls;\n}",
    "begin_line": 1359,
    "end_line": 1364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._classIfExplicit#1366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._classIfExplicit(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "protected Class\u003c?\u003e _classIfExplicit(Class\u003c?\u003e cls,Class\u003c?\u003e implicit){\n  cls\u003d_classIfExplicit(cls);\n  return (cls \u003d\u003d null || cls \u003d\u003d implicit) ? null : cls;\n}",
    "begin_line": 1366,
    "end_line": 1369,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._propertyName#1371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._propertyName(java.lang.String, java.lang.String)",
    "snippet": "protected PropertyName _propertyName(String localName,String namespace){\n  if (localName.isEmpty()) {\n    return PropertyName.USE_DEFAULT;\n  }\n  if (namespace \u003d\u003d null || namespace.isEmpty()) {\n    return PropertyName.construct(localName);\n  }\n  return PropertyName.construct(localName,namespace);\n}",
    "begin_line": 1371,
    "end_line": 1379,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findConstructorName#1381",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findConstructorName(com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected PropertyName _findConstructorName(Annotated a){\n  if (a instanceof AnnotatedParameter) {\n    AnnotatedParameter p\u003d(AnnotatedParameter)a;\n    AnnotatedWithParams ctor\u003dp.getOwner();\n    if (ctor !\u003d null) {\n      if (_java7Helper !\u003d null) {\n        PropertyName name\u003d_java7Helper.findConstructorName(p);\n        if (name !\u003d null) {\n          return name;\n        }\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 1381,
    "end_line": 1397,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._findTypeResolver#1404",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._findTypeResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"deprecation\") protected TypeResolverBuilder\u003c?\u003e _findTypeResolver(MapperConfig\u003c?\u003e config,Annotated ann,JavaType baseType){\n  TypeResolverBuilder\u003c?\u003e b;\n  JsonTypeInfo info\u003d_findAnnotation(ann,JsonTypeInfo.class);\n  JsonTypeResolver resAnn\u003d_findAnnotation(ann,JsonTypeResolver.class);\n  if (resAnn !\u003d null) {\n    if (info \u003d\u003d null) {\n      return null;\n    }\n    b\u003dconfig.typeResolverBuilderInstance(ann,resAnn.value());\n  }\n else {\n    if (info \u003d\u003d null) {\n      return null;\n    }\n    if (info.use() \u003d\u003d JsonTypeInfo.Id.NONE) {\n      return _constructNoTypeResolverBuilder();\n    }\n    b\u003d_constructStdTypeResolverBuilder();\n  }\n  JsonTypeIdResolver idResInfo\u003d_findAnnotation(ann,JsonTypeIdResolver.class);\n  TypeIdResolver idRes\u003d(idResInfo \u003d\u003d null) ? null : config.typeIdResolverInstance(ann,idResInfo.value());\n  if (idRes !\u003d null) {\n    idRes.init(baseType);\n  }\n  b\u003db.init(info.use(),idRes);\n  JsonTypeInfo.As inclusion\u003dinfo.include();\n  if (inclusion \u003d\u003d JsonTypeInfo.As.EXTERNAL_PROPERTY \u0026\u0026 (ann instanceof AnnotatedClass)) {\n    inclusion\u003dJsonTypeInfo.As.PROPERTY;\n  }\n  b\u003db.inclusion(inclusion);\n  b\u003db.typeProperty(info.property());\n  Class\u003c?\u003e defaultImpl\u003dinfo.defaultImpl();\n  if (defaultImpl !\u003d JsonTypeInfo.None.class \u0026\u0026 !defaultImpl.isAnnotation()) {\n    b\u003db.defaultImpl(defaultImpl);\n  }\n  b\u003db.typeIdVisibility(info.visible());\n  return b;\n}",
    "begin_line": 1404,
    "end_line": 1460,
    "comment": "/** \n * Helper method called to construct and initialize instance of  {@link TypeResolverBuilder}if given annotated element indicates one is needed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructStdTypeResolverBuilder#1466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructStdTypeResolverBuilder()",
    "snippet": "protected StdTypeResolverBuilder _constructStdTypeResolverBuilder(){\n  return new StdTypeResolverBuilder();\n}",
    "begin_line": 1466,
    "end_line": 1468,
    "comment": "/** \n * Helper method for constructing standard  {@link TypeResolverBuilder}implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._constructNoTypeResolverBuilder#1474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._constructNoTypeResolverBuilder()",
    "snippet": "protected StdTypeResolverBuilder _constructNoTypeResolverBuilder(){\n  return StdTypeResolverBuilder.noTypeInfoBuilder();\n}",
    "begin_line": 1474,
    "end_line": 1476,
    "comment": "/** \n * Helper method for dealing with \"no type info\" marker; can\u0027t be null (as it\u0027d be replaced by default typing)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._primitiveAndWrapper#1478",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._primitiveAndWrapper(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "private boolean _primitiveAndWrapper(Class\u003c?\u003e baseType,Class\u003c?\u003e refinement){\n  if (baseType.isPrimitive()) {\n    return baseType \u003d\u003d ClassUtil.primitiveType(refinement);\n  }\n  if (refinement.isPrimitive()) {\n    return refinement \u003d\u003d ClassUtil.primitiveType(baseType);\n  }\n  return false;\n}",
    "begin_line": 1478,
    "end_line": 1487,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JacksonAnnotationIntrospector._primitiveAndWrapper#1489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector",
    "signature": "com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector._primitiveAndWrapper(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "private boolean _primitiveAndWrapper(JavaType baseType,Class\u003c?\u003e refinement){\n  if (baseType.isPrimitive()) {\n    return baseType.hasRawClass(ClassUtil.primitiveType(refinement));\n  }\n  if (refinement.isPrimitive()) {\n    return refinement \u003d\u003d ClassUtil.primitiveType(baseType.getRawClass());\n  }\n  return false;\n}",
    "begin_line": 1489,
    "end_line": 1498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.MemberKey#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.MemberKey(java.lang.reflect.Method)",
    "snippet": "public MemberKey(Method m){\n  this(m.getName(),m.getParameterTypes());\n}",
    "begin_line": 18,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.MemberKey#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.MemberKey(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "public MemberKey(Constructor\u003c?\u003e ctor){\n  this(\"\",ctor.getParameterTypes());\n}",
    "begin_line": 23,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.MemberKey#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.MemberKey(java.lang.String, java.lang.Class\u003c?\u003e[])",
    "snippet": "public MemberKey(String name,Class\u003c?\u003e[] argTypes){\n  _name\u003dname;\n  _argTypes\u003d(argTypes \u003d\u003d null) ? NO_CLASSES : argTypes;\n}",
    "begin_line": 28,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.getName#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.getName()",
    "snippet": "public String getName(){\n  return _name;\n}",
    "begin_line": 34,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.argCount#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.argCount()",
    "snippet": "public int argCount(){\n  return _argTypes.length;\n}",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.toString#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.toString()",
    "snippet": "@Override public String toString(){\n  return _name + \"(\" + _argTypes.length+ \"-args)\";\n}",
    "begin_line": 43,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.hashCode#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _name.hashCode() + _argTypes.length;\n}",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberKey.equals#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/MemberKey.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.MemberKey",
    "signature": "com.fasterxml.jackson.databind.introspect.MemberKey.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass()) {\n    return false;\n  }\n  MemberKey other\u003d(MemberKey)o;\n  if (!_name.equals(other._name)) {\n    return false;\n  }\n  Class\u003c?\u003e[] otherArgs\u003dother._argTypes;\n  int len\u003d_argTypes.length;\n  if (otherArgs.length !\u003d len) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c len; ++i) {\n    Class\u003c?\u003e type1\u003dotherArgs[i];\n    Class\u003c?\u003e type2\u003d_argTypes[i];\n    if (type1 \u003d\u003d type2) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}",
    "begin_line": 53,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.POJOPropertiesCollector#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.POJOPropertiesCollector(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, boolean, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.introspect.AnnotatedClass, java.lang.String)",
    "snippet": "protected POJOPropertiesCollector(MapperConfig\u003c?\u003e config,boolean forSerialization,JavaType type,AnnotatedClass classDef,String mutatorPrefix){\n  _config\u003dconfig;\n  _stdBeanNaming\u003dconfig.isEnabled(MapperFeature.USE_STD_BEAN_NAMING);\n  _forSerialization\u003dforSerialization;\n  _type\u003dtype;\n  _classDef\u003dclassDef;\n  _mutatorPrefix\u003d(mutatorPrefix \u003d\u003d null) ? \"set\" : mutatorPrefix;\n  if (config.isAnnotationProcessingEnabled()) {\n    _useAnnotations\u003dtrue;\n    _annotationIntrospector\u003d_config.getAnnotationIntrospector();\n  }\n else {\n    _useAnnotations\u003dfalse;\n    _annotationIntrospector\u003dAnnotationIntrospector.nopInstance();\n  }\n  _visibilityChecker\u003d_config.getDefaultVisibilityChecker(type.getRawClass(),classDef);\n}",
    "begin_line": 126,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getConfig#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getConfig()",
    "snippet": "public MapperConfig\u003c?\u003e getConfig(){\n  return _config;\n}",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getType#156",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getType()",
    "snippet": "public JavaType getType(){\n  return _type;\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getClassDef#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getClassDef()",
    "snippet": "public AnnotatedClass getClassDef(){\n  return _classDef;\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getAnnotationIntrospector#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getAnnotationIntrospector()",
    "snippet": "public AnnotationIntrospector getAnnotationIntrospector(){\n  return _annotationIntrospector;\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getProperties#168",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getProperties()",
    "snippet": "public List\u003cBeanPropertyDefinition\u003e getProperties(){\n  Map\u003cString,POJOPropertyBuilder\u003e props\u003dgetPropertyMap();\n  return new ArrayList\u003cBeanPropertyDefinition\u003e(props.values());\n}",
    "begin_line": 168,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getInjectables#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getInjectables()",
    "snippet": "public Map\u003cObject,AnnotatedMember\u003e getInjectables(){\n  if (!_collected) {\n    collectAll();\n  }\n  return _injectables;\n}",
    "begin_line": 174,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getJsonValueMethod#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getJsonValueMethod()",
    "snippet": "@Deprecated public AnnotatedMethod getJsonValueMethod(){\n  AnnotatedMember m\u003dgetJsonValueAccessor();\n  if (m instanceof AnnotatedMethod) {\n    return (AnnotatedMethod)m;\n  }\n  return null;\n}",
    "begin_line": 182,
    "end_line": 188,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getJsonValueAccessor#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getJsonValueAccessor()",
    "snippet": "public AnnotatedMember getJsonValueAccessor(){\n  if (!_collected) {\n    collectAll();\n  }\n  if (_jsonValueAccessors !\u003d null) {\n    if (_jsonValueAccessors.size() \u003e 1) {\n      reportProblem(\"Multiple \u0027as-value\u0027 properties defined (%s vs %s)\",_jsonValueAccessors.get(0),_jsonValueAccessors.get(1));\n    }\n    return _jsonValueAccessors.get(0);\n  }\n  return null;\n}",
    "begin_line": 193,
    "end_line": 209,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getAnyGetter#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getAnyGetter()",
    "snippet": "public AnnotatedMember getAnyGetter(){\n  if (!_collected) {\n    collectAll();\n  }\n  if (_anyGetters !\u003d null) {\n    if (_anyGetters.size() \u003e 1) {\n      reportProblem(\"Multiple \u0027any-getters\u0027 defined (%s vs %s)\",_anyGetters.get(0),_anyGetters.get(1));\n    }\n    return _anyGetters.getFirst();\n  }\n  return null;\n}",
    "begin_line": 211,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getAnySetterField#226",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getAnySetterField()",
    "snippet": "public AnnotatedMember getAnySetterField(){\n  if (!_collected) {\n    collectAll();\n  }\n  if (_anySetterField !\u003d null) {\n    if (_anySetterField.size() \u003e 1) {\n      reportProblem(\"Multiple \u0027any-setter\u0027 fields defined (%s vs %s)\",_anySetterField.get(0),_anySetterField.get(1));\n    }\n    return _anySetterField.getFirst();\n  }\n  return null;\n}",
    "begin_line": 226,
    "end_line": 239,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getAnySetterMethod#241",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getAnySetterMethod()",
    "snippet": "public AnnotatedMethod getAnySetterMethod(){\n  if (!_collected) {\n    collectAll();\n  }\n  if (_anySetters !\u003d null) {\n    if (_anySetters.size() \u003e 1) {\n      reportProblem(\"Multiple \u0027any-setter\u0027 methods defined (%s vs %s)\",_anySetters.get(0),_anySetters.get(1));\n    }\n    return _anySetters.getFirst();\n  }\n  return null;\n}",
    "begin_line": 241,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getIgnoredPropertyNames#260",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getIgnoredPropertyNames()",
    "snippet": "public Set\u003cString\u003e getIgnoredPropertyNames(){\n  return _ignoredPropertyNames;\n}",
    "begin_line": 260,
    "end_line": 262,
    "comment": "/** \n * Accessor for set of properties that are explicitly marked to be ignored via per-property markers (but NOT class annotations).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getObjectIdInfo#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getObjectIdInfo()",
    "snippet": "public ObjectIdInfo getObjectIdInfo(){\n  ObjectIdInfo info\u003d_annotationIntrospector.findObjectIdInfo(_classDef);\n  if (info !\u003d null) {\n    info\u003d_annotationIntrospector.findObjectReferenceInfo(_classDef,info);\n  }\n  return info;\n}",
    "begin_line": 268,
    "end_line": 275,
    "comment": "/** \n * Accessor to find out whether type specified requires inclusion of Object Identifier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.findPOJOBuilderClass#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.findPOJOBuilderClass()",
    "snippet": "public Class\u003c?\u003e findPOJOBuilderClass(){\n  return _annotationIntrospector.findPOJOBuilder(_classDef);\n}",
    "begin_line": 280,
    "end_line": 282,
    "comment": "/** \n * Method for finding Class to use as POJO builder, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.getPropertyMap#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.getPropertyMap()",
    "snippet": "protected Map\u003cString,POJOPropertyBuilder\u003e getPropertyMap(){\n  if (!_collected) {\n    collectAll();\n  }\n  return _properties;\n}",
    "begin_line": 285,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.collectAll#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.collectAll()",
    "snippet": "protected void collectAll(){\n  LinkedHashMap\u003cString,POJOPropertyBuilder\u003e props\u003dnew LinkedHashMap\u003cString,POJOPropertyBuilder\u003e();\n  _addFields(props);\n  _addMethods(props);\n  if (!_classDef.isNonStaticInnerClass()) {\n    _addCreators(props);\n  }\n  _addInjectables(props);\n  _removeUnwantedProperties(props);\n  _removeUnwantedAccessor(props);\n  _renameProperties(props);\n  for (  POJOPropertyBuilder property : props.values()) {\n    property.mergeAnnotations(_forSerialization);\n  }\n  PropertyNamingStrategy naming\u003d_findNamingStrategy();\n  if (naming !\u003d null) {\n    _renameUsing(props,naming);\n  }\n  for (  POJOPropertyBuilder property : props.values()) {\n    property.trimByVisibility();\n  }\n  if (_config.isEnabled(MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME)) {\n    _renameWithWrappers(props);\n  }\n  _sortProperties(props);\n  _properties\u003dprops;\n  _collected\u003dtrue;\n}",
    "begin_line": 303,
    "end_line": 358,
    "comment": "/** \n * Internal method that will collect actual property information.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addFields#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addFields(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _addFields(Map\u003cString,POJOPropertyBuilder\u003e props){\n  final AnnotationIntrospector ai\u003d_annotationIntrospector;\n  final boolean pruneFinalFields\u003d!_forSerialization \u0026\u0026 !_config.isEnabled(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS);\n  final boolean transientAsIgnoral\u003d_config.isEnabled(MapperFeature.PROPAGATE_TRANSIENT_MARKER);\n  for (  AnnotatedField f : _classDef.fields()) {\n    String implName\u003dai.findImplicitPropertyName(f);\n    if (Boolean.TRUE.equals(ai.hasAsValue(f))) {\n      if (_jsonValueAccessors \u003d\u003d null) {\n        _jsonValueAccessors\u003dnew LinkedList\u003c\u003e();\n      }\n      _jsonValueAccessors.add(f);\n      continue;\n    }\n    if (Boolean.TRUE.equals(ai.hasAnySetter(f))) {\n      if (_anySetterField \u003d\u003d null) {\n        _anySetterField\u003dnew LinkedList\u003cAnnotatedMember\u003e();\n      }\n      _anySetterField.add(f);\n      continue;\n    }\n    if (implName \u003d\u003d null) {\n      implName\u003df.getName();\n    }\n    PropertyName pn;\n    if (_forSerialization) {\n      pn\u003dai.findNameForSerialization(f);\n    }\n else {\n      pn\u003dai.findNameForDeserialization(f);\n    }\n    boolean hasName\u003d(pn !\u003d null);\n    boolean nameExplicit\u003dhasName;\n    if (nameExplicit \u0026\u0026 pn.isEmpty()) {\n      pn\u003d_propNameFromSimple(implName);\n      nameExplicit\u003dfalse;\n    }\n    boolean visible\u003d(pn !\u003d null);\n    if (!visible) {\n      visible\u003d_visibilityChecker.isFieldVisible(f);\n    }\n    boolean ignored\u003dai.hasIgnoreMarker(f);\n    if (f.isTransient()) {\n      if (!hasName) {\n        visible\u003dfalse;\n        if (transientAsIgnoral) {\n          ignored\u003dtrue;\n        }\n      }\n    }\n    if (pruneFinalFields \u0026\u0026 (pn \u003d\u003d null) \u0026\u0026 !ignored\u0026\u0026 Modifier.isFinal(f.getModifiers())) {\n      continue;\n    }\n    _property(props,implName).addField(f,pn,nameExplicit,visible,ignored);\n  }\n}",
    "begin_line": 369,
    "end_line": 449,
    "comment": "/** \n * Method for collecting basic information on all fields found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addCreators#454",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addCreators(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _addCreators(Map\u003cString,POJOPropertyBuilder\u003e props){\n  if (!_useAnnotations) {\n    return;\n  }\n  for (  AnnotatedConstructor ctor : _classDef.getConstructors()) {\n    if (_creatorProperties \u003d\u003d null) {\n      _creatorProperties\u003dnew LinkedList\u003cPOJOPropertyBuilder\u003e();\n    }\n    for (int i\u003d0, len\u003dctor.getParameterCount(); i \u003c len; ++i) {\n      _addCreatorParam(props,ctor.getParameter(i));\n    }\n  }\n  for (  AnnotatedMethod factory : _classDef.getFactoryMethods()) {\n    if (_creatorProperties \u003d\u003d null) {\n      _creatorProperties\u003dnew LinkedList\u003cPOJOPropertyBuilder\u003e();\n    }\n    for (int i\u003d0, len\u003dfactory.getParameterCount(); i \u003c len; ++i) {\n      _addCreatorParam(props,factory.getParameter(i));\n    }\n  }\n}",
    "begin_line": 454,
    "end_line": 476,
    "comment": "/** \n * Method for collecting basic information on constructor(s) found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addCreatorParam#481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addCreatorParam(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedParameter)",
    "snippet": "protected void _addCreatorParam(Map\u003cString,POJOPropertyBuilder\u003e props,AnnotatedParameter param){\n  String impl\u003d_annotationIntrospector.findImplicitPropertyName(param);\n  if (impl \u003d\u003d null) {\n    impl\u003d\"\";\n  }\n  PropertyName pn\u003d_annotationIntrospector.findNameForDeserialization(param);\n  boolean expl\u003d(pn !\u003d null \u0026\u0026 !pn.isEmpty());\n  if (!expl) {\n    if (impl.isEmpty()) {\n      return;\n    }\n    JsonCreator.Mode creatorMode\u003d_annotationIntrospector.findCreatorAnnotation(_config,param.getOwner());\n    if ((creatorMode \u003d\u003d null) || (creatorMode \u003d\u003d JsonCreator.Mode.DISABLED)) {\n      return;\n    }\n    pn\u003dPropertyName.construct(impl);\n  }\n  POJOPropertyBuilder prop\u003d(expl \u0026\u0026 impl.isEmpty()) ? _property(props,pn) : _property(props,impl);\n  prop.addCtor(param,pn,expl,true,false);\n  _creatorProperties.add(prop);\n}",
    "begin_line": 481,
    "end_line": 517,
    "comment": "/** \n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addMethods#522",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addMethods(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _addMethods(Map\u003cString,POJOPropertyBuilder\u003e props){\n  final AnnotationIntrospector ai\u003d_annotationIntrospector;\n  for (  AnnotatedMethod m : _classDef.memberMethods()) {\n    int argCount\u003dm.getParameterCount();\n    if (argCount \u003d\u003d 0) {\n      _addGetterMethod(props,m,ai);\n    }\n else     if (argCount \u003d\u003d 1) {\n      _addSetterMethod(props,m,ai);\n    }\n else     if (argCount \u003d\u003d 2) {\n      if (ai !\u003d null) {\n        if (Boolean.TRUE.equals(ai.hasAnySetter(m))) {\n          if (_anySetters \u003d\u003d null) {\n            _anySetters\u003dnew LinkedList\u003cAnnotatedMethod\u003e();\n          }\n          _anySetters.add(m);\n        }\n      }\n    }\n  }\n}",
    "begin_line": 522,
    "end_line": 547,
    "comment": "/** \n * Method for collecting basic information on all fields found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addGetterMethod#549",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addGetterMethod(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "protected void _addGetterMethod(Map\u003cString,POJOPropertyBuilder\u003e props,AnnotatedMethod m,AnnotationIntrospector ai){\n  if (!m.hasReturnType()) {\n    return;\n  }\n  if (Boolean.TRUE.equals(ai.hasAnyGetter(m))) {\n    if (_anyGetters \u003d\u003d null) {\n      _anyGetters\u003dnew LinkedList\u003cAnnotatedMember\u003e();\n    }\n    _anyGetters.add(m);\n    return;\n  }\n  if (Boolean.TRUE.equals(ai.hasAsValue(m))) {\n    if (_jsonValueAccessors \u003d\u003d null) {\n      _jsonValueAccessors\u003dnew LinkedList\u003c\u003e();\n    }\n    _jsonValueAccessors.add(m);\n    return;\n  }\n  String implName;\n  boolean visible;\n  PropertyName pn\u003dai.findNameForSerialization(m);\n  boolean nameExplicit\u003d(pn !\u003d null);\n  if (!nameExplicit) {\n    implName\u003dai.findImplicitPropertyName(m);\n    if (implName \u003d\u003d null) {\n      implName\u003dBeanUtil.okNameForRegularGetter(m,m.getName(),_stdBeanNaming);\n    }\n    if (implName \u003d\u003d null) {\n      implName\u003dBeanUtil.okNameForIsGetter(m,m.getName(),_stdBeanNaming);\n      if (implName \u003d\u003d null) {\n        return;\n      }\n      visible\u003d_visibilityChecker.isIsGetterVisible(m);\n    }\n else {\n      visible\u003d_visibilityChecker.isGetterVisible(m);\n    }\n  }\n else {\n    implName\u003dai.findImplicitPropertyName(m);\n    if (implName \u003d\u003d null) {\n      implName\u003dBeanUtil.okNameForGetter(m,_stdBeanNaming);\n    }\n    if (implName \u003d\u003d null) {\n      implName\u003dm.getName();\n    }\n    if (pn.isEmpty()) {\n      pn\u003d_propNameFromSimple(implName);\n      nameExplicit\u003dfalse;\n    }\n    visible\u003dtrue;\n  }\n  boolean ignore\u003dai.hasIgnoreMarker(m);\n  _property(props,implName).addGetter(m,pn,nameExplicit,visible,ignore);\n}",
    "begin_line": 549,
    "end_line": 613,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addSetterMethod#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addSetterMethod(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "protected void _addSetterMethod(Map\u003cString,POJOPropertyBuilder\u003e props,AnnotatedMethod m,AnnotationIntrospector ai){\n  String implName;\n  boolean visible;\n  PropertyName pn\u003d(ai \u003d\u003d null) ? null : ai.findNameForDeserialization(m);\n  boolean nameExplicit\u003d(pn !\u003d null);\n  if (!nameExplicit) {\n    implName\u003d(ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n    if (implName \u003d\u003d null) {\n      implName\u003dBeanUtil.okNameForMutator(m,_mutatorPrefix,_stdBeanNaming);\n    }\n    if (implName \u003d\u003d null) {\n      return;\n    }\n    visible\u003d_visibilityChecker.isSetterVisible(m);\n  }\n else {\n    implName\u003d(ai \u003d\u003d null) ? null : ai.findImplicitPropertyName(m);\n    if (implName \u003d\u003d null) {\n      implName\u003dBeanUtil.okNameForMutator(m,_mutatorPrefix,_stdBeanNaming);\n    }\n    if (implName \u003d\u003d null) {\n      implName\u003dm.getName();\n    }\n    if (pn.isEmpty()) {\n      pn\u003d_propNameFromSimple(implName);\n      nameExplicit\u003dfalse;\n    }\n    visible\u003dtrue;\n  }\n  boolean ignore\u003d(ai \u003d\u003d null) ? false : ai.hasIgnoreMarker(m);\n  _property(props,implName).addSetter(m,pn,nameExplicit,visible,ignore);\n}",
    "begin_line": 615,
    "end_line": 650,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._addInjectables#652",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._addInjectables(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _addInjectables(Map\u003cString,POJOPropertyBuilder\u003e props){\n  final AnnotationIntrospector ai\u003d_annotationIntrospector;\n  for (  AnnotatedField f : _classDef.fields()) {\n    _doAddInjectable(ai.findInjectableValue(f),f);\n  }\n  for (  AnnotatedMethod m : _classDef.memberMethods()) {\n    if (m.getParameterCount() !\u003d 1) {\n      continue;\n    }\n    _doAddInjectable(ai.findInjectableValue(m),m);\n  }\n}",
    "begin_line": 652,
    "end_line": 667,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._doAddInjectable#669",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._doAddInjectable(JacksonInject.Value, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected void _doAddInjectable(JacksonInject.Value injectable,AnnotatedMember m){\n  if (injectable \u003d\u003d null) {\n    return;\n  }\n  Object id\u003dinjectable.getId();\n  if (_injectables \u003d\u003d null) {\n    _injectables\u003dnew LinkedHashMap\u003cObject,AnnotatedMember\u003e();\n  }\n  AnnotatedMember prev\u003d_injectables.put(id,m);\n  if (prev !\u003d null) {\n    if (prev.getClass() \u003d\u003d m.getClass()) {\n      String type\u003did.getClass().getName();\n      throw new IllegalArgumentException(\"Duplicate injectable value with id \u0027\" + String.valueOf(id) + \"\u0027 (of type \"+ type+ \")\");\n    }\n  }\n}",
    "begin_line": 669,
    "end_line": 687,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._propNameFromSimple#689",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._propNameFromSimple(java.lang.String)",
    "snippet": "private PropertyName _propNameFromSimple(String simpleName){\n  return PropertyName.construct(simpleName,null);\n}",
    "begin_line": 689,
    "end_line": 691,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._removeUnwantedProperties#703",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._removeUnwantedProperties(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _removeUnwantedProperties(Map\u003cString,POJOPropertyBuilder\u003e props){\n  Iterator\u003cPOJOPropertyBuilder\u003e it\u003dprops.values().iterator();\n  while (it.hasNext()) {\n    POJOPropertyBuilder prop\u003dit.next();\n    if (!prop.anyVisible()) {\n      it.remove();\n      continue;\n    }\n    if (prop.anyIgnorals()) {\n      if (!prop.isExplicitlyIncluded()) {\n        it.remove();\n        _collectIgnorals(prop.getName());\n        continue;\n      }\n      prop.removeIgnored();\n      if (!prop.couldDeserialize()) {\n        _collectIgnorals(prop.getName());\n      }\n    }\n  }\n}",
    "begin_line": 703,
    "end_line": 729,
    "comment": "/** \n * Method called to get rid of candidate properties that are marked as ignored.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._removeUnwantedAccessor#736",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._removeUnwantedAccessor(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _removeUnwantedAccessor(Map\u003cString,POJOPropertyBuilder\u003e props){\n  final boolean inferMutators\u003d_config.isEnabled(MapperFeature.INFER_PROPERTY_MUTATORS);\n  Iterator\u003cPOJOPropertyBuilder\u003e it\u003dprops.values().iterator();\n  while (it.hasNext()) {\n    POJOPropertyBuilder prop\u003dit.next();\n    JsonProperty.Access acc\u003dprop.removeNonVisible(inferMutators);\n    if (acc \u003d\u003d JsonProperty.Access.READ_ONLY) {\n      _collectIgnorals(prop.getName());\n    }\n  }\n}",
    "begin_line": 736,
    "end_line": 749,
    "comment": "/** \n * Method called to further get rid of unwanted individual accessors, based on read/write settings and rules for \"pulling in\" accessors (or not).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._collectIgnorals#756",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._collectIgnorals(java.lang.String)",
    "snippet": "private void _collectIgnorals(String name){\n  if (!_forSerialization) {\n    if (_ignoredPropertyNames \u003d\u003d null) {\n      _ignoredPropertyNames\u003dnew HashSet\u003cString\u003e();\n    }\n    _ignoredPropertyNames.add(name);\n  }\n}",
    "begin_line": 756,
    "end_line": 764,
    "comment": "/** \n * Helper method called to add explicitly ignored properties to a list of known ignored properties; this helps in proper reporting of errors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._renameProperties#772",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameProperties(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _renameProperties(Map\u003cString,POJOPropertyBuilder\u003e props){\n  Iterator\u003cMap.Entry\u003cString,POJOPropertyBuilder\u003e\u003e it\u003dprops.entrySet().iterator();\n  LinkedList\u003cPOJOPropertyBuilder\u003e renamed\u003dnull;\n  while (it.hasNext()) {\n    Map.Entry\u003cString,POJOPropertyBuilder\u003e entry\u003dit.next();\n    POJOPropertyBuilder prop\u003dentry.getValue();\n    Collection\u003cPropertyName\u003e l\u003dprop.findExplicitNames();\n    if (l.isEmpty()) {\n      continue;\n    }\n    it.remove();\n    if (renamed \u003d\u003d null) {\n      renamed\u003dnew LinkedList\u003cPOJOPropertyBuilder\u003e();\n    }\n    if (l.size() \u003d\u003d 1) {\n      PropertyName n\u003dl.iterator().next();\n      renamed.add(prop.withName(n));\n      continue;\n    }\n    renamed.addAll(prop.explode(l));\n  }\n  if (renamed !\u003d null) {\n    for (    POJOPropertyBuilder prop : renamed) {\n      String name\u003dprop.getName();\n      POJOPropertyBuilder old\u003dprops.get(name);\n      if (old \u003d\u003d null) {\n        props.put(name,prop);\n      }\n else {\n        old.addAll(prop);\n      }\n      _updateCreatorProperty(prop,_creatorProperties);\n      if (_ignoredPropertyNames !\u003d null) {\n        _ignoredPropertyNames.remove(name);\n      }\n    }\n  }\n}",
    "begin_line": 772,
    "end_line": 833,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._renameUsing#835",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameUsing(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.PropertyNamingStrategy)",
    "snippet": "protected void _renameUsing(Map\u003cString,POJOPropertyBuilder\u003e propMap,PropertyNamingStrategy naming){\n  POJOPropertyBuilder[] props\u003dpropMap.values().toArray(new POJOPropertyBuilder[propMap.size()]);\n  propMap.clear();\n  for (  POJOPropertyBuilder prop : props) {\n    PropertyName fullName\u003dprop.getFullName();\n    String rename\u003dnull;\n    if (!prop.isExplicitlyNamed() || _config.isEnabled(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING)) {\n      if (_forSerialization) {\n        if (prop.hasGetter()) {\n          rename\u003dnaming.nameForGetterMethod(_config,prop.getGetter(),fullName.getSimpleName());\n        }\n else         if (prop.hasField()) {\n          rename\u003dnaming.nameForField(_config,prop.getField(),fullName.getSimpleName());\n        }\n      }\n else {\n        if (prop.hasSetter()) {\n          rename\u003dnaming.nameForSetterMethod(_config,prop.getSetter(),fullName.getSimpleName());\n        }\n else         if (prop.hasConstructorParameter()) {\n          rename\u003dnaming.nameForConstructorParameter(_config,prop.getConstructorParameter(),fullName.getSimpleName());\n        }\n else         if (prop.hasField()) {\n          rename\u003dnaming.nameForField(_config,prop.getField(),fullName.getSimpleName());\n        }\n else         if (prop.hasGetter()) {\n          rename\u003dnaming.nameForGetterMethod(_config,prop.getGetter(),fullName.getSimpleName());\n        }\n      }\n    }\n    final String simpleName;\n    if ((rename !\u003d null) \u0026\u0026 !fullName.hasSimpleName(rename)) {\n      prop\u003dprop.withSimpleName(rename);\n      simpleName\u003drename;\n    }\n else {\n      simpleName\u003dfullName.getSimpleName();\n    }\n    POJOPropertyBuilder old\u003dpropMap.get(simpleName);\n    if (old \u003d\u003d null) {\n      propMap.put(simpleName,prop);\n    }\n else {\n      old.addAll(prop);\n    }\n    _updateCreatorProperty(prop,_creatorProperties);\n  }\n}",
    "begin_line": 835,
    "end_line": 885,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._renameWithWrappers#887",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._renameWithWrappers(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _renameWithWrappers(Map\u003cString,POJOPropertyBuilder\u003e props){\n  Iterator\u003cMap.Entry\u003cString,POJOPropertyBuilder\u003e\u003e it\u003dprops.entrySet().iterator();\n  LinkedList\u003cPOJOPropertyBuilder\u003e renamed\u003dnull;\n  while (it.hasNext()) {\n    Map.Entry\u003cString,POJOPropertyBuilder\u003e entry\u003dit.next();\n    POJOPropertyBuilder prop\u003dentry.getValue();\n    AnnotatedMember member\u003dprop.getPrimaryMember();\n    if (member \u003d\u003d null) {\n      continue;\n    }\n    PropertyName wrapperName\u003d_annotationIntrospector.findWrapperName(member);\n    if (wrapperName \u003d\u003d null || !wrapperName.hasSimpleName()) {\n      continue;\n    }\n    if (!wrapperName.equals(prop.getFullName())) {\n      if (renamed \u003d\u003d null) {\n        renamed\u003dnew LinkedList\u003cPOJOPropertyBuilder\u003e();\n      }\n      prop\u003dprop.withName(wrapperName);\n      renamed.add(prop);\n      it.remove();\n    }\n  }\n  if (renamed !\u003d null) {\n    for (    POJOPropertyBuilder prop : renamed) {\n      String name\u003dprop.getName();\n      POJOPropertyBuilder old\u003dprops.get(name);\n      if (old \u003d\u003d null) {\n        props.put(name,prop);\n      }\n else {\n        old.addAll(prop);\n      }\n    }\n  }\n}",
    "begin_line": 887,
    "end_line": 928,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._sortProperties#939",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._sortProperties(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _sortProperties(Map\u003cString,POJOPropertyBuilder\u003e props){\n  AnnotationIntrospector intr\u003d_annotationIntrospector;\n  Boolean alpha\u003dintr.findSerializationSortAlphabetically((Annotated)_classDef);\n  boolean sort;\n  if (alpha \u003d\u003d null) {\n    sort\u003d_config.shouldSortPropertiesAlphabetically();\n  }\n else {\n    sort\u003dalpha.booleanValue();\n  }\n  String[] propertyOrder\u003dintr.findSerializationPropertyOrder(_classDef);\n  if (!sort \u0026\u0026 (_creatorProperties \u003d\u003d null) \u0026\u0026 (propertyOrder \u003d\u003d null)) {\n    return;\n  }\n  int size\u003dprops.size();\n  Map\u003cString,POJOPropertyBuilder\u003e all;\n  if (sort) {\n    all\u003dnew TreeMap\u003cString,POJOPropertyBuilder\u003e();\n  }\n else {\n    all\u003dnew LinkedHashMap\u003cString,POJOPropertyBuilder\u003e(size + size);\n  }\n  for (  POJOPropertyBuilder prop : props.values()) {\n    all.put(prop.getName(),prop);\n  }\n  Map\u003cString,POJOPropertyBuilder\u003e ordered\u003dnew LinkedHashMap\u003cString,POJOPropertyBuilder\u003e(size + size);\n  if (propertyOrder !\u003d null) {\n    for (    String name : propertyOrder) {\n      POJOPropertyBuilder w\u003dall.get(name);\n      if (w \u003d\u003d null) {\n        for (        POJOPropertyBuilder prop : props.values()) {\n          if (name.equals(prop.getInternalName())) {\n            w\u003dprop;\n            name\u003dprop.getName();\n            break;\n          }\n        }\n      }\n      if (w !\u003d null) {\n        ordered.put(name,w);\n      }\n    }\n  }\n  if (_creatorProperties !\u003d null) {\n    Collection\u003cPOJOPropertyBuilder\u003e cr;\n    if (sort) {\n      TreeMap\u003cString,POJOPropertyBuilder\u003e sorted\u003dnew TreeMap\u003cString,POJOPropertyBuilder\u003e();\n      for (      POJOPropertyBuilder prop : _creatorProperties) {\n        sorted.put(prop.getName(),prop);\n      }\n      cr\u003dsorted.values();\n    }\n else {\n      cr\u003d_creatorProperties;\n    }\n    for (    POJOPropertyBuilder prop : cr) {\n      String name\u003dprop.getName();\n      if (all.containsKey(name)) {\n        ordered.put(name,prop);\n      }\n    }\n  }\n  ordered.putAll(all);\n  props.clear();\n  props.putAll(ordered);\n}",
    "begin_line": 939,
    "end_line": 1020,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector.reportProblem#1028",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector.reportProblem(java.lang.String, java.lang.Object)",
    "snippet": "protected void reportProblem(String msg,Object... args){\n  if (args.length \u003e 0) {\n    msg\u003dString.format(msg,args);\n  }\n  throw new IllegalArgumentException(\"Problem with definition of \" + _classDef + \": \"+ msg);\n}",
    "begin_line": 1028,
    "end_line": 1033,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._property#1035",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._property(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected POJOPropertyBuilder _property(Map\u003cString,POJOPropertyBuilder\u003e props,PropertyName name){\n  String simpleName\u003dname.getSimpleName();\n  POJOPropertyBuilder prop\u003dprops.get(simpleName);\n  if (prop \u003d\u003d null) {\n    prop\u003dnew POJOPropertyBuilder(_config,_annotationIntrospector,_forSerialization,name);\n    props.put(simpleName,prop);\n  }\n  return prop;\n}",
    "begin_line": 1035,
    "end_line": 1045,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._property#1048",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._property(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, java.lang.String)",
    "snippet": "protected POJOPropertyBuilder _property(Map\u003cString,POJOPropertyBuilder\u003e props,String implName){\n  POJOPropertyBuilder prop\u003dprops.get(implName);\n  if (prop \u003d\u003d null) {\n    prop\u003dnew POJOPropertyBuilder(_config,_annotationIntrospector,_forSerialization,PropertyName.construct(implName));\n    props.put(implName,prop);\n  }\n  return prop;\n}",
    "begin_line": 1048,
    "end_line": 1058,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._findNamingStrategy#1060",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._findNamingStrategy()",
    "snippet": "private PropertyNamingStrategy _findNamingStrategy(){\n  Object namingDef\u003d_annotationIntrospector.findNamingStrategy(_classDef);\n  if (namingDef \u003d\u003d null) {\n    return _config.getPropertyNamingStrategy();\n  }\n  if (namingDef instanceof PropertyNamingStrategy) {\n    return (PropertyNamingStrategy)namingDef;\n  }\n  if (!(namingDef instanceof Class)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned PropertyNamingStrategy definition of type \" + namingDef.getClass().getName() + \"; expected type PropertyNamingStrategy or Class\u003cPropertyNamingStrategy\u003e instead\");\n  }\n  Class\u003c?\u003e namingClass\u003d(Class\u003c?\u003e)namingDef;\n  if (namingClass \u003d\u003d PropertyNamingStrategy.class) {\n    return null;\n  }\n  if (!PropertyNamingStrategy.class.isAssignableFrom(namingClass)) {\n    throw new IllegalStateException(\"AnnotationIntrospector returned Class \" + namingClass.getName() + \"; expected Class\u003cPropertyNamingStrategy\u003e\");\n  }\n  HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n  if (hi !\u003d null) {\n    PropertyNamingStrategy pns\u003dhi.namingStrategyInstance(_config,_classDef,namingClass);\n    if (pns !\u003d null) {\n      return pns;\n    }\n  }\n  return (PropertyNamingStrategy)ClassUtil.createInstance(namingClass,_config.canOverrideAccessModifiers());\n}",
    "begin_line": 1060,
    "end_line": 1095,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertiesCollector._updateCreatorProperty#1097",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertiesCollector._updateCreatorProperty(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e)",
    "snippet": "protected void _updateCreatorProperty(POJOPropertyBuilder prop,List\u003cPOJOPropertyBuilder\u003e creatorProperties){\n  if (creatorProperties !\u003d null) {\n    final String intName\u003dprop.getInternalName();\n    for (int i\u003d0, len\u003dcreatorProperties.size(); i \u003c len; ++i) {\n      if (creatorProperties.get(i).getInternalName().equals(intName)) {\n        creatorProperties.set(i,prop);\n        break;\n      }\n    }\n  }\n}",
    "begin_line": 1097,
    "end_line": 1108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.POJOPropertyBuilder#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.POJOPropertyBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, boolean, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "public POJOPropertyBuilder(MapperConfig\u003c?\u003e config,AnnotationIntrospector ai,boolean forSerialization,PropertyName internalName){\n  this(config,ai,forSerialization,internalName,internalName);\n}",
    "begin_line": 73,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.POJOPropertyBuilder#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.POJOPropertyBuilder(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, boolean, com.fasterxml.jackson.databind.PropertyName, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected POJOPropertyBuilder(MapperConfig\u003c?\u003e config,AnnotationIntrospector ai,boolean forSerialization,PropertyName internalName,PropertyName name){\n  _config\u003dconfig;\n  _annotationIntrospector\u003dai;\n  _internalName\u003dinternalName;\n  _name\u003dname;\n  _forSerialization\u003dforSerialization;\n}",
    "begin_line": 78,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.POJOPropertyBuilder#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.POJOPropertyBuilder(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "protected POJOPropertyBuilder(POJOPropertyBuilder src,PropertyName newName){\n  _config\u003dsrc._config;\n  _annotationIntrospector\u003dsrc._annotationIntrospector;\n  _internalName\u003dsrc._internalName;\n  _name\u003dnewName;\n  _fields\u003dsrc._fields;\n  _ctorParameters\u003dsrc._ctorParameters;\n  _getters\u003dsrc._getters;\n  _setters\u003dsrc._setters;\n  _forSerialization\u003dsrc._forSerialization;\n}",
    "begin_line": 89,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withName#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public POJOPropertyBuilder withName(PropertyName newName){\n  return new POJOPropertyBuilder(this,newName);\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withSimpleName#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withSimpleName(java.lang.String)",
    "snippet": "@Override public POJOPropertyBuilder withSimpleName(String newSimpleName){\n  PropertyName newName\u003d_name.withSimpleName(newSimpleName);\n  return (newName \u003d\u003d _name) ? this : new POJOPropertyBuilder(this,newName);\n}",
    "begin_line": 114,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.compareTo#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.compareTo(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)",
    "snippet": "@Override public int compareTo(POJOPropertyBuilder other){\n  if (_ctorParameters !\u003d null) {\n    if (other._ctorParameters \u003d\u003d null) {\n      return -1;\n    }\n  }\n else   if (other._ctorParameters !\u003d null) {\n    return 1;\n  }\n  return getName().compareTo(other.getName());\n}",
    "begin_line": 129,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getName#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getName()",
    "snippet": "@Override public String getName(){\n  return (_name \u003d\u003d null) ? null : _name.getSimpleName();\n}",
    "begin_line": 152,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getFullName#157",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getFullName()",
    "snippet": "@Override public PropertyName getFullName(){\n  return _name;\n}",
    "begin_line": 157,
    "end_line": 159,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.hasName#162",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasName(com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "@Override public boolean hasName(PropertyName name){\n  return _name.equals(name);\n}",
    "begin_line": 162,
    "end_line": 164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getInternalName#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getInternalName()",
    "snippet": "@Override public String getInternalName(){\n  return _internalName.getSimpleName();\n}",
    "begin_line": 167,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getWrapperName#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getWrapperName()",
    "snippet": "@Override public PropertyName getWrapperName(){\n  AnnotatedMember member\u003dgetPrimaryMember();\n  return (member \u003d\u003d null || _annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findWrapperName(member);\n}",
    "begin_line": 170,
    "end_line": 187,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.isExplicitlyIncluded#190",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.isExplicitlyIncluded()",
    "snippet": "@Override public boolean isExplicitlyIncluded(){\n  return _anyExplicits(_fields) || _anyExplicits(_getters) || _anyExplicits(_setters)|| _anyExplicitNames(_ctorParameters);\n}",
    "begin_line": 190,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.isExplicitlyNamed#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.isExplicitlyNamed()",
    "snippet": "@Override public boolean isExplicitlyNamed(){\n  return _anyExplicitNames(_fields) || _anyExplicitNames(_getters) || _anyExplicitNames(_setters)|| _anyExplicitNames(_ctorParameters);\n}",
    "begin_line": 203,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getMetadata#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getMetadata()",
    "snippet": "@Override public PropertyMetadata getMetadata(){\n  if (_metadata \u003d\u003d null) {\n    final Boolean b\u003d_findRequired();\n    final String desc\u003d_findDescription();\n    final Integer idx\u003d_findIndex();\n    final String def\u003d_findDefaultValue();\n    if (b \u003d\u003d null \u0026\u0026 idx \u003d\u003d null \u0026\u0026 def \u003d\u003d null) {\n      _metadata\u003d(desc \u003d\u003d null) ? PropertyMetadata.STD_REQUIRED_OR_OPTIONAL : PropertyMetadata.STD_REQUIRED_OR_OPTIONAL.withDescription(desc);\n    }\n else {\n      _metadata\u003dPropertyMetadata.construct(b,desc,idx,def);\n    }\n    if (!_forSerialization) {\n      _metadata\u003d_getSetterInfo(_metadata);\n    }\n  }\n  return _metadata;\n}",
    "begin_line": 218,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._getSetterInfo#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._getSetterInfo(com.fasterxml.jackson.databind.PropertyMetadata)",
    "snippet": "protected PropertyMetadata _getSetterInfo(PropertyMetadata metadata){\n  boolean needMerge\u003dtrue;\n  Nulls valueNulls\u003dnull;\n  Nulls contentNulls\u003dnull;\n  AnnotatedMember prim\u003dgetPrimaryMember();\n  AnnotatedMember acc\u003dgetAccessor();\n  if (prim !\u003d null) {\n    if (_annotationIntrospector !\u003d null) {\n      if (acc !\u003d null) {\n        Boolean b\u003d_annotationIntrospector.findMergeInfo(prim);\n        if (b !\u003d null) {\n          needMerge\u003dfalse;\n          if (b.booleanValue()) {\n            metadata\u003dmetadata.withMergeInfo(PropertyMetadata.MergeInfo.createForPropertyOverride(acc));\n          }\n        }\n      }\n      JsonSetter.Value setterInfo\u003d_annotationIntrospector.findSetterInfo(prim);\n      if (setterInfo !\u003d null) {\n        valueNulls\u003dsetterInfo.nonDefaultValueNulls();\n        contentNulls\u003dsetterInfo.nonDefaultContentNulls();\n      }\n    }\n    if (needMerge || (valueNulls \u003d\u003d null) || (contentNulls \u003d\u003d null)) {\n      Class\u003c?\u003e rawType\u003dgetRawPrimaryType();\n      ConfigOverride co\u003d_config.getConfigOverride(rawType);\n      JsonSetter.Value setterInfo\u003dco.getSetterInfo();\n      if (setterInfo !\u003d null) {\n        if (valueNulls \u003d\u003d null) {\n          valueNulls\u003dsetterInfo.nonDefaultValueNulls();\n        }\n        if (contentNulls \u003d\u003d null) {\n          contentNulls\u003dsetterInfo.nonDefaultContentNulls();\n        }\n      }\n      if (needMerge \u0026\u0026 (acc !\u003d null)) {\n        Boolean b\u003dco.getMergeable();\n        if (b !\u003d null) {\n          needMerge\u003dfalse;\n          if (b.booleanValue()) {\n            metadata\u003dmetadata.withMergeInfo(PropertyMetadata.MergeInfo.createForTypeOverride(acc));\n          }\n        }\n      }\n    }\n  }\n  if (needMerge || (valueNulls \u003d\u003d null) || (contentNulls \u003d\u003d null)) {\n    JsonSetter.Value setterInfo\u003d_config.getDefaultSetterInfo();\n    if (valueNulls \u003d\u003d null) {\n      valueNulls\u003dsetterInfo.nonDefaultValueNulls();\n    }\n    if (contentNulls \u003d\u003d null) {\n      contentNulls\u003dsetterInfo.nonDefaultContentNulls();\n    }\n    if (needMerge) {\n      Boolean b\u003d_config.getDefaultMergeable();\n      if (Boolean.TRUE.equals(b) \u0026\u0026 (acc !\u003d null)) {\n        metadata\u003dmetadata.withMergeInfo(PropertyMetadata.MergeInfo.createForDefaults(acc));\n      }\n    }\n  }\n  if ((valueNulls !\u003d null) || (contentNulls !\u003d null)) {\n    metadata\u003dmetadata.withNulls(valueNulls,contentNulls);\n  }\n  return metadata;\n}",
    "begin_line": 242,
    "end_line": 315,
    "comment": "/** \n * Helper method that contains logic for accessing and merging all setter information that we needed, regarding things like possible merging of property value, and handling of incoming nulls.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getPrimaryType#323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getPrimaryType()",
    "snippet": "@Override public JavaType getPrimaryType(){\n  if (_forSerialization) {\n    AnnotatedMember m\u003dgetGetter();\n    if (m \u003d\u003d null) {\n      m\u003dgetField();\n      if (m \u003d\u003d null) {\n        return TypeFactory.unknownType();\n      }\n      return m.getType();\n    }\n    return m.getType();\n  }\n  AnnotatedMember m\u003dgetConstructorParameter();\n  if (m \u003d\u003d null) {\n    m\u003dgetSetter();\n    if (m !\u003d null) {\n      return ((AnnotatedMethod)m).getParameterType(0);\n    }\n    m\u003dgetField();\n  }\n  if (m \u003d\u003d null) {\n    m\u003dgetGetter();\n    if (m \u003d\u003d null) {\n      return TypeFactory.unknownType();\n    }\n  }\n  return m.getType();\n}",
    "begin_line": 323,
    "end_line": 354,
    "comment": "/** \n * Type determined from the primary member for the property being built, considering precedence according to whether we are processing serialization or deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getRawPrimaryType#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getRawPrimaryType()",
    "snippet": "@Override public Class\u003c?\u003e getRawPrimaryType(){\n  return getPrimaryType().getRawClass();\n}",
    "begin_line": 357,
    "end_line": 359,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.hasGetter#368",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasGetter()",
    "snippet": "@Override public boolean hasGetter(){\n  return _getters !\u003d null;\n}",
    "begin_line": 368,
    "end_line": 368,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.hasSetter#371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasSetter()",
    "snippet": "@Override public boolean hasSetter(){\n  return _setters !\u003d null;\n}",
    "begin_line": 371,
    "end_line": 371,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.hasField#374",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasField()",
    "snippet": "@Override public boolean hasField(){\n  return _fields !\u003d null;\n}",
    "begin_line": 374,
    "end_line": 374,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.hasConstructorParameter#377",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasConstructorParameter()",
    "snippet": "@Override public boolean hasConstructorParameter(){\n  return _ctorParameters !\u003d null;\n}",
    "begin_line": 377,
    "end_line": 377,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.couldDeserialize#380",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.couldDeserialize()",
    "snippet": "@Override public boolean couldDeserialize(){\n  return (_ctorParameters !\u003d null) || (_setters !\u003d null) || (_fields !\u003d null);\n}",
    "begin_line": 380,
    "end_line": 382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.couldSerialize#385",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.couldSerialize()",
    "snippet": "@Override public boolean couldSerialize(){\n  return (_getters !\u003d null) || (_fields !\u003d null);\n}",
    "begin_line": 385,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getGetter#390",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getGetter()",
    "snippet": "@Override public AnnotatedMethod getGetter(){\n  Linked\u003cAnnotatedMethod\u003e curr\u003d_getters;\n  if (curr \u003d\u003d null) {\n    return null;\n  }\n  Linked\u003cAnnotatedMethod\u003e next\u003dcurr.next;\n  if (next \u003d\u003d null) {\n    return curr.value;\n  }\n  for (; next !\u003d null; next\u003dnext.next) {\n    Class\u003c?\u003e currClass\u003dcurr.value.getDeclaringClass();\n    Class\u003c?\u003e nextClass\u003dnext.value.getDeclaringClass();\n    if (currClass !\u003d nextClass) {\n      if (currClass.isAssignableFrom(nextClass)) {\n        curr\u003dnext;\n        continue;\n      }\n      if (nextClass.isAssignableFrom(currClass)) {\n        continue;\n      }\n    }\n    int priNext\u003d_getterPriority(next.value);\n    int priCurr\u003d_getterPriority(curr.value);\n    if (priNext !\u003d priCurr) {\n      if (priNext \u003c priCurr) {\n        curr\u003dnext;\n      }\n      continue;\n    }\n    throw new IllegalArgumentException(\"Conflicting getter definitions for property \\\"\" + getName() + \"\\\": \"+ curr.value.getFullName()+ \" vs \"+ next.value.getFullName());\n  }\n  _getters\u003dcurr.withoutNext();\n  return curr.value;\n}",
    "begin_line": 390,
    "end_line": 438,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getSetter#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getSetter()",
    "snippet": "@Override public AnnotatedMethod getSetter(){\n  Linked\u003cAnnotatedMethod\u003e curr\u003d_setters;\n  if (curr \u003d\u003d null) {\n    return null;\n  }\n  Linked\u003cAnnotatedMethod\u003e next\u003dcurr.next;\n  if (next \u003d\u003d null) {\n    return curr.value;\n  }\n  for (; next !\u003d null; next\u003dnext.next) {\n    Class\u003c?\u003e currClass\u003dcurr.value.getDeclaringClass();\n    Class\u003c?\u003e nextClass\u003dnext.value.getDeclaringClass();\n    if (currClass !\u003d nextClass) {\n      if (currClass.isAssignableFrom(nextClass)) {\n        curr\u003dnext;\n        continue;\n      }\n      if (nextClass.isAssignableFrom(currClass)) {\n        continue;\n      }\n    }\n    AnnotatedMethod nextM\u003dnext.value;\n    AnnotatedMethod currM\u003dcurr.value;\n    int priNext\u003d_setterPriority(nextM);\n    int priCurr\u003d_setterPriority(currM);\n    if (priNext !\u003d priCurr) {\n      if (priNext \u003c priCurr) {\n        curr\u003dnext;\n      }\n      continue;\n    }\n    if (_annotationIntrospector !\u003d null) {\n      AnnotatedMethod pref\u003d_annotationIntrospector.resolveSetterConflict(_config,currM,nextM);\n      if (pref \u003d\u003d currM) {\n        continue;\n      }\n      if (pref \u003d\u003d nextM) {\n        curr\u003dnext;\n        continue;\n      }\n    }\n    throw new IllegalArgumentException(String.format(\"Conflicting setter definitions for property \\\"%s\\\": %s vs %s\",getName(),curr.value.getFullName(),next.value.getFullName()));\n  }\n  _setters\u003dcurr.withoutNext();\n  return curr.value;\n}",
    "begin_line": 441,
    "end_line": 504,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getField#507",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getField()",
    "snippet": "@Override public AnnotatedField getField(){\n  if (_fields \u003d\u003d null) {\n    return null;\n  }\n  AnnotatedField field\u003d_fields.value;\n  Linked\u003cAnnotatedField\u003e next\u003d_fields.next;\n  for (; next !\u003d null; next\u003dnext.next) {\n    AnnotatedField nextField\u003dnext.value;\n    Class\u003c?\u003e fieldClass\u003dfield.getDeclaringClass();\n    Class\u003c?\u003e nextClass\u003dnextField.getDeclaringClass();\n    if (fieldClass !\u003d nextClass) {\n      if (fieldClass.isAssignableFrom(nextClass)) {\n        field\u003dnextField;\n        continue;\n      }\n      if (nextClass.isAssignableFrom(fieldClass)) {\n        continue;\n      }\n    }\n    throw new IllegalArgumentException(\"Multiple fields representing property \\\"\" + getName() + \"\\\": \"+ field.getFullName()+ \" vs \"+ nextField.getFullName());\n  }\n  return field;\n}",
    "begin_line": 507,
    "end_line": 532,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getConstructorParameter#535",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getConstructorParameter()",
    "snippet": "@Override public AnnotatedParameter getConstructorParameter(){\n  if (_ctorParameters \u003d\u003d null) {\n    return null;\n  }\n  Linked\u003cAnnotatedParameter\u003e curr\u003d_ctorParameters;\n  do {\n    if (curr.value.getOwner() instanceof AnnotatedConstructor) {\n      return curr.value;\n    }\n    curr\u003dcurr.next;\n  }\n while (curr !\u003d null);\n  return _ctorParameters.value;\n}",
    "begin_line": 535,
    "end_line": 556,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getConstructorParameters#559",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getConstructorParameters()",
    "snippet": "@Override public Iterator\u003cAnnotatedParameter\u003e getConstructorParameters(){\n  if (_ctorParameters \u003d\u003d null) {\n    return ClassUtil.emptyIterator();\n  }\n  return new MemberIterator\u003cAnnotatedParameter\u003e(_ctorParameters);\n}",
    "begin_line": 559,
    "end_line": 564,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.getPrimaryMember#567",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.getPrimaryMember()",
    "snippet": "@Override public AnnotatedMember getPrimaryMember(){\n  if (_forSerialization) {\n    return getAccessor();\n  }\n  AnnotatedMember m\u003dgetMutator();\n  if (m \u003d\u003d null) {\n    m\u003dgetAccessor();\n  }\n  return m;\n}",
    "begin_line": 567,
    "end_line": 577,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._getterPriority#579",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._getterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected int _getterPriority(AnnotatedMethod m){\n  final String name\u003dm.getName();\n  if (name.startsWith(\"get\") \u0026\u0026 name.length() \u003e 3) {\n    return 1;\n  }\n  if (name.startsWith(\"is\") \u0026\u0026 name.length() \u003e 2) {\n    return 2;\n  }\n  return 3;\n}",
    "begin_line": 579,
    "end_line": 591,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._setterPriority#593",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._setterPriority(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected int _setterPriority(AnnotatedMethod m){\n  final String name\u003dm.getName();\n  if (name.startsWith(\"set\") \u0026\u0026 name.length() \u003e 3) {\n    return 1;\n  }\n  return 2;\n}",
    "begin_line": 593,
    "end_line": 601,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findViews#610",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findViews()",
    "snippet": "@Override public Class\u003c?\u003e[] findViews(){\n  return fromMemberAnnotations(new WithMember\u003cClass\u003c?\u003e[]\u003e(){\n    @Override public Class\u003c?\u003e[] withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findViews(member);\n    }\n  }\n);\n}",
    "begin_line": 610,
    "end_line": 617,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#613",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Class\u003c?\u003e[] withMember(AnnotatedMember member){\n  return _annotationIntrospector.findViews(member);\n}",
    "begin_line": 613,
    "end_line": 615,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findReferenceType#620",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findReferenceType()",
    "snippet": "@Override public AnnotationIntrospector.ReferenceProperty findReferenceType(){\n  AnnotationIntrospector.ReferenceProperty result\u003d_referenceInfo;\n  if (result !\u003d null) {\n    if (result \u003d\u003d NOT_REFEFERENCE_PROP) {\n      return null;\n    }\n    return result;\n  }\n  result\u003dfromMemberAnnotations(new WithMember\u003cAnnotationIntrospector.ReferenceProperty\u003e(){\n    @Override public AnnotationIntrospector.ReferenceProperty withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findReferenceType(member);\n    }\n  }\n);\n  _referenceInfo\u003d(result \u003d\u003d null) ? NOT_REFEFERENCE_PROP : result;\n  return result;\n}",
    "begin_line": 620,
    "end_line": 638,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#632",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public AnnotationIntrospector.ReferenceProperty withMember(AnnotatedMember member){\n  return _annotationIntrospector.findReferenceType(member);\n}",
    "begin_line": 632,
    "end_line": 634,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.isTypeId#641",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.isTypeId()",
    "snippet": "@Override public boolean isTypeId(){\n  Boolean b\u003dfromMemberAnnotations(new WithMember\u003cBoolean\u003e(){\n    @Override public Boolean withMember(    AnnotatedMember member){\n      return _annotationIntrospector.isTypeId(member);\n    }\n  }\n);\n  return (b !\u003d null) \u0026\u0026 b.booleanValue();\n}",
    "begin_line": 641,
    "end_line": 649,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#644",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Boolean withMember(AnnotatedMember member){\n  return _annotationIntrospector.isTypeId(member);\n}",
    "begin_line": 644,
    "end_line": 646,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._findRequired#651",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._findRequired()",
    "snippet": "protected Boolean _findRequired(){\n  return fromMemberAnnotations(new WithMember\u003cBoolean\u003e(){\n    @Override public Boolean withMember(    AnnotatedMember member){\n      return _annotationIntrospector.hasRequiredMarker(member);\n    }\n  }\n);\n}",
    "begin_line": 651,
    "end_line": 658,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#654",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Boolean withMember(AnnotatedMember member){\n  return _annotationIntrospector.hasRequiredMarker(member);\n}",
    "begin_line": 654,
    "end_line": 656,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._findDescription#660",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._findDescription()",
    "snippet": "protected String _findDescription(){\n  return fromMemberAnnotations(new WithMember\u003cString\u003e(){\n    @Override public String withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findPropertyDescription(member);\n    }\n  }\n);\n}",
    "begin_line": 660,
    "end_line": 667,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#663",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public String withMember(AnnotatedMember member){\n  return _annotationIntrospector.findPropertyDescription(member);\n}",
    "begin_line": 663,
    "end_line": 665,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._findIndex#669",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._findIndex()",
    "snippet": "protected Integer _findIndex(){\n  return fromMemberAnnotations(new WithMember\u003cInteger\u003e(){\n    @Override public Integer withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findPropertyIndex(member);\n    }\n  }\n);\n}",
    "begin_line": 669,
    "end_line": 676,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#672",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public Integer withMember(AnnotatedMember member){\n  return _annotationIntrospector.findPropertyIndex(member);\n}",
    "begin_line": 672,
    "end_line": 674,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._findDefaultValue#678",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._findDefaultValue()",
    "snippet": "protected String _findDefaultValue(){\n  return fromMemberAnnotations(new WithMember\u003cString\u003e(){\n    @Override public String withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findPropertyDefaultValue(member);\n    }\n  }\n);\n}",
    "begin_line": 678,
    "end_line": 685,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#681",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public String withMember(AnnotatedMember member){\n  return _annotationIntrospector.findPropertyDefaultValue(member);\n}",
    "begin_line": 681,
    "end_line": 683,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findObjectIdInfo#688",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findObjectIdInfo()",
    "snippet": "@Override public ObjectIdInfo findObjectIdInfo(){\n  return fromMemberAnnotations(new WithMember\u003cObjectIdInfo\u003e(){\n    @Override public ObjectIdInfo withMember(    AnnotatedMember member){\n      ObjectIdInfo info\u003d_annotationIntrospector.findObjectIdInfo(member);\n      if (info !\u003d null) {\n        info\u003d_annotationIntrospector.findObjectReferenceInfo(member,info);\n      }\n      return info;\n    }\n  }\n);\n}",
    "begin_line": 688,
    "end_line": 699,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#691",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public ObjectIdInfo withMember(AnnotatedMember member){\n  ObjectIdInfo info\u003d_annotationIntrospector.findObjectIdInfo(member);\n  if (info !\u003d null) {\n    info\u003d_annotationIntrospector.findObjectReferenceInfo(member,info);\n  }\n  return info;\n}",
    "begin_line": 691,
    "end_line": 697,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findInclusion#702",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findInclusion()",
    "snippet": "@Override public JsonInclude.Value findInclusion(){\n  AnnotatedMember a\u003dgetAccessor();\n  JsonInclude.Value v\u003d(_annotationIntrospector \u003d\u003d null) ? null : _annotationIntrospector.findPropertyInclusion(a);\n  return (v \u003d\u003d null) ? JsonInclude.Value.empty() : v;\n}",
    "begin_line": 702,
    "end_line": 711,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findAccess#713",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findAccess()",
    "snippet": "public JsonProperty.Access findAccess(){\n  return fromMemberAnnotationsExcept(new WithMember\u003cJsonProperty.Access\u003e(){\n    @Override public JsonProperty.Access withMember(    AnnotatedMember member){\n      return _annotationIntrospector.findPropertyAccess(member);\n    }\n  }\n,JsonProperty.Access.AUTO);\n}",
    "begin_line": 713,
    "end_line": 720,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.withMember#716",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public JsonProperty.Access withMember(AnnotatedMember member){\n  return _annotationIntrospector.findPropertyAccess(member);\n}",
    "begin_line": 716,
    "end_line": 718,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.addField#728",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.addField(com.fasterxml.jackson.databind.introspect.AnnotatedField, com.fasterxml.jackson.databind.PropertyName, boolean, boolean, boolean)",
    "snippet": "public void addField(AnnotatedField a,PropertyName name,boolean explName,boolean visible,boolean ignored){\n  _fields\u003dnew Linked\u003cAnnotatedField\u003e(a,_fields,name,explName,visible,ignored);\n}",
    "begin_line": 728,
    "end_line": 730,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.addCtor#732",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.addCtor(com.fasterxml.jackson.databind.introspect.AnnotatedParameter, com.fasterxml.jackson.databind.PropertyName, boolean, boolean, boolean)",
    "snippet": "public void addCtor(AnnotatedParameter a,PropertyName name,boolean explName,boolean visible,boolean ignored){\n  _ctorParameters\u003dnew Linked\u003cAnnotatedParameter\u003e(a,_ctorParameters,name,explName,visible,ignored);\n}",
    "begin_line": 732,
    "end_line": 734,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.addGetter#736",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.addGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.PropertyName, boolean, boolean, boolean)",
    "snippet": "public void addGetter(AnnotatedMethod a,PropertyName name,boolean explName,boolean visible,boolean ignored){\n  _getters\u003dnew Linked\u003cAnnotatedMethod\u003e(a,_getters,name,explName,visible,ignored);\n}",
    "begin_line": 736,
    "end_line": 738,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.addSetter#740",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.addSetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, com.fasterxml.jackson.databind.PropertyName, boolean, boolean, boolean)",
    "snippet": "public void addSetter(AnnotatedMethod a,PropertyName name,boolean explName,boolean visible,boolean ignored){\n  _setters\u003dnew Linked\u003cAnnotatedMethod\u003e(a,_setters,name,explName,visible,ignored);\n}",
    "begin_line": 740,
    "end_line": 742,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.addAll#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.addAll(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder)",
    "snippet": "public void addAll(POJOPropertyBuilder src){\n  _fields\u003dmerge(_fields,src._fields);\n  _ctorParameters\u003dmerge(_ctorParameters,src._ctorParameters);\n  _getters\u003dmerge(_getters,src._getters);\n  _setters\u003dmerge(_setters,src._setters);\n}",
    "begin_line": 748,
    "end_line": 754,
    "comment": "/** \n * Method for adding all property members from specified collector into this collector.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.merge#756",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.merge(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private static \u003cT\u003eLinked\u003cT\u003e merge(Linked\u003cT\u003e chain1,Linked\u003cT\u003e chain2){\n  if (chain1 \u003d\u003d null) {\n    return chain2;\n  }\n  if (chain2 \u003d\u003d null) {\n    return chain1;\n  }\n  return chain1.append(chain2);\n}",
    "begin_line": 756,
    "end_line": 765,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.removeIgnored#777",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.removeIgnored()",
    "snippet": "public void removeIgnored(){\n  _fields\u003d_removeIgnored(_fields);\n  _getters\u003d_removeIgnored(_getters);\n  _setters\u003d_removeIgnored(_setters);\n  _ctorParameters\u003d_removeIgnored(_ctorParameters);\n}",
    "begin_line": 777,
    "end_line": 783,
    "comment": "/** \n * Method called to remove all entries that are marked as ignored.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.removeNonVisible#789",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.removeNonVisible(boolean)",
    "snippet": "public JsonProperty.Access removeNonVisible(boolean inferMutators){\n  JsonProperty.Access acc\u003dfindAccess();\n  if (acc \u003d\u003d null) {\n    acc\u003dJsonProperty.Access.AUTO;\n  }\nswitch (acc) {\ncase READ_ONLY:    _setters\u003dnull;\n  _ctorParameters\u003dnull;\nif (!_forSerialization) {\n  _fields\u003dnull;\n}\nbreak;\ncase READ_WRITE:break;\ncase WRITE_ONLY:_getters\u003dnull;\nif (_forSerialization) {\n_fields\u003dnull;\n}\nbreak;\ndefault:case AUTO:_getters\u003d_removeNonVisible(_getters);\n_ctorParameters\u003d_removeNonVisible(_ctorParameters);\nif (!inferMutators || (_getters \u003d\u003d null)) {\n_fields\u003d_removeNonVisible(_fields);\n_setters\u003d_removeNonVisible(_setters);\n}\n}\nreturn acc;\n}",
    "begin_line": 789,
    "end_line": 829,
    "comment": "/** \n * @param inferMutators Whether mutators can be \"pulled in\" by visibleaccessors or not. \n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.removeConstructors#836",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.removeConstructors()",
    "snippet": "public void removeConstructors(){\n  _ctorParameters\u003dnull;\n}",
    "begin_line": 836,
    "end_line": 838,
    "comment": "/** \n * Mutator that will simply drop any constructor parameters property may have.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.trimByVisibility#845",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.trimByVisibility()",
    "snippet": "public void trimByVisibility(){\n  _fields\u003d_trimByVisibility(_fields);\n  _getters\u003d_trimByVisibility(_getters);\n  _setters\u003d_trimByVisibility(_setters);\n  _ctorParameters\u003d_trimByVisibility(_ctorParameters);\n}",
    "begin_line": 845,
    "end_line": 851,
    "comment": "/** \n * Method called to trim unnecessary entries, such as implicit getter if there is an explict one available. This is important for later stages, to avoid unnecessary conflicts.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.mergeAnnotations#854",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.mergeAnnotations(boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\") public void mergeAnnotations(boolean forSerialization){\n  if (forSerialization) {\n    if (_getters !\u003d null) {\n      AnnotationMap ann\u003d_mergeAnnotations(0,_getters,_fields,_ctorParameters,_setters);\n      _getters\u003d_applyAnnotations(_getters,ann);\n    }\n else     if (_fields !\u003d null) {\n      AnnotationMap ann\u003d_mergeAnnotations(0,_fields,_ctorParameters,_setters);\n      _fields\u003d_applyAnnotations(_fields,ann);\n    }\n  }\n else {\n    if (_ctorParameters !\u003d null) {\n      AnnotationMap ann\u003d_mergeAnnotations(0,_ctorParameters,_setters,_fields,_getters);\n      _ctorParameters\u003d_applyAnnotations(_ctorParameters,ann);\n    }\n else     if (_setters !\u003d null) {\n      AnnotationMap ann\u003d_mergeAnnotations(0,_setters,_fields,_getters);\n      _setters\u003d_applyAnnotations(_setters,ann);\n    }\n else     if (_fields !\u003d null) {\n      AnnotationMap ann\u003d_mergeAnnotations(0,_fields,_getters);\n      _fields\u003d_applyAnnotations(_fields,ann);\n    }\n  }\n}",
    "begin_line": 854,
    "end_line": 876,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._mergeAnnotations#878",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._mergeAnnotations(int, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003c? extends com.fasterxml.jackson.databind.introspect.AnnotatedMember\u003e)",
    "snippet": "private AnnotationMap _mergeAnnotations(int index,Linked\u003c? extends AnnotatedMember\u003e... nodes){\n  AnnotationMap ann\u003d_getAllAnnotations(nodes[index]);\n  while (++index \u003c nodes.length) {\n    if (nodes[index] !\u003d null) {\n      return AnnotationMap.merge(ann,_mergeAnnotations(index,nodes));\n    }\n  }\n  return ann;\n}",
    "begin_line": 878,
    "end_line": 888,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._getAllAnnotations#899",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._getAllAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT extends AnnotatedMember\u003eAnnotationMap _getAllAnnotations(Linked\u003cT\u003e node){\n  AnnotationMap ann\u003dnode.value.getAllAnnotations();\n  if (node.next !\u003d null) {\n    ann\u003dAnnotationMap.merge(ann,_getAllAnnotations(node.next));\n  }\n  return ann;\n}",
    "begin_line": 899,
    "end_line": 905,
    "comment": "/** \n * Replacement, as per [databind#868], of simple access to annotations, which does \"deep merge\" if an as necessary. \u003cpre\u003e nodes[index].value.getAllAnnotations() \u003c/pre\u003e\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._applyAnnotations#916",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._applyAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e, com.fasterxml.jackson.databind.introspect.AnnotationMap)",
    "snippet": "private \u003cT extends AnnotatedMember\u003eLinked\u003cT\u003e _applyAnnotations(Linked\u003cT\u003e node,AnnotationMap ann){\n  @SuppressWarnings(\"unchecked\") T value\u003d(T)node.value.withAnnotations(ann);\n  if (node.next !\u003d null) {\n    node\u003dnode.withNext(_applyAnnotations(node.next,ann));\n  }\n  return node.withValue(value);\n}",
    "begin_line": 916,
    "end_line": 923,
    "comment": "/** \n * Helper method to handle recursive merging of annotations within accessor class, to ensure no annotations are accidentally dropped within chain when non-visible and secondary accessors are pruned later on. \u003cp\u003e See [databind#868] for more information.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._removeIgnored#925",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._removeIgnored(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eLinked\u003cT\u003e _removeIgnored(Linked\u003cT\u003e node){\n  if (node \u003d\u003d null) {\n    return node;\n  }\n  return node.withoutIgnored();\n}",
    "begin_line": 925,
    "end_line": 931,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._removeNonVisible#933",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._removeNonVisible(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eLinked\u003cT\u003e _removeNonVisible(Linked\u003cT\u003e node){\n  if (node \u003d\u003d null) {\n    return node;\n  }\n  return node.withoutNonVisible();\n}",
    "begin_line": 933,
    "end_line": 939,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._trimByVisibility#941",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._trimByVisibility(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eLinked\u003cT\u003e _trimByVisibility(Linked\u003cT\u003e node){\n  if (node \u003d\u003d null) {\n    return node;\n  }\n  return node.trimByVisibility();\n}",
    "begin_line": 941,
    "end_line": 947,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._anyExplicits#955",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._anyExplicits(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eboolean _anyExplicits(Linked\u003cT\u003e n){\n  for (; n !\u003d null; n\u003dn.next) {\n    if (n.name !\u003d null \u0026\u0026 n.name.hasSimpleName()) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 955,
    "end_line": 963,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._anyExplicitNames#965",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._anyExplicitNames(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eboolean _anyExplicitNames(Linked\u003cT\u003e n){\n  for (; n !\u003d null; n\u003dn.next) {\n    if (n.name !\u003d null \u0026\u0026 n.isNameExplicit) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 965,
    "end_line": 973,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.anyVisible#975",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.anyVisible()",
    "snippet": "public boolean anyVisible(){\n  return _anyVisible(_fields) || _anyVisible(_getters) || _anyVisible(_setters)|| _anyVisible(_ctorParameters);\n}",
    "begin_line": 975,
    "end_line": 981,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._anyVisible#983",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._anyVisible(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eboolean _anyVisible(Linked\u003cT\u003e n){\n  for (; n !\u003d null; n\u003dn.next) {\n    if (n.isVisible) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 983,
    "end_line": 991,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.anyIgnorals#993",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.anyIgnorals()",
    "snippet": "public boolean anyIgnorals(){\n  return _anyIgnorals(_fields) || _anyIgnorals(_getters) || _anyIgnorals(_setters)|| _anyIgnorals(_ctorParameters);\n}",
    "begin_line": 993,
    "end_line": 999,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._anyIgnorals#1001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._anyIgnorals(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "private \u003cT\u003eboolean _anyIgnorals(Linked\u003cT\u003e n){\n  for (; n !\u003d null; n\u003dn.next) {\n    if (n.isMarkedIgnored) {\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 1001,
    "end_line": 1009,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.findExplicitNames#1017",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.findExplicitNames()",
    "snippet": "public Set\u003cPropertyName\u003e findExplicitNames(){\n  Set\u003cPropertyName\u003e renamed\u003dnull;\n  renamed\u003d_findExplicitNames(_fields,renamed);\n  renamed\u003d_findExplicitNames(_getters,renamed);\n  renamed\u003d_findExplicitNames(_setters,renamed);\n  renamed\u003d_findExplicitNames(_ctorParameters,renamed);\n  if (renamed \u003d\u003d null) {\n    return Collections.emptySet();\n  }\n  return renamed;\n}",
    "begin_line": 1017,
    "end_line": 1028,
    "comment": "/** \n * Method called to find out set of explicit names for accessors bound together due to implicit name.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.explode#1038",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.explode(java.util.Collection\u003ccom.fasterxml.jackson.databind.PropertyName\u003e)",
    "snippet": "public Collection\u003cPOJOPropertyBuilder\u003e explode(Collection\u003cPropertyName\u003e newNames){\n  HashMap\u003cPropertyName,POJOPropertyBuilder\u003e props\u003dnew HashMap\u003cPropertyName,POJOPropertyBuilder\u003e();\n  _explode(newNames,props,_fields);\n  _explode(newNames,props,_getters);\n  _explode(newNames,props,_setters);\n  _explode(newNames,props,_ctorParameters);\n  return props.values();\n}",
    "begin_line": 1038,
    "end_line": 1046,
    "comment": "/** \n * Method called when a previous call to  {@link #findExplicitNames} foundmultiple distinct explicit names, and the property this builder represents basically needs to be broken apart and replaced by a set of more than one properties.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._explode#1049",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._explode(java.util.Collection\u003ccom.fasterxml.jackson.databind.PropertyName\u003e, java.util.Map\u003ccom.fasterxml.jackson.databind.PropertyName,com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder\u003e, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") private void _explode(Collection\u003cPropertyName\u003e newNames,Map\u003cPropertyName,POJOPropertyBuilder\u003e props,Linked\u003c?\u003e accessors){\n  final Linked\u003c?\u003e firstAcc\u003daccessors;\n  for (Linked\u003c?\u003e node\u003daccessors; node !\u003d null; node\u003dnode.next) {\n    PropertyName name\u003dnode.name;\n    if (!node.isNameExplicit || name \u003d\u003d null) {\n      if (!node.isVisible) {\n        continue;\n      }\n      throw new IllegalStateException(\"Conflicting/ambiguous property name definitions (implicit name \u0027\" + _name + \"\u0027): found multiple explicit names: \"+ newNames+ \", but also implicit accessor: \"+ node);\n    }\n    POJOPropertyBuilder prop\u003dprops.get(name);\n    if (prop \u003d\u003d null) {\n      prop\u003dnew POJOPropertyBuilder(_config,_annotationIntrospector,_forSerialization,_internalName,name);\n      props.put(name,prop);\n    }\n    if (firstAcc \u003d\u003d _fields) {\n      Linked\u003cAnnotatedField\u003e n2\u003d(Linked\u003cAnnotatedField\u003e)node;\n      prop._fields\u003dn2.withNext(prop._fields);\n    }\n else     if (firstAcc \u003d\u003d _getters) {\n      Linked\u003cAnnotatedMethod\u003e n2\u003d(Linked\u003cAnnotatedMethod\u003e)node;\n      prop._getters\u003dn2.withNext(prop._getters);\n    }\n else     if (firstAcc \u003d\u003d _setters) {\n      Linked\u003cAnnotatedMethod\u003e n2\u003d(Linked\u003cAnnotatedMethod\u003e)node;\n      prop._setters\u003dn2.withNext(prop._setters);\n    }\n else     if (firstAcc \u003d\u003d _ctorParameters) {\n      Linked\u003cAnnotatedParameter\u003e n2\u003d(Linked\u003cAnnotatedParameter\u003e)node;\n      prop._ctorParameters\u003dn2.withNext(prop._ctorParameters);\n    }\n else {\n      throw new IllegalStateException(\"Internal error: mismatched accessors, property: \" + this);\n    }\n  }\n}",
    "begin_line": 1049,
    "end_line": 1089,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder._findExplicitNames#1091",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder._findExplicitNames(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003c? extends com.fasterxml.jackson.databind.introspect.AnnotatedMember\u003e, java.util.Set\u003ccom.fasterxml.jackson.databind.PropertyName\u003e)",
    "snippet": "private Set\u003cPropertyName\u003e _findExplicitNames(Linked\u003c? extends AnnotatedMember\u003e node,Set\u003cPropertyName\u003e renamed){\n  for (; node !\u003d null; node\u003dnode.next) {\n    if (!node.isNameExplicit || node.name \u003d\u003d null) {\n      continue;\n    }\n    if (renamed \u003d\u003d null) {\n      renamed\u003dnew HashSet\u003cPropertyName\u003e();\n    }\n    renamed.add(node.name);\n  }\n  return renamed;\n}",
    "begin_line": 1091,
    "end_line": 1110,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.toString#1114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.toString()",
    "snippet": "@Override public String toString(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(\"[Property \u0027\").append(_name).append(\"\u0027; ctors: \").append(_ctorParameters).append(\", field(s): \").append(_fields).append(\", getter(s): \").append(_getters).append(\", setter(s): \").append(_setters);\n  sb.append(\"]\");\n  return sb.toString();\n}",
    "begin_line": 1114,
    "end_line": 1125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.fromMemberAnnotations#1137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.fromMemberAnnotations(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember\u003cT\u003e)",
    "snippet": "protected \u003cT\u003eT fromMemberAnnotations(WithMember\u003cT\u003e func){\n  T result\u003dnull;\n  if (_annotationIntrospector !\u003d null) {\n    if (_forSerialization) {\n      if (_getters !\u003d null) {\n        result\u003dfunc.withMember(_getters.value);\n      }\n    }\n else {\n      if (_ctorParameters !\u003d null) {\n        result\u003dfunc.withMember(_ctorParameters.value);\n      }\n      if (result \u003d\u003d null \u0026\u0026 _setters !\u003d null) {\n        result\u003dfunc.withMember(_setters.value);\n      }\n    }\n    if (result \u003d\u003d null \u0026\u0026 _fields !\u003d null) {\n      result\u003dfunc.withMember(_fields.value);\n    }\n  }\n  return result;\n}",
    "begin_line": 1137,
    "end_line": 1158,
    "comment": "/** \n * Helper method used for finding annotation values, from accessors relevant to current usage (deserialization, serialization)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "POJOPropertyBuilder.fromMemberAnnotationsExcept#1160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.fromMemberAnnotationsExcept(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.WithMember\u003cT\u003e, T)",
    "snippet": "protected \u003cT\u003eT fromMemberAnnotationsExcept(WithMember\u003cT\u003e func,T defaultValue){\n  if (_annotationIntrospector \u003d\u003d null) {\n    return null;\n  }\n  if (_forSerialization) {\n    if (_getters !\u003d null) {\n      T result\u003dfunc.withMember(_getters.value);\n      if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n        return result;\n      }\n    }\n    if (_fields !\u003d null) {\n      T result\u003dfunc.withMember(_fields.value);\n      if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n        return result;\n      }\n    }\n    if (_ctorParameters !\u003d null) {\n      T result\u003dfunc.withMember(_ctorParameters.value);\n      if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n        return result;\n      }\n    }\n    if (_setters !\u003d null) {\n      T result\u003dfunc.withMember(_setters.value);\n      if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n        return result;\n      }\n    }\n    return null;\n  }\n  if (_ctorParameters !\u003d null) {\n    T result\u003dfunc.withMember(_ctorParameters.value);\n    if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n      return result;\n    }\n  }\n  if (_setters !\u003d null) {\n    T result\u003dfunc.withMember(_setters.value);\n    if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n      return result;\n    }\n  }\n  if (_fields !\u003d null) {\n    T result\u003dfunc.withMember(_fields.value);\n    if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n      return result;\n    }\n  }\n  if (_getters !\u003d null) {\n    T result\u003dfunc.withMember(_getters.value);\n    if ((result !\u003d null) \u0026\u0026 (result !\u003d defaultValue)) {\n      return result;\n    }\n  }\n  return null;\n}",
    "begin_line": 1160,
    "end_line": 1220,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "WithMember.withMember#1229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withMember(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public T withMember(AnnotatedMember member);",
    "begin_line": 1229,
    "end_line": 1229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberIterator.MemberIterator#1240",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.MemberIterator(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "public MemberIterator(Linked\u003cT\u003e first){\n  next\u003dfirst;\n}",
    "begin_line": 1240,
    "end_line": 1242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberIterator.hasNext#1245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.hasNext()",
    "snippet": "@Override public boolean hasNext(){\n  return (next !\u003d null);\n}",
    "begin_line": 1245,
    "end_line": 1247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberIterator.next#1250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.next()",
    "snippet": "@Override public T next(){\n  if (next \u003d\u003d null)   throw new NoSuchElementException();\n  T result\u003dnext.value;\n  next\u003dnext.next;\n  return result;\n}",
    "begin_line": 1250,
    "end_line": 1255,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MemberIterator.remove#1258",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.remove()",
    "snippet": "@Override public void remove(){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 1258,
    "end_line": 1260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.Linked#1278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked(T, com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e, com.fasterxml.jackson.databind.PropertyName, boolean, boolean, boolean)",
    "snippet": "public Linked(T v,Linked\u003cT\u003e n,PropertyName name,boolean explName,boolean visible,boolean ignored){\n  value\u003dv;\n  next\u003dn;\n  this.name\u003d(name \u003d\u003d null || name.isEmpty()) ? null : name;\n  if (explName) {\n    if (this.name \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Cannot pass true for \u0027explName\u0027 if name is null/empty\");\n    }\n    if (!name.hasSimpleName()) {\n      explName\u003dfalse;\n    }\n  }\n  isNameExplicit\u003dexplName;\n  isVisible\u003dvisible;\n  isMarkedIgnored\u003dignored;\n}",
    "begin_line": 1278,
    "end_line": 1300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.withoutNext#1302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withoutNext()",
    "snippet": "public Linked\u003cT\u003e withoutNext(){\n  if (next \u003d\u003d null) {\n    return this;\n  }\n  return new Linked\u003cT\u003e(value,null,name,isNameExplicit,isVisible,isMarkedIgnored);\n}",
    "begin_line": 1302,
    "end_line": 1307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.withValue#1309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withValue(T)",
    "snippet": "public Linked\u003cT\u003e withValue(T newValue){\n  if (newValue \u003d\u003d value) {\n    return this;\n  }\n  return new Linked\u003cT\u003e(newValue,next,name,isNameExplicit,isVisible,isMarkedIgnored);\n}",
    "begin_line": 1309,
    "end_line": 1314,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.withNext#1316",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withNext(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "public Linked\u003cT\u003e withNext(Linked\u003cT\u003e newNext){\n  if (newNext \u003d\u003d next) {\n    return this;\n  }\n  return new Linked\u003cT\u003e(value,newNext,name,isNameExplicit,isVisible,isMarkedIgnored);\n}",
    "begin_line": 1316,
    "end_line": 1321,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.withoutIgnored#1323",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withoutIgnored()",
    "snippet": "public Linked\u003cT\u003e withoutIgnored(){\n  if (isMarkedIgnored) {\n    return (next \u003d\u003d null) ? null : next.withoutIgnored();\n  }\n  if (next !\u003d null) {\n    Linked\u003cT\u003e newNext\u003dnext.withoutIgnored();\n    if (newNext !\u003d next) {\n      return withNext(newNext);\n    }\n  }\n  return this;\n}",
    "begin_line": 1323,
    "end_line": 1334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.withoutNonVisible#1336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.withoutNonVisible()",
    "snippet": "public Linked\u003cT\u003e withoutNonVisible(){\n  Linked\u003cT\u003e newNext\u003d(next \u003d\u003d null) ? null : next.withoutNonVisible();\n  return isVisible ? withNext(newNext) : newNext;\n}",
    "begin_line": 1336,
    "end_line": 1339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.append#1345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.append(com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.Linked\u003cT\u003e)",
    "snippet": "protected Linked\u003cT\u003e append(Linked\u003cT\u003e appendable){\n  if (next \u003d\u003d null) {\n    return withNext(appendable);\n  }\n  return withNext(next.append(appendable));\n}",
    "begin_line": 1345,
    "end_line": 1350,
    "comment": "/** \n * Method called to append given node(s) at the end of this node chain.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.trimByVisibility#1352",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.trimByVisibility()",
    "snippet": "public Linked\u003cT\u003e trimByVisibility(){\n  if (next \u003d\u003d null) {\n    return this;\n  }\n  Linked\u003cT\u003e newNext\u003dnext.trimByVisibility();\n  if (name !\u003d null) {\n    if (newNext.name \u003d\u003d null) {\n      return withNext(null);\n    }\n    return withNext(newNext);\n  }\n  if (newNext.name !\u003d null) {\n    return newNext;\n  }\n  if (isVisible \u003d\u003d newNext.isVisible) {\n    return withNext(newNext);\n  }\n  return isVisible ? withNext(null) : newNext;\n}",
    "begin_line": 1352,
    "end_line": 1372,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Linked.toString#1375",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder",
    "signature": "com.fasterxml.jackson.databind.introspect.POJOPropertyBuilder.toString()",
    "snippet": "@Override public String toString(){\n  String msg\u003dString.format(\"%s[visible\u003d%b,ignore\u003d%b,explicitName\u003d%b]\",value.toString(),isVisible,isMarkedIgnored,isNameExplicit);\n  if (next !\u003d null) {\n    msg\u003dmsg + \", \" + next.toString();\n  }\n  return msg;\n}",
    "begin_line": 1375,
    "end_line": 1382,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.SimpleMixInResolver#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public SimpleMixInResolver(ClassIntrospector.MixInResolver overrides){\n  _overrides\u003doverrides;\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.SimpleMixInResolver#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.SimpleMixInResolver(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver, java.util.Map\u003ccom.fasterxml.jackson.databind.type.ClassKey,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "protected SimpleMixInResolver(ClassIntrospector.MixInResolver overrides,Map\u003cClassKey,Class\u003c?\u003e\u003e mixins){\n  _overrides\u003doverrides;\n  _localMixIns\u003dmixins;\n}",
    "begin_line": 39,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.withOverrides#49",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.withOverrides(com.fasterxml.jackson.databind.introspect.ClassIntrospector.MixInResolver)",
    "snippet": "public SimpleMixInResolver withOverrides(ClassIntrospector.MixInResolver overrides){\n  return new SimpleMixInResolver(overrides,_localMixIns);\n}",
    "begin_line": 49,
    "end_line": 51,
    "comment": "/** \n * Mutant factory for constructor a new resolver instance with given mix-in resolver override.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.withoutLocalDefinitions#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.withoutLocalDefinitions()",
    "snippet": "public SimpleMixInResolver withoutLocalDefinitions(){\n  return new SimpleMixInResolver(_overrides,null);\n}",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Mutant factory method that constructs a new instance that has no locally defined mix-in/target mappings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.setLocalDefinitions#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.setLocalDefinitions(java.util.Map\u003cjava.lang.Class\u003c?\u003e,java.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public void setLocalDefinitions(Map\u003cClass\u003c?\u003e,Class\u003c?\u003e\u003e sourceMixins){\n  if (sourceMixins \u003d\u003d null || sourceMixins.isEmpty()) {\n    _localMixIns\u003dnull;\n  }\n else {\n    Map\u003cClassKey,Class\u003c?\u003e\u003e mixIns\u003dnew HashMap\u003cClassKey,Class\u003c?\u003e\u003e(sourceMixins.size());\n    for (    Map.Entry\u003cClass\u003c?\u003e,Class\u003c?\u003e\u003e en : sourceMixins.entrySet()) {\n      mixIns.put(new ClassKey(en.getKey()),en.getValue());\n    }\n    _localMixIns\u003dmixIns;\n  }\n}",
    "begin_line": 61,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.addLocalDefinition#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.addLocalDefinition(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public void addLocalDefinition(Class\u003c?\u003e target,Class\u003c?\u003e mixinSource){\n  if (_localMixIns \u003d\u003d null) {\n    _localMixIns\u003dnew HashMap\u003cClassKey,Class\u003c?\u003e\u003e();\n  }\n  _localMixIns.put(new ClassKey(target),mixinSource);\n}",
    "begin_line": 73,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.copy#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.copy()",
    "snippet": "@Override public SimpleMixInResolver copy(){\n  ClassIntrospector.MixInResolver overrides\u003d(_overrides \u003d\u003d null) ? null : _overrides.copy();\n  Map\u003cClassKey,Class\u003c?\u003e\u003e mixIns\u003d(_localMixIns \u003d\u003d null) ? null : new HashMap\u003cClassKey,Class\u003c?\u003e\u003e(_localMixIns);\n  return new SimpleMixInResolver(overrides,mixIns);\n}",
    "begin_line": 81,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.findMixInClassFor#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.findMixInClassFor(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public Class\u003c?\u003e findMixInClassFor(Class\u003c?\u003e cls){\n  Class\u003c?\u003e mixin\u003d(_overrides \u003d\u003d null) ? null : _overrides.findMixInClassFor(cls);\n  if (mixin \u003d\u003d null \u0026\u0026 (_localMixIns !\u003d null)) {\n    mixin\u003d_localMixIns.get(new ClassKey(cls));\n  }\n  return mixin;\n}",
    "begin_line": 90,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleMixInResolver.localSize#99",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/SimpleMixInResolver.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver",
    "signature": "com.fasterxml.jackson.databind.introspect.SimpleMixInResolver.localSize()",
    "snippet": "public int localSize(){\n  return (_localMixIns \u003d\u003d null) ? 0 : _localMixIns.size();\n}",
    "begin_line": 99,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeResolutionContext.resolveType#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
    "signature": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext.resolveType(java.lang.reflect.Type)",
    "snippet": "public JavaType resolveType(Type t);",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Basic.Basic#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
    "signature": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext.Basic(com.fasterxml.jackson.databind.type.TypeFactory, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "public Basic(TypeFactory tf,TypeBindings b){\n  _typeFactory\u003dtf;\n  _bindings\u003db;\n}",
    "begin_line": 24,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Basic.resolveType#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/TypeResolutionContext.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext",
    "signature": "com.fasterxml.jackson.databind.introspect.TypeResolutionContext.resolveType(java.lang.reflect.Type)",
    "snippet": "@Override public JavaType resolveType(Type type){\n  return _typeFactory.constructType(type,_bindings);\n}",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.with#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(JsonAutoDetect)",
    "snippet": "public T with(JsonAutoDetect ann);",
    "begin_line": 29,
    "end_line": 29,
    "comment": "/** \n * Builder method that will return an instance that has same settings as this instance has, except for values that given annotation overrides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withOverrides#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withOverrides(JsonAutoDetect.Value)",
    "snippet": "public T withOverrides(JsonAutoDetect.Value vis);",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * Method that can be used for merging default values from `this` instance with specified overrides; and either return `this` if overrides had no effect (that is, result would be equal), or a new instance with merged visibility settings.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.with#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(Visibility)",
    "snippet": "public T with(Visibility v);",
    "begin_line": 51,
    "end_line": 51,
    "comment": "/** \n * Builder method that will create and return an instance that has specified {@link Visibility} value to use for all property elements.Typical usage would be something like: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().with(Visibility.NONE)); \u003c/pre\u003e (which would basically disable all auto-detection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withVisibility#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withVisibility(PropertyAccessor, Visibility)",
    "snippet": "public T withVisibility(PropertyAccessor method,Visibility v);",
    "begin_line": 63,
    "end_line": 63,
    "comment": "/** \n * Builder method that will create and return an instance that has specified {@link Visibility} value to use for specified property.Typical usage would be: \u003cpre\u003e mapper.setVisibilityChecker( mapper.getVisibilityChecker().withVisibility(JsonMethod.FIELD, Visibility.ANY)); \u003c/pre\u003e (which would basically enable auto-detection for all member fields)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withGetterVisibility#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withGetterVisibility(Visibility)",
    "snippet": "public T withGetterVisibility(Visibility v);",
    "begin_line": 69,
    "end_line": 69,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for regular (\"getXxx\") getters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withIsGetterVisibility#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withIsGetterVisibility(Visibility)",
    "snippet": "public T withIsGetterVisibility(Visibility v);",
    "begin_line": 75,
    "end_line": 75,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for \"is-getters\" (\"isXxx\").\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withSetterVisibility#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withSetterVisibility(Visibility)",
    "snippet": "public T withSetterVisibility(Visibility v);",
    "begin_line": 81,
    "end_line": 81,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for setters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withCreatorVisibility#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withCreatorVisibility(Visibility)",
    "snippet": "public T withCreatorVisibility(Visibility v);",
    "begin_line": 88,
    "end_line": 88,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for creator methods (constructors, factory methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.withFieldVisibility#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withFieldVisibility(Visibility)",
    "snippet": "public T withFieldVisibility(Visibility v);",
    "begin_line": 94,
    "end_line": 94,
    "comment": "/** \n * Builder method that will return a checker instance that has specified minimum visibility level for fields.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isGetterVisible#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isGetterVisible(Method m);",
    "begin_line": 103,
    "end_line": 103,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as regular getter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isGetterVisible#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isGetterVisible(AnnotatedMethod m);",
    "begin_line": 104,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isIsGetterVisible#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isIsGetterVisible(Method m);",
    "begin_line": 111,
    "end_line": 111,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as is-getter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isIsGetterVisible#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isIsGetterVisible(AnnotatedMethod m);",
    "begin_line": 112,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isSetterVisible#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(java.lang.reflect.Method)",
    "snippet": "public boolean isSetterVisible(Method m);",
    "begin_line": 119,
    "end_line": 119,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as setter, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isSetterVisible#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "public boolean isSetterVisible(AnnotatedMethod m);",
    "begin_line": 120,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isCreatorVisible#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(java.lang.reflect.Member)",
    "snippet": "public boolean isCreatorVisible(Member m);",
    "begin_line": 127,
    "end_line": 127,
    "comment": "/** \n * Method for checking whether given method is auto-detectable as Creator, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isCreatorVisible#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public boolean isCreatorVisible(AnnotatedMember m);",
    "begin_line": 128,
    "end_line": 128,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isFieldVisible#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(java.lang.reflect.Field)",
    "snippet": "public boolean isFieldVisible(Field f);",
    "begin_line": 135,
    "end_line": 135,
    "comment": "/** \n * Method for checking whether given field is auto-detectable as property, with respect to its visibility (not considering method signature or name, just visibility)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VisibilityChecker.isFieldVisible#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)",
    "snippet": "public boolean isFieldVisible(AnnotatedField f);",
    "begin_line": 136,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.defaultInstance#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.defaultInstance()",
    "snippet": "public static Std defaultInstance(){\n  return DEFAULT;\n}",
    "begin_line": 178,
    "end_line": 178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(JsonAutoDetect)",
    "snippet": "public Std(JsonAutoDetect ann){\n  _getterMinLevel\u003dann.getterVisibility();\n  _isGetterMinLevel\u003dann.isGetterVisibility();\n  _setterMinLevel\u003dann.setterVisibility();\n  _creatorMinLevel\u003dann.creatorVisibility();\n  _fieldMinLevel\u003dann.fieldVisibility();\n}",
    "begin_line": 186,
    "end_line": 194,
    "comment": "/** \n * Constructor used for building instance that has minumum visibility levels as indicated by given annotation instance\n * @param ann Annotations to use for determining minimum visibility levels\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(Visibility, Visibility, Visibility, Visibility, Visibility)",
    "snippet": "public Std(Visibility getter,Visibility isGetter,Visibility setter,Visibility creator,Visibility field){\n  _getterMinLevel\u003dgetter;\n  _isGetterMinLevel\u003disGetter;\n  _setterMinLevel\u003dsetter;\n  _creatorMinLevel\u003dcreator;\n  _fieldMinLevel\u003dfield;\n}",
    "begin_line": 199,
    "end_line": 207,
    "comment": "/** \n * Constructor that allows directly specifying minimum visibility levels to use\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.Std#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.Std(Visibility)",
    "snippet": "public Std(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT) {\n    _getterMinLevel\u003dDEFAULT._getterMinLevel;\n    _isGetterMinLevel\u003dDEFAULT._isGetterMinLevel;\n    _setterMinLevel\u003dDEFAULT._setterMinLevel;\n    _creatorMinLevel\u003dDEFAULT._creatorMinLevel;\n    _fieldMinLevel\u003dDEFAULT._fieldMinLevel;\n  }\n else {\n    _getterMinLevel\u003dv;\n    _isGetterMinLevel\u003dv;\n    _setterMinLevel\u003dv;\n    _creatorMinLevel\u003dv;\n    _fieldMinLevel\u003dv;\n  }\n}",
    "begin_line": 215,
    "end_line": 231,
    "comment": "/** \n * Constructor that will assign given visibility value for all properties.\n * @param v level to use for all property types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.construct#236",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.construct(JsonAutoDetect.Value)",
    "snippet": "public static Std construct(JsonAutoDetect.Value vis){\n  return DEFAULT.withOverrides(vis);\n}",
    "begin_line": 236,
    "end_line": 238,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._with#247",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker._with(Visibility, Visibility, Visibility, Visibility, Visibility)",
    "snippet": "protected Std _with(Visibility g,Visibility isG,Visibility s,Visibility cr,Visibility f){\n  if ((g \u003d\u003d _getterMinLevel) \u0026\u0026 (isG \u003d\u003d _isGetterMinLevel) \u0026\u0026 (s \u003d\u003d _setterMinLevel)\u0026\u0026 (cr \u003d\u003d _creatorMinLevel)\u0026\u0026 (f \u003d\u003d _fieldMinLevel)) {\n    return this;\n  }\n  return new Std(g,isG,s,cr,f);\n}",
    "begin_line": 247,
    "end_line": 258,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.with#261",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(JsonAutoDetect)",
    "snippet": "@Override public Std with(JsonAutoDetect ann){\n  Std curr\u003dthis;\n  if (ann !\u003d null) {\n    return _with(_defaultOrOverride(_getterMinLevel,ann.getterVisibility()),_defaultOrOverride(_isGetterMinLevel,ann.isGetterVisibility()),_defaultOrOverride(_setterMinLevel,ann.setterVisibility()),_defaultOrOverride(_creatorMinLevel,ann.creatorVisibility()),_defaultOrOverride(_fieldMinLevel,ann.fieldVisibility()));\n  }\n  return curr;\n}",
    "begin_line": 261,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withOverrides#277",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withOverrides(JsonAutoDetect.Value)",
    "snippet": "@Override public Std withOverrides(JsonAutoDetect.Value vis){\n  Std curr\u003dthis;\n  if (vis !\u003d null) {\n    return _with(_defaultOrOverride(_getterMinLevel,vis.getGetterVisibility()),_defaultOrOverride(_isGetterMinLevel,vis.getIsGetterVisibility()),_defaultOrOverride(_setterMinLevel,vis.getSetterVisibility()),_defaultOrOverride(_creatorMinLevel,vis.getCreatorVisibility()),_defaultOrOverride(_fieldMinLevel,vis.getFieldVisibility()));\n  }\n  return curr;\n}",
    "begin_line": 277,
    "end_line": 290,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std._defaultOrOverride#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker._defaultOrOverride(Visibility, Visibility)",
    "snippet": "private Visibility _defaultOrOverride(Visibility defaults,Visibility override){\n  if (override \u003d\u003d Visibility.DEFAULT) {\n    return defaults;\n  }\n  return override;\n}",
    "begin_line": 292,
    "end_line": 297,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.with#300",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.with(Visibility)",
    "snippet": "@Override public Std with(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT) {\n    return DEFAULT;\n  }\n  return new Std(v);\n}",
    "begin_line": 300,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withVisibility#309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withVisibility(PropertyAccessor, Visibility)",
    "snippet": "@Override public Std withVisibility(PropertyAccessor method,Visibility v){\nswitch (method) {\ncase GETTER:    return withGetterVisibility(v);\ncase SETTER:  return withSetterVisibility(v);\ncase CREATOR:return withCreatorVisibility(v);\ncase FIELD:return withFieldVisibility(v);\ncase IS_GETTER:return withIsGetterVisibility(v);\ncase ALL:return with(v);\ndefault:return this;\n}\n}",
    "begin_line": 309,
    "end_line": 329,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withGetterVisibility#332",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withGetterVisibility(Visibility)",
    "snippet": "@Override public Std withGetterVisibility(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT)   v\u003dDEFAULT._getterMinLevel;\n  if (_getterMinLevel \u003d\u003d v)   return this;\n  return new Std(v,_isGetterMinLevel,_setterMinLevel,_creatorMinLevel,_fieldMinLevel);\n}",
    "begin_line": 332,
    "end_line": 336,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withIsGetterVisibility#339",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withIsGetterVisibility(Visibility)",
    "snippet": "@Override public Std withIsGetterVisibility(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT)   v\u003dDEFAULT._isGetterMinLevel;\n  if (_isGetterMinLevel \u003d\u003d v)   return this;\n  return new Std(_getterMinLevel,v,_setterMinLevel,_creatorMinLevel,_fieldMinLevel);\n}",
    "begin_line": 339,
    "end_line": 343,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withSetterVisibility#346",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withSetterVisibility(Visibility)",
    "snippet": "@Override public Std withSetterVisibility(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT)   v\u003dDEFAULT._setterMinLevel;\n  if (_setterMinLevel \u003d\u003d v)   return this;\n  return new Std(_getterMinLevel,_isGetterMinLevel,v,_creatorMinLevel,_fieldMinLevel);\n}",
    "begin_line": 346,
    "end_line": 350,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withCreatorVisibility#353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withCreatorVisibility(Visibility)",
    "snippet": "@Override public Std withCreatorVisibility(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT)   v\u003dDEFAULT._creatorMinLevel;\n  if (_creatorMinLevel \u003d\u003d v)   return this;\n  return new Std(_getterMinLevel,_isGetterMinLevel,_setterMinLevel,v,_fieldMinLevel);\n}",
    "begin_line": 353,
    "end_line": 357,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.withFieldVisibility#360",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.withFieldVisibility(Visibility)",
    "snippet": "@Override public Std withFieldVisibility(Visibility v){\n  if (v \u003d\u003d Visibility.DEFAULT)   v\u003dDEFAULT._fieldMinLevel;\n  if (_fieldMinLevel \u003d\u003d v)   return this;\n  return new Std(_getterMinLevel,_isGetterMinLevel,_setterMinLevel,_creatorMinLevel,v);\n}",
    "begin_line": 360,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isCreatorVisible#373",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(java.lang.reflect.Member)",
    "snippet": "@Override public boolean isCreatorVisible(Member m){\n  return _creatorMinLevel.isVisible(m);\n}",
    "begin_line": 373,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isCreatorVisible#378",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isCreatorVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "@Override public boolean isCreatorVisible(AnnotatedMember m){\n  return isCreatorVisible(m.getMember());\n}",
    "begin_line": 378,
    "end_line": 380,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isFieldVisible#383",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(java.lang.reflect.Field)",
    "snippet": "@Override public boolean isFieldVisible(Field f){\n  return _fieldMinLevel.isVisible(f);\n}",
    "begin_line": 383,
    "end_line": 385,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isFieldVisible#388",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isFieldVisible(com.fasterxml.jackson.databind.introspect.AnnotatedField)",
    "snippet": "@Override public boolean isFieldVisible(AnnotatedField f){\n  return isFieldVisible(f.getAnnotated());\n}",
    "begin_line": 388,
    "end_line": 390,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isGetterVisible#393",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override public boolean isGetterVisible(Method m){\n  return _getterMinLevel.isVisible(m);\n}",
    "begin_line": 393,
    "end_line": 395,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isGetterVisible#398",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override public boolean isGetterVisible(AnnotatedMethod m){\n  return isGetterVisible(m.getAnnotated());\n}",
    "begin_line": 398,
    "end_line": 400,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isIsGetterVisible#403",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override public boolean isIsGetterVisible(Method m){\n  return _isGetterMinLevel.isVisible(m);\n}",
    "begin_line": 403,
    "end_line": 405,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isIsGetterVisible#408",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isIsGetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override public boolean isIsGetterVisible(AnnotatedMethod m){\n  return isIsGetterVisible(m.getAnnotated());\n}",
    "begin_line": 408,
    "end_line": 410,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isSetterVisible#413",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(java.lang.reflect.Method)",
    "snippet": "@Override public boolean isSetterVisible(Method m){\n  return _setterMinLevel.isVisible(m);\n}",
    "begin_line": 413,
    "end_line": 415,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.isSetterVisible#418",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.isSetterVisible(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "@Override public boolean isSetterVisible(AnnotatedMethod m){\n  return isSetterVisible(m.getAnnotated());\n}",
    "begin_line": 418,
    "end_line": 420,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Std.toString#429",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/introspect/VisibilityChecker.java",
    "class_name": "com.fasterxml.jackson.databind.introspect.VisibilityChecker",
    "signature": "com.fasterxml.jackson.databind.introspect.VisibilityChecker.toString()",
    "snippet": "@Override public String toString(){\n  return String.format(\"[Visibility: getter\u003d%s,isGetter\u003d%s,setter\u003d%s,creator\u003d%s,field\u003d%s]\",_getterMinLevel,_isGetterMinLevel,_setterMinLevel,_creatorMinLevel,_fieldMinLevel);\n}",
    "begin_line": 429,
    "end_line": 432,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.NamedType#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(java.lang.Class\u003c?\u003e)",
    "snippet": "public NamedType(Class\u003c?\u003e c){\n  this(c,null);\n}",
    "begin_line": 16,
    "end_line": 16,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.NamedType#18",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.NamedType(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public NamedType(Class\u003c?\u003e c,String name){\n  _class\u003dc;\n  _hashCode\u003dc.getName().hashCode();\n  setName(name);\n}",
    "begin_line": 18,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getType#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.getType()",
    "snippet": "public Class\u003c?\u003e getType(){\n  return _class;\n}",
    "begin_line": 24,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.getName#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.getName()",
    "snippet": "public String getName(){\n  return _name;\n}",
    "begin_line": 25,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.setName#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.setName(java.lang.String)",
    "snippet": "public void setName(String name){\n  _name\u003d(name \u003d\u003d null || name.length() \u003d\u003d 0) ? null : name;\n}",
    "begin_line": 26,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hasName#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.hasName()",
    "snippet": "public boolean hasName(){\n  return _name !\u003d null;\n}",
    "begin_line": 28,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.equals#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  return _class \u003d\u003d ((NamedType)o)._class;\n}",
    "begin_line": 34,
    "end_line": 39,
    "comment": "/** \n * Equality is defined based on class only, not on name\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.hashCode#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _hashCode;\n}",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NamedType.toString#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/NamedType.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.NamedType",
    "signature": "com.fasterxml.jackson.databind.jsontype.NamedType.toString()",
    "snippet": "@Override public String toString(){\n  return \"[NamedType, class \" + _class.getName() + \", name: \"+ (_name \u003d\u003d null ? \"null\" : (\"\u0027\" + _name + \"\u0027\"))+ \"]\";\n}",
    "begin_line": 45,
    "end_line": 48,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.registerSubtypes#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "public abstract void registerSubtypes(NamedType... types);",
    "begin_line": 28,
    "end_line": 28,
    "comment": "/** \n * Method for registering specified subtypes (possibly including type names); for type entries without name, non-qualified class name as used as name (unless overridden by annotation).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.registerSubtypes#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "public abstract void registerSubtypes(Class\u003c?\u003e... classes);",
    "begin_line": 30,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.registerSubtypes#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.registerSubtypes(java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "public abstract void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes);",
    "begin_line": 35,
    "end_line": 35,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByClass#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,AnnotatedMember property,JavaType baseType){\n  return collectAndResolveSubtypes(property,config,config.getAnnotationIntrospector(),baseType);\n}",
    "begin_line": 55,
    "end_line": 60,
    "comment": "/** \n * Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type, typically needed for serialization (converting from type to type name).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByClass#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,AnnotatedClass baseType){\n  return collectAndResolveSubtypes(baseType,config,config.getAnnotationIntrospector());\n}",
    "begin_line": 73,
    "end_line": 77,
    "comment": "/** \n * Method for finding out all reachable subtypes for given type, such that access is by type, typically needed for serialization (converting from type to type name).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByTypeId#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,AnnotatedMember property,JavaType baseType){\n  return collectAndResolveSubtypes(property,config,config.getAnnotationIntrospector(),baseType);\n}",
    "begin_line": 91,
    "end_line": 96,
    "comment": "/** \n * Method for finding out all reachable subtypes for a property specified by given element (method or field), such that access is by type id, typically needed for deserialization (converting from type id to type).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypesByTypeId#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,AnnotatedClass baseType){\n  return collectAndResolveSubtypes(baseType,config,config.getAnnotationIntrospector());\n}",
    "begin_line": 109,
    "end_line": 113,
    "comment": "/** \n * Method for finding out all reachable subtypes for given type, such that access is by type id, typically needed for deserialization (converting from type id to type).\n * @param baseType Effective property base type to use; may differ fromactual type of property; for structured types it is content (value) type and NOT structured type.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypes#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public Collection\u003cNamedType\u003e collectAndResolveSubtypes(AnnotatedMember property,MapperConfig\u003c?\u003e config,AnnotationIntrospector ai,JavaType baseType){\n  return collectAndResolveSubtypesByClass(config,property,baseType);\n}",
    "begin_line": 128,
    "end_line": 131,
    "comment": "/** \n * @deprecated Since 2.6 Use either{@link #collectAndResolveSubtypesByClass(MapperConfig,AnnotatedMember,JavaType)}or  {@link #collectAndResolveSubtypesByTypeId(MapperConfig,AnnotatedMember,JavaType)}instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubtypeResolver.collectAndResolveSubtypes#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/SubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.SubtypeResolver.collectAndResolveSubtypes(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector)",
    "snippet": "@Deprecated public Collection\u003cNamedType\u003e collectAndResolveSubtypes(AnnotatedClass baseType,MapperConfig\u003c?\u003e config,AnnotationIntrospector ai){\n  return collectAndResolveSubtypesByClass(config,baseType);\n}",
    "begin_line": 140,
    "end_line": 143,
    "comment": "/** \n * @deprecated Since 2.6 Use either{@link #collectAndResolveSubtypesByClass(MapperConfig,AnnotatedClass)}or  {@link #collectAndResolveSubtypesByTypeId(MapperConfig,AnnotatedClass)}instead.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.forProperty#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public abstract TypeDeserializer forProperty(BeanProperty prop);",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * Method called to create contextual version, to be used for values of given property. This may be the type itself (as is the case for bean properties), or values contained (for  {@link java.util.Collection} or {@link java.util.Map}valued properties).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.getTypeInclusion#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeInclusion()",
    "snippet": "public abstract As getTypeInclusion();",
    "begin_line": 52,
    "end_line": 52,
    "comment": "/** \n * Accessor for type information inclusion method that deserializer uses; indicates how type information is (expected to be) embedded in JSON input.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.getPropertyName#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getPropertyName()",
    "snippet": "public abstract String getPropertyName();",
    "begin_line": 58,
    "end_line": 58,
    "comment": "/** \n * Name of property that contains type information, if property-based inclusion is used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.getTypeIdResolver#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getTypeIdResolver()",
    "snippet": "public abstract TypeIdResolver getTypeIdResolver();",
    "begin_line": 64,
    "end_line": 64,
    "comment": "/** \n * Accessor for object that handles conversions between types and matching type ids.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.getDefaultImpl#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.getDefaultImpl()",
    "snippet": "public abstract Class\u003c?\u003e getDefaultImpl();",
    "begin_line": 72,
    "end_line": 72,
    "comment": "/** \n * Accessor for \"default implementation\" type; optionally defined class to use in cases where type id is not accessible for some reason (either missing, or cannot be resolved)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeTypedFromObject#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract Object deserializeTypedFromObject(JsonParser p,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 89,
    "end_line": 89,
    "comment": "/** \n * Method called to let this type deserializer handle  deserialization of \"typed\" object, when value itself is serialized as JSON Object (regardless of Java type). Method needs to figure out intended polymorphic type, locate  {@link JsonDeserializer} to use, andcall it with JSON data to deserializer (which does not contain type information).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeTypedFromArray#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract Object deserializeTypedFromArray(JsonParser p,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 100,
    "end_line": 100,
    "comment": "/** \n * Method called to let this type deserializer handle  deserialization of \"typed\" object, when value itself is serialized as JSON Array (regardless of Java type). Method needs to figure out intended polymorphic type, locate  {@link JsonDeserializer} to use, andcall it with JSON data to deserializer (which does not contain type information).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeTypedFromScalar#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromScalar(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract Object deserializeTypedFromScalar(JsonParser p,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 112,
    "end_line": 112,
    "comment": "/** \n * Method called to let this type deserializer handle  deserialization of \"typed\" object, when value itself is serialized as a scalar JSON value (something other than Array or Object), regardless of Java type. Method needs to figure out intended polymorphic type, locate  {@link JsonDeserializer} to use, andcall it with JSON data to deserializer (which does not contain type information).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeTypedFromAny#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeTypedFromAny(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "public abstract Object deserializeTypedFromAny(JsonParser p,DeserializationContext ctxt) throws IOException ;",
    "begin_line": 123,
    "end_line": 123,
    "comment": "/** \n * Method called to let this type deserializer handle  deserialization of \"typed\" object, when value itself may have been serialized using any kind of JSON value (Array, Object, scalar). Should only be called if JSON serialization is polymorphic (not Java type); for example when using JSON node representation, or \"untyped\" Java object (which may be Map, Collection, wrapper/primitive etc).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeIfNatural#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static Object deserializeIfNatural(JsonParser p,DeserializationContext ctxt,JavaType baseType) throws IOException {\n  return deserializeIfNatural(p,ctxt,baseType.getRawClass());\n}",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Helper method used to check if given parser might be pointing to a \"natural\" value, and one that would be acceptable as the result value (compatible with declared base type)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializer.deserializeIfNatural#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/TypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.TypeDeserializer.deserializeIfNatural(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Class\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"incomplete-switch\") public static Object deserializeIfNatural(JsonParser p,DeserializationContext ctxt,Class\u003c?\u003e base) throws IOException {\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d null) {\n    return null;\n  }\nswitch (t) {\ncase VALUE_STRING:    if (base.isAssignableFrom(String.class)) {\n      return p.getText();\n    }\n  break;\ncase VALUE_NUMBER_INT:if (base.isAssignableFrom(Integer.class)) {\n  return p.getIntValue();\n}\nbreak;\ncase VALUE_NUMBER_FLOAT:if (base.isAssignableFrom(Double.class)) {\nreturn Double.valueOf(p.getDoubleValue());\n}\nbreak;\ncase VALUE_TRUE:if (base.isAssignableFrom(Boolean.class)) {\nreturn Boolean.TRUE;\n}\nbreak;\ncase VALUE_FALSE:if (base.isAssignableFrom(Boolean.class)) {\nreturn Boolean.FALSE;\n}\nbreak;\n}\nreturn null;\n}",
    "begin_line": 141,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.AsArrayTypeDeserializer#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.AsArrayTypeDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public AsArrayTypeDeserializer(JavaType bt,TypeIdResolver idRes,String typePropertyName,boolean typeIdVisible,JavaType defaultImpl){\n  super(bt,idRes,typePropertyName,typeIdVisible,defaultImpl);\n}",
    "begin_line": 29,
    "end_line": 33,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.AsArrayTypeDeserializer#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.AsArrayTypeDeserializer(com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public AsArrayTypeDeserializer(AsArrayTypeDeserializer src,BeanProperty property){\n  super(src,property);\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.forProperty#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public TypeDeserializer forProperty(BeanProperty prop){\n  return (prop \u003d\u003d _property) ? this : new AsArrayTypeDeserializer(this,prop);\n}",
    "begin_line": 40,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.getTypeInclusion#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.getTypeInclusion()",
    "snippet": "@Override public As getTypeInclusion(){\n  return As.WRAPPER_ARRAY;\n}",
    "begin_line": 46,
    "end_line": 46,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.deserializeTypedFromArray#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromArray(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeTypedFromArray(JsonParser jp,DeserializationContext ctxt) throws IOException {\n  return _deserialize(jp,ctxt);\n}",
    "begin_line": 52,
    "end_line": 54,
    "comment": "/** \n * Method called when actual object is serialized as JSON Array.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.deserializeTypedFromObject#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeTypedFromObject(JsonParser jp,DeserializationContext ctxt) throws IOException {\n  return _deserialize(jp,ctxt);\n}",
    "begin_line": 60,
    "end_line": 62,
    "comment": "/** \n * Method called when actual object is serialized as JSON Object\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.deserializeTypedFromScalar#65",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromScalar(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeTypedFromScalar(JsonParser jp,DeserializationContext ctxt) throws IOException {\n  return _deserialize(jp,ctxt);\n}",
    "begin_line": 65,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer.deserializeTypedFromAny#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer.deserializeTypedFromAny(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeTypedFromAny(JsonParser jp,DeserializationContext ctxt) throws IOException {\n  return _deserialize(jp,ctxt);\n}",
    "begin_line": 70,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer._deserialize#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._deserialize(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object _deserialize(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.canReadTypeId()) {\n    Object typeId\u003dp.getTypeId();\n    if (typeId !\u003d null) {\n      return _deserializeWithNativeTypeId(p,ctxt,typeId);\n    }\n  }\n  boolean hadStartArray\u003dp.isExpectedStartArrayToken();\n  String typeId\u003d_locateTypeId(p,ctxt);\n  JsonDeserializer\u003cObject\u003e deser\u003d_findDeserializer(ctxt,typeId);\n  if (_typeIdVisible \u0026\u0026 !_usesExternalId() \u0026\u0026 p.getCurrentToken() \u003d\u003d JsonToken.START_OBJECT) {\n    TokenBuffer tb\u003dnew TokenBuffer(null,false);\n    tb.writeStartObject();\n    tb.writeFieldName(_typePropertyName);\n    tb.writeString(typeId);\n    p.clearCurrentToken();\n    p\u003dJsonParserSequence.createFlattened(false,tb.asParser(p),p);\n    p.nextToken();\n  }\n  Object value\u003ddeser.deserialize(p,ctxt);\n  if (hadStartArray \u0026\u0026 p.nextToken() !\u003d JsonToken.END_ARRAY) {\n    ctxt.reportWrongTokenException(baseType(),JsonToken.END_ARRAY,\"expected closing END_ARRAY after type information and deserialized value\");\n  }\n  return value;\n}",
    "begin_line": 86,
    "end_line": 127,
    "comment": "/** \n * Method that handles type information wrapper, locates actual subtype deserializer to use, and calls it to do actual deserialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer._locateTypeId#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._locateTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected String _locateTypeId(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (!p.isExpectedStartArrayToken()) {\n    if (_defaultImpl !\u003d null) {\n      return _idResolver.idFromBaseType();\n    }\n    ctxt.reportWrongTokenException(baseType(),JsonToken.START_ARRAY,\"need JSON Array to contain As.WRAPPER_ARRAY type information for class \" + baseTypeName());\n    return null;\n  }\n  JsonToken t\u003dp.nextToken();\n  if (t \u003d\u003d JsonToken.VALUE_STRING) {\n    String result\u003dp.getText();\n    p.nextToken();\n    return result;\n  }\n  if (_defaultImpl !\u003d null) {\n    return _idResolver.idFromBaseType();\n  }\n  ctxt.reportWrongTokenException(baseType(),JsonToken.VALUE_STRING,\"need JSON String that contains type id (for subtype of %s)\",baseTypeName());\n  return null;\n}",
    "begin_line": 129,
    "end_line": 154,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsArrayTypeDeserializer._usesExternalId#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsArrayTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsArrayTypeDeserializer._usesExternalId()",
    "snippet": "protected boolean _usesExternalId(){\n  return false;\n}",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.AsPropertyTypeDeserializer#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.AsPropertyTypeDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public AsPropertyTypeDeserializer(JavaType bt,TypeIdResolver idRes,String typePropertyName,boolean typeIdVisible,JavaType defaultImpl){\n  this(bt,idRes,typePropertyName,typeIdVisible,defaultImpl,As.PROPERTY);\n}",
    "begin_line": 30,
    "end_line": 34,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.AsPropertyTypeDeserializer#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.AsPropertyTypeDeserializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String, boolean, com.fasterxml.jackson.databind.JavaType, As)",
    "snippet": "public AsPropertyTypeDeserializer(JavaType bt,TypeIdResolver idRes,String typePropertyName,boolean typeIdVisible,JavaType defaultImpl,As inclusion){\n  super(bt,idRes,typePropertyName,typeIdVisible,defaultImpl);\n  _inclusion\u003dinclusion;\n}",
    "begin_line": 39,
    "end_line": 45,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.AsPropertyTypeDeserializer#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.AsPropertyTypeDeserializer(com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src,BeanProperty property){\n  super(src,property);\n  _inclusion\u003dsrc._inclusion;\n}",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.forProperty#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public TypeDeserializer forProperty(BeanProperty prop){\n  return (prop \u003d\u003d _property) ? this : new AsPropertyTypeDeserializer(this,prop);\n}",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.getTypeInclusion#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.getTypeInclusion()",
    "snippet": "@Override public As getTypeInclusion(){\n  return _inclusion;\n}",
    "begin_line": 58,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.deserializeTypedFromObject#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromObject(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override @SuppressWarnings(\"resource\") public Object deserializeTypedFromObject(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.canReadTypeId()) {\n    Object typeId\u003dp.getTypeId();\n    if (typeId !\u003d null) {\n      return _deserializeWithNativeTypeId(p,ctxt,typeId);\n    }\n  }\n  JsonToken t\u003dp.getCurrentToken();\n  if (t \u003d\u003d JsonToken.START_OBJECT) {\n    t\u003dp.nextToken();\n  }\n else   if (t !\u003d JsonToken.FIELD_NAME) {\n    return _deserializeTypedUsingDefaultImpl(p,ctxt,null);\n  }\n  TokenBuffer tb\u003dnull;\n  for (; t \u003d\u003d JsonToken.FIELD_NAME; t\u003dp.nextToken()) {\n    String name\u003dp.getCurrentName();\n    p.nextToken();\n    if (name.equals(_typePropertyName)) {\n      return _deserializeTypedForId(p,ctxt,tb);\n    }\n    if (tb \u003d\u003d null) {\n      tb\u003dnew TokenBuffer(p,ctxt);\n    }\n    tb.writeFieldName(name);\n    tb.copyCurrentStructure(p);\n  }\n  return _deserializeTypedUsingDefaultImpl(p,ctxt,tb);\n}",
    "begin_line": 66,
    "end_line": 106,
    "comment": "/** \n * This is the trickiest thing to handle, since property we are looking for may be anywhere...\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer._deserializeTypedForId#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedForId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.util.TokenBuffer)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object _deserializeTypedForId(JsonParser p,DeserializationContext ctxt,TokenBuffer tb) throws IOException {\n  String typeId\u003dp.getText();\n  JsonDeserializer\u003cObject\u003e deser\u003d_findDeserializer(ctxt,typeId);\n  if (_typeIdVisible) {\n    if (tb \u003d\u003d null) {\n      tb\u003dnew TokenBuffer(p,ctxt);\n    }\n    tb.writeFieldName(p.getCurrentName());\n    tb.writeString(typeId);\n  }\n  if (tb !\u003d null) {\n    p.clearCurrentToken();\n    p\u003dJsonParserSequence.createFlattened(false,tb.asParser(p),p);\n  }\n  p.nextToken();\n  return deser.deserialize(p,ctxt);\n}",
    "begin_line": 109,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer._deserializeTypedUsingDefaultImpl(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.util.TokenBuffer)",
    "snippet": "@SuppressWarnings(\"resource\") protected Object _deserializeTypedUsingDefaultImpl(JsonParser p,DeserializationContext ctxt,TokenBuffer tb) throws IOException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_findDefaultImplDeserializer(ctxt);\n  if (deser \u003d\u003d null) {\n    Object result\u003dTypeDeserializer.deserializeIfNatural(p,ctxt,_baseType);\n    if (result !\u003d null) {\n      return result;\n    }\n    if (p.isExpectedStartArrayToken()) {\n      return super.deserializeTypedFromAny(p,ctxt);\n    }\n    if (p.hasToken(JsonToken.VALUE_STRING)) {\n      if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n        String str\u003dp.getText().trim();\n        if (str.isEmpty()) {\n          return null;\n        }\n      }\n    }\n    String msg\u003dString.format(\"missing type id property \u0027%s\u0027\",_typePropertyName);\n    if (_property !\u003d null) {\n      msg\u003dString.format(\"%s (for POJO property \u0027%s\u0027)\",msg,_property.getName());\n    }\n    JavaType t\u003d_handleMissingTypeId(ctxt,msg);\n    if (t \u003d\u003d null) {\n      return null;\n    }\n    deser\u003dctxt.findContextualValueDeserializer(t,_property);\n  }\n  if (tb !\u003d null) {\n    tb.writeEndObject();\n    p\u003dtb.asParser(p);\n    p.nextToken();\n  }\n  return deser.deserialize(p,ctxt);\n}",
    "begin_line": 135,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsPropertyTypeDeserializer.deserializeTypedFromAny#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer.deserializeTypedFromAny(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Override public Object deserializeTypedFromAny(JsonParser p,DeserializationContext ctxt) throws IOException {\n  if (p.getCurrentToken() \u003d\u003d JsonToken.START_ARRAY) {\n    return super.deserializeTypedFromArray(p,ctxt);\n  }\n  return deserializeTypedFromObject(p,ctxt);\n}",
    "begin_line": 186,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.ClassNameIdResolver#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.ClassNameIdResolver(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public ClassNameIdResolver(JavaType baseType,TypeFactory typeFactory){\n  super(baseType,typeFactory);\n}",
    "begin_line": 21,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.getMechanism#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.getMechanism()",
    "snippet": "@Override public JsonTypeInfo.Id getMechanism(){\n  return JsonTypeInfo.Id.CLASS;\n}",
    "begin_line": 26,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.registerSubtype#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.registerSubtype(java.lang.Class\u003c?\u003e, java.lang.String)",
    "snippet": "public void registerSubtype(Class\u003c?\u003e type,String name){\n}",
    "begin_line": 28,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.idFromValue#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.idFromValue(java.lang.Object)",
    "snippet": "@Override public String idFromValue(Object value){\n  return _idFrom(value,value.getClass(),_typeFactory);\n}",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.idFromValueAndType#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.idFromValueAndType(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public String idFromValueAndType(Object value,Class\u003c?\u003e type){\n  return _idFrom(value,type,_typeFactory);\n}",
    "begin_line": 38,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.typeFromId#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)",
    "snippet": "@Override public JavaType typeFromId(DatabindContext context,String id) throws IOException {\n  return _typeFromId(id,context);\n}",
    "begin_line": 43,
    "end_line": 45,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver._typeFromId#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._typeFromId(java.lang.String, com.fasterxml.jackson.databind.DatabindContext)",
    "snippet": "protected JavaType _typeFromId(String id,DatabindContext ctxt) throws IOException {\n  JavaType t\u003dctxt.resolveSubType(_baseType,id);\n  if (t \u003d\u003d null) {\n    if (ctxt instanceof DeserializationContext) {\n      return ((DeserializationContext)ctxt).handleUnknownTypeId(_baseType,id,this,\"no such class found\");\n    }\n  }\n  return t;\n}",
    "begin_line": 47,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver._idFrom#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver._idFrom(java.lang.Object, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "protected String _idFrom(Object value,Class\u003c?\u003e cls,TypeFactory typeFactory){\n  if (Enum.class.isAssignableFrom(cls)) {\n    if (!cls.isEnum()) {\n      cls\u003dcls.getSuperclass();\n    }\n  }\n  String str\u003dcls.getName();\n  if (str.startsWith(JAVA_UTIL_PKG)) {\n    if (value instanceof EnumSet\u003c?\u003e) {\n      Class\u003c?\u003e enumClass\u003dClassUtil.findEnumType((EnumSet\u003c?\u003e)value);\n      str\u003dtypeFactory.constructCollectionType(EnumSet.class,enumClass).toCanonical();\n    }\n else     if (value instanceof EnumMap\u003c?,?\u003e) {\n      Class\u003c?\u003e enumClass\u003dClassUtil.findEnumType((EnumMap\u003c?,?\u003e)value);\n      Class\u003c?\u003e valueClass\u003dObject.class;\n      str\u003dtypeFactory.constructMapType(EnumMap.class,enumClass,valueClass).toCanonical();\n    }\n  }\n else   if (str.indexOf(\u0027$\u0027) \u003e\u003d 0) {\n    Class\u003c?\u003e outer\u003dClassUtil.getOuterClass(cls);\n    if (outer !\u003d null) {\n      Class\u003c?\u003e staticType\u003d_baseType.getRawClass();\n      if (ClassUtil.getOuterClass(staticType) \u003d\u003d null) {\n        cls\u003d_baseType.getRawClass();\n        str\u003dcls.getName();\n      }\n    }\n  }\n  return str;\n}",
    "begin_line": 66,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassNameIdResolver.getDescForKnownTypeIds#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver.getDescForKnownTypeIds()",
    "snippet": "@Override public String getDescForKnownTypeIds(){\n  return \"class name used as type id\";\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.StdSubtypeResolver#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.StdSubtypeResolver()",
    "snippet": "public StdSubtypeResolver(){\n}",
    "begin_line": 24,
    "end_line": 24,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.registerSubtypes#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.registerSubtypes(com.fasterxml.jackson.databind.jsontype.NamedType)",
    "snippet": "@Override public void registerSubtypes(NamedType... types){\n  if (_registeredSubtypes \u003d\u003d null) {\n    _registeredSubtypes\u003dnew LinkedHashSet\u003cNamedType\u003e();\n  }\n  for (  NamedType type : types) {\n    _registeredSubtypes.add(type);\n  }\n}",
    "begin_line": 33,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.registerSubtypes#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.registerSubtypes(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public void registerSubtypes(Class\u003c?\u003e... classes){\n  NamedType[] types\u003dnew NamedType[classes.length];\n  for (int i\u003d0, len\u003dclasses.length; i \u003c len; ++i) {\n    types[i]\u003dnew NamedType(classes[i]);\n  }\n  registerSubtypes(types);\n}",
    "begin_line": 43,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.registerSubtypes#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.registerSubtypes(java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Override public void registerSubtypes(Collection\u003cClass\u003c?\u003e\u003e subtypes){\n  int len\u003dsubtypes.size();\n  NamedType[] types\u003dnew NamedType[len];\n  int i\u003d0;\n  for (  Class\u003c?\u003e subtype : subtypes) {\n    types[i++]\u003dnew NamedType(subtype);\n  }\n  registerSubtypes(types);\n}",
    "begin_line": 52,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByClass#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,AnnotatedMember property,JavaType baseType){\n  final AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  Class\u003c?\u003e rawBase\u003d(baseType \u003d\u003d null) ? property.getRawType() : baseType.getRawClass();\n  HashMap\u003cNamedType,NamedType\u003e collected\u003dnew HashMap\u003cNamedType,NamedType\u003e();\n  if (_registeredSubtypes !\u003d null) {\n    for (    NamedType subtype : _registeredSubtypes) {\n      if (rawBase.isAssignableFrom(subtype.getType())) {\n        AnnotatedClass curr\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n        _collectAndResolve(curr,subtype,config,ai,collected);\n      }\n    }\n  }\n  if (property !\u003d null) {\n    Collection\u003cNamedType\u003e st\u003dai.findSubtypes(property);\n    if (st !\u003d null) {\n      for (      NamedType nt : st) {\n        AnnotatedClass ac\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,nt.getType());\n        _collectAndResolve(ac,nt,config,ai,collected);\n      }\n    }\n  }\n  NamedType rootType\u003dnew NamedType(rawBase,null);\n  AnnotatedClass ac\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,rawBase);\n  _collectAndResolve(ac,rootType,config,ai,collected);\n  return new ArrayList\u003cNamedType\u003e(collected.values());\n}",
    "begin_line": 69,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByClass#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByClass(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Collection\u003cNamedType\u003e collectAndResolveSubtypesByClass(MapperConfig\u003c?\u003e config,AnnotatedClass type){\n  final AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  HashMap\u003cNamedType,NamedType\u003e subtypes\u003dnew HashMap\u003cNamedType,NamedType\u003e();\n  if (_registeredSubtypes !\u003d null) {\n    Class\u003c?\u003e rawBase\u003dtype.getRawType();\n    for (    NamedType subtype : _registeredSubtypes) {\n      if (rawBase.isAssignableFrom(subtype.getType())) {\n        AnnotatedClass curr\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n        _collectAndResolve(curr,subtype,config,ai,subtypes);\n      }\n    }\n  }\n  NamedType rootType\u003dnew NamedType(type.getRawType(),null);\n  _collectAndResolve(type,rootType,config,ai,subtypes);\n  return new ArrayList\u003cNamedType\u003e(subtypes.values());\n}",
    "begin_line": 111,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByTypeId#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedMember, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,AnnotatedMember property,JavaType baseType){\n  final AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  Class\u003c?\u003e rawBase\u003dbaseType.getRawClass();\n  Set\u003cClass\u003c?\u003e\u003e typesHandled\u003dnew HashSet\u003cClass\u003c?\u003e\u003e();\n  Map\u003cString,NamedType\u003e byName\u003dnew LinkedHashMap\u003cString,NamedType\u003e();\n  NamedType rootType\u003dnew NamedType(rawBase,null);\n  AnnotatedClass ac\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,rawBase);\n  _collectAndResolveByTypeId(ac,rootType,config,typesHandled,byName);\n  if (property !\u003d null) {\n    Collection\u003cNamedType\u003e st\u003dai.findSubtypes(property);\n    if (st !\u003d null) {\n      for (      NamedType nt : st) {\n        ac\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,nt.getType());\n        _collectAndResolveByTypeId(ac,nt,config,typesHandled,byName);\n      }\n    }\n  }\n  if (_registeredSubtypes !\u003d null) {\n    for (    NamedType subtype : _registeredSubtypes) {\n      if (rawBase.isAssignableFrom(subtype.getType())) {\n        AnnotatedClass curr\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n        _collectAndResolveByTypeId(curr,subtype,config,typesHandled,byName);\n      }\n    }\n  }\n  return _combineNamedAndUnnamed(rawBase,typesHandled,byName);\n}",
    "begin_line": 141,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver.collectAndResolveSubtypesByTypeId#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver.collectAndResolveSubtypesByTypeId(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.introspect.AnnotatedClass)",
    "snippet": "@Override public Collection\u003cNamedType\u003e collectAndResolveSubtypesByTypeId(MapperConfig\u003c?\u003e config,AnnotatedClass baseType){\n  final Class\u003c?\u003e rawBase\u003dbaseType.getRawType();\n  Set\u003cClass\u003c?\u003e\u003e typesHandled\u003dnew HashSet\u003cClass\u003c?\u003e\u003e();\n  Map\u003cString,NamedType\u003e byName\u003dnew LinkedHashMap\u003cString,NamedType\u003e();\n  NamedType rootType\u003dnew NamedType(rawBase,null);\n  _collectAndResolveByTypeId(baseType,rootType,config,typesHandled,byName);\n  if (_registeredSubtypes !\u003d null) {\n    for (    NamedType subtype : _registeredSubtypes) {\n      if (rawBase.isAssignableFrom(subtype.getType())) {\n        AnnotatedClass curr\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n        _collectAndResolveByTypeId(curr,subtype,config,typesHandled,byName);\n      }\n    }\n  }\n  return _combineNamedAndUnnamed(rawBase,typesHandled,byName);\n}",
    "begin_line": 182,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._collectAndResolve#215",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._collectAndResolve(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.AnnotationIntrospector, java.util.HashMap\u003ccom.fasterxml.jackson.databind.jsontype.NamedType,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected void _collectAndResolve(AnnotatedClass annotatedType,NamedType namedType,MapperConfig\u003c?\u003e config,AnnotationIntrospector ai,HashMap\u003cNamedType,NamedType\u003e collectedSubtypes){\n  if (!namedType.hasName()) {\n    String name\u003dai.findTypeName(annotatedType);\n    if (name !\u003d null) {\n      namedType\u003dnew NamedType(namedType.getType(),name);\n    }\n  }\n  if (collectedSubtypes.containsKey(namedType)) {\n    if (namedType.hasName()) {\n      NamedType prev\u003dcollectedSubtypes.get(namedType);\n      if (!prev.hasName()) {\n        collectedSubtypes.put(namedType,namedType);\n      }\n    }\n    return;\n  }\n  collectedSubtypes.put(namedType,namedType);\n  Collection\u003cNamedType\u003e st\u003dai.findSubtypes(annotatedType);\n  if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\n    for (    NamedType subtype : st) {\n      AnnotatedClass subtypeClass\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n      _collectAndResolve(subtypeClass,subtype,config,ai,collectedSubtypes);\n    }\n  }\n}",
    "begin_line": 215,
    "end_line": 247,
    "comment": "/** \n * Method called to find subtypes for a specific type (class), using type (class) as the unique key (in case of conflicts).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._collectAndResolveByTypeId#253",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._collectAndResolveByTypeId(com.fasterxml.jackson.databind.introspect.AnnotatedClass, com.fasterxml.jackson.databind.jsontype.NamedType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected void _collectAndResolveByTypeId(AnnotatedClass annotatedType,NamedType namedType,MapperConfig\u003c?\u003e config,Set\u003cClass\u003c?\u003e\u003e typesHandled,Map\u003cString,NamedType\u003e byName){\n  final AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  if (!namedType.hasName()) {\n    String name\u003dai.findTypeName(annotatedType);\n    if (name !\u003d null) {\n      namedType\u003dnew NamedType(namedType.getType(),name);\n    }\n  }\n  if (namedType.hasName()) {\n    byName.put(namedType.getName(),namedType);\n  }\n  if (typesHandled.add(namedType.getType())) {\n    Collection\u003cNamedType\u003e st\u003dai.findSubtypes(annotatedType);\n    if (st !\u003d null \u0026\u0026 !st.isEmpty()) {\n      for (      NamedType subtype : st) {\n        AnnotatedClass subtypeClass\u003dAnnotatedClassResolver.resolveWithoutSuperTypes(config,subtype.getType());\n        _collectAndResolveByTypeId(subtypeClass,subtype,config,typesHandled,byName);\n      }\n    }\n  }\n}",
    "begin_line": 253,
    "end_line": 279,
    "comment": "/** \n * Method called to find subtypes for a specific type (class), using type id as the unique key (in case of conflicts).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSubtypeResolver._combineNamedAndUnnamed#285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver._combineNamedAndUnnamed(java.lang.Class\u003c?\u003e, java.util.Set\u003cjava.lang.Class\u003c?\u003e\u003e, java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "protected Collection\u003cNamedType\u003e _combineNamedAndUnnamed(Class\u003c?\u003e rawBase,Set\u003cClass\u003c?\u003e\u003e typesHandled,Map\u003cString,NamedType\u003e byName){\n  ArrayList\u003cNamedType\u003e result\u003dnew ArrayList\u003cNamedType\u003e(byName.values());\n  for (  NamedType t : byName.values()) {\n    typesHandled.remove(t.getType());\n  }\n  for (  Class\u003c?\u003e cls : typesHandled) {\n    if ((cls \u003d\u003d rawBase) \u0026\u0026 Modifier.isAbstract(cls.getModifiers())) {\n      continue;\n    }\n    result.add(new NamedType(cls));\n  }\n  return result;\n}",
    "begin_line": 285,
    "end_line": 305,
    "comment": "/** \n * Helper method used for merging explicitly named types and handled classes without explicit names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.StdTypeResolverBuilder#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.StdTypeResolverBuilder()",
    "snippet": "public StdTypeResolverBuilder(){\n}",
    "begin_line": 47,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.StdTypeResolverBuilder#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.StdTypeResolverBuilder(JsonTypeInfo.Id, JsonTypeInfo.As, java.lang.String)",
    "snippet": "protected StdTypeResolverBuilder(JsonTypeInfo.Id idType,JsonTypeInfo.As idAs,String propName){\n  _idType\u003didType;\n  _includeAs\u003didAs;\n  _typeProperty\u003dpropName;\n}",
    "begin_line": 52,
    "end_line": 57,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.noTypeInfoBuilder#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.noTypeInfoBuilder()",
    "snippet": "public static StdTypeResolverBuilder noTypeInfoBuilder(){\n  return new StdTypeResolverBuilder().init(JsonTypeInfo.Id.NONE,null);\n}",
    "begin_line": 59,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.init#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.init(JsonTypeInfo.Id, com.fasterxml.jackson.databind.jsontype.TypeIdResolver)",
    "snippet": "@Override public StdTypeResolverBuilder init(JsonTypeInfo.Id idType,TypeIdResolver idRes){\n  if (idType \u003d\u003d null) {\n    throw new IllegalArgumentException(\"idType cannot be null\");\n  }\n  _idType\u003didType;\n  _customIdResolver\u003didRes;\n  _typeProperty\u003didType.getDefaultPropertyName();\n  return this;\n}",
    "begin_line": 64,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.buildTypeSerializer#78",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override public TypeSerializer buildTypeSerializer(SerializationConfig config,JavaType baseType,Collection\u003cNamedType\u003e subtypes){\n  if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n    return null;\n  }\n  if (baseType.isPrimitive()) {\n    return null;\n  }\n  TypeIdResolver idRes\u003didResolver(config,baseType,subtypes,true,false);\nswitch (_includeAs) {\ncase WRAPPER_ARRAY:    return new AsArrayTypeSerializer(idRes,null);\ncase PROPERTY:  return new AsPropertyTypeSerializer(idRes,null,_typeProperty);\ncase WRAPPER_OBJECT:return new AsWrapperTypeSerializer(idRes,null);\ncase EXTERNAL_PROPERTY:return new AsExternalTypeSerializer(idRes,null,_typeProperty);\ncase EXISTING_PROPERTY:return new AsExistingPropertyTypeSerializer(idRes,null,_typeProperty);\n}\nthrow new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
    "begin_line": 78,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.buildTypeDeserializer#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.buildTypeDeserializer(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e)",
    "snippet": "@Override public TypeDeserializer buildTypeDeserializer(DeserializationConfig config,JavaType baseType,Collection\u003cNamedType\u003e subtypes){\n  if (_idType \u003d\u003d JsonTypeInfo.Id.NONE) {\n    return null;\n  }\n  if (baseType.isPrimitive()) {\n    return null;\n  }\n  TypeIdResolver idRes\u003didResolver(config,baseType,subtypes,false,true);\n  JavaType defaultImpl\u003ddefineDefaultImpl(config,baseType);\nswitch (_includeAs) {\ncase WRAPPER_ARRAY:    return new AsArrayTypeDeserializer(baseType,idRes,_typeProperty,_typeIdVisible,defaultImpl);\ncase PROPERTY:case EXISTING_PROPERTY:  return new AsPropertyTypeDeserializer(baseType,idRes,_typeProperty,_typeIdVisible,defaultImpl,_includeAs);\ncase WRAPPER_OBJECT:return new AsWrapperTypeDeserializer(baseType,idRes,_typeProperty,_typeIdVisible,defaultImpl);\ncase EXTERNAL_PROPERTY:return new AsExternalTypeDeserializer(baseType,idRes,_typeProperty,_typeIdVisible,defaultImpl);\n}\nthrow new IllegalStateException(\"Do not know how to construct standard type serializer for inclusion type: \" + _includeAs);\n}",
    "begin_line": 111,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.defineDefaultImpl#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defineDefaultImpl(com.fasterxml.jackson.databind.DeserializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JavaType defineDefaultImpl(DeserializationConfig config,JavaType baseType){\n  JavaType defaultImpl;\n  if (_defaultImpl \u003d\u003d null) {\n    if (config.isEnabled(MapperFeature.USE_BASE_TYPE_AS_DEFAULT_IMPL) \u0026\u0026 !baseType.isAbstract()) {\n      defaultImpl\u003dbaseType;\n    }\n else {\n      defaultImpl\u003dnull;\n    }\n  }\n else {\n    if ((_defaultImpl \u003d\u003d Void.class) || (_defaultImpl \u003d\u003d NoClass.class)) {\n      defaultImpl\u003dconfig.getTypeFactory().constructType(_defaultImpl);\n    }\n else {\n      if (baseType.hasRawClass(_defaultImpl)) {\n        defaultImpl\u003dbaseType;\n      }\n else       if (baseType.isTypeOrSuperTypeOf(_defaultImpl)) {\n        defaultImpl\u003dconfig.getTypeFactory().constructSpecializedType(baseType,_defaultImpl);\n      }\n else {\n        defaultImpl\u003dnull;\n      }\n    }\n  }\n  return defaultImpl;\n}",
    "begin_line": 144,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.inclusion#195",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.inclusion(JsonTypeInfo.As)",
    "snippet": "@Override public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs){\n  if (includeAs \u003d\u003d null) {\n    throw new IllegalArgumentException(\"includeAs cannot be null\");\n  }\n  _includeAs\u003dincludeAs;\n  return this;\n}",
    "begin_line": 195,
    "end_line": 201,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.typeProperty#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.typeProperty(java.lang.String)",
    "snippet": "@Override public StdTypeResolverBuilder typeProperty(String typeIdPropName){\n  if (typeIdPropName \u003d\u003d null || typeIdPropName.length() \u003d\u003d 0) {\n    typeIdPropName\u003d_idType.getDefaultPropertyName();\n  }\n  _typeProperty\u003dtypeIdPropName;\n  return this;\n}",
    "begin_line": 208,
    "end_line": 215,
    "comment": "/** \n * Method for constructing an instance with specified type property name (property name to use for type id when using \"as-property\" inclusion).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.defaultImpl#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.defaultImpl(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public StdTypeResolverBuilder defaultImpl(Class\u003c?\u003e defaultImpl){\n  _defaultImpl\u003ddefaultImpl;\n  return this;\n}",
    "begin_line": 218,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.typeIdVisibility#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.typeIdVisibility(boolean)",
    "snippet": "@Override public StdTypeResolverBuilder typeIdVisibility(boolean isVisible){\n  _typeIdVisible\u003disVisible;\n  return this;\n}",
    "begin_line": 224,
    "end_line": 227,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.getDefaultImpl#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.getDefaultImpl()",
    "snippet": "@Override public Class\u003c?\u003e getDefaultImpl(){\n  return _defaultImpl;\n}",
    "begin_line": 235,
    "end_line": 235,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.getTypeProperty#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.getTypeProperty()",
    "snippet": "public String getTypeProperty(){\n  return _typeProperty;\n}",
    "begin_line": 237,
    "end_line": 237,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.isTypeIdVisible#238",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.isTypeIdVisible()",
    "snippet": "public boolean isTypeIdVisible(){\n  return _typeIdVisible;\n}",
    "begin_line": 238,
    "end_line": 238,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdTypeResolverBuilder.idResolver#251",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/StdTypeResolverBuilder.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder.idResolver(com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, java.util.Collection\u003ccom.fasterxml.jackson.databind.jsontype.NamedType\u003e, boolean, boolean)",
    "snippet": "protected TypeIdResolver idResolver(MapperConfig\u003c?\u003e config,JavaType baseType,Collection\u003cNamedType\u003e subtypes,boolean forSer,boolean forDeser){\n  if (_customIdResolver !\u003d null) {\n    return _customIdResolver;\n  }\n  if (_idType \u003d\u003d null)   throw new IllegalStateException(\"Cannot build, \u0027init()\u0027 not yet called\");\nswitch (_idType) {\ncase CLASS:    return new ClassNameIdResolver(baseType,config.getTypeFactory());\ncase MINIMAL_CLASS:  return new MinimalClassNameIdResolver(baseType,config.getTypeFactory());\ncase NAME:return TypeNameIdResolver.construct(config,baseType,subtypes,forSer,forDeser);\ncase NONE:return null;\ncase CUSTOM:}\nthrow new IllegalStateException(\"Do not know how to construct standard type id resolver for idType: \" + _idType);\n}",
    "begin_line": 251,
    "end_line": 269,
    "comment": "/** \n * Helper method that will either return configured custom type id resolver, or construct a standard resolver given configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubTypeValidator.SubTypeValidator#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.SubTypeValidator()",
    "snippet": "protected SubTypeValidator(){\n}",
    "begin_line": 93,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubTypeValidator.instance#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.instance()",
    "snippet": "public static SubTypeValidator instance(){\n  return instance;\n}",
    "begin_line": 95,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SubTypeValidator.validateSubType#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator.validateSubType(com.fasterxml.jackson.databind.DeserializationContext, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public void validateSubType(DeserializationContext ctxt,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  final Class\u003c?\u003e raw\u003dtype.getRawClass();\n  String full\u003draw.getName();\n  main_check:   do {\n    if (_cfgIllegalClassNames.contains(full)) {\n      break;\n    }\n    if (raw.isInterface()) {\n      ;\n    }\n else     if (full.startsWith(PREFIX_SPRING)) {\n      for (Class\u003c?\u003e cls\u003draw; (cls !\u003d null) \u0026\u0026 (cls !\u003d Object.class); cls\u003dcls.getSuperclass()) {\n        String name\u003dcls.getSimpleName();\n        if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) {\n          break main_check;\n        }\n      }\n    }\n else     if (full.startsWith(PREFIX_C3P0)) {\n      if (full.endsWith(\"DataSource\")) {\n        break main_check;\n      }\n    }\n    return;\n  }\n while (false);\n  ctxt.reportBadTypeDefinition(beanDesc,\"Illegal type (%s) to deserialize: prevented for security reasons\",full);\n}",
    "begin_line": 97,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.TypeDeserializerBase#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.TypeDeserializerBase(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsontype.TypeIdResolver, java.lang.String, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected TypeDeserializerBase(JavaType baseType,TypeIdResolver idRes,String typePropertyName,boolean typeIdVisible,JavaType defaultImpl){\n  _baseType\u003dbaseType;\n  _idResolver\u003didRes;\n  _typePropertyName\u003dClassUtil.nonNullString(typePropertyName);\n  _typeIdVisible\u003dtypeIdVisible;\n  _deserializers\u003dnew ConcurrentHashMap\u003cString,JsonDeserializer\u003cObject\u003e\u003e(16,0.75f,2);\n  _defaultImpl\u003ddefaultImpl;\n  _property\u003dnull;\n}",
    "begin_line": 72,
    "end_line": 83,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.TypeDeserializerBase#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.TypeDeserializerBase(com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "protected TypeDeserializerBase(TypeDeserializerBase src,BeanProperty property){\n  _baseType\u003dsrc._baseType;\n  _idResolver\u003dsrc._idResolver;\n  _typePropertyName\u003dsrc._typePropertyName;\n  _typeIdVisible\u003dsrc._typeIdVisible;\n  _deserializers\u003dsrc._deserializers;\n  _defaultImpl\u003dsrc._defaultImpl;\n  _defaultImplDeserializer\u003dsrc._defaultImplDeserializer;\n  _property\u003dproperty;\n}",
    "begin_line": 85,
    "end_line": 95,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.forProperty#98",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.forProperty(com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public abstract TypeDeserializer forProperty(BeanProperty prop);",
    "begin_line": 98,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.getTypeInclusion#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getTypeInclusion()",
    "snippet": "@Override public abstract JsonTypeInfo.As getTypeInclusion();",
    "begin_line": 107,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.baseTypeName#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.baseTypeName()",
    "snippet": "public String baseTypeName(){\n  return _baseType.getRawClass().getName();\n}",
    "begin_line": 109,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.getPropertyName#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getPropertyName()",
    "snippet": "@Override public final String getPropertyName(){\n  return _typePropertyName;\n}",
    "begin_line": 112,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.getTypeIdResolver#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getTypeIdResolver()",
    "snippet": "@Override public TypeIdResolver getTypeIdResolver(){\n  return _idResolver;\n}",
    "begin_line": 115,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.getDefaultImpl#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.getDefaultImpl()",
    "snippet": "@Override public Class\u003c?\u003e getDefaultImpl(){\n  return ClassUtil.rawClass(_defaultImpl);\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.baseType#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.baseType()",
    "snippet": "public JavaType baseType(){\n  return _baseType;\n}",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase.toString#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase.toString()",
    "snippet": "@Override public String toString(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(\u0027[\u0027).append(getClass().getName());\n  sb.append(\"; base-type:\").append(_baseType);\n  sb.append(\"; id-resolver: \").append(_idResolver);\n  sb.append(\u0027]\u0027);\n  return sb.toString();\n}",
    "begin_line": 130,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._findDeserializer#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDeserializer(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected final JsonDeserializer\u003cObject\u003e _findDeserializer(DeserializationContext ctxt,String typeId) throws IOException {\n  JsonDeserializer\u003cObject\u003e deser\u003d_deserializers.get(typeId);\n  if (deser \u003d\u003d null) {\n    JavaType type\u003d_idResolver.typeFromId(ctxt,typeId);\n    if (type \u003d\u003d null) {\n      deser\u003d_findDefaultImplDeserializer(ctxt);\n      if (deser \u003d\u003d null) {\n        JavaType actual\u003d_handleUnknownTypeId(ctxt,typeId);\n        if (actual \u003d\u003d null) {\n          return null;\n        }\n        deser\u003dctxt.findContextualValueDeserializer(actual,_property);\n      }\n    }\n else {\n      if ((_baseType !\u003d null) \u0026\u0026 _baseType.getClass() \u003d\u003d type.getClass()) {\n        if (!type.hasGenericTypes()) {\n          type\u003dctxt.getTypeFactory().constructSpecializedType(_baseType,type.getRawClass());\n        }\n      }\n      deser\u003dctxt.findContextualValueDeserializer(type,_property);\n    }\n    _deserializers.put(typeId,deser);\n  }\n  return deser;\n}",
    "begin_line": 146,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._findDefaultImplDeserializer#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._findDefaultImplDeserializer(com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "protected final JsonDeserializer\u003cObject\u003e _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException {\n  if (_defaultImpl \u003d\u003d null) {\n    if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {\n      return NullifyingDeserializer.instance;\n    }\n    return null;\n  }\n  Class\u003c?\u003e raw\u003d_defaultImpl.getRawClass();\n  if (ClassUtil.isBogusClass(raw)) {\n    return NullifyingDeserializer.instance;\n  }\nsynchronized (_defaultImpl) {\n    if (_defaultImplDeserializer \u003d\u003d null) {\n      _defaultImplDeserializer\u003dctxt.findContextualValueDeserializer(_defaultImpl,_property);\n    }\n    return _defaultImplDeserializer;\n  }\n}",
    "begin_line": 201,
    "end_line": 225,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._deserializeWithNativeTypeId#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._deserializeWithNativeTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext)",
    "snippet": "@Deprecated protected Object _deserializeWithNativeTypeId(JsonParser jp,DeserializationContext ctxt) throws IOException {\n  return _deserializeWithNativeTypeId(jp,ctxt,jp.getTypeId());\n}",
    "begin_line": 235,
    "end_line": 237,
    "comment": "/** \n * Helper method called when  {@link JsonParser} indicates that it can useso-called native type ids. Assumption from there is that only native type ids are to be used.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._deserializeWithNativeTypeId#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._deserializeWithNativeTypeId(JsonParser, com.fasterxml.jackson.databind.DeserializationContext, java.lang.Object)",
    "snippet": "protected Object _deserializeWithNativeTypeId(JsonParser jp,DeserializationContext ctxt,Object typeId) throws IOException {\n  JsonDeserializer\u003cObject\u003e deser;\n  if (typeId \u003d\u003d null) {\n    deser\u003d_findDefaultImplDeserializer(ctxt);\n    if (deser \u003d\u003d null) {\n      return ctxt.reportInputMismatch(baseType(),\"No (native) type id found when one was expected for polymorphic type handling\");\n    }\n  }\n else {\n    String typeIdStr\u003d(typeId instanceof String) ? (String)typeId : String.valueOf(typeId);\n    deser\u003d_findDeserializer(ctxt,typeIdStr);\n  }\n  return deser.deserialize(jp,ctxt);\n}",
    "begin_line": 245,
    "end_line": 263,
    "comment": "/** \n * Helper method called when  {@link JsonParser} indicates that it can useso-called native type ids, and such type id has been found.\n * @since 2.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._handleUnknownTypeId#278",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleUnknownTypeId(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected JavaType _handleUnknownTypeId(DeserializationContext ctxt,String typeId) throws IOException {\n  String extraDesc\u003d_idResolver.getDescForKnownTypeIds();\n  if (extraDesc \u003d\u003d null) {\n    extraDesc\u003d\"type ids are not statically known\";\n  }\n else {\n    extraDesc\u003d\"known type ids \u003d \" + extraDesc;\n  }\n  if (_property !\u003d null) {\n    extraDesc\u003dString.format(\"%s (for POJO property \u0027%s\u0027)\",extraDesc,_property.getName());\n  }\n  return ctxt.handleUnknownTypeId(_baseType,typeId,_idResolver,extraDesc);\n}",
    "begin_line": 278,
    "end_line": 292,
    "comment": "/** \n * Helper method called when given type id cannot be resolved into  concrete deserializer either directly (using given  {@link TypeIdResolver}), or using default type. Default implementation simply throws a  {@link com.fasterxml.jackson.databind.JsonMappingException} toindicate the problem; sub-classes may choose\n * @return If it is possible to resolve type id into a {@link JsonDeserializer}should return that deserializer; otherwise throw an exception to indicate the problem.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeDeserializerBase._handleMissingTypeId#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase._handleMissingTypeId(com.fasterxml.jackson.databind.DeserializationContext, java.lang.String)",
    "snippet": "protected JavaType _handleMissingTypeId(DeserializationContext ctxt,String extraDesc) throws IOException {\n  return ctxt.handleMissingTypeId(_baseType,_idResolver,extraDesc);\n}",
    "begin_line": 297,
    "end_line": 301,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.TypeIdResolverBase#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase()",
    "snippet": "protected TypeIdResolverBase(){\n  this(null,null);\n}",
    "begin_line": 33,
    "end_line": 35,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.TypeIdResolverBase#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.TypeIdResolverBase(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "protected TypeIdResolverBase(JavaType baseType,TypeFactory typeFactory){\n  _baseType\u003dbaseType;\n  _typeFactory\u003dtypeFactory;\n}",
    "begin_line": 37,
    "end_line": 40,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.init#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.init(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void init(JavaType bt){\n}",
    "begin_line": 44,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.idFromBaseType#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.idFromBaseType()",
    "snippet": "@Override public String idFromBaseType(){\n  return idFromValueAndType(null,_baseType.getRawClass());\n}",
    "begin_line": 47,
    "end_line": 54,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.typeFromId#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.typeFromId(com.fasterxml.jackson.databind.DatabindContext, java.lang.String)",
    "snippet": "@Override public JavaType typeFromId(DatabindContext context,String id) throws IOException {\n  throw new IllegalStateException(\"Sub-class \" + getClass().getName() + \" MUST implement \"+ \"`typeFromId(DatabindContext,String)\");\n}",
    "begin_line": 57,
    "end_line": 62,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeIdResolverBase.getDescForKnownTypeIds#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/jsontype/impl/TypeIdResolverBase.java",
    "class_name": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase",
    "signature": "com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase.getDescForKnownTypeIds()",
    "snippet": "@Override public String getDescForKnownTypeIds(){\n  return null;\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Helper method used to get a simple description of all known type ids, for use in error messages.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.JsonNodeFactory#61",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory(boolean)",
    "snippet": "public JsonNodeFactory(boolean bigDecimalExact){\n  _cfgBigDecimalExact\u003dbigDecimalExact;\n}",
    "begin_line": 61,
    "end_line": 64,
    "comment": "/** \n * Main constructor \u003cp\u003eThe only argument to this constructor is a boolean telling whether {@link DecimalNode} instances must be built with exact representations of{@link BigDecimal} instances.\u003c/p\u003e\u003cp\u003eThis has quite an influence since, for instance, a BigDecimal (and, therefore, a DecimalNode) constructed from input string  {@code \"1.0\"} andanother constructed with input string  {@code \"1.00\"} \u003cb\u003ewill not\u003c/b\u003e beequal, since their scale differs (1 in the first case, 2 in the second case).\u003c/p\u003e \u003cp\u003eNote that setting the argument to  {@code true} does \u003ci\u003enot\u003c/i\u003eguarantee a strict inequality between JSON representations: input texts {@code \"0.1\"} and {@code \"1e-1\"}, for instance, yield two equivalent BigDecimal instances since they have the same scale (1).\u003c/p\u003e \u003cp\u003eThe no-arg constructor (and the default  {@link #instance}) calls this constructor with  {@code false} as an argument.\u003c/p\u003e\n * @param bigDecimalExact see description\n * @see BigDecimal\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.JsonNodeFactory#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.JsonNodeFactory()",
    "snippet": "protected JsonNodeFactory(){\n  this(false);\n}",
    "begin_line": 72,
    "end_line": 75,
    "comment": "/** \n * Default constructor \u003cp\u003eThis calls  {@link #JsonNodeFactory(boolean)} with {@code false}as an argument.\u003c/p\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.withExactBigDecimals#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.withExactBigDecimals(boolean)",
    "snippet": "public static JsonNodeFactory withExactBigDecimals(boolean bigDecimalExact){\n  return bigDecimalExact ? decimalsAsIs : decimalsNormalized;\n}",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Return a factory instance with the desired behavior for BigDecimals \u003cp\u003eSee  {@link #JsonNodeFactory(boolean)} for a full description.\u003c/p\u003e\n * @param bigDecimalExact see description\n * @return a factory instance\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.booleanNode#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.booleanNode(boolean)",
    "snippet": "@Override public BooleanNode booleanNode(boolean v){\n  return v ? BooleanNode.getTrue() : BooleanNode.getFalse();\n}",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Factory method for getting an instance of JSON boolean value (either literal \u0027true\u0027 or \u0027false\u0027)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.nullNode#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.nullNode()",
    "snippet": "@Override public NullNode nullNode(){\n  return NullNode.getInstance();\n}",
    "begin_line": 109,
    "end_line": 109,
    "comment": "/** \n * Factory method for getting an instance of JSON null node (which represents literal null value)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(byte)",
    "snippet": "@Override public NumericNode numberNode(byte v){\n  return IntNode.valueOf(v);\n}",
    "begin_line": 122,
    "end_line": 122,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 8-bit value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Byte)",
    "snippet": "@Override public ValueNode numberNode(Byte value){\n  return (value \u003d\u003d null) ? nullNode() : IntNode.valueOf(value.intValue());\n}",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#140",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(short)",
    "snippet": "@Override public NumericNode numberNode(short v){\n  return ShortNode.valueOf(v);\n}",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 16-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Short)",
    "snippet": "@Override public ValueNode numberNode(Short value){\n  return (value \u003d\u003d null) ? nullNode() : ShortNode.valueOf(value);\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(int)",
    "snippet": "@Override public NumericNode numberNode(int v){\n  return IntNode.valueOf(v);\n}",
    "begin_line": 158,
    "end_line": 158,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 32-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Integer)",
    "snippet": "@Override public ValueNode numberNode(Integer value){\n  return (value \u003d\u003d null) ? nullNode() : IntNode.valueOf(value.intValue());\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(long)",
    "snippet": "@Override public NumericNode numberNode(long v){\n  return LongNode.valueOf(v);\n}",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 64-bit integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#186",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Long)",
    "snippet": "@Override public ValueNode numberNode(Long v){\n  if (v \u003d\u003d null) {\n    return nullNode();\n  }\n  return LongNode.valueOf(v.longValue());\n}",
    "begin_line": 186,
    "end_line": 191,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigInteger)",
    "snippet": "@Override public ValueNode numberNode(BigInteger v){\n  if (v \u003d\u003d null) {\n    return nullNode();\n  }\n  return BigIntegerNode.valueOf(v);\n}",
    "begin_line": 198,
    "end_line": 203,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given unlimited range integer value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(float)",
    "snippet": "@Override public NumericNode numberNode(float v){\n  return FloatNode.valueOf((float)v);\n}",
    "begin_line": 210,
    "end_line": 210,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 32-bit floating point value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Float)",
    "snippet": "@Override public ValueNode numberNode(Float value){\n  return (value \u003d\u003d null) ? nullNode() : FloatNode.valueOf(value.floatValue());\n}",
    "begin_line": 219,
    "end_line": 221,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#228",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(double)",
    "snippet": "@Override public NumericNode numberNode(double v){\n  return DoubleNode.valueOf(v);\n}",
    "begin_line": 228,
    "end_line": 228,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given 64-bit floating point value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#237",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.lang.Double)",
    "snippet": "@Override public ValueNode numberNode(Double value){\n  return (value \u003d\u003d null) ? nullNode() : DoubleNode.valueOf(value.doubleValue());\n}",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * Alternate factory method that will handle wrapper value, which may be null. Due to possibility of null, returning type is not guaranteed to be {@link NumericNode}, but just  {@link ValueNode}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.numberNode#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.numberNode(java.math.BigDecimal)",
    "snippet": "@Override public ValueNode numberNode(BigDecimal v){\n  if (v \u003d\u003d null) {\n    return nullNode();\n  }\n  if (_cfgBigDecimalExact)   return DecimalNode.valueOf(v);\n  return v.compareTo(BigDecimal.ZERO) \u003d\u003d 0 ? DecimalNode.ZERO : DecimalNode.valueOf(v.stripTrailingZeros());\n}",
    "begin_line": 252,
    "end_line": 276,
    "comment": "/** \n * Factory method for getting an instance of JSON numeric value that expresses given unlimited precision floating point value \u003cp\u003eIn the event that the factory has been built to normalize decimal values, the BigDecimal argument will be stripped off its trailing zeroes, using  {@link BigDecimal#stripTrailingZeros()}.\u003c/p\u003e\n * @see #JsonNodeFactory(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.textNode#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.textNode(java.lang.String)",
    "snippet": "@Override public TextNode textNode(String text){\n  return TextNode.valueOf(text);\n}",
    "begin_line": 289,
    "end_line": 289,
    "comment": "/** \n * Factory method for constructing a node that represents JSON String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.binaryNode#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[])",
    "snippet": "@Override public BinaryNode binaryNode(byte[] data){\n  return BinaryNode.valueOf(data);\n}",
    "begin_line": 297,
    "end_line": 297,
    "comment": "/** \n * Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.binaryNode#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.binaryNode(byte[], int, int)",
    "snippet": "@Override public BinaryNode binaryNode(byte[] data,int offset,int length){\n  return BinaryNode.valueOf(data,offset,length);\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * Factory method for constructing a node that represents given binary data, and will get serialized as equivalent base64-encoded String value\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.arrayNode#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode()",
    "snippet": "@Override public ArrayNode arrayNode(){\n  return new ArrayNode(this);\n}",
    "begin_line": 319,
    "end_line": 319,
    "comment": "/** \n * Factory method for constructing an empty JSON Array node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.arrayNode#327",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.arrayNode(int)",
    "snippet": "@Override public ArrayNode arrayNode(int capacity){\n  return new ArrayNode(this,capacity);\n}",
    "begin_line": 327,
    "end_line": 327,
    "comment": "/** \n * Factory method for constructing a JSON Array node with an initial capacity\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.objectNode#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.objectNode()",
    "snippet": "@Override public ObjectNode objectNode(){\n  return new ObjectNode(this);\n}",
    "begin_line": 333,
    "end_line": 333,
    "comment": "/** \n * Factory method for constructing an empty JSON Object (\"struct\") node\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.pojoNode#342",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.pojoNode(java.lang.Object)",
    "snippet": "@Override public ValueNode pojoNode(Object pojo){\n  return new POJONode(pojo);\n}",
    "begin_line": 342,
    "end_line": 342,
    "comment": "/** \n * Factory method for constructing a wrapper for POJO (\"Plain Old Java Object\") objects; these will get serialized using data binding, usually as JSON Objects, but in some cases as JSON Strings or other node types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory.rawValueNode#345",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory.rawValueNode(com.fasterxml.jackson.databind.util.RawValue)",
    "snippet": "@Override public ValueNode rawValueNode(RawValue value){\n  return new POJONode(value);\n}",
    "begin_line": 345,
    "end_line": 347,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JsonNodeFactory._inIntRange#355",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/node/JsonNodeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
    "signature": "com.fasterxml.jackson.databind.node.JsonNodeFactory._inIntRange(long)",
    "snippet": "protected boolean _inIntRange(long l){\n  int i\u003d(int)l;\n  long l2\u003d(long)i;\n  return (l2 \u003d\u003d l);\n}",
    "begin_line": 355,
    "end_line": 360,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.BasicSerializerFactory#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.BasicSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "protected BasicSerializerFactory(SerializerFactoryConfig config){\n  _factoryConfig\u003d(config \u003d\u003d null) ? new SerializerFactoryConfig() : config;\n}",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * We will provide default constructor to allow sub-classing, but make it protected so that no non-singleton instances of the class will be instantiated.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.getFactoryConfig#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.getFactoryConfig()",
    "snippet": "public SerializerFactoryConfig getFactoryConfig(){\n  return _factoryConfig;\n}",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Method for getting current  {@link SerializerFactoryConfig}. \u003cp\u003e Note that since instances are immutable, you can NOT change settings by accessing an instance and calling methods: this will simply create new instance of config object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withConfig#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "public abstract SerializerFactory withConfig(SerializerFactoryConfig config);",
    "begin_line": 160,
    "end_line": 160,
    "comment": "/** \n * Method used for creating a new instance of this factory, but with different configuration. Reason for specifying factory method (instead of plain constructor) is to allow proper sub-classing of factories. \u003cp\u003e Note that custom sub-classes generally \u003cb\u003emust override\u003c/b\u003e implementation of this method, as it usually requires instantiating a new instance of factory type. Check out javadocs for {@link com.fasterxml.jackson.databind.ser.BeanSerializerFactory} for more details.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withAdditionalSerializers#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override public final SerializerFactory withAdditionalSerializers(Serializers additional){\n  return withConfig(_factoryConfig.withAdditionalSerializers(additional));\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Convenience method for creating a new factory instance with an additional serializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withAdditionalKeySerializers#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "@Override public final SerializerFactory withAdditionalKeySerializers(Serializers additional){\n  return withConfig(_factoryConfig.withAdditionalKeySerializers(additional));\n}",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Convenience method for creating a new factory instance with an additional key serializer provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.withSerializerModifier#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "@Override public final SerializerFactory withSerializerModifier(BeanSerializerModifier modifier){\n  return withConfig(_factoryConfig.withSerializerModifier(modifier));\n}",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional bean serializer modifier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createSerializer#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public abstract JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,JavaType type) throws JsonMappingException ;",
    "begin_line": 197,
    "end_line": 199,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createKeySerializer#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e createKeySerializer(SerializationConfig config,JavaType keyType,JsonSerializer\u003cObject\u003e defaultImpl){\n  BeanDescription beanDesc\u003dconfig.introspectClassAnnotations(keyType.getRawClass());\n  JsonSerializer\u003c?\u003e ser\u003dnull;\n  if (_factoryConfig.hasKeySerializers()) {\n    for (    Serializers serializers : _factoryConfig.keySerializers()) {\n      ser\u003dserializers.findSerializer(config,keyType,beanDesc);\n      if (ser !\u003d null) {\n        break;\n      }\n    }\n  }\n  if (ser \u003d\u003d null) {\n    ser\u003ddefaultImpl;\n    if (ser \u003d\u003d null) {\n      ser\u003dStdKeySerializers.getStdKeySerializer(config,keyType.getRawClass(),false);\n      if (ser \u003d\u003d null) {\n        beanDesc\u003dconfig.introspect(keyType);\n        AnnotatedMember am\u003dbeanDesc.findJsonValueAccessor();\n        if (am !\u003d null) {\n          final Class\u003c?\u003e rawType\u003dam.getRawType();\n          JsonSerializer\u003c?\u003e delegate\u003dStdKeySerializers.getStdKeySerializer(config,rawType,true);\n          if (config.canOverrideAccessModifiers()) {\n            ClassUtil.checkAndFixAccess(am.getMember(),config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n          }\n          ser\u003dnew JsonValueSerializer(am,delegate);\n        }\n else {\n          ser\u003dStdKeySerializers.getFallbackKeySerializer(config,keyType.getRawClass());\n        }\n      }\n    }\n  }\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      ser\u003dmod.modifyKeySerializer(config,keyType,beanDesc,ser);\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)ser;\n}",
    "begin_line": 203,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.createTypeSerializer#259",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public TypeSerializer createTypeSerializer(SerializationConfig config,JavaType baseType){\n  BeanDescription bean\u003dconfig.introspectClassAnnotations(baseType.getRawClass());\n  AnnotatedClass ac\u003dbean.getClassInfo();\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findTypeResolver(config,ac,baseType);\n  Collection\u003cNamedType\u003e subtypes\u003dnull;\n  if (b \u003d\u003d null) {\n    b\u003dconfig.getDefaultTyper(baseType);\n  }\n else {\n    subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(config,ac);\n  }\n  if (b \u003d\u003d null) {\n    return null;\n  }\n  return b.buildTypeSerializer(config,baseType,subtypes);\n}",
    "begin_line": 259,
    "end_line": 281,
    "comment": "/** \n * Method called to construct a type serializer for values with given declared base type. This is called for values other than those of bean property types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.customSerializers#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.customSerializers()",
    "snippet": "protected abstract Iterable\u003cSerializers\u003e customSerializers();",
    "begin_line": 289,
    "end_line": 289,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByLookup#301",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByLookup(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByLookup(JavaType type,SerializationConfig config,BeanDescription beanDesc,boolean staticTyping){\n  Class\u003c?\u003e raw\u003dtype.getRawClass();\n  String clsName\u003draw.getName();\n  JsonSerializer\u003c?\u003e ser\u003d_concrete.get(clsName);\n  if (ser \u003d\u003d null) {\n    Class\u003c? extends JsonSerializer\u003c?\u003e\u003e serClass\u003d_concreteLazy.get(clsName);\n    if (serClass !\u003d null) {\n      return ClassUtil.createInstance(serClass,false);\n    }\n  }\n  return ser;\n}",
    "begin_line": 301,
    "end_line": 318,
    "comment": "/** \n * Method that will use fast lookup (and identity comparison) methods to see if we know serializer to use for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByAnnotations#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAnnotations(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByAnnotations(SerializerProvider prov,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  Class\u003c?\u003e raw\u003dtype.getRawClass();\n  if (JsonSerializable.class.isAssignableFrom(raw)) {\n    return SerializableSerializer.instance;\n  }\n  AnnotatedMember valueAccessor\u003dbeanDesc.findJsonValueAccessor();\n  if (valueAccessor !\u003d null) {\n    if (prov.canOverrideAccessModifiers()) {\n      ClassUtil.checkAndFixAccess(valueAccessor.getMember(),prov.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));\n    }\n    JsonSerializer\u003cObject\u003e ser\u003dfindSerializerFromAnnotation(prov,valueAccessor);\n    return new JsonValueSerializer(valueAccessor,ser);\n  }\n  return null;\n}",
    "begin_line": 336,
    "end_line": 357,
    "comment": "/** \n * Method called to see if one of primary per-class annotations (or related, like implementing of  {@link JsonSerializable}) determines the serializer to use. \u003cp\u003e Currently handles things like: \u003cul\u003e \u003cli\u003eIf type implements  {@link JsonSerializable}, use that \u003c/li\u003e \u003cli\u003eIf type has  {@link com.fasterxml.jackson.annotation.JsonValue} annotation (or equivalent), build serializerbased on that property \u003c/li\u003e \u003c/ul\u003e\n * @since 2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByPrimaryType#366",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByPrimaryType(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByPrimaryType(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  Class\u003c?\u003e raw\u003dtype.getRawClass();\n  JsonSerializer\u003c?\u003e ser\u003dfindOptionalStdSerializer(prov,type,beanDesc,staticTyping);\n  if (ser !\u003d null) {\n    return ser;\n  }\n  if (Calendar.class.isAssignableFrom(raw)) {\n    return CalendarSerializer.instance;\n  }\n  if (java.util.Date.class.isAssignableFrom(raw)) {\n    return DateSerializer.instance;\n  }\n  if (Map.Entry.class.isAssignableFrom(raw)) {\n    JavaType mapEntryType\u003dtype.findSuperType(Map.Entry.class);\n    JavaType kt\u003dmapEntryType.containedTypeOrUnknown(0);\n    JavaType vt\u003dmapEntryType.containedTypeOrUnknown(1);\n    return buildMapEntrySerializer(prov,type,beanDesc,staticTyping,kt,vt);\n  }\n  if (ByteBuffer.class.isAssignableFrom(raw)) {\n    return new ByteBufferSerializer();\n  }\n  if (InetAddress.class.isAssignableFrom(raw)) {\n    return new InetAddressSerializer();\n  }\n  if (InetSocketAddress.class.isAssignableFrom(raw)) {\n    return new InetSocketAddressSerializer();\n  }\n  if (TimeZone.class.isAssignableFrom(raw)) {\n    return new TimeZoneSerializer();\n  }\n  if (java.nio.charset.Charset.class.isAssignableFrom(raw)) {\n    return ToStringSerializer.instance;\n  }\n  if (Number.class.isAssignableFrom(raw)) {\n    JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n    if (format !\u003d null) {\nswitch (format.getShape()) {\ncase STRING:        return ToStringSerializer.instance;\ncase OBJECT:case ARRAY:      return null;\ndefault:  }\n}\nreturn NumberSerializer.instance;\n}\nif (Enum.class.isAssignableFrom(raw)) {\nreturn buildEnumSerializer(prov.getConfig(),type,beanDesc);\n}\nreturn null;\n}",
    "begin_line": 366,
    "end_line": 428,
    "comment": "/** \n * Method for checking if we can determine serializer to use based on set of known primary types, checking for set of known base types (exact matches having been compared against with \u003ccode\u003efindSerializerByLookup\u003c/code\u003e). This does not include \"secondary\" interfaces, but mostly concrete or abstract base classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findOptionalStdSerializer#435",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findOptionalStdSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e findOptionalStdSerializer(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  return OptionalHandlerFactory.instance.findSerializer(prov.getConfig(),type,beanDesc);\n}",
    "begin_line": 435,
    "end_line": 440,
    "comment": "/** \n * Overridable method called after checking all other types.\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerByAddonType#450",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerByAddonType(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected final JsonSerializer\u003c?\u003e findSerializerByAddonType(SerializationConfig config,JavaType javaType,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  Class\u003c?\u003e rawType\u003djavaType.getRawClass();\n  if (Iterator.class.isAssignableFrom(rawType)) {\n    JavaType[] params\u003dconfig.getTypeFactory().findTypeParameters(javaType,Iterator.class);\n    JavaType vt\u003d(params \u003d\u003d null || params.length !\u003d 1) ? TypeFactory.unknownType() : params[0];\n    return buildIteratorSerializer(config,javaType,beanDesc,staticTyping,vt);\n  }\n  if (Iterable.class.isAssignableFrom(rawType)) {\n    JavaType[] params\u003dconfig.getTypeFactory().findTypeParameters(javaType,Iterable.class);\n    JavaType vt\u003d(params \u003d\u003d null || params.length !\u003d 1) ? TypeFactory.unknownType() : params[0];\n    return buildIterableSerializer(config,javaType,beanDesc,staticTyping,vt);\n  }\n  if (CharSequence.class.isAssignableFrom(rawType)) {\n    return ToStringSerializer.instance;\n  }\n  return null;\n}",
    "begin_line": 450,
    "end_line": 471,
    "comment": "/** \n * Reflection-based serialized find method, which checks if given class implements one of recognized \"add-on\" interfaces. Add-on here means a role that is usually or can be a secondary trait: for example, bean classes may implement  {@link Iterable}, but their main function is usually something else. The reason for\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findSerializerFromAnnotation#481",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findSerializerFromAnnotation(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonSerializer\u003cObject\u003e findSerializerFromAnnotation(SerializerProvider prov,Annotated a) throws JsonMappingException {\n  Object serDef\u003dprov.getAnnotationIntrospector().findSerializer(a);\n  if (serDef \u003d\u003d null) {\n    return null;\n  }\n  JsonSerializer\u003cObject\u003e ser\u003dprov.serializerInstance(a,serDef);\n  return (JsonSerializer\u003cObject\u003e)findConvertingSerializer(prov,a,ser);\n}",
    "begin_line": 481,
    "end_line": 492,
    "comment": "/** \n * Helper method called to check if a class or method has an annotation (@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using) that tells the class to use for serialization. Returns null if no such annotation found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findConvertingSerializer#500",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e findConvertingSerializer(SerializerProvider prov,Annotated a,JsonSerializer\u003c?\u003e ser) throws JsonMappingException {\n  Converter\u003cObject,Object\u003e conv\u003dfindConverter(prov,a);\n  if (conv \u003d\u003d null) {\n    return ser;\n  }\n  JavaType delegateType\u003dconv.getOutputType(prov.getTypeFactory());\n  return new StdDelegatingSerializer(conv,delegateType,ser);\n}",
    "begin_line": 500,
    "end_line": 510,
    "comment": "/** \n * Helper method that will check whether given annotated entity (usually class, but may also be a property accessor) indicates that a  {@link Converter} is tobe used; and if so, to construct and return suitable serializer for it. If not, will simply return given serializer as is.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findConverter#512",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findConverter(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected Converter\u003cObject,Object\u003e findConverter(SerializerProvider prov,Annotated a) throws JsonMappingException {\n  Object convDef\u003dprov.getAnnotationIntrospector().findSerializationConverter(a);\n  if (convDef \u003d\u003d null) {\n    return null;\n  }\n  return prov.converterInstance(a,convDef);\n}",
    "begin_line": 512,
    "end_line": 521,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildContainerSerializer#532",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildContainerSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildContainerSerializer(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  final SerializationConfig config\u003dprov.getConfig();\n  if (!staticTyping \u0026\u0026 type.useStaticType()) {\n    if (!type.isContainerType() || !type.getContentType().isJavaLangObject()) {\n      staticTyping\u003dtrue;\n    }\n  }\n  JavaType elementType\u003dtype.getContentType();\n  TypeSerializer elementTypeSerializer\u003dcreateTypeSerializer(config,elementType);\n  if (elementTypeSerializer !\u003d null) {\n    staticTyping\u003dfalse;\n  }\n  JsonSerializer\u003cObject\u003e elementValueSerializer\u003d_findContentSerializer(prov,beanDesc.getClassInfo());\n  if (type.isMapLikeType()) {\n    MapLikeType mlt\u003d(MapLikeType)type;\n    JsonSerializer\u003cObject\u003e keySerializer\u003d_findKeySerializer(prov,beanDesc.getClassInfo());\n    if (mlt.isTrueMapType()) {\n      return buildMapSerializer(prov,(MapType)mlt,beanDesc,staticTyping,keySerializer,elementTypeSerializer,elementValueSerializer);\n    }\n    JsonSerializer\u003c?\u003e ser\u003dnull;\n    MapLikeType mlType\u003d(MapLikeType)type;\n    for (    Serializers serializers : customSerializers()) {\n      ser\u003dserializers.findMapLikeSerializer(config,mlType,beanDesc,keySerializer,elementTypeSerializer,elementValueSerializer);\n      if (ser !\u003d null) {\n        break;\n      }\n    }\n    if (ser \u003d\u003d null) {\n      ser\u003dfindSerializerByAnnotations(prov,type,beanDesc);\n    }\n    if (ser !\u003d null) {\n      if (_factoryConfig.hasSerializerModifiers()) {\n        for (        BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n          ser\u003dmod.modifyMapLikeSerializer(config,mlType,beanDesc,ser);\n        }\n      }\n    }\n    return ser;\n  }\n  if (type.isCollectionLikeType()) {\n    CollectionLikeType clt\u003d(CollectionLikeType)type;\n    if (clt.isTrueCollectionType()) {\n      return buildCollectionSerializer(prov,(CollectionType)clt,beanDesc,staticTyping,elementTypeSerializer,elementValueSerializer);\n    }\n    JsonSerializer\u003c?\u003e ser\u003dnull;\n    CollectionLikeType clType\u003d(CollectionLikeType)type;\n    for (    Serializers serializers : customSerializers()) {\n      ser\u003dserializers.findCollectionLikeSerializer(config,clType,beanDesc,elementTypeSerializer,elementValueSerializer);\n      if (ser !\u003d null) {\n        break;\n      }\n    }\n    if (ser \u003d\u003d null) {\n      ser\u003dfindSerializerByAnnotations(prov,type,beanDesc);\n    }\n    if (ser !\u003d null) {\n      if (_factoryConfig.hasSerializerModifiers()) {\n        for (        BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n          ser\u003dmod.modifyCollectionLikeSerializer(config,clType,beanDesc,ser);\n        }\n      }\n    }\n    return ser;\n  }\n  if (type.isArrayType()) {\n    return buildArraySerializer(prov,(ArrayType)type,beanDesc,staticTyping,elementTypeSerializer,elementValueSerializer);\n  }\n  return null;\n}",
    "begin_line": 532,
    "end_line": 626,
    "comment": "/** \n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildCollectionSerializer#634",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.CollectionType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildCollectionSerializer(SerializerProvider prov,CollectionType type,BeanDescription beanDesc,boolean staticTyping,TypeSerializer elementTypeSerializer,JsonSerializer\u003cObject\u003e elementValueSerializer) throws JsonMappingException {\n  SerializationConfig config\u003dprov.getConfig();\n  JsonSerializer\u003c?\u003e ser\u003dnull;\n  for (  Serializers serializers : customSerializers()) {\n    ser\u003dserializers.findCollectionSerializer(config,type,beanDesc,elementTypeSerializer,elementValueSerializer);\n    if (ser !\u003d null) {\n      break;\n    }\n  }\n  if (ser \u003d\u003d null) {\n    ser\u003dfindSerializerByAnnotations(prov,type,beanDesc);\n    if (ser \u003d\u003d null) {\n      JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n      if ((format !\u003d null) \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n        return null;\n      }\n      Class\u003c?\u003e raw\u003dtype.getRawClass();\n      if (EnumSet.class.isAssignableFrom(raw)) {\n        JavaType enumType\u003dtype.getContentType();\n        if (!enumType.isEnumType()) {\n          enumType\u003dnull;\n        }\n        ser\u003dbuildEnumSetSerializer(enumType);\n      }\n else {\n        Class\u003c?\u003e elementRaw\u003dtype.getContentType().getRawClass();\n        if (isIndexedList(raw)) {\n          if (elementRaw \u003d\u003d String.class) {\n            if (ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n              ser\u003dIndexedStringListSerializer.instance;\n            }\n          }\n else {\n            ser\u003dbuildIndexedListSerializer(type.getContentType(),staticTyping,elementTypeSerializer,elementValueSerializer);\n          }\n        }\n else         if (elementRaw \u003d\u003d String.class) {\n          if (ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n            ser\u003dStringCollectionSerializer.instance;\n          }\n        }\n        if (ser \u003d\u003d null) {\n          ser\u003dbuildCollectionSerializer(type.getContentType(),staticTyping,elementTypeSerializer,elementValueSerializer);\n        }\n      }\n    }\n  }\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      ser\u003dmod.modifyCollectionSerializer(config,type,beanDesc,ser);\n    }\n  }\n  return ser;\n}",
    "begin_line": 634,
    "end_line": 703,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for {@link java.util.List} types that support efficient by-index access\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.isIndexedList#711",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.isIndexedList(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isIndexedList(Class\u003c?\u003e cls){\n  return RandomAccess.class.isAssignableFrom(cls);\n}",
    "begin_line": 711,
    "end_line": 714,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIndexedListSerializer#716",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIndexedListSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public ContainerSerializer\u003c?\u003e buildIndexedListSerializer(JavaType elemType,boolean staticTyping,TypeSerializer vts,JsonSerializer\u003cObject\u003e valueSerializer){\n  return new IndexedListSerializer(elemType,staticTyping,vts,valueSerializer);\n}",
    "begin_line": 716,
    "end_line": 719,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildCollectionSerializer#721",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildCollectionSerializer(com.fasterxml.jackson.databind.JavaType, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public ContainerSerializer\u003c?\u003e buildCollectionSerializer(JavaType elemType,boolean staticTyping,TypeSerializer vts,JsonSerializer\u003cObject\u003e valueSerializer){\n  return new CollectionSerializer(elemType,staticTyping,vts,valueSerializer);\n}",
    "begin_line": 721,
    "end_line": 724,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildEnumSetSerializer#726",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSetSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003c?\u003e buildEnumSetSerializer(JavaType enumType){\n  return new EnumSetSerializer(enumType);\n}",
    "begin_line": 726,
    "end_line": 728,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildMapSerializer#740",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.MapType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildMapSerializer(SerializerProvider prov,MapType type,BeanDescription beanDesc,boolean staticTyping,JsonSerializer\u003cObject\u003e keySerializer,TypeSerializer elementTypeSerializer,JsonSerializer\u003cObject\u003e elementValueSerializer) throws JsonMappingException {\n  JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n  if ((format !\u003d null) \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n    return null;\n  }\n  JsonSerializer\u003c?\u003e ser\u003dnull;\n  final SerializationConfig config\u003dprov.getConfig();\n  for (  Serializers serializers : customSerializers()) {\n    ser\u003dserializers.findMapSerializer(config,type,beanDesc,keySerializer,elementTypeSerializer,elementValueSerializer);\n    if (ser !\u003d null) {\n      break;\n    }\n  }\n  if (ser \u003d\u003d null) {\n    ser\u003dfindSerializerByAnnotations(prov,type,beanDesc);\n    if (ser \u003d\u003d null) {\n      Object filterId\u003dfindFilterId(config,beanDesc);\n      JsonIgnoreProperties.Value ignorals\u003dconfig.getDefaultPropertyIgnorals(Map.class,beanDesc.getClassInfo());\n      Set\u003cString\u003e ignored\u003d(ignorals \u003d\u003d null) ? null : ignorals.findIgnoredForSerialization();\n      MapSerializer mapSer\u003dMapSerializer.construct(ignored,type,staticTyping,elementTypeSerializer,keySerializer,elementValueSerializer,filterId);\n      ser\u003d_checkMapContentInclusion(prov,beanDesc,mapSer);\n    }\n  }\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      ser\u003dmod.modifyMapSerializer(config,type,beanDesc,ser);\n    }\n  }\n  return ser;\n}",
    "begin_line": 740,
    "end_line": 791,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for {@link java.util.Map} types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._checkMapContentInclusion#800",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._checkMapContentInclusion(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.std.MapSerializer)",
    "snippet": "@SuppressWarnings(\"deprecation\") protected MapSerializer _checkMapContentInclusion(SerializerProvider prov,BeanDescription beanDesc,MapSerializer mapSer) throws JsonMappingException {\n  final JavaType contentType\u003dmapSer.getContentType();\n  JsonInclude.Value inclV\u003d_findInclusionWithContent(prov,beanDesc,contentType,Map.class);\n  JsonInclude.Include incl\u003d(inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n  if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n    if (!prov.isEnabled(SerializationFeature.WRITE_NULL_MAP_VALUES)) {\n      return mapSer.withContentInclusion(null,true);\n    }\n    return mapSer;\n  }\n  Object valueToSuppress;\n  boolean suppressNulls\u003dtrue;\nswitch (incl) {\ncase NON_DEFAULT:    valueToSuppress\u003dBeanUtil.getDefaultValue(contentType);\n  if (valueToSuppress !\u003d null) {\n    if (valueToSuppress.getClass().isArray()) {\n      valueToSuppress\u003dArrayBuilders.getArrayComparator(valueToSuppress);\n    }\n  }\nbreak;\ncase NON_ABSENT:valueToSuppress\u003dcontentType.isReferenceType() ? MapSerializer.MARKER_FOR_EMPTY : null;\nbreak;\ncase NON_EMPTY:valueToSuppress\u003dMapSerializer.MARKER_FOR_EMPTY;\nbreak;\ncase CUSTOM:valueToSuppress\u003dprov.includeFilterInstance(null,inclV.getContentFilter());\nif (valueToSuppress \u003d\u003d null) {\nsuppressNulls\u003dtrue;\n}\n else {\nsuppressNulls\u003dprov.includeFilterSuppressNulls(valueToSuppress);\n}\nbreak;\ncase NON_NULL:default:valueToSuppress\u003dnull;\nbreak;\n}\nreturn mapSer.withContentInclusion(valueToSuppress,suppressNulls);\n}",
    "begin_line": 800,
    "end_line": 854,
    "comment": "/** \n * Helper method that does figures out content inclusion value to use, if any, and construct re-configured  {@link MapSerializer} appropriately.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildMapEntrySerializer#859",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildMapEntrySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildMapEntrySerializer(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping,JavaType keyType,JavaType valueType) throws JsonMappingException {\n  JsonFormat.Value formatOverride\u003dprov.getDefaultPropertyFormat(Map.Entry.class);\n  JsonFormat.Value formatFromAnnotation\u003dbeanDesc.findExpectedFormat(null);\n  JsonFormat.Value format\u003dJsonFormat.Value.merge(formatFromAnnotation,formatOverride);\n  if (format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n    return null;\n  }\n  MapEntrySerializer ser\u003dnew MapEntrySerializer(valueType,keyType,valueType,staticTyping,createTypeSerializer(prov.getConfig(),valueType),null);\n  final JavaType contentType\u003dser.getContentType();\n  JsonInclude.Value inclV\u003d_findInclusionWithContent(prov,beanDesc,contentType,Map.Entry.class);\n  JsonInclude.Include incl\u003d(inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n  if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n    return ser;\n  }\n  Object valueToSuppress;\n  boolean suppressNulls\u003dtrue;\nswitch (incl) {\ncase NON_DEFAULT:    valueToSuppress\u003dBeanUtil.getDefaultValue(contentType);\n  if (valueToSuppress !\u003d null) {\n    if (valueToSuppress.getClass().isArray()) {\n      valueToSuppress\u003dArrayBuilders.getArrayComparator(valueToSuppress);\n    }\n  }\nbreak;\ncase NON_ABSENT:valueToSuppress\u003dcontentType.isReferenceType() ? MapSerializer.MARKER_FOR_EMPTY : null;\nbreak;\ncase NON_EMPTY:valueToSuppress\u003dMapSerializer.MARKER_FOR_EMPTY;\nbreak;\ncase CUSTOM:valueToSuppress\u003dprov.includeFilterInstance(null,inclV.getContentFilter());\nif (valueToSuppress \u003d\u003d null) {\nsuppressNulls\u003dtrue;\n}\n else {\nsuppressNulls\u003dprov.includeFilterSuppressNulls(valueToSuppress);\n}\nbreak;\ncase NON_NULL:default:valueToSuppress\u003dnull;\nbreak;\n}\nreturn ser.withContentInclusion(valueToSuppress,suppressNulls);\n}",
    "begin_line": 859,
    "end_line": 921,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findInclusionWithContent#931",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findInclusionWithContent(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonInclude.Value _findInclusionWithContent(SerializerProvider prov,BeanDescription beanDesc,JavaType contentType,Class\u003c?\u003e configType) throws JsonMappingException {\n  final SerializationConfig config\u003dprov.getConfig();\n  JsonInclude.Value inclV\u003dbeanDesc.findPropertyInclusion(config.getDefaultPropertyInclusion());\n  inclV\u003dconfig.getDefaultPropertyInclusion(configType,inclV);\n  JsonInclude.Value valueIncl\u003dconfig.getDefaultPropertyInclusion(contentType.getRawClass(),null);\n  if (valueIncl !\u003d null) {\nswitch (valueIncl.getValueInclusion()) {\ncase USE_DEFAULTS:      break;\ncase CUSTOM:    inclV\u003dinclV.withContentFilter(valueIncl.getContentFilter());\n  break;\ndefault:inclV\u003dinclV.withContentInclusion(valueIncl.getValueInclusion());\n}\n}\nreturn inclV;\n}",
    "begin_line": 931,
    "end_line": 962,
    "comment": "/** \n * Helper method used for finding inclusion definitions for structured container types like \u003ccode\u003eMap\u003c/code\u003es and referential types (like \u003ccode\u003eAtomicReference\u003c/code\u003e).\n * @param contentType Declared full content type of container\n * @param configType Raw base type under which `configOverride`, if any, needs to be defined\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildArraySerializer#974",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildArraySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ArrayType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildArraySerializer(SerializerProvider prov,ArrayType type,BeanDescription beanDesc,boolean staticTyping,TypeSerializer elementTypeSerializer,JsonSerializer\u003cObject\u003e elementValueSerializer) throws JsonMappingException {\n  SerializationConfig config\u003dprov.getConfig();\n  JsonSerializer\u003c?\u003e ser\u003dnull;\n  for (  Serializers serializers : customSerializers()) {\n    ser\u003dserializers.findArraySerializer(config,type,beanDesc,elementTypeSerializer,elementValueSerializer);\n    if (ser !\u003d null) {\n      break;\n    }\n  }\n  if (ser \u003d\u003d null) {\n    Class\u003c?\u003e raw\u003dtype.getRawClass();\n    if (elementValueSerializer \u003d\u003d null || ClassUtil.isJacksonStdImpl(elementValueSerializer)) {\n      if (String[].class \u003d\u003d raw) {\n        ser\u003dStringArraySerializer.instance;\n      }\n else {\n        ser\u003dStdArraySerializers.findStandardImpl(raw);\n      }\n    }\n    if (ser \u003d\u003d null) {\n      ser\u003dnew ObjectArraySerializer(type.getContentType(),staticTyping,elementTypeSerializer,elementValueSerializer);\n    }\n  }\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      ser\u003dmod.modifyArraySerializer(config,type,beanDesc,ser);\n    }\n  }\n  return ser;\n}",
    "begin_line": 974,
    "end_line": 1018,
    "comment": "/** \n * Helper method that handles configuration details when constructing serializers for \u003ccode\u003eObject[]\u003c/code\u003e (and subtypes, except for String).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findReferenceSerializer#1030",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "public JsonSerializer\u003c?\u003e findReferenceSerializer(SerializerProvider prov,ReferenceType refType,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  JavaType contentType\u003drefType.getContentType();\n  TypeSerializer contentTypeSerializer\u003dcontentType.getTypeHandler();\n  final SerializationConfig config\u003dprov.getConfig();\n  if (contentTypeSerializer \u003d\u003d null) {\n    contentTypeSerializer\u003dcreateTypeSerializer(config,contentType);\n  }\n  JsonSerializer\u003cObject\u003e contentSerializer\u003dcontentType.getValueHandler();\n  for (  Serializers serializers : customSerializers()) {\n    JsonSerializer\u003c?\u003e ser\u003dserializers.findReferenceSerializer(config,refType,beanDesc,contentTypeSerializer,contentSerializer);\n    if (ser !\u003d null) {\n      return ser;\n    }\n  }\n  if (refType.isTypeOrSubTypeOf(AtomicReference.class)) {\n    return buildAtomicReferenceSerializer(prov,refType,beanDesc,staticTyping,contentTypeSerializer,contentSerializer);\n  }\n  return null;\n}",
    "begin_line": 1030,
    "end_line": 1053,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildAtomicReferenceSerializer#1055",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildAtomicReferenceSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.type.ReferenceType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.jsontype.TypeSerializer, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildAtomicReferenceSerializer(SerializerProvider prov,ReferenceType refType,BeanDescription beanDesc,boolean staticTyping,TypeSerializer contentTypeSerializer,JsonSerializer\u003cObject\u003e contentSerializer) throws JsonMappingException {\n  final JavaType contentType\u003drefType.getReferencedType();\n  JsonInclude.Value inclV\u003d_findInclusionWithContent(prov,beanDesc,contentType,AtomicReference.class);\n  JsonInclude.Include incl\u003d(inclV \u003d\u003d null) ? JsonInclude.Include.USE_DEFAULTS : inclV.getContentInclusion();\n  Object valueToSuppress;\n  boolean suppressNulls;\n  if (incl \u003d\u003d JsonInclude.Include.USE_DEFAULTS || incl \u003d\u003d JsonInclude.Include.ALWAYS) {\n    valueToSuppress\u003dnull;\n    suppressNulls\u003dfalse;\n  }\n else {\n    suppressNulls\u003dtrue;\nswitch (incl) {\ncase NON_DEFAULT:      valueToSuppress\u003dBeanUtil.getDefaultValue(contentType);\n    if (valueToSuppress !\u003d null) {\n      if (valueToSuppress.getClass().isArray()) {\n        valueToSuppress\u003dArrayBuilders.getArrayComparator(valueToSuppress);\n      }\n    }\n  break;\ncase NON_ABSENT:valueToSuppress\u003dcontentType.isReferenceType() ? MapSerializer.MARKER_FOR_EMPTY : null;\nbreak;\ncase NON_EMPTY:valueToSuppress\u003dMapSerializer.MARKER_FOR_EMPTY;\nbreak;\ncase CUSTOM:valueToSuppress\u003dprov.includeFilterInstance(null,inclV.getContentFilter());\nif (valueToSuppress \u003d\u003d null) {\nsuppressNulls\u003dtrue;\n}\n else {\nsuppressNulls\u003dprov.includeFilterSuppressNulls(valueToSuppress);\n}\nbreak;\ncase NON_NULL:default:valueToSuppress\u003dnull;\nbreak;\n}\n}\nAtomicReferenceSerializer ser\u003dnew AtomicReferenceSerializer(refType,staticTyping,contentTypeSerializer,contentSerializer);\nreturn ser.withContentInclusion(valueToSuppress,suppressNulls);\n}",
    "begin_line": 1055,
    "end_line": 1108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIteratorSerializer#1119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIteratorSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildIteratorSerializer(SerializationConfig config,JavaType type,BeanDescription beanDesc,boolean staticTyping,JavaType valueType) throws JsonMappingException {\n  return new IteratorSerializer(valueType,staticTyping,createTypeSerializer(config,valueType));\n}",
    "begin_line": 1119,
    "end_line": 1125,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildIterableSerializer#1130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildIterableSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildIterableSerializer(SerializationConfig config,JavaType type,BeanDescription beanDesc,boolean staticTyping,JavaType valueType) throws JsonMappingException {\n  return new IterableSerializer(valueType,staticTyping,createTypeSerializer(config,valueType));\n}",
    "begin_line": 1130,
    "end_line": 1136,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.buildEnumSerializer#1138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.buildEnumSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected JsonSerializer\u003c?\u003e buildEnumSerializer(SerializationConfig config,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  JsonFormat.Value format\u003dbeanDesc.findExpectedFormat(null);\n  if (format !\u003d null \u0026\u0026 format.getShape() \u003d\u003d JsonFormat.Shape.OBJECT) {\n    ((BasicBeanDescription)beanDesc).removeProperty(\"declaringClass\");\n    return null;\n  }\n  @SuppressWarnings(\"unchecked\") Class\u003cEnum\u003c?\u003e\u003e enumClass\u003d(Class\u003cEnum\u003c?\u003e\u003e)type.getRawClass();\n  JsonSerializer\u003c?\u003e ser\u003dEnumSerializer.construct(enumClass,config,beanDesc,format);\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      ser\u003dmod.modifyEnumSerializer(config,type,beanDesc,ser);\n    }\n  }\n  return ser;\n}",
    "begin_line": 1138,
    "end_line": 1164,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findKeySerializer#1177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findKeySerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findKeySerializer(SerializerProvider prov,Annotated a) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dprov.getAnnotationIntrospector();\n  Object serDef\u003dintr.findKeySerializer(a);\n  if (serDef !\u003d null) {\n    return prov.serializerInstance(a,serDef);\n  }\n  return null;\n}",
    "begin_line": 1177,
    "end_line": 1187,
    "comment": "/** \n * Helper method called to try to find whether there is an annotation in the class that indicates key serializer to use. If so, will try to instantiate key serializer and return it; otherwise returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory._findContentSerializer#1194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory._findContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.Annotated)",
    "snippet": "protected JsonSerializer\u003cObject\u003e _findContentSerializer(SerializerProvider prov,Annotated a) throws JsonMappingException {\n  AnnotationIntrospector intr\u003dprov.getAnnotationIntrospector();\n  Object serDef\u003dintr.findContentSerializer(a);\n  if (serDef !\u003d null) {\n    return prov.serializerInstance(a,serDef);\n  }\n  return null;\n}",
    "begin_line": 1194,
    "end_line": 1204,
    "comment": "/** \n * Helper method called to try to find whether there is an annotation in the class that indicates content (\"value\") serializer to use. If so, will try to instantiate value serializer and return it; otherwise returns null.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.findFilterId#1210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.findFilterId(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected Object findFilterId(SerializationConfig config,BeanDescription beanDesc){\n  return config.getAnnotationIntrospector().findFilterId((Annotated)beanDesc.getClassInfo());\n}",
    "begin_line": 1210,
    "end_line": 1212,
    "comment": "/** \n * Method called to find filter that is configured to be used with bean serializer being built, if any.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BasicSerializerFactory.usesStaticTyping#1222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BasicSerializerFactory.usesStaticTyping(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "protected boolean usesStaticTyping(SerializationConfig config,BeanDescription beanDesc,TypeSerializer typeSer){\n  if (typeSer !\u003d null) {\n    return false;\n  }\n  AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  JsonSerialize.Typing t\u003dintr.findSerializationTyping(beanDesc.getClassInfo());\n  if (t !\u003d null \u0026\u0026 t !\u003d JsonSerialize.Typing.DEFAULT_TYPING) {\n    return (t \u003d\u003d JsonSerialize.Typing.STATIC);\n  }\n  return config.isEnabled(MapperFeature.USE_STATIC_TYPING);\n}",
    "begin_line": 1222,
    "end_line": 1237,
    "comment": "/** \n * Helper method to check whether global settings and/or class annotations for the bean class indicate that static typing (declared types)  should be used for properties. (instead of dynamic runtime types).\n * @since 2.1 (earlier had variant with additional \u0027property\u0027 parameter)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.BeanSerializerFactory#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.BeanSerializerFactory(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "protected BeanSerializerFactory(SerializerFactoryConfig config){\n  super(config);\n}",
    "begin_line": 75,
    "end_line": 78,
    "comment": "/** \n * Constructor for creating instances with specified configuration.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.withConfig#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.withConfig(com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig)",
    "snippet": "@Override public SerializerFactory withConfig(SerializerFactoryConfig config){\n  if (_factoryConfig \u003d\u003d config) {\n    return this;\n  }\n  if (getClass() !\u003d BeanSerializerFactory.class) {\n    throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\" + getClass().getName() + \") has not properly overridden method \u0027withAdditionalSerializers\u0027: cannot instantiate subtype with \"+ \"additional serializer definitions\");\n  }\n  return new BeanSerializerFactory(config);\n}",
    "begin_line": 87,
    "end_line": 104,
    "comment": "/** \n * Method used by module registration functionality, to attach additional serializer providers into this serializer factory. This is typically handled by constructing a new instance with additional serializers, to ensure thread-safe access.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.customSerializers#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.customSerializers()",
    "snippet": "@Override protected Iterable\u003cSerializers\u003e customSerializers(){\n  return _factoryConfig.serializers();\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.createSerializer#129",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override @SuppressWarnings(\"unchecked\") public JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,JavaType origType) throws JsonMappingException {\n  final SerializationConfig config\u003dprov.getConfig();\n  BeanDescription beanDesc\u003dconfig.introspect(origType);\n  JsonSerializer\u003c?\u003e ser\u003dfindSerializerFromAnnotation(prov,beanDesc.getClassInfo());\n  if (ser !\u003d null) {\n    return (JsonSerializer\u003cObject\u003e)ser;\n  }\n  boolean staticTyping;\n  final AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  JavaType type;\n  if (intr \u003d\u003d null) {\n    type\u003dorigType;\n  }\n else {\n    try {\n      type\u003dintr.refineSerializationType(config,beanDesc.getClassInfo(),origType);\n    }\n catch (    JsonMappingException e) {\n      return prov.reportBadTypeDefinition(beanDesc,e.getMessage());\n    }\n  }\n  if (type \u003d\u003d origType) {\n    staticTyping\u003dfalse;\n  }\n else {\n    staticTyping\u003dtrue;\n    if (!type.hasRawClass(origType.getRawClass())) {\n      beanDesc\u003dconfig.introspect(type);\n    }\n  }\n  Converter\u003cObject,Object\u003e conv\u003dbeanDesc.findSerializationConverter();\n  if (conv \u003d\u003d null) {\n    return (JsonSerializer\u003cObject\u003e)_createSerializer2(prov,type,beanDesc,staticTyping);\n  }\n  JavaType delegateType\u003dconv.getOutputType(prov.getTypeFactory());\n  if (!delegateType.hasRawClass(type.getRawClass())) {\n    beanDesc\u003dconfig.introspect(delegateType);\n    ser\u003dfindSerializerFromAnnotation(prov,beanDesc.getClassInfo());\n  }\n  if (ser \u003d\u003d null \u0026\u0026 !delegateType.isJavaLangObject()) {\n    ser\u003d_createSerializer2(prov,delegateType,beanDesc,true);\n  }\n  return new StdDelegatingSerializer(conv,delegateType,ser);\n}",
    "begin_line": 129,
    "end_line": 180,
    "comment": "/** \n * Main serializer constructor method. We will have to be careful with respect to ordering of various method calls: essentially we want to reliably figure out which classes are standard types, and which are beans. The problem is that some bean Classes may implement standard interfaces (say,  {@link java.lang.Iterable}. \u003cp\u003e Note: sub-classes may choose to complete replace implementation, if they want to alter priority of serializer lookups.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory._createSerializer2#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory._createSerializer2(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription, boolean)",
    "snippet": "protected JsonSerializer\u003c?\u003e _createSerializer2(SerializerProvider prov,JavaType type,BeanDescription beanDesc,boolean staticTyping) throws JsonMappingException {\n  JsonSerializer\u003c?\u003e ser\u003dnull;\n  final SerializationConfig config\u003dprov.getConfig();\n  if (type.isContainerType()) {\n    if (!staticTyping) {\n      staticTyping\u003dusesStaticTyping(config,beanDesc,null);\n    }\n    ser\u003dbuildContainerSerializer(prov,type,beanDesc,staticTyping);\n    if (ser !\u003d null) {\n      return ser;\n    }\n  }\n else {\n    if (type.isReferenceType()) {\n      ser\u003dfindReferenceSerializer(prov,(ReferenceType)type,beanDesc,staticTyping);\n    }\n else {\n      for (      Serializers serializers : customSerializers()) {\n        ser\u003dserializers.findSerializer(config,type,beanDesc);\n        if (ser !\u003d null) {\n          break;\n        }\n      }\n    }\n    if (ser \u003d\u003d null) {\n      ser\u003dfindSerializerByAnnotations(prov,type,beanDesc);\n    }\n  }\n  if (ser \u003d\u003d null) {\n    ser\u003dfindSerializerByLookup(type,config,beanDesc,staticTyping);\n    if (ser \u003d\u003d null) {\n      ser\u003dfindSerializerByPrimaryType(prov,type,beanDesc,staticTyping);\n      if (ser \u003d\u003d null) {\n        ser\u003dfindBeanSerializer(prov,type,beanDesc);\n        if (ser \u003d\u003d null) {\n          ser\u003dfindSerializerByAddonType(config,type,beanDesc,staticTyping);\n          if (ser \u003d\u003d null) {\n            ser\u003dprov.getUnknownTypeSerializer(beanDesc.getBeanClass());\n          }\n        }\n      }\n    }\n  }\n  if (ser !\u003d null) {\n    if (_factoryConfig.hasSerializerModifiers()) {\n      for (      BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n        ser\u003dmod.modifySerializer(config,beanDesc,ser);\n      }\n    }\n  }\n  return ser;\n}",
    "begin_line": 182,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findBeanSerializer#267",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "public JsonSerializer\u003cObject\u003e findBeanSerializer(SerializerProvider prov,JavaType type,BeanDescription beanDesc) throws JsonMappingException {\n  if (!isPotentialBeanType(type.getRawClass())) {\n    if (!type.isEnumType()) {\n      return null;\n    }\n  }\n  return constructBeanSerializer(prov,beanDesc);\n}",
    "begin_line": 267,
    "end_line": 280,
    "comment": "/** \n * Method that will try to construct a  {@link BeanSerializer} forgiven class. Returns null if no properties are found.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findPropertyTypeSerializer#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findPropertyTypeSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType,SerializationConfig config,AnnotatedMember accessor) throws JsonMappingException {\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findPropertyTypeResolver(config,accessor,baseType);\n  TypeSerializer typeSer;\n  if (b \u003d\u003d null) {\n    typeSer\u003dcreateTypeSerializer(config,baseType);\n  }\n else {\n    Collection\u003cNamedType\u003e subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(config,accessor,baseType);\n    typeSer\u003db.buildTypeSerializer(config,baseType,subtypes);\n  }\n  return typeSer;\n}",
    "begin_line": 292,
    "end_line": 309,
    "comment": "/** \n * Method called to create a type information serializer for values of given non-container property if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param baseType Declared type to use as the base type for type information serializer\n * @return Type serializer to use for property values, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findPropertyContentTypeSerializer#321",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findPropertyContentTypeSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType,SerializationConfig config,AnnotatedMember accessor) throws JsonMappingException {\n  JavaType contentType\u003dcontainerType.getContentType();\n  AnnotationIntrospector ai\u003dconfig.getAnnotationIntrospector();\n  TypeResolverBuilder\u003c?\u003e b\u003dai.findPropertyContentTypeResolver(config,accessor,containerType);\n  TypeSerializer typeSer;\n  if (b \u003d\u003d null) {\n    typeSer\u003dcreateTypeSerializer(config,contentType);\n  }\n else {\n    Collection\u003cNamedType\u003e subtypes\u003dconfig.getSubtypeResolver().collectAndResolveSubtypesByClass(config,accessor,contentType);\n    typeSer\u003db.buildTypeSerializer(config,contentType,subtypes);\n  }\n  return typeSer;\n}",
    "begin_line": 321,
    "end_line": 339,
    "comment": "/** \n * Method called to create a type information serializer for values of given container property if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param containerType Declared type of the container to use as the base type for type information serializer\n * @return Type serializer to use for property value contents, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructBeanSerializer#353",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected JsonSerializer\u003cObject\u003e constructBeanSerializer(SerializerProvider prov,BeanDescription beanDesc) throws JsonMappingException {\n  if (beanDesc.getBeanClass() \u003d\u003d Object.class) {\n    return prov.getUnknownTypeSerializer(Object.class);\n  }\n  final SerializationConfig config\u003dprov.getConfig();\n  BeanSerializerBuilder builder\u003dconstructBeanSerializerBuilder(beanDesc);\n  builder.setConfig(config);\n  List\u003cBeanPropertyWriter\u003e props\u003dfindBeanProperties(prov,beanDesc,builder);\n  if (props \u003d\u003d null) {\n    props\u003dnew ArrayList\u003cBeanPropertyWriter\u003e();\n  }\n else {\n    props\u003dremoveOverlappingTypeIds(prov,beanDesc,builder,props);\n  }\n  prov.getAnnotationIntrospector().findAndAddVirtualProperties(config,beanDesc.getClassInfo(),props);\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      props\u003dmod.changeProperties(config,beanDesc,props);\n    }\n  }\n  props\u003dfilterBeanProperties(config,beanDesc,props);\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      props\u003dmod.orderProperties(config,beanDesc,props);\n    }\n  }\n  builder.setObjectIdWriter(constructObjectIdHandler(prov,beanDesc,props));\n  builder.setProperties(props);\n  builder.setFilterId(findFilterId(config,beanDesc));\n  AnnotatedMember anyGetter\u003dbeanDesc.findAnyGetter();\n  if (anyGetter !\u003d null) {\n    JavaType type\u003danyGetter.getType();\n    boolean staticTyping\u003dconfig.isEnabled(MapperFeature.USE_STATIC_TYPING);\n    JavaType valueType\u003dtype.getContentType();\n    TypeSerializer typeSer\u003dcreateTypeSerializer(config,valueType);\n    JsonSerializer\u003c?\u003e anySer\u003dfindSerializerFromAnnotation(prov,anyGetter);\n    if (anySer \u003d\u003d null) {\n      anySer\u003dMapSerializer.construct((Set\u003cString\u003e)null,type,staticTyping,typeSer,null,null,null);\n    }\n    PropertyName name\u003dPropertyName.construct(anyGetter.getName());\n    BeanProperty.Std anyProp\u003dnew BeanProperty.Std(name,valueType,null,anyGetter,PropertyMetadata.STD_OPTIONAL);\n    builder.setAnyGetter(new AnyGetterWriter(anyProp,anyGetter,anySer));\n  }\n  processViews(config,builder);\n  if (_factoryConfig.hasSerializerModifiers()) {\n    for (    BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {\n      builder\u003dmod.updateBuilder(config,beanDesc,builder);\n    }\n  }\n  JsonSerializer\u003cObject\u003e ser\u003dnull;\n  try {\n    ser\u003d(JsonSerializer\u003cObject\u003e)builder.build();\n  }\n catch (  RuntimeException e) {\n    prov.reportBadTypeDefinition(beanDesc,\"Failed to construct BeanSerializer for %s: (%s) %s\",beanDesc.getType(),e.getClass().getName(),e.getMessage());\n  }\n  if (ser \u003d\u003d null) {\n    if (beanDesc.hasKnownClassAnnotations()) {\n      return builder.createDummy();\n    }\n  }\n  return ser;\n}",
    "begin_line": 353,
    "end_line": 450,
    "comment": "/** \n * Method called to construct serializer for serializing specified bean type.\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructObjectIdHandler#452",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructObjectIdHandler(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov,BeanDescription beanDesc,List\u003cBeanPropertyWriter\u003e props) throws JsonMappingException {\n  ObjectIdInfo objectIdInfo\u003dbeanDesc.getObjectIdInfo();\n  if (objectIdInfo \u003d\u003d null) {\n    return null;\n  }\n  ObjectIdGenerator\u003c?\u003e gen;\n  Class\u003c?\u003e implClass\u003dobjectIdInfo.getGeneratorType();\n  if (implClass \u003d\u003d ObjectIdGenerators.PropertyGenerator.class) {\n    String propName\u003dobjectIdInfo.getPropertyName().getSimpleName();\n    BeanPropertyWriter idProp\u003dnull;\n    for (int i\u003d0, len\u003dprops.size(); ; ++i) {\n      if (i \u003d\u003d len) {\n        throw new IllegalArgumentException(\"Invalid Object Id definition for \" + beanDesc.getBeanClass().getName() + \": cannot find property with name \u0027\"+ propName+ \"\u0027\");\n      }\n      BeanPropertyWriter prop\u003dprops.get(i);\n      if (propName.equals(prop.getName())) {\n        idProp\u003dprop;\n        if (i \u003e 0) {\n          props.remove(i);\n          props.add(0,idProp);\n        }\n        break;\n      }\n    }\n    JavaType idType\u003didProp.getType();\n    gen\u003dnew PropertyBasedObjectIdGenerator(objectIdInfo,idProp);\n    return ObjectIdWriter.construct(idType,(PropertyName)null,gen,objectIdInfo.getAlwaysAsId());\n  }\n  JavaType type\u003dprov.constructType(implClass);\n  JavaType idType\u003dprov.getTypeFactory().findTypeParameters(type,ObjectIdGenerator.class)[0];\n  gen\u003dprov.objectIdGeneratorInstance(beanDesc.getClassInfo(),objectIdInfo);\n  return ObjectIdWriter.construct(idType,objectIdInfo.getPropertyName(),gen,objectIdInfo.getAlwaysAsId());\n}",
    "begin_line": 452,
    "end_line": 498,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructFilteredBeanWriter#505",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructFilteredBeanWriter(com.fasterxml.jackson.databind.ser.BeanPropertyWriter, java.lang.Class\u003c?\u003e[])",
    "snippet": "protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer,Class\u003c?\u003e[] inViews){\n  return FilteredBeanPropertyWriter.constructViewBased(writer,inViews);\n}",
    "begin_line": 505,
    "end_line": 509,
    "comment": "/** \n * Method called to construct a filtered writer, for given view definitions. Default implementation constructs filter that checks active view type to views property is to be included in.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructPropertyBuilder#511",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructPropertyBuilder(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected PropertyBuilder constructPropertyBuilder(SerializationConfig config,BeanDescription beanDesc){\n  return new PropertyBuilder(config,beanDesc);\n}",
    "begin_line": 511,
    "end_line": 515,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.constructBeanSerializerBuilder#517",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.constructBeanSerializerBuilder(com.fasterxml.jackson.databind.BeanDescription)",
    "snippet": "protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc){\n  return new BeanSerializerBuilder(beanDesc);\n}",
    "begin_line": 517,
    "end_line": 519,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.isPotentialBeanType#535",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.isPotentialBeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected boolean isPotentialBeanType(Class\u003c?\u003e type){\n  return (ClassUtil.canBeABeanType(type) \u003d\u003d null) \u0026\u0026 !ClassUtil.isProxyType(type);\n}",
    "begin_line": 535,
    "end_line": 538,
    "comment": "/** \n * Helper method used to skip processing for types that we know cannot be (i.e. are never consider to be) beans:  things like primitives, Arrays, Enums, and proxy types. \u003cp\u003e Note that usually we shouldn\u0027t really be getting these sort of types anyway; but better safe than sorry.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.findBeanProperties#544",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.findBeanProperties(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e findBeanProperties(SerializerProvider prov,BeanDescription beanDesc,BeanSerializerBuilder builder) throws JsonMappingException {\n  List\u003cBeanPropertyDefinition\u003e properties\u003dbeanDesc.findProperties();\n  final SerializationConfig config\u003dprov.getConfig();\n  removeIgnorableTypes(config,beanDesc,properties);\n  if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) {\n    removeSetterlessGetters(config,beanDesc,properties);\n  }\n  if (properties.isEmpty()) {\n    return null;\n  }\n  boolean staticTyping\u003dusesStaticTyping(config,beanDesc,null);\n  PropertyBuilder pb\u003dconstructPropertyBuilder(config,beanDesc);\n  ArrayList\u003cBeanPropertyWriter\u003e result\u003dnew ArrayList\u003cBeanPropertyWriter\u003e(properties.size());\n  for (  BeanPropertyDefinition property : properties) {\n    final AnnotatedMember accessor\u003dproperty.getAccessor();\n    if (property.isTypeId()) {\n      if (accessor !\u003d null) {\n        builder.setTypeId(accessor);\n      }\n      continue;\n    }\n    AnnotationIntrospector.ReferenceProperty refType\u003dproperty.findReferenceType();\n    if (refType !\u003d null \u0026\u0026 refType.isBackReference()) {\n      continue;\n    }\n    if (accessor instanceof AnnotatedMethod) {\n      result.add(_constructWriter(prov,property,pb,staticTyping,(AnnotatedMethod)accessor));\n    }\n else {\n      result.add(_constructWriter(prov,property,pb,staticTyping,(AnnotatedField)accessor));\n    }\n  }\n  return result;\n}",
    "begin_line": 544,
    "end_line": 589,
    "comment": "/** \n * Method used to collect all actual serializable properties. Can be overridden to implement custom detection schemes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.filterBeanProperties#601",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.filterBeanProperties(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e filterBeanProperties(SerializationConfig config,BeanDescription beanDesc,List\u003cBeanPropertyWriter\u003e props){\n  JsonIgnoreProperties.Value ignorals\u003dconfig.getDefaultPropertyIgnorals(beanDesc.getBeanClass(),beanDesc.getClassInfo());\n  if (ignorals !\u003d null) {\n    Set\u003cString\u003e ignored\u003dignorals.findIgnoredForSerialization();\n    if (!ignored.isEmpty()) {\n      Iterator\u003cBeanPropertyWriter\u003e it\u003dprops.iterator();\n      while (it.hasNext()) {\n        if (ignored.contains(it.next().getName())) {\n          it.remove();\n        }\n      }\n    }\n  }\n  return props;\n}",
    "begin_line": 601,
    "end_line": 622,
    "comment": "/** \n * Overridable method that can filter out properties. Default implementation checks annotations class may have.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.processViews#633",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.processViews(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder)",
    "snippet": "protected void processViews(SerializationConfig config,BeanSerializerBuilder builder){\n  List\u003cBeanPropertyWriter\u003e props\u003dbuilder.getProperties();\n  boolean includeByDefault\u003dconfig.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION);\n  final int propCount\u003dprops.size();\n  int viewsFound\u003d0;\n  BeanPropertyWriter[] filtered\u003dnew BeanPropertyWriter[propCount];\n  for (int i\u003d0; i \u003c propCount; ++i) {\n    BeanPropertyWriter bpw\u003dprops.get(i);\n    Class\u003c?\u003e[] views\u003dbpw.getViews();\n    if (views \u003d\u003d null) {\n      if (includeByDefault) {\n        filtered[i]\u003dbpw;\n      }\n    }\n else {\n      ++viewsFound;\n      filtered[i]\u003dconstructFilteredBeanWriter(bpw,views);\n    }\n  }\n  if (includeByDefault \u0026\u0026 viewsFound \u003d\u003d 0) {\n    return;\n  }\n  builder.setFilteredProperties(filtered);\n}",
    "begin_line": 633,
    "end_line": 659,
    "comment": "/** \n * Method called to handle view information for constructed serializer, based on bean property writers. \u003cp\u003e Note that this method is designed to be overridden by sub-classes if they want to provide custom view handling. As such it is not considered an internal implementation detail, and will be supported as part of API going forward.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeIgnorableTypes#667",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeIgnorableTypes(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected void removeIgnorableTypes(SerializationConfig config,BeanDescription beanDesc,List\u003cBeanPropertyDefinition\u003e properties){\n  AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  HashMap\u003cClass\u003c?\u003e,Boolean\u003e ignores\u003dnew HashMap\u003cClass\u003c?\u003e,Boolean\u003e();\n  Iterator\u003cBeanPropertyDefinition\u003e it\u003dproperties.iterator();\n  while (it.hasNext()) {\n    BeanPropertyDefinition property\u003dit.next();\n    AnnotatedMember accessor\u003dproperty.getAccessor();\n    if (accessor \u003d\u003d null) {\n      it.remove();\n      continue;\n    }\n    Class\u003c?\u003e type\u003dproperty.getRawPrimaryType();\n    Boolean result\u003dignores.get(type);\n    if (result \u003d\u003d null) {\n      result\u003dconfig.getConfigOverride(type).getIsIgnoredType();\n      if (result \u003d\u003d null) {\n        BeanDescription desc\u003dconfig.introspectClassAnnotations(type);\n        AnnotatedClass ac\u003ddesc.getClassInfo();\n        result\u003dintr.isIgnorableType(ac);\n        if (result \u003d\u003d null) {\n          result\u003dBoolean.FALSE;\n        }\n      }\n      ignores.put(type,result);\n    }\n    if (result.booleanValue()) {\n      it.remove();\n    }\n  }\n}",
    "begin_line": 667,
    "end_line": 705,
    "comment": "/** \n * Method that will apply by-type limitations (as per [JACKSON-429]); by default this is based on  {@link com.fasterxml.jackson.annotation.JsonIgnoreType}annotation but can be supplied by module-provided introspectors too. Starting with 2.8 there are also \"Config overrides\" to consider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeSetterlessGetters#710",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeSetterlessGetters(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.BeanDescription, java.util.List\u003ccom.fasterxml.jackson.databind.introspect.BeanPropertyDefinition\u003e)",
    "snippet": "protected void removeSetterlessGetters(SerializationConfig config,BeanDescription beanDesc,List\u003cBeanPropertyDefinition\u003e properties){\n  Iterator\u003cBeanPropertyDefinition\u003e it\u003dproperties.iterator();\n  while (it.hasNext()) {\n    BeanPropertyDefinition property\u003dit.next();\n    if (!property.couldDeserialize() \u0026\u0026 !property.isExplicitlyIncluded()) {\n      it.remove();\n    }\n  }\n}",
    "begin_line": 710,
    "end_line": 722,
    "comment": "/** \n * Helper method that will remove all properties that do not have a mutator.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory.removeOverlappingTypeIds#730",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory.removeOverlappingTypeIds(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanDescription, com.fasterxml.jackson.databind.ser.BeanSerializerBuilder, java.util.List\u003ccom.fasterxml.jackson.databind.ser.BeanPropertyWriter\u003e)",
    "snippet": "protected List\u003cBeanPropertyWriter\u003e removeOverlappingTypeIds(SerializerProvider prov,BeanDescription beanDesc,BeanSerializerBuilder builder,List\u003cBeanPropertyWriter\u003e props){\n  for (int i\u003d0, end\u003dprops.size(); i \u003c end; ++i) {\n    BeanPropertyWriter bpw\u003dprops.get(i);\n    TypeSerializer td\u003dbpw.getTypeSerializer();\n    if ((td \u003d\u003d null) || (td.getTypeInclusion() !\u003d As.EXTERNAL_PROPERTY)) {\n      continue;\n    }\n    String n\u003dtd.getPropertyName();\n    PropertyName typePropName\u003dPropertyName.construct(n);\n    for (    BeanPropertyWriter w2 : props) {\n      if ((w2 !\u003d bpw) \u0026\u0026 w2.wouldConflictWithName(typePropName)) {\n        bpw.assignTypeSerializer(null);\n        break;\n      }\n    }\n  }\n  return props;\n}",
    "begin_line": 730,
    "end_line": 751,
    "comment": "/** \n * Helper method called to ensure that we do not have \"duplicate\" type ids. Added to resolve [databind#222]\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanSerializerFactory._constructWriter#763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.BeanSerializerFactory._constructWriter(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, com.fasterxml.jackson.databind.ser.PropertyBuilder, boolean, com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
    "snippet": "protected BeanPropertyWriter _constructWriter(SerializerProvider prov,BeanPropertyDefinition propDef,PropertyBuilder pb,boolean staticTyping,AnnotatedMember accessor) throws JsonMappingException {\n  final PropertyName name\u003dpropDef.getFullName();\n  JavaType type\u003daccessor.getType();\n  BeanProperty.Std property\u003dnew BeanProperty.Std(name,type,propDef.getWrapperName(),accessor,propDef.getMetadata());\n  JsonSerializer\u003c?\u003e annotatedSerializer\u003dfindSerializerFromAnnotation(prov,accessor);\n  if (annotatedSerializer instanceof ResolvableSerializer) {\n    ((ResolvableSerializer)annotatedSerializer).resolve(prov);\n  }\n  annotatedSerializer\u003dprov.handlePrimaryContextualization(annotatedSerializer,property);\n  TypeSerializer contentTypeSer\u003dnull;\n  if (type.isContainerType() || type.isReferenceType()) {\n    contentTypeSer\u003dfindPropertyContentTypeSerializer(type,prov.getConfig(),accessor);\n  }\n  TypeSerializer typeSer\u003dfindPropertyTypeSerializer(type,prov.getConfig(),accessor);\n  return pb.buildWriter(prov,propDef,type,annotatedSerializer,typeSer,contentTypeSer,accessor,staticTyping);\n}",
    "begin_line": 763,
    "end_line": 793,
    "comment": "/** \n * Secondary helper method for constructing  {@link BeanPropertyWriter} forgiven member (field or method).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider()",
    "snippet": "protected DefaultSerializerProvider(){\n  super();\n}",
    "begin_line": 66,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected DefaultSerializerProvider(SerializerProvider src,SerializationConfig config,SerializerFactory f){\n  super(src,config,f);\n}",
    "begin_line": 68,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.DefaultSerializerProvider#73",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.DefaultSerializerProvider(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider)",
    "snippet": "protected DefaultSerializerProvider(DefaultSerializerProvider src){\n  super(src);\n}",
    "begin_line": 73,
    "end_line": 75,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.createInstance#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "public abstract DefaultSerializerProvider createInstance(SerializationConfig config,SerializerFactory jsf);",
    "begin_line": 82,
    "end_line": 83,
    "comment": "/** \n * Method that sub-classes need to implement: used to create a non-blueprint instances from the blueprint. This is needed to retain state during serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.copy#93",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()",
    "snippet": "public DefaultSerializerProvider copy(){\n  throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\");\n}",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Method needed to ensure that  {@link ObjectMapper#copy} will workproperly; specifically, that caches are cleared, but settings will otherwise remain identical; and that no sharing of state occurs.\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializerInstance#104",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializerInstance(com.fasterxml.jackson.databind.introspect.Annotated, java.lang.Object)",
    "snippet": "@Override public JsonSerializer\u003cObject\u003e serializerInstance(Annotated annotated,Object serDef) throws JsonMappingException {\n  if (serDef \u003d\u003d null) {\n    return null;\n  }\n  JsonSerializer\u003c?\u003e ser;\n  if (serDef instanceof JsonSerializer) {\n    ser\u003d(JsonSerializer\u003c?\u003e)serDef;\n  }\n else {\n    if (!(serDef instanceof Class)) {\n      reportBadDefinition(annotated.getType(),\"AnnotationIntrospector returned serializer definition of type \" + serDef.getClass().getName() + \"; expected type JsonSerializer or Class\u003cJsonSerializer\u003e instead\");\n    }\n    Class\u003c?\u003e serClass\u003d(Class\u003c?\u003e)serDef;\n    if (serClass \u003d\u003d JsonSerializer.None.class || ClassUtil.isBogusClass(serClass)) {\n      return null;\n    }\n    if (!JsonSerializer.class.isAssignableFrom(serClass)) {\n      reportBadDefinition(annotated.getType(),\"AnnotationIntrospector returned Class \" + serClass.getName() + \"; expected Class\u003cJsonSerializer\u003e\");\n    }\n    HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n    ser\u003d(hi \u003d\u003d null) ? null : hi.serializerInstance(_config,annotated,serClass);\n    if (ser \u003d\u003d null) {\n      ser\u003d(JsonSerializer\u003c?\u003e)ClassUtil.createInstance(serClass,_config.canOverrideAccessModifiers());\n    }\n  }\n  return (JsonSerializer\u003cObject\u003e)_handleResolvable(ser);\n}",
    "begin_line": 104,
    "end_line": 140,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.includeFilterInstance#143",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterInstance(com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition, java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public Object includeFilterInstance(BeanPropertyDefinition forProperty,Class\u003c?\u003e filterClass){\n  if (filterClass \u003d\u003d null) {\n    return null;\n  }\n  HandlerInstantiator hi\u003d_config.getHandlerInstantiator();\n  Object filter\u003d(hi \u003d\u003d null) ? null : hi.includeFilterInstance(_config,forProperty,filterClass);\n  if (filter \u003d\u003d null) {\n    filter\u003dClassUtil.createInstance(filterClass,_config.canOverrideAccessModifiers());\n  }\n  return filter;\n}",
    "begin_line": 143,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.includeFilterSuppressNulls#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.includeFilterSuppressNulls(java.lang.Object)",
    "snippet": "@Override public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException {\n  if (filter \u003d\u003d null) {\n    return true;\n  }\n  try {\n    return filter.equals(null);\n  }\n catch (  Throwable t) {\n    String msg\u003dString.format(\"Problem determining whether filter of type \u0027%s\u0027 should filter out `null` values: (%s) %s\",filter.getClass().getName(),t.getClass().getName(),ClassUtil.exceptionMessage(t));\n    reportBadDefinition(filter.getClass(),msg,t);\n    return false;\n  }\n}",
    "begin_line": 159,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.findObjectId#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.findObjectId(java.lang.Object, ObjectIdGenerator\u003c?\u003e)",
    "snippet": "@Override public WritableObjectId findObjectId(Object forPojo,ObjectIdGenerator\u003c?\u003e generatorType){\n  if (_seenObjectIds \u003d\u003d null) {\n    _seenObjectIds\u003d_createObjectIdMap();\n  }\n else {\n    WritableObjectId oid\u003d_seenObjectIds.get(forPojo);\n    if (oid !\u003d null) {\n      return oid;\n    }\n  }\n  ObjectIdGenerator\u003c?\u003e generator\u003dnull;\n  if (_objectIdGenerators \u003d\u003d null) {\n    _objectIdGenerators\u003dnew ArrayList\u003cObjectIdGenerator\u003c?\u003e\u003e(8);\n  }\n else {\n    for (int i\u003d0, len\u003d_objectIdGenerators.size(); i \u003c len; ++i) {\n      ObjectIdGenerator\u003c?\u003e gen\u003d_objectIdGenerators.get(i);\n      if (gen.canUseFor(generatorType)) {\n        generator\u003dgen;\n        break;\n      }\n    }\n  }\n  if (generator \u003d\u003d null) {\n    generator\u003dgeneratorType.newForSerialization(this);\n    _objectIdGenerators.add(generator);\n  }\n  WritableObjectId oid\u003dnew WritableObjectId(generator);\n  _seenObjectIds.put(forPojo,oid);\n  return oid;\n}",
    "begin_line": 184,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._createObjectIdMap#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._createObjectIdMap()",
    "snippet": "protected Map\u003cObject,WritableObjectId\u003e _createObjectIdMap(){\n  if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID)) {\n    return new HashMap\u003cObject,WritableObjectId\u003e();\n  }\n  return new IdentityHashMap\u003cObject,WritableObjectId\u003e();\n}",
    "begin_line": 224,
    "end_line": 233,
    "comment": "/** \n * Overridable helper method used for creating  {@link java.util.Map}used for storing mappings from serializable objects to their Object Ids.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.hasSerializerFor#248",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.hasSerializerFor(java.lang.Class\u003c?\u003e, java.util.concurrent.atomic.AtomicReference\u003cjava.lang.Throwable\u003e)",
    "snippet": "public boolean hasSerializerFor(Class\u003c?\u003e cls,AtomicReference\u003cThrowable\u003e cause){\n  if (cls \u003d\u003d Object.class) {\n    if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n      return true;\n    }\n  }\n  try {\n    JsonSerializer\u003c?\u003e ser\u003d_findExplicitUntypedSerializer(cls);\n    return (ser !\u003d null);\n  }\n catch (  JsonMappingException e) {\n    if (cause !\u003d null) {\n      cause.set(e);\n    }\n  }\ncatch (  RuntimeException e) {\n    if (cause \u003d\u003d null) {\n      throw e;\n    }\n    cause.set(e);\n  }\n  return false;\n}",
    "begin_line": 248,
    "end_line": 273,
    "comment": "/** \n * Method that can be called to see if this serializer provider can find a serializer for an instance of given class. \u003cp\u003e Note that no Exceptions are thrown, including unchecked ones: implementations are to swallow exceptions if necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.getGenerator#283",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.getGenerator()",
    "snippet": "@Override public JsonGenerator getGenerator(){\n  return _generator;\n}",
    "begin_line": 283,
    "end_line": 285,
    "comment": "/** \n * Accessor for the  {@link JsonGenerator} currently in use for serializingcontent. Null for blueprint instances; non-null for actual active provider instances.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object)",
    "snippet": "public void serializeValue(JsonGenerator gen,Object value) throws IOException {\n  _generator\u003dgen;\n  if (value \u003d\u003d null) {\n    _serializeNull(gen);\n    return;\n  }\n  final Class\u003c?\u003e cls\u003dvalue.getClass();\n  final JsonSerializer\u003cObject\u003e ser\u003dfindTypedValueSerializer(cls,true,null);\n  PropertyName rootName\u003d_config.getFullRootName();\n  if (rootName \u003d\u003d null) {\n    if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n      _serialize(gen,value,ser,_config.findRootName(cls));\n      return;\n    }\n  }\n else   if (!rootName.isEmpty()) {\n    _serialize(gen,value,ser,rootName);\n    return;\n  }\n  _serialize(gen,value,ser);\n}",
    "begin_line": 299,
    "end_line": 320,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}for serializing given value, using serializers that this provider has access to (via caching and/or creating new serializers as need be).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#333",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public void serializeValue(JsonGenerator gen,Object value,JavaType rootType) throws IOException {\n  _generator\u003dgen;\n  if (value \u003d\u003d null) {\n    _serializeNull(gen);\n    return;\n  }\n  if (!rootType.getRawClass().isAssignableFrom(value.getClass())) {\n    _reportIncompatibleRootType(value,rootType);\n  }\n  JsonSerializer\u003cObject\u003e ser\u003dfindTypedValueSerializer(rootType,true,null);\n  PropertyName rootName\u003d_config.getFullRootName();\n  if (rootName \u003d\u003d null) {\n    if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n      _serialize(gen,value,ser,_config.findRootName(rootType));\n      return;\n    }\n  }\n else   if (!rootName.isEmpty()) {\n    _serialize(gen,value,ser,rootName);\n    return;\n  }\n  _serialize(gen,value,ser);\n}",
    "begin_line": 333,
    "end_line": 357,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}for serializing given value (assumed to be of specified root type, instead of runtime type of value), using serializers that this provider has access to (via caching and/or creating new serializers as need be),\n * @param rootType Type to use for locating serializer to use, instead of actualruntime type. Must be actual type, or one of its super types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializeValue#371",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void serializeValue(JsonGenerator gen,Object value,JavaType rootType,JsonSerializer\u003cObject\u003e ser) throws IOException {\n  _generator\u003dgen;\n  if (value \u003d\u003d null) {\n    _serializeNull(gen);\n    return;\n  }\n  if ((rootType !\u003d null) \u0026\u0026 !rootType.getRawClass().isAssignableFrom(value.getClass())) {\n    _reportIncompatibleRootType(value,rootType);\n  }\n  if (ser \u003d\u003d null) {\n    ser\u003dfindTypedValueSerializer(rootType,true,null);\n  }\n  PropertyName rootName\u003d_config.getFullRootName();\n  if (rootName \u003d\u003d null) {\n    if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) {\n      rootName\u003d(rootType \u003d\u003d null) ? _config.findRootName(value.getClass()) : _config.findRootName(rootType);\n      _serialize(gen,value,ser,rootName);\n      return;\n    }\n  }\n else   if (!rootName.isEmpty()) {\n    _serialize(gen,value,ser,rootName);\n    return;\n  }\n  _serialize(gen,value,ser);\n}",
    "begin_line": 371,
    "end_line": 401,
    "comment": "/** \n * The method to be called by  {@link ObjectWriter}for serializing given value (assumed to be of specified root type, instead of runtime type of value), when it may know specific {@link JsonSerializer} to use.\n * @param rootType Type to use for locating serializer to use, instead of actualruntime type, if no serializer is passed\n * @param ser Root Serializer to use, if not null\n * @since 2.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.serializePolymorphic#409",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializePolymorphic(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "public void serializePolymorphic(JsonGenerator gen,Object value,JavaType rootType,JsonSerializer\u003cObject\u003e valueSer,TypeSerializer typeSer) throws IOException {\n  _generator\u003dgen;\n  if (value \u003d\u003d null) {\n    _serializeNull(gen);\n    return;\n  }\n  if ((rootType !\u003d null) \u0026\u0026 !rootType.getRawClass().isAssignableFrom(value.getClass())) {\n    _reportIncompatibleRootType(value,rootType);\n  }\n  if (valueSer \u003d\u003d null) {\n    if ((rootType !\u003d null) \u0026\u0026 rootType.isContainerType()) {\n      valueSer\u003dfindValueSerializer(rootType,null);\n    }\n else {\n      valueSer\u003dfindValueSerializer(value.getClass(),null);\n    }\n  }\n  final boolean wrap;\n  PropertyName rootName\u003d_config.getFullRootName();\n  if (rootName \u003d\u003d null) {\n    wrap\u003d_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);\n    if (wrap) {\n      gen.writeStartObject();\n      PropertyName pname\u003d_config.findRootName(value.getClass());\n      gen.writeFieldName(pname.simpleAsEncoded(_config));\n    }\n  }\n else   if (rootName.isEmpty()) {\n    wrap\u003dfalse;\n  }\n else {\n    wrap\u003dtrue;\n    gen.writeStartObject();\n    gen.writeFieldName(rootName.getSimpleName());\n  }\n  try {\n    valueSer.serializeWithType(value,gen,this,typeSer);\n    if (wrap) {\n      gen.writeEndObject();\n    }\n  }\n catch (  Exception e) {\n    throw _wrapAsIOE(gen,e);\n  }\n}",
    "begin_line": 409,
    "end_line": 459,
    "comment": "/** \n * Alternate serialization call used for polymorphic types, when  {@link TypeSerializer}is already known, but the actual serializer may or may not be.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serialize#461",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.PropertyName)",
    "snippet": "private final void _serialize(JsonGenerator gen,Object value,JsonSerializer\u003cObject\u003e ser,PropertyName rootName) throws IOException {\n  try {\n    gen.writeStartObject();\n    gen.writeFieldName(rootName.simpleAsEncoded(_config));\n    ser.serialize(value,gen,this);\n    gen.writeEndObject();\n  }\n catch (  Exception e) {\n    throw _wrapAsIOE(gen,e);\n  }\n}",
    "begin_line": 461,
    "end_line": 473,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serialize#475",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(JsonGenerator, java.lang.Object, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "private final void _serialize(JsonGenerator gen,Object value,JsonSerializer\u003cObject\u003e ser) throws IOException {\n  try {\n    ser.serialize(value,gen,this);\n  }\n catch (  Exception e) {\n    throw _wrapAsIOE(gen,e);\n  }\n}",
    "begin_line": 475,
    "end_line": 484,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._serializeNull#491",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serializeNull(JsonGenerator)",
    "snippet": "protected void _serializeNull(JsonGenerator gen) throws IOException {\n  JsonSerializer\u003cObject\u003e ser\u003dgetDefaultNullValueSerializer();\n  try {\n    ser.serialize(null,gen,this);\n  }\n catch (  Exception e) {\n    throw _wrapAsIOE(gen,e);\n  }\n}",
    "begin_line": 491,
    "end_line": 499,
    "comment": "/** \n * Helper method called when root value to serialize is null\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider._wrapAsIOE#501",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._wrapAsIOE(JsonGenerator, java.lang.Exception)",
    "snippet": "private IOException _wrapAsIOE(JsonGenerator g,Exception e){\n  if (e instanceof IOException) {\n    return (IOException)e;\n  }\n  String msg\u003dClassUtil.exceptionMessage(e);\n  if (msg \u003d\u003d null) {\n    msg\u003d\"[no message for \" + e.getClass().getName() + \"]\";\n  }\n  return new JsonMappingException(g,msg,e);\n}",
    "begin_line": 501,
    "end_line": 510,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.cachedSerializersCount#529",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.cachedSerializersCount()",
    "snippet": "public int cachedSerializersCount(){\n  return _serializerCache.size();\n}",
    "begin_line": 529,
    "end_line": 531,
    "comment": "/** \n * Method that can be used to determine how many serializers this provider is caching currently (if it does caching: default implementation does) Exact count depends on what kind of serializers get cached; default implementation caches all serializers, including ones that are eagerly constructed (for optimal access speed) \u003cp\u003e  The main use case for this method is to allow conditional flushing of serializer cache, if certain number of entries is reached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.flushCachedSerializers#539",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.flushCachedSerializers()",
    "snippet": "public void flushCachedSerializers(){\n  _serializerCache.flush();\n}",
    "begin_line": 539,
    "end_line": 541,
    "comment": "/** \n * Method that will drop all serializers currently cached by this provider. This can be used to remove memory usage (in case some serializers are only used once or so), or to force re-construction of serializers after configuration changes for mapper than owns the provider.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.acceptJsonFormatVisitor#556",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper)",
    "snippet": "public void acceptJsonFormatVisitor(JavaType javaType,JsonFormatVisitorWrapper visitor) throws JsonMappingException {\n  if (javaType \u003d\u003d null) {\n    throw new IllegalArgumentException(\"A class must be provided\");\n  }\n  visitor.setProvider(this);\n  findValueSerializer(javaType,null).acceptJsonFormatVisitor(visitor,javaType);\n}",
    "begin_line": 556,
    "end_line": 567,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper} and {@link ObjectWriter}to to expose the format of the given to to the given visitor\n * @param javaType The type for which to generate format\n * @param visitor the visitor to accept the format\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultSerializerProvider.generateJsonSchema#579",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.generateJsonSchema(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class\u003c?\u003e type) throws JsonMappingException {\n  JsonSerializer\u003cObject\u003e ser\u003dfindValueSerializer(type,null);\n  JsonNode schemaNode\u003d(ser instanceof SchemaAware) ? ((SchemaAware)ser).getSchema(this,null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode();\n  if (!(schemaNode instanceof ObjectNode)) {\n    throw new IllegalArgumentException(\"Class \" + type.getName() + \" would not be serialized as a JSON object and therefore has no schema\");\n  }\n  return new com.fasterxml.jackson.databind.jsonschema.JsonSchema((ObjectNode)schemaNode);\n}",
    "begin_line": 579,
    "end_line": 593,
    "comment": "/** \n * The method to be called by  {@link ObjectMapper}to generate \u003ca href\u003d\"http://json-schema.org/\"\u003eJSON schema\u003c/a\u003e for given type.\n * @param type The type for which to generate schema\n * @deprecated Should not be used any more\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#609",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl()",
    "snippet": "public Impl(){\n  super();\n}",
    "begin_line": 609,
    "end_line": 609,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#610",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl(com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl)",
    "snippet": "public Impl(Impl src){\n  super(src);\n}",
    "begin_line": 610,
    "end_line": 610,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.Impl#612",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.Impl(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "protected Impl(SerializerProvider src,SerializationConfig config,SerializerFactory f){\n  super(src,config,f);\n}",
    "begin_line": 612,
    "end_line": 615,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.copy#618",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.copy()",
    "snippet": "@Override public DefaultSerializerProvider copy(){\n  if (getClass() !\u003d Impl.class) {\n    return super.copy();\n  }\n  return new Impl(this);\n}",
    "begin_line": 618,
    "end_line": 624,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Impl.createInstance#627",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "class_name": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider",
    "signature": "com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.createInstance(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.ser.SerializerFactory)",
    "snippet": "@Override public Impl createInstance(SerializationConfig config,SerializerFactory jsf){\n  return new Impl(this,config,jsf);\n}",
    "begin_line": 627,
    "end_line": 629,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.SerializerCache#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.SerializerCache()",
    "snippet": "public SerializerCache(){\n}",
    "begin_line": 42,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.getReadOnlyLookupMap#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.getReadOnlyLookupMap()",
    "snippet": "public ReadOnlyClassToSerializerMap getReadOnlyLookupMap(){\n  ReadOnlyClassToSerializerMap m\u003d_readOnlyMap.get();\n  if (m !\u003d null) {\n    return m;\n  }\n  return _makeReadOnlyLookupMap();\n}",
    "begin_line": 48,
    "end_line": 55,
    "comment": "/** \n * Method that can be called to get a read-only instance populated from the most recent version of the shared lookup Map.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache._makeReadOnlyLookupMap#57",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache._makeReadOnlyLookupMap()",
    "snippet": "private final synchronized ReadOnlyClassToSerializerMap _makeReadOnlyLookupMap(){\n  ReadOnlyClassToSerializerMap m\u003d_readOnlyMap.get();\n  if (m \u003d\u003d null) {\n    m\u003dReadOnlyClassToSerializerMap.from(_sharedMap);\n    _readOnlyMap.set(m);\n  }\n  return m;\n}",
    "begin_line": 57,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.size#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.size()",
    "snippet": "public synchronized int size(){\n  return _sharedMap.size();\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.untypedValueSerializer#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e untypedValueSerializer(Class\u003c?\u003e type){\nsynchronized (this) {\n    return _sharedMap.get(new TypeKey(type,false));\n  }\n}",
    "begin_line": 82,
    "end_line": 87,
    "comment": "/** \n * Method that checks if the shared (and hence, synchronized) lookup Map might have untyped serializer for given type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.untypedValueSerializer#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.untypedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e untypedValueSerializer(JavaType type){\nsynchronized (this) {\n    return _sharedMap.get(new TypeKey(type,false));\n  }\n}",
    "begin_line": 89,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.typedValueSerializer#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JsonSerializer\u003cObject\u003e typedValueSerializer(JavaType type){\nsynchronized (this) {\n    return _sharedMap.get(new TypeKey(type,true));\n  }\n}",
    "begin_line": 96,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.typedValueSerializer#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.typedValueSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public JsonSerializer\u003cObject\u003e typedValueSerializer(Class\u003c?\u003e cls){\nsynchronized (this) {\n    return _sharedMap.get(new TypeKey(cls,true));\n  }\n}",
    "begin_line": 103,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addTypedSerializer#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void addTypedSerializer(JavaType type,JsonSerializer\u003cObject\u003e ser){\nsynchronized (this) {\n    if (_sharedMap.put(new TypeKey(type,true),ser) \u003d\u003d null) {\n      _readOnlyMap.set(null);\n    }\n  }\n}",
    "begin_line": 121,
    "end_line": 129,
    "comment": "/** \n * Method called if none of lookups succeeded, and caller had to construct a serializer. If so, we will update the shared lookup map so that it can be resolved via it next time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addTypedSerializer#131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public void addTypedSerializer(Class\u003c?\u003e cls,JsonSerializer\u003cObject\u003e ser){\nsynchronized (this) {\n    if (_sharedMap.put(new TypeKey(cls,true),ser) \u003d\u003d null) {\n      _readOnlyMap.set(null);\n    }\n  }\n}",
    "begin_line": 131,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#141",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(Class\u003c?\u003e type,JsonSerializer\u003cObject\u003e ser,SerializerProvider provider) throws JsonMappingException {\nsynchronized (this) {\n    if (_sharedMap.put(new TypeKey(type,false),ser) \u003d\u003d null) {\n      _readOnlyMap.set(null);\n    }\n    if (ser instanceof ResolvableSerializer) {\n      ((ResolvableSerializer)ser).resolve(provider);\n    }\n  }\n}",
    "begin_line": 141,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(JavaType type,JsonSerializer\u003cObject\u003e ser,SerializerProvider provider) throws JsonMappingException {\nsynchronized (this) {\n    if (_sharedMap.put(new TypeKey(type,false),ser) \u003d\u003d null) {\n      _readOnlyMap.set(null);\n    }\n    if (ser instanceof ResolvableSerializer) {\n      ((ResolvableSerializer)ser).resolve(provider);\n    }\n  }\n}",
    "begin_line": 160,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.addAndResolveNonTypedSerializer#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.addAndResolveNonTypedSerializer(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "public void addAndResolveNonTypedSerializer(Class\u003c?\u003e rawType,JavaType fullType,JsonSerializer\u003cObject\u003e ser,SerializerProvider provider) throws JsonMappingException {\nsynchronized (this) {\n    Object ob1\u003d_sharedMap.put(new TypeKey(rawType,false),ser);\n    Object ob2\u003d_sharedMap.put(new TypeKey(fullType,false),ser);\n    if ((ob1 \u003d\u003d null) || (ob2 \u003d\u003d null)) {\n      _readOnlyMap.set(null);\n    }\n    if (ser instanceof ResolvableSerializer) {\n      ((ResolvableSerializer)ser).resolve(provider);\n    }\n  }\n}",
    "begin_line": 185,
    "end_line": 200,
    "comment": "/** \n * Another alternative that will cover both access via raw type and matching fully resolved type, in one fell swoop.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerCache.flush#206",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerCache.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerCache",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerCache.flush()",
    "snippet": "public synchronized void flush(){\n  _sharedMap.clear();\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Method called by StdSerializerProvider#flushCachedSerializers() to clear all cached serializers\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withAdditionalSerializers#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalSerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public abstract SerializerFactory withAdditionalSerializers(Serializers additional);",
    "begin_line": 26,
    "end_line": 26,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional serializer provider; equivalent to calling \u003cpre\u003e withConfig(getConfig().withAdditionalSerializers(additional)); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withAdditionalKeySerializers#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withAdditionalKeySerializers(com.fasterxml.jackson.databind.ser.Serializers)",
    "snippet": "public abstract SerializerFactory withAdditionalKeySerializers(Serializers additional);",
    "begin_line": 28,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.withSerializerModifier#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.withSerializerModifier(com.fasterxml.jackson.databind.ser.BeanSerializerModifier)",
    "snippet": "public abstract SerializerFactory withSerializerModifier(BeanSerializerModifier modifier);",
    "begin_line": 37,
    "end_line": 37,
    "comment": "/** \n * Convenience method for creating a new factory instance with additional bean serializer modifier; equivalent to calling \u003cpre\u003e withConfig(getConfig().withSerializerModifier(modifier)); \u003c/pre\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createSerializer#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e createSerializer(SerializerProvider prov,JavaType baseType) throws JsonMappingException ;",
    "begin_line": 53,
    "end_line": 55,
    "comment": "/** \n * Method called to create (or, for immutable serializers, reuse) a serializer for given type. \n * @param prov Provider that needs to be used to resolve annotation-providedserializers (but NOT for others)\n * @since 2.1 (earlier versions had method with different signature)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createTypeSerializer#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createTypeSerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public abstract TypeSerializer createTypeSerializer(SerializationConfig config,JavaType baseType) throws JsonMappingException ;",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Method called to create a type information serializer for given base type, if one is needed. If not needed (no polymorphic handling configured), should return null.\n * @param baseType Declared type to use as the base type for type information serializer\n * @return Type serializer to use for the base type, if one is needed; null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerializerFactory.createKeySerializer#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/SerializerFactory.java",
    "class_name": "com.fasterxml.jackson.databind.ser.SerializerFactory",
    "signature": "com.fasterxml.jackson.databind.ser.SerializerFactory.createKeySerializer(com.fasterxml.jackson.databind.SerializationConfig, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003cjava.lang.Object\u003e)",
    "snippet": "public abstract JsonSerializer\u003cObject\u003e createKeySerializer(SerializationConfig config,JavaType type,JsonSerializer\u003cObject\u003e defaultImpl) throws JsonMappingException ;",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Method called to create serializer to use for serializing JSON property names (which must be output as \u003ccode\u003eJsonToken.FIELD_NAME\u003c/code\u003e) for Map that has specified declared key type, and is for specified property (or, if property is null, as root value)\n * @param type Declared type for Map keys\n * @param defaultImpl Default key serializer implementation to use, if no custom onesare found (may be null)\n * @return Serializer to use, if factory knows it; null if not (in which case defaultserializer is to be used)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.FailingSerializer#27",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.FailingSerializer(java.lang.String)",
    "snippet": "public FailingSerializer(String msg){\n  super(Object.class);\n  _msg\u003dmsg;\n}",
    "begin_line": 27,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.serialize#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  provider.reportMappingProblem(_msg);\n}",
    "begin_line": 33,
    "end_line": 36,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.getSchema#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return null;\n}",
    "begin_line": 39,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FailingSerializer.acceptJsonFormatVisitor#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/FailingSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.FailingSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint){\n  ;\n}",
    "begin_line": 44,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.UnknownSerializer#17",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.UnknownSerializer()",
    "snippet": "public UnknownSerializer(){\n  super(Object.class);\n}",
    "begin_line": 17,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.UnknownSerializer#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.UnknownSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public UnknownSerializer(Class\u003c?\u003e cls){\n  super(cls,false);\n}",
    "begin_line": 24,
    "end_line": 26,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.serialize#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n    failForEmpty(provider,value);\n  }\n  gen.writeStartObject();\n  gen.writeEndObject();\n}",
    "begin_line": 29,
    "end_line": 38,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.serializeWithType#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public final void serializeWithType(Object value,JsonGenerator gen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  if (provider.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) {\n    failForEmpty(provider,value);\n  }\n  WritableTypeId typeIdDef\u003dtypeSer.writeTypePrefix(gen,typeSer.typeId(value,JsonToken.START_OBJECT));\n  typeSer.writeTypeSuffix(gen,typeIdDef);\n}",
    "begin_line": 41,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.isEmpty#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override public boolean isEmpty(SerializerProvider provider,Object value){\n  return true;\n}",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.getSchema#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return null;\n}",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.acceptJsonFormatVisitor#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectAnyFormat(typeHint);\n}",
    "begin_line": 63,
    "end_line": 67,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnknownSerializer.failForEmpty#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/impl/UnknownSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "protected void failForEmpty(SerializerProvider prov,Object value) throws JsonMappingException {\n  prov.reportBadDefinition(handledType(),String.format(\"No serializer found for class %s and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)\",value.getClass().getName()));\n}",
    "begin_line": 69,
    "end_line": 74,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.BooleanSerializer#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.BooleanSerializer(boolean)",
    "snippet": "public BooleanSerializer(boolean forPrimitive){\n  super(forPrimitive ? Boolean.TYPE : Boolean.class,false);\n  _forPrimitive\u003dforPrimitive;\n}",
    "begin_line": 41,
    "end_line": 44,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.createContextual#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,BeanProperty property) throws JsonMappingException {\n  JsonFormat.Value format\u003dfindFormatOverrides(serializers,property,Boolean.class);\n  if (format !\u003d null) {\n    JsonFormat.Shape shape\u003dformat.getShape();\n    if (shape.isNumeric()) {\n      return new AsNumber(_forPrimitive);\n    }\n  }\n  return this;\n}",
    "begin_line": 47,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.serialize#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  g.writeBoolean(Boolean.TRUE.equals(value));\n}",
    "begin_line": 62,
    "end_line": 64,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.serializeWithType#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public final void serializeWithType(Object value,JsonGenerator g,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  g.writeBoolean(Boolean.TRUE.equals(value));\n}",
    "begin_line": 67,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.getSchema#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(\"boolean\",!_forPrimitive);\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanSerializer.acceptJsonFormatVisitor#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectBooleanFormat(typeHint);\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.AsNumber#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.AsNumber(boolean)",
    "snippet": "public AsNumber(boolean forPrimitive){\n  super(forPrimitive ? Boolean.TYPE : Boolean.class,false);\n  _forPrimitive\u003dforPrimitive;\n}",
    "begin_line": 101,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.serialize#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  g.writeNumber((Boolean.FALSE.equals(value)) ? 0 : 1);\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.serializeWithType#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public final void serializeWithType(Object value,JsonGenerator g,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  g.writeBoolean(Boolean.TRUE.equals(value));\n}",
    "begin_line": 112,
    "end_line": 120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.acceptJsonFormatVisitor#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitIntFormat(visitor,typeHint,NumberType.INT);\n}",
    "begin_line": 123,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsNumber.createContextual#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/BooleanSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.BooleanSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,BeanProperty property) throws JsonMappingException {\n  JsonFormat.Value format\u003dfindFormatOverrides(serializers,property,Boolean.class);\n  if (format !\u003d null) {\n    JsonFormat.Shape shape\u003dformat.getShape();\n    if (!shape.isNumeric()) {\n      return new BooleanSerializer(_forPrimitive);\n    }\n  }\n  return this;\n}",
    "begin_line": 130,
    "end_line": 142,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.CalendarSerializer#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer()",
    "snippet": "public CalendarSerializer(){\n  this(null,null);\n}",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.CalendarSerializer#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.CalendarSerializer(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public CalendarSerializer(Boolean useTimestamp,DateFormat customFormat){\n  super(Calendar.class,useTimestamp,customFormat);\n}",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.withFormat#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "@Override public CalendarSerializer withFormat(Boolean timestamp,DateFormat customFormat){\n  return new CalendarSerializer(timestamp,customFormat);\n}",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer._timestamp#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer._timestamp(java.util.Calendar)",
    "snippet": "@Override protected long _timestamp(Calendar value){\n  return (value \u003d\u003d null) ? 0L : value.getTimeInMillis();\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CalendarSerializer.serialize#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/CalendarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.CalendarSerializer.serialize(java.util.Calendar, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Calendar value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  if (_asTimestamp(provider)) {\n    g.writeNumber(_timestamp(value));\n    return;\n  }\n  _serializeAsString(value.getTime(),g,provider);\n}",
    "begin_line": 40,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.DateSerializer#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.DateSerializer()",
    "snippet": "public DateSerializer(){\n  this(null,null);\n}",
    "begin_line": 26,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.DateSerializer#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.DateSerializer(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public DateSerializer(Boolean useTimestamp,DateFormat customFormat){\n  super(Date.class,useTimestamp,customFormat);\n}",
    "begin_line": 30,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.withFormat#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "@Override public DateSerializer withFormat(Boolean timestamp,DateFormat customFormat){\n  return new DateSerializer(timestamp,customFormat);\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer._timestamp#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer._timestamp(java.util.Date)",
    "snippet": "@Override protected long _timestamp(Date value){\n  return (value \u003d\u003d null) ? 0L : value.getTime();\n}",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateSerializer.serialize#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateSerializer.serialize(java.util.Date, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Date value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  if (_asTimestamp(provider)) {\n    g.writeNumber(_timestamp(value));\n    return;\n  }\n  _serializeAsString(value,g,provider);\n}",
    "begin_line": 45,
    "end_line": 52,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.DateTimeSerializerBase#50",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.DateTimeSerializerBase(java.lang.Class\u003cT\u003e, java.lang.Boolean, java.text.DateFormat)",
    "snippet": "protected DateTimeSerializerBase(Class\u003cT\u003e type,Boolean useTimestamp,DateFormat customFormat){\n  super(type);\n  _useTimestamp\u003duseTimestamp;\n  _customFormat\u003dcustomFormat;\n  _reusedCustomFormat\u003d(customFormat \u003d\u003d null) ? null : new AtomicReference\u003cDateFormat\u003e();\n}",
    "begin_line": 50,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.withFormat#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.withFormat(java.lang.Boolean, java.text.DateFormat)",
    "snippet": "public abstract DateTimeSerializerBase\u003cT\u003e withFormat(Boolean timestamp,DateFormat customFormat);",
    "begin_line": 59,
    "end_line": 59,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.createContextual#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e createContextual(SerializerProvider serializers,BeanProperty property) throws JsonMappingException {\n  JsonFormat.Value format\u003dfindFormatOverrides(serializers,property,handledType());\n  if (format \u003d\u003d null) {\n    return this;\n  }\n  JsonFormat.Shape shape\u003dformat.getShape();\n  if (shape.isNumeric()) {\n    return withFormat(Boolean.TRUE,null);\n  }\n  if (format.hasPattern()) {\n    final Locale loc\u003dformat.hasLocale() ? format.getLocale() : serializers.getLocale();\n    SimpleDateFormat df\u003dnew SimpleDateFormat(format.getPattern(),loc);\n    TimeZone tz\u003dformat.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone();\n    df.setTimeZone(tz);\n    return withFormat(Boolean.FALSE,df);\n  }\n  final boolean hasLocale\u003dformat.hasLocale();\n  final boolean hasTZ\u003dformat.hasTimeZone();\n  final boolean asString\u003d(shape \u003d\u003d JsonFormat.Shape.STRING);\n  if (!hasLocale \u0026\u0026 !hasTZ \u0026\u0026 !asString) {\n    return this;\n  }\n  DateFormat df0\u003dserializers.getConfig().getDateFormat();\n  if (df0 instanceof StdDateFormat) {\n    StdDateFormat std\u003d(StdDateFormat)df0;\n    if (format.hasLocale()) {\n      std\u003dstd.withLocale(format.getLocale());\n    }\n    if (format.hasTimeZone()) {\n      std\u003dstd.withTimeZone(format.getTimeZone());\n    }\n    return withFormat(Boolean.FALSE,std);\n  }\n  if (!(df0 instanceof SimpleDateFormat)) {\n    serializers.reportBadDefinition(handledType(),String.format(\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; cannot configure `Locale` or `TimeZone`\",df0.getClass().getName()));\n  }\n  SimpleDateFormat df\u003d(SimpleDateFormat)df0;\n  if (hasLocale) {\n    df\u003dnew SimpleDateFormat(df.toPattern(),format.getLocale());\n  }\n else {\n    df\u003d(SimpleDateFormat)df.clone();\n  }\n  TimeZone newTz\u003dformat.getTimeZone();\n  boolean changeTZ\u003d(newTz !\u003d null) \u0026\u0026 !newTz.equals(df.getTimeZone());\n  if (changeTZ) {\n    df.setTimeZone(newTz);\n  }\n  return withFormat(Boolean.FALSE,df);\n}",
    "begin_line": 62,
    "end_line": 133,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.isEmpty#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, T)",
    "snippet": "@Override public boolean isEmpty(SerializerProvider serializers,T value){\n  return false;\n}",
    "begin_line": 142,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._timestamp#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._timestamp(T)",
    "snippet": "protected abstract long _timestamp(T value);",
    "begin_line": 149,
    "end_line": 149,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.getSchema#152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider serializers,Type typeHint){\n  return createSchemaNode(_asTimestamp(serializers) ? \"number\" : \"string\",true);\n}",
    "begin_line": 152,
    "end_line": 155,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.acceptJsonFormatVisitor#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  _acceptJsonFormatVisitor(visitor,typeHint,_asTimestamp(visitor.getProvider()));\n}",
    "begin_line": 158,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase.serialize#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public abstract void serialize(T value,JsonGenerator gen,SerializerProvider serializers) throws IOException ;",
    "begin_line": 170,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._asTimestamp#179",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._asTimestamp(com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "protected boolean _asTimestamp(SerializerProvider serializers){\n  if (_useTimestamp !\u003d null) {\n    return _useTimestamp.booleanValue();\n  }\n  if (_customFormat \u003d\u003d null) {\n    if (serializers !\u003d null) {\n      return serializers.isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    }\n    throw new IllegalArgumentException(\"Null SerializerProvider passed for \" + handledType().getName());\n  }\n  return false;\n}",
    "begin_line": 179,
    "end_line": 192,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._acceptJsonFormatVisitor#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, boolean)",
    "snippet": "protected void _acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint,boolean asNumber) throws JsonMappingException {\n  if (asNumber) {\n    visitIntFormat(visitor,typeHint,JsonParser.NumberType.LONG,JsonValueFormat.UTC_MILLISEC);\n  }\n else {\n    visitStringFormat(visitor,typeHint,JsonValueFormat.DATE_TIME);\n  }\n}",
    "begin_line": 194,
    "end_line": 203,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTimeSerializerBase._serializeAsString#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase",
    "signature": "com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase._serializeAsString(java.util.Date, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "protected void _serializeAsString(Date value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  if (_customFormat \u003d\u003d null) {\n    provider.defaultSerializeDateValue(value,g);\n    return;\n  }\n  DateFormat f\u003d_reusedCustomFormat.getAndSet(null);\n  if (f \u003d\u003d null) {\n    f\u003d(DateFormat)_customFormat.clone();\n  }\n  g.writeString(f.format(value));\n  _reusedCustomFormat.compareAndSet(null,f);\n}",
    "begin_line": 208,
    "end_line": 228,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.NullSerializer#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.NullSerializer()",
    "snippet": "private NullSerializer(){\n  super(Object.class);\n}",
    "begin_line": 26,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.serialize#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNull();\n}",
    "begin_line": 29,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.serializeWithType#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(Object value,JsonGenerator gen,SerializerProvider serializers,TypeSerializer typeSer) throws IOException {\n  gen.writeNull();\n}",
    "begin_line": 40,
    "end_line": 45,
    "comment": "/** \n * Although this method should rarely get called, for convenience we should override it, and handle it same way as \"natural\" types: by serializing exactly as is, without type decorations. The most common possible use case is that of delegation by JSON filter; caller cannot know what kind of serializer it gets handed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.getSchema#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return createSchemaNode(\"null\");\n}",
    "begin_line": 48,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NullSerializer.acceptJsonFormatVisitor#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NullSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NullSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NullSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectNullFormat(typeHint);\n}",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.NumberSerializer#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.NumberSerializer(java.lang.Class\u003c? extends java.lang.Number\u003e)",
    "snippet": "public NumberSerializer(Class\u003c? extends Number\u003e rawType){\n  super(rawType,false);\n  _isInt\u003d(rawType \u003d\u003d BigInteger.class);\n}",
    "begin_line": 37,
    "end_line": 41,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.createContextual#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov,BeanProperty property) throws JsonMappingException {\n  JsonFormat.Value format\u003dfindFormatOverrides(prov,property,handledType());\n  if (format !\u003d null) {\nswitch (format.getShape()) {\ncase STRING:      return ToStringSerializer.instance;\ndefault:  }\n}\nreturn this;\n}",
    "begin_line": 44,
    "end_line": 56,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.serialize#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.serialize(java.lang.Number, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Number value,JsonGenerator g,SerializerProvider provider) throws IOException {\n  if (value instanceof BigDecimal) {\n    g.writeNumber((BigDecimal)value);\n  }\n else   if (value instanceof BigInteger) {\n    g.writeNumber((BigInteger)value);\n  }\n else   if (value instanceof Long) {\n    g.writeNumber(value.longValue());\n  }\n else   if (value instanceof Double) {\n    g.writeNumber(value.doubleValue());\n  }\n else   if (value instanceof Float) {\n    g.writeNumber(value.floatValue());\n  }\n else   if (value instanceof Integer || value instanceof Byte || value instanceof Short) {\n    g.writeNumber(value.intValue());\n  }\n else {\n    g.writeNumber(value.toString());\n  }\n}",
    "begin_line": 59,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.getSchema#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(_isInt ? \"integer\" : \"number\",true);\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializer.acceptJsonFormatVisitor#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  if (_isInt) {\n    visitIntFormat(visitor,typeHint,JsonParser.NumberType.BIG_INTEGER);\n  }\n else {\n    Class\u003c?\u003e h\u003dhandledType();\n    if (h \u003d\u003d BigDecimal.class) {\n      visitFloatFormat(visitor,typeHint,JsonParser.NumberType.BIG_DECIMAL);\n    }\n else {\n      visitor.expectNumberFormat(typeHint);\n    }\n  }\n}",
    "begin_line": 89,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializers.NumberSerializers#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.NumberSerializers()",
    "snippet": "protected NumberSerializers(){\n}",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberSerializers.addAll#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.addAll(java.util.Map\u003cjava.lang.String,com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e\u003e)",
    "snippet": "public static void addAll(Map\u003cString,JsonSerializer\u003c?\u003e\u003e allDeserializers){\n  allDeserializers.put(Integer.class.getName(),new IntegerSerializer(Integer.class));\n  allDeserializers.put(Integer.TYPE.getName(),new IntegerSerializer(Integer.TYPE));\n  allDeserializers.put(Long.class.getName(),new LongSerializer(Long.class));\n  allDeserializers.put(Long.TYPE.getName(),new LongSerializer(Long.TYPE));\n  allDeserializers.put(Byte.class.getName(),IntLikeSerializer.instance);\n  allDeserializers.put(Byte.TYPE.getName(),IntLikeSerializer.instance);\n  allDeserializers.put(Short.class.getName(),ShortSerializer.instance);\n  allDeserializers.put(Short.TYPE.getName(),ShortSerializer.instance);\n  allDeserializers.put(Double.class.getName(),new DoubleSerializer(Double.class));\n  allDeserializers.put(Double.TYPE.getName(),new DoubleSerializer(Double.TYPE));\n  allDeserializers.put(Float.class.getName(),FloatSerializer.instance);\n  allDeserializers.put(Float.TYPE.getName(),FloatSerializer.instance);\n}",
    "begin_line": 25,
    "end_line": 41,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.Base#55",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.Base(java.lang.Class\u003c?\u003e, JsonParser.NumberType, java.lang.String)",
    "snippet": "protected Base(Class\u003c?\u003e cls,JsonParser.NumberType numberType,String schemaType){\n  super(cls,false);\n  _numberType\u003dnumberType;\n  _schemaType\u003dschemaType;\n  _isInt\u003d(numberType \u003d\u003d JsonParser.NumberType.INT) || (numberType \u003d\u003d JsonParser.NumberType.LONG) || (numberType \u003d\u003d JsonParser.NumberType.BIG_INTEGER);\n}",
    "begin_line": 55,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.getSchema#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(_schemaType,true);\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.acceptJsonFormatVisitor#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  if (_isInt) {\n    visitIntFormat(visitor,typeHint,_numberType);\n  }\n else {\n    visitFloatFormat(visitor,typeHint,_numberType);\n  }\n}",
    "begin_line": 71,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Base.createContextual#82",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.createContextual(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "@Override public JsonSerializer\u003c?\u003e createContextual(SerializerProvider prov,BeanProperty property) throws JsonMappingException {\n  JsonFormat.Value format\u003dfindFormatOverrides(prov,property,handledType());\n  if (format !\u003d null) {\nswitch (format.getShape()) {\ncase STRING:      return ToStringSerializer.instance;\ndefault:  }\n}\nreturn this;\n}",
    "begin_line": 82,
    "end_line": 94,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortSerializer.ShortSerializer#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.ShortSerializer()",
    "snippet": "public ShortSerializer(){\n  super(Short.class,JsonParser.NumberType.INT,\"number\");\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShortSerializer.serialize#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Short)value).shortValue());\n}",
    "begin_line": 112,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.IntegerSerializer#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntegerSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public IntegerSerializer(Class\u003c?\u003e type){\n  super(type,JsonParser.NumberType.INT,\"integer\");\n}",
    "begin_line": 130,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.serialize#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Integer)value).intValue());\n}",
    "begin_line": 135,
    "end_line": 138,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntegerSerializer.serializeWithType#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(Object value,JsonGenerator gen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  serialize(value,gen,provider);\n}",
    "begin_line": 142,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntLikeSerializer.IntLikeSerializer#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.IntLikeSerializer()",
    "snippet": "public IntLikeSerializer(){\n  super(Number.class,JsonParser.NumberType.INT,\"integer\");\n}",
    "begin_line": 159,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntLikeSerializer.serialize#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Number)value).intValue());\n}",
    "begin_line": 164,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongSerializer.LongSerializer#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.LongSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public LongSerializer(Class\u003c?\u003e cls){\n  super(cls,JsonParser.NumberType.LONG,\"number\");\n}",
    "begin_line": 172,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LongSerializer.serialize#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Long)value).longValue());\n}",
    "begin_line": 177,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatSerializer.FloatSerializer#187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.FloatSerializer()",
    "snippet": "public FloatSerializer(){\n  super(Float.class,JsonParser.NumberType.FLOAT,\"number\");\n}",
    "begin_line": 187,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FloatSerializer.serialize#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Float)value).floatValue());\n}",
    "begin_line": 192,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.DoubleSerializer#207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.DoubleSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public DoubleSerializer(Class\u003c?\u003e cls){\n  super(cls,JsonParser.NumberType.DOUBLE,\"number\");\n}",
    "begin_line": 207,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.serialize#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeNumber(((Double)value).doubleValue());\n}",
    "begin_line": 212,
    "end_line": 215,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DoubleSerializer.serializeWithType#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/NumberSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.NumberSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.NumberSerializers.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(Object value,JsonGenerator gen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  serialize(value,gen,provider);\n}",
    "begin_line": 219,
    "end_line": 224,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdJdkSerializers.all#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.all()",
    "snippet": "public static Collection\u003cMap.Entry\u003cClass\u003c?\u003e,Object\u003e\u003e all(){\n  HashMap\u003cClass\u003c?\u003e,Object\u003e sers\u003dnew HashMap\u003cClass\u003c?\u003e,Object\u003e();\n  sers.put(java.net.URL.class,new ToStringSerializer(java.net.URL.class));\n  sers.put(java.net.URI.class,new ToStringSerializer(java.net.URI.class));\n  sers.put(Currency.class,new ToStringSerializer(Currency.class));\n  sers.put(UUID.class,new UUIDSerializer());\n  sers.put(java.util.regex.Pattern.class,new ToStringSerializer(java.util.regex.Pattern.class));\n  sers.put(Locale.class,new ToStringSerializer(Locale.class));\n  sers.put(AtomicBoolean.class,AtomicBooleanSerializer.class);\n  sers.put(AtomicInteger.class,AtomicIntegerSerializer.class);\n  sers.put(AtomicLong.class,AtomicLongSerializer.class);\n  sers.put(File.class,FileSerializer.class);\n  sers.put(Class.class,ClassSerializer.class);\n  sers.put(Void.class,NullSerializer.instance);\n  sers.put(Void.TYPE,NullSerializer.instance);\n  try {\n    sers.put(java.sql.Timestamp.class,DateSerializer.instance);\n    sers.put(java.sql.Date.class,SqlDateSerializer.class);\n    sers.put(java.sql.Time.class,SqlTimeSerializer.class);\n  }\n catch (  NoClassDefFoundError e) {\n  }\n  return sers.entrySet();\n}",
    "begin_line": 25,
    "end_line": 65,
    "comment": "/** \n * Method called by  {@link BasicSerializerFactory} to accessall serializers this class provides.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.AtomicBooleanSerializer#76",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicBooleanSerializer()",
    "snippet": "public AtomicBooleanSerializer(){\n  super(AtomicBoolean.class,false);\n}",
    "begin_line": 76,
    "end_line": 76,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.serialize#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicBoolean, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(AtomicBoolean value,JsonGenerator gen,SerializerProvider provider) throws IOException, JsonGenerationException {\n  gen.writeBoolean(value.get());\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.getSchema#84",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(\"boolean\",true);\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicBooleanSerializer.acceptJsonFormatVisitor#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectBooleanFormat(typeHint);\n}",
    "begin_line": 89,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.AtomicIntegerSerializer#97",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicIntegerSerializer()",
    "snippet": "public AtomicIntegerSerializer(){\n  super(AtomicInteger.class,false);\n}",
    "begin_line": 97,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.serialize#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicInteger, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(AtomicInteger value,JsonGenerator gen,SerializerProvider provider) throws IOException, JsonGenerationException {\n  gen.writeNumber(value.get());\n}",
    "begin_line": 100,
    "end_line": 102,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.getSchema#105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(\"integer\",true);\n}",
    "begin_line": 105,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicIntegerSerializer.acceptJsonFormatVisitor#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitIntFormat(visitor,typeHint,JsonParser.NumberType.INT);\n}",
    "begin_line": 110,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.AtomicLongSerializer#119",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.AtomicLongSerializer()",
    "snippet": "public AtomicLongSerializer(){\n  super(AtomicLong.class,false);\n}",
    "begin_line": 119,
    "end_line": 119,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.serialize#122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.serialize(java.util.concurrent.atomic.AtomicLong, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(AtomicLong value,JsonGenerator gen,SerializerProvider provider) throws IOException, JsonGenerationException {\n  gen.writeNumber(value.get());\n}",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.getSchema#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(\"integer\",true);\n}",
    "begin_line": 127,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AtomicLongSerializer.acceptJsonFormatVisitor#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdJdkSerializers.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdJdkSerializers.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitIntFormat(visitor,typeHint,JsonParser.NumberType.LONG);\n}",
    "begin_line": 132,
    "end_line": 136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.StdScalarSerializer#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class\u003cT\u003e)",
    "snippet": "protected StdScalarSerializer(Class\u003cT\u003e t){\n  super(t);\n}",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.StdScalarSerializer#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.StdScalarSerializer(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected StdScalarSerializer(Class\u003c?\u003e t,boolean dummy){\n  super((Class\u003cT\u003e)t);\n}",
    "begin_line": 28,
    "end_line": 30,
    "comment": "/** \n * Alternate constructor that is (alas!) needed to work around kinks of generic type handling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.serializeWithType#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.serializeWithType(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(T value,JsonGenerator g,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  WritableTypeId typeIdDef\u003dtypeSer.writeTypePrefix(g,typeSer.typeId(value,JsonToken.VALUE_STRING));\n  serialize(value,g,provider);\n  typeSer.writeTypeSuffix(g,typeIdDef);\n}",
    "begin_line": 40,
    "end_line": 48,
    "comment": "/** \n * Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix. This should work for most cases; some sub-classes may want to change this behavior.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.getSchema#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return createSchemaNode(\"string\",true);\n}",
    "begin_line": 51,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdScalarSerializer.acceptJsonFormatVisitor#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdScalarSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdScalarSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitStringFormat(visitor,typeHint);\n}",
    "begin_line": 58,
    "end_line": 63,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class\u003cT\u003e)",
    "snippet": "protected StdSerializer(Class\u003cT\u003e t){\n  _handledType\u003dt;\n}",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected StdSerializer(JavaType type){\n  _handledType\u003d(Class\u003cT\u003e)type.getRawClass();\n}",
    "begin_line": 63,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected StdSerializer(Class\u003c?\u003e t,boolean dummy){\n  _handledType\u003d(Class\u003cT\u003e)t;\n}",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Alternate constructor that is (alas!) needed to work around kinks of generic type handling\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.StdSerializer#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.StdSerializer(com.fasterxml.jackson.databind.ser.std.StdSerializer\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") protected StdSerializer(StdSerializer\u003c?\u003e src){\n  _handledType\u003d(Class\u003cT\u003e)src._handledType;\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.handledType#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.handledType()",
    "snippet": "@Override public Class\u003cT\u003e handledType(){\n  return _handledType;\n}",
    "begin_line": 91,
    "end_line": 91,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.serialize#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.serialize(T, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public abstract void serialize(T value,JsonGenerator gen,SerializerProvider provider) throws IOException ;",
    "begin_line": 100,
    "end_line": 101,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.acceptJsonFormatVisitor#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectAnyFormat(typeHint);\n}",
    "begin_line": 114,
    "end_line": 118,
    "comment": "/** \n * Default implementation specifies no format. This behavior is usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.getSchema#125",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return createSchemaNode(\"string\");\n}",
    "begin_line": 125,
    "end_line": 128,
    "comment": "/** \n * Default implementation simply claims type is \"string\"; usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.getSchema#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type, boolean)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint,boolean isOptional) throws JsonMappingException {\n  ObjectNode schema\u003d(ObjectNode)getSchema(provider,typeHint);\n  if (!isOptional) {\n    schema.put(\"required\",!isOptional);\n  }\n  return schema;\n}",
    "begin_line": 135,
    "end_line": 143,
    "comment": "/** \n * Default implementation simply claims type is \"string\"; usually overriden by custom serializers.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.createSchemaNode#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String)",
    "snippet": "protected ObjectNode createSchemaNode(String type){\n  ObjectNode schema\u003dJsonNodeFactory.instance.objectNode();\n  schema.put(\"type\",type);\n  return schema;\n}",
    "begin_line": 151,
    "end_line": 156,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.createSchemaNode#158",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.createSchemaNode(java.lang.String, boolean)",
    "snippet": "protected ObjectNode createSchemaNode(String type,boolean isOptional){\n  ObjectNode schema\u003dcreateSchemaNode(type);\n  if (!isOptional) {\n    schema.put(\"required\",!isOptional);\n  }\n  return schema;\n}",
    "begin_line": 158,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitStringFormat#173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void visitStringFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitor.expectStringFormat(typeHint);\n}",
    "begin_line": 173,
    "end_line": 176,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitStringFormat#185",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitStringFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)",
    "snippet": "protected void visitStringFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,JsonValueFormat format) throws JsonMappingException {\n  JsonStringFormatVisitor v2\u003dvisitor.expectStringFormat(typeHint);\n  if (v2 !\u003d null) {\n    v2.format(format);\n  }\n}",
    "begin_line": 185,
    "end_line": 193,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON String, but that there is a more refined logical type\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitIntFormat#201",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType)",
    "snippet": "protected void visitIntFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,NumberType numberType) throws JsonMappingException {\n  JsonIntegerFormatVisitor v2\u003dvisitor.expectIntegerFormat(typeHint);\n  if (_neitherNull(v2,numberType)) {\n    v2.numberType(numberType);\n  }\n}",
    "begin_line": 201,
    "end_line": 209,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitIntFormat#218",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitIntFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonValueFormat)",
    "snippet": "protected void visitIntFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,NumberType numberType,JsonValueFormat format) throws JsonMappingException {\n  JsonIntegerFormatVisitor v2\u003dvisitor.expectIntegerFormat(typeHint);\n  if (v2 !\u003d null) {\n    if (numberType !\u003d null) {\n      v2.numberType(numberType);\n    }\n    if (format !\u003d null) {\n      v2.format(format);\n    }\n  }\n}",
    "begin_line": 218,
    "end_line": 231,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is JSON Integer number, but that there is also a further format restriction involved.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitFloatFormat#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitFloatFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, NumberType)",
    "snippet": "protected void visitFloatFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,NumberType numberType) throws JsonMappingException {\n  JsonNumberFormatVisitor v2\u003dvisitor.expectNumberFormat(typeHint);\n  if (v2 !\u003d null) {\n    v2.numberType(numberType);\n  }\n}",
    "begin_line": 239,
    "end_line": 247,
    "comment": "/** \n * Helper method that calls necessary visit method(s) to indicate that the underlying JSON type is a floating-point JSON number.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitArrayFormat#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected void visitArrayFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,JsonSerializer\u003c?\u003e itemSerializer,JavaType itemType) throws JsonMappingException {\n  JsonArrayFormatVisitor v2\u003dvisitor.expectArrayFormat(typeHint);\n  if (_neitherNull(v2,itemSerializer)) {\n    v2.itemsFormat(itemSerializer,itemType);\n  }\n}",
    "begin_line": 252,
    "end_line": 260,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.visitArrayFormat#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.visitArrayFormat(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatTypes)",
    "snippet": "protected void visitArrayFormat(JsonFormatVisitorWrapper visitor,JavaType typeHint,JsonFormatTypes itemType) throws JsonMappingException {\n  JsonArrayFormatVisitor v2\u003dvisitor.expectArrayFormat(typeHint);\n  if (v2 !\u003d null) {\n    v2.itemsFormat(itemType);\n  }\n}",
    "begin_line": 265,
    "end_line": 273,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.wrapAndThrow#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, java.lang.String)",
    "snippet": "public void wrapAndThrow(SerializerProvider provider,Throwable t,Object bean,String fieldName) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  boolean wrap\u003d(provider \u003d\u003d null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS);\n  if (t instanceof IOException) {\n    if (!wrap || !(t instanceof JsonMappingException)) {\n      throw (IOException)t;\n    }\n  }\n else   if (!wrap) {\n    ClassUtil.throwIfRTE(t);\n  }\n  throw JsonMappingException.wrapWithPath(t,bean,fieldName);\n}",
    "begin_line": 293,
    "end_line": 317,
    "comment": "/** \n * Method that will modify caught exception (passed in as argument) as necessary to include reference information, and to ensure it is a subtype of  {@link IOException}, or an unchecked exception. \u003cp\u003e Rules for wrapping and unwrapping are bit complicated; essentially: \u003cul\u003e \u003cli\u003eErrors are to be passed as is (if uncovered via unwrapping) \u003cli\u003e\"Plain\" IOExceptions (ones that are not of type {@link JsonMappingException} are to be passed as is\u003c/ul\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.wrapAndThrow#319",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.wrapAndThrow(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Throwable, java.lang.Object, int)",
    "snippet": "public void wrapAndThrow(SerializerProvider provider,Throwable t,Object bean,int index) throws IOException {\n  while (t instanceof InvocationTargetException \u0026\u0026 t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  ClassUtil.throwIfError(t);\n  boolean wrap\u003d(provider \u003d\u003d null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS);\n  if (t instanceof IOException) {\n    if (!wrap || !(t instanceof JsonMappingException)) {\n      throw (IOException)t;\n    }\n  }\n else   if (!wrap) {\n    ClassUtil.throwIfRTE(t);\n  }\n  throw JsonMappingException.wrapWithPath(t,bean,index);\n}",
    "begin_line": 319,
    "end_line": 339,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findContextualConvertingSerializer#357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findContextualConvertingSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected JsonSerializer\u003c?\u003e findContextualConvertingSerializer(SerializerProvider provider,BeanProperty property,JsonSerializer\u003c?\u003e existingSerializer) throws JsonMappingException {\n  @SuppressWarnings(\"unchecked\") Map\u003cObject,Object\u003e conversions\u003d(Map\u003cObject,Object\u003e)provider.getAttribute(KEY_CONTENT_CONVERTER_LOCK);\n  if (conversions !\u003d null) {\n    Object lock\u003dconversions.get(property);\n    if (lock !\u003d null) {\n      return existingSerializer;\n    }\n  }\n else {\n    conversions\u003dnew IdentityHashMap\u003c\u003e();\n    provider.setAttribute(KEY_CONTENT_CONVERTER_LOCK,conversions);\n  }\n  conversions.put(property,Boolean.TRUE);\n  try {\n    JsonSerializer\u003c?\u003e ser\u003dfindConvertingContentSerializer(provider,property,existingSerializer);\n    if (ser !\u003d null) {\n      return provider.handleSecondaryContextualization(ser,property);\n    }\n  }\n  finally {\n    conversions.remove(property);\n  }\n  return existingSerializer;\n}",
    "begin_line": 357,
    "end_line": 384,
    "comment": "/** \n * Helper method that can be used to see if specified property has annotation indicating that a converter is to be used for contained values (contents of structured types; array/List/Map values)\n * @param existingSerializer (optional) configured contentserializer if one already exists.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findConvertingContentSerializer#390",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findConvertingContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "@Deprecated protected JsonSerializer\u003c?\u003e findConvertingContentSerializer(SerializerProvider provider,BeanProperty prop,JsonSerializer\u003c?\u003e existingSerializer) throws JsonMappingException {\n  final AnnotationIntrospector intr\u003dprovider.getAnnotationIntrospector();\n  if (_neitherNull(intr,prop)) {\n    AnnotatedMember m\u003dprop.getMember();\n    if (m !\u003d null) {\n      Object convDef\u003dintr.findSerializationContentConverter(m);\n      if (convDef !\u003d null) {\n        Converter\u003cObject,Object\u003e conv\u003dprovider.converterInstance(prop.getMember(),convDef);\n        JavaType delegateType\u003dconv.getOutputType(provider.getTypeFactory());\n        if ((existingSerializer \u003d\u003d null) \u0026\u0026 !delegateType.isJavaLangObject()) {\n          existingSerializer\u003dprovider.findValueSerializer(delegateType);\n        }\n        return new StdDelegatingSerializer(conv,delegateType,existingSerializer);\n      }\n    }\n  }\n  return existingSerializer;\n}",
    "begin_line": 390,
    "end_line": 411,
    "comment": "/** \n * @deprecated Since 2.9 use {link {@link #findContextualConvertingSerializer} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findPropertyFilter#419",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findPropertyFilter(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object, java.lang.Object)",
    "snippet": "protected PropertyFilter findPropertyFilter(SerializerProvider provider,Object filterId,Object valueToFilter) throws JsonMappingException {\n  FilterProvider filters\u003dprovider.getFilterProvider();\n  if (filters \u003d\u003d null) {\n    provider.reportBadDefinition(handledType(),\"Cannot resolve PropertyFilter with id \u0027\" + filterId + \"\u0027; no FilterProvider configured\");\n  }\n  return filters.findPropertyFilter(filterId,valueToFilter);\n}",
    "begin_line": 419,
    "end_line": 431,
    "comment": "/** \n * Helper method used to locate filter that is needed, based on filter id this serializer was constructed with.\n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findFormatOverrides#442",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonFormat.Value findFormatOverrides(SerializerProvider provider,BeanProperty prop,Class\u003c?\u003e typeForDefaults){\n  if (prop !\u003d null) {\n    return prop.findPropertyFormat(provider.getConfig(),typeForDefaults);\n  }\n  return provider.getDefaultPropertyFormat(typeForDefaults);\n}",
    "begin_line": 442,
    "end_line": 450,
    "comment": "/** \n * Helper method that may be used to find if this deserializer has specific {@link JsonFormat} settings, either via property, or through type-specificdefaulting.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findFormatFeature#461",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findFormatFeature(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e, JsonFormat.Feature)",
    "snippet": "protected Boolean findFormatFeature(SerializerProvider provider,BeanProperty prop,Class\u003c?\u003e typeForDefaults,JsonFormat.Feature feat){\n  JsonFormat.Value format\u003dfindFormatOverrides(provider,prop,typeForDefaults);\n  if (format !\u003d null) {\n    return format.getFeature(feat);\n  }\n  return null;\n}",
    "begin_line": 461,
    "end_line": 469,
    "comment": "/** \n * Convenience method that uses  {@link #findFormatOverrides} to find possibledefaults and/of overrides, and then calls \u003ccode\u003eJsonFormat.Value.getFeature(...)\u003c/code\u003e to find whether that feature has been specifically marked as enabled or disabled.\n * @param typeForDefaults Type (erased) used for finding default format settings, if any\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findIncludeOverrides#474",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findIncludeOverrides(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty, java.lang.Class\u003c?\u003e)",
    "snippet": "protected JsonInclude.Value findIncludeOverrides(SerializerProvider provider,BeanProperty prop,Class\u003c?\u003e typeForDefaults){\n  if (prop !\u003d null) {\n    return prop.findPropertyInclusion(provider.getConfig(),typeForDefaults);\n  }\n  return provider.getDefaultPropertyInclusion(typeForDefaults);\n}",
    "begin_line": 474,
    "end_line": 482,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.findAnnotatedContentSerializer#489",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.findAnnotatedContentSerializer(com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.BeanProperty)",
    "snippet": "protected JsonSerializer\u003c?\u003e findAnnotatedContentSerializer(SerializerProvider serializers,BeanProperty property) throws JsonMappingException {\n  if (property !\u003d null) {\n    AnnotatedMember m\u003dproperty.getMember();\n    final AnnotationIntrospector intr\u003dserializers.getAnnotationIntrospector();\n    if (m !\u003d null) {\n      Object serDef\u003dintr.findContentSerializer(m);\n      if (serDef !\u003d null) {\n        return serializers.serializerInstance(m,serDef);\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 489,
    "end_line": 505,
    "comment": "/** \n * Convenience method for finding out possibly configured content value serializer.\n * @since 2.7.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer.isDefaultSerializer#519",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer.isDefaultSerializer(com.fasterxml.jackson.databind.JsonSerializer\u003c?\u003e)",
    "snippet": "protected boolean isDefaultSerializer(JsonSerializer\u003c?\u003e serializer){\n  return ClassUtil.isJacksonStdImpl(serializer);\n}",
    "begin_line": 519,
    "end_line": 521,
    "comment": "/** \n * Method that can be called to determine if given serializer is the default serializer Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on serializer class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer._neitherNull#526",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer._neitherNull(java.lang.Object, java.lang.Object)",
    "snippet": "protected final static boolean _neitherNull(Object a,Object b){\n  return (a !\u003d null) \u0026\u0026 (b !\u003d null);\n}",
    "begin_line": 526,
    "end_line": 528,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdSerializer._nonEmpty#533",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StdSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StdSerializer._nonEmpty(java.util.Collection\u003c?\u003e)",
    "snippet": "protected final static boolean _nonEmpty(Collection\u003c?\u003e c){\n  return (c !\u003d null) \u0026\u0026 !c.isEmpty();\n}",
    "begin_line": 533,
    "end_line": 535,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.StringSerializer#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.StringSerializer()",
    "snippet": "public StringSerializer(){\n  super(String.class,false);\n}",
    "begin_line": 31,
    "end_line": 31,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.isEmpty#34",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override public boolean isEmpty(SerializerProvider prov,Object value){\n  String str\u003d(String)value;\n  return str.length() \u003d\u003d 0;\n}",
    "begin_line": 34,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.serialize#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeString((String)value);\n}",
    "begin_line": 40,
    "end_line": 42,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.serializeWithType#45",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public final void serializeWithType(Object value,JsonGenerator gen,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  gen.writeString((String)value);\n}",
    "begin_line": 45,
    "end_line": 50,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.getSchema#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint){\n  return createSchemaNode(\"string\",true);\n}",
    "begin_line": 53,
    "end_line": 55,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StringSerializer.acceptJsonFormatVisitor#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/StringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.StringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.StringSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitStringFormat(visitor,typeHint);\n}",
    "begin_line": 58,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.ToStringSerializer#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer()",
    "snippet": "public ToStringSerializer(){\n  super(Object.class);\n}",
    "begin_line": 39,
    "end_line": 39,
    "comment": "/** \n * \u003cp\u003e Note: usually you should NOT create new instances, but instead use {@link #instance} which is stateless and fully thread-safe. However,there are cases where constructor is needed; for example, when using explicit serializer annotations like {@link com.fasterxml.jackson.databind.annotation.JsonSerialize#using}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.ToStringSerializer#46",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.ToStringSerializer(java.lang.Class\u003c?\u003e)",
    "snippet": "public ToStringSerializer(Class\u003c?\u003e handledType){\n  super(handledType,false);\n}",
    "begin_line": 46,
    "end_line": 48,
    "comment": "/** \n * Sometimes it may actually make sense to retain actual handled type, so...\n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.isEmpty#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object)",
    "snippet": "@Override public boolean isEmpty(SerializerProvider prov,Object value){\n  return value.toString().isEmpty();\n}",
    "begin_line": 51,
    "end_line": 53,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.serialize#56",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.serialize(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(Object value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  gen.writeString(value.toString());\n}",
    "begin_line": 56,
    "end_line": 60,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.serializeWithType#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.serializeWithType(java.lang.Object, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(Object value,JsonGenerator g,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  WritableTypeId typeIdDef\u003dtypeSer.writeTypePrefix(g,typeSer.typeId(value,JsonToken.VALUE_STRING));\n  serialize(value,g,provider);\n  typeSer.writeTypeSuffix(g,typeIdDef);\n}",
    "begin_line": 74,
    "end_line": 82,
    "comment": "/** \n * Default implementation will write type prefix, call regular serialization method (since assumption is that value itself does not need JSON Array or Object start/end markers), and then write type suffix. This should work for most cases; some sub-classes may want to change this behavior.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.getSchema#85",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type)",
    "snippet": "@Override public JsonNode getSchema(SerializerProvider provider,Type typeHint) throws JsonMappingException {\n  return createSchemaNode(\"string\",true);\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ToStringSerializer.acceptJsonFormatVisitor#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/ToStringSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.ToStringSerializer.acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor,JavaType typeHint) throws JsonMappingException {\n  visitStringFormat(visitor,typeHint);\n}",
    "begin_line": 90,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.UUIDSerializer#23",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.UUIDSerializer()",
    "snippet": "public UUIDSerializer(){\n  super(UUID.class);\n}",
    "begin_line": 23,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.isEmpty#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.util.UUID)",
    "snippet": "@Override public boolean isEmpty(SerializerProvider prov,UUID value){\n  if (value.getLeastSignificantBits() \u003d\u003d 0L \u0026\u0026 value.getMostSignificantBits() \u003d\u003d 0L) {\n    return true;\n  }\n  return false;\n}",
    "begin_line": 26,
    "end_line": 34,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer.serialize#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer.serialize(java.util.UUID, JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(UUID value,JsonGenerator gen,SerializerProvider provider) throws IOException {\n  if (gen.canWriteBinaryNatively()) {\n    if (!(gen instanceof TokenBuffer)) {\n      gen.writeBinary(_asBytes(value));\n      return;\n    }\n  }\n  final char[] ch\u003dnew char[36];\n  final long msb\u003dvalue.getMostSignificantBits();\n  _appendInt((int)(msb \u003e\u003e 32),ch,0);\n  ch[8]\u003d\u0027-\u0027;\n  int i\u003d(int)msb;\n  _appendShort(i \u003e\u003e\u003e 16,ch,9);\n  ch[13]\u003d\u0027-\u0027;\n  _appendShort(i,ch,14);\n  ch[18]\u003d\u0027-\u0027;\n  final long lsb\u003dvalue.getLeastSignificantBits();\n  _appendShort((int)(lsb \u003e\u003e\u003e 48),ch,19);\n  ch[23]\u003d\u0027-\u0027;\n  _appendShort((int)(lsb \u003e\u003e\u003e 32),ch,24);\n  _appendInt((int)lsb,ch,28);\n  gen.writeString(ch,0,36);\n}",
    "begin_line": 37,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendInt#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendInt(int, char[], int)",
    "snippet": "private static void _appendInt(int bits,char[] ch,int offset){\n  _appendShort(bits \u003e\u003e 16,ch,offset);\n  _appendShort(bits,ch,offset + 4);\n}",
    "begin_line": 75,
    "end_line": 79,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendShort#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendShort(int, char[], int)",
    "snippet": "private static void _appendShort(int bits,char[] ch,int offset){\n  ch[offset]\u003dHEX_CHARS[(bits \u003e\u003e 12) \u0026 0xF];\n  ch[++offset]\u003dHEX_CHARS[(bits \u003e\u003e 8) \u0026 0xF];\n  ch[++offset]\u003dHEX_CHARS[(bits \u003e\u003e 4) \u0026 0xF];\n  ch[++offset]\u003dHEX_CHARS[bits \u0026 0xF];\n}",
    "begin_line": 81,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._asBytes#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._asBytes(java.util.UUID)",
    "snippet": "private final static byte[] _asBytes(UUID uuid){\n  byte[] buffer\u003dnew byte[16];\n  long hi\u003duuid.getMostSignificantBits();\n  long lo\u003duuid.getLeastSignificantBits();\n  _appendInt((int)(hi \u003e\u003e 32),buffer,0);\n  _appendInt((int)hi,buffer,4);\n  _appendInt((int)(lo \u003e\u003e 32),buffer,8);\n  _appendInt((int)lo,buffer,12);\n  return buffer;\n}",
    "begin_line": 90,
    "end_line": 100,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UUIDSerializer._appendInt#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/ser/std/UUIDSerializer.java",
    "class_name": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer",
    "signature": "com.fasterxml.jackson.databind.ser.std.UUIDSerializer._appendInt(int, byte[], int)",
    "snippet": "private final static void _appendInt(int value,byte[] buffer,int offset){\n  buffer[offset]\u003d(byte)(value \u003e\u003e 24);\n  buffer[++offset]\u003d(byte)(value \u003e\u003e 16);\n  buffer[++offset]\u003d(byte)(value \u003e\u003e 8);\n  buffer[++offset]\u003d(byte)value;\n}",
    "begin_line": 102,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack(Class\u003c?\u003e rootType){\n  this(null,rootType);\n}",
    "begin_line": 20,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.ClassStack#24",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.ClassStack(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e)",
    "snippet": "private ClassStack(ClassStack parent,Class\u003c?\u003e curr){\n  _parent\u003dparent;\n  _current\u003dcurr;\n}",
    "begin_line": 24,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.child#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.child(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack child(Class\u003c?\u003e cls){\n  return new ClassStack(this,cls);\n}",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * @return New stack frame, if addition is ok; null if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.addSelfReference#40",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.addSelfReference(com.fasterxml.jackson.databind.type.ResolvedRecursiveType)",
    "snippet": "public void addSelfReference(ResolvedRecursiveType ref){\n  if (_selfRefs \u003d\u003d null) {\n    _selfRefs\u003dnew ArrayList\u003cResolvedRecursiveType\u003e();\n  }\n  _selfRefs.add(ref);\n}",
    "begin_line": 40,
    "end_line": 46,
    "comment": "/** \n * Method called to indicate that there is a self-reference from deeper down in stack pointing into type this stack frame represents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.resolveSelfReferences#53",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.resolveSelfReferences(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public void resolveSelfReferences(JavaType resolved){\n  if (_selfRefs !\u003d null) {\n    for (    ResolvedRecursiveType ref : _selfRefs) {\n      ref.setReference(resolved);\n    }\n  }\n}",
    "begin_line": 53,
    "end_line": 60,
    "comment": "/** \n * Method called when type that this stack frame represents is fully resolved, allowing self-references to be completed (if there are any)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.find#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.find(java.lang.Class\u003c?\u003e)",
    "snippet": "public ClassStack find(Class\u003c?\u003e cls){\n  if (_current \u003d\u003d cls)   return this;\n  for (ClassStack curr\u003d_parent; curr !\u003d null; curr\u003dcurr._parent) {\n    if (curr._current \u003d\u003d cls) {\n      return curr;\n    }\n  }\n  return null;\n}",
    "begin_line": 62,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassStack.toString#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/ClassStack.java",
    "class_name": "com.fasterxml.jackson.databind.type.ClassStack",
    "signature": "com.fasterxml.jackson.databind.type.ClassStack.toString()",
    "snippet": "@Override public String toString(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(\"[ClassStack (self-refs: \").append((_selfRefs \u003d\u003d null) ? \"0\" : String.valueOf(_selfRefs.size())).append(\u0027)\u0027);\n  for (ClassStack curr\u003dthis; curr !\u003d null; curr\u003dcurr._parent) {\n    sb.append(\u0027 \u0027).append(curr._current.getName());\n  }\n  sb.append(\u0027]\u0027);\n  return sb.toString();\n}",
    "begin_line": 74,
    "end_line": 85,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.CollectionLikeType#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.CollectionLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected CollectionLikeType(Class\u003c?\u003e collT,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType elemT,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(collT,bindings,superClass,superInts,elemT.hashCode(),valueHandler,typeHandler,asStatic);\n  _elementType\u003delemT;\n}",
    "begin_line": 30,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.CollectionLikeType#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.CollectionLikeType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected CollectionLikeType(TypeBase base,JavaType elemT){\n  super(base);\n  _elementType\u003delemT;\n}",
    "begin_line": 42,
    "end_line": 46,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.construct#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionLikeType construct(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType elemT){\n  return new CollectionLikeType(rawType,bindings,superClass,superInts,elemT,null,null,false);\n}",
    "begin_line": 51,
    "end_line": 55,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.construct#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public static CollectionLikeType construct(Class\u003c?\u003e rawType,JavaType elemT){\n  TypeVariable\u003c?\u003e[] vars\u003drawType.getTypeParameters();\n  TypeBindings bindings;\n  if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\n    bindings\u003dTypeBindings.emptyBindings();\n  }\n else {\n    bindings\u003dTypeBindings.create(rawType,elemT);\n  }\n  return new CollectionLikeType(rawType,bindings,_bogusSuperClass(rawType),null,elemT,null,null,false);\n}",
    "begin_line": 62,
    "end_line": 75,
    "comment": "/** \n * @deprecated Since 2.7, use {@link #upgradeFrom} for constructing instances, givenpre-resolved  {@link SimpleType}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.upgradeFrom#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.upgradeFrom(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionLikeType upgradeFrom(JavaType baseType,JavaType elementType){\n  if (baseType instanceof TypeBase) {\n    return new CollectionLikeType((TypeBase)baseType,elementType);\n  }\n  throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\n}",
    "begin_line": 83,
    "end_line": 90,
    "comment": "/** \n * Factory method that can be used to \"upgrade\" a basic type into collection-like one; usually done via  {@link TypeModifier}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType._narrow#94",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override @Deprecated protected JavaType _narrow(Class\u003c?\u003e subclass){\n  return new CollectionLikeType(subclass,_bindings,_superClass,_superInterfaces,_elementType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 94,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentType#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withContentType(JavaType contentType){\n  if (_elementType \u003d\u003d contentType) {\n    return this;\n  }\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,contentType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 101,
    "end_line": 107,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withTypeHandler#110",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override public CollectionLikeType withTypeHandler(Object h){\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,_elementType,_valueHandler,h,_asStatic);\n}",
    "begin_line": 110,
    "end_line": 113,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentTypeHandler#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override public CollectionLikeType withContentTypeHandler(Object h){\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,_elementType.withTypeHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 116,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withValueHandler#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withValueHandler(java.lang.Object)",
    "snippet": "@Override public CollectionLikeType withValueHandler(Object h){\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,_elementType,h,_typeHandler,_asStatic);\n}",
    "begin_line": 124,
    "end_line": 127,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withContentValueHandler#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override public CollectionLikeType withContentValueHandler(Object h){\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,_elementType.withValueHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 130,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withHandlersFrom#137",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withHandlersFrom(JavaType src){\n  JavaType type\u003dsuper.withHandlersFrom(src);\n  JavaType srcCt\u003dsrc.getContentType();\n  if (srcCt !\u003d null) {\n    JavaType ct\u003d_elementType.withHandlersFrom(srcCt);\n    if (ct !\u003d _elementType) {\n      type\u003dtype.withContentType(ct);\n    }\n  }\n  return type;\n}",
    "begin_line": 137,
    "end_line": 147,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.withStaticTyping#150",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.withStaticTyping()",
    "snippet": "@Override public CollectionLikeType withStaticTyping(){\n  if (_asStatic) {\n    return this;\n  }\n  return new CollectionLikeType(_class,_bindings,_superClass,_superInterfaces,_elementType.withStaticTyping(),_valueHandler,_typeHandler,true);\n}",
    "begin_line": 150,
    "end_line": 157,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.refine#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override public JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return new CollectionLikeType(rawType,bindings,superClass,superInterfaces,_elementType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 160,
    "end_line": 165,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isContainerType#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isContainerType()",
    "snippet": "@Override public boolean isContainerType(){\n  return true;\n}",
    "begin_line": 174,
    "end_line": 174,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isCollectionLikeType#177",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isCollectionLikeType()",
    "snippet": "@Override public boolean isCollectionLikeType(){\n  return true;\n}",
    "begin_line": 177,
    "end_line": 177,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentType#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentType()",
    "snippet": "@Override public JavaType getContentType(){\n  return _elementType;\n}",
    "begin_line": 180,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentValueHandler#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentValueHandler()",
    "snippet": "@Override public Object getContentValueHandler(){\n  return _elementType.getValueHandler();\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getContentTypeHandler#188",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getContentTypeHandler()",
    "snippet": "@Override public Object getContentTypeHandler(){\n  return _elementType.getTypeHandler();\n}",
    "begin_line": 188,
    "end_line": 190,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.hasHandlers#193",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.hasHandlers()",
    "snippet": "@Override public boolean hasHandlers(){\n  return super.hasHandlers() || _elementType.hasHandlers();\n}",
    "begin_line": 193,
    "end_line": 195,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getErasedSignature#198",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getErasedSignature(StringBuilder sb){\n  return _classSignature(_class,sb,true);\n}",
    "begin_line": 198,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.getGenericSignature#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getGenericSignature(StringBuilder sb){\n  _classSignature(_class,sb,false);\n  sb.append(\u0027\u003c\u0027);\n  _elementType.getGenericSignature(sb);\n  sb.append(\"\u003e;\");\n  return sb;\n}",
    "begin_line": 203,
    "end_line": 209,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.buildCanonicalName#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.buildCanonicalName()",
    "snippet": "@Override protected String buildCanonicalName(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(_class.getName());\n  if (_elementType !\u003d null) {\n    sb.append(\u0027\u003c\u0027);\n    sb.append(_elementType.toCanonical());\n    sb.append(\u0027\u003e\u0027);\n  }\n  return sb.toString();\n}",
    "begin_line": 212,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.isTrueCollectionType#235",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.isTrueCollectionType()",
    "snippet": "public boolean isTrueCollectionType(){\n  return Collection.class.isAssignableFrom(_class);\n}",
    "begin_line": 235,
    "end_line": 237,
    "comment": "/** \n * Method that can be used for checking whether this type is a \"real\" Collection type; meaning whether it represents a parameterized subtype of  {@link java.util.Collection} or just something that actslike one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.equals#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  CollectionLikeType other\u003d(CollectionLikeType)o;\n  return (_class \u003d\u003d other._class) \u0026\u0026 _elementType.equals(other._elementType);\n}",
    "begin_line": 246,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionLikeType.toString#257",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionLikeType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionLikeType.toString()",
    "snippet": "@Override public String toString(){\n  return \"[collection-like type; class \" + _class.getName() + \", contains \"+ _elementType+ \"]\";\n}",
    "begin_line": 257,
    "end_line": 260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.CollectionType#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.CollectionType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "private CollectionType(Class\u003c?\u003e collT,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType elemT,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(collT,bindings,superClass,superInts,elemT,valueHandler,typeHandler,asStatic);\n}",
    "begin_line": 21,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.CollectionType#31",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.CollectionType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected CollectionType(TypeBase base,JavaType elemT){\n  super(base,elemT);\n}",
    "begin_line": 31,
    "end_line": 33,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.construct#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static CollectionType construct(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType elemT){\n  return new CollectionType(rawType,bindings,superClass,superInts,elemT,null,null,false);\n}",
    "begin_line": 38,
    "end_line": 42,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.construct#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public static CollectionType construct(Class\u003c?\u003e rawType,JavaType elemT){\n  TypeVariable\u003c?\u003e[] vars\u003drawType.getTypeParameters();\n  TypeBindings bindings;\n  if ((vars \u003d\u003d null) || (vars.length !\u003d 1)) {\n    bindings\u003dTypeBindings.emptyBindings();\n  }\n else {\n    bindings\u003dTypeBindings.create(rawType,elemT);\n  }\n  return new CollectionType(rawType,bindings,_bogusSuperClass(rawType),null,elemT,null,null,false);\n}",
    "begin_line": 48,
    "end_line": 62,
    "comment": "/** \n * @deprecated Since 2.7, remove from 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType._narrow#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated @Override protected JavaType _narrow(Class\u003c?\u003e subclass){\n  return new CollectionType(subclass,_bindings,_superClass,_superInterfaces,_elementType,null,null,_asStatic);\n}",
    "begin_line": 66,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentType#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withContentType(JavaType contentType){\n  if (_elementType \u003d\u003d contentType) {\n    return this;\n  }\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,contentType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 72,
    "end_line": 78,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withTypeHandler#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override public CollectionType withTypeHandler(Object h){\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,_elementType,_valueHandler,h,_asStatic);\n}",
    "begin_line": 81,
    "end_line": 84,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentTypeHandler#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override public CollectionType withContentTypeHandler(Object h){\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,_elementType.withTypeHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 87,
    "end_line": 92,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withValueHandler#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withValueHandler(java.lang.Object)",
    "snippet": "@Override public CollectionType withValueHandler(Object h){\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,_elementType,h,_typeHandler,_asStatic);\n}",
    "begin_line": 95,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withContentValueHandler#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override public CollectionType withContentValueHandler(Object h){\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,_elementType.withValueHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 101,
    "end_line": 105,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.withStaticTyping#108",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.withStaticTyping()",
    "snippet": "@Override public CollectionType withStaticTyping(){\n  if (_asStatic) {\n    return this;\n  }\n  return new CollectionType(_class,_bindings,_superClass,_superInterfaces,_elementType.withStaticTyping(),_valueHandler,_typeHandler,true);\n}",
    "begin_line": 108,
    "end_line": 115,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.refine#118",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override public JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return new CollectionType(rawType,bindings,superClass,superInterfaces,_elementType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 118,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "CollectionType.toString#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/CollectionType.java",
    "class_name": "com.fasterxml.jackson.databind.type.CollectionType",
    "signature": "com.fasterxml.jackson.databind.type.CollectionType.toString()",
    "snippet": "@Override public String toString(){\n  return \"[collection type; class \" + _class.getName() + \", contains \"+ _elementType+ \"]\";\n}",
    "begin_line": 132,
    "end_line": 135,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.MapLikeType#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.MapLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected MapLikeType(Class\u003c?\u003e mapType,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType keyT,JavaType valueT,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(mapType,bindings,superClass,superInts,keyT.hashCode() ^ valueT.hashCode(),valueHandler,typeHandler,asStatic);\n  _keyType\u003dkeyT;\n  _valueType\u003dvalueT;\n}",
    "begin_line": 35,
    "end_line": 43,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.MapLikeType#48",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.MapLikeType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected MapLikeType(TypeBase base,JavaType keyT,JavaType valueT){\n  super(base);\n  _keyType\u003dkeyT;\n  _valueType\u003dvalueT;\n}",
    "begin_line": 48,
    "end_line": 52,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.upgradeFrom#60",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.upgradeFrom(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static MapLikeType upgradeFrom(JavaType baseType,JavaType keyT,JavaType valueT){\n  if (baseType instanceof TypeBase) {\n    return new MapLikeType((TypeBase)baseType,keyT,valueT);\n  }\n  throw new IllegalArgumentException(\"Cannot upgrade from an instance of \" + baseType.getClass());\n}",
    "begin_line": 60,
    "end_line": 70,
    "comment": "/** \n * Factory method that can be used to \"upgrade\" a basic type into collection-like one; usually done via  {@link TypeModifier}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.construct#74",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public static MapLikeType construct(Class\u003c?\u003e rawType,JavaType keyT,JavaType valueT){\n  TypeVariable\u003c?\u003e[] vars\u003drawType.getTypeParameters();\n  TypeBindings bindings;\n  if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\n    bindings\u003dTypeBindings.emptyBindings();\n  }\n else {\n    bindings\u003dTypeBindings.create(rawType,keyT,valueT);\n  }\n  return new MapLikeType(rawType,bindings,_bogusSuperClass(rawType),null,keyT,valueT,null,null,false);\n}",
    "begin_line": 74,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType._narrow#92",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated @Override protected JavaType _narrow(Class\u003c?\u003e subclass){\n  return new MapLikeType(subclass,_bindings,_superClass,_superInterfaces,_keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 92,
    "end_line": 96,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyType#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapLikeType withKeyType(JavaType keyType){\n  if (keyType \u003d\u003d _keyType) {\n    return this;\n  }\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 101,
    "end_line": 108,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentType#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withContentType(JavaType contentType){\n  if (_valueType \u003d\u003d contentType) {\n    return this;\n  }\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,contentType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 111,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withTypeHandler#121",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override public MapLikeType withTypeHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType,_valueHandler,h,_asStatic);\n}",
    "begin_line": 121,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentTypeHandler#128",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override public MapLikeType withContentTypeHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType.withTypeHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 128,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withValueHandler#135",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withValueHandler(java.lang.Object)",
    "snippet": "@Override public MapLikeType withValueHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType,h,_typeHandler,_asStatic);\n}",
    "begin_line": 135,
    "end_line": 139,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withContentValueHandler#142",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override public MapLikeType withContentValueHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType.withValueHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 142,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withHandlersFrom#149",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withHandlersFrom(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withHandlersFrom(JavaType src){\n  JavaType type\u003dsuper.withHandlersFrom(src);\n  JavaType srcKeyType\u003dsrc.getKeyType();\n  if (type instanceof MapLikeType) {\n    if (srcKeyType !\u003d null) {\n      JavaType ct\u003d_keyType.withHandlersFrom(srcKeyType);\n      if (ct !\u003d _keyType) {\n        type\u003d((MapLikeType)type).withKeyType(ct);\n      }\n    }\n  }\n  JavaType srcCt\u003dsrc.getContentType();\n  if (srcCt !\u003d null) {\n    JavaType ct\u003d_valueType.withHandlersFrom(srcCt);\n    if (ct !\u003d _valueType) {\n      type\u003dtype.withContentType(ct);\n    }\n  }\n  return type;\n}",
    "begin_line": 149,
    "end_line": 169,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withStaticTyping#172",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withStaticTyping()",
    "snippet": "@Override public MapLikeType withStaticTyping(){\n  if (_asStatic) {\n    return this;\n  }\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType.withStaticTyping(),_valueHandler,_typeHandler,true);\n}",
    "begin_line": 172,
    "end_line": 179,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.refine#182",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override public JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return new MapLikeType(rawType,bindings,superClass,superInterfaces,_keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 182,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.buildCanonicalName#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.buildCanonicalName()",
    "snippet": "@Override protected String buildCanonicalName(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(_class.getName());\n  if (_keyType !\u003d null) {\n    sb.append(\u0027\u003c\u0027);\n    sb.append(_keyType.toCanonical());\n    sb.append(\u0027,\u0027);\n    sb.append(_valueType.toCanonical());\n    sb.append(\u0027\u003e\u0027);\n  }\n  return sb.toString();\n}",
    "begin_line": 189,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isContainerType#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isContainerType()",
    "snippet": "@Override public boolean isContainerType(){\n  return true;\n}",
    "begin_line": 209,
    "end_line": 211,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isMapLikeType#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isMapLikeType()",
    "snippet": "@Override public boolean isMapLikeType(){\n  return true;\n}",
    "begin_line": 214,
    "end_line": 216,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getKeyType#219",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getKeyType()",
    "snippet": "@Override public JavaType getKeyType(){\n  return _keyType;\n}",
    "begin_line": 219,
    "end_line": 221,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentType#224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentType()",
    "snippet": "@Override public JavaType getContentType(){\n  return _valueType;\n}",
    "begin_line": 224,
    "end_line": 226,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentValueHandler#229",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentValueHandler()",
    "snippet": "@Override public Object getContentValueHandler(){\n  return _valueType.getValueHandler();\n}",
    "begin_line": 229,
    "end_line": 231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getContentTypeHandler#234",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getContentTypeHandler()",
    "snippet": "@Override public Object getContentTypeHandler(){\n  return _valueType.getTypeHandler();\n}",
    "begin_line": 234,
    "end_line": 236,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.hasHandlers#239",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.hasHandlers()",
    "snippet": "@Override public boolean hasHandlers(){\n  return super.hasHandlers() || _valueType.hasHandlers() || _keyType.hasHandlers();\n}",
    "begin_line": 239,
    "end_line": 242,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getErasedSignature#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getErasedSignature(StringBuilder sb){\n  return _classSignature(_class,sb,true);\n}",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.getGenericSignature#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getGenericSignature(StringBuilder sb){\n  _classSignature(_class,sb,false);\n  sb.append(\u0027\u003c\u0027);\n  _keyType.getGenericSignature(sb);\n  _valueType.getGenericSignature(sb);\n  sb.append(\"\u003e;\");\n  return sb;\n}",
    "begin_line": 250,
    "end_line": 257,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyTypeHandler#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyTypeHandler(java.lang.Object)",
    "snippet": "public MapLikeType withKeyTypeHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType.withTypeHandler(h),_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 265,
    "end_line": 269,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.withKeyValueHandler#271",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.withKeyValueHandler(java.lang.Object)",
    "snippet": "public MapLikeType withKeyValueHandler(Object h){\n  return new MapLikeType(_class,_bindings,_superClass,_superInterfaces,_keyType.withValueHandler(h),_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 271,
    "end_line": 275,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.isTrueMapType#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.isTrueMapType()",
    "snippet": "public boolean isTrueMapType(){\n  return Map.class.isAssignableFrom(_class);\n}",
    "begin_line": 282,
    "end_line": 284,
    "comment": "/** \n * Method that can be used for checking whether this type is a \"real\" Collection type; meaning whether it represents a parameterized subtype of {@link java.util.Collection} or just something that acts like one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.toString#293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.toString()",
    "snippet": "@Override public String toString(){\n  return String.format(\"[map-like type; class %s, %s -\u003e %s]\",_class.getName(),_keyType,_valueType);\n}",
    "begin_line": 293,
    "end_line": 296,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapLikeType.equals#299",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapLikeType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapLikeType",
    "signature": "com.fasterxml.jackson.databind.type.MapLikeType.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  MapLikeType other\u003d(MapLikeType)o;\n  return (_class \u003d\u003d other._class) \u0026\u0026 _keyType.equals(other._keyType) \u0026\u0026 _valueType.equals(other._valueType);\n}",
    "begin_line": 299,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.MapType#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.MapType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "private MapType(Class\u003c?\u003e mapType,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType keyT,JavaType valueT,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(mapType,bindings,superClass,superInts,keyT,valueT,valueHandler,typeHandler,asStatic);\n}",
    "begin_line": 20,
    "end_line": 25,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.MapType#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.MapType(com.fasterxml.jackson.databind.type.TypeBase, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "protected MapType(TypeBase base,JavaType keyT,JavaType valueT){\n  super(base,keyT,valueT);\n}",
    "begin_line": 30,
    "end_line": 32,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.construct#37",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static MapType construct(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInts,JavaType keyT,JavaType valueT){\n  return new MapType(rawType,bindings,superClass,superInts,keyT,valueT,null,null,false);\n}",
    "begin_line": 37,
    "end_line": 41,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.construct#44",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.construct(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public static MapType construct(Class\u003c?\u003e rawType,JavaType keyT,JavaType valueT){\n  TypeVariable\u003c?\u003e[] vars\u003drawType.getTypeParameters();\n  TypeBindings bindings;\n  if ((vars \u003d\u003d null) || (vars.length !\u003d 2)) {\n    bindings\u003dTypeBindings.emptyBindings();\n  }\n else {\n    bindings\u003dTypeBindings.create(rawType,keyT,valueT);\n  }\n  return new MapType(rawType,bindings,_bogusSuperClass(rawType),null,keyT,valueT,null,null,false);\n}",
    "begin_line": 44,
    "end_line": 58,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType._narrow#62",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated @Override protected JavaType _narrow(Class\u003c?\u003e subclass){\n  return new MapType(subclass,_bindings,_superClass,_superInterfaces,_keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 62,
    "end_line": 66,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withTypeHandler#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override public MapType withTypeHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType,_valueHandler,h,_asStatic);\n}",
    "begin_line": 69,
    "end_line": 72,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentTypeHandler#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override public MapType withContentTypeHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType.withTypeHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 75,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withValueHandler#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withValueHandler(java.lang.Object)",
    "snippet": "@Override public MapType withValueHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType,h,_typeHandler,_asStatic);\n}",
    "begin_line": 83,
    "end_line": 86,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentValueHandler#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override public MapType withContentValueHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType,_valueType.withValueHandler(h),_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 89,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withStaticTyping#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withStaticTyping()",
    "snippet": "@Override public MapType withStaticTyping(){\n  if (_asStatic) {\n    return this;\n  }\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType.withStaticTyping(),_valueType.withStaticTyping(),_valueHandler,_typeHandler,true);\n}",
    "begin_line": 96,
    "end_line": 103,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withContentType#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withContentType(JavaType contentType){\n  if (_valueType \u003d\u003d contentType) {\n    return this;\n  }\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType,contentType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 106,
    "end_line": 112,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyType#115",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public MapType withKeyType(JavaType keyType){\n  if (keyType \u003d\u003d _keyType) {\n    return this;\n  }\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 115,
    "end_line": 121,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.refine#124",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override public JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return new MapType(rawType,bindings,superClass,superInterfaces,_keyType,_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 124,
    "end_line": 129,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyTypeHandler#138",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyTypeHandler(java.lang.Object)",
    "snippet": "@Override public MapType withKeyTypeHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType.withTypeHandler(h),_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 138,
    "end_line": 143,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.withKeyValueHandler#146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.withKeyValueHandler(java.lang.Object)",
    "snippet": "@Override public MapType withKeyValueHandler(Object h){\n  return new MapType(_class,_bindings,_superClass,_superInterfaces,_keyType.withValueHandler(h),_valueType,_valueHandler,_typeHandler,_asStatic);\n}",
    "begin_line": 146,
    "end_line": 150,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MapType.toString#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/MapType.java",
    "class_name": "com.fasterxml.jackson.databind.type.MapType",
    "signature": "com.fasterxml.jackson.databind.type.MapType.toString()",
    "snippet": "@Override public String toString(){\n  return \"[map type; class \" + _class.getName() + \", \"+ _keyType+ \" -\u003e \"+ _valueType+ \"]\";\n}",
    "begin_line": 159,
    "end_line": 162,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls){\n  this(cls,TypeBindings.emptyBindings(),null,null);\n}",
    "begin_line": 32,
    "end_line": 34,
    "comment": "/** \n * Constructor only used by core Jackson databind functionality; should never be called by application code. \u003cp\u003e As with other direct construction that by-passes  {@link TypeFactory}, no introspection occurs with respect to super-types; caller must be aware of consequences if using this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#36",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls,TypeBindings bindings,JavaType superClass,JavaType[] superInts){\n  this(cls,bindings,superClass,superInts,null,null,false);\n}",
    "begin_line": 36,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#47",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected SimpleType(TypeBase base){\n  super(base);\n}",
    "begin_line": 47,
    "end_line": 49,
    "comment": "/** \n * Simple copy-constructor, usually used when upgrading/refining a simple type into more specialized type.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#51",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls,TypeBindings bindings,JavaType superClass,JavaType[] superInts,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(cls,bindings,superClass,superInts,0,valueHandler,typeHandler,asStatic);\n}",
    "begin_line": 51,
    "end_line": 57,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.SimpleType#64",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.SimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected SimpleType(Class\u003c?\u003e cls,TypeBindings bindings,JavaType superClass,JavaType[] superInts,int extraHash,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(cls,bindings,superClass,superInts,extraHash,valueHandler,typeHandler,asStatic);\n}",
    "begin_line": 64,
    "end_line": 70,
    "comment": "/** \n * Pass-through constructor used by  {@link ReferenceType}.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.constructUnsafe#81",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.constructUnsafe(java.lang.Class\u003c?\u003e)",
    "snippet": "public static SimpleType constructUnsafe(Class\u003c?\u003e raw){\n  return new SimpleType(raw,null,null,null,null,null,false);\n}",
    "begin_line": 81,
    "end_line": 85,
    "comment": "/** \n * Method used by core Jackson classes: NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. \u003cp\u003e NOTE: public only because it is called by \u003ccode\u003eObjectMapper\u003c/code\u003e which is not in same package\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.construct#101",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.construct(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public static SimpleType construct(Class\u003c?\u003e cls){\n  if (Map.class.isAssignableFrom(cls)) {\n    throw new IllegalArgumentException(\"Cannot construct SimpleType for a Map (class: \" + cls.getName() + \")\");\n  }\n  if (Collection.class.isAssignableFrom(cls)) {\n    throw new IllegalArgumentException(\"Cannot construct SimpleType for a Collection (class: \" + cls.getName() + \")\");\n  }\n  if (cls.isArray()) {\n    throw new IllegalArgumentException(\"Cannot construct SimpleType for an array (class: \" + cls.getName() + \")\");\n  }\n  TypeBindings b\u003dTypeBindings.emptyBindings();\n  return new SimpleType(cls,b,_buildSuperClass(cls.getSuperclass(),b),null,null,null,false);\n}",
    "begin_line": 101,
    "end_line": 119,
    "comment": "/** \n * Method that should NOT to be used by application code: it does NOT properly handle inspection of super-types, so neither parent Classes nor implemented Interfaces are accessible with resulting type instance. Instead, please use  {@link TypeFactory}\u0027s \u003ccode\u003econstructType\u003c/code\u003e methods which handle introspection appropriately. \u003cp\u003e Note that prior to 2.7, method usage was not limited and would typically have worked acceptably: the problem comes from inability to resolve super-type information, for which  {@link TypeFactory} is needed.\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._narrow#123",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._narrow(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override @Deprecated protected JavaType _narrow(Class\u003c?\u003e subclass){\n  if (_class \u003d\u003d subclass) {\n    return this;\n  }\n  if (!_class.isAssignableFrom(subclass)) {\n    return new SimpleType(subclass,_bindings,this,_superInterfaces,_valueHandler,_typeHandler,_asStatic);\n  }\n  Class\u003c?\u003e next\u003dsubclass.getSuperclass();\n  if (next \u003d\u003d _class) {\n    return new SimpleType(subclass,_bindings,this,_superInterfaces,_valueHandler,_typeHandler,_asStatic);\n  }\n  if ((next !\u003d null) \u0026\u0026 _class.isAssignableFrom(next)) {\n    JavaType superb\u003d_narrow(next);\n    return new SimpleType(subclass,_bindings,superb,null,_valueHandler,_typeHandler,_asStatic);\n  }\n  Class\u003c?\u003e[] nextI\u003dsubclass.getInterfaces();\n  for (  Class\u003c?\u003e iface : nextI) {\n    if (iface \u003d\u003d _class) {\n      return new SimpleType(subclass,_bindings,null,new JavaType[]{this},_valueHandler,_typeHandler,_asStatic);\n    }\n    if (_class.isAssignableFrom(iface)) {\n      JavaType superb\u003d_narrow(iface);\n      return new SimpleType(subclass,_bindings,null,new JavaType[]{superb},_valueHandler,_typeHandler,_asStatic);\n    }\n  }\n  throw new IllegalArgumentException(\"Internal error: Cannot resolve sub-type for Class \" + subclass.getName() + \" to \"+ _class.getName());\n}",
    "begin_line": 123,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentType#170",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Override public JavaType withContentType(JavaType contentType){\n  throw new IllegalArgumentException(\"Simple types have no content types; cannot call withContentType()\");\n}",
    "begin_line": 170,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withTypeHandler#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withTypeHandler(java.lang.Object)",
    "snippet": "@Override public SimpleType withTypeHandler(Object h){\n  if (_typeHandler \u003d\u003d h) {\n    return this;\n  }\n  return new SimpleType(_class,_bindings,_superClass,_superInterfaces,_valueHandler,h,_asStatic);\n}",
    "begin_line": 175,
    "end_line": 180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentTypeHandler#183",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentTypeHandler(java.lang.Object)",
    "snippet": "@Override public JavaType withContentTypeHandler(Object h){\n  throw new IllegalArgumentException(\"Simple types have no content types; cannot call withContenTypeHandler()\");\n}",
    "begin_line": 183,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withValueHandler#189",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withValueHandler(java.lang.Object)",
    "snippet": "@Override public SimpleType withValueHandler(Object h){\n  if (h \u003d\u003d _valueHandler) {\n    return this;\n  }\n  return new SimpleType(_class,_bindings,_superClass,_superInterfaces,h,_typeHandler,_asStatic);\n}",
    "begin_line": 189,
    "end_line": 194,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withContentValueHandler#197",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withContentValueHandler(java.lang.Object)",
    "snippet": "@Override public SimpleType withContentValueHandler(Object h){\n  throw new IllegalArgumentException(\"Simple types have no content types; cannot call withContenValueHandler()\");\n}",
    "begin_line": 197,
    "end_line": 200,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.withStaticTyping#203",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.withStaticTyping()",
    "snippet": "@Override public SimpleType withStaticTyping(){\n  return _asStatic ? this : new SimpleType(_class,_bindings,_superClass,_superInterfaces,_valueHandler,_typeHandler,true);\n}",
    "begin_line": 203,
    "end_line": 206,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.refine#209",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.refine(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Override public JavaType refine(Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return null;\n}",
    "begin_line": 209,
    "end_line": 213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.buildCanonicalName#216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.buildCanonicalName()",
    "snippet": "@Override protected String buildCanonicalName(){\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(_class.getName());\n  final int count\u003d_bindings.size();\n  if (count \u003e 0) {\n    sb.append(\u0027\u003c\u0027);\n    for (int i\u003d0; i \u003c count; ++i) {\n      JavaType t\u003dcontainedType(i);\n      if (i \u003e 0) {\n        sb.append(\u0027,\u0027);\n      }\n      sb.append(t.toCanonical());\n    }\n    sb.append(\u0027\u003e\u0027);\n  }\n  return sb.toString();\n}",
    "begin_line": 216,
    "end_line": 234,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.isContainerType#243",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.isContainerType()",
    "snippet": "@Override public boolean isContainerType(){\n  return false;\n}",
    "begin_line": 243,
    "end_line": 243,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.hasContentType#246",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.hasContentType()",
    "snippet": "@Override public boolean hasContentType(){\n  return false;\n}",
    "begin_line": 246,
    "end_line": 246,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getErasedSignature#249",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getErasedSignature(StringBuilder sb){\n  return _classSignature(_class,sb,true);\n}",
    "begin_line": 249,
    "end_line": 251,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.getGenericSignature#254",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override public StringBuilder getGenericSignature(StringBuilder sb){\n  _classSignature(_class,sb,false);\n  final int count\u003d_bindings.size();\n  if (count \u003e 0) {\n    sb.append(\u0027\u003c\u0027);\n    for (int i\u003d0; i \u003c count; ++i) {\n      sb\u003dcontainedType(i).getGenericSignature(sb);\n    }\n    sb.append(\u0027\u003e\u0027);\n  }\n  sb.append(\u0027;\u0027);\n  return sb;\n}",
    "begin_line": 254,
    "end_line": 268,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType._buildSuperClass#282",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType._buildSuperClass(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "private static JavaType _buildSuperClass(Class\u003c?\u003e superClass,TypeBindings b){\n  if (superClass \u003d\u003d null) {\n    return null;\n  }\n  if (superClass \u003d\u003d Object.class) {\n    return TypeFactory.unknownType();\n  }\n  JavaType superSuper\u003d_buildSuperClass(superClass.getSuperclass(),b);\n  return new SimpleType(superClass,b,superSuper,null,null,null,false);\n}",
    "begin_line": 282,
    "end_line": 293,
    "comment": "/** \n * Helper method we need to recursively build skeletal representations of superclasses.\n * @since 2.7 -- remove when not needed (2.8?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.toString#302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.toString()",
    "snippet": "@Override public String toString(){\n  StringBuilder sb\u003dnew StringBuilder(40);\n  sb.append(\"[simple type, class \").append(buildCanonicalName()).append(\u0027]\u0027);\n  return sb.toString();\n}",
    "begin_line": 302,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SimpleType.equals#310",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/SimpleType.java",
    "class_name": "com.fasterxml.jackson.databind.type.SimpleType",
    "signature": "com.fasterxml.jackson.databind.type.SimpleType.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  SimpleType other\u003d(SimpleType)o;\n  if (other._class !\u003d this._class)   return false;\n  TypeBindings b1\u003d_bindings;\n  TypeBindings b2\u003dother._bindings;\n  return b1.equals(b2);\n}",
    "begin_line": 310,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#43",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[], int, java.lang.Object, java.lang.Object, boolean)",
    "snippet": "protected TypeBase(Class\u003c?\u003e raw,TypeBindings bindings,JavaType superClass,JavaType[] superInts,int hash,Object valueHandler,Object typeHandler,boolean asStatic){\n  super(raw,hash,valueHandler,typeHandler,asStatic);\n  _bindings\u003d(bindings \u003d\u003d null) ? NO_BINDINGS : bindings;\n  _superClass\u003dsuperClass;\n  _superInterfaces\u003dsuperInts;\n}",
    "begin_line": 43,
    "end_line": 51,
    "comment": "/** \n * Main constructor to use by extending classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.TypeBase#58",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.TypeBase(com.fasterxml.jackson.databind.type.TypeBase)",
    "snippet": "protected TypeBase(TypeBase base){\n  super(base);\n  _superClass\u003dbase._superClass;\n  _superInterfaces\u003dbase._superInterfaces;\n  _bindings\u003dbase._bindings;\n}",
    "begin_line": 58,
    "end_line": 63,
    "comment": "/** \n * Copy-constructor used when refining/upgrading type instances.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.toCanonical#66",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.toCanonical()",
    "snippet": "@Override public String toCanonical(){\n  String str\u003d_canonicalName;\n  if (str \u003d\u003d null) {\n    str\u003dbuildCanonicalName();\n  }\n  return str;\n}",
    "begin_line": 66,
    "end_line": 73,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.buildCanonicalName#75",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.buildCanonicalName()",
    "snippet": "protected String buildCanonicalName(){\n  return _class.getName();\n}",
    "begin_line": 75,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getGenericSignature#80",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getGenericSignature(java.lang.StringBuilder)",
    "snippet": "@Override public abstract StringBuilder getGenericSignature(StringBuilder sb);",
    "begin_line": 80,
    "end_line": 80,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getErasedSignature#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getErasedSignature(java.lang.StringBuilder)",
    "snippet": "@Override public abstract StringBuilder getErasedSignature(StringBuilder sb);",
    "begin_line": 83,
    "end_line": 83,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getBindings#86",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getBindings()",
    "snippet": "@Override public TypeBindings getBindings(){\n  return _bindings;\n}",
    "begin_line": 86,
    "end_line": 88,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeCount#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeCount()",
    "snippet": "@Override public int containedTypeCount(){\n  return _bindings.size();\n}",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedType#96",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedType(int)",
    "snippet": "@Override public JavaType containedType(int index){\n  return _bindings.getBoundType(index);\n}",
    "begin_line": 96,
    "end_line": 98,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.containedTypeName#102",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.containedTypeName(int)",
    "snippet": "@Override @Deprecated public String containedTypeName(int index){\n  return _bindings.getBoundName(index);\n}",
    "begin_line": 102,
    "end_line": 104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getSuperClass#107",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getSuperClass()",
    "snippet": "@Override public JavaType getSuperClass(){\n  return _superClass;\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.getInterfaces#112",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.getInterfaces()",
    "snippet": "@Override public List\u003cJavaType\u003e getInterfaces(){\n  if (_superInterfaces \u003d\u003d null) {\n    return Collections.emptyList();\n  }\nswitch (_superInterfaces.length) {\ncase 0:    return Collections.emptyList();\ncase 1:  return Collections.singletonList(_superInterfaces[0]);\n}\nreturn Arrays.asList(_superInterfaces);\n}",
    "begin_line": 112,
    "end_line": 123,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findSuperType#126",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findSuperType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public final JavaType findSuperType(Class\u003c?\u003e rawTarget){\n  if (rawTarget \u003d\u003d _class) {\n    return this;\n  }\n  if (rawTarget.isInterface() \u0026\u0026 (_superInterfaces !\u003d null)) {\n    for (int i\u003d0, count\u003d_superInterfaces.length; i \u003c count; ++i) {\n      JavaType type\u003d_superInterfaces[i].findSuperType(rawTarget);\n      if (type !\u003d null) {\n        return type;\n      }\n    }\n  }\n  if (_superClass !\u003d null) {\n    JavaType type\u003d_superClass.findSuperType(rawTarget);\n    if (type !\u003d null) {\n      return type;\n    }\n  }\n  return null;\n}",
    "begin_line": 126,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.findTypeParameters#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.findTypeParameters(java.lang.Class\u003c?\u003e)",
    "snippet": "@Override public JavaType[] findTypeParameters(Class\u003c?\u003e expType){\n  JavaType match\u003dfindSuperType(expType);\n  if (match \u003d\u003d null) {\n    return NO_TYPES;\n  }\n  return match.getBindings().typeParameterArray();\n}",
    "begin_line": 151,
    "end_line": 158,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serializeWithType#167",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serializeWithType(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer)",
    "snippet": "@Override public void serializeWithType(JsonGenerator g,SerializerProvider provider,TypeSerializer typeSer) throws IOException {\n  WritableTypeId typeIdDef\u003dnew WritableTypeId(this,JsonToken.VALUE_STRING);\n  typeSer.writeTypePrefix(g,typeIdDef);\n  this.serialize(g,provider);\n  typeSer.writeTypeSuffix(g,typeIdDef);\n}",
    "begin_line": 167,
    "end_line": 175,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase.serialize#178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase.serialize(JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider)",
    "snippet": "@Override public void serialize(JsonGenerator gen,SerializerProvider provider) throws IOException, JsonProcessingException {\n  gen.writeString(toCanonical());\n}",
    "begin_line": 178,
    "end_line": 182,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._classSignature#194",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._classSignature(java.lang.Class\u003c?\u003e, java.lang.StringBuilder, boolean)",
    "snippet": "protected static StringBuilder _classSignature(Class\u003c?\u003e cls,StringBuilder sb,boolean trailingSemicolon){\n  if (cls.isPrimitive()) {\n    if (cls \u003d\u003d Boolean.TYPE) {\n      sb.append(\u0027Z\u0027);\n    }\n else     if (cls \u003d\u003d Byte.TYPE) {\n      sb.append(\u0027B\u0027);\n    }\n else     if (cls \u003d\u003d Short.TYPE) {\n      sb.append(\u0027S\u0027);\n    }\n else     if (cls \u003d\u003d Character.TYPE) {\n      sb.append(\u0027C\u0027);\n    }\n else     if (cls \u003d\u003d Integer.TYPE) {\n      sb.append(\u0027I\u0027);\n    }\n else     if (cls \u003d\u003d Long.TYPE) {\n      sb.append(\u0027J\u0027);\n    }\n else     if (cls \u003d\u003d Float.TYPE) {\n      sb.append(\u0027F\u0027);\n    }\n else     if (cls \u003d\u003d Double.TYPE) {\n      sb.append(\u0027D\u0027);\n    }\n else     if (cls \u003d\u003d Void.TYPE) {\n      sb.append(\u0027V\u0027);\n    }\n else {\n      throw new IllegalStateException(\"Unrecognized primitive type: \" + cls.getName());\n    }\n  }\n else {\n    sb.append(\u0027L\u0027);\n    String name\u003dcls.getName();\n    for (int i\u003d0, len\u003dname.length(); i \u003c len; ++i) {\n      char c\u003dname.charAt(i);\n      if (c \u003d\u003d \u0027.\u0027)       c\u003d\u0027/\u0027;\n      sb.append(c);\n    }\n    if (trailingSemicolon) {\n      sb.append(\u0027;\u0027);\n    }\n  }\n  return sb;\n}",
    "begin_line": 194,
    "end_line": 239,
    "comment": "/** \n * @param trailingSemicolon Whether to add trailing semicolon for non-primitive(reference) types or not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBase._bogusSuperClass#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBase.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBase",
    "signature": "com.fasterxml.jackson.databind.type.TypeBase._bogusSuperClass(java.lang.Class\u003c?\u003e)",
    "snippet": "protected static JavaType _bogusSuperClass(Class\u003c?\u003e cls){\n  Class\u003c?\u003e parent\u003dcls.getSuperclass();\n  if (parent \u003d\u003d null) {\n    return null;\n  }\n  return TypeFactory.unknownType();\n}",
    "begin_line": 250,
    "end_line": 256,
    "comment": "/** \n * Internal helper method used to figure out nominal super-class for deprecated factory methods / constructors, where we are not given properly resolved supertype hierarchy. Will basically give `JavaType` for `java.lang.Object` for classes other than `java.lafgn.Object`; null for others.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.TypeBindings#52",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.TypeBindings(java.lang.String[], com.fasterxml.jackson.databind.JavaType[], java.lang.String[])",
    "snippet": "private TypeBindings(String[] names,JavaType[] types,String[] uvars){\n  _names\u003d(names \u003d\u003d null) ? NO_STRINGS : names;\n  _types\u003d(types \u003d\u003d null) ? NO_TYPES : types;\n  if (_names.length !\u003d _types.length) {\n    throw new IllegalArgumentException(\"Mismatching names (\" + _names.length + \"), types (\"+ _types.length+ \")\");\n  }\n  int h\u003d1;\n  for (int i\u003d0, len\u003d_types.length; i \u003c len; ++i) {\n    h+\u003d_types[i].hashCode();\n  }\n  _unboundVariables\u003duvars;\n  _hashCode\u003dh;\n}",
    "begin_line": 52,
    "end_line": 65,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.emptyBindings#67",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.emptyBindings()",
    "snippet": "public static TypeBindings emptyBindings(){\n  return EMPTY;\n}",
    "begin_line": 67,
    "end_line": 69,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.readResolve#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.readResolve()",
    "snippet": "protected Object readResolve(){\n  if ((_names \u003d\u003d null) || (_names.length \u003d\u003d 0)) {\n    return EMPTY;\n  }\n  return this;\n}",
    "begin_line": 72,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#83",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, java.util.List\u003ccom.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType,List\u003cJavaType\u003e typeList){\n  JavaType[] types\u003d(typeList \u003d\u003d null || typeList.isEmpty()) ? NO_TYPES : typeList.toArray(new JavaType[typeList.size()]);\n  return create(erasedType,types);\n}",
    "begin_line": 83,
    "end_line": 88,
    "comment": "/** \n * Factory method for constructing bindings for given class using specified type parameters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#90",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType,JavaType[] types){\n  if (types \u003d\u003d null) {\n    types\u003dNO_TYPES;\n  }\n else switch (types.length) {\ncase 1:    return create(erasedType,types[0]);\ncase 2:  return create(erasedType,types[0],types[1]);\n}\nTypeVariable\u003c?\u003e[] vars\u003derasedType.getTypeParameters();\nString[] names;\nif (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\nnames\u003dNO_STRINGS;\n}\n else {\nint len\u003dvars.length;\nnames\u003dnew String[len];\nfor (int i\u003d0; i \u003c len; ++i) {\n  names[i]\u003dvars[i].getName();\n}\n}\nif (names.length !\u003d types.length) {\nthrow new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with \"+ types.length+ \" type parameter\"+ ((types.length \u003d\u003d 1) ? \"\" : \"s\")+ \": class expects \"+ names.length);\n}\nreturn new TypeBindings(names,types,null);\n}",
    "begin_line": 90,
    "end_line": 118,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#120",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType,JavaType typeArg1){\n  TypeVariable\u003c?\u003e[] vars\u003dTypeParamStash.paramsFor1(erasedType);\n  int varLen\u003d(vars \u003d\u003d null) ? 0 : vars.length;\n  if (varLen !\u003d 1) {\n    throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 1 type parameter: class expects \"+ varLen);\n  }\n  return new TypeBindings(new String[]{vars[0].getName()},new JavaType[]{typeArg1},null);\n}",
    "begin_line": 120,
    "end_line": 131,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.create#133",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.create(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings create(Class\u003c?\u003e erasedType,JavaType typeArg1,JavaType typeArg2){\n  TypeVariable\u003c?\u003e[] vars\u003dTypeParamStash.paramsFor2(erasedType);\n  int varLen\u003d(vars \u003d\u003d null) ? 0 : vars.length;\n  if (varLen !\u003d 2) {\n    throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 2 type parameters: class expects \"+ varLen);\n  }\n  return new TypeBindings(new String[]{vars[0].getName(),vars[1].getName()},new JavaType[]{typeArg1,typeArg2},null);\n}",
    "begin_line": 133,
    "end_line": 144,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType,JavaType typeArg1){\n  TypeVariable\u003c?\u003e[] vars\u003derasedType.getTypeParameters();\n  int varLen\u003d(vars \u003d\u003d null) ? 0 : vars.length;\n  if (varLen \u003d\u003d 0) {\n    return EMPTY;\n  }\n  if (varLen !\u003d 1) {\n    throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with 1 type parameter: class expects \"+ varLen);\n  }\n  return new TypeBindings(new String[]{vars[0].getName()},new JavaType[]{typeArg1},null);\n}",
    "begin_line": 151,
    "end_line": 164,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.createIfNeeded#171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.createIfNeeded(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public static TypeBindings createIfNeeded(Class\u003c?\u003e erasedType,JavaType[] types){\n  TypeVariable\u003c?\u003e[] vars\u003derasedType.getTypeParameters();\n  if (vars \u003d\u003d null || vars.length \u003d\u003d 0) {\n    return EMPTY;\n  }\n  if (types \u003d\u003d null) {\n    types\u003dNO_TYPES;\n  }\n  int len\u003dvars.length;\n  String[] names\u003dnew String[len];\n  for (int i\u003d0; i \u003c len; ++i) {\n    names[i]\u003dvars[i].getName();\n  }\n  if (names.length !\u003d types.length) {\n    throw new IllegalArgumentException(\"Cannot create TypeBindings for class \" + erasedType.getName() + \" with \"+ types.length+ \" type parameter\"+ ((types.length \u003d\u003d 1) ? \"\" : \"s\")+ \": class expects \"+ names.length);\n  }\n  return new TypeBindings(names,types,null);\n}",
    "begin_line": 171,
    "end_line": 192,
    "comment": "/** \n * Alternate factory method that may be called if it is possible that type does or does not require type parameters; this is mostly useful for collection- and map-like types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.withUnboundVariable#199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.withUnboundVariable(java.lang.String)",
    "snippet": "public TypeBindings withUnboundVariable(String name){\n  int len\u003d(_unboundVariables \u003d\u003d null) ? 0 : _unboundVariables.length;\n  String[] names\u003d(len \u003d\u003d 0) ? new String[1] : Arrays.copyOf(_unboundVariables,len + 1);\n  names[len]\u003dname;\n  return new TypeBindings(_names,_types,names);\n}",
    "begin_line": 199,
    "end_line": 206,
    "comment": "/** \n * Method for creating an instance that has same bindings as this object, plus an indicator for additional type variable that may be unbound within this context; this is needed to resolve recursive self-references.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.findBoundType#217",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.findBoundType(java.lang.String)",
    "snippet": "public JavaType findBoundType(String name){\n  for (int i\u003d0, len\u003d_names.length; i \u003c len; ++i) {\n    if (name.equals(_names[i])) {\n      JavaType t\u003d_types[i];\n      if (t instanceof ResolvedRecursiveType) {\n        ResolvedRecursiveType rrt\u003d(ResolvedRecursiveType)t;\n        JavaType t2\u003drrt.getSelfReferencedType();\n        if (t2 !\u003d null) {\n          t\u003dt2;\n        }\n else {\n        }\n      }\n      return t;\n    }\n  }\n  return null;\n}",
    "begin_line": 217,
    "end_line": 243,
    "comment": "/** \n * Find type bound to specified name, if there is one; returns bound type if so, null if not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.isEmpty#245",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.isEmpty()",
    "snippet": "public boolean isEmpty(){\n  return (_types.length \u003d\u003d 0);\n}",
    "begin_line": 245,
    "end_line": 247,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.size#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.size()",
    "snippet": "public int size(){\n  return _types.length;\n}",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Returns number of bindings contained\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundName#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundName(int)",
    "snippet": "public String getBoundName(int index){\n  if (index \u003c 0 || index \u003e\u003d _names.length) {\n    return null;\n  }\n  return _names[index];\n}",
    "begin_line": 256,
    "end_line": 262,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getBoundType#264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getBoundType(int)",
    "snippet": "public JavaType getBoundType(int index){\n  if (index \u003c 0 || index \u003e\u003d _types.length) {\n    return null;\n  }\n  return _types[index];\n}",
    "begin_line": 264,
    "end_line": 270,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.getTypeParameters#275",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.getTypeParameters()",
    "snippet": "public List\u003cJavaType\u003e getTypeParameters(){\n  if (_types.length \u003d\u003d 0) {\n    return Collections.emptyList();\n  }\n  return Arrays.asList(_types);\n}",
    "begin_line": 275,
    "end_line": 281,
    "comment": "/** \n * Accessor for getting bound types in declaration order\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hasUnbound#286",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hasUnbound(java.lang.String)",
    "snippet": "public boolean hasUnbound(String name){\n  if (_unboundVariables !\u003d null) {\n    for (int i\u003d_unboundVariables.length; --i \u003e\u003d 0; ) {\n      if (name.equals(_unboundVariables[i])) {\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 286,
    "end_line": 295,
    "comment": "/** \n * @since 2.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.asKey#303",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.asKey(java.lang.Class\u003c?\u003e)",
    "snippet": "public Object asKey(Class\u003c?\u003e rawBase){\n  return new AsKey(rawBase,_types,_hashCode);\n}",
    "begin_line": 303,
    "end_line": 307,
    "comment": "/** \n * Factory method that will create an object that can be used as a key for caching purposes by  {@link TypeFactory}\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.toString#315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override public String toString(){\n  if (_types.length \u003d\u003d 0) {\n    return \"\u003c\u003e\";\n  }\n  StringBuilder sb\u003dnew StringBuilder();\n  sb.append(\u0027\u003c\u0027);\n  for (int i\u003d0, len\u003d_types.length; i \u003c len; ++i) {\n    if (i \u003e 0) {\n      sb.append(\u0027,\u0027);\n    }\n    String sig\u003d_types[i].getGenericSignature();\n    sb.append(sig);\n  }\n  sb.append(\u0027\u003e\u0027);\n  return sb.toString();\n}",
    "begin_line": 315,
    "end_line": 332,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.hashCode#334",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _hashCode;\n}",
    "begin_line": 334,
    "end_line": 334,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.equals#336",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (!ClassUtil.hasClass(o,getClass())) {\n    return false;\n  }\n  TypeBindings other\u003d(TypeBindings)o;\n  int len\u003d_types.length;\n  if (len !\u003d other.size()) {\n    return false;\n  }\n  JavaType[] otherTypes\u003dother._types;\n  for (int i\u003d0; i \u003c len; ++i) {\n    if (!otherTypes[i].equals(_types[i])) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 336,
    "end_line": 354,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeBindings.typeParameterArray#362",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.typeParameterArray()",
    "snippet": "protected JavaType[] typeParameterArray(){\n  return _types;\n}",
    "begin_line": 362,
    "end_line": 364,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor1#394",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor1(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor1(Class\u003c?\u003e erasedType){\n  if (erasedType \u003d\u003d Collection.class) {\n    return VARS_COLLECTION;\n  }\n  if (erasedType \u003d\u003d List.class) {\n    return VARS_LIST;\n  }\n  if (erasedType \u003d\u003d ArrayList.class) {\n    return VARS_ARRAY_LIST;\n  }\n  if (erasedType \u003d\u003d AbstractList.class) {\n    return VARS_ABSTRACT_LIST;\n  }\n  if (erasedType \u003d\u003d Iterable.class) {\n    return VARS_ITERABLE;\n  }\n  return erasedType.getTypeParameters();\n}",
    "begin_line": 394,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParamStash.paramsFor2#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.paramsFor2(java.lang.Class\u003c?\u003e)",
    "snippet": "public static TypeVariable\u003c?\u003e[] paramsFor2(Class\u003c?\u003e erasedType){\n  if (erasedType \u003d\u003d Map.class) {\n    return VARS_MAP;\n  }\n  if (erasedType \u003d\u003d HashMap.class) {\n    return VARS_HASH_MAP;\n  }\n  if (erasedType \u003d\u003d LinkedHashMap.class) {\n    return VARS_LINKED_HASH_MAP;\n  }\n  return erasedType.getTypeParameters();\n}",
    "begin_line": 414,
    "end_line": 426,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.AsKey#439",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.AsKey(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[], int)",
    "snippet": "public AsKey(Class\u003c?\u003e raw,JavaType[] params,int hash){\n  _raw\u003draw;\n  _params\u003dparams;\n  _hash\u003dhash;\n}",
    "begin_line": 439,
    "end_line": 443,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.hashCode#446",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return _hash;\n}",
    "begin_line": 446,
    "end_line": 446,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.equals#449",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  if (o \u003d\u003d this)   return true;\n  if (o \u003d\u003d null)   return false;\n  if (o.getClass() !\u003d getClass())   return false;\n  AsKey other\u003d(AsKey)o;\n  if ((_hash \u003d\u003d other._hash) \u0026\u0026 (_raw \u003d\u003d other._raw)) {\n    final JavaType[] otherParams\u003dother._params;\n    final int len\u003d_params.length;\n    if (len \u003d\u003d otherParams.length) {\n      for (int i\u003d0; i \u003c len; ++i) {\n        if (!_params[i].equals(otherParams[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}",
    "begin_line": 449,
    "end_line": 469,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AsKey.toString#472",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeBindings.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeBindings",
    "signature": "com.fasterxml.jackson.databind.type.TypeBindings.toString()",
    "snippet": "@Override public String toString(){\n  return _raw.getName() + \"\u003c\u003e\";\n}",
    "begin_line": 472,
    "end_line": 474,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#144",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory()",
    "snippet": "private TypeFactory(){\n  this(null);\n}",
    "begin_line": 144,
    "end_line": 146,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#151",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache){\n  if (typeCache \u003d\u003d null) {\n    typeCache\u003dnew LRUMap\u003cObject,JavaType\u003e(16,200);\n  }\n  _typeCache\u003dtypeCache;\n  _parser\u003dnew TypeParser(this);\n  _modifiers\u003dnull;\n  _classLoader\u003dnull;\n}",
    "begin_line": 151,
    "end_line": 159,
    "comment": "/** \n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.TypeFactory#161",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.TypeFactory(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e, com.fasterxml.jackson.databind.type.TypeParser, com.fasterxml.jackson.databind.type.TypeModifier[], java.lang.ClassLoader)",
    "snippet": "protected TypeFactory(LRUMap\u003cObject,JavaType\u003e typeCache,TypeParser p,TypeModifier[] mods,ClassLoader classLoader){\n  if (typeCache \u003d\u003d null) {\n    typeCache\u003dnew LRUMap\u003cObject,JavaType\u003e(16,200);\n  }\n  _typeCache\u003dtypeCache;\n  _parser\u003dp.withFactory(this);\n  _modifiers\u003dmods;\n  _classLoader\u003dclassLoader;\n}",
    "begin_line": 161,
    "end_line": 172,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withModifier#174",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withModifier(com.fasterxml.jackson.databind.type.TypeModifier)",
    "snippet": "public TypeFactory withModifier(TypeModifier mod){\n  LRUMap\u003cObject,JavaType\u003e typeCache\u003d_typeCache;\n  TypeModifier[] mods;\n  if (mod \u003d\u003d null) {\n    mods\u003dnull;\n    typeCache\u003dnull;\n  }\n else   if (_modifiers \u003d\u003d null) {\n    mods\u003dnew TypeModifier[]{mod};\n  }\n else {\n    mods\u003dArrayBuilders.insertInListNoDup(_modifiers,mod);\n  }\n  return new TypeFactory(typeCache,_parser,mods,_classLoader);\n}",
    "begin_line": 174,
    "end_line": 189,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withClassLoader#191",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withClassLoader(java.lang.ClassLoader)",
    "snippet": "public TypeFactory withClassLoader(ClassLoader classLoader){\n  return new TypeFactory(_typeCache,_parser,_modifiers,classLoader);\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.withCache#202",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.withCache(com.fasterxml.jackson.databind.util.LRUMap\u003cjava.lang.Object,com.fasterxml.jackson.databind.JavaType\u003e)",
    "snippet": "public TypeFactory withCache(LRUMap\u003cObject,JavaType\u003e cache){\n  return new TypeFactory(cache,_parser,_modifiers,_classLoader);\n}",
    "begin_line": 202,
    "end_line": 204,
    "comment": "/** \n * Mutant factory method that will construct new  {@link TypeFactory} withidentical settings except for different cache; most likely one with bigger maximum size.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.defaultInstance#211",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.defaultInstance()",
    "snippet": "public static TypeFactory defaultInstance(){\n  return instance;\n}",
    "begin_line": 211,
    "end_line": 211,
    "comment": "/** \n * Method used to access the globally shared instance, which has no custom configuration. Used by \u003ccode\u003eObjectMapper\u003c/code\u003e to get the default factory when constructed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.clearCache#223",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.clearCache()",
    "snippet": "public void clearCache(){\n  _typeCache.clear();\n}",
    "begin_line": 223,
    "end_line": 225,
    "comment": "/** \n * Method that will clear up any cached type definitions that may be cached by this  {@link TypeFactory} instance.This method should not be commonly used, that is, only use it if you know there is a problem with retention of type definitions; the most likely (and currently only known) problem is retention of  {@link Class} instances via {@link JavaType} reference.\n * @since 2.4.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.getClassLoader#227",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.getClassLoader()",
    "snippet": "public ClassLoader getClassLoader(){\n  return _classLoader;\n}",
    "begin_line": 227,
    "end_line": 229,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.unknownType#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.unknownType()",
    "snippet": "public static JavaType unknownType(){\n  return defaultInstance()._unknownType();\n}",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Method for constructing a marker type that indicates missing generic type information, which is handled same as simple type for \u003ccode\u003ejava.lang.Object\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.rawClass#252",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.rawClass(java.lang.reflect.Type)",
    "snippet": "public static Class\u003c?\u003e rawClass(Type t){\n  if (t instanceof Class\u003c?\u003e) {\n    return (Class\u003c?\u003e)t;\n  }\n  return defaultInstance().constructType(t).getRawClass();\n}",
    "begin_line": 252,
    "end_line": 258,
    "comment": "/** \n * Static helper method that can be called to figure out type-erased call for given JDK type. It can be called statically since type resolution process can never change actual type-erased class; thereby static default instance is used for determination.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findClass#272",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findClass(java.lang.String)",
    "snippet": "public Class\u003c?\u003e findClass(String className) throws ClassNotFoundException {\n  if (className.indexOf(\u0027.\u0027) \u003c 0) {\n    Class\u003c?\u003e prim\u003d_findPrimitive(className);\n    if (prim !\u003d null) {\n      return prim;\n    }\n  }\n  Throwable prob\u003dnull;\n  ClassLoader loader\u003dthis.getClassLoader();\n  if (loader \u003d\u003d null) {\n    loader\u003dThread.currentThread().getContextClassLoader();\n  }\n  if (loader !\u003d null) {\n    try {\n      return classForName(className,true,loader);\n    }\n catch (    Exception e) {\n      prob\u003dClassUtil.getRootCause(e);\n    }\n  }\n  try {\n    return classForName(className);\n  }\n catch (  Exception e) {\n    if (prob \u003d\u003d null) {\n      prob\u003dClassUtil.getRootCause(e);\n    }\n  }\n  ClassUtil.throwIfRTE(prob);\n  throw new ClassNotFoundException(prob.getMessage(),prob);\n}",
    "begin_line": 272,
    "end_line": 302,
    "comment": "/** \n * Low-level lookup method moved from  {@link com.fasterxml.jackson.databind.util.ClassUtil}, to allow for overriding of lookup functionality in environments like OSGi.\n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#304",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String, boolean, java.lang.ClassLoader)",
    "snippet": "protected Class\u003c?\u003e classForName(String name,boolean initialize,ClassLoader loader) throws ClassNotFoundException {\n  return Class.forName(name,true,loader);\n}",
    "begin_line": 304,
    "end_line": 307,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.classForName#309",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.classForName(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e classForName(String name) throws ClassNotFoundException {\n  return Class.forName(name);\n}",
    "begin_line": 309,
    "end_line": 311,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findPrimitive#313",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findPrimitive(java.lang.String)",
    "snippet": "protected Class\u003c?\u003e _findPrimitive(String className){\n  if (\"int\".equals(className))   return Integer.TYPE;\n  if (\"long\".equals(className))   return Long.TYPE;\n  if (\"float\".equals(className))   return Float.TYPE;\n  if (\"double\".equals(className))   return Double.TYPE;\n  if (\"boolean\".equals(className))   return Boolean.TYPE;\n  if (\"byte\".equals(className))   return Byte.TYPE;\n  if (\"char\".equals(className))   return Character.TYPE;\n  if (\"short\".equals(className))   return Short.TYPE;\n  if (\"void\".equals(className))   return Void.TYPE;\n  return null;\n}",
    "begin_line": 313,
    "end_line": 325,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSpecializedType#340",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructSpecializedType(JavaType baseType,Class\u003c?\u003e subclass){\n  final Class\u003c?\u003e rawBase\u003dbaseType.getRawClass();\n  if (rawBase \u003d\u003d subclass) {\n    return baseType;\n  }\n  JavaType newType;\n  do {\n    if (rawBase \u003d\u003d Object.class) {\n      newType\u003d_fromClass(null,subclass,EMPTY_BINDINGS);\n      break;\n    }\n    if (!rawBase.isAssignableFrom(subclass)) {\n      throw new IllegalArgumentException(String.format(\"Class %s not subtype of %s\",subclass.getName(),baseType));\n    }\n    if (baseType.getBindings().isEmpty()) {\n      newType\u003d_fromClass(null,subclass,EMPTY_BINDINGS);\n      break;\n    }\n    if (baseType.isContainerType()) {\n      if (baseType.isMapLikeType()) {\n        if ((subclass \u003d\u003d HashMap.class) || (subclass \u003d\u003d LinkedHashMap.class) || (subclass \u003d\u003d EnumMap.class)|| (subclass \u003d\u003d TreeMap.class)) {\n          newType\u003d_fromClass(null,subclass,TypeBindings.create(subclass,baseType.getKeyType(),baseType.getContentType()));\n          break;\n        }\n      }\n else       if (baseType.isCollectionLikeType()) {\n        if ((subclass \u003d\u003d ArrayList.class) || (subclass \u003d\u003d LinkedList.class) || (subclass \u003d\u003d HashSet.class)|| (subclass \u003d\u003d TreeSet.class)) {\n          newType\u003d_fromClass(null,subclass,TypeBindings.create(subclass,baseType.getContentType()));\n          break;\n        }\n        if (rawBase \u003d\u003d EnumSet.class) {\n          return baseType;\n        }\n      }\n    }\n    int typeParamCount\u003dsubclass.getTypeParameters().length;\n    if (typeParamCount \u003d\u003d 0) {\n      newType\u003d_fromClass(null,subclass,EMPTY_BINDINGS);\n      break;\n    }\n    TypeBindings tb\u003d_bindingsForSubtype(baseType,typeParamCount,subclass);\n    newType\u003d_fromClass(null,subclass,tb);\n  }\n while (false);\n  newType\u003dnewType.withHandlersFrom(baseType);\n  return newType;\n}",
    "begin_line": 340,
    "end_line": 410,
    "comment": "/** \n * Factory method for creating a subtype of given base type, as defined by specified subclass; but retaining generic type information if any. Can be used, for example, to get equivalent of \"HashMap\u0026lt;String,Integer\u0026gt;\" from \"Map\u0026lt;String,Integer\u0026gt;\" by giving \u003ccode\u003eHashMap.class\u003c/code\u003e as subclass.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._bindingsForSubtype#412",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._bindingsForSubtype(com.fasterxml.jackson.databind.JavaType, int, java.lang.Class\u003c?\u003e)",
    "snippet": "private TypeBindings _bindingsForSubtype(JavaType baseType,int typeParamCount,Class\u003c?\u003e subclass){\n  PlaceholderForType[] placeholders\u003dnew PlaceholderForType[typeParamCount];\n  for (int i\u003d0; i \u003c typeParamCount; ++i) {\n    placeholders[i]\u003dnew PlaceholderForType(i);\n  }\n  TypeBindings b\u003dTypeBindings.create(subclass,placeholders);\n  JavaType tmpSub\u003d_fromClass(null,subclass,b);\n  JavaType baseWithPlaceholders\u003dtmpSub.findSuperType(baseType.getRawClass());\n  if (baseWithPlaceholders \u003d\u003d null) {\n    throw new IllegalArgumentException(String.format(\"Internal error: unable to locate supertype (%s) from resolved subtype %s\",baseType.getRawClass().getName(),subclass.getName()));\n  }\n  String error\u003d_resolveTypePlaceholders(baseType,baseWithPlaceholders);\n  if (error !\u003d null) {\n    throw new IllegalArgumentException(\"Failed to specialize base type \" + baseType.toCanonical() + \" as \"+ subclass.getName()+ \", problem: \"+ error);\n  }\n  final JavaType[] typeParams\u003dnew JavaType[typeParamCount];\n  for (int i\u003d0; i \u003c typeParamCount; ++i) {\n    JavaType t\u003dplaceholders[i].actualType();\n    if (t \u003d\u003d null) {\n      t\u003dunknownType();\n    }\n    typeParams[i]\u003dt;\n  }\n  return TypeBindings.create(subclass,typeParams);\n}",
    "begin_line": 412,
    "end_line": 447,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveTypePlaceholders#449",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveTypePlaceholders(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private String _resolveTypePlaceholders(JavaType sourceType,JavaType actualType) throws IllegalArgumentException {\n  List\u003cJavaType\u003e expectedTypes\u003dsourceType.getBindings().getTypeParameters();\n  List\u003cJavaType\u003e actualTypes\u003dactualType.getBindings().getTypeParameters();\n  for (int i\u003d0, len\u003dexpectedTypes.size(); i \u003c len; ++i) {\n    JavaType exp\u003dexpectedTypes.get(i);\n    JavaType act\u003dactualTypes.get(i);\n    if (!_verifyAndResolvePlaceholders(exp,act)) {\n      if (exp.hasRawClass(Object.class)) {\n        continue;\n      }\n      if (i \u003d\u003d 0) {\n        if (sourceType.hasRawClass(Map.class) \u0026\u0026 act.hasRawClass(Object.class)) {\n          continue;\n        }\n      }\n      if (exp.isInterface()) {\n        if (exp.isTypeOrSuperTypeOf(act.getRawClass())) {\n          continue;\n        }\n      }\n      return String.format(\"Type parameter #%d/%d differs; can not specialize %s with %s\",(i + 1),len,exp.toCanonical(),act.toCanonical());\n    }\n  }\n  return null;\n}",
    "begin_line": 449,
    "end_line": 486,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._verifyAndResolvePlaceholders#488",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._verifyAndResolvePlaceholders(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "private boolean _verifyAndResolvePlaceholders(JavaType exp,JavaType act){\n  if (act instanceof PlaceholderForType) {\n    ((PlaceholderForType)act).actualType(exp);\n    return true;\n  }\n  if (exp.getRawClass() !\u003d act.getRawClass()) {\n    return false;\n  }\n  List\u003cJavaType\u003e expectedTypes\u003dexp.getBindings().getTypeParameters();\n  List\u003cJavaType\u003e actualTypes\u003dact.getBindings().getTypeParameters();\n  for (int i\u003d0, len\u003dexpectedTypes.size(); i \u003c len; ++i) {\n    JavaType exp2\u003dexpectedTypes.get(i);\n    JavaType act2\u003dactualTypes.get(i);\n    if (!_verifyAndResolvePlaceholders(exp2,act2)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 488,
    "end_line": 511,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructGeneralizedType#523",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructGeneralizedType(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructGeneralizedType(JavaType baseType,Class\u003c?\u003e superClass){\n  final Class\u003c?\u003e rawBase\u003dbaseType.getRawClass();\n  if (rawBase \u003d\u003d superClass) {\n    return baseType;\n  }\n  JavaType superType\u003dbaseType.findSuperType(superClass);\n  if (superType \u003d\u003d null) {\n    if (!superClass.isAssignableFrom(rawBase)) {\n      throw new IllegalArgumentException(String.format(\"Class %s not a super-type of %s\",superClass.getName(),baseType));\n    }\n    throw new IllegalArgumentException(String.format(\"Internal error: class %s not included as super-type for %s\",superClass.getName(),baseType));\n  }\n  return superType;\n}",
    "begin_line": 523,
    "end_line": 543,
    "comment": "/** \n * Method similar to  {@link #constructSpecializedType}, but that creates a less-specific type of given type. Usually this is as simple as simply finding super-type with type erasure of \u003ccode\u003esuperClass\u003c/code\u003e, but there may be need for some additional work-arounds.\n * @param superClass\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructFromCanonical#555",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructFromCanonical(java.lang.String)",
    "snippet": "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException {\n  return _parser.parse(canonical);\n}",
    "begin_line": 555,
    "end_line": 558,
    "comment": "/** \n * Factory method for constructing a  {@link JavaType} out of its canonicalrepresentation (see  {@link JavaType#toCanonical()}).\n * @param canonical Canonical string representation of a type\n * @throws IllegalArgumentException If canonical representation is malformed,or class that type represents (including its generic parameters) is not found\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#569",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType[] findTypeParameters(JavaType type,Class\u003c?\u003e expType){\n  JavaType match\u003dtype.findSuperType(expType);\n  if (match \u003d\u003d null) {\n    return NO_TYPES;\n  }\n  return match.getBindings().typeParameterArray();\n}",
    "begin_line": 569,
    "end_line": 576,
    "comment": "/** \n * Method that is to figure out actual type parameters that given class binds to generic types defined by given (generic) interface or class. This could mean, for example, trying to figure out key and value types for Map implementations.\n * @param type Sub-type (leaf type) that implements \u003ccode\u003eexpType\u003c/code\u003e\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#582",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "@Deprecated public JavaType[] findTypeParameters(Class\u003c?\u003e clz,Class\u003c?\u003e expType,TypeBindings bindings){\n  return findTypeParameters(constructType(clz,bindings),expType);\n}",
    "begin_line": 582,
    "end_line": 584,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.findTypeParameters#590",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.findTypeParameters(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JavaType[] findTypeParameters(Class\u003c?\u003e clz,Class\u003c?\u003e expType){\n  return findTypeParameters(constructType(clz),expType);\n}",
    "begin_line": 590,
    "end_line": 592,
    "comment": "/** \n * @deprecated Since 2.7 resolve raw type first, then find type parameters\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.moreSpecificType#604",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.moreSpecificType(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType moreSpecificType(JavaType type1,JavaType type2){\n  if (type1 \u003d\u003d null) {\n    return type2;\n  }\n  if (type2 \u003d\u003d null) {\n    return type1;\n  }\n  Class\u003c?\u003e raw1\u003dtype1.getRawClass();\n  Class\u003c?\u003e raw2\u003dtype2.getRawClass();\n  if (raw1 \u003d\u003d raw2) {\n    return type1;\n  }\n  if (raw1.isAssignableFrom(raw2)) {\n    return type2;\n  }\n  return type1;\n}",
    "begin_line": 604,
    "end_line": 622,
    "comment": "/** \n * Method that can be called to figure out more specific of two types (if they are related; that is, one implements or extends the other); or if not related, return the primary type.\n * @param type1 Primary type to consider\n * @param type2 Secondary type to consider\n * @since 2.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#630",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type)",
    "snippet": "public JavaType constructType(Type type){\n  return _fromAny(null,type,EMPTY_BINDINGS);\n}",
    "begin_line": 630,
    "end_line": 632,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#634",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "public JavaType constructType(Type type,TypeBindings bindings){\n  return _fromAny(null,type,bindings);\n}",
    "begin_line": 634,
    "end_line": 636,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#638",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(TypeReference\u003c?\u003e)",
    "snippet": "public JavaType constructType(TypeReference\u003c?\u003e typeRef){\n  return _fromAny(null,typeRef.getType(),EMPTY_BINDINGS);\n}",
    "begin_line": 638,
    "end_line": 660,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#666",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JavaType constructType(Type type,Class\u003c?\u003e contextClass){\n  JavaType contextType\u003d(contextClass \u003d\u003d null) ? null : constructType(contextClass);\n  return constructType(type,contextType);\n}",
    "begin_line": 666,
    "end_line": 669,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructType#675",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructType(java.lang.reflect.Type, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public JavaType constructType(Type type,JavaType contextType){\n  TypeBindings bindings;\n  if (contextType \u003d\u003d null) {\n    bindings\u003dEMPTY_BINDINGS;\n  }\n else {\n    bindings\u003dcontextType.getBindings();\n    if (type.getClass() !\u003d Class.class) {\n      while (bindings.isEmpty()) {\n        contextType\u003dcontextType.getSuperClass();\n        if (contextType \u003d\u003d null) {\n          break;\n        }\n        bindings\u003dcontextType.getBindings();\n      }\n    }\n  }\n  return _fromAny(null,type,bindings);\n}",
    "begin_line": 675,
    "end_line": 698,
    "comment": "/** \n * @deprecated Since 2.7 (accidentally removed in 2.7.0; added back in 2.7.1)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#712",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(java.lang.Class\u003c?\u003e)",
    "snippet": "public ArrayType constructArrayType(Class\u003c?\u003e elementType){\n  return ArrayType.construct(_fromAny(null,elementType,null),null);\n}",
    "begin_line": 712,
    "end_line": 714,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for element type (and other contained types)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructArrayType#722",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructArrayType(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public ArrayType constructArrayType(JavaType elementType){\n  return ArrayType.construct(elementType,null);\n}",
    "begin_line": 722,
    "end_line": 724,
    "comment": "/** \n * Method for constructing an  {@link ArrayType}. \u003cp\u003e NOTE: type modifiers are NOT called on array type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#732",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,Class\u003c?\u003e elementClass){\n  return constructCollectionType(collectionClass,_fromClass(null,elementClass,EMPTY_BINDINGS));\n}",
    "begin_line": 732,
    "end_line": 736,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionType#744",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionType constructCollectionType(Class\u003c? extends Collection\u003e collectionClass,JavaType elementType){\n  TypeBindings bindings\u003dTypeBindings.createIfNeeded(collectionClass,elementType);\n  CollectionType result\u003d(CollectionType)_fromClass(null,collectionClass,bindings);\n  if (bindings.isEmpty() \u0026\u0026 (elementType !\u003d null)) {\n    JavaType t\u003dresult.findSuperType(Collection.class);\n    JavaType realET\u003dt.getContentType();\n    if (!realET.equals(elementType)) {\n      throw new IllegalArgumentException(String.format(\"Non-generic Collection class %s did not resolve to something with element type %s but %s \",ClassUtil.nameOf(collectionClass),elementType,realET));\n    }\n  }\n  return result;\n}",
    "begin_line": 744,
    "end_line": 761,
    "comment": "/** \n * Method for constructing a  {@link CollectionType}. \u003cp\u003e NOTE: type modifiers are NOT called on Collection type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#769",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass,Class\u003c?\u003e elementClass){\n  return constructCollectionLikeType(collectionClass,_fromClass(null,elementClass,EMPTY_BINDINGS));\n}",
    "begin_line": 769,
    "end_line": 772,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructCollectionLikeType#780",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructCollectionLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public CollectionLikeType constructCollectionLikeType(Class\u003c?\u003e collectionClass,JavaType elementType){\n  JavaType type\u003d_fromClass(null,collectionClass,TypeBindings.createIfNeeded(collectionClass,elementType));\n  if (type instanceof CollectionLikeType) {\n    return (CollectionLikeType)type;\n  }\n  return CollectionLikeType.upgradeFrom(type,elementType);\n}",
    "begin_line": 780,
    "end_line": 787,
    "comment": "/** \n * Method for constructing a  {@link CollectionLikeType}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#795",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass,Class\u003c?\u003e keyClass,Class\u003c?\u003e valueClass){\n  JavaType kt, vt;\n  if (mapClass \u003d\u003d Properties.class) {\n    kt\u003dvt\u003dCORE_TYPE_STRING;\n  }\n else {\n    kt\u003d_fromClass(null,keyClass,EMPTY_BINDINGS);\n    vt\u003d_fromClass(null,valueClass,EMPTY_BINDINGS);\n  }\n  return constructMapType(mapClass,kt,vt);\n}",
    "begin_line": 795,
    "end_line": 805,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapType#813",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapType(java.lang.Class\u003c? extends java.util.Map\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapType constructMapType(Class\u003c? extends Map\u003e mapClass,JavaType keyType,JavaType valueType){\n  TypeBindings bindings\u003dTypeBindings.createIfNeeded(mapClass,new JavaType[]{keyType,valueType});\n  MapType result\u003d(MapType)_fromClass(null,mapClass,bindings);\n  if (bindings.isEmpty()) {\n    JavaType t\u003dresult.findSuperType(Map.class);\n    JavaType realKT\u003dt.getKeyType();\n    if (!realKT.equals(keyType)) {\n      throw new IllegalArgumentException(String.format(\"Non-generic Map class %s did not resolve to something with key type %s but %s \",ClassUtil.nameOf(mapClass),keyType,realKT));\n    }\n    JavaType realVT\u003dt.getContentType();\n    if (!realVT.equals(valueType)) {\n      throw new IllegalArgumentException(String.format(\"Non-generic Map class %s did not resolve to something with value type %s but %s \",ClassUtil.nameOf(mapClass),valueType,realVT));\n    }\n  }\n  return result;\n}",
    "begin_line": 813,
    "end_line": 834,
    "comment": "/** \n * Method for constructing a  {@link MapType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#842",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass,Class\u003c?\u003e keyClass,Class\u003c?\u003e valueClass){\n  return constructMapLikeType(mapClass,_fromClass(null,keyClass,EMPTY_BINDINGS),_fromClass(null,valueClass,EMPTY_BINDINGS));\n}",
    "begin_line": 842,
    "end_line": 846,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructMapLikeType#854",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructMapLikeType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public MapLikeType constructMapLikeType(Class\u003c?\u003e mapClass,JavaType keyType,JavaType valueType){\n  JavaType type\u003d_fromClass(null,mapClass,TypeBindings.createIfNeeded(mapClass,new JavaType[]{keyType,valueType}));\n  if (type instanceof MapLikeType) {\n    return (MapLikeType)type;\n  }\n  return MapLikeType.upgradeFrom(type,keyType,valueType);\n}",
    "begin_line": 854,
    "end_line": 863,
    "comment": "/** \n * Method for constructing a  {@link MapLikeType} instance\u003cp\u003e NOTE: type modifiers are NOT called on constructed type itself; but are called for contained types.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#870",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "public JavaType constructSimpleType(Class\u003c?\u003e rawType,JavaType[] parameterTypes){\n  return _fromClass(null,rawType,TypeBindings.create(rawType,parameterTypes));\n}",
    "begin_line": 870,
    "end_line": 872,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization. \u003cp\u003e NOTE: was briefly deprecated for 2.6.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructSimpleType#882",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructSimpleType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "@Deprecated public JavaType constructSimpleType(Class\u003c?\u003e rawType,Class\u003c?\u003e parameterTarget,JavaType[] parameterTypes){\n  return constructSimpleType(rawType,parameterTypes);\n}",
    "begin_line": 882,
    "end_line": 886,
    "comment": "/** \n * Method for constructing a type instance with specified parameterization.\n * @since 2.6\n * @deprecated Since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructReferenceType#891",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructReferenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructReferenceType(Class\u003c?\u003e rawType,JavaType referredType){\n  return ReferenceType.construct(rawType,null,null,null,referredType);\n}",
    "begin_line": 891,
    "end_line": 896,
    "comment": "/** \n * @since 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.uncheckedSimpleType#910",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.uncheckedSimpleType(java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JavaType uncheckedSimpleType(Class\u003c?\u003e cls){\n  return _constructSimple(cls,EMPTY_BINDINGS,null,null);\n}",
    "begin_line": 910,
    "end_line": 913,
    "comment": "/** \n * Method that use by core Databind functionality, and that should NOT be called by application code outside databind package. \u003cp\u003e  Unchecked here not only means that no checks are made as to whether given class might be non-simple type (like  {@link CollectionType}) but also that most of supertype information is not gathered. This means that unless called on primitive types or {@link java.lang.String}, results are probably not what you want to use.\n * @deprecated Since 2.8, to indicate users should never call this method.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#942",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e parametrized,Class\u003c?\u003e... parameterClasses){\n  int len\u003dparameterClasses.length;\n  JavaType[] pt\u003dnew JavaType[len];\n  for (int i\u003d0; i \u003c len; ++i) {\n    pt[i]\u003d_fromClass(null,parameterClasses[i],EMPTY_BINDINGS);\n  }\n  return constructParametricType(parametrized,pt);\n}",
    "begin_line": 942,
    "end_line": 949,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametricType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametricType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param parametrized Actual full type\n * @param parameterClasses Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametricType#978",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametricType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public JavaType constructParametricType(Class\u003c?\u003e rawType,JavaType... parameterTypes){\n  return _fromClass(null,rawType,TypeBindings.create(rawType,parameterTypes));\n}",
    "begin_line": 978,
    "end_line": 981,
    "comment": "/** \n * Factory method for constructing  {@link JavaType} thatrepresents a parameterized type. For example, to represent type \u003ccode\u003eList\u0026lt;Set\u0026lt;Integer\u003e\u003e\u003c/code\u003e, you could call \u003cpre\u003e JavaType inner \u003d TypeFactory.constructParametricType(Set.class, Set.class, Integer.class); return TypeFactory.constructParametricType(ArrayList.class, List.class, inner); \u003c/pre\u003e \u003cp\u003e The reason for first two arguments to be separate is that parameterization may apply to a super-type. For example, if generic type was instead to be constructed for \u003ccode\u003eArrayList\u0026lt;Integer\u003e\u003c/code\u003e, the usual call would be: \u003cpre\u003e TypeFactory.constructParametricType(ArrayList.class, List.class, Integer.class); \u003c/pre\u003e since parameterization is applied to  {@link java.util.List}. In most cases distinction does not matter, but there are types where it does; one such example is parameterization of types that implement  {@link java.util.Iterator}. \u003cp\u003e NOTE: type modifiers are NOT called on constructed type.\n * @param rawType Actual type-erased type\n * @param parameterTypes Type parameters to apply\n * @since 2.5 NOTE: was briefly deprecated for 2.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#989",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.JavaType)",
    "snippet": "@Deprecated public JavaType constructParametrizedType(Class\u003c?\u003e parametrized,Class\u003c?\u003e parametersFor,JavaType... parameterTypes){\n  return constructParametricType(parametrized,parameterTypes);\n}",
    "begin_line": 989,
    "end_line": 993,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n * @deprecated since 2.9 Use {@link #constructParametricType(Class,JavaType...)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructParametrizedType#1001",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructParametrizedType(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public JavaType constructParametrizedType(Class\u003c?\u003e parametrized,Class\u003c?\u003e parametersFor,Class\u003c?\u003e... parameterClasses){\n  return constructParametricType(parametrized,parameterClasses);\n}",
    "begin_line": 1001,
    "end_line": 1005,
    "comment": "/** \n * @since 2.5 -- but will probably deprecated in 2.7 or 2.8 (not needed with 2.7)\n * @deprecated since 2.9 Use {@link #constructParametricType(Class,Class...)} instead\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionType#1025",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionType(java.lang.Class\u003c? extends java.util.Collection\u003e)",
    "snippet": "public CollectionType constructRawCollectionType(Class\u003c? extends Collection\u003e collectionClass){\n  return constructCollectionType(collectionClass,unknownType());\n}",
    "begin_line": 1025,
    "end_line": 1027,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawCollectionLikeType#1040",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawCollectionLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public CollectionLikeType constructRawCollectionLikeType(Class\u003c?\u003e collectionClass){\n  return constructCollectionLikeType(collectionClass,unknownType());\n}",
    "begin_line": 1040,
    "end_line": 1042,
    "comment": "/** \n * Method that can be used to construct \"raw\" Collection-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructCollectionLikeType(collectionClass, typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapType#1055",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapType(java.lang.Class\u003c? extends java.util.Map\u003e)",
    "snippet": "public MapType constructRawMapType(Class\u003c? extends Map\u003e mapClass){\n  return constructMapType(mapClass,unknownType(),unknownType());\n}",
    "begin_line": 1055,
    "end_line": 1057,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory.constructRawMapLikeType#1070",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory.constructRawMapLikeType(java.lang.Class\u003c?\u003e)",
    "snippet": "public MapLikeType constructRawMapLikeType(Class\u003c?\u003e mapClass){\n  return constructMapLikeType(mapClass,unknownType(),unknownType());\n}",
    "begin_line": 1070,
    "end_line": 1072,
    "comment": "/** \n * Method that can be used to construct \"raw\" Map-like type; meaning that its parameterization is unknown. This is similar to using \u003ccode\u003eObject.class\u003c/code\u003e parameterization, and is equivalent to calling: \u003cpre\u003e typeFactory.constructMapLikeType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType()); \u003c/pre\u003e \u003cp\u003e This method should only be used if parameterization is completely unavailable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._mapType#1080",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._mapType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _mapType(Class\u003c?\u003e rawClass,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  JavaType kt, vt;\n  if (rawClass \u003d\u003d Properties.class) {\n    kt\u003dvt\u003dCORE_TYPE_STRING;\n  }\n else {\n    List\u003cJavaType\u003e typeParams\u003dbindings.getTypeParameters();\nswitch (typeParams.size()) {\ncase 0:      kt\u003dvt\u003d_unknownType();\n    break;\ncase 2:  kt\u003dtypeParams.get(0);\nvt\u003dtypeParams.get(1);\nbreak;\ndefault:throw new IllegalArgumentException(\"Strange Map type \" + rawClass.getName() + \": cannot determine type parameters\");\n}\n}\nreturn MapType.construct(rawClass,bindings,superClass,superInterfaces,kt,vt);\n}",
    "begin_line": 1080,
    "end_line": 1104,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._collectionType#1106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._collectionType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _collectionType(Class\u003c?\u003e rawClass,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  List\u003cJavaType\u003e typeParams\u003dbindings.getTypeParameters();\n  JavaType ct;\n  if (typeParams.isEmpty()) {\n    ct\u003d_unknownType();\n  }\n else   if (typeParams.size() \u003d\u003d 1) {\n    ct\u003dtypeParams.get(0);\n  }\n else {\n    throw new IllegalArgumentException(\"Strange Collection type \" + rawClass.getName() + \": cannot determine type parameters\");\n  }\n  return CollectionType.construct(rawClass,bindings,superClass,superInterfaces,ct);\n}",
    "begin_line": 1106,
    "end_line": 1120,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._referenceType#1122",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._referenceType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "private JavaType _referenceType(Class\u003c?\u003e rawClass,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  List\u003cJavaType\u003e typeParams\u003dbindings.getTypeParameters();\n  JavaType ct;\n  if (typeParams.isEmpty()) {\n    ct\u003d_unknownType();\n  }\n else   if (typeParams.size() \u003d\u003d 1) {\n    ct\u003dtypeParams.get(0);\n  }\n else {\n    throw new IllegalArgumentException(\"Strange Reference type \" + rawClass.getName() + \": cannot determine type parameters\");\n  }\n  return ReferenceType.construct(rawClass,bindings,superClass,superInterfaces,ct);\n}",
    "begin_line": 1122,
    "end_line": 1136,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._constructSimple#1146",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._constructSimple(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _constructSimple(Class\u003c?\u003e raw,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  if (bindings.isEmpty()) {\n    JavaType result\u003d_findWellKnownSimple(raw);\n    if (result !\u003d null) {\n      return result;\n    }\n  }\n  return _newSimpleType(raw,bindings,superClass,superInterfaces);\n}",
    "begin_line": 1146,
    "end_line": 1156,
    "comment": "/** \n * Factory method to call when no special  {@link JavaType} is needed,no generic parameters are passed. Default implementation may check pre-constructed values for \"well-known\" types, but if none found will simply call  {@link #_newSimpleType}\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._newSimpleType#1165",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._newSimpleType(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _newSimpleType(Class\u003c?\u003e raw,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  return new SimpleType(raw,bindings,superClass,superInterfaces);\n}",
    "begin_line": 1165,
    "end_line": 1169,
    "comment": "/** \n * Factory method that is to create a new  {@link SimpleType} with nochecks whatsoever. Default implementation calls the single argument constructor of  {@link SimpleType}.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._unknownType#1171",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._unknownType()",
    "snippet": "protected JavaType _unknownType(){\n  return CORE_TYPE_OBJECT;\n}",
    "begin_line": 1171,
    "end_line": 1178,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._findWellKnownSimple#1187",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._findWellKnownSimple(java.lang.Class\u003c?\u003e)",
    "snippet": "protected JavaType _findWellKnownSimple(Class\u003c?\u003e clz){\n  if (clz.isPrimitive()) {\n    if (clz \u003d\u003d CLS_BOOL)     return CORE_TYPE_BOOL;\n    if (clz \u003d\u003d CLS_INT)     return CORE_TYPE_INT;\n    if (clz \u003d\u003d CLS_LONG)     return CORE_TYPE_LONG;\n  }\n else {\n    if (clz \u003d\u003d CLS_STRING)     return CORE_TYPE_STRING;\n    if (clz \u003d\u003d CLS_OBJECT)     return CORE_TYPE_OBJECT;\n  }\n  return null;\n}",
    "begin_line": 1187,
    "end_line": 1197,
    "comment": "/** \n * Helper method called to see if requested, non-generic-parameterized type is one of common, \"well-known\" types, instances of which are pre-constructed and do not need dynamic caching.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromAny#1210",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromAny(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.Type, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromAny(ClassStack context,Type type,TypeBindings bindings){\n  JavaType resultType;\n  if (type instanceof Class\u003c?\u003e) {\n    resultType\u003d_fromClass(context,(Class\u003c?\u003e)type,EMPTY_BINDINGS);\n  }\n else   if (type instanceof ParameterizedType) {\n    resultType\u003d_fromParamType(context,(ParameterizedType)type,bindings);\n  }\n else   if (type instanceof JavaType) {\n    return (JavaType)type;\n  }\n else   if (type instanceof GenericArrayType) {\n    resultType\u003d_fromArrayType(context,(GenericArrayType)type,bindings);\n  }\n else   if (type instanceof TypeVariable\u003c?\u003e) {\n    resultType\u003d_fromVariable(context,(TypeVariable\u003c?\u003e)type,bindings);\n  }\n else   if (type instanceof WildcardType) {\n    resultType\u003d_fromWildcard(context,(WildcardType)type,bindings);\n  }\n else {\n    throw new IllegalArgumentException(\"Unrecognized Type: \" + ((type \u003d\u003d null) ? \"[null]\" : type.toString()));\n  }\n  if (_modifiers !\u003d null) {\n    TypeBindings b\u003dresultType.getBindings();\n    if (b \u003d\u003d null) {\n      b\u003dEMPTY_BINDINGS;\n    }\n    for (    TypeModifier mod : _modifiers) {\n      JavaType t\u003dmod.modifyType(resultType,type,b,this);\n      if (t \u003d\u003d null) {\n        throw new IllegalStateException(String.format(\"TypeModifier %s (of type %s) return null for type %s\",mod,mod.getClass().getName(),resultType));\n      }\n      resultType\u003dt;\n    }\n  }\n  return resultType;\n}",
    "begin_line": 1210,
    "end_line": 1258,
    "comment": "/** \n * Factory method that can be used if type information is passed as Java typing returned from \u003ccode\u003egetGenericXxx\u003c/code\u003e methods (usually for a return or argument type).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromClass#1264",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromClass(ClassStack context,Class\u003c?\u003e rawType,TypeBindings bindings){\n  JavaType result\u003d_findWellKnownSimple(rawType);\n  if (result !\u003d null) {\n    return result;\n  }\n  final Object key;\n  if ((bindings \u003d\u003d null) || bindings.isEmpty()) {\n    key\u003drawType;\n  }\n else {\n    key\u003dbindings.asKey(rawType);\n  }\n  result\u003d_typeCache.get(key);\n  if (result !\u003d null) {\n    return result;\n  }\n  if (context \u003d\u003d null) {\n    context\u003dnew ClassStack(rawType);\n  }\n else {\n    ClassStack prev\u003dcontext.find(rawType);\n    if (prev !\u003d null) {\n      ResolvedRecursiveType selfRef\u003dnew ResolvedRecursiveType(rawType,EMPTY_BINDINGS);\n      prev.addSelfReference(selfRef);\n      return selfRef;\n    }\n    context\u003dcontext.child(rawType);\n  }\n  if (rawType.isArray()) {\n    result\u003dArrayType.construct(_fromAny(context,rawType.getComponentType(),bindings),bindings);\n  }\n else {\n    JavaType superClass;\n    JavaType[] superInterfaces;\n    if (rawType.isInterface()) {\n      superClass\u003dnull;\n      superInterfaces\u003d_resolveSuperInterfaces(context,rawType,bindings);\n    }\n else {\n      superClass\u003d_resolveSuperClass(context,rawType,bindings);\n      superInterfaces\u003d_resolveSuperInterfaces(context,rawType,bindings);\n    }\n    if (rawType \u003d\u003d Properties.class) {\n      result\u003dMapType.construct(rawType,bindings,superClass,superInterfaces,CORE_TYPE_STRING,CORE_TYPE_STRING);\n    }\n else     if (superClass !\u003d null) {\n      result\u003dsuperClass.refine(rawType,bindings,superClass,superInterfaces);\n    }\n    if (result \u003d\u003d null) {\n      result\u003d_fromWellKnownClass(context,rawType,bindings,superClass,superInterfaces);\n      if (result \u003d\u003d null) {\n        result\u003d_fromWellKnownInterface(context,rawType,bindings,superClass,superInterfaces);\n        if (result \u003d\u003d null) {\n          result\u003d_newSimpleType(rawType,bindings,superClass,superInterfaces);\n        }\n      }\n    }\n  }\n  context.resolveSelfReferences(result);\n  if (!result.hasHandlers()) {\n    _typeCache.putIfAbsent(key,result);\n  }\n  return result;\n}",
    "begin_line": 1264,
    "end_line": 1346,
    "comment": "/** \n * @param bindings Mapping of formal parameter declarations (for generictypes) into actual types\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperClass#1348",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _resolveSuperClass(ClassStack context,Class\u003c?\u003e rawType,TypeBindings parentBindings){\n  Type parent\u003dClassUtil.getGenericSuperclass(rawType);\n  if (parent \u003d\u003d null) {\n    return null;\n  }\n  return _fromAny(context,parent,parentBindings);\n}",
    "begin_line": 1348,
    "end_line": 1355,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._resolveSuperInterfaces#1357",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._resolveSuperInterfaces(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType[] _resolveSuperInterfaces(ClassStack context,Class\u003c?\u003e rawType,TypeBindings parentBindings){\n  Type[] types\u003dClassUtil.getGenericInterfaces(rawType);\n  if (types \u003d\u003d null || types.length \u003d\u003d 0) {\n    return NO_TYPES;\n  }\n  int len\u003dtypes.length;\n  JavaType[] resolved\u003dnew JavaType[len];\n  for (int i\u003d0; i \u003c len; ++i) {\n    Type type\u003dtypes[i];\n    resolved[i]\u003d_fromAny(context,type,parentBindings);\n  }\n  return resolved;\n}",
    "begin_line": 1357,
    "end_line": 1370,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownClass#1377",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownClass(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownClass(ClassStack context,Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  if (bindings \u003d\u003d null) {\n    bindings\u003dEMPTY_BINDINGS;\n  }\n  if (rawType \u003d\u003d Map.class) {\n    return _mapType(rawType,bindings,superClass,superInterfaces);\n  }\n  if (rawType \u003d\u003d Collection.class) {\n    return _collectionType(rawType,bindings,superClass,superInterfaces);\n  }\n  if (rawType \u003d\u003d AtomicReference.class) {\n    return _referenceType(rawType,bindings,superClass,superInterfaces);\n  }\n  return null;\n}",
    "begin_line": 1377,
    "end_line": 1400,
    "comment": "/** \n * Helper class used to check whether exact class for which type is being constructed is one of well-known base interfaces or classes that indicates alternate {@link JavaType} implementation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWellKnownInterface#1402",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWellKnownInterface(com.fasterxml.jackson.databind.type.ClassStack, java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings, com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.JavaType[])",
    "snippet": "protected JavaType _fromWellKnownInterface(ClassStack context,Class\u003c?\u003e rawType,TypeBindings bindings,JavaType superClass,JavaType[] superInterfaces){\n  final int intCount\u003dsuperInterfaces.length;\n  for (int i\u003d0; i \u003c intCount; ++i) {\n    JavaType result\u003dsuperInterfaces[i].refine(rawType,bindings,superClass,superInterfaces);\n    if (result !\u003d null) {\n      return result;\n    }\n  }\n  return null;\n}",
    "begin_line": 1402,
    "end_line": 1416,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromParamType#1422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromParamType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.ParameterizedType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromParamType(ClassStack context,ParameterizedType ptype,TypeBindings parentBindings){\n  Class\u003c?\u003e rawType\u003d(Class\u003c?\u003e)ptype.getRawType();\n  if (rawType \u003d\u003d CLS_ENUM) {\n    return CORE_TYPE_ENUM;\n  }\n  if (rawType \u003d\u003d CLS_COMPARABLE) {\n    return CORE_TYPE_COMPARABLE;\n  }\n  if (rawType \u003d\u003d CLS_CLASS) {\n    return CORE_TYPE_CLASS;\n  }\n  Type[] args\u003dptype.getActualTypeArguments();\n  int paramCount\u003d(args \u003d\u003d null) ? 0 : args.length;\n  TypeBindings newBindings;\n  if (paramCount \u003d\u003d 0) {\n    newBindings\u003dEMPTY_BINDINGS;\n  }\n else {\n    JavaType[] pt\u003dnew JavaType[paramCount];\n    for (int i\u003d0; i \u003c paramCount; ++i) {\n      pt[i]\u003d_fromAny(context,args[i],parentBindings);\n    }\n    newBindings\u003dTypeBindings.create(rawType,pt);\n  }\n  return _fromClass(context,rawType,newBindings);\n}",
    "begin_line": 1422,
    "end_line": 1457,
    "comment": "/** \n * This method deals with parameterized types, that is, first class generic classes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromArrayType#1459",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromArrayType(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.GenericArrayType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromArrayType(ClassStack context,GenericArrayType type,TypeBindings bindings){\n  JavaType elementType\u003d_fromAny(context,type.getGenericComponentType(),bindings);\n  return ArrayType.construct(elementType,bindings);\n}",
    "begin_line": 1459,
    "end_line": 1463,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromVariable#1465",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromVariable(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.TypeVariable\u003c?\u003e, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromVariable(ClassStack context,TypeVariable\u003c?\u003e var,TypeBindings bindings){\n  final String name\u003dvar.getName();\n  if (bindings \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null `bindings` passed (type variable \\\"\" + name + \"\\\")\");\n  }\n  JavaType type\u003dbindings.findBoundType(name);\n  if (type !\u003d null) {\n    return type;\n  }\n  if (bindings.hasUnbound(name)) {\n    return CORE_TYPE_OBJECT;\n  }\n  bindings\u003dbindings.withUnboundVariable(name);\n  final Type[] bounds;\nsynchronized (var) {\n    bounds\u003dvar.getBounds();\n  }\n  return _fromAny(context,bounds[0],bindings);\n}",
    "begin_line": 1465,
    "end_line": 1496,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeFactory._fromWildcard#1498",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeFactory.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeFactory",
    "signature": "com.fasterxml.jackson.databind.type.TypeFactory._fromWildcard(com.fasterxml.jackson.databind.type.ClassStack, java.lang.reflect.WildcardType, com.fasterxml.jackson.databind.type.TypeBindings)",
    "snippet": "protected JavaType _fromWildcard(ClassStack context,WildcardType type,TypeBindings bindings){\n  return _fromAny(context,type.getUpperBounds()[0],bindings);\n}",
    "begin_line": 1498,
    "end_line": 1506,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.TypeParser#19",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.TypeParser(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser(TypeFactory f){\n  _factory\u003df;\n}",
    "begin_line": 19,
    "end_line": 21,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.withFactory#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.withFactory(com.fasterxml.jackson.databind.type.TypeFactory)",
    "snippet": "public TypeParser withFactory(TypeFactory f){\n  return (f \u003d\u003d _factory) ? this : new TypeParser(f);\n}",
    "begin_line": 26,
    "end_line": 28,
    "comment": "/** \n * @since 2.6.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parse#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parse(java.lang.String)",
    "snippet": "public JavaType parse(String canonical) throws IllegalArgumentException {\n  MyTokenizer tokens\u003dnew MyTokenizer(canonical.trim());\n  JavaType type\u003dparseType(tokens);\n  if (tokens.hasMoreTokens()) {\n    throw _problem(tokens,\"Unexpected tokens after complete type\");\n  }\n  return type;\n}",
    "begin_line": 30,
    "end_line": 39,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseType#41",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseType(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected JavaType parseType(MyTokenizer tokens) throws IllegalArgumentException {\n  if (!tokens.hasMoreTokens()) {\n    throw _problem(tokens,\"Unexpected end-of-string\");\n  }\n  Class\u003c?\u003e base\u003dfindClass(tokens.nextToken(),tokens);\n  if (tokens.hasMoreTokens()) {\n    String token\u003dtokens.nextToken();\n    if (\"\u003c\".equals(token)) {\n      List\u003cJavaType\u003e parameterTypes\u003dparseTypes(tokens);\n      TypeBindings b\u003dTypeBindings.create(base,parameterTypes);\n      return _factory._fromClass(null,base,b);\n    }\n    tokens.pushBack(token);\n  }\n  return _factory._fromClass(null,base,TypeBindings.emptyBindings());\n}",
    "begin_line": 41,
    "end_line": 61,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.parseTypes#63",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.parseTypes(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected List\u003cJavaType\u003e parseTypes(MyTokenizer tokens) throws IllegalArgumentException {\n  ArrayList\u003cJavaType\u003e types\u003dnew ArrayList\u003cJavaType\u003e();\n  while (tokens.hasMoreTokens()) {\n    types.add(parseType(tokens));\n    if (!tokens.hasMoreTokens())     break;\n    String token\u003dtokens.nextToken();\n    if (\"\u003e\".equals(token))     return types;\n    if (!\",\".equals(token)) {\n      throw _problem(tokens,\"Unexpected token \u0027\" + token + \"\u0027, expected \u0027,\u0027 or \u0027\u003e\u0027)\");\n    }\n  }\n  throw _problem(tokens,\"Unexpected end-of-string\");\n}",
    "begin_line": 63,
    "end_line": 77,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser.findClass#79",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.findClass(java.lang.String, com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer)",
    "snippet": "protected Class\u003c?\u003e findClass(String className,MyTokenizer tokens){\n  try {\n    return _factory.findClass(className);\n  }\n catch (  Exception e) {\n    ClassUtil.throwIfRTE(e);\n    throw _problem(tokens,\"Cannot locate class \u0027\" + className + \"\u0027, problem: \"+ e.getMessage());\n  }\n}",
    "begin_line": 79,
    "end_line": 87,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TypeParser._problem#89",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser._problem(com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer, java.lang.String)",
    "snippet": "protected IllegalArgumentException _problem(MyTokenizer tokens,String msg){\n  return new IllegalArgumentException(String.format(\"Failed to parse type \u0027%s\u0027 (remaining: \u0027%s\u0027): %s\",tokens.getAllInput(),tokens.getRemainingInput(),msg));\n}",
    "begin_line": 89,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.MyTokenizer#103",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.MyTokenizer(java.lang.String)",
    "snippet": "public MyTokenizer(String str){\n  super(str,\"\u003c,\u003e\",true);\n  _input\u003dstr;\n}",
    "begin_line": 103,
    "end_line": 106,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.hasMoreTokens#109",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.hasMoreTokens()",
    "snippet": "@Override public boolean hasMoreTokens(){\n  return (_pushbackToken !\u003d null) || super.hasMoreTokens();\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.nextToken#114",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.nextToken()",
    "snippet": "@Override public String nextToken(){\n  String token;\n  if (_pushbackToken !\u003d null) {\n    token\u003d_pushbackToken;\n    _pushbackToken\u003dnull;\n  }\n else {\n    token\u003dsuper.nextToken();\n    _index+\u003dtoken.length();\n    token\u003dtoken.trim();\n  }\n  return token;\n}",
    "begin_line": 114,
    "end_line": 125,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.pushBack#127",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.pushBack(java.lang.String)",
    "snippet": "public void pushBack(String token){\n  _pushbackToken\u003dtoken;\n}",
    "begin_line": 127,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getAllInput#132",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getAllInput()",
    "snippet": "public String getAllInput(){\n  return _input;\n}",
    "begin_line": 132,
    "end_line": 132,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "MyTokenizer.getRemainingInput#134",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/type/TypeParser.java",
    "class_name": "com.fasterxml.jackson.databind.type.TypeParser",
    "signature": "com.fasterxml.jackson.databind.type.TypeParser.getRemainingInput()",
    "snippet": "public String getRemainingInput(){\n  return _input.substring(_index);\n}",
    "begin_line": 134,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayIterator.ArrayIterator#16",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ArrayIterator.java",
    "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.ArrayIterator(T[])",
    "snippet": "public ArrayIterator(T[] a){\n  _a\u003da;\n  _index\u003d0;\n}",
    "begin_line": 16,
    "end_line": 19,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayIterator.hasNext#22",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ArrayIterator.java",
    "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.hasNext()",
    "snippet": "@Override public boolean hasNext(){\n  return _index \u003c _a.length;\n}",
    "begin_line": 22,
    "end_line": 22,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayIterator.next#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ArrayIterator.java",
    "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.next()",
    "snippet": "@Override public T next(){\n  if (_index \u003e\u003d _a.length) {\n    throw new NoSuchElementException();\n  }\n  return _a[_index++];\n}",
    "begin_line": 25,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayIterator.remove#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ArrayIterator.java",
    "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.remove()",
    "snippet": "@Override public void remove(){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 32,
    "end_line": 32,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ArrayIterator.iterator#33",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ArrayIterator.java",
    "class_name": "com.fasterxml.jackson.databind.util.ArrayIterator",
    "signature": "com.fasterxml.jackson.databind.util.ArrayIterator.iterator()",
    "snippet": "@Override public Iterator\u003cT\u003e iterator(){\n  return this;\n}",
    "begin_line": 33,
    "end_line": 33,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.okNameForGetter#26",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.okNameForGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, boolean)",
    "snippet": "public static String okNameForGetter(AnnotatedMethod am,boolean stdNaming){\n  String name\u003dam.getName();\n  String str\u003dokNameForIsGetter(am,name,stdNaming);\n  if (str \u003d\u003d null) {\n    str\u003dokNameForRegularGetter(am,name,stdNaming);\n  }\n  return str;\n}",
    "begin_line": 26,
    "end_line": 33,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.okNameForRegularGetter#38",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.okNameForRegularGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, java.lang.String, boolean)",
    "snippet": "public static String okNameForRegularGetter(AnnotatedMethod am,String name,boolean stdNaming){\n  if (name.startsWith(\"get\")) {\n    if (\"getCallbacks\".equals(name)) {\n      if (isCglibGetCallbacks(am)) {\n        return null;\n      }\n    }\n else     if (\"getMetaClass\".equals(name)) {\n      if (isGroovyMetaClassGetter(am)) {\n        return null;\n      }\n    }\n    return stdNaming ? stdManglePropertyName(name,3) : legacyManglePropertyName(name,3);\n  }\n  return null;\n}",
    "begin_line": 38,
    "end_line": 64,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.okNameForIsGetter#69",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.okNameForIsGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, java.lang.String, boolean)",
    "snippet": "public static String okNameForIsGetter(AnnotatedMethod am,String name,boolean stdNaming){\n  if (name.startsWith(\"is\")) {\n    Class\u003c?\u003e rt\u003dam.getRawType();\n    if (rt \u003d\u003d Boolean.class || rt \u003d\u003d Boolean.TYPE) {\n      return stdNaming ? stdManglePropertyName(name,2) : legacyManglePropertyName(name,2);\n    }\n  }\n  return null;\n}",
    "begin_line": 69,
    "end_line": 81,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.okNameForSetter#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.okNameForSetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, boolean)",
    "snippet": "@Deprecated public static String okNameForSetter(AnnotatedMethod am,boolean stdNaming){\n  String name\u003dokNameForMutator(am,\"set\",stdNaming);\n  if ((name !\u003d null) \u0026\u0026 (!\"metaClass\".equals(name) || !isGroovyMetaClassSetter(am))) {\n    return name;\n  }\n  return null;\n}",
    "begin_line": 87,
    "end_line": 95,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.okNameForMutator#100",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.okNameForMutator(com.fasterxml.jackson.databind.introspect.AnnotatedMethod, java.lang.String, boolean)",
    "snippet": "public static String okNameForMutator(AnnotatedMethod am,String prefix,boolean stdNaming){\n  String name\u003dam.getName();\n  if (name.startsWith(prefix)) {\n    return stdNaming ? stdManglePropertyName(name,prefix.length()) : legacyManglePropertyName(name,prefix.length());\n  }\n  return null;\n}",
    "begin_line": 100,
    "end_line": 109,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.getDefaultValue#130",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.getDefaultValue(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static Object getDefaultValue(JavaType type){\n  Class\u003c?\u003e cls\u003dtype.getRawClass();\n  Class\u003c?\u003e prim\u003dClassUtil.primitiveType(cls);\n  if (prim !\u003d null) {\n    return ClassUtil.defaultValue(prim);\n  }\n  if (type.isContainerType() || type.isReferenceType()) {\n    return JsonInclude.Include.NON_EMPTY;\n  }\n  if (cls \u003d\u003d String.class) {\n    return \"\";\n  }\n  if (type.isTypeOrSubTypeOf(Date.class)) {\n    return new Date(0L);\n  }\n  if (type.isTypeOrSubTypeOf(Calendar.class)) {\n    Calendar c\u003dnew GregorianCalendar();\n    c.setTimeInMillis(0L);\n    return c;\n  }\n  return null;\n}",
    "begin_line": 130,
    "end_line": 159,
    "comment": "/** \n * Accessor used to find out \"default value\" to use for comparing values to serialize, to determine whether to exclude value from serialization with inclusion type of  {@link com.fasterxml.jackson.annotation.JsonInclude.Include#NON_DEFAULT}. \u003cp\u003e Default logic is such that for primitives and wrapper types for primitives, expected defaults (0 for `int` and `java.lang.Integer`) are returned; for Strings, empty String, and for structured (Maps, Collections, arrays) and reference types, criteria {@link com.fasterxml.jackson.annotation.JsonInclude.Include#NON_DEFAULT}is used.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.isCglibGetCallbacks#175",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.isCglibGetCallbacks(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected static boolean isCglibGetCallbacks(AnnotatedMethod am){\n  Class\u003c?\u003e rt\u003dam.getRawType();\n  if (rt.isArray()) {\n    Class\u003c?\u003e compType\u003drt.getComponentType();\n    String pkgName\u003dClassUtil.getPackageName(compType);\n    if (pkgName !\u003d null) {\n      if (pkgName.contains(\".cglib\")) {\n        return pkgName.startsWith(\"net.sf.cglib\") || pkgName.startsWith(\"org.hibernate.repackage.cglib\") || pkgName.startsWith(\"org.springframework.cglib\");\n      }\n    }\n  }\n  return false;\n}",
    "begin_line": 175,
    "end_line": 198,
    "comment": "/** \n * This method was added to address the need to weed out CGLib-injected \"getCallbacks\" method.  At this point caller has detected a potential getter method with name \"getCallbacks\" and we need to determine if it is indeed injectect by Cglib. We do this by verifying that the result type is \"net.sf.cglib.proxy.Callback[]\"\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.isGroovyMetaClassSetter#204",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.isGroovyMetaClassSetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected static boolean isGroovyMetaClassSetter(AnnotatedMethod am){\n  Class\u003c?\u003e argType\u003dam.getRawParameterType(0);\n  String pkgName\u003dClassUtil.getPackageName(argType);\n  return (pkgName !\u003d null) \u0026\u0026 pkgName.startsWith(\"groovy.lang\");\n}",
    "begin_line": 204,
    "end_line": 209,
    "comment": "/** \n * Similar to  {@link #isCglibGetCallbacks}, need to suppress a cyclic reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.isGroovyMetaClassGetter#214",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.isGroovyMetaClassGetter(com.fasterxml.jackson.databind.introspect.AnnotatedMethod)",
    "snippet": "protected static boolean isGroovyMetaClassGetter(AnnotatedMethod am){\n  String pkgName\u003dClassUtil.getPackageName(am.getRawType());\n  return (pkgName !\u003d null) \u0026\u0026 pkgName.startsWith(\"groovy.lang\");\n}",
    "begin_line": 214,
    "end_line": 218,
    "comment": "/** \n * Another helper method to deal with Groovy\u0027s problematic metadata accessors\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.legacyManglePropertyName#233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.legacyManglePropertyName(java.lang.String, int)",
    "snippet": "protected static String legacyManglePropertyName(final String basename,final int offset){\n  final int end\u003dbasename.length();\n  if (end \u003d\u003d offset) {\n    return null;\n  }\n  char c\u003dbasename.charAt(offset);\n  char d\u003dCharacter.toLowerCase(c);\n  if (c \u003d\u003d d) {\n    return basename.substring(offset);\n  }\n  StringBuilder sb\u003dnew StringBuilder(end - offset);\n  sb.append(d);\n  int i\u003doffset + 1;\n  for (; i \u003c end; ++i) {\n    c\u003dbasename.charAt(i);\n    d\u003dCharacter.toLowerCase(c);\n    if (c \u003d\u003d d) {\n      sb.append(basename,i,end);\n      break;\n    }\n    sb.append(d);\n  }\n  return sb.toString();\n}",
    "begin_line": 233,
    "end_line": 260,
    "comment": "/** \n * Method called to figure out name of the property, given  corresponding suggested name based on a method or field name.\n * @param basename Name of accessor/mutator method, not including prefix(\"get\"/\"is\"/\"set\")\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BeanUtil.stdManglePropertyName#265",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/BeanUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.BeanUtil",
    "signature": "com.fasterxml.jackson.databind.util.BeanUtil.stdManglePropertyName(java.lang.String, int)",
    "snippet": "protected static String stdManglePropertyName(final String basename,final int offset){\n  final int end\u003dbasename.length();\n  if (end \u003d\u003d offset) {\n    return null;\n  }\n  char c0\u003dbasename.charAt(offset);\n  char c1\u003dCharacter.toLowerCase(c0);\n  if (c0 \u003d\u003d c1) {\n    return basename.substring(offset);\n  }\n  if ((offset + 1) \u003c end) {\n    if (Character.isUpperCase(basename.charAt(offset + 1))) {\n      return basename.substring(offset);\n    }\n  }\n  StringBuilder sb\u003dnew StringBuilder(end - offset);\n  sb.append(c1);\n  sb.append(basename,offset + 1,end);\n  return sb.toString();\n}",
    "begin_line": 265,
    "end_line": 289,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.emptyIterator#35",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.emptyIterator()",
    "snippet": "@SuppressWarnings(\"unchecked\") public static \u003cT\u003eIterator\u003cT\u003e emptyIterator(){\n  return (Iterator\u003cT\u003e)EMPTY_ITERATOR;\n}",
    "begin_line": 35,
    "end_line": 37,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cJavaType\u003e findSuperTypes(JavaType type,Class\u003c?\u003e endBefore,boolean addClassItself){\n  if ((type \u003d\u003d null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {\n    return Collections.emptyList();\n  }\n  List\u003cJavaType\u003e result\u003dnew ArrayList\u003cJavaType\u003e(8);\n  _addSuperTypes(type,endBefore,result,addClassItself);\n  return result;\n}",
    "begin_line": 59,
    "end_line": 67,
    "comment": "/** \n * Method that will find all sub-classes and implemented interfaces of a given class or interface. Classes are listed in order of precedence, starting with the immediate super-class, followed by interfaces class directly declares to implemented, and then recursively followed by parent of super-class and so forth. Note that \u003ccode\u003eObject.class\u003c/code\u003e is not included in the list regardless of whether \u003ccode\u003eendBefore\u003c/code\u003e argument is defined or not.\n * @param endBefore Super-type to NOT include in results, if any; whenencountered, will be ignored (and no super types are checked).\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findRawSuperTypes#72",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findRawSuperTypes(Class\u003c?\u003e cls,Class\u003c?\u003e endBefore,boolean addClassItself){\n  if ((cls \u003d\u003d null) || (cls \u003d\u003d endBefore) || (cls \u003d\u003d Object.class)) {\n    return Collections.emptyList();\n  }\n  List\u003cClass\u003c?\u003e\u003e result\u003dnew ArrayList\u003cClass\u003c?\u003e\u003e(8);\n  _addRawSuperTypes(cls,endBefore,result,addClassItself);\n  return result;\n}",
    "begin_line": 72,
    "end_line": 79,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperClasses#88",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperClasses(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static List\u003cClass\u003c?\u003e\u003e findSuperClasses(Class\u003c?\u003e cls,Class\u003c?\u003e endBefore,boolean addClassItself){\n  List\u003cClass\u003c?\u003e\u003e result\u003dnew LinkedList\u003cClass\u003c?\u003e\u003e();\n  if ((cls !\u003d null) \u0026\u0026 (cls !\u003d endBefore)) {\n    if (addClassItself) {\n      result.add(cls);\n    }\n    while ((cls\u003dcls.getSuperclass()) !\u003d null) {\n      if (cls \u003d\u003d endBefore) {\n        break;\n      }\n      result.add(cls);\n    }\n  }\n  return result;\n}",
    "begin_line": 88,
    "end_line": 103,
    "comment": "/** \n * Method for finding all super classes (but not super interfaces) of given class, starting with the immediate super class and ending in the most distant one. Class itself is included if \u003ccode\u003eaddClassItself\u003c/code\u003e is true.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#106",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e)",
    "snippet": "@Deprecated public static List\u003cClass\u003c?\u003e\u003e findSuperTypes(Class\u003c?\u003e cls,Class\u003c?\u003e endBefore){\n  return findSuperTypes(cls,endBefore,new ArrayList\u003cClass\u003c?\u003e\u003e(8));\n}",
    "begin_line": 106,
    "end_line": 108,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findSuperTypes#111",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.List\u003cjava.lang.Class\u003c?\u003e\u003e)",
    "snippet": "@Deprecated public static List\u003cClass\u003c?\u003e\u003e findSuperTypes(Class\u003c?\u003e cls,Class\u003c?\u003e endBefore,List\u003cClass\u003c?\u003e\u003e result){\n  _addRawSuperTypes(cls,endBefore,result,false);\n  return result;\n}",
    "begin_line": 111,
    "end_line": 114,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._addSuperTypes#116",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addSuperTypes(com.fasterxml.jackson.databind.JavaType, java.lang.Class\u003c?\u003e, java.util.Collection\u003ccom.fasterxml.jackson.databind.JavaType\u003e, boolean)",
    "snippet": "private static void _addSuperTypes(JavaType type,Class\u003c?\u003e endBefore,Collection\u003cJavaType\u003e result,boolean addClassItself){\n  if (type \u003d\u003d null) {\n    return;\n  }\n  final Class\u003c?\u003e cls\u003dtype.getRawClass();\n  if (cls \u003d\u003d endBefore || cls \u003d\u003d Object.class) {\n    return;\n  }\n  if (addClassItself) {\n    if (result.contains(type)) {\n      return;\n    }\n    result.add(type);\n  }\n  for (  JavaType intCls : type.getInterfaces()) {\n    _addSuperTypes(intCls,endBefore,result,true);\n  }\n  _addSuperTypes(type.getSuperClass(),endBefore,result,true);\n}",
    "begin_line": 116,
    "end_line": 134,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._addRawSuperTypes#136",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._addRawSuperTypes(java.lang.Class\u003c?\u003e, java.lang.Class\u003c?\u003e, java.util.Collection\u003cjava.lang.Class\u003c?\u003e\u003e, boolean)",
    "snippet": "private static void _addRawSuperTypes(Class\u003c?\u003e cls,Class\u003c?\u003e endBefore,Collection\u003cClass\u003c?\u003e\u003e result,boolean addClassItself){\n  if (cls \u003d\u003d endBefore || cls \u003d\u003d null || cls \u003d\u003d Object.class) {\n    return;\n  }\n  if (addClassItself) {\n    if (result.contains(cls)) {\n      return;\n    }\n    result.add(cls);\n  }\n  for (  Class\u003c?\u003e intCls : _interfaces(cls)) {\n    _addRawSuperTypes(intCls,endBefore,result,true);\n  }\n  _addRawSuperTypes(cls.getSuperclass(),endBefore,result,true);\n}",
    "begin_line": 136,
    "end_line": 148,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.canBeABeanType#160",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.canBeABeanType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String canBeABeanType(Class\u003c?\u003e type){\n  if (type.isAnnotation()) {\n    return \"annotation\";\n  }\n  if (type.isArray()) {\n    return \"array\";\n  }\n  if (type.isEnum()) {\n    return \"enum\";\n  }\n  if (type.isPrimitive()) {\n    return \"primitive\";\n  }\n  return null;\n}",
    "begin_line": 160,
    "end_line": 178,
    "comment": "/** \n * @return Null if class might be a bean; type String (that identifieswhy it\u0027s not a bean) if not\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isLocalType#180",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isLocalType(java.lang.Class\u003c?\u003e, boolean)",
    "snippet": "public static String isLocalType(Class\u003c?\u003e type,boolean allowNonStatic){\n  try {\n    if (hasEnclosingMethod(type)) {\n      return \"local/anonymous\";\n    }\n    if (!allowNonStatic) {\n      if (!Modifier.isStatic(type.getModifiers())) {\n        if (getEnclosingClass(type) !\u003d null) {\n          return \"non-static member class\";\n        }\n      }\n    }\n  }\n catch (  SecurityException e) {\n  }\ncatch (  NullPointerException e) {\n  }\n  return null;\n}",
    "begin_line": 180,
    "end_line": 207,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getOuterClass#212",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getOuterClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getOuterClass(Class\u003c?\u003e type){\n  try {\n    if (hasEnclosingMethod(type)) {\n      return null;\n    }\n    if (!Modifier.isStatic(type.getModifiers())) {\n      return getEnclosingClass(type);\n    }\n  }\n catch (  SecurityException e) {\n  }\n  return null;\n}",
    "begin_line": 212,
    "end_line": 225,
    "comment": "/** \n * Method for finding enclosing class for non-static inner classes\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isProxyType#233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isProxyType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isProxyType(Class\u003c?\u003e type){\n  String name\u003dtype.getName();\n  if (name.startsWith(\"net.sf.cglib.proxy.\") || name.startsWith(\"org.hibernate.proxy.\")) {\n    return true;\n  }\n  return false;\n}",
    "begin_line": 233,
    "end_line": 250,
    "comment": "/** \n * Helper method used to weed out dynamic Proxy types; types that do not expose concrete method API that we could use to figure out automatic Bean (property) based serialization.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isConcrete#256",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isConcrete(Class\u003c?\u003e type){\n  int mod\u003dtype.getModifiers();\n  return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n}",
    "begin_line": 256,
    "end_line": 260,
    "comment": "/** \n * Helper method that checks if given class is a concrete one; that is, not an interface or abstract class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isConcrete#262",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isConcrete(java.lang.reflect.Member)",
    "snippet": "public static boolean isConcrete(Member member){\n  int mod\u003dmember.getModifiers();\n  return (mod \u0026 (Modifier.INTERFACE | Modifier.ABSTRACT)) \u003d\u003d 0;\n}",
    "begin_line": 262,
    "end_line": 266,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isCollectionMapOrArray#268",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isCollectionMapOrArray(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isCollectionMapOrArray(Class\u003c?\u003e type){\n  if (type.isArray())   return true;\n  if (Collection.class.isAssignableFrom(type))   return true;\n  if (Map.class.isAssignableFrom(type))   return true;\n  return false;\n}",
    "begin_line": 268,
    "end_line": 274,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isBogusClass#276",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isBogusClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isBogusClass(Class\u003c?\u003e cls){\n  return (cls \u003d\u003d Void.class || cls \u003d\u003d Void.TYPE || cls \u003d\u003d com.fasterxml.jackson.databind.annotation.NoClass.class);\n}",
    "begin_line": 276,
    "end_line": 279,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isNonStaticInnerClass#281",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isNonStaticInnerClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isNonStaticInnerClass(Class\u003c?\u003e cls){\n  return !Modifier.isStatic(cls.getModifiers()) \u0026\u0026 (getEnclosingClass(cls) !\u003d null);\n}",
    "begin_line": 281,
    "end_line": 284,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isObjectOrPrimitive#289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isObjectOrPrimitive(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isObjectOrPrimitive(Class\u003c?\u003e cls){\n  return (cls \u003d\u003d CLS_OBJECT) || cls.isPrimitive();\n}",
    "begin_line": 289,
    "end_line": 291,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasClass#296",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasClass(java.lang.Object, java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean hasClass(Object inst,Class\u003c?\u003e raw){\n  return (inst !\u003d null) \u0026\u0026 (inst.getClass() \u003d\u003d raw);\n}",
    "begin_line": 296,
    "end_line": 300,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.verifyMustOverride#305",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.verifyMustOverride(java.lang.Class\u003c?\u003e, java.lang.Object, java.lang.String)",
    "snippet": "public static void verifyMustOverride(Class\u003c?\u003e expType,Object instance,String method){\n  if (instance.getClass() !\u003d expType) {\n    throw new IllegalStateException(String.format(\"Sub-class %s (of class %s) must override method \u0027%s\u0027\",instance.getClass().getName(),expType.getName(),method));\n  }\n}",
    "begin_line": 305,
    "end_line": 313,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasGetterSignature#325",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasGetterSignature(java.lang.reflect.Method)",
    "snippet": "@Deprecated public static boolean hasGetterSignature(Method m){\n  if (Modifier.isStatic(m.getModifiers())) {\n    return false;\n  }\n  Class\u003c?\u003e[] pts\u003dm.getParameterTypes();\n  if (pts !\u003d null \u0026\u0026 pts.length !\u003d 0) {\n    return false;\n  }\n  if (Void.TYPE \u003d\u003d m.getReturnType()) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 325,
    "end_line": 342,
    "comment": "/** \n * @deprecated Since 2.6 not used; may be removed before 3.x\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfError#356",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfError(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfError(Throwable t){\n  if (t instanceof Error) {\n    throw (Error)t;\n  }\n  return t;\n}",
    "begin_line": 356,
    "end_line": 361,
    "comment": "/** \n * Helper method that will check if argument is an  {@link Error}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfRTE#369",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfRTE(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfRTE(Throwable t){\n  if (t instanceof RuntimeException) {\n    throw (RuntimeException)t;\n  }\n  return t;\n}",
    "begin_line": 369,
    "end_line": 374,
    "comment": "/** \n * Helper method that will check if argument is an  {@link RuntimeException}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwIfIOE#382",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwIfIOE(java.lang.Throwable)",
    "snippet": "public static Throwable throwIfIOE(Throwable t) throws IOException {\n  if (t instanceof IOException) {\n    throw (IOException)t;\n  }\n  return t;\n}",
    "begin_line": 382,
    "end_line": 387,
    "comment": "/** \n * Helper method that will check if argument is an  {@link IOException}, and if so, (re)throw it; otherwise just return\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getRootCause#399",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getRootCause(java.lang.Throwable)",
    "snippet": "public static Throwable getRootCause(Throwable t){\n  while (t.getCause() !\u003d null) {\n    t\u003dt.getCause();\n  }\n  return t;\n}",
    "begin_line": 399,
    "end_line": 405,
    "comment": "/** \n * Method that can be used to find the \"root cause\", innermost of chained (wrapped) exceptions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwRootCauseIfIOE#414",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwRootCauseIfIOE(java.lang.Throwable)",
    "snippet": "public static Throwable throwRootCauseIfIOE(Throwable t) throws IOException {\n  return throwIfIOE(getRootCause(t));\n}",
    "begin_line": 414,
    "end_line": 416,
    "comment": "/** \n * Method that works like by calling  {@link #getRootCause} and theneither throwing it (if instanceof  {@link IOException}), or return.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsIAE#422",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable)",
    "snippet": "public static void throwAsIAE(Throwable t){\n  throwAsIAE(t,t.getMessage());\n}",
    "begin_line": 422,
    "end_line": 424,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsIAE#431",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void throwAsIAE(Throwable t,String msg){\n  throwIfRTE(t);\n  throwIfError(t);\n  throw new IllegalArgumentException(msg,t);\n}",
    "begin_line": 431,
    "end_line": 436,
    "comment": "/** \n * Method that will wrap \u0027t\u0027 as an  {@link IllegalArgumentException} (and withspecified message) if it is a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.throwAsMappingException#441",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.throwAsMappingException(com.fasterxml.jackson.databind.DeserializationContext, java.io.IOException)",
    "snippet": "public static \u003cT\u003eT throwAsMappingException(DeserializationContext ctxt,IOException e0) throws JsonMappingException {\n  if (e0 instanceof JsonMappingException) {\n    throw (JsonMappingException)e0;\n  }\n  JsonMappingException e\u003dJsonMappingException.from(ctxt,e0.getMessage());\n  e.initCause(e0);\n  throw e;\n}",
    "begin_line": 441,
    "end_line": 449,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.unwrapAndThrowAsIAE#456",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t){\n  throwAsIAE(getRootCause(t));\n}",
    "begin_line": 456,
    "end_line": 459,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.unwrapAndThrowAsIAE#466",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)",
    "snippet": "public static void unwrapAndThrowAsIAE(Throwable t,String msg){\n  throwAsIAE(getRootCause(t),msg);\n}",
    "begin_line": 466,
    "end_line": 469,
    "comment": "/** \n * Method that will locate the innermost exception for given Throwable; and then wrap it as an  {@link IllegalArgumentException} if itis a checked exception; otherwise (runtime exception or error) throw as is\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.closeOnFailAndThrowAsIOE#480",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIOE(JsonGenerator, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIOE(JsonGenerator g,Exception fail) throws IOException {\n  g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n  try {\n    g.close();\n  }\n catch (  Exception e) {\n    fail.addSuppressed(e);\n  }\n  throwIfIOE(fail);\n  throwIfRTE(fail);\n  throw new RuntimeException(fail);\n}",
    "begin_line": 480,
    "end_line": 495,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close output generator in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.closeOnFailAndThrowAsIOE#506",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.closeOnFailAndThrowAsIOE(JsonGenerator, java.io.Closeable, java.lang.Exception)",
    "snippet": "public static void closeOnFailAndThrowAsIOE(JsonGenerator g,Closeable toClose,Exception fail) throws IOException {\n  if (g !\u003d null) {\n    g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n    try {\n      g.close();\n    }\n catch (    Exception e) {\n      fail.addSuppressed(e);\n    }\n  }\n  if (toClose !\u003d null) {\n    try {\n      toClose.close();\n    }\n catch (    Exception e) {\n      fail.addSuppressed(e);\n    }\n  }\n  throwIfIOE(fail);\n  throwIfRTE(fail);\n  throw new RuntimeException(fail);\n}",
    "begin_line": 506,
    "end_line": 528,
    "comment": "/** \n * Helper method that encapsulate logic in trying to close given  {@link Closeable}in case of failure; useful mostly in forcing flush()ing as otherwise error conditions tend to be hard to diagnose. However, it is often the case that output state may be corrupt so we need to be prepared for secondary exception without masking original one.\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.createInstance#549",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.createInstance(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003eT createInstance(Class\u003cT\u003e cls,boolean canFixAccess) throws IllegalArgumentException {\n  Constructor\u003cT\u003e ctor\u003dfindConstructor(cls,canFixAccess);\n  if (ctor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Class \" + cls.getName() + \" has no default (no arg) constructor\");\n  }\n  try {\n    return ctor.newInstance();\n  }\n catch (  Exception e) {\n    ClassUtil.unwrapAndThrowAsIAE(e,\"Failed to instantiate class \" + cls.getName() + \", problem: \"+ e.getMessage());\n    return null;\n  }\n}",
    "begin_line": 549,
    "end_line": 562,
    "comment": "/** \n * Method that can be called to try to create an instantiate of specified type. Instantiation is done using default no-argument constructor.\n * @param canFixAccess Whether it is possible to try to change accessrights of the default constructor (in case it is not publicly accessible) or not.\n * @throws IllegalArgumentException If instantiation fails for any reason;except for cases where constructor throws an unchecked exception (which will be passed as is)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findConstructor#564",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findConstructor(java.lang.Class\u003cT\u003e, boolean)",
    "snippet": "public static \u003cT\u003eConstructor\u003cT\u003e findConstructor(Class\u003cT\u003e cls,boolean forceAccess) throws IllegalArgumentException {\n  try {\n    Constructor\u003cT\u003e ctor\u003dcls.getDeclaredConstructor();\n    if (forceAccess) {\n      checkAndFixAccess(ctor,forceAccess);\n    }\n else {\n      if (!Modifier.isPublic(ctor.getModifiers())) {\n        throw new IllegalArgumentException(\"Default constructor for \" + cls.getName() + \" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type\");\n      }\n    }\n    return ctor;\n  }\n catch (  NoSuchMethodException e) {\n    ;\n  }\ncatch (  Exception e) {\n    ClassUtil.unwrapAndThrowAsIAE(e,\"Failed to find default constructor of class \" + cls.getName() + \", problem: \"+ e.getMessage());\n  }\n  return null;\n}",
    "begin_line": 564,
    "end_line": 584,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.classOf#595",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.classOf(java.lang.Object)",
    "snippet": "public static Class\u003c?\u003e classOf(Object inst){\n  if (inst \u003d\u003d null) {\n    return null;\n  }\n  return inst.getClass();\n}",
    "begin_line": 595,
    "end_line": 600,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.rawClass#605",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.rawClass(com.fasterxml.jackson.databind.JavaType)",
    "snippet": "public static Class\u003c?\u003e rawClass(JavaType t){\n  if (t \u003d\u003d null) {\n    return null;\n  }\n  return t.getRawClass();\n}",
    "begin_line": 605,
    "end_line": 610,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nonNull#615",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nonNull(T, T)",
    "snippet": "public static \u003cT\u003eT nonNull(T valueOrNull,T defaultValue){\n  return (valueOrNull \u003d\u003d null) ? defaultValue : valueOrNull;\n}",
    "begin_line": 615,
    "end_line": 617,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nullOrToString#622",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nullOrToString(java.lang.Object)",
    "snippet": "public static String nullOrToString(Object value){\n  if (value \u003d\u003d null) {\n    return null;\n  }\n  return value.toString();\n}",
    "begin_line": 622,
    "end_line": 627,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nonNullString#632",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nonNullString(java.lang.String)",
    "snippet": "public static String nonNullString(String str){\n  if (str \u003d\u003d null) {\n    return \"\";\n  }\n  return str;\n}",
    "begin_line": 632,
    "end_line": 637,
    "comment": "/** \n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.quotedOr#645",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.quotedOr(java.lang.Object, java.lang.String)",
    "snippet": "public static String quotedOr(Object str,String forNull){\n  if (str \u003d\u003d null) {\n    return forNull;\n  }\n  return String.format(\"\\\"%s\\\"\",str);\n}",
    "begin_line": 645,
    "end_line": 650,
    "comment": "/** \n * Returns either quoted value (with double-quotes) -- if argument non-null String -- or String NULL (no quotes) (if null).\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getClassDescription#663",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getClassDescription(java.lang.Object)",
    "snippet": "public static String getClassDescription(Object classOrInstance){\n  if (classOrInstance \u003d\u003d null) {\n    return \"unknown\";\n  }\n  Class\u003c?\u003e cls\u003d(classOrInstance instanceof Class\u003c?\u003e) ? (Class\u003c?\u003e)classOrInstance : classOrInstance.getClass();\n  return nameOf(cls);\n}",
    "begin_line": 663,
    "end_line": 671,
    "comment": "/** \n * Helper method used to construct appropriate description when passed either type (Class) or an instance; in latter case, class of instance is to be used.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.classNameOf#680",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.classNameOf(java.lang.Object)",
    "snippet": "public static String classNameOf(Object inst){\n  if (inst \u003d\u003d null) {\n    return \"[null]\";\n  }\n  return nameOf(inst.getClass());\n}",
    "begin_line": 680,
    "end_line": 685,
    "comment": "/** \n * Helper method used to construct appropriate description when passed either type (Class) or an instance; in latter case, class of instance is to be used.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nameOf#693",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String nameOf(Class\u003c?\u003e cls){\n  if (cls \u003d\u003d null) {\n    return \"[null]\";\n  }\n  int index\u003d0;\n  while (cls.isArray()) {\n    ++index;\n    cls\u003dcls.getComponentType();\n  }\n  String base\u003dcls.isPrimitive() ? cls.getSimpleName() : cls.getName();\n  if (index \u003e 0) {\n    StringBuilder sb\u003dnew StringBuilder(base);\n    do {\n      sb.append(\"[]\");\n    }\n while (--index \u003e 0);\n    base\u003dsb.toString();\n  }\n  return backticked(base);\n}",
    "begin_line": 693,
    "end_line": 711,
    "comment": "/** \n * Returns either `cls.getName()` (if `cls` not null), or \"[null]\" if `cls` is null.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.nameOf#719",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.nameOf(com.fasterxml.jackson.databind.util.Named)",
    "snippet": "public static String nameOf(Named named){\n  if (named \u003d\u003d null) {\n    return \"[null]\";\n  }\n  return backticked(named.getName());\n}",
    "begin_line": 719,
    "end_line": 724,
    "comment": "/** \n * Returns either backtick-quoted `named.getName()` (if `named` not null), or \"[null]\" if `named` is null.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.backticked#737",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.backticked(java.lang.String)",
    "snippet": "public static String backticked(String text){\n  if (text \u003d\u003d null) {\n    return \"[null]\";\n  }\n  return new StringBuilder(text.length() + 2).append(\u0027`\u0027).append(text).append(\u0027`\u0027).toString();\n}",
    "begin_line": 737,
    "end_line": 742,
    "comment": "/** \n * Returns either `text` or [null].\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.exceptionMessage#753",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.exceptionMessage(java.lang.Throwable)",
    "snippet": "public static String exceptionMessage(Throwable t){\n  if (t instanceof JsonProcessingException) {\n    return ((JsonProcessingException)t).getOriginalMessage();\n  }\n  return t.getMessage();\n}",
    "begin_line": 753,
    "end_line": 758,
    "comment": "/** \n * Helper method that returns  {@link Throwable#getMessage()} for all other exceptionsexcept for  {@link JsonProcessingException}, for which  {@code getOriginalMessage()} isreturned instead. Method is used to avoid accidentally including trailing location information twice in message when wrapping exceptions.\n * @since 2.9.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.defaultValue#770",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.defaultValue(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Object defaultValue(Class\u003c?\u003e cls){\n  if (cls \u003d\u003d Integer.TYPE) {\n    return Integer.valueOf(0);\n  }\n  if (cls \u003d\u003d Long.TYPE) {\n    return Long.valueOf(0L);\n  }\n  if (cls \u003d\u003d Boolean.TYPE) {\n    return Boolean.FALSE;\n  }\n  if (cls \u003d\u003d Double.TYPE) {\n    return Double.valueOf(0.0);\n  }\n  if (cls \u003d\u003d Float.TYPE) {\n    return Float.valueOf(0.0f);\n  }\n  if (cls \u003d\u003d Byte.TYPE) {\n    return Byte.valueOf((byte)0);\n  }\n  if (cls \u003d\u003d Short.TYPE) {\n    return Short.valueOf((short)0);\n  }\n  if (cls \u003d\u003d Character.TYPE) {\n    return \u0027\\0\u0027;\n  }\n  throw new IllegalArgumentException(\"Class \" + cls.getName() + \" is not a primitive type\");\n}",
    "begin_line": 770,
    "end_line": 797,
    "comment": "/** \n * Helper method used to get default value for wrappers used for primitive types (0 for Integer etc)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.wrapperType#803",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.wrapperType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e wrapperType(Class\u003c?\u003e primitiveType){\n  if (primitiveType \u003d\u003d Integer.TYPE) {\n    return Integer.class;\n  }\n  if (primitiveType \u003d\u003d Long.TYPE) {\n    return Long.class;\n  }\n  if (primitiveType \u003d\u003d Boolean.TYPE) {\n    return Boolean.class;\n  }\n  if (primitiveType \u003d\u003d Double.TYPE) {\n    return Double.class;\n  }\n  if (primitiveType \u003d\u003d Float.TYPE) {\n    return Float.class;\n  }\n  if (primitiveType \u003d\u003d Byte.TYPE) {\n    return Byte.class;\n  }\n  if (primitiveType \u003d\u003d Short.TYPE) {\n    return Short.class;\n  }\n  if (primitiveType \u003d\u003d Character.TYPE) {\n    return Character.class;\n  }\n  throw new IllegalArgumentException(\"Class \" + primitiveType.getName() + \" is not a primitive type\");\n}",
    "begin_line": 803,
    "end_line": 830,
    "comment": "/** \n * Helper method for finding wrapper type for given primitive type (why isn\u0027t there one in JDK?)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.primitiveType#838",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.primitiveType(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e primitiveType(Class\u003c?\u003e type){\n  if (type.isPrimitive()) {\n    return type;\n  }\n  if (type \u003d\u003d Integer.class) {\n    return Integer.TYPE;\n  }\n  if (type \u003d\u003d Long.class) {\n    return Long.TYPE;\n  }\n  if (type \u003d\u003d Boolean.class) {\n    return Boolean.TYPE;\n  }\n  if (type \u003d\u003d Double.class) {\n    return Double.TYPE;\n  }\n  if (type \u003d\u003d Float.class) {\n    return Float.TYPE;\n  }\n  if (type \u003d\u003d Byte.class) {\n    return Byte.TYPE;\n  }\n  if (type \u003d\u003d Short.class) {\n    return Short.TYPE;\n  }\n  if (type \u003d\u003d Character.class) {\n    return Character.TYPE;\n  }\n  return null;\n}",
    "begin_line": 838,
    "end_line": 869,
    "comment": "/** \n * Method that can be used to find primitive type for given class if (but only if) it is either wrapper type or primitive type; returns `null` if type is neither.\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.checkAndFixAccess#886",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member)",
    "snippet": "@Deprecated public static void checkAndFixAccess(Member member){\n  checkAndFixAccess(member,false);\n}",
    "begin_line": 886,
    "end_line": 888,
    "comment": "/** \n * Equivalent to call: \u003cpre\u003e checkAndFixAccess(member, false); \u003c/pre\u003e\n * @deprecated Since 2.7 call variant that takes boolean flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.checkAndFixAccess#901",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.checkAndFixAccess(java.lang.reflect.Member, boolean)",
    "snippet": "public static void checkAndFixAccess(Member member,boolean force){\n  AccessibleObject ao\u003d(AccessibleObject)member;\n  try {\n    if (force || (!Modifier.isPublic(member.getModifiers()) || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) {\n      ao.setAccessible(true);\n    }\n  }\n catch (  SecurityException se) {\n    if (!ao.isAccessible()) {\n      Class\u003c?\u003e declClass\u003dmember.getDeclaringClass();\n      throw new IllegalArgumentException(\"Cannot access \" + member + \" (from class \"+ declClass.getName()+ \"; failed to set access: \"+ se.getMessage());\n    }\n  }\n}",
    "begin_line": 901,
    "end_line": 924,
    "comment": "/** \n * Method that is called if a  {@link Member} may need forced access,to force a field, method or constructor to be accessible: this is done by calling  {@link AccessibleObject#setAccessible(boolean)}.\n * @param member Accessor to call \u003ccode\u003esetAccessible()\u003c/code\u003e on.\n * @param force Whether to always try to make accessor accessible (true),or only if needed as per access rights (false)\n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#938",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumSet\u003c?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumSet\u003c?\u003e s){\n  if (!s.isEmpty()) {\n    return findEnumType(s.iterator().next());\n  }\n  return EnumTypeLocator.instance.enumTypeFor(s);\n}",
    "begin_line": 938,
    "end_line": 946,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#954",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(EnumMap\u003c?,?\u003e m){\n  if (!m.isEmpty()) {\n    return findEnumType(m.keySet().iterator().next());\n  }\n  return EnumTypeLocator.instance.enumTypeFor(m);\n}",
    "begin_line": 954,
    "end_line": 961,
    "comment": "/** \n * Helper method that can be used to dynamically figure out enumeration type of given  {@link EnumSet}, without having access to its declaration. Code is needed to work around design flaw in JDK.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#970",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Enum\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Enum\u003c?\u003e en){\n  Class\u003c?\u003e ec\u003den.getClass();\n  if (ec.getSuperclass() !\u003d Enum.class) {\n    ec\u003dec.getSuperclass();\n  }\n  return (Class\u003c? extends Enum\u003c?\u003e\u003e)ec;\n}",
    "begin_line": 970,
    "end_line": 978,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given enumeration. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findEnumType#987",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findEnumType(java.lang.Class\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public static Class\u003c? extends Enum\u003c?\u003e\u003e findEnumType(Class\u003c?\u003e cls){\n  if (cls.getSuperclass() !\u003d Enum.class) {\n    cls\u003dcls.getSuperclass();\n  }\n  return (Class\u003c? extends Enum\u003c?\u003e\u003e)cls;\n}",
    "begin_line": 987,
    "end_line": 994,
    "comment": "/** \n * Helper method that can be used to dynamically figure out formal enumeration type (class) for given class of an enumeration value. This is either class of enum instance (for \"simple\" enumerations), or its superclass (for enums with instance fields or methods)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findFirstAnnotatedEnumValue#1007",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findFirstAnnotatedEnumValue(java.lang.Class\u003cjava.lang.Enum\u003c?\u003e\u003e, java.lang.Class\u003cT\u003e)",
    "snippet": "public static \u003cT extends Annotation\u003eEnum\u003c?\u003e findFirstAnnotatedEnumValue(Class\u003cEnum\u003c?\u003e\u003e enumClass,Class\u003cT\u003e annotationClass){\n  Field[] fields\u003dgetDeclaredFields(enumClass);\n  for (  Field field : fields) {\n    if (field.isEnumConstant()) {\n      Annotation defaultValueAnnotation\u003dfield.getAnnotation(annotationClass);\n      if (defaultValueAnnotation !\u003d null) {\n        final String name\u003dfield.getName();\n        for (        Enum\u003c?\u003e enumValue : enumClass.getEnumConstants()) {\n          if (name.equals(enumValue.name())) {\n            return enumValue;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 1007,
    "end_line": 1024,
    "comment": "/** \n * A method that will look for the first Enum value annotated with the given Annotation. \u003cp\u003e If there\u0027s more than one value annotated, the first one found will be returned. Which one exactly is used is undetermined.\n * @param enumClass The Enum class to scan for a value with the given annotation\n * @param annotationClass The annotation to look for.\n * @return the Enum value annotated with the given Annotation or {@code null} if none is found.\n * @throws IllegalArgumentException if there\u0027s a reflection issue accessing the Enum\n * @since 2.8\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isJacksonStdImpl#1042",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Object)",
    "snippet": "public static boolean isJacksonStdImpl(Object impl){\n  return (impl \u003d\u003d null) || isJacksonStdImpl(impl.getClass());\n}",
    "begin_line": 1042,
    "end_line": 1044,
    "comment": "/** \n * Method that can be called to determine if given Object is the default implementation Jackson uses; as opposed to a custom serializer installed by a module or calling application. Determination is done using {@link JacksonStdImpl} annotation on handler (serializer, deserializer etc)class. \u003cp\u003e NOTE: passing `null` is legal, and will result in \u003ccode\u003etrue\u003c/code\u003e being returned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.isJacksonStdImpl#1046",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.isJacksonStdImpl(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean isJacksonStdImpl(Class\u003c?\u003e implClass){\n  return (implClass.getAnnotation(JacksonStdImpl.class) !\u003d null);\n}",
    "begin_line": 1046,
    "end_line": 1048,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getPackageName#1062",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getPackageName(java.lang.Class\u003c?\u003e)",
    "snippet": "public static String getPackageName(Class\u003c?\u003e cls){\n  Package pkg\u003dcls.getPackage();\n  return (pkg \u003d\u003d null) ? null : pkg.getName();\n}",
    "begin_line": 1062,
    "end_line": 1065,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.hasEnclosingMethod#1070",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.hasEnclosingMethod(java.lang.Class\u003c?\u003e)",
    "snippet": "public static boolean hasEnclosingMethod(Class\u003c?\u003e cls){\n  return !isObjectOrPrimitive(cls) \u0026\u0026 (cls.getEnclosingMethod() !\u003d null);\n}",
    "begin_line": 1070,
    "end_line": 1072,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaredFields#1077",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredFields(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Field[] getDeclaredFields(Class\u003c?\u003e cls){\n  return cls.getDeclaredFields();\n}",
    "begin_line": 1077,
    "end_line": 1079,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaredMethods#1084",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredMethods(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method[] getDeclaredMethods(Class\u003c?\u003e cls){\n  return cls.getDeclaredMethods();\n}",
    "begin_line": 1084,
    "end_line": 1086,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.findClassAnnotations#1091",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.findClassAnnotations(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Annotation[] findClassAnnotations(Class\u003c?\u003e cls){\n  if (isObjectOrPrimitive(cls)) {\n    return NO_ANNOTATIONS;\n  }\n  return cls.getDeclaredAnnotations();\n}",
    "begin_line": 1091,
    "end_line": 1096,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getClassMethods#1105",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getClassMethods(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Method[] getClassMethods(Class\u003c?\u003e cls){\n  try {\n    return ClassUtil.getDeclaredMethods(cls);\n  }\n catch (  final NoClassDefFoundError ex) {\n    final ClassLoader loader\u003dThread.currentThread().getContextClassLoader();\n    if (loader \u003d\u003d null) {\n      throw ex;\n    }\n    final Class\u003c?\u003e contextClass;\n    try {\n      contextClass\u003dloader.loadClass(cls.getName());\n    }\n catch (    ClassNotFoundException e) {\n      ex.addSuppressed(e);\n      throw ex;\n    }\n    return contextClass.getDeclaredMethods();\n  }\n}",
    "begin_line": 1105,
    "end_line": 1126,
    "comment": "/** \n * Helper method that gets methods declared in given class; usually a simple thing, but sometimes (as per [databind#785]) more complicated, depending on classloader setup.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getConstructors#1131",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructors(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Ctor[] getConstructors(Class\u003c?\u003e cls){\n  if (cls.isInterface() || isObjectOrPrimitive(cls)) {\n    return NO_CTORS;\n  }\n  Constructor\u003c?\u003e[] rawCtors\u003dcls.getDeclaredConstructors();\n  final int len\u003drawCtors.length;\n  Ctor[] result\u003dnew Ctor[len];\n  for (int i\u003d0; i \u003c len; ++i) {\n    result[i]\u003dnew Ctor(rawCtors[i]);\n  }\n  return result;\n}",
    "begin_line": 1131,
    "end_line": 1144,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getDeclaringClass#1152",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getDeclaringClass(Class\u003c?\u003e cls){\n  return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();\n}",
    "begin_line": 1152,
    "end_line": 1154,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getGenericSuperclass#1159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericSuperclass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type getGenericSuperclass(Class\u003c?\u003e cls){\n  return cls.getGenericSuperclass();\n}",
    "begin_line": 1159,
    "end_line": 1161,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getGenericInterfaces#1166",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getGenericInterfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Type[] getGenericInterfaces(Class\u003c?\u003e cls){\n  return cls.getGenericInterfaces();\n}",
    "begin_line": 1166,
    "end_line": 1168,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil.getEnclosingClass#1173",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getEnclosingClass(java.lang.Class\u003c?\u003e)",
    "snippet": "public static Class\u003c?\u003e getEnclosingClass(Class\u003c?\u003e cls){\n  return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass();\n}",
    "begin_line": 1173,
    "end_line": 1176,
    "comment": "/** \n * @since 2.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ClassUtil._interfaces#1178",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil._interfaces(java.lang.Class\u003c?\u003e)",
    "snippet": "private static Class\u003c?\u003e[] _interfaces(Class\u003c?\u003e cls){\n  return cls.getInterfaces();\n}",
    "begin_line": 1178,
    "end_line": 1180,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.EnumTypeLocator#1199",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.EnumTypeLocator()",
    "snippet": "private EnumTypeLocator(){\n  enumSetTypeField\u003dlocateField(EnumSet.class,\"elementType\",Class.class);\n  enumMapTypeField\u003dlocateField(EnumMap.class,\"elementType\",Class.class);\n}",
    "begin_line": 1199,
    "end_line": 1204,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1207",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumSet\u003c?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumSet\u003c?\u003e set){\n  if (enumSetTypeField !\u003d null) {\n    return (Class\u003c? extends Enum\u003c?\u003e\u003e)get(set,enumSetTypeField);\n  }\n  throw new IllegalStateException(\"Cannot figure out type for EnumSet (odd JDK platform?)\");\n}",
    "begin_line": 1207,
    "end_line": 1213,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.enumTypeFor#1216",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.enumTypeFor(java.util.EnumMap\u003c?,?\u003e)",
    "snippet": "@SuppressWarnings(\"unchecked\") public Class\u003c? extends Enum\u003c?\u003e\u003e enumTypeFor(EnumMap\u003c?,?\u003e set){\n  if (enumMapTypeField !\u003d null) {\n    return (Class\u003c? extends Enum\u003c?\u003e\u003e)get(set,enumMapTypeField);\n  }\n  throw new IllegalStateException(\"Cannot figure out type for EnumMap (odd JDK platform?)\");\n}",
    "begin_line": 1216,
    "end_line": 1222,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.get#1224",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.get(java.lang.Object, java.lang.reflect.Field)",
    "snippet": "private Object get(Object bean,Field field){\n  try {\n    return field.get(bean);\n  }\n catch (  Exception e) {\n    throw new IllegalArgumentException(e);\n  }\n}",
    "begin_line": 1224,
    "end_line": 1231,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "EnumTypeLocator.locateField#1233",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.locateField(java.lang.Class\u003c?\u003e, java.lang.String, java.lang.Class\u003c?\u003e)",
    "snippet": "private static Field locateField(Class\u003c?\u003e fromClass,String expectedName,Class\u003c?\u003e type){\n  Field found\u003dnull;\n  Field[] fields\u003dgetDeclaredFields(fromClass);\n  for (  Field f : fields) {\n    if (expectedName.equals(f.getName()) \u0026\u0026 f.getType() \u003d\u003d type) {\n      found\u003df;\n      break;\n    }\n  }\n  if (found \u003d\u003d null) {\n    for (    Field f : fields) {\n      if (f.getType() \u003d\u003d type) {\n        if (found !\u003d null)         return null;\n        found\u003df;\n      }\n    }\n  }\n  if (found !\u003d null) {\n    try {\n      found.setAccessible(true);\n    }\n catch (    Throwable t) {\n    }\n  }\n  return found;\n}",
    "begin_line": 1233,
    "end_line": 1260,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.Ctor#1285",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.Ctor(java.lang.reflect.Constructor\u003c?\u003e)",
    "snippet": "public Ctor(Constructor\u003c?\u003e ctor){\n  _ctor\u003dctor;\n}",
    "begin_line": 1285,
    "end_line": 1287,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getConstructor#1289",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getConstructor()",
    "snippet": "public Constructor\u003c?\u003e getConstructor(){\n  return _ctor;\n}",
    "begin_line": 1289,
    "end_line": 1291,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParamCount#1293",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParamCount()",
    "snippet": "public int getParamCount(){\n  int c\u003d_paramCount;\n  if (c \u003c 0) {\n    c\u003d_ctor.getParameterTypes().length;\n    _paramCount\u003dc;\n  }\n  return c;\n}",
    "begin_line": 1293,
    "end_line": 1300,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaringClass#1302",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaringClass()",
    "snippet": "public Class\u003c?\u003e getDeclaringClass(){\n  return _ctor.getDeclaringClass();\n}",
    "begin_line": 1302,
    "end_line": 1304,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getDeclaredAnnotations#1306",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getDeclaredAnnotations()",
    "snippet": "public Annotation[] getDeclaredAnnotations(){\n  Annotation[] result\u003d_annotations;\n  if (result \u003d\u003d null) {\n    result\u003d_ctor.getDeclaredAnnotations();\n    _annotations\u003dresult;\n  }\n  return result;\n}",
    "begin_line": 1306,
    "end_line": 1313,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Ctor.getParameterAnnotations#1315",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/ClassUtil.java",
    "class_name": "com.fasterxml.jackson.databind.util.ClassUtil",
    "signature": "com.fasterxml.jackson.databind.util.ClassUtil.getParameterAnnotations()",
    "snippet": "public Annotation[][] getParameterAnnotations(){\n  Annotation[][] result\u003d_paramAnnotations;\n  if (result \u003d\u003d null) {\n    result\u003d_ctor.getParameterAnnotations();\n    _paramAnnotations\u003dresult;\n  }\n  return result;\n}",
    "begin_line": 1315,
    "end_line": 1322,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.LRUMap#32",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.LRUMap(int, int)",
    "snippet": "public LRUMap(int initialEntries,int maxEntries){\n  _map\u003dnew ConcurrentHashMap\u003cK,V\u003e(initialEntries,0.8f,4);\n  _maxEntries\u003dmaxEntries;\n}",
    "begin_line": 32,
    "end_line": 37,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.put#39",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.put(K, V)",
    "snippet": "public V put(K key,V value){\n  if (_map.size() \u003e\u003d _maxEntries) {\nsynchronized (this) {\n      if (_map.size() \u003e\u003d _maxEntries) {\n        clear();\n      }\n    }\n  }\n  return _map.put(key,value);\n}",
    "begin_line": 39,
    "end_line": 49,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.putIfAbsent#54",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.putIfAbsent(K, V)",
    "snippet": "public V putIfAbsent(K key,V value){\n  if (_map.size() \u003e\u003d _maxEntries) {\nsynchronized (this) {\n      if (_map.size() \u003e\u003d _maxEntries) {\n        clear();\n      }\n    }\n  }\n  return _map.putIfAbsent(key,value);\n}",
    "begin_line": 54,
    "end_line": 65,
    "comment": "/** \n * @since 2.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.get#68",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.get(java.lang.Object)",
    "snippet": "public V get(Object key){\n  return _map.get(key);\n}",
    "begin_line": 68,
    "end_line": 68,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.clear#70",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.clear()",
    "snippet": "public void clear(){\n  _map.clear();\n}",
    "begin_line": 70,
    "end_line": 70,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.size#71",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.size()",
    "snippet": "public int size(){\n  return _map.size();\n}",
    "begin_line": 71,
    "end_line": 71,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readObject#87",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream in) throws IOException {\n  _jdkSerializeMaxEntries\u003din.readInt();\n}",
    "begin_line": 87,
    "end_line": 89,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.writeObject#91",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream out) throws IOException {\n  out.writeInt(_jdkSerializeMaxEntries);\n}",
    "begin_line": 91,
    "end_line": 93,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LRUMap.readResolve#95",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LRUMap.java",
    "class_name": "com.fasterxml.jackson.databind.util.LRUMap",
    "signature": "com.fasterxml.jackson.databind.util.LRUMap.readResolve()",
    "snippet": "protected Object readResolve(){\n  return new LRUMap\u003cObject,Object\u003e(_jdkSerializeMaxEntries,_jdkSerializeMaxEntries);\n}",
    "begin_line": 95,
    "end_line": 97,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedNode.LinkedNode#14",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LinkedNode.java",
    "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
    "signature": "com.fasterxml.jackson.databind.util.LinkedNode.LinkedNode(T, com.fasterxml.jackson.databind.util.LinkedNode\u003cT\u003e)",
    "snippet": "public LinkedNode(T value,LinkedNode\u003cT\u003e next){\n  this.value\u003dvalue;\n  this.next\u003dnext;\n}",
    "begin_line": 14,
    "end_line": 18,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedNode.linkNext#20",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LinkedNode.java",
    "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
    "signature": "com.fasterxml.jackson.databind.util.LinkedNode.linkNext(com.fasterxml.jackson.databind.util.LinkedNode\u003cT\u003e)",
    "snippet": "public void linkNext(LinkedNode\u003cT\u003e n){\n  if (next !\u003d null) {\n    throw new IllegalStateException();\n  }\n  next\u003dn;\n}",
    "begin_line": 20,
    "end_line": 26,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedNode.next#28",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LinkedNode.java",
    "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
    "signature": "com.fasterxml.jackson.databind.util.LinkedNode.next()",
    "snippet": "public LinkedNode\u003cT\u003e next(){\n  return next;\n}",
    "begin_line": 28,
    "end_line": 28,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedNode.value#30",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LinkedNode.java",
    "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
    "signature": "com.fasterxml.jackson.databind.util.LinkedNode.value()",
    "snippet": "public T value(){\n  return value;\n}",
    "begin_line": 30,
    "end_line": 30,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LinkedNode.contains#42",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/LinkedNode.java",
    "class_name": "com.fasterxml.jackson.databind.util.LinkedNode",
    "signature": "com.fasterxml.jackson.databind.util.LinkedNode.contains(com.fasterxml.jackson.databind.util.LinkedNode\u003cST\u003e, ST)",
    "snippet": "public static \u003cST\u003eboolean contains(LinkedNode\u003cST\u003e node,ST value){\n  while (node !\u003d null) {\n    if (node.value() \u003d\u003d value) {\n      return true;\n    }\n    node\u003dnode.next();\n  }\n  return false;\n}",
    "begin_line": 42,
    "end_line": 51,
    "comment": "/** \n * Convenience method that can be used to check if a linked list with given head node (which may be null to indicate empty list) contains given value\n * @param \u003c ST \u003e Type argument that defines contents of the linked list parameter\n * @param node Head node of the linked list\n * @param value Value to look for\n * @return True if linked list contains the value, false otherwise\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.RootNameLookup#21",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.RootNameLookup()",
    "snippet": "public RootNameLookup(){\n  _rootNames\u003dnew LRUMap\u003cClassKey,PropertyName\u003e(20,200);\n}",
    "begin_line": 21,
    "end_line": 23,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.findRootName#25",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.findRootName(com.fasterxml.jackson.databind.JavaType, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public PropertyName findRootName(JavaType rootType,MapperConfig\u003c?\u003e config){\n  return findRootName(rootType.getRawClass(),config);\n}",
    "begin_line": 25,
    "end_line": 27,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.findRootName#29",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.findRootName(java.lang.Class\u003c?\u003e, com.fasterxml.jackson.databind.cfg.MapperConfig\u003c?\u003e)",
    "snippet": "public PropertyName findRootName(Class\u003c?\u003e rootType,MapperConfig\u003c?\u003e config){\n  ClassKey key\u003dnew ClassKey(rootType);\n  PropertyName name\u003d_rootNames.get(key);\n  if (name !\u003d null) {\n    return name;\n  }\n  BeanDescription beanDesc\u003dconfig.introspectClassAnnotations(rootType);\n  AnnotationIntrospector intr\u003dconfig.getAnnotationIntrospector();\n  AnnotatedClass ac\u003dbeanDesc.getClassInfo();\n  name\u003dintr.findRootName(ac);\n  if (name \u003d\u003d null || !name.hasSimpleName()) {\n    name\u003dPropertyName.construct(rootType.getSimpleName());\n  }\n  _rootNames.put(key,name);\n  return name;\n}",
    "begin_line": 29,
    "end_line": 47,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RootNameLookup.readResolve#59",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/RootNameLookup.java",
    "class_name": "com.fasterxml.jackson.databind.util.RootNameLookup",
    "signature": "com.fasterxml.jackson.databind.util.RootNameLookup.readResolve()",
    "snippet": "protected Object readResolve(){\n  return new RootNameLookup();\n}",
    "begin_line": 59,
    "end_line": 61,
    "comment": "/** \n * Need to override to reproduce cache object via constructor, instead of serialize/deserialize (since we do NOT want to retain cached data)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#159",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat()",
    "snippet": "public StdDateFormat(){\n  _locale\u003dDEFAULT_LOCALE;\n}",
    "begin_line": 159,
    "end_line": 161,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#164",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat(java.util.TimeZone, java.util.Locale)",
    "snippet": "@Deprecated public StdDateFormat(TimeZone tz,Locale loc){\n  _timezone\u003dtz;\n  _locale\u003dloc;\n}",
    "begin_line": 164,
    "end_line": 167,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#169",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat(java.util.TimeZone, java.util.Locale, java.lang.Boolean)",
    "snippet": "protected StdDateFormat(TimeZone tz,Locale loc,Boolean lenient){\n  this(tz,loc,lenient,false);\n}",
    "begin_line": 169,
    "end_line": 171,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.StdDateFormat#176",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.StdDateFormat(java.util.TimeZone, java.util.Locale, java.lang.Boolean, boolean)",
    "snippet": "protected StdDateFormat(TimeZone tz,Locale loc,Boolean lenient,boolean formatTzOffsetWithColon){\n  _timezone\u003dtz;\n  _locale\u003dloc;\n  _lenient\u003dlenient;\n  _tzSerializedWithColon\u003dformatTzOffsetWithColon;\n}",
    "begin_line": 176,
    "end_line": 182,
    "comment": "/** \n * @since 2.9.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getDefaultTimeZone#184",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getDefaultTimeZone()",
    "snippet": "public static TimeZone getDefaultTimeZone(){\n  return DEFAULT_TIMEZONE;\n}",
    "begin_line": 184,
    "end_line": 186,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withTimeZone#192",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withTimeZone(java.util.TimeZone)",
    "snippet": "public StdDateFormat withTimeZone(TimeZone tz){\n  if (tz \u003d\u003d null) {\n    tz\u003dDEFAULT_TIMEZONE;\n  }\n  if ((tz \u003d\u003d _timezone) || tz.equals(_timezone)) {\n    return this;\n  }\n  return new StdDateFormat(tz,_locale,_lenient,_tzSerializedWithColon);\n}",
    "begin_line": 192,
    "end_line": 200,
    "comment": "/** \n * Method used for creating a new instance with specified timezone; if no timezone specified, defaults to the default timezone (UTC).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withLocale#208",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withLocale(java.util.Locale)",
    "snippet": "public StdDateFormat withLocale(Locale loc){\n  if (loc.equals(_locale)) {\n    return this;\n  }\n  return new StdDateFormat(_timezone,loc,_lenient,_tzSerializedWithColon);\n}",
    "begin_line": 208,
    "end_line": 213,
    "comment": "/** \n * \"Mutant factory\" method that will return an instance that uses specified {@code Locale}: either  {@code this} instance (if setting would not change), or newlyconstructed instance with different  {@code Locale} to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withLenient#222",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withLenient(java.lang.Boolean)",
    "snippet": "public StdDateFormat withLenient(Boolean b){\n  if (_equals(b,_lenient)) {\n    return this;\n  }\n  return new StdDateFormat(_timezone,_locale,b,_tzSerializedWithColon);\n}",
    "begin_line": 222,
    "end_line": 227,
    "comment": "/** \n * \"Mutant factory\" method that will return an instance that has specified leniency setting: either  {@code this} instance (if setting would not change), or newlyconstructed instance.\n * @since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.withColonInTimeZone#242",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.withColonInTimeZone(boolean)",
    "snippet": "public StdDateFormat withColonInTimeZone(boolean b){\n  if (_tzSerializedWithColon \u003d\u003d b) {\n    return this;\n  }\n  return new StdDateFormat(_timezone,_locale,_lenient,b);\n}",
    "begin_line": 242,
    "end_line": 247,
    "comment": "/** \n * \"Mutant factory\" method that will return an instance that has specified handling of colon when serializing timezone (timezone either written like  {@code +0500} or {@code +05:00}): either  {@code this} instance (if setting would not change), or newlyconstructed instance with desired setting for colon inclusion. \u003cp\u003e NOTE: does NOT affect deserialization as colon is optional accepted but not required -- put another way, either serialization is accepted by this class.\n * @since 2.9.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.clone#250",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.clone()",
    "snippet": "@Override public StdDateFormat clone(){\n  return new StdDateFormat(_timezone,_locale,_lenient,_tzSerializedWithColon);\n}",
    "begin_line": 250,
    "end_line": 254,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getISO8601Format#266",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getISO8601Format(java.util.TimeZone, java.util.Locale)",
    "snippet": "@Deprecated public static DateFormat getISO8601Format(TimeZone tz,Locale loc){\n  return _cloneFormat(DATE_FORMAT_ISO8601,DATE_FORMAT_STR_ISO8601,tz,loc,null);\n}",
    "begin_line": 266,
    "end_line": 268,
    "comment": "/** \n * Method for getting a non-shared DateFormat instance that uses specified timezone and can handle simple ISO-8601 compliant date format.\n * @since 2.4\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getRFC1123Format#280",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getRFC1123Format(java.util.TimeZone, java.util.Locale)",
    "snippet": "@Deprecated public static DateFormat getRFC1123Format(TimeZone tz,Locale loc){\n  return _cloneFormat(DATE_FORMAT_RFC1123,DATE_FORMAT_STR_RFC1123,tz,loc,null);\n}",
    "begin_line": 280,
    "end_line": 283,
    "comment": "/** \n * Method for getting a non-shared DateFormat instance that uses specific timezone and can handle RFC-1123 compliant date format.\n * @since 2.4\n * @deprecated Since 2.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.getTimeZone#292",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.getTimeZone()",
    "snippet": "@Override public TimeZone getTimeZone(){\n  return _timezone;\n}",
    "begin_line": 292,
    "end_line": 294,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.setTimeZone#297",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.setTimeZone(java.util.TimeZone)",
    "snippet": "@Override public void setTimeZone(TimeZone tz){\n  if (!tz.equals(_timezone)) {\n    _clearFormats();\n    _timezone\u003dtz;\n  }\n}",
    "begin_line": 297,
    "end_line": 306,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.setLenient#314",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.setLenient(boolean)",
    "snippet": "@Override public void setLenient(boolean enabled){\n  Boolean newValue\u003dBoolean.valueOf(enabled);\n  if (!_equals(newValue,_lenient)) {\n    _lenient\u003dnewValue;\n    _clearFormats();\n  }\n}",
    "begin_line": 314,
    "end_line": 321,
    "comment": "/** \n * Need to override since we need to keep track of leniency locally, and not via underlying  {@link Calendar} instance like base classdoes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.isLenient#324",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.isLenient()",
    "snippet": "@Override public boolean isLenient(){\n  return (_lenient \u003d\u003d null) || _lenient.booleanValue();\n}",
    "begin_line": 324,
    "end_line": 327,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.isColonIncludedInTimeZone#343",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.isColonIncludedInTimeZone()",
    "snippet": "public boolean isColonIncludedInTimeZone(){\n  return _tzSerializedWithColon;\n}",
    "begin_line": 343,
    "end_line": 345,
    "comment": "/** \n * Accessor for checking whether this instance would include colon within timezone serialization or not: if {code true}, timezone offset is serialized like  {@code -06:00}; if {code false} as  {@code -0600}. \u003cp\u003e NOTE: only relevant for serialization (formatting), as deserialization (parsing) always accepts optional colon but does not require it, regardless of this setting.\n * @return {@code true} if a colon is to be inserted between the hours and minutes of the TZ offset when serializing as String; otherwise  {@code false}\n * @since 2.9.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parse#354",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parse(java.lang.String)",
    "snippet": "@Override public Date parse(String dateStr) throws ParseException {\n  dateStr\u003ddateStr.trim();\n  ParsePosition pos\u003dnew ParsePosition(0);\n  Date dt\u003d_parseDate(dateStr,pos);\n  if (dt !\u003d null) {\n    return dt;\n  }\n  StringBuilder sb\u003dnew StringBuilder();\n  for (  String f : ALL_FORMATS) {\n    if (sb.length() \u003e 0) {\n      sb.append(\"\\\", \\\"\");\n    }\n else {\n      sb.append(\u0027\"\u0027);\n    }\n    sb.append(f);\n  }\n  sb.append(\u0027\"\u0027);\n  throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",dateStr,sb.toString()),pos.getErrorIndex());\n}",
    "begin_line": 354,
    "end_line": 375,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parse#379",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parse(java.lang.String, java.text.ParsePosition)",
    "snippet": "@Override public Date parse(String dateStr,ParsePosition pos){\n  try {\n    return _parseDate(dateStr,pos);\n  }\n catch (  ParseException e) {\n  }\n  return null;\n}",
    "begin_line": 379,
    "end_line": 387,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._parseDate#389",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._parseDate(java.lang.String, java.text.ParsePosition)",
    "snippet": "protected Date _parseDate(String dateStr,ParsePosition pos) throws ParseException {\n  if (looksLikeISO8601(dateStr)) {\n    return parseAsISO8601(dateStr,pos);\n  }\n  int i\u003ddateStr.length();\n  while (--i \u003e\u003d 0) {\n    char ch\u003ddateStr.charAt(i);\n    if (ch \u003c \u00270\u0027 || ch \u003e \u00279\u0027) {\n      if (i \u003e 0 || ch !\u003d \u0027-\u0027) {\n        break;\n      }\n    }\n  }\n  if ((i \u003c 0) \u0026\u0026 (dateStr.charAt(0) \u003d\u003d \u0027-\u0027 || NumberInput.inLongRange(dateStr,false))) {\n    return _parseDateFromLong(dateStr,pos);\n  }\n  return parseAsRFC1123(dateStr,pos);\n}",
    "begin_line": 389,
    "end_line": 412,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.format#421",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)",
    "snippet": "@Override public StringBuffer format(Date date,StringBuffer toAppendTo,FieldPosition fieldPosition){\n  TimeZone tz\u003d_timezone;\n  if (tz \u003d\u003d null) {\n    tz\u003dDEFAULT_TIMEZONE;\n  }\n  _format(tz,_locale,date,toAppendTo);\n  return toAppendTo;\n}",
    "begin_line": 421,
    "end_line": 430,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._format#432",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._format(java.util.TimeZone, java.util.Locale, java.util.Date, java.lang.StringBuffer)",
    "snippet": "protected void _format(TimeZone tz,Locale loc,Date date,StringBuffer buffer){\n  Calendar cal\u003d_getCalendar(tz);\n  cal.setTime(date);\n  final int year\u003dcal.get(Calendar.YEAR);\n  if (cal.get(Calendar.ERA) \u003d\u003d GregorianCalendar.BC) {\n    _formatBCEYear(buffer,year);\n  }\n else {\n    if (year \u003e 9999) {\n      buffer.append(\u0027+\u0027);\n    }\n    pad4(buffer,year);\n  }\n  buffer.append(\u0027-\u0027);\n  pad2(buffer,cal.get(Calendar.MONTH) + 1);\n  buffer.append(\u0027-\u0027);\n  pad2(buffer,cal.get(Calendar.DAY_OF_MONTH));\n  buffer.append(\u0027T\u0027);\n  pad2(buffer,cal.get(Calendar.HOUR_OF_DAY));\n  buffer.append(\u0027:\u0027);\n  pad2(buffer,cal.get(Calendar.MINUTE));\n  buffer.append(\u0027:\u0027);\n  pad2(buffer,cal.get(Calendar.SECOND));\n  buffer.append(\u0027.\u0027);\n  pad3(buffer,cal.get(Calendar.MILLISECOND));\n  int offset\u003dtz.getOffset(cal.getTimeInMillis());\n  if (offset !\u003d 0) {\n    int hours\u003dMath.abs((offset / (60 * 1000)) / 60);\n    int minutes\u003dMath.abs((offset / (60 * 1000)) % 60);\n    buffer.append(offset \u003c 0 ? \u0027-\u0027 : \u0027+\u0027);\n    pad2(buffer,hours);\n    if (_tzSerializedWithColon) {\n      buffer.append(\u0027:\u0027);\n    }\n    pad2(buffer,minutes);\n  }\n else {\n    if (_tzSerializedWithColon) {\n      buffer.append(\"+00:00\");\n    }\n else {\n      buffer.append(\"+0000\");\n    }\n  }\n}",
    "begin_line": 432,
    "end_line": 488,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._formatBCEYear#490",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._formatBCEYear(java.lang.StringBuffer, int)",
    "snippet": "protected void _formatBCEYear(StringBuffer buffer,int bceYearNoSign){\n  if (bceYearNoSign \u003d\u003d 1) {\n    buffer.append(\"+0000\");\n    return;\n  }\n  final int isoYear\u003dbceYearNoSign - 1;\n  buffer.append(\u0027-\u0027);\n  pad4(buffer,isoYear);\n}",
    "begin_line": 490,
    "end_line": 503,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.pad2#505",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.pad2(java.lang.StringBuffer, int)",
    "snippet": "private static void pad2(StringBuffer buffer,int value){\n  int tens\u003dvalue / 10;\n  if (tens \u003d\u003d 0) {\n    buffer.append(\u00270\u0027);\n  }\n else {\n    buffer.append((char)(\u00270\u0027 + tens));\n    value-\u003d10 * tens;\n  }\n  buffer.append((char)(\u00270\u0027 + value));\n}",
    "begin_line": 505,
    "end_line": 514,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.pad3#516",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.pad3(java.lang.StringBuffer, int)",
    "snippet": "private static void pad3(StringBuffer buffer,int value){\n  int h\u003dvalue / 100;\n  if (h \u003d\u003d 0) {\n    buffer.append(\u00270\u0027);\n  }\n else {\n    buffer.append((char)(\u00270\u0027 + h));\n    value-\u003d(h * 100);\n  }\n  pad2(buffer,value);\n}",
    "begin_line": 516,
    "end_line": 525,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.pad4#527",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.pad4(java.lang.StringBuffer, int)",
    "snippet": "private static void pad4(StringBuffer buffer,int value){\n  int h\u003dvalue / 100;\n  if (h \u003d\u003d 0) {\n    buffer.append(\u00270\u0027).append(\u00270\u0027);\n  }\n else {\n    if (h \u003e 99) {\n      buffer.append(h);\n    }\n else {\n      pad2(buffer,h);\n    }\n    value-\u003d(100 * h);\n  }\n  pad2(buffer,value);\n}",
    "begin_line": 527,
    "end_line": 540,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.toString#549",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.toString()",
    "snippet": "@Override public String toString(){\n  return String.format(\"DateFormat %s: (timezone: %s, locale: %s, lenient: %s)\",getClass().getName(),_timezone,_locale,_lenient);\n}",
    "begin_line": 549,
    "end_line": 552,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.toPattern#554",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.toPattern()",
    "snippet": "public String toPattern(){\n  StringBuilder sb\u003dnew StringBuilder(100);\n  sb.append(\"[one of: \u0027\").append(DATE_FORMAT_STR_ISO8601).append(\"\u0027, \u0027\").append(DATE_FORMAT_STR_RFC1123).append(\"\u0027 (\");\n  sb.append(Boolean.FALSE.equals(_lenient) ? \"strict\" : \"lenient\").append(\")]\");\n  return sb.toString();\n}",
    "begin_line": 554,
    "end_line": 566,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.equals#569",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.equals(java.lang.Object)",
    "snippet": "@Override public boolean equals(Object o){\n  return (o \u003d\u003d this);\n}",
    "begin_line": 569,
    "end_line": 571,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.hashCode#574",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.hashCode()",
    "snippet": "@Override public int hashCode(){\n  return System.identityHashCode(this);\n}",
    "begin_line": 574,
    "end_line": 576,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.looksLikeISO8601#588",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.looksLikeISO8601(java.lang.String)",
    "snippet": "protected boolean looksLikeISO8601(String dateStr){\n  if (dateStr.length() \u003e\u003d 7 \u0026\u0026 Character.isDigit(dateStr.charAt(0)) \u0026\u0026 Character.isDigit(dateStr.charAt(3)) \u0026\u0026 dateStr.charAt(4) \u003d\u003d \u0027-\u0027 \u0026\u0026 Character.isDigit(dateStr.charAt(5))) {\n    return true;\n  }\n  return false;\n}",
    "begin_line": 588,
    "end_line": 599,
    "comment": "/** \n * Helper method used to figure out if input looks like valid ISO-8601 string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._parseDateFromLong#601",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._parseDateFromLong(java.lang.String, java.text.ParsePosition)",
    "snippet": "private Date _parseDateFromLong(String longStr,ParsePosition pos) throws ParseException {\n  long ts;\n  try {\n    ts\u003dNumberInput.parseLong(longStr);\n  }\n catch (  NumberFormatException e) {\n    throw new ParseException(String.format(\"Timestamp value %s out of 64-bit value range\",longStr),pos.getErrorIndex());\n  }\n  return new Date(ts);\n}",
    "begin_line": 601,
    "end_line": 612,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parseAsISO8601#614",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsISO8601(java.lang.String, java.text.ParsePosition)",
    "snippet": "protected Date parseAsISO8601(String dateStr,ParsePosition pos) throws ParseException {\n  try {\n    return _parseAsISO8601(dateStr,pos);\n  }\n catch (  IllegalArgumentException e) {\n    throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\", problem: %s\",dateStr,e.getMessage()),pos.getErrorIndex());\n  }\n}",
    "begin_line": 614,
    "end_line": 624,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._parseAsISO8601#626",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._parseAsISO8601(java.lang.String, java.text.ParsePosition)",
    "snippet": "protected Date _parseAsISO8601(String dateStr,ParsePosition bogus) throws IllegalArgumentException, ParseException {\n  final int totalLen\u003ddateStr.length();\n  TimeZone tz\u003dDEFAULT_TIMEZONE;\n  if ((_timezone !\u003d null) \u0026\u0026 (\u0027Z\u0027 !\u003d dateStr.charAt(totalLen - 1))) {\n    tz\u003d_timezone;\n  }\n  Calendar cal\u003d_getCalendar(tz);\n  cal.clear();\n  String formatStr;\n  if (totalLen \u003c\u003d 10) {\n    Matcher m\u003dPATTERN_PLAIN.matcher(dateStr);\n    if (m.matches()) {\n      int year\u003d_parse4D(dateStr,0);\n      int month\u003d_parse2D(dateStr,5) - 1;\n      int day\u003d_parse2D(dateStr,8);\n      cal.set(year,month,day,0,0,0);\n      cal.set(Calendar.MILLISECOND,0);\n      return cal.getTime();\n    }\n    formatStr\u003dDATE_FORMAT_STR_PLAIN;\n  }\n else {\n    Matcher m\u003dPATTERN_ISO8601.matcher(dateStr);\n    if (m.matches()) {\n      int start\u003dm.start(2);\n      int end\u003dm.end(2);\n      int len\u003dend - start;\n      if (len \u003e 1) {\n        int offsetSecs\u003d_parse2D(dateStr,start + 1) * 3600;\n        if (len \u003e\u003d 5) {\n          offsetSecs+\u003d_parse2D(dateStr,end - 2) * 60;\n        }\n        if (dateStr.charAt(start) \u003d\u003d \u0027-\u0027) {\n          offsetSecs*\u003d-1000;\n        }\n else {\n          offsetSecs*\u003d1000;\n        }\n        cal.set(Calendar.ZONE_OFFSET,offsetSecs);\n        cal.set(Calendar.DST_OFFSET,0);\n      }\n      int year\u003d_parse4D(dateStr,0);\n      int month\u003d_parse2D(dateStr,5) - 1;\n      int day\u003d_parse2D(dateStr,8);\n      int hour\u003d_parse2D(dateStr,11);\n      int minute\u003d_parse2D(dateStr,14);\n      int seconds;\n      if ((totalLen \u003e 16) \u0026\u0026 dateStr.charAt(16) \u003d\u003d \u0027:\u0027) {\n        seconds\u003d_parse2D(dateStr,17);\n      }\n else {\n        seconds\u003d0;\n      }\n      cal.set(year,month,day,hour,minute,seconds);\n      start\u003dm.start(1) + 1;\n      end\u003dm.end(1);\n      int msecs\u003d0;\n      if (start \u003e\u003d end) {\n        cal.set(Calendar.MILLISECOND,0);\n      }\n else {\n        msecs\u003d0;\n        final int fractLen\u003dend - start;\nswitch (fractLen) {\ndefault:          if (fractLen \u003e 9) {\n            throw new ParseException(String.format(\"Cannot parse date \\\"%s\\\": invalid fractional seconds \u0027%s\u0027; can use at most 9 digits\",dateStr,m.group(1).substring(1)),start);\n          }\ncase 3:        msecs+\u003d(dateStr.charAt(start + 2) - \u00270\u0027);\ncase 2:      msecs+\u003d10 * (dateStr.charAt(start + 1) - \u00270\u0027);\ncase 1:    msecs+\u003d100 * (dateStr.charAt(start) - \u00270\u0027);\n  break;\ncase 0:break;\n}\ncal.set(Calendar.MILLISECOND,msecs);\n}\nreturn cal.getTime();\n}\nformatStr\u003dDATE_FORMAT_STR_ISO8601;\n}\nthrow new ParseException(String.format(\"Cannot parse date \\\"%s\\\": while it seems to fit format \u0027%s\u0027, parsing fails (leniency? %s)\",dateStr,formatStr,_lenient),0);\n}",
    "begin_line": 626,
    "end_line": 734,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._parse4D#736",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._parse4D(java.lang.String, int)",
    "snippet": "private static int _parse4D(String str,int index){\n  return (1000 * (str.charAt(index) - \u00270\u0027)) + (100 * (str.charAt(index + 1) - \u00270\u0027)) + (10 * (str.charAt(index + 2) - \u00270\u0027))+ (str.charAt(index + 3) - \u00270\u0027);\n}",
    "begin_line": 736,
    "end_line": 741,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._parse2D#743",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._parse2D(java.lang.String, int)",
    "snippet": "private static int _parse2D(String str,int index){\n  return (10 * (str.charAt(index) - \u00270\u0027)) + (str.charAt(index + 1) - \u00270\u0027);\n}",
    "begin_line": 743,
    "end_line": 746,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat.parseAsRFC1123#748",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat.parseAsRFC1123(java.lang.String, java.text.ParsePosition)",
    "snippet": "protected Date parseAsRFC1123(String dateStr,ParsePosition pos){\n  if (_formatRFC1123 \u003d\u003d null) {\n    _formatRFC1123\u003d_cloneFormat(DATE_FORMAT_RFC1123,DATE_FORMAT_STR_RFC1123,_timezone,_locale,_lenient);\n  }\n  return _formatRFC1123.parse(dateStr,pos);\n}",
    "begin_line": 748,
    "end_line": 755,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._cloneFormat#763",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._cloneFormat(java.text.DateFormat, java.lang.String, java.util.TimeZone, java.util.Locale, java.lang.Boolean)",
    "snippet": "private final static DateFormat _cloneFormat(DateFormat df,String format,TimeZone tz,Locale loc,Boolean lenient){\n  if (!loc.equals(DEFAULT_LOCALE)) {\n    df\u003dnew SimpleDateFormat(format,loc);\n    df.setTimeZone((tz \u003d\u003d null) ? DEFAULT_TIMEZONE : tz);\n  }\n else {\n    df\u003d(DateFormat)df.clone();\n    if (tz !\u003d null) {\n      df.setTimeZone(tz);\n    }\n  }\n  if (lenient !\u003d null) {\n    df.setLenient(lenient.booleanValue());\n  }\n  return df;\n}",
    "begin_line": 763,
    "end_line": 779,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._clearFormats#781",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._clearFormats()",
    "snippet": "protected void _clearFormats(){\n  _formatRFC1123\u003dnull;\n}",
    "begin_line": 781,
    "end_line": 783,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._getCalendar#785",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._getCalendar(java.util.TimeZone)",
    "snippet": "protected Calendar _getCalendar(TimeZone tz){\n  Calendar cal\u003d_calendar;\n  if (cal \u003d\u003d null) {\n    _calendar\u003dcal\u003d(Calendar)CALENDAR.clone();\n  }\n  if (!cal.getTimeZone().equals(tz)) {\n    cal.setTimeZone(tz);\n  }\n  cal.setLenient(isLenient());\n  return cal;\n}",
    "begin_line": 785,
    "end_line": 795,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StdDateFormat._equals#797",
    "is_bug": true,
    "src_path": "com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "class_name": "com.fasterxml.jackson.databind.util.StdDateFormat",
    "signature": "com.fasterxml.jackson.databind.util.StdDateFormat._equals(T, T)",
    "snippet": "protected static \u003cT\u003eboolean _equals(T value1,T value2){\n  if (value1 \u003d\u003d value2) {\n    return true;\n  }\n  return (value1 !\u003d null) \u0026\u0026 value1.equals(value2);\n}",
    "begin_line": 797,
    "end_line": 802,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]