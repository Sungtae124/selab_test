[
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.setUp()",
    "snippet": "@Override public void setUp() throws Exception {\n  super.setUp();\n  reportMissingOverrides\u003dCheckLevel.WARNING;\n}",
    "begin_line": 47,
    "end_line": 50,
    "comment": "",
    "child_ranges": [
      "(line 48,col 5)-(line 48,col 18)",
      "(line 49,col 5)-(line 49,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInitialTypingScope()",
    "snippet": "public void testInitialTypingScope(){\n  Scope s\u003dnew TypedScopeCreator(compiler,CodingConventions.getDefault()).createInitialScope(new Node(Token.BLOCK));\n  assertTypeEquals(ARRAY_FUNCTION_TYPE,s.getVar(\"Array\").getType());\n  assertTypeEquals(BOOLEAN_OBJECT_FUNCTION_TYPE,s.getVar(\"Boolean\").getType());\n  assertTypeEquals(DATE_FUNCTION_TYPE,s.getVar(\"Date\").getType());\n  assertTypeEquals(ERROR_FUNCTION_TYPE,s.getVar(\"Error\").getType());\n  assertTypeEquals(EVAL_ERROR_FUNCTION_TYPE,s.getVar(\"EvalError\").getType());\n  assertTypeEquals(NUMBER_OBJECT_FUNCTION_TYPE,s.getVar(\"Number\").getType());\n  assertTypeEquals(OBJECT_FUNCTION_TYPE,s.getVar(\"Object\").getType());\n  assertTypeEquals(RANGE_ERROR_FUNCTION_TYPE,s.getVar(\"RangeError\").getType());\n  assertTypeEquals(REFERENCE_ERROR_FUNCTION_TYPE,s.getVar(\"ReferenceError\").getType());\n  assertTypeEquals(REGEXP_FUNCTION_TYPE,s.getVar(\"RegExp\").getType());\n  assertTypeEquals(STRING_OBJECT_FUNCTION_TYPE,s.getVar(\"String\").getType());\n  assertTypeEquals(SYNTAX_ERROR_FUNCTION_TYPE,s.getVar(\"SyntaxError\").getType());\n  assertTypeEquals(TYPE_ERROR_FUNCTION_TYPE,s.getVar(\"TypeError\").getType());\n  assertTypeEquals(URI_ERROR_FUNCTION_TYPE,s.getVar(\"URIError\").getType());\n}",
    "begin_line": 52,
    "end_line": 80,
    "comment": "",
    "child_ranges": [
      "(line 53,col 5)-(line 55,col 35)",
      "(line 57,col 5)-(line 57,col 71)",
      "(line 58,col 5)-(line 59,col 39)",
      "(line 60,col 5)-(line 60,col 69)",
      "(line 61,col 5)-(line 61,col 71)",
      "(line 62,col 5)-(line 63,col 41)",
      "(line 64,col 5)-(line 65,col 38)",
      "(line 66,col 5)-(line 66,col 73)",
      "(line 67,col 5)-(line 68,col 42)",
      "(line 69,col 5)-(line 70,col 46)",
      "(line 71,col 5)-(line 71,col 73)",
      "(line 72,col 5)-(line 73,col 38)",
      "(line 74,col 5)-(line 75,col 43)",
      "(line 76,col 5)-(line 77,col 41)",
      "(line 78,col 5)-(line 79,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrivateType()",
    "snippet": "public void testPrivateType() throws Exception {\n  testTypes(\" var x \u003d false;\",\"initializing variable\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 82,
    "end_line": 88,
    "comment": "",
    "child_ranges": [
      "(line 83,col 5)-(line 87,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck1()",
    "snippet": "public void testTypeCheck1() throws Exception {\n  testTypes(\"function foo(){ if (foo()) return; }\");\n}",
    "begin_line": 90,
    "end_line": 92,
    "comment": "",
    "child_ranges": [
      "(line 91,col 5)-(line 91,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck2()",
    "snippet": "public void testTypeCheck2() throws Exception {\n  testTypes(\"function foo(){ var x\u003dfoo(); x--; }\",\"increment/decrement\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 94,
    "end_line": 99,
    "comment": "",
    "child_ranges": [
      "(line 95,col 5)-(line 98,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck4()",
    "snippet": "public void testTypeCheck4() throws Exception {\n  testTypes(\"function foo(){ !foo(); }\");\n}",
    "begin_line": 101,
    "end_line": 103,
    "comment": "",
    "child_ranges": [
      "(line 102,col 5)-(line 102,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck5()",
    "snippet": "public void testTypeCheck5() throws Exception {\n  testTypes(\"function foo(){ var a \u003d +foo(); }\",\"sign operator\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 105,
    "end_line": 110,
    "comment": "",
    "child_ranges": [
      "(line 106,col 5)-(line 109,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck6()",
    "snippet": "public void testTypeCheck6() throws Exception {\n  testTypes(\"function foo(){\" + \"var a;if (a \u003d\u003d foo())return;}\");\n}",
    "begin_line": 112,
    "end_line": 116,
    "comment": "",
    "child_ranges": [
      "(line 113,col 5)-(line 115,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck8()",
    "snippet": "public void testTypeCheck8() throws Exception {\n  testTypes(\"function foo(){do {} while (foo());}\");\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "",
    "child_ranges": [
      "(line 119,col 5)-(line 119,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck9()",
    "snippet": "public void testTypeCheck9() throws Exception {\n  testTypes(\"function foo(){while (foo());}\");\n}",
    "begin_line": 122,
    "end_line": 124,
    "comment": "",
    "child_ranges": [
      "(line 123,col 5)-(line 123,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck10()",
    "snippet": "public void testTypeCheck10() throws Exception {\n  testTypes(\"function foo(){for (;foo(););}\");\n}",
    "begin_line": 126,
    "end_line": 128,
    "comment": "",
    "child_ranges": [
      "(line 127,col 5)-(line 127,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck11()",
    "snippet": "public void testTypeCheck11() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a \u003d b;\",\"assignment\\n\" + \"found   : String\\n\" + \"required: Number\");\n}",
    "begin_line": 130,
    "end_line": 137,
    "comment": "",
    "child_ranges": [
      "(line 131,col 5)-(line 136,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck12()",
    "snippet": "public void testTypeCheck12() throws Exception {\n  testTypes(\"function foo(){var a \u003d 3^foo();}\",\"bad right operand to bitwise operator\\n\" + \"found   : Object\\n\" + \"required: (boolean|null|number|string|undefined)\");\n}",
    "begin_line": 139,
    "end_line": 144,
    "comment": "",
    "child_ranges": [
      "(line 140,col 5)-(line 143,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck13()",
    "snippet": "public void testTypeCheck13() throws Exception {\n  testTypes(\"var i; i\u003d/xx/;\",\"assignment\\n\" + \"found   : RegExp\\n\" + \"required: (Number|String)\");\n}",
    "begin_line": 146,
    "end_line": 151,
    "comment": "",
    "child_ranges": [
      "(line 147,col 5)-(line 150,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck14()",
    "snippet": "public void testTypeCheck14() throws Exception {\n  testTypes(\"function foo(opt_a){}\");\n}",
    "begin_line": 153,
    "end_line": 155,
    "comment": "",
    "child_ranges": [
      "(line 154,col 5)-(line 154,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck15()",
    "snippet": "public void testTypeCheck15() throws Exception {\n  testTypes(\"var x;x\u003dnull;x\u003d10;\",\"assignment\\n\" + \"found   : number\\n\" + \"required: (Number|null)\");\n}",
    "begin_line": 158,
    "end_line": 163,
    "comment": "",
    "child_ranges": [
      "(line 159,col 5)-(line 162,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck16()",
    "snippet": "public void testTypeCheck16() throws Exception {\n  testTypes(\"var x\u003d\u0027\u0027;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: (Number|null)\");\n}",
    "begin_line": 165,
    "end_line": 170,
    "comment": "",
    "child_ranges": [
      "(line 166,col 5)-(line 169,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck17()",
    "snippet": "public void testTypeCheck17() throws Exception {\n  testTypes(\"\\n\" + \"function a(opt_foo){\\nreturn (opt_foo);\\n}\");\n}",
    "begin_line": 173,
    "end_line": 176,
    "comment": "",
    "child_ranges": [
      "(line 174,col 5)-(line 175,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck18()",
    "snippet": "public void testTypeCheck18() throws Exception {\n  testTypes(\"\\n function a(){return new RegExp();}\");\n}",
    "begin_line": 179,
    "end_line": 181,
    "comment": "",
    "child_ranges": [
      "(line 180,col 5)-(line 180,col 78)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck19()",
    "snippet": "public void testTypeCheck19() throws Exception {\n  testTypes(\"\\n function a(){return new Array();}\");\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "",
    "child_ranges": [
      "(line 184,col 5)-(line 184,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck20()",
    "snippet": "public void testTypeCheck20() throws Exception {\n  testTypes(\"\\n function a(){return new Date();}\");\n}",
    "begin_line": 187,
    "end_line": 189,
    "comment": "",
    "child_ranges": [
      "(line 188,col 5)-(line 188,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckBasicDowncast()",
    "snippet": "public void testTypeCheckBasicDowncast() throws Exception {\n  testTypes(\"function foo() {}\\n\" + \" var bar \u003d new foo();\\n\");\n}",
    "begin_line": 191,
    "end_line": 194,
    "comment": "",
    "child_ranges": [
      "(line 192,col 5)-(line 193,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckNoDowncastToNumber()",
    "snippet": "public void testTypeCheckNoDowncastToNumber() throws Exception {\n  testTypes(\"function foo() {}\\n\" + \" var bar \u003d new foo();\\n\",\"initializing variable\\n\" + \"found   : foo\\n\" + \"required: Number\");\n}",
    "begin_line": 196,
    "end_line": 202,
    "comment": "",
    "child_ranges": [
      "(line 197,col 5)-(line 201,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck21()",
    "snippet": "public void testTypeCheck21() throws Exception {\n  testTypes(\"var foo;\");\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "",
    "child_ranges": [
      "(line 205,col 5)-(line 205,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck22()",
    "snippet": "public void testTypeCheck22() throws Exception {\n  testTypes(\"\\nfunction foo(p){}\\n\" + \"function Element(){}\\n\" + \"var v;\\n\"+ \"foo(v);\\n\");\n}",
    "begin_line": 208,
    "end_line": 213,
    "comment": "",
    "child_ranges": [
      "(line 209,col 5)-(line 212,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck23()",
    "snippet": "public void testTypeCheck23() throws Exception {\n  testTypes(\"var foo; foo \u003d null;\");\n}",
    "begin_line": 215,
    "end_line": 217,
    "comment": "",
    "child_ranges": [
      "(line 216,col 5)-(line 216,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheck24()",
    "snippet": "public void testTypeCheck24() throws Exception {\n  testTypes(\"function MyType(){}\\n\" + \"var foo; foo \u003d null;\");\n}",
    "begin_line": 219,
    "end_line": 222,
    "comment": "",
    "child_ranges": [
      "(line 220,col 5)-(line 221,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckDefaultExterns()",
    "snippet": "public void testTypeCheckDefaultExterns() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f([].length);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 224,
    "end_line": 230,
    "comment": "",
    "child_ranges": [
      "(line 225,col 5)-(line 229,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckCustomExterns()",
    "snippet": "public void testTypeCheckCustomExterns() throws Exception {\n  testTypes(DEFAULT_EXTERNS + \" Array.prototype.oogabooga;\",\" function f(x) {}\" + \"f([].oogabooga);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: string\",false);\n}",
    "begin_line": 232,
    "end_line": 240,
    "comment": "",
    "child_ranges": [
      "(line 233,col 5)-(line 239,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckCustomExterns2()",
    "snippet": "public void testTypeCheckCustomExterns2() throws Exception {\n  testTypes(DEFAULT_EXTERNS + \" var Enum \u003d {FOO: 1, BAR: 1};\",\" function f(x) {} f(Enum.FOO); f(true);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: Enum.\u003cstring\u003e\",false);\n}",
    "begin_line": 243,
    "end_line": 251,
    "comment": "",
    "child_ranges": [
      "(line 244,col 5)-(line 250,col 15)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray1()",
    "snippet": "public void testParameterizedArray1() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[0]; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 253,
    "end_line": 260,
    "comment": "",
    "child_ranges": [
      "(line 254,col 5)-(line 259,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray2()",
    "snippet": "public void testParameterizedArray2() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[0]; };\",\"inconsistent return type\\n\" + \"found   : Array.\u003cnumber\u003e\\n\" + \"required: number\");\n}",
    "begin_line": 262,
    "end_line": 269,
    "comment": "",
    "child_ranges": [
      "(line 263,col 5)-(line 268,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray3()",
    "snippet": "public void testParameterizedArray3() throws Exception {\n  testTypes(\" var f \u003d function(a) { a[1] \u003d 0; return a[0]; };\");\n}",
    "begin_line": 271,
    "end_line": 275,
    "comment": "",
    "child_ranges": [
      "(line 272,col 5)-(line 274,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray4()",
    "snippet": "public void testParameterizedArray4() throws Exception {\n  testTypes(\" var f \u003d function(a) { a[0] \u003d \u0027a\u0027; };\",\"assignment\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 277,
    "end_line": 283,
    "comment": "",
    "child_ranges": [
      "(line 278,col 5)-(line 282,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray5()",
    "snippet": "public void testParameterizedArray5() throws Exception {\n  testTypes(\" var f \u003d function(a) { a[0] \u003d \u0027a\u0027; };\");\n}",
    "begin_line": 285,
    "end_line": 288,
    "comment": "",
    "child_ranges": [
      "(line 286,col 5)-(line 287,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray6()",
    "snippet": "public void testParameterizedArray6() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[0]; };\",\"inconsistent return type\\n\" + \"found   : *\\n\" + \"required: string\");\n}",
    "begin_line": 290,
    "end_line": 297,
    "comment": "",
    "child_ranges": [
      "(line 291,col 5)-(line 296,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedArray7()",
    "snippet": "public void testParameterizedArray7() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[0]; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 299,
    "end_line": 306,
    "comment": "",
    "child_ranges": [
      "(line 300,col 5)-(line 305,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedObject1()",
    "snippet": "public void testParameterizedObject1() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[0]; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 308,
    "end_line": 315,
    "comment": "",
    "child_ranges": [
      "(line 309,col 5)-(line 314,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedObject2()",
    "snippet": "public void testParameterizedObject2() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[\u0027x\u0027]; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 317,
    "end_line": 324,
    "comment": "",
    "child_ranges": [
      "(line 318,col 5)-(line 323,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedObject3()",
    "snippet": "public void testParameterizedObject3() throws Exception {\n  testTypes(\" var f \u003d function(a) { return a[\u0027x\u0027]; };\",\"restricted index type\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 326,
    "end_line": 333,
    "comment": "",
    "child_ranges": [
      "(line 327,col 5)-(line 332,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedObject4()",
    "snippet": "public void testParameterizedObject4() throws Exception {\n  testTypes(\" var E \u003d {A: \u0027a\u0027, B: \u0027b\u0027};\\n\" + \" var f \u003d function(a) { return a[\u0027x\u0027]; };\",\"restricted index type\\n\" + \"found   : string\\n\" + \"required: E.\u003cstring\u003e\");\n}",
    "begin_line": 335,
    "end_line": 343,
    "comment": "",
    "child_ranges": [
      "(line 336,col 5)-(line 342,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedObject5()",
    "snippet": "public void testParameterizedObject5() throws Exception {\n  testTypes(\" function F() {\" + \"   this.numbers \u003d {};\" + \"}\"+ \"(new F()).numbers[\u0027ten\u0027] \u003d \u002710\u0027;\",\"restricted index type\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 345,
    "end_line": 353,
    "comment": "",
    "child_ranges": [
      "(line 346,col 5)-(line 352,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnionOfFunctionAndType()",
    "snippet": "public void testUnionOfFunctionAndType() throws Exception {\n  testTypes(\" var a;\" + \" var b \u003d null; a \u003d b;\");\n}",
    "begin_line": 355,
    "end_line": 358,
    "comment": "",
    "child_ranges": [
      "(line 356,col 5)-(line 357,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalParameterComparedToUndefined()",
    "snippet": "public void testOptionalParameterComparedToUndefined() throws Exception {\n  testTypes(\"function foo(opt_a)\" + \"{if (opt_a\u003d\u003dundefined) var b \u003d 3;}\");\n}",
    "begin_line": 360,
    "end_line": 363,
    "comment": "",
    "child_ranges": [
      "(line 361,col 5)-(line 362,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalAllType()",
    "snippet": "public void testOptionalAllType() throws Exception {\n  testTypes(\"function f(opt_x) { return opt_x }\\n\" + \"var y;\\n\" + \"f(y);\");\n}",
    "begin_line": 365,
    "end_line": 369,
    "comment": "",
    "child_ranges": [
      "(line 366,col 5)-(line 368,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalUnknownNamedType()",
    "snippet": "public void testOptionalUnknownNamedType() throws Exception {\n  testTypes(\"\\n\" + \"function f(opt_x) { return opt_x; }\\n\" + \"var T \u003d function() {};\",\"inconsistent return type\\n\" + \"found   : (T|undefined)\\n\" + \"required: undefined\");\n}",
    "begin_line": 371,
    "end_line": 378,
    "comment": "",
    "child_ranges": [
      "(line 372,col 5)-(line 377,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionParam()",
    "snippet": "public void testOptionalArgFunctionParam() throws Exception {\n  testTypes(\"\" + \"function f(a) {a()};\");\n}",
    "begin_line": 380,
    "end_line": 383,
    "comment": "",
    "child_ranges": [
      "(line 381,col 5)-(line 382,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionParam2()",
    "snippet": "public void testOptionalArgFunctionParam2() throws Exception {\n  testTypes(\"\" + \"function f(a) {a(3)};\");\n}",
    "begin_line": 385,
    "end_line": 388,
    "comment": "",
    "child_ranges": [
      "(line 386,col 5)-(line 387,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionParam3()",
    "snippet": "public void testOptionalArgFunctionParam3() throws Exception {\n  testTypes(\"\" + \"function f(a) {a(undefined)};\");\n}",
    "begin_line": 390,
    "end_line": 393,
    "comment": "",
    "child_ranges": [
      "(line 391,col 5)-(line 392,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionParam4()",
    "snippet": "public void testOptionalArgFunctionParam4() throws Exception {\n  String expectedWarning\u003d\"Function a: called with 2 argument(s). \" + \"Function requires at least 0 argument(s) and no more than 1 \" + \"argument(s).\";\n  testTypes(\"function f(a) {a(3,4)};\",expectedWarning,false);\n}",
    "begin_line": 395,
    "end_line": 402,
    "comment": "",
    "child_ranges": [
      "(line 396,col 5)-(line 398,col 23)",
      "(line 400,col 5)-(line 401,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionParamError()",
    "snippet": "public void testOptionalArgFunctionParamError() throws Exception {\n  String expectedWarning\u003d\"Bad type annotation. variable length argument must be last\";\n  testTypes(\"\" + \"function f(a) {};\",expectedWarning,false);\n}",
    "begin_line": 404,
    "end_line": 409,
    "comment": "",
    "child_ranges": [
      "(line 405,col 5)-(line 406,col 69)",
      "(line 407,col 5)-(line 408,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam()",
    "snippet": "public void testOptionalNullableArgFunctionParam() throws Exception {\n  testTypes(\"\" + \"function f(a) {a()};\");\n}",
    "begin_line": 411,
    "end_line": 414,
    "comment": "",
    "child_ranges": [
      "(line 412,col 5)-(line 413,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam2()",
    "snippet": "public void testOptionalNullableArgFunctionParam2() throws Exception {\n  testTypes(\"\" + \"function f(a) {a(null)};\");\n}",
    "begin_line": 416,
    "end_line": 419,
    "comment": "",
    "child_ranges": [
      "(line 417,col 5)-(line 418,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalNullableArgFunctionParam3()",
    "snippet": "public void testOptionalNullableArgFunctionParam3() throws Exception {\n  testTypes(\"\" + \"function f(a) {a(3)};\");\n}",
    "begin_line": 421,
    "end_line": 424,
    "comment": "",
    "child_ranges": [
      "(line 422,col 5)-(line 423,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn()",
    "snippet": "public void testOptionalArgFunctionReturn() throws Exception {\n  testTypes(\"\" + \"function f() { return function(opt_x) { }; };\" + \"f()()\");\n}",
    "begin_line": 426,
    "end_line": 430,
    "comment": "",
    "child_ranges": [
      "(line 427,col 5)-(line 429,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOptionalArgFunctionReturn2()",
    "snippet": "public void testOptionalArgFunctionReturn2() throws Exception {\n  testTypes(\"\" + \"function f() { return function(opt_x) { }; };\" + \"f()({})\");\n}",
    "begin_line": 432,
    "end_line": 436,
    "comment": "",
    "child_ranges": [
      "(line 433,col 5)-(line 435,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanType()",
    "snippet": "public void testBooleanType() throws Exception {\n  testTypes(\"var x \u003d 1 \u003c 2;\");\n}",
    "begin_line": 438,
    "end_line": 440,
    "comment": "",
    "child_ranges": [
      "(line 439,col 5)-(line 439,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction1()",
    "snippet": "public void testBooleanReduction1() throws Exception {\n  testTypes(\"var x; x \u003d null || \\\"a\\\";\");\n}",
    "begin_line": 442,
    "end_line": 444,
    "comment": "",
    "child_ranges": [
      "(line 443,col 5)-(line 443,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction2()",
    "snippet": "public void testBooleanReduction2() throws Exception {\n  testTypes(\"\" + \"(function(s) { return ((s \u003d\u003d \u0027a\u0027) \u0026\u0026 s) || \u0027b\u0027; })\");\n}",
    "begin_line": 446,
    "end_line": 451,
    "comment": "",
    "child_ranges": [
      "(line 449,col 5)-(line 450,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction3()",
    "snippet": "public void testBooleanReduction3() throws Exception {\n  testTypes(\"\" + \"(function(s) { return s \u0026\u0026 null \u0026\u0026 3; })\");\n}",
    "begin_line": 453,
    "end_line": 456,
    "comment": "",
    "child_ranges": [
      "(line 454,col 5)-(line 455,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction4()",
    "snippet": "public void testBooleanReduction4() throws Exception {\n  testTypes(\"\" + \"(function(x) { return null || x || null ; })\");\n}",
    "begin_line": 458,
    "end_line": 461,
    "comment": "",
    "child_ranges": [
      "(line 459,col 5)-(line 460,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction5()",
    "snippet": "public void testBooleanReduction5() throws Exception {\n  testTypes(\"\\n\"+ \"var f \u003d function(x) {\\n\"+ \"if (!x || typeof x \u003d\u003d \u0027string\u0027) {\\n\"+ \"return x;\\n\"+ \"}\\n\"+ \"return null;\\n\"+ \"};\");\n}",
    "begin_line": 463,
    "end_line": 474,
    "comment": "",
    "child_ranges": [
      "(line 464,col 5)-(line 473,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction6()",
    "snippet": "public void testBooleanReduction6() throws Exception {\n  testTypes(\"\\n\"+ \"var f \u003d function(x) {\\n\"+ \"if (!(x \u0026\u0026 typeof x !\u003d \u0027string\u0027)) {\\n\"+ \"return x;\\n\"+ \"}\\n\"+ \"return null;\\n\"+ \"};\");\n}",
    "begin_line": 476,
    "end_line": 487,
    "comment": "",
    "child_ranges": [
      "(line 477,col 5)-(line 486,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanReduction7()",
    "snippet": "public void testBooleanReduction7() throws Exception {\n  testTypes(\"var T \u003d function() {};\\n\" + \"\\n\"+ \"var f \u003d function(x) {\\n\"+ \"if (!x) {\\n\"+ \"return x;\\n\"+ \"}\\n\"+ \"return null;\\n\"+ \"};\");\n}",
    "begin_line": 489,
    "end_line": 501,
    "comment": "",
    "child_ranges": [
      "(line 490,col 5)-(line 500,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNullAnd()",
    "snippet": "public void testNullAnd() throws Exception {\n  testTypes(\"var x;\\n\" + \"var r \u003d x \u0026\u0026 x;\",\"initializing variable\\n\" + \"found   : null\\n\" + \"required: number\");\n}",
    "begin_line": 503,
    "end_line": 509,
    "comment": "",
    "child_ranges": [
      "(line 504,col 5)-(line 508,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNullOr()",
    "snippet": "public void testNullOr() throws Exception {\n  testTypes(\"var x;\\n\" + \"var r \u003d x || x;\",\"initializing variable\\n\" + \"found   : null\\n\" + \"required: number\");\n}",
    "begin_line": 511,
    "end_line": 517,
    "comment": "",
    "child_ranges": [
      "(line 512,col 5)-(line 516,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanPreservation1()",
    "snippet": "public void testBooleanPreservation1() throws Exception {\n  testTypes(\"var x \u003d \\\"a\\\";\" + \"x \u003d ((x \u003d\u003d \\\"a\\\") \u0026\u0026 x) || x \u003d\u003d \\\"b\\\";\",\"assignment\\n\" + \"found   : (boolean|string)\\n\" + \"required: string\");\n}",
    "begin_line": 519,
    "end_line": 525,
    "comment": "",
    "child_ranges": [
      "(line 520,col 5)-(line 524,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanPreservation2()",
    "snippet": "public void testBooleanPreservation2() throws Exception {\n  testTypes(\"var x \u003d \\\"a\\\"; x \u003d (x \u003d\u003d \\\"a\\\") || x;\",\"assignment\\n\" + \"found   : (boolean|string)\\n\" + \"required: string\");\n}",
    "begin_line": 527,
    "end_line": 532,
    "comment": "",
    "child_ranges": [
      "(line 528,col 5)-(line 531,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanPreservation3()",
    "snippet": "public void testBooleanPreservation3() throws Exception {\n  testTypes(\"\" + \"function f(x) { return x \u0026\u0026 x \u003d\u003d \\\"a\\\"; }\",\"condition always evaluates to false\\n\" + \"left : Function\\n\" + \"right: string\");\n}",
    "begin_line": 534,
    "end_line": 540,
    "comment": "",
    "child_ranges": [
      "(line 535,col 5)-(line 539,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanPreservation4()",
    "snippet": "public void testBooleanPreservation4() throws Exception {\n  testTypes(\"\" + \"function f(x) { return x \u0026\u0026 x \u003d\u003d \\\"a\\\"; }\",\"inconsistent return type\\n\" + \"found   : (boolean|null)\\n\" + \"required: boolean\");\n}",
    "begin_line": 542,
    "end_line": 548,
    "comment": "",
    "child_ranges": [
      "(line 543,col 5)-(line 547,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction1()",
    "snippet": "public void testTypeOfReduction1() throws Exception {\n  testTypes(\" \" + \"function f(x) { return typeof x \u003d\u003d \u0027number\u0027 ? String(x) : x; }\");\n}",
    "begin_line": 550,
    "end_line": 553,
    "comment": "",
    "child_ranges": [
      "(line 551,col 5)-(line 552,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction2()",
    "snippet": "public void testTypeOfReduction2() throws Exception {\n  testTypes(\" \" + \"function f(x) { return typeof x !\u003d \u0027string\u0027 ? String(x) : x; }\");\n}",
    "begin_line": 555,
    "end_line": 558,
    "comment": "",
    "child_ranges": [
      "(line 556,col 5)-(line 557,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction3()",
    "snippet": "public void testTypeOfReduction3() throws Exception {\n  testTypes(\" \" + \"function f(x) { return typeof x \u003d\u003d \u0027object\u0027 ? 1 : x; }\");\n}",
    "begin_line": 560,
    "end_line": 563,
    "comment": "",
    "child_ranges": [
      "(line 561,col 5)-(line 562,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction4()",
    "snippet": "public void testTypeOfReduction4() throws Exception {\n  testTypes(\" \" + \"function f(x) { return typeof x \u003d\u003d \u0027undefined\u0027 ? {} : x; }\");\n}",
    "begin_line": 565,
    "end_line": 568,
    "comment": "",
    "child_ranges": [
      "(line 566,col 5)-(line 567,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction5()",
    "snippet": "public void testTypeOfReduction5() throws Exception {\n  testTypes(\" var E \u003d {A: \u0027a\u0027, B: \u0027b\u0027};\\n\" + \" \" + \"function f(x) { return typeof x !\u003d \u0027number\u0027 ? x : \u0027a\u0027; }\");\n}",
    "begin_line": 570,
    "end_line": 574,
    "comment": "",
    "child_ranges": [
      "(line 571,col 5)-(line 573,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction6()",
    "snippet": "public void testTypeOfReduction6() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) {\\n\" + \"return typeof x \u003d\u003d \u0027string\u0027 \u0026\u0026 x.length \u003d\u003d 3 ? x : \u0027a\u0027;\\n\"+ \"}\");\n}",
    "begin_line": 576,
    "end_line": 581,
    "comment": "",
    "child_ranges": [
      "(line 577,col 5)-(line 580,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction7()",
    "snippet": "public void testTypeOfReduction7() throws Exception {\n  testTypes(\"var f \u003d function(x) { \" + \"return typeof x \u003d\u003d \u0027number\u0027 ? x : \u0027a\u0027; }\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 583,
    "end_line": 589,
    "comment": "",
    "child_ranges": [
      "(line 584,col 5)-(line 588,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction8()",
    "snippet": "public void testTypeOfReduction8() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\\n\" + \"function f(x) {\\n\"+ \"return goog.isString(x) \u0026\u0026 x.length \u003d\u003d 3 ? x : \u0027a\u0027;\\n\"+ \"}\",null);\n}",
    "begin_line": 591,
    "end_line": 598,
    "comment": "",
    "child_ranges": [
      "(line 592,col 5)-(line 597,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction9()",
    "snippet": "public void testTypeOfReduction9() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\\n\" + \"function f(x) {\\n\"+ \"return goog.isArray(x) ? \u0027a\u0027 : x;\\n\"+ \"}\",null);\n}",
    "begin_line": 600,
    "end_line": 607,
    "comment": "",
    "child_ranges": [
      "(line 601,col 5)-(line 606,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction10()",
    "snippet": "public void testTypeOfReduction10() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\\n\" + \"function f(x) {\\n\"+ \"return goog.isArray(x) ? x : [];\\n\"+ \"}\",null);\n}",
    "begin_line": 609,
    "end_line": 616,
    "comment": "",
    "child_ranges": [
      "(line 610,col 5)-(line 615,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction11()",
    "snippet": "public void testTypeOfReduction11() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\\n\" + \"function f(x) {\\n\"+ \"return goog.isObject(x) ? x : [];\\n\"+ \"}\",null);\n}",
    "begin_line": 618,
    "end_line": 625,
    "comment": "",
    "child_ranges": [
      "(line 619,col 5)-(line 624,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction12()",
    "snippet": "public void testTypeOfReduction12() throws Exception {\n  testTypes(\" var E \u003d {A: \u0027a\u0027, B: \u0027b\u0027};\\n\" + \" \" + \"function f(x) { return typeof x \u003d\u003d \u0027object\u0027 ? x : []; }\");\n}",
    "begin_line": 627,
    "end_line": 631,
    "comment": "",
    "child_ranges": [
      "(line 628,col 5)-(line 630,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction13()",
    "snippet": "public void testTypeOfReduction13() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" var E \u003d {A: \u0027a\u0027, B: \u0027b\u0027};\\n\" + \" \"+ \"function f(x) { return goog.isObject(x) ? x : []; }\",null);\n}",
    "begin_line": 633,
    "end_line": 639,
    "comment": "",
    "child_ranges": [
      "(line 634,col 5)-(line 638,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction14()",
    "snippet": "public void testTypeOfReduction14() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"function f(x) { \" + \"  return goog.isString(arguments[0]) ? arguments[0] : 0;\"+ \"}\",null);\n}",
    "begin_line": 641,
    "end_line": 648,
    "comment": "",
    "child_ranges": [
      "(line 643,col 5)-(line 647,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction15()",
    "snippet": "public void testTypeOfReduction15() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"function f(x) { \" + \"  return typeof arguments[0] \u003d\u003d \u0027string\u0027 ? arguments[0] : 0;\"+ \"}\",null);\n}",
    "begin_line": 650,
    "end_line": 657,
    "comment": "",
    "child_ranges": [
      "(line 652,col 5)-(line 656,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeOfReduction16()",
    "snippet": "public void testTypeOfReduction16() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" function I() {}\\n\" + \"\\n\"+ \"function f(x) { \"+ \"  if(goog.isObject(x)) {\"+ \"    return (x);\"+ \"  }\"+ \"  return null;\"+ \"}\",null);\n}",
    "begin_line": 659,
    "end_line": 673,
    "comment": "",
    "child_ranges": [
      "(line 660,col 5)-(line 672,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction1()",
    "snippet": "public void testQualifiedNameReduction1() throws Exception {\n  testTypes(\"var x \u003d {};  x.a \u003d \u0027a\u0027;\\n\" + \" var f \u003d function() {\\n\" + \"return x.a ? x.a : \u0027a\u0027; }\");\n}",
    "begin_line": 675,
    "end_line": 679,
    "comment": "",
    "child_ranges": [
      "(line 676,col 5)-(line 678,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction2()",
    "snippet": "public void testQualifiedNameReduction2() throws Exception {\n  testTypes(\" var T \u003d \" + \"function(a) {this.a \u003d a};\\n\" + \" T.prototype.f \u003d function() {\\n\"+ \"return this.a ? this.a : \u0027a\u0027; }\");\n}",
    "begin_line": 681,
    "end_line": 686,
    "comment": "",
    "child_ranges": [
      "(line 682,col 5)-(line 685,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction3()",
    "snippet": "public void testQualifiedNameReduction3() throws Exception {\n  testTypes(\" var T \u003d \" + \"function(a) {this.a \u003d a};\\n\" + \" T.prototype.f \u003d function() {\\n\"+ \"return typeof this.a \u003d\u003d \u0027string\u0027 ? this.a : \u0027a\u0027; }\");\n}",
    "begin_line": 688,
    "end_line": 693,
    "comment": "",
    "child_ranges": [
      "(line 689,col 5)-(line 692,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction4()",
    "snippet": "public void testQualifiedNameReduction4() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" var T \u003d \" + \"function(a) {this.a \u003d a};\\n\"+ \" T.prototype.f \u003d function() {\\n\"+ \"return goog.isString(this.a) ? this.a : \u0027a\u0027; }\",null);\n}",
    "begin_line": 695,
    "end_line": 702,
    "comment": "",
    "child_ranges": [
      "(line 696,col 5)-(line 701,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction5a()",
    "snippet": "public void testQualifiedNameReduction5a() throws Exception {\n  testTypes(\"var x \u003d { a:\u0027b\u0027 };\\n\" + \" var f \u003d function() {\\n\" + \"return x.a; }\");\n}",
    "begin_line": 704,
    "end_line": 708,
    "comment": "",
    "child_ranges": [
      "(line 705,col 5)-(line 707,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction5b()",
    "snippet": "public void testQualifiedNameReduction5b() throws Exception {\n  testTypes(\"var x \u003d { a:12 };\\n\" + \"\\n\" + \"var f \u003d function() {\\n\"+ \"  return x.a;\\n\"+ \"}\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 710,
    "end_line": 720,
    "comment": "",
    "child_ranges": [
      "(line 711,col 5)-(line 719,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction5c()",
    "snippet": "public void testQualifiedNameReduction5c() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d { a:0 };\\n\" + \"return (x.a) ? (x.a) : \u0027a\u0027; }\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 722,
    "end_line": 730,
    "comment": "",
    "child_ranges": [
      "(line 723,col 5)-(line 729,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction6()",
    "snippet": "public void testQualifiedNameReduction6() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d { get a() {return \u0027a\u0027}};\\n\" + \"return x.a ? x.a : \u0027a\u0027; }\");\n}",
    "begin_line": 732,
    "end_line": 737,
    "comment": "",
    "child_ranges": [
      "(line 733,col 5)-(line 736,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction7()",
    "snippet": "public void testQualifiedNameReduction7() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d { get a() {return 12}};\\n\" + \"return x.a; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 739,
    "end_line": 747,
    "comment": "",
    "child_ranges": [
      "(line 740,col 5)-(line 746,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction7a()",
    "snippet": "public void testQualifiedNameReduction7a() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d {get a() {return 12}};\\n\" + \"return x.a; }\");\n}",
    "begin_line": 749,
    "end_line": 755,
    "comment": "",
    "child_ranges": [
      "(line 751,col 5)-(line 754,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction8()",
    "snippet": "public void testQualifiedNameReduction8() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d {get a() {return \u0027a\u0027}};\\n\" + \"return x.a ? x.a : \u0027a\u0027; }\");\n}",
    "begin_line": 757,
    "end_line": 762,
    "comment": "",
    "child_ranges": [
      "(line 758,col 5)-(line 761,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction9()",
    "snippet": "public void testQualifiedNameReduction9() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d {  set a(b) {}};\\n\" + \"return x.a ? x.a : \u0027a\u0027; }\");\n}",
    "begin_line": 764,
    "end_line": 769,
    "comment": "",
    "child_ranges": [
      "(line 765,col 5)-(line 768,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameReduction10()",
    "snippet": "public void testQualifiedNameReduction10() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"var x \u003d {  set a(b) {}};\\n\" + \"return x.a ? x.a : \u0027a\u0027; }\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 771,
    "end_line": 781,
    "comment": "",
    "child_ranges": [
      "(line 774,col 5)-(line 780,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef1a()",
    "snippet": "public void testObjLitDef1a() throws Exception {\n  testTypes(\"var x \u003d { a:12 };\\n\" + \"x.a \u003d \u0027a\u0027;\",\"assignment to property a of x\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 783,
    "end_line": 790,
    "comment": "",
    "child_ranges": [
      "(line 784,col 5)-(line 789,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef1b()",
    "snippet": "public void testObjLitDef1b() throws Exception {\n  testTypes(\"function f(){\" + \"var x \u003d { a:12 };\\n\" + \"x.a \u003d \u0027a\u0027;\"+ \"};\\n\"+ \"f();\",\"assignment to property a of x\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 792,
    "end_line": 802,
    "comment": "",
    "child_ranges": [
      "(line 793,col 5)-(line 801,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef2a()",
    "snippet": "public void testObjLitDef2a() throws Exception {\n  testTypes(\"var x \u003d { set a(b){} };\\n\" + \"x.a \u003d \u0027a\u0027;\",\"assignment to property a of x\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 804,
    "end_line": 811,
    "comment": "",
    "child_ranges": [
      "(line 805,col 5)-(line 810,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef2b()",
    "snippet": "public void testObjLitDef2b() throws Exception {\n  testTypes(\"function f(){\" + \"var x \u003d { set a(b){} };\\n\" + \"x.a \u003d \u0027a\u0027;\"+ \"};\\n\"+ \"f();\",\"assignment to property a of x\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 813,
    "end_line": 823,
    "comment": "",
    "child_ranges": [
      "(line 814,col 5)-(line 822,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef3a()",
    "snippet": "public void testObjLitDef3a() throws Exception {\n  testTypes(\" var y;\\n\" + \"var x \u003d { get a(){} };\\n\" + \"y \u003d x.a;\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 825,
    "end_line": 833,
    "comment": "",
    "child_ranges": [
      "(line 826,col 5)-(line 832,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef3b()",
    "snippet": "public void testObjLitDef3b() throws Exception {\n  testTypes(\" var y;\\n\" + \"function f(){\" + \"var x \u003d { get a(){} };\\n\"+ \"y \u003d x.a;\"+ \"};\\n\"+ \"f();\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 835,
    "end_line": 846,
    "comment": "",
    "child_ranges": [
      "(line 836,col 5)-(line 845,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef4()",
    "snippet": "public void testObjLitDef4() throws Exception {\n  testTypes(\"var x \u003d {\" + \" a:12 };\\n\",\"assignment to property a of {a: function (): number}\\n\" + \"found   : number\\n\" + \"required: function (): number\");\n}",
    "begin_line": 848,
    "end_line": 855,
    "comment": "",
    "child_ranges": [
      "(line 849,col 5)-(line 854,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef5()",
    "snippet": "public void testObjLitDef5() throws Exception {\n  testTypes(\"var x \u003d {};\\n\" + \" x.a \u003d 12;\\n\",\"assignment to property a of x\\n\" + \"found   : number\\n\" + \"required: function (): number\");\n}",
    "begin_line": 857,
    "end_line": 864,
    "comment": "",
    "child_ranges": [
      "(line 858,col 5)-(line 863,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef6()",
    "snippet": "public void testObjLitDef6() throws Exception {\n  testTypes(\"var lit \u003d  { \u0027x\u0027: 1 };\",\"Illegal key, the object literal is a struct\");\n}",
    "begin_line": 866,
    "end_line": 869,
    "comment": "",
    "child_ranges": [
      "(line 867,col 5)-(line 868,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjLitDef7()",
    "snippet": "public void testObjLitDef7() throws Exception {\n  testTypes(\"var lit \u003d  { x: 1 };\",\"Illegal key, the object literal is a dict\");\n}",
    "begin_line": 871,
    "end_line": 874,
    "comment": "",
    "child_ranges": [
      "(line 872,col 5)-(line 873,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceOfReduction1()",
    "snippet": "public void testInstanceOfReduction1() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \"\\n\" + \"var f \u003d function(x) {\\n\"+ \"if (x instanceof T) { return x; } else { return new T(); }\\n\"+ \"};\");\n}",
    "begin_line": 876,
    "end_line": 882,
    "comment": "",
    "child_ranges": [
      "(line 877,col 5)-(line 881,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceOfReduction2()",
    "snippet": "public void testInstanceOfReduction2() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \"\\n\" + \"var f \u003d function(x) {\\n\"+ \"if (x instanceof T) { return \u0027\u0027; } else { return x; }\\n\"+ \"};\");\n}",
    "begin_line": 884,
    "end_line": 890,
    "comment": "",
    "child_ranges": [
      "(line 885,col 5)-(line 889,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty1()",
    "snippet": "public void testUndeclaredGlobalProperty1() throws Exception {\n  testTypes(\" var x \u003d {}; x.y \u003d null;\" + \"function f(a) { x.y \u003d a; }\" + \" function g(a) { }\"+ \"function h() { g(x.y); }\");\n}",
    "begin_line": 892,
    "end_line": 897,
    "comment": "",
    "child_ranges": [
      "(line 893,col 5)-(line 896,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUndeclaredGlobalProperty2()",
    "snippet": "public void testUndeclaredGlobalProperty2() throws Exception {\n  testTypes(\" var x \u003d {}; x.y \u003d null;\" + \"function f() { x.y \u003d 3; }\" + \" function g(a) { }\"+ \"function h() { g(x.y); }\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : (null|number)\\n\" + \"required: string\");\n}",
    "begin_line": 899,
    "end_line": 907,
    "comment": "",
    "child_ranges": [
      "(line 900,col 5)-(line 906,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLocallyInferredGlobalProperty1()",
    "snippet": "public void testLocallyInferredGlobalProperty1() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.z;\" + \" var x \u003d {};  x.y;\"+ \"function f() { x.y.z \u003d \u0027abc\u0027; }\"+ \" function g(x) {}\"+ \"function h() { g(x.y.z); }\",\"assignment to property z of F\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 909,
    "end_line": 921,
    "comment": "",
    "child_ranges": [
      "(line 911,col 5)-(line 920,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInferredPropagation()",
    "snippet": "public void testPropertyInferredPropagation() throws Exception {\n  testTypes(\"function f() { return {}; }\\n\" + \"function g() { var x \u003d f(); if (x.p) x.a \u003d \u0027a\u0027; else x.a \u003d \u0027b\u0027; }\\n\" + \"function h() { var x \u003d f(); x.a \u003d false; }\");\n}",
    "begin_line": 923,
    "end_line": 927,
    "comment": "",
    "child_ranges": [
      "(line 924,col 5)-(line 926,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference1()",
    "snippet": "public void testPropertyInference1() throws Exception {\n  testTypes(\" function F() { this.x_ \u003d true; }\" + \"\" + \"F.prototype.bar \u003d function() { if (this.x_) return this.x_; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 929,
    "end_line": 937,
    "comment": "",
    "child_ranges": [
      "(line 930,col 5)-(line 936,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference2()",
    "snippet": "public void testPropertyInference2() throws Exception {\n  testTypes(\" function F() { this.x_ \u003d true; }\" + \"F.prototype.baz \u003d function() { this.x_ \u003d null; };\" + \"\"+ \"F.prototype.bar \u003d function() { if (this.x_) return this.x_; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 939,
    "end_line": 948,
    "comment": "",
    "child_ranges": [
      "(line 940,col 5)-(line 947,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference3()",
    "snippet": "public void testPropertyInference3() throws Exception {\n  testTypes(\" function F() { this.x_ \u003d true; }\" + \"F.prototype.baz \u003d function() { this.x_ \u003d 3; };\" + \"\"+ \"F.prototype.bar \u003d function() { if (this.x_) return this.x_; };\",\"inconsistent return type\\n\" + \"found   : (boolean|number)\\n\" + \"required: string\");\n}",
    "begin_line": 950,
    "end_line": 959,
    "comment": "",
    "child_ranges": [
      "(line 951,col 5)-(line 958,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference4()",
    "snippet": "public void testPropertyInference4() throws Exception {\n  testTypes(\" function F() { }\" + \"F.prototype.x_ \u003d 3;\" + \"\"+ \"F.prototype.bar \u003d function() { if (this.x_) return this.x_; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 961,
    "end_line": 970,
    "comment": "",
    "child_ranges": [
      "(line 962,col 5)-(line 969,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference5()",
    "snippet": "public void testPropertyInference5() throws Exception {\n  testTypes(\" function F() { }\" + \"F.prototype.baz \u003d function() { this.x_ \u003d 3; };\" + \"\"+ \"F.prototype.bar \u003d function() { if (this.x_) return this.x_; };\");\n}",
    "begin_line": 972,
    "end_line": 978,
    "comment": "",
    "child_ranges": [
      "(line 973,col 5)-(line 977,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference6()",
    "snippet": "public void testPropertyInference6() throws Exception {\n  testTypes(\" function F() { }\" + \"(new F).x_ \u003d 3;\" + \"\"+ \"F.prototype.bar \u003d function() { return this.x_; };\");\n}",
    "begin_line": 980,
    "end_line": 986,
    "comment": "",
    "child_ranges": [
      "(line 981,col 5)-(line 985,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference7()",
    "snippet": "public void testPropertyInference7() throws Exception {\n  testTypes(\" function F() { this.x_ \u003d true; }\" + \"(new F).x_ \u003d 3;\" + \"\"+ \"F.prototype.bar \u003d function() { return this.x_; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 988,
    "end_line": 997,
    "comment": "",
    "child_ranges": [
      "(line 989,col 5)-(line 996,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference8()",
    "snippet": "public void testPropertyInference8() throws Exception {\n  testTypes(\" function F() { \" + \"   this.x_ \u003d \u0027x\u0027;\" + \"}\"+ \"(new F).x_ \u003d 3;\"+ \"\"+ \"F.prototype.bar \u003d function() { return this.x_; };\",\"assignment to property x_ of F\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 999,
    "end_line": 1010,
    "comment": "",
    "child_ranges": [
      "(line 1000,col 5)-(line 1009,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference9()",
    "snippet": "public void testPropertyInference9() throws Exception {\n  testTypes(\" function A() {}\" + \" function f() { \" + \"  return function() {};\"+ \"}\"+ \"var g \u003d f();\"+ \" g.prototype.bar_ \u003d null;\",\"assignment\\n\" + \"found   : null\\n\" + \"required: number\");\n}",
    "begin_line": 1012,
    "end_line": 1023,
    "comment": "",
    "child_ranges": [
      "(line 1013,col 5)-(line 1022,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyInference10()",
    "snippet": "public void testPropertyInference10() throws Exception {\n  testTypes(\" function A() {}\" + \" function f() { \" + \"  return function() {};\"+ \"}\"+ \"var g \u003d f();\"+ \" g.prototype.bar_ \u003d 1;\"+ \"var h \u003d f();\"+ \" h.prototype.bar_ \u003d 1;\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1025,
    "end_line": 1042,
    "comment": "",
    "child_ranges": [
      "(line 1030,col 5)-(line 1041,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForObjectProperties()",
    "snippet": "public void testNoPersistentTypeInferenceForObjectProperties() throws Exception {\n  testTypes(\"\\n\" + \"function s1(o,x) { o.x \u003d x; }\\n\" + \"\\n\"+ \"function g1(o) { return typeof o.x \u003d\u003d \u0027undefined\u0027 ? \u0027\u0027 : o.x; }\\n\"+ \"\\n\"+ \"function s2(o,x) { o.x \u003d x; }\\n\"+ \"\\n\"+ \"function g2(o) { return typeof o.x \u003d\u003d \u0027undefined\u0027 ? 0 : o.x; }\");\n}",
    "begin_line": 1044,
    "end_line": 1054,
    "comment": "",
    "child_ranges": [
      "(line 1046,col 5)-(line 1053,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoPersistentTypeInferenceForFunctionProperties()",
    "snippet": "public void testNoPersistentTypeInferenceForFunctionProperties() throws Exception {\n  testTypes(\"\\n\" + \"function s1(o,x) { o.x \u003d x; }\\n\" + \"\\n\"+ \"function g1(o) { return typeof o.x \u003d\u003d \u0027undefined\u0027 ? \u0027\u0027 : o.x; }\\n\"+ \"\\n\"+ \"function s2(o,x) { o.x \u003d x; }\\n\"+ \"\\n\"+ \"function g2(o) { return typeof o.x \u003d\u003d \u0027undefined\u0027 ? 0 : o.x; }\");\n}",
    "begin_line": 1056,
    "end_line": 1066,
    "comment": "",
    "child_ranges": [
      "(line 1058,col 5)-(line 1065,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope1()",
    "snippet": "public void testObjectPropertyTypeInferredInLocalScope1() throws Exception {\n  testTypes(\"\\n\" + \"function f(o) { o.x \u003d 1; return o.x; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1068,
    "end_line": 1074,
    "comment": "",
    "child_ranges": [
      "(line 1069,col 5)-(line 1073,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope2()",
    "snippet": "public void testObjectPropertyTypeInferredInLocalScope2() throws Exception {\n  testTypes(\"\" + \"function f(o, x) { o.x \u003d \u0027a\u0027;\\nif (x) {o.x \u003d x;}\\nreturn o.x; }\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 1076,
    "end_line": 1082,
    "comment": "",
    "child_ranges": [
      "(line 1077,col 5)-(line 1081,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectPropertyTypeInferredInLocalScope3()",
    "snippet": "public void testObjectPropertyTypeInferredInLocalScope3() throws Exception {\n  testTypes(\"\" + \"function f(o, x) { if (x) {o.x \u003d x;} else {o.x \u003d \u0027a\u0027;}\\nreturn o.x; }\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 1084,
    "end_line": 1090,
    "comment": "",
    "child_ranges": [
      "(line 1085,col 5)-(line 1089,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1()",
    "snippet": "public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty1() throws Exception {\n  testTypes(\"var T \u003d function() { this.x \u003d \u0027\u0027; };\\n\" + \" T.prototype.x \u003d 0;\",\"assignment to property x of T\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1092,
    "end_line": 1099,
    "comment": "",
    "child_ranges": [
      "(line 1094,col 5)-(line 1098,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2()",
    "snippet": "public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty2() throws Exception {\n  testTypes(\"var T \u003d function() { this.x \u003d \u0027\u0027; };\\n\" + \" T.prototype.x;\",\"assignment to property x of T\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1101,
    "end_line": 1108,
    "comment": "",
    "child_ranges": [
      "(line 1103,col 5)-(line 1107,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3()",
    "snippet": "public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty3() throws Exception {\n  testTypes(\" var n \u003d {};\\n\" + \" n.T \u003d function() { this.x \u003d \u0027\u0027; };\\n\" + \" n.T.prototype.x \u003d 0;\",\"assignment to property x of n.T\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1110,
    "end_line": 1118,
    "comment": "",
    "child_ranges": [
      "(line 1112,col 5)-(line 1117,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4()",
    "snippet": "public void testMismatchingOverridingInferredPropertyBeforeDeclaredProperty4() throws Exception {\n  testTypes(\"var n \u003d {};\\n\" + \" n.T \u003d function() { this.x \u003d \u0027\u0027; };\\n\" + \" n.T.prototype.x \u003d 0;\",\"assignment to property x of n.T\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1120,
    "end_line": 1128,
    "comment": "",
    "child_ranges": [
      "(line 1122,col 5)-(line 1127,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition1()",
    "snippet": "public void testPropertyUsedBeforeDefinition1() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \"\" + \"T.prototype.f \u003d function() { return this.g(); };\\n\"+ \" T.prototype.g \u003d function() { return 1; };\\n\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1130,
    "end_line": 1138,
    "comment": "",
    "child_ranges": [
      "(line 1131,col 5)-(line 1137,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyUsedBeforeDefinition2()",
    "snippet": "public void testPropertyUsedBeforeDefinition2() throws Exception {\n  testTypes(\"var n \u003d {};\\n\" + \" n.T \u003d function() {};\\n\" + \"\"+ \"n.T.prototype.f \u003d function() { return this.g(); };\\n\"+ \" n.T.prototype.g \u003d function() { return 1; };\\n\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1140,
    "end_line": 1149,
    "comment": "",
    "child_ranges": [
      "(line 1141,col 5)-(line 1148,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd1()",
    "snippet": "public void testAdd1() throws Exception {\n  testTypes(\"function foo(){var a \u003d \u0027abc\u0027+foo();}\");\n}",
    "begin_line": 1151,
    "end_line": 1153,
    "comment": "",
    "child_ranges": [
      "(line 1152,col 5)-(line 1152,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd2()",
    "snippet": "public void testAdd2() throws Exception {\n  testTypes(\"function foo(){var a \u003d foo()+4;}\");\n}",
    "begin_line": 1155,
    "end_line": 1157,
    "comment": "",
    "child_ranges": [
      "(line 1156,col 5)-(line 1156,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd3()",
    "snippet": "public void testAdd3() throws Exception {\n  testTypes(\" var a \u003d \u0027a\u0027;\" + \" var b \u003d \u0027b\u0027;\" + \" var c \u003d a + b;\");\n}",
    "begin_line": 1159,
    "end_line": 1163,
    "comment": "",
    "child_ranges": [
      "(line 1160,col 5)-(line 1162,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd4()",
    "snippet": "public void testAdd4() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" var b \u003d \u0027b\u0027;\" + \" var c \u003d a + b;\");\n}",
    "begin_line": 1165,
    "end_line": 1169,
    "comment": "",
    "child_ranges": [
      "(line 1166,col 5)-(line 1168,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd5()",
    "snippet": "public void testAdd5() throws Exception {\n  testTypes(\" var a \u003d \u0027a\u0027;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\");\n}",
    "begin_line": 1171,
    "end_line": 1175,
    "comment": "",
    "child_ranges": [
      "(line 1172,col 5)-(line 1174,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd6()",
    "snippet": "public void testAdd6() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\");\n}",
    "begin_line": 1177,
    "end_line": 1181,
    "comment": "",
    "child_ranges": [
      "(line 1178,col 5)-(line 1180,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd7()",
    "snippet": "public void testAdd7() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" var b \u003d \u0027b\u0027;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1183,
    "end_line": 1190,
    "comment": "",
    "child_ranges": [
      "(line 1184,col 5)-(line 1189,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd8()",
    "snippet": "public void testAdd8() throws Exception {\n  testTypes(\" var a \u003d \u0027a\u0027;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1192,
    "end_line": 1199,
    "comment": "",
    "child_ranges": [
      "(line 1193,col 5)-(line 1198,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd9()",
    "snippet": "public void testAdd9() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1201,
    "end_line": 1208,
    "comment": "",
    "child_ranges": [
      "(line 1202,col 5)-(line 1207,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd10()",
    "snippet": "public void testAdd10() throws Exception {\n  testTypes(suppressMissingProperty(\"e\",\"f\") + \" var a \u003d 5;\" + \" var c \u003d a + d.e.f;\");\n}",
    "begin_line": 1210,
    "end_line": 1216,
    "comment": "",
    "child_ranges": [
      "(line 1212,col 5)-(line 1215,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd11()",
    "snippet": "public void testAdd11() throws Exception {\n  testTypes(suppressMissingProperty(\"e\",\"f\") + \" var a \u003d 5;\" + \" var c \u003d a + d.e.f;\");\n}",
    "begin_line": 1218,
    "end_line": 1224,
    "comment": "",
    "child_ranges": [
      "(line 1220,col 5)-(line 1223,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd12()",
    "snippet": "public void testAdd12() throws Exception {\n  testTypes(\" function a() { return 5; }\" + \" var b \u003d 5;\" + \" var c \u003d a() + b;\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1226,
    "end_line": 1233,
    "comment": "",
    "child_ranges": [
      "(line 1227,col 5)-(line 1232,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd13()",
    "snippet": "public void testAdd13() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" function b() { return 5; }\" + \" var c \u003d a + b();\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1235,
    "end_line": 1242,
    "comment": "",
    "child_ranges": [
      "(line 1236,col 5)-(line 1241,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd14()",
    "snippet": "public void testAdd14() throws Exception {\n  testTypes(\" var a \u003d null;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1244,
    "end_line": 1251,
    "comment": "",
    "child_ranges": [
      "(line 1245,col 5)-(line 1250,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd15()",
    "snippet": "public void testAdd15() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" function b() { return 5; }\" + \" var c \u003d a + b();\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1253,
    "end_line": 1260,
    "comment": "",
    "child_ranges": [
      "(line 1254,col 5)-(line 1259,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd16()",
    "snippet": "public void testAdd16() throws Exception {\n  testTypes(\" var a \u003d undefined;\" + \" var b \u003d 5;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1262,
    "end_line": 1269,
    "comment": "",
    "child_ranges": [
      "(line 1263,col 5)-(line 1268,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd17()",
    "snippet": "public void testAdd17() throws Exception {\n  testTypes(\" var a \u003d 5;\" + \" var b \u003d undefined;\" + \" var c \u003d a + b;\",\"initializing variable\\n\" + \"found   : (number|string)\\n\" + \"required: boolean\");\n}",
    "begin_line": 1271,
    "end_line": 1278,
    "comment": "",
    "child_ranges": [
      "(line 1272,col 5)-(line 1277,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd18()",
    "snippet": "public void testAdd18() throws Exception {\n  testTypes(\"function f() {};\" + \" var a \u003d \u0027a\u0027;\" + \" var c \u003d a + f();\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1280,
    "end_line": 1287,
    "comment": "",
    "child_ranges": [
      "(line 1281,col 5)-(line 1286,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd19()",
    "snippet": "public void testAdd19() throws Exception {\n  testTypes(\" function f(opt_x, opt_y) {\" + \"return opt_x + opt_y;}\");\n}",
    "begin_line": 1289,
    "end_line": 1293,
    "comment": "",
    "child_ranges": [
      "(line 1290,col 5)-(line 1292,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd20()",
    "snippet": "public void testAdd20() throws Exception {\n  testTypes(\" function f(opt_x, opt_y) {\" + \"return opt_x + opt_y;}\");\n}",
    "begin_line": 1295,
    "end_line": 1299,
    "comment": "",
    "child_ranges": [
      "(line 1296,col 5)-(line 1298,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAdd21()",
    "snippet": "public void testAdd21() throws Exception {\n  testTypes(\" function f(opt_x, opt_y) {\"+ \"return opt_x + opt_y;}\");\n}",
    "begin_line": 1301,
    "end_line": 1306,
    "comment": "",
    "child_ranges": [
      "(line 1302,col 5)-(line 1305,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison1()",
    "snippet": "public void testNumericComparison1() throws Exception {\n  testTypes(\" function f(a) {return a \u003c 3;}\");\n}",
    "begin_line": 1308,
    "end_line": 1310,
    "comment": "",
    "child_ranges": [
      "(line 1309,col 5)-(line 1309,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison2()",
    "snippet": "public void testNumericComparison2() throws Exception {\n  testTypes(\" function f(a) {return a \u003c 3;}\",\"left side of numeric comparison\\n\" + \"found   : Object\\n\" + \"required: number\");\n}",
    "begin_line": 1312,
    "end_line": 1317,
    "comment": "",
    "child_ranges": [
      "(line 1313,col 5)-(line 1316,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison3()",
    "snippet": "public void testNumericComparison3() throws Exception {\n  testTypes(\" function f(a) {return a \u003c 3;}\");\n}",
    "begin_line": 1319,
    "end_line": 1321,
    "comment": "",
    "child_ranges": [
      "(line 1320,col 5)-(line 1320,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison4()",
    "snippet": "public void testNumericComparison4() throws Exception {\n  testTypes(\" \" + \"function f(a) {return a \u003c 3;}\");\n}",
    "begin_line": 1323,
    "end_line": 1326,
    "comment": "",
    "child_ranges": [
      "(line 1324,col 5)-(line 1325,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison5()",
    "snippet": "public void testNumericComparison5() throws Exception {\n  testTypes(\" function f(a) {return a \u003c 3;}\",\"left side of numeric comparison\\n\" + \"found   : *\\n\" + \"required: number\");\n}",
    "begin_line": 1328,
    "end_line": 1333,
    "comment": "",
    "child_ranges": [
      "(line 1329,col 5)-(line 1332,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumericComparison6()",
    "snippet": "public void testNumericComparison6() throws Exception {\n  testTypes(\" function foo() { if (3 \u003e\u003d foo()) return; }\",\"right side of numeric comparison\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 1335,
    "end_line": 1340,
    "comment": "",
    "child_ranges": [
      "(line 1336,col 5)-(line 1339,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison1()",
    "snippet": "public void testStringComparison1() throws Exception {\n  testTypes(\" function f(a) {return a \u003c \u0027x\u0027;}\");\n}",
    "begin_line": 1342,
    "end_line": 1344,
    "comment": "",
    "child_ranges": [
      "(line 1343,col 5)-(line 1343,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison2()",
    "snippet": "public void testStringComparison2() throws Exception {\n  testTypes(\" function f(a) {return a \u003c \u0027x\u0027;}\");\n}",
    "begin_line": 1346,
    "end_line": 1348,
    "comment": "",
    "child_ranges": [
      "(line 1347,col 5)-(line 1347,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison3()",
    "snippet": "public void testStringComparison3() throws Exception {\n  testTypes(\" function f(a) {return a \u003c \u0027x\u0027;}\");\n}",
    "begin_line": 1350,
    "end_line": 1352,
    "comment": "",
    "child_ranges": [
      "(line 1351,col 5)-(line 1351,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison4()",
    "snippet": "public void testStringComparison4() throws Exception {\n  testTypes(\" \" + \"function f(a) {return a \u003c \u0027x\u0027;}\");\n}",
    "begin_line": 1354,
    "end_line": 1357,
    "comment": "",
    "child_ranges": [
      "(line 1355,col 5)-(line 1356,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison5()",
    "snippet": "public void testStringComparison5() throws Exception {\n  testTypes(\" \" + \"function f(a) {return a \u003c \u0027x\u0027;}\");\n}",
    "begin_line": 1359,
    "end_line": 1362,
    "comment": "",
    "child_ranges": [
      "(line 1360,col 5)-(line 1361,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringComparison6()",
    "snippet": "public void testStringComparison6() throws Exception {\n  testTypes(\" \" + \"function foo() { if (\u0027a\u0027 \u003e\u003d foo()) return; }\",\"right side of comparison\\n\" + \"found   : undefined\\n\" + \"required: string\");\n}",
    "begin_line": 1364,
    "end_line": 1370,
    "comment": "",
    "child_ranges": [
      "(line 1365,col 5)-(line 1369,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testValueOfComparison1()",
    "snippet": "public void testValueOfComparison1() throws Exception {\n  testTypes(\"function O() {};\" + \"O.prototype.valueOf \u003d function() { return 1; };\" + \" function f(a,b) { return a \u003c b; }\");\n}",
    "begin_line": 1372,
    "end_line": 1376,
    "comment": "",
    "child_ranges": [
      "(line 1373,col 5)-(line 1375,col 79)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testValueOfComparison2()",
    "snippet": "public void testValueOfComparison2() throws Exception {\n  testTypes(\"function O() {};\" + \"O.prototype.valueOf \u003d function() { return 1; };\" + \"\"+ \"function f(a,b) { return a \u003c b; }\");\n}",
    "begin_line": 1378,
    "end_line": 1383,
    "comment": "",
    "child_ranges": [
      "(line 1379,col 5)-(line 1382,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testValueOfComparison3()",
    "snippet": "public void testValueOfComparison3() throws Exception {\n  testTypes(\"function O() {};\" + \"O.prototype.toString \u003d function() { return \u0027o\u0027; };\" + \"\"+ \"function f(a,b) { return a \u003c b; }\");\n}",
    "begin_line": 1385,
    "end_line": 1390,
    "comment": "",
    "child_ranges": [
      "(line 1386,col 5)-(line 1389,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGenericRelationalExpression()",
    "snippet": "public void testGenericRelationalExpression() throws Exception {\n  testTypes(\" \" + \"function f(a,b) {return a \u003c b;}\");\n}",
    "begin_line": 1392,
    "end_line": 1395,
    "comment": "",
    "child_ranges": [
      "(line 1393,col 5)-(line 1394,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof1()",
    "snippet": "public void testInstanceof1() throws Exception {\n  testTypes(\"function foo(){\" + \"if (bar instanceof 3)return;}\",\"instanceof requires an object\\n\" + \"found   : number\\n\" + \"required: Object\");\n}",
    "begin_line": 1397,
    "end_line": 1403,
    "comment": "",
    "child_ranges": [
      "(line 1398,col 5)-(line 1402,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof2()",
    "snippet": "public void testInstanceof2() throws Exception {\n  testTypes(\"function foo(){\" + \"if (foo() instanceof Object)return;}\",\"deterministic instanceof yields false\\n\" + \"found   : undefined\\n\" + \"required: NoObject\");\n}",
    "begin_line": 1405,
    "end_line": 1411,
    "comment": "",
    "child_ranges": [
      "(line 1406,col 5)-(line 1410,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof3()",
    "snippet": "public void testInstanceof3() throws Exception {\n  testTypes(\"function foo(){\" + \"if (foo() instanceof Object)return;}\");\n}",
    "begin_line": 1413,
    "end_line": 1416,
    "comment": "",
    "child_ranges": [
      "(line 1414,col 5)-(line 1415,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof4()",
    "snippet": "public void testInstanceof4() throws Exception {\n  testTypes(\"function foo(){\" + \"if (foo() instanceof Object)return 3;}\");\n}",
    "begin_line": 1418,
    "end_line": 1421,
    "comment": "",
    "child_ranges": [
      "(line 1419,col 5)-(line 1420,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof5()",
    "snippet": "public void testInstanceof5() throws Exception {\n  testTypes(\" function foo(){\" + \"if (foo() instanceof Object)return;}\");\n}",
    "begin_line": 1423,
    "end_line": 1427,
    "comment": "",
    "child_ranges": [
      "(line 1425,col 5)-(line 1426,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceof6()",
    "snippet": "public void testInstanceof6() throws Exception {\n  testTypes(\"function foo(){\" + \"if (foo() instanceof Object)return 3;}\");\n}",
    "begin_line": 1429,
    "end_line": 1432,
    "comment": "",
    "child_ranges": [
      "(line 1430,col 5)-(line 1431,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInstanceOfReduction3()",
    "snippet": "public void testInstanceOfReduction3() throws Exception {\n  testTypes(\"\\n\"+ \"var f \u003d function(x, y) {\\n\"+ \"  return x instanceof y;\\n\"+ \"};\");\n}",
    "begin_line": 1434,
    "end_line": 1444,
    "comment": "",
    "child_ranges": [
      "(line 1435,col 5)-(line 1443,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping1()",
    "snippet": "public void testScoping1() throws Exception {\n  testTypes(\"function foo(a){\" + \"  function bar(a){\" + \"    if (a instanceof Array)return;\"+ \"  }\"+ \"}\");\n}",
    "begin_line": 1446,
    "end_line": 1453,
    "comment": "",
    "child_ranges": [
      "(line 1447,col 5)-(line 1452,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping2()",
    "snippet": "public void testScoping2() throws Exception {\n  testTypes(\" var a;\" + \"function Foo() {\" + \"   var a;\"+ \"}\");\n}",
    "begin_line": 1455,
    "end_line": 1461,
    "comment": "",
    "child_ranges": [
      "(line 1456,col 5)-(line 1460,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping3()",
    "snippet": "public void testScoping3() throws Exception {\n  testTypes(\"\\n\\nvar b;\\nvar b;\",\"variable b redefined with type String, original \" + \"definition at [testcode]:3 with type (Number|null)\");\n}",
    "begin_line": 1463,
    "end_line": 1467,
    "comment": "",
    "child_ranges": [
      "(line 1464,col 5)-(line 1466,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping4()",
    "snippet": "public void testScoping4() throws Exception {\n  testTypes(\"var b; if (true) var b;\",\"variable b redefined with type String, original \" + \"definition at [testcode]:1 with type (Number|null)\");\n}",
    "begin_line": 1469,
    "end_line": 1473,
    "comment": "",
    "child_ranges": [
      "(line 1470,col 5)-(line 1472,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping5()",
    "snippet": "public void testScoping5() throws Exception {\n  testTypes(\"if (true) var b; var b;\");\n}",
    "begin_line": 1475,
    "end_line": 1479,
    "comment": "",
    "child_ranges": [
      "(line 1478,col 5)-(line 1478,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping6()",
    "snippet": "public void testScoping6() throws Exception {\n  testTypes(\"if (true) var b; if (true) var b;\");\n}",
    "begin_line": 1481,
    "end_line": 1485,
    "comment": "",
    "child_ranges": [
      "(line 1484,col 5)-(line 1484,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping7()",
    "snippet": "public void testScoping7() throws Exception {\n  testTypes(\"function A() {\" + \"  this.a \u003d null;\" + \"}\",\"assignment to property a of A\\n\" + \"found   : null\\n\" + \"required: A\");\n}",
    "begin_line": 1487,
    "end_line": 1494,
    "comment": "",
    "child_ranges": [
      "(line 1488,col 5)-(line 1493,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping8()",
    "snippet": "public void testScoping8() throws Exception {\n  testTypes(\"function A() {}\" + \"function B() {\" + \"  this.a \u003d null;\"+ \"}\",\"assignment to property a of B\\n\" + \"found   : null\\n\" + \"required: A\");\n}",
    "begin_line": 1496,
    "end_line": 1504,
    "comment": "",
    "child_ranges": [
      "(line 1497,col 5)-(line 1503,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping9()",
    "snippet": "public void testScoping9() throws Exception {\n  testTypes(\"function B() {\" + \"  this.a \u003d null;\" + \"}\"+ \"function A() {}\",\"assignment to property a of B\\n\" + \"found   : null\\n\" + \"required: A\");\n}",
    "begin_line": 1506,
    "end_line": 1514,
    "comment": "",
    "child_ranges": [
      "(line 1507,col 5)-(line 1513,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping10()",
    "snippet": "public void testScoping10() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var a \u003d function b(){};\");\n  assertTrue(p.scope.isDeclared(\"a\",false));\n  assertFalse(p.scope.isDeclared(\"b\",false));\n  assertEquals(\"function (): undefined\",p.scope.getVar(\"a\").getType().toString());\n}",
    "begin_line": 1516,
    "end_line": 1526,
    "comment": "",
    "child_ranges": [
      "(line 1517,col 5)-(line 1517,col 78)",
      "(line 1520,col 5)-(line 1520,col 47)",
      "(line 1521,col 5)-(line 1521,col 48)",
      "(line 1524,col 5)-(line 1525,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping11()",
    "snippet": "public void testScoping11() throws Exception {\n  testTypes(\"var a \u003d function b(){ return b };\",\"inconsistent return type\\n\" + \"found   : function (): number\\n\" + \"required: number\");\n}",
    "begin_line": 1528,
    "end_line": 1536,
    "comment": "",
    "child_ranges": [
      "(line 1531,col 5)-(line 1535,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScoping12()",
    "snippet": "public void testScoping12() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.bar \u003d 3;\" + \" function g(f) {\"+ \"  \"+ \"  function h() {\"+ \"    return f.bar;\"+ \"  }\"+ \"}\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1538,
    "end_line": 1551,
    "comment": "",
    "child_ranges": [
      "(line 1539,col 5)-(line 1550,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments1()",
    "snippet": "public void testFunctionArguments1() throws Exception {\n  testFunctionType(\"\" + \"function f(a) {}\",\"function (number): string\");\n}",
    "begin_line": 1553,
    "end_line": 1558,
    "comment": "",
    "child_ranges": [
      "(line 1554,col 5)-(line 1557,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments2()",
    "snippet": "public void testFunctionArguments2() throws Exception {\n  testFunctionType(\"\" + \"function f(opt_a) {}\",\"function (number\u003d): string\");\n}",
    "begin_line": 1560,
    "end_line": 1565,
    "comment": "",
    "child_ranges": [
      "(line 1561,col 5)-(line 1564,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments3()",
    "snippet": "public void testFunctionArguments3() throws Exception {\n  testFunctionType(\"\" + \"function f(a,b) {}\",\"function (?, number): string\");\n}",
    "begin_line": 1567,
    "end_line": 1572,
    "comment": "",
    "child_ranges": [
      "(line 1568,col 5)-(line 1571,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments4()",
    "snippet": "public void testFunctionArguments4() throws Exception {\n  testFunctionType(\"\" + \"function f(a,opt_a) {}\",\"function (?, number\u003d): string\");\n}",
    "begin_line": 1574,
    "end_line": 1579,
    "comment": "",
    "child_ranges": [
      "(line 1575,col 5)-(line 1578,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments5()",
    "snippet": "public void testFunctionArguments5() throws Exception {\n  testTypes(\"function a(opt_a,a) {}\",\"optional arguments must be at the end\");\n}",
    "begin_line": 1581,
    "end_line": 1585,
    "comment": "",
    "child_ranges": [
      "(line 1582,col 5)-(line 1584,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments6()",
    "snippet": "public void testFunctionArguments6() throws Exception {\n  testTypes(\"function a(var_args,a) {}\",\"variable length argument must be last\");\n}",
    "begin_line": 1587,
    "end_line": 1591,
    "comment": "",
    "child_ranges": [
      "(line 1588,col 5)-(line 1590,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments7()",
    "snippet": "public void testFunctionArguments7() throws Exception {\n  testTypes(\"\" + \"function a(a,opt_a,var_args) {}\");\n}",
    "begin_line": 1593,
    "end_line": 1597,
    "comment": "",
    "child_ranges": [
      "(line 1594,col 5)-(line 1596,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments8()",
    "snippet": "public void testFunctionArguments8() throws Exception {\n  testTypes(\"function a(a,opt_a,var_args,b) {}\",\"variable length argument must be last\");\n}",
    "begin_line": 1599,
    "end_line": 1603,
    "comment": "",
    "child_ranges": [
      "(line 1600,col 5)-(line 1602,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments9()",
    "snippet": "public void testFunctionArguments9() throws Exception {\n  testTypes(\"function a(a,opt_a,var_args,b,c) {}\",\"variable length argument must be last\");\n}",
    "begin_line": 1605,
    "end_line": 1610,
    "comment": "",
    "child_ranges": [
      "(line 1607,col 5)-(line 1609,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments10()",
    "snippet": "public void testFunctionArguments10() throws Exception {\n  testTypes(\"function a(a,opt_a,b,c) {}\",\"optional arguments must be at the end\");\n}",
    "begin_line": 1612,
    "end_line": 1617,
    "comment": "",
    "child_ranges": [
      "(line 1614,col 5)-(line 1616,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments11()",
    "snippet": "public void testFunctionArguments11() throws Exception {\n  testTypes(\"function a(a,opt_a,b,c,var_args,d) {}\",\"optional arguments must be at the end\");\n}",
    "begin_line": 1619,
    "end_line": 1623,
    "comment": "",
    "child_ranges": [
      "(line 1620,col 5)-(line 1622,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments12()",
    "snippet": "public void testFunctionArguments12() throws Exception {\n  testTypes(\"function bar(baz){}\",\"parameter foo does not appear in bar\u0027s parameter list\");\n}",
    "begin_line": 1625,
    "end_line": 1628,
    "comment": "",
    "child_ranges": [
      "(line 1626,col 5)-(line 1627,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments13()",
    "snippet": "public void testFunctionArguments13() throws Exception {\n  testTypes(\" function u() { return true; }\" + \"\" + \"function f(b) { if (u()) { b \u003d null; } return b; }\",\"assignment\\n\" + \"found   : null\\n\" + \"required: boolean\");\n}",
    "begin_line": 1630,
    "end_line": 1639,
    "comment": "",
    "child_ranges": [
      "(line 1632,col 5)-(line 1638,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments14()",
    "snippet": "public void testFunctionArguments14() throws Exception {\n  testTypes(\" function f(x, opt_y, var_args) {}\"+ \"f(\u00273\u0027); f(\u00273\u0027, 2); f(\u00273\u0027, 2, true); f(\u00273\u0027, 2, true, false);\");\n}",
    "begin_line": 1641,
    "end_line": 1649,
    "comment": "",
    "child_ranges": [
      "(line 1642,col 5)-(line 1648,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments15()",
    "snippet": "public void testFunctionArguments15() throws Exception {\n  testTypes(\"\" + \"function g(f) { f(1, 2); }\",\"Function f: called with 2 argument(s). \" + \"Function requires at least 1 argument(s) \" + \"and no more than 1 argument(s).\");\n}",
    "begin_line": 1651,
    "end_line": 1658,
    "comment": "",
    "child_ranges": [
      "(line 1652,col 5)-(line 1657,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments16()",
    "snippet": "public void testFunctionArguments16() throws Exception {\n  testTypes(\"\" + \"function g(var_args) {} g(1, true);\",\"actual parameter 2 of g does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: (number|undefined)\");\n}",
    "begin_line": 1660,
    "end_line": 1667,
    "comment": "",
    "child_ranges": [
      "(line 1661,col 5)-(line 1666,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionArguments17()",
    "snippet": "public void testFunctionArguments17() throws Exception {\n  testClosureTypesMultipleWarnings(\"\" + \"function f(x) { g(x) }\" + \"\"+ \"function g(x) {}\",Lists.newArrayList(\"Bad type annotation. Unknown type booool\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : (booool|null|string)\\n\" + \"required: number\"));\n}",
    "begin_line": 1669,
    "end_line": 1680,
    "comment": "",
    "child_ranges": [
      "(line 1670,col 5)-(line 1679,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrintFunctionName1()",
    "snippet": "public void testPrintFunctionName1() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.run \u003d function(f) {};\" + \"goog.run();\",\"Function goog.run: called with 0 argument(s). \" + \"Function requires at least 1 argument(s) \" + \"and no more than 1 argument(s).\");\n}",
    "begin_line": 1682,
    "end_line": 1690,
    "comment": "",
    "child_ranges": [
      "(line 1684,col 5)-(line 1689,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrintFunctionName2()",
    "snippet": "public void testPrintFunctionName2() throws Exception {\n  testTypes(\" var Foo \u003d function() {}; \" + \"Foo.prototype.run \u003d function(f) {};\" + \"(new Foo).run();\",\"Function Foo.prototype.run: called with 0 argument(s). \" + \"Function requires at least 1 argument(s) \" + \"and no more than 1 argument(s).\");\n}",
    "begin_line": 1692,
    "end_line": 1700,
    "comment": "",
    "child_ranges": [
      "(line 1693,col 5)-(line 1699,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference1()",
    "snippet": "public void testFunctionInference1() throws Exception {\n  testFunctionType(\"function f(a) {}\",\"function (?): undefined\");\n}",
    "begin_line": 1702,
    "end_line": 1706,
    "comment": "",
    "child_ranges": [
      "(line 1703,col 5)-(line 1705,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference2()",
    "snippet": "public void testFunctionInference2() throws Exception {\n  testFunctionType(\"function f(a,b) {}\",\"function (?, ?): undefined\");\n}",
    "begin_line": 1708,
    "end_line": 1712,
    "comment": "",
    "child_ranges": [
      "(line 1709,col 5)-(line 1711,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference3()",
    "snippet": "public void testFunctionInference3() throws Exception {\n  testFunctionType(\"function f(var_args) {}\",\"function (...[?]): undefined\");\n}",
    "begin_line": 1714,
    "end_line": 1718,
    "comment": "",
    "child_ranges": [
      "(line 1715,col 5)-(line 1717,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference4()",
    "snippet": "public void testFunctionInference4() throws Exception {\n  testFunctionType(\"function f(a,b,c,var_args) {}\",\"function (?, ?, ?, ...[?]): undefined\");\n}",
    "begin_line": 1720,
    "end_line": 1724,
    "comment": "",
    "child_ranges": [
      "(line 1721,col 5)-(line 1723,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference5()",
    "snippet": "public void testFunctionInference5() throws Exception {\n  testFunctionType(\"function f(a) {}\",\"function (this:Date, ?): string\");\n}",
    "begin_line": 1726,
    "end_line": 1730,
    "comment": "",
    "child_ranges": [
      "(line 1727,col 5)-(line 1729,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference6()",
    "snippet": "public void testFunctionInference6() throws Exception {\n  testFunctionType(\"function f(opt_a) {}\",\"function (this:Date, ?\u003d): string\");\n}",
    "begin_line": 1732,
    "end_line": 1736,
    "comment": "",
    "child_ranges": [
      "(line 1733,col 5)-(line 1735,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference7()",
    "snippet": "public void testFunctionInference7() throws Exception {\n  testFunctionType(\"function f(a,b,c,var_args) {}\",\"function (this:Date, ?, ?, ?, ...[?]): undefined\");\n}",
    "begin_line": 1738,
    "end_line": 1742,
    "comment": "",
    "child_ranges": [
      "(line 1739,col 5)-(line 1741,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference8()",
    "snippet": "public void testFunctionInference8() throws Exception {\n  testFunctionType(\"function f() {}\",\"function (): undefined\");\n}",
    "begin_line": 1744,
    "end_line": 1748,
    "comment": "",
    "child_ranges": [
      "(line 1745,col 5)-(line 1747,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference9()",
    "snippet": "public void testFunctionInference9() throws Exception {\n  testFunctionType(\"var f \u003d function() {};\",\"function (): undefined\");\n}",
    "begin_line": 1750,
    "end_line": 1754,
    "comment": "",
    "child_ranges": [
      "(line 1751,col 5)-(line 1753,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference10()",
    "snippet": "public void testFunctionInference10() throws Exception {\n  testFunctionType(\"\" + \"var f \u003d function(a,b) {};\",\"function (this:Date, ?, boolean): string\");\n}",
    "begin_line": 1756,
    "end_line": 1761,
    "comment": "",
    "child_ranges": [
      "(line 1757,col 5)-(line 1760,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference11()",
    "snippet": "public void testFunctionInference11() throws Exception {\n  testFunctionType(\"var goog \u003d {};\" + \"goog.f \u003d function(){};\",\"goog.f\",\"function (): number\");\n}",
    "begin_line": 1763,
    "end_line": 1769,
    "comment": "",
    "child_ranges": [
      "(line 1764,col 5)-(line 1768,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference12()",
    "snippet": "public void testFunctionInference12() throws Exception {\n  testFunctionType(\"var goog \u003d {};\" + \"goog.f \u003d function(){};\",\"goog.f\",\"function (): undefined\");\n}",
    "begin_line": 1771,
    "end_line": 1777,
    "comment": "",
    "child_ranges": [
      "(line 1772,col 5)-(line 1776,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference13()",
    "snippet": "public void testFunctionInference13() throws Exception {\n  testFunctionType(\"var goog \u003d {};\" + \" goog.Foo \u003d function(){};\" + \"function eatFoo(f){};\",\"eatFoo\",\"function (goog.Foo): undefined\");\n}",
    "begin_line": 1779,
    "end_line": 1786,
    "comment": "",
    "child_ranges": [
      "(line 1780,col 5)-(line 1785,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference14()",
    "snippet": "public void testFunctionInference14() throws Exception {\n  testFunctionType(\"var goog \u003d {};\" + \" goog.Foo \u003d function(){};\" + \"function eatFoo(){ return new goog.Foo; };\",\"eatFoo\",\"function (): goog.Foo\");\n}",
    "begin_line": 1788,
    "end_line": 1795,
    "comment": "",
    "child_ranges": [
      "(line 1789,col 5)-(line 1794,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference15()",
    "snippet": "public void testFunctionInference15() throws Exception {\n  testFunctionType(\" function f() {};\" + \"f.prototype.foo \u003d function(){};\",\"f.prototype.foo\",\"function (this:f): undefined\");\n}",
    "begin_line": 1797,
    "end_line": 1803,
    "comment": "",
    "child_ranges": [
      "(line 1798,col 5)-(line 1802,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference16()",
    "snippet": "public void testFunctionInference16() throws Exception {\n  testFunctionType(\" function f() {};\" + \"f.prototype.foo \u003d function(){};\",\"(new f).foo\",\"function (this:f): undefined\");\n}",
    "begin_line": 1805,
    "end_line": 1811,
    "comment": "",
    "child_ranges": [
      "(line 1806,col 5)-(line 1810,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference17()",
    "snippet": "public void testFunctionInference17() throws Exception {\n  testFunctionType(\" function f() {}\" + \"function abstractMethod() {}\" + \" f.prototype.foo \u003d abstractMethod;\",\"(new f).foo\",\"function (this:f, number): ?\");\n}",
    "begin_line": 1813,
    "end_line": 1820,
    "comment": "",
    "child_ranges": [
      "(line 1814,col 5)-(line 1819,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference18()",
    "snippet": "public void testFunctionInference18() throws Exception {\n  testFunctionType(\"var goog \u003d {};\" + \" goog.eatWithDate;\",\"goog.eatWithDate\",\"function (this:Date): ?\");\n}",
    "begin_line": 1822,
    "end_line": 1828,
    "comment": "",
    "child_ranges": [
      "(line 1823,col 5)-(line 1827,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference19()",
    "snippet": "public void testFunctionInference19() throws Exception {\n  testFunctionType(\" var f;\",\"f\",\"function (string): ?\");\n}",
    "begin_line": 1830,
    "end_line": 1835,
    "comment": "",
    "child_ranges": [
      "(line 1831,col 5)-(line 1834,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference20()",
    "snippet": "public void testFunctionInference20() throws Exception {\n  testFunctionType(\" var f;\",\"f\",\"function (this:Date): ?\");\n}",
    "begin_line": 1837,
    "end_line": 1842,
    "comment": "",
    "child_ranges": [
      "(line 1838,col 5)-(line 1841,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference21()",
    "snippet": "public void testFunctionInference21() throws Exception {\n  testTypes(\"var f \u003d function() { throw \u0027x\u0027 };\" + \" var g \u003d f;\");\n  testFunctionType(\"var f \u003d function() { throw \u0027x\u0027 };\",\"f\",\"function (): ?\");\n}",
    "begin_line": 1844,
    "end_line": 1852,
    "comment": "",
    "child_ranges": [
      "(line 1845,col 5)-(line 1847,col 47)",
      "(line 1848,col 5)-(line 1851,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference22()",
    "snippet": "public void testFunctionInference22() throws Exception {\n  testTypes(\" var f \u003d function() { g(this); };\" + \" var g \u003d function(x) {};\");\n}",
    "begin_line": 1854,
    "end_line": 1858,
    "comment": "",
    "child_ranges": [
      "(line 1855,col 5)-(line 1857,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionInference23()",
    "snippet": "public void testFunctionInference23() throws Exception {\n  testTypes(\" var f \u003d function() {\\n\" + \"   this.prop \u003d 3;\\n\" + \"};\"+ \" var g \u003d function(x) { return x.prop; };\");\n}",
    "begin_line": 1860,
    "end_line": 1870,
    "comment": "",
    "child_ranges": [
      "(line 1862,col 5)-(line 1869,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction1()",
    "snippet": "public void testInnerFunction1() throws Exception {\n  testTypes(\"function f() {\" + \"  var x \u003d 3;\\n\" + \" function g() { x \u003d null; }\"+ \" return x;\"+ \"}\",\"assignment\\n\" + \"found   : null\\n\" + \"required: number\");\n}",
    "begin_line": 1872,
    "end_line": 1882,
    "comment": "",
    "child_ranges": [
      "(line 1873,col 5)-(line 1881,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction2()",
    "snippet": "public void testInnerFunction2() throws Exception {\n  testTypes(\"\\n\" + \"function f() {\" + \" var x \u003d null;\\n\"+ \" function g() { x \u003d 3; }\"+ \" g();\"+ \" return x;\"+ \"}\",\"inconsistent return type\\n\" + \"found   : (null|number)\\n\" + \"required: number\");\n}",
    "begin_line": 1884,
    "end_line": 1896,
    "comment": "",
    "child_ranges": [
      "(line 1885,col 5)-(line 1895,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction3()",
    "snippet": "public void testInnerFunction3() throws Exception {\n  testTypes(\"var x \u003d null;\" + \"\\n\" + \"function f() {\"+ \" x \u003d 3;\\n\"+ \" \\n\"+ \" function g() { x \u003d true; return x; }\"+ \" return x;\"+ \"}\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 1898,
    "end_line": 1911,
    "comment": "",
    "child_ranges": [
      "(line 1899,col 5)-(line 1910,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction4()",
    "snippet": "public void testInnerFunction4() throws Exception {\n  testTypes(\"var x \u003d null;\" + \"\\n\" + \"function f() {\"+ \" x \u003d \u00273\u0027;\\n\"+ \" \\n\"+ \" function g() { x \u003d 3; return x; }\"+ \" return x;\"+ \"}\",\"inconsistent return type\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 1913,
    "end_line": 1926,
    "comment": "",
    "child_ranges": [
      "(line 1914,col 5)-(line 1925,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction5()",
    "snippet": "public void testInnerFunction5() throws Exception {\n  testTypes(\"\\n\" + \"function f() {\" + \" var x \u003d 3;\\n\"+ \" \"+ \" function g() { var x \u003d 3;x \u003d true; return x; }\"+ \" return x;\"+ \"}\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 1928,
    "end_line": 1940,
    "comment": "",
    "child_ranges": [
      "(line 1929,col 5)-(line 1939,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction6()",
    "snippet": "public void testInnerFunction6() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"function f() {\" + \" var x \u003d 0 || function() {};\\n\"+ \" function g() { if (goog.isFunction(x)) { x(1); } }\"+ \" g();\"+ \"}\",\"Function x: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 1942,
    "end_line": 1953,
    "comment": "",
    "child_ranges": [
      "(line 1943,col 5)-(line 1952,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction7()",
    "snippet": "public void testInnerFunction7() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"function f() {\" + \" \"+ \" var x \u003d 0 || function() {};\\n\"+ \" function g() { if (goog.isFunction(x)) { x(1); } }\"+ \" g();\"+ \"}\",\"Function x: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 1955,
    "end_line": 1967,
    "comment": "",
    "child_ranges": [
      "(line 1956,col 5)-(line 1966,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction8()",
    "snippet": "public void testInnerFunction8() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"function f() {\" + \" function x() {};\\n\"+ \" function g() { if (goog.isFunction(x)) { x(1); } }\"+ \" g();\"+ \"}\",\"Function x: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 1969,
    "end_line": 1980,
    "comment": "",
    "child_ranges": [
      "(line 1970,col 5)-(line 1979,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction9()",
    "snippet": "public void testInnerFunction9() throws Exception {\n  testTypes(\"function f() {\" + \" var x \u003d 3;\\n\" + \" function g() { x \u003d null; };\\n\"+ \" function h() { return x \u003d\u003d null; }\"+ \" return h();\"+ \"}\");\n}",
    "begin_line": 1982,
    "end_line": 1990,
    "comment": "",
    "child_ranges": [
      "(line 1983,col 5)-(line 1989,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction10()",
    "snippet": "public void testInnerFunction10() throws Exception {\n  testTypes(\"function f() {\" + \"   var x \u003d null;\" + \"  \"+ \"  function g() {\"+ \"    if (!x) {\"+ \"      x \u003d 1;\"+ \"    }\"+ \"    return x;\"+ \"  }\"+ \"}\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 1992,
    "end_line": 2007,
    "comment": "",
    "child_ranges": [
      "(line 1993,col 5)-(line 2006,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInnerFunction11()",
    "snippet": "public void testInnerFunction11() throws Exception {\n  testTypes(\"function f() {\" + \"   var x \u003d null;\" + \"  \"+ \"  function g() {\"+ \"    x \u003d 1;\"+ \"    h();\"+ \"    return x;\"+ \"  }\"+ \"  function h() {\"+ \"    x \u003d null;\"+ \"  }\"+ \"}\");\n}",
    "begin_line": 2009,
    "end_line": 2027,
    "comment": "",
    "child_ranges": [
      "(line 2014,col 5)-(line 2026,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling1()",
    "snippet": "public void testAbstractMethodHandling1() throws Exception {\n  testTypes(\" var abstractFn \u003d function() {};\" + \"abstractFn(1);\");\n}",
    "begin_line": 2029,
    "end_line": 2033,
    "comment": "",
    "child_ranges": [
      "(line 2030,col 5)-(line 2032,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling2()",
    "snippet": "public void testAbstractMethodHandling2() throws Exception {\n  testTypes(\"var abstractFn \u003d function() {};\" + \"abstractFn(1);\",\"Function abstractFn: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 2035,
    "end_line": 2042,
    "comment": "",
    "child_ranges": [
      "(line 2036,col 5)-(line 2041,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling3()",
    "snippet": "public void testAbstractMethodHandling3() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.abstractFn \u003d function() {};\" + \"goog.abstractFn(1);\");\n}",
    "begin_line": 2044,
    "end_line": 2049,
    "comment": "",
    "child_ranges": [
      "(line 2045,col 5)-(line 2048,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling4()",
    "snippet": "public void testAbstractMethodHandling4() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.abstractFn \u003d function() {};\" + \"goog.abstractFn(1);\",\"Function goog.abstractFn: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 2051,
    "end_line": 2059,
    "comment": "",
    "child_ranges": [
      "(line 2052,col 5)-(line 2058,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling5()",
    "snippet": "public void testAbstractMethodHandling5() throws Exception {\n  testTypes(\" var abstractFn \u003d function() {};\" + \" var f \u003d abstractFn;\" + \"f(\u0027x\u0027);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2061,
    "end_line": 2069,
    "comment": "",
    "child_ranges": [
      "(line 2062,col 5)-(line 2068,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAbstractMethodHandling6()",
    "snippet": "public void testAbstractMethodHandling6() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.abstractFn \u003d function() {};\" + \" goog.f \u003d abstractFn;\"+ \"goog.f(\u0027x\u0027);\",\"actual parameter 1 of goog.f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2071,
    "end_line": 2080,
    "comment": "",
    "child_ranges": [
      "(line 2072,col 5)-(line 2079,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference1()",
    "snippet": "public void testMethodInference1() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.foo \u003d function() { return 3; };\" + \" \"+ \"function G() {}\"+ \" G.prototype.foo \u003d function() { return true; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2082,
    "end_line": 2092,
    "comment": "",
    "child_ranges": [
      "(line 2083,col 5)-(line 2091,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference2()",
    "snippet": "public void testMethodInference2() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.F \u003d function() {};\" + \" goog.F.prototype.foo \u003d \"+ \"    function() { return 3; };\"+ \" \"+ \"goog.G \u003d function() {};\"+ \" goog.G.prototype.foo \u003d function() { return true; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2094,
    "end_line": 2106,
    "comment": "",
    "child_ranges": [
      "(line 2095,col 5)-(line 2105,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference3()",
    "snippet": "public void testMethodInference3() throws Exception {\n  testTypes(\" function F() {}\" + \" \" + \"F.prototype.foo \u003d function(x) { return 3; };\"+ \" \"+ \"function G() {}\"+ \" \"+ \"G.prototype.foo \u003d function(x) { return x; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2108,
    "end_line": 2120,
    "comment": "",
    "child_ranges": [
      "(line 2109,col 5)-(line 2119,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference4()",
    "snippet": "public void testMethodInference4() throws Exception {\n  testTypes(\" function F() {}\" + \" \" + \"F.prototype.foo \u003d function(x) { return 3; };\"+ \" \"+ \"function G() {}\"+ \" \"+ \"G.prototype.foo \u003d function(y) { return y; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2122,
    "end_line": 2134,
    "comment": "",
    "child_ranges": [
      "(line 2123,col 5)-(line 2133,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference5()",
    "snippet": "public void testMethodInference5() throws Exception {\n  testTypes(\" function F() {}\" + \" \" + \"F.prototype.foo \u003d function(x) { return \u0027x\u0027; };\"+ \" \"+ \"function G() {}\"+ \" G.prototype.num \u003d 3;\"+ \" \"+ \"G.prototype.foo \u003d function(y) { return this.num + y; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 2136,
    "end_line": 2149,
    "comment": "",
    "child_ranges": [
      "(line 2137,col 5)-(line 2148,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference6()",
    "snippet": "public void testMethodInference6() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.foo \u003d function(x) { };\" + \" \"+ \"function G() {}\"+ \" G.prototype.foo \u003d function() { };\"+ \"(new G()).foo(1);\");\n}",
    "begin_line": 2151,
    "end_line": 2159,
    "comment": "",
    "child_ranges": [
      "(line 2152,col 5)-(line 2158,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference7()",
    "snippet": "public void testMethodInference7() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.foo \u003d function() { };\" + \" \"+ \"function G() {}\"+ \" G.prototype.foo \u003d function(x, y) { };\",\"mismatch of the foo property type and the type of the property \" + \"it overrides from superclass F\\n\" + \"original: function (this:F): undefined\\n\"+ \"override: function (this:G, ?, ?): undefined\");\n}",
    "begin_line": 2161,
    "end_line": 2172,
    "comment": "",
    "child_ranges": [
      "(line 2162,col 5)-(line 2171,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference8()",
    "snippet": "public void testMethodInference8() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.foo \u003d function() { };\" + \" \"+ \"function G() {}\"+ \" \"+ \"G.prototype.foo \u003d function(opt_b, var_args) { };\"+ \"(new G()).foo(1, 2, 3);\");\n}",
    "begin_line": 2174,
    "end_line": 2183,
    "comment": "",
    "child_ranges": [
      "(line 2175,col 5)-(line 2182,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMethodInference9()",
    "snippet": "public void testMethodInference9() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.foo \u003d function() { };\" + \" \"+ \"function G() {}\"+ \" \"+ \"G.prototype.foo \u003d function(var_args, opt_b) { };\",\"variable length argument must be last\");\n}",
    "begin_line": 2185,
    "end_line": 2194,
    "comment": "",
    "child_ranges": [
      "(line 2186,col 5)-(line 2193,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStaticMethodDeclaration1()",
    "snippet": "public void testStaticMethodDeclaration1() throws Exception {\n  testTypes(\" function F() { F.foo(true); }\" + \" F.foo \u003d function(x) {};\",\"actual parameter 1 of F.foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2196,
    "end_line": 2203,
    "comment": "",
    "child_ranges": [
      "(line 2197,col 5)-(line 2202,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStaticMethodDeclaration2()",
    "snippet": "public void testStaticMethodDeclaration2() throws Exception {\n  testTypes(\"var goog \u003d goog || {}; function f() { goog.foo(true); }\" + \" goog.foo \u003d function(x) {};\",\"actual parameter 1 of goog.foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2205,
    "end_line": 2212,
    "comment": "",
    "child_ranges": [
      "(line 2206,col 5)-(line 2211,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStaticMethodDeclaration3()",
    "snippet": "public void testStaticMethodDeclaration3() throws Exception {\n  testTypes(\"var goog \u003d goog || {}; function f() { goog.foo(true); }\" + \"goog.foo \u003d function() {};\",\"Function goog.foo: called with 1 argument(s). Function requires \" + \"at least 0 argument(s) and no more than 0 argument(s).\");\n}",
    "begin_line": 2214,
    "end_line": 2220,
    "comment": "",
    "child_ranges": [
      "(line 2215,col 5)-(line 2219,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl1()",
    "snippet": "public void testDuplicateStaticMethodDecl1() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo \u003d function(x) {};\" + \" goog.foo \u003d function(x) {};\",\"variable goog.foo redefined with type function (number): undefined, \" + \"original definition at [testcode]:1 \" + \"with type function (number): undefined\");\n}",
    "begin_line": 2222,
    "end_line": 2230,
    "comment": "",
    "child_ranges": [
      "(line 2223,col 5)-(line 2229,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl2()",
    "snippet": "public void testDuplicateStaticMethodDecl2() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo \u003d function(x) {};\" + \" \"+ \"goog.foo \u003d function(x) {};\");\n}",
    "begin_line": 2232,
    "end_line": 2238,
    "comment": "",
    "child_ranges": [
      "(line 2233,col 5)-(line 2237,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl3()",
    "snippet": "public void testDuplicateStaticMethodDecl3() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \"goog.foo \u003d function(x) {};\" + \"goog.foo \u003d function(x) {};\");\n}",
    "begin_line": 2240,
    "end_line": 2245,
    "comment": "",
    "child_ranges": [
      "(line 2241,col 5)-(line 2244,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl4()",
    "snippet": "public void testDuplicateStaticMethodDecl4() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo \u003d function(x) {};\" + \"goog.foo \u003d function(x) {};\");\n}",
    "begin_line": 2247,
    "end_line": 2252,
    "comment": "",
    "child_ranges": [
      "(line 2248,col 5)-(line 2251,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticMethodDecl5()",
    "snippet": "public void testDuplicateStaticMethodDecl5() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \"goog.foo \u003d function(x) {};\" + \" goog.foo \u003d function(x) {};\",\"variable goog.foo redefined with type function (?): undefined, \" + \"original definition at [testcode]:1 with type \" + \"function (?): undefined\");\n}",
    "begin_line": 2254,
    "end_line": 2262,
    "comment": "",
    "child_ranges": [
      "(line 2255,col 5)-(line 2261,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl1()",
    "snippet": "public void testDuplicateStaticPropertyDecl1() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo;\"+ \" function Foo() {}\");\n}",
    "begin_line": 2264,
    "end_line": 2270,
    "comment": "",
    "child_ranges": [
      "(line 2265,col 5)-(line 2269,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl2()",
    "snippet": "public void testDuplicateStaticPropertyDecl2() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo;\"+ \" function Foo() {}\");\n}",
    "begin_line": 2272,
    "end_line": 2278,
    "comment": "",
    "child_ranges": [
      "(line 2273,col 5)-(line 2277,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl3()",
    "snippet": "public void testDuplicateStaticPropertyDecl3() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo;\"+ \" function Foo() {}\",\"variable goog.foo redefined with type string, \" + \"original definition at [testcode]:1 with type Foo\");\n}",
    "begin_line": 2280,
    "end_line": 2288,
    "comment": "",
    "child_ranges": [
      "(line 2281,col 5)-(line 2287,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl4()",
    "snippet": "public void testDuplicateStaticPropertyDecl4() throws Exception {\n  testClosureTypesMultipleWarnings(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo \u003d \u0027x\u0027;\"+ \" function Foo() {}\",Lists.newArrayList(\"assignment to property foo of goog\\n\" + \"found   : string\\n\" + \"required: Foo\",\"variable goog.foo redefined with type string, \" + \"original definition at [testcode]:1 with type Foo\"));\n}",
    "begin_line": 2290,
    "end_line": 2302,
    "comment": "",
    "child_ranges": [
      "(line 2291,col 5)-(line 2301,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl5()",
    "snippet": "public void testDuplicateStaticPropertyDecl5() throws Exception {\n  testClosureTypesMultipleWarnings(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo \u003d \u0027x\u0027;\"+ \" function Foo() {}\",Lists.newArrayList(\"assignment to property foo of goog\\n\" + \"found   : string\\n\" + \"required: Foo\",\"variable goog.foo redefined with type string, \" + \"original definition at [testcode]:1 with type Foo\"));\n}",
    "begin_line": 2304,
    "end_line": 2316,
    "comment": "",
    "child_ranges": [
      "(line 2305,col 5)-(line 2315,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl6()",
    "snippet": "public void testDuplicateStaticPropertyDecl6() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo \u003d \u0027y\u0027;\" + \" goog.foo \u003d \u0027x\u0027;\");\n}",
    "begin_line": 2318,
    "end_line": 2323,
    "comment": "",
    "child_ranges": [
      "(line 2319,col 5)-(line 2322,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl7()",
    "snippet": "public void testDuplicateStaticPropertyDecl7() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo;\");\n}",
    "begin_line": 2325,
    "end_line": 2330,
    "comment": "",
    "child_ranges": [
      "(line 2326,col 5)-(line 2329,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl8()",
    "snippet": "public void testDuplicateStaticPropertyDecl8() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" function EventCopy() {}\"+ \" goog.foo;\");\n}",
    "begin_line": 2332,
    "end_line": 2338,
    "comment": "",
    "child_ranges": [
      "(line 2333,col 5)-(line 2337,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDecl9()",
    "snippet": "public void testDuplicateStaticPropertyDecl9() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.foo;\" + \" goog.foo;\"+ \" function EventCopy() {}\");\n}",
    "begin_line": 2340,
    "end_line": 2346,
    "comment": "",
    "child_ranges": [
      "(line 2341,col 5)-(line 2345,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateStaticPropertyDec20()",
    "snippet": "public void testDuplicateStaticPropertyDec20() throws Exception {\n  testTypes(\"\"+ \"var goog \u003d goog || {};\"+ \" goog.foo \u003d \u0027y\u0027;\"+ \" goog.foo \u003d \u0027x\u0027;\");\n}",
    "begin_line": 2348,
    "end_line": 2357,
    "comment": "",
    "child_ranges": [
      "(line 2349,col 5)-(line 2356,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateLocalVarDecl()",
    "snippet": "public void testDuplicateLocalVarDecl() throws Exception {\n  testClosureTypesMultipleWarnings(\"\\n\" + \"function f(x) {  var x \u003d \u0027\u0027; }\",Lists.newArrayList(\"variable x redefined with type string, original definition\" + \" at [testcode]:2 with type number\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\"));\n}",
    "begin_line": 2359,
    "end_line": 2369,
    "comment": "",
    "child_ranges": [
      "(line 2360,col 5)-(line 2368,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod1()",
    "snippet": "public void testDuplicateInstanceMethod1() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.bar \u003d function() {};\" + \"F.prototype.bar \u003d function() {};\");\n}",
    "begin_line": 2371,
    "end_line": 2378,
    "comment": "",
    "child_ranges": [
      "(line 2374,col 5)-(line 2377,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod2()",
    "snippet": "public void testDuplicateInstanceMethod2() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.bar \u003d function() {};\" + \" F.prototype.bar \u003d function() {};\",\"variable F.prototype.bar redefined with type \" + \"function (this:F): undefined, original definition at \" + \"[testcode]:1 with type function (this:F): undefined\");\n}",
    "begin_line": 2380,
    "end_line": 2388,
    "comment": "",
    "child_ranges": [
      "(line 2381,col 5)-(line 2387,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod3()",
    "snippet": "public void testDuplicateInstanceMethod3() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.bar \u003d function() {};\" + \" F.prototype.bar \u003d function() {};\",\"variable F.prototype.bar redefined with type \" + \"function (this:F): undefined, original definition at \" + \"[testcode]:1 with type function (this:F): undefined\");\n}",
    "begin_line": 2390,
    "end_line": 2398,
    "comment": "",
    "child_ranges": [
      "(line 2391,col 5)-(line 2397,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod4()",
    "snippet": "public void testDuplicateInstanceMethod4() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.bar \u003d function() {};\" + \"F.prototype.bar \u003d function() {};\");\n}",
    "begin_line": 2400,
    "end_line": 2405,
    "comment": "",
    "child_ranges": [
      "(line 2401,col 5)-(line 2404,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod5()",
    "snippet": "public void testDuplicateInstanceMethod5() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.bar \u003d function() {\" + \"  return 3;\"+ \"};\"+ \" \"+ \"F.prototype.bar \u003d function() { return \u0027\u0027; };\",\"inconsistent return type\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2407,
    "end_line": 2418,
    "comment": "",
    "child_ranges": [
      "(line 2408,col 5)-(line 2417,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateInstanceMethod6()",
    "snippet": "public void testDuplicateInstanceMethod6() throws Exception {\n  testTypes(\" function F() {}\" + \" F.prototype.bar \u003d function() {\" + \"  return 3;\"+ \"};\"+ \" \"+ \"F.prototype.bar \u003d function() { return \u0027\u0027; };\",\"assignment to property bar of F.prototype\\n\" + \"found   : function (this:F): string\\n\" + \"required: function (this:F): number\");\n}",
    "begin_line": 2420,
    "end_line": 2431,
    "comment": "",
    "child_ranges": [
      "(line 2421,col 5)-(line 2430,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration1()",
    "snippet": "public void testStubFunctionDeclaration1() throws Exception {\n  testFunctionType(\" function f() {};\" + \" f.prototype.foo;\",\"(new f).foo\",\"function (this:f, number, string): number\");\n}",
    "begin_line": 2433,
    "end_line": 2440,
    "comment": "",
    "child_ranges": [
      "(line 2434,col 5)-(line 2439,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration2()",
    "snippet": "public void testStubFunctionDeclaration2() throws Exception {\n  testExternFunctionType(\" function f() {};\" + \" f.subclass;\",\"f.subclass\",\"function (new:f.subclass): ?\");\n}",
    "begin_line": 2442,
    "end_line": 2449,
    "comment": "",
    "child_ranges": [
      "(line 2443,col 5)-(line 2448,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration3()",
    "snippet": "public void testStubFunctionDeclaration3() throws Exception {\n  testFunctionType(\" function f() {};\" + \" f.foo;\",\"f.foo\",\"function (): undefined\");\n}",
    "begin_line": 2451,
    "end_line": 2457,
    "comment": "",
    "child_ranges": [
      "(line 2452,col 5)-(line 2456,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration4()",
    "snippet": "public void testStubFunctionDeclaration4() throws Exception {\n  testFunctionType(\" function f() { \" + \"   this.foo;\" + \"}\",\"(new f).foo\",\"function (this:f): number\");\n}",
    "begin_line": 2459,
    "end_line": 2466,
    "comment": "",
    "child_ranges": [
      "(line 2460,col 5)-(line 2465,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration5()",
    "snippet": "public void testStubFunctionDeclaration5() throws Exception {\n  testFunctionType(\" function f() { \" + \"   this.foo;\" + \"}\",\"(new f).foo\",createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n}",
    "begin_line": 2468,
    "end_line": 2475,
    "comment": "",
    "child_ranges": [
      "(line 2469,col 5)-(line 2474,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration6()",
    "snippet": "public void testStubFunctionDeclaration6() throws Exception {\n  testFunctionType(\" function f() {} \" + \" f.prototype.foo;\",\"(new f).foo\",createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n}",
    "begin_line": 2477,
    "end_line": 2483,
    "comment": "",
    "child_ranges": [
      "(line 2478,col 5)-(line 2482,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration7()",
    "snippet": "public void testStubFunctionDeclaration7() throws Exception {\n  testFunctionType(\" function f() {} \" + \" f.prototype.foo \u003d function() {};\",\"(new f).foo\",createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n}",
    "begin_line": 2485,
    "end_line": 2491,
    "comment": "",
    "child_ranges": [
      "(line 2486,col 5)-(line 2490,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration8()",
    "snippet": "public void testStubFunctionDeclaration8() throws Exception {\n  testFunctionType(\" var f \u003d function() {}; \",\"f\",createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n}",
    "begin_line": 2493,
    "end_line": 2498,
    "comment": "",
    "child_ranges": [
      "(line 2494,col 5)-(line 2497,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration9()",
    "snippet": "public void testStubFunctionDeclaration9() throws Exception {\n  testFunctionType(\" var f; \",\"f\",\"function (): number\");\n}",
    "begin_line": 2500,
    "end_line": 2505,
    "comment": "",
    "child_ranges": [
      "(line 2501,col 5)-(line 2504,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubFunctionDeclaration10()",
    "snippet": "public void testStubFunctionDeclaration10() throws Exception {\n  testFunctionType(\" var f \u003d function(x) {};\",\"f\",\"function (number): number\");\n}",
    "begin_line": 2507,
    "end_line": 2512,
    "comment": "",
    "child_ranges": [
      "(line 2508,col 5)-(line 2511,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNestedFunctionInference1()",
    "snippet": "public void testNestedFunctionInference1() throws Exception {\n  String nestedAssignOfFooAndBar\u003d\" function f() {};\" + \"f.prototype.foo \u003d f.prototype.bar \u003d function(){};\";\n  testFunctionType(nestedAssignOfFooAndBar,\"(new f).bar\",\"function (this:f): undefined\");\n}",
    "begin_line": 2514,
    "end_line": 2520,
    "comment": "",
    "child_ranges": [
      "(line 2515,col 5)-(line 2517,col 60)",
      "(line 2518,col 5)-(line 2519,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String)",
    "snippet": "private void testFunctionType(String functionDef,String functionType) throws Exception {\n  testFunctionType(functionDef,\"f\",functionType);\n}",
    "begin_line": 2526,
    "end_line": 2529,
    "comment": "/** \n * Tests the type of a function definition. The function defined by {@code functionDef} should be named {@code \"f\"}.\n */\n",
    "child_ranges": [
      "(line 2528,col 5)-(line 2528,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionType(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "private void testFunctionType(String functionDef,String functionName,String functionType) throws Exception {\n  testTypes(functionDef + \"var a\u003d\" + functionName+ \";\",\"initializing variable\\n\" + \"found   : \" + functionType + \"\\n\"+ \"required: number\");\n}",
    "begin_line": 2535,
    "end_line": 2544,
    "comment": "/** \n * Tests the type of a function definition. The function defined by {@code functionDef} should be named {@code functionName}.\n */\n",
    "child_ranges": [
      "(line 2538,col 5)-(line 2543,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExternFunctionType(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "private void testExternFunctionType(String functionDef,String functionName,String functionType) throws Exception {\n  testTypes(functionDef,\"var a\u003d\" + functionName + \";\",\"initializing variable\\n\" + \"found   : \" + functionType + \"\\n\"+ \"required: number\",false);\n}",
    "begin_line": 2551,
    "end_line": 2559,
    "comment": "/** \n * Tests the type of a function definition in externs. The function defined by  {@code functionDef} should benamed  {@code functionName}.\n */\n",
    "child_ranges": [
      "(line 2553,col 5)-(line 2558,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeRedefinition()",
    "snippet": "public void testTypeRedefinition() throws Exception {\n  testClosureTypesMultipleWarnings(\"a\u003d{}; a.A \u003d {ZOR:\u0027b\u0027};\" + \" a.A \u003d function() {}\",Lists.newArrayList(\"variable a.A redefined with type function (new:a.A): undefined, \" + \"original definition at [testcode]:1 with type enum{a.A}\",\"assignment to property A of a\\n\" + \"found   : function (new:a.A): undefined\\n\" + \"required: enum{a.A}\"));\n}",
    "begin_line": 2561,
    "end_line": 2570,
    "comment": "",
    "child_ranges": [
      "(line 2562,col 5)-(line 2569,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn1()",
    "snippet": "public void testIn1() throws Exception {\n  testTypes(\"\u0027foo\u0027 in Object\");\n}",
    "begin_line": 2572,
    "end_line": 2574,
    "comment": "",
    "child_ranges": [
      "(line 2573,col 5)-(line 2573,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn2()",
    "snippet": "public void testIn2() throws Exception {\n  testTypes(\"3 in Object\");\n}",
    "begin_line": 2576,
    "end_line": 2578,
    "comment": "",
    "child_ranges": [
      "(line 2577,col 5)-(line 2577,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn3()",
    "snippet": "public void testIn3() throws Exception {\n  testTypes(\"undefined in Object\");\n}",
    "begin_line": 2580,
    "end_line": 2582,
    "comment": "",
    "child_ranges": [
      "(line 2581,col 5)-(line 2581,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn4()",
    "snippet": "public void testIn4() throws Exception {\n  testTypes(\"Date in Object\",\"left side of \u0027in\u0027\\n\" + \"found   : function (new:Date, ?\u003d, ?\u003d, ?\u003d, ?\u003d, ?\u003d, ?\u003d, ?\u003d): string\\n\" + \"required: string\");\n}",
    "begin_line": 2584,
    "end_line": 2589,
    "comment": "",
    "child_ranges": [
      "(line 2585,col 5)-(line 2588,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn5()",
    "snippet": "public void testIn5() throws Exception {\n  testTypes(\"\u0027x\u0027 in null\",\"\u0027in\u0027 requires an object\\n\" + \"found   : null\\n\" + \"required: Object\");\n}",
    "begin_line": 2591,
    "end_line": 2596,
    "comment": "",
    "child_ranges": [
      "(line 2592,col 5)-(line 2595,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn6()",
    "snippet": "public void testIn6() throws Exception {\n  testTypes(\"\" + \"function g(x) {}\" + \"g(1 in {});\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2598,
    "end_line": 2606,
    "comment": "",
    "child_ranges": [
      "(line 2599,col 5)-(line 2605,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIn7()",
    "snippet": "public void testIn7() throws Exception {\n  testTypes(\"\\n\"+ \"function g(x) { return 5; }\"+ \"function f() {\"+ \"  var x \u003d {};\"+ \"  x.foo \u003d \u00273\u0027;\"+ \"  return g(x.foo) in {};\"+ \"}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2608,
    "end_line": 2624,
    "comment": "",
    "child_ranges": [
      "(line 2610,col 5)-(line 2623,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForIn1()",
    "snippet": "public void testForIn1() throws Exception {\n  testTypes(\" function f(x) {}\" + \"for (var k in {}) {\" + \"  f(k);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: boolean\");\n}",
    "begin_line": 2626,
    "end_line": 2635,
    "comment": "",
    "child_ranges": [
      "(line 2627,col 5)-(line 2634,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForIn2()",
    "snippet": "public void testForIn2() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var E \u003d {FOO: \u0027bar\u0027};\" + \" var obj \u003d {};\"+ \"var k \u003d null;\"+ \"for (k in obj) {\"+ \"  f(k);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : E.\u003cstring\u003e\\n\" + \"required: boolean\");\n}",
    "begin_line": 2637,
    "end_line": 2649,
    "comment": "",
    "child_ranges": [
      "(line 2638,col 5)-(line 2648,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForIn3()",
    "snippet": "public void testForIn3() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var obj \u003d {};\" + \"for (var k in obj) {\"+ \"  f(obj[k]);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: boolean\");\n}",
    "begin_line": 2651,
    "end_line": 2661,
    "comment": "",
    "child_ranges": [
      "(line 2652,col 5)-(line 2660,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForIn4()",
    "snippet": "public void testForIn4() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var E \u003d {FOO: \u0027bar\u0027};\" + \" var obj \u003d {};\"+ \"for (var k in obj) {\"+ \"  f(obj[k]);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (Array|null)\\n\" + \"required: boolean\");\n}",
    "begin_line": 2663,
    "end_line": 2674,
    "comment": "",
    "child_ranges": [
      "(line 2664,col 5)-(line 2673,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForIn5()",
    "snippet": "public void testForIn5() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var E \u003d function(){};\" + \" var obj \u003d {};\"+ \"for (var k in obj) {\"+ \"  f(k);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: boolean\");\n}",
    "begin_line": 2676,
    "end_line": 2687,
    "comment": "",
    "child_ranges": [
      "(line 2677,col 5)-(line 2686,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison2()",
    "snippet": "public void testComparison2() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"if (a!\u003d\u003db) {}\",\"condition always evaluates to true\\n\" + \"left : number\\n\" + \"right: Date\");\n}",
    "begin_line": 2699,
    "end_line": 2706,
    "comment": "",
    "child_ranges": [
      "(line 2700,col 5)-(line 2705,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison3()",
    "snippet": "public void testComparison3() throws Exception {\n  testTypes(\"var a;\" + \"var b \u003d a \u003d\u003d null\");\n}",
    "begin_line": 2708,
    "end_line": 2712,
    "comment": "",
    "child_ranges": [
      "(line 2710,col 5)-(line 2711,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison4()",
    "snippet": "public void testComparison4() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"var c \u003d a \u003d\u003d b\");\n}",
    "begin_line": 2714,
    "end_line": 2718,
    "comment": "",
    "child_ranges": [
      "(line 2715,col 5)-(line 2717,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison5()",
    "snippet": "public void testComparison5() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a \u003d\u003d b\",\"condition always evaluates to true\\n\" + \"left : null\\n\" + \"right: null\");\n}",
    "begin_line": 2720,
    "end_line": 2727,
    "comment": "",
    "child_ranges": [
      "(line 2721,col 5)-(line 2726,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison6()",
    "snippet": "public void testComparison6() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a !\u003d b\",\"condition always evaluates to false\\n\" + \"left : null\\n\" + \"right: null\");\n}",
    "begin_line": 2729,
    "end_line": 2736,
    "comment": "",
    "child_ranges": [
      "(line 2730,col 5)-(line 2735,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison7()",
    "snippet": "public void testComparison7() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a \u003d\u003d b\",\"condition always evaluates to true\\n\" + \"left : undefined\\n\" + \"right: undefined\");\n}",
    "begin_line": 2738,
    "end_line": 2745,
    "comment": "",
    "child_ranges": [
      "(line 2739,col 5)-(line 2744,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison8()",
    "snippet": "public void testComparison8() throws Exception {\n  testTypes(\" var a \u003d [];\" + \"a[0] \u003d\u003d null || a[1] \u003d\u003d undefined\");\n}",
    "begin_line": 2747,
    "end_line": 2750,
    "comment": "",
    "child_ranges": [
      "(line 2748,col 5)-(line 2749,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison9()",
    "snippet": "public void testComparison9() throws Exception {\n  testTypes(\" var a \u003d [];\" + \"a[0] \u003d\u003d null\",\"condition always evaluates to true\\n\" + \"left : undefined\\n\" + \"right: null\");\n}",
    "begin_line": 2752,
    "end_line": 2758,
    "comment": "",
    "child_ranges": [
      "(line 2753,col 5)-(line 2757,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison10()",
    "snippet": "public void testComparison10() throws Exception {\n  testTypes(\" var a \u003d [];\" + \"a[0] \u003d\u003d\u003d null\");\n}",
    "begin_line": 2760,
    "end_line": 2763,
    "comment": "",
    "child_ranges": [
      "(line 2761,col 5)-(line 2762,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison11()",
    "snippet": "public void testComparison11() throws Exception {\n  testTypes(\"(function(){}) \u003d\u003d \u0027x\u0027\",\"condition always evaluates to false\\n\" + \"left : function (): undefined\\n\" + \"right: string\");\n}",
    "begin_line": 2765,
    "end_line": 2771,
    "comment": "",
    "child_ranges": [
      "(line 2766,col 5)-(line 2770,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison12()",
    "snippet": "public void testComparison12() throws Exception {\n  testTypes(\"(function(){}) \u003d\u003d 3\",\"condition always evaluates to false\\n\" + \"left : function (): undefined\\n\" + \"right: number\");\n}",
    "begin_line": 2773,
    "end_line": 2779,
    "comment": "",
    "child_ranges": [
      "(line 2774,col 5)-(line 2778,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison13()",
    "snippet": "public void testComparison13() throws Exception {\n  testTypes(\"(function(){}) \u003d\u003d false\",\"condition always evaluates to false\\n\" + \"left : function (): undefined\\n\" + \"right: boolean\");\n}",
    "begin_line": 2781,
    "end_line": 2787,
    "comment": "",
    "child_ranges": [
      "(line 2782,col 5)-(line 2786,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison14()",
    "snippet": "public void testComparison14() throws Exception {\n  testTypes(\"\" + \"function f(x, y) { return x \u003d\u003d\u003d y; }\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2789,
    "end_line": 2795,
    "comment": "",
    "child_ranges": [
      "(line 2790,col 5)-(line 2794,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComparison15()",
    "snippet": "public void testComparison15() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" function F() {}\" + \"\\n\"+ \"function G(x) {}\\n\"+ \"goog.inherits(G, F);\\n\"+ \"\\n\"+ \"function H(x) {}\\n\"+ \"goog.inherits(H, G);\\n\"+ \"\"+ \"function f(x) { return x.constructor \u003d\u003d\u003d H; }\",null);\n}",
    "begin_line": 2797,
    "end_line": 2818,
    "comment": "",
    "child_ranges": [
      "(line 2798,col 5)-(line 2817,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDeleteOperator1()",
    "snippet": "public void testDeleteOperator1() throws Exception {\n  testTypes(\"var x \u003d {};\" + \" function f() { return delete x[\u0027a\u0027]; }\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 2820,
    "end_line": 2827,
    "comment": "",
    "child_ranges": [
      "(line 2821,col 5)-(line 2826,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDeleteOperator2()",
    "snippet": "public void testDeleteOperator2() throws Exception {\n  testTypes(\"var obj \u003d {};\" + \" function f(x) { return obj; }\"+ \" function g(x) {\"+ \"  if (x) { delete f(x)[\u0027a\u0027]; }\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 2829,
    "end_line": 2841,
    "comment": "",
    "child_ranges": [
      "(line 2830,col 5)-(line 2840,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnumStaticMethod1()",
    "snippet": "public void testEnumStaticMethod1() throws Exception {\n  testTypes(\" var Foo \u003d {AAA: 1};\" + \" Foo.method \u003d function(x) {};\" + \"Foo.method(true);\",\"actual parameter 1 of Foo.method does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2843,
    "end_line": 2851,
    "comment": "",
    "child_ranges": [
      "(line 2844,col 5)-(line 2850,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnumStaticMethod2()",
    "snippet": "public void testEnumStaticMethod2() throws Exception {\n  testTypes(\" var Foo \u003d {AAA: 1};\" + \" Foo.method \u003d function(x) {};\" + \"function f() { Foo.method(true); }\",\"actual parameter 1 of Foo.method does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 2853,
    "end_line": 2861,
    "comment": "",
    "child_ranges": [
      "(line 2854,col 5)-(line 2860,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum1()",
    "snippet": "public void testEnum1() throws Exception {\n  testTypes(\"var a\u003d{BB:1,CC:2};\\n\" + \"var d;d\u003da.BB;\");\n}",
    "begin_line": 2863,
    "end_line": 2866,
    "comment": "",
    "child_ranges": [
      "(line 2864,col 5)-(line 2865,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum2()",
    "snippet": "public void testEnum2() throws Exception {\n  testTypes(\"var a\u003d{b:1}\",\"enum key b must be a syntactic constant\");\n}",
    "begin_line": 2868,
    "end_line": 2871,
    "comment": "",
    "child_ranges": [
      "(line 2869,col 5)-(line 2870,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum3()",
    "snippet": "public void testEnum3() throws Exception {\n  testTypes(\"var a\u003d{BB:1,BB:2}\",\"variable a.BB redefined with type a.\u003cnumber\u003e, \" + \"original definition at [testcode]:1 with type a.\u003cnumber\u003e\");\n}",
    "begin_line": 2873,
    "end_line": 2877,
    "comment": "",
    "child_ranges": [
      "(line 2874,col 5)-(line 2876,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum4()",
    "snippet": "public void testEnum4() throws Exception {\n  testTypes(\"var a\u003d{BB:\u0027string\u0027}\",\"assignment to property BB of enum{a}\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2879,
    "end_line": 2884,
    "comment": "",
    "child_ranges": [
      "(line 2880,col 5)-(line 2883,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum5()",
    "snippet": "public void testEnum5() throws Exception {\n  testTypes(\"var a\u003d{BB:\u0027string\u0027}\",\"assignment to property BB of enum{a}\\n\" + \"found   : string\\n\" + \"required: (String|null)\");\n}",
    "begin_line": 2886,
    "end_line": 2891,
    "comment": "",
    "child_ranges": [
      "(line 2887,col 5)-(line 2890,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum6()",
    "snippet": "public void testEnum6() throws Exception {\n  testTypes(\"var a\u003d{BB:1,CC:2};\\nvar d;d\u003da.BB;\",\"assignment\\n\" + \"found   : a.\u003cnumber\u003e\\n\" + \"required: Array\");\n}",
    "begin_line": 2893,
    "end_line": 2898,
    "comment": "",
    "child_ranges": [
      "(line 2894,col 5)-(line 2897,col 27)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum7()",
    "snippet": "public void testEnum7() throws Exception {\n  testTypes(\"var a\u003d{AA:1,BB:2,CC:3};\" + \"var b\u003da.D;\",\"element D does not exist on this enum\");\n}",
    "begin_line": 2900,
    "end_line": 2904,
    "comment": "",
    "child_ranges": [
      "(line 2901,col 5)-(line 2903,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum8()",
    "snippet": "public void testEnum8() throws Exception {\n  testClosureTypesMultipleWarnings(\"var a\u003d8;\",Lists.newArrayList(\"enum initializer must be an object literal or an enum\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: enum{a}\"));\n}",
    "begin_line": 2906,
    "end_line": 2913,
    "comment": "",
    "child_ranges": [
      "(line 2907,col 5)-(line 2912,col 34)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum9()",
    "snippet": "public void testEnum9() throws Exception {\n  testClosureTypesMultipleWarnings(\"var goog \u003d {};\" + \"goog.a\u003d8;\",Lists.newArrayList(\"assignment to property a of goog\\n\" + \"found   : number\\n\" + \"required: enum{goog.a}\",\"enum initializer must be an object literal or an enum\"));\n}",
    "begin_line": 2915,
    "end_line": 2924,
    "comment": "",
    "child_ranges": [
      "(line 2916,col 5)-(line 2923,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum10()",
    "snippet": "public void testEnum10() throws Exception {\n  testTypes(\"\" + \"goog.K \u003d { A : 3 };\");\n}",
    "begin_line": 2926,
    "end_line": 2930,
    "comment": "",
    "child_ranges": [
      "(line 2927,col 5)-(line 2929,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum11()",
    "snippet": "public void testEnum11() throws Exception {\n  testTypes(\"\" + \"goog.K \u003d { 502 : 3 };\");\n}",
    "begin_line": 2932,
    "end_line": 2936,
    "comment": "",
    "child_ranges": [
      "(line 2933,col 5)-(line 2935,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum12()",
    "snippet": "public void testEnum12() throws Exception {\n  testTypes(\" var a \u003d {};\" + \" var b \u003d a;\");\n}",
    "begin_line": 2938,
    "end_line": 2942,
    "comment": "",
    "child_ranges": [
      "(line 2939,col 5)-(line 2941,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum13()",
    "snippet": "public void testEnum13() throws Exception {\n  testTypes(\" var a \u003d {};\" + \" var b \u003d a;\",\"incompatible enum element types\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 2944,
    "end_line": 2951,
    "comment": "",
    "child_ranges": [
      "(line 2945,col 5)-(line 2950,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum14()",
    "snippet": "public void testEnum14() throws Exception {\n  testTypes(\" var a \u003d {FOO:5};\" + \" var b \u003d a;\" + \"var c \u003d b.FOO;\");\n}",
    "begin_line": 2953,
    "end_line": 2958,
    "comment": "",
    "child_ranges": [
      "(line 2954,col 5)-(line 2957,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum15()",
    "snippet": "public void testEnum15() throws Exception {\n  testTypes(\" var a \u003d {FOO:5};\" + \" var b \u003d a;\" + \"var c \u003d b.BAR;\",\"element BAR does not exist on this enum\");\n}",
    "begin_line": 2960,
    "end_line": 2966,
    "comment": "",
    "child_ranges": [
      "(line 2961,col 5)-(line 2965,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum16()",
    "snippet": "public void testEnum16() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog .a\u003d{BB:1,BB:2}\",\"variable goog.a.BB redefined with type goog.a.\u003cnumber\u003e, \" + \"original definition at [testcode]:1 with type goog.a.\u003cnumber\u003e\");\n}",
    "begin_line": 2968,
    "end_line": 2973,
    "comment": "",
    "child_ranges": [
      "(line 2969,col 5)-(line 2972,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum17()",
    "snippet": "public void testEnum17() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.a\u003d{BB:\u0027string\u0027}\",\"assignment to property BB of enum{goog.a}\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 2975,
    "end_line": 2981,
    "comment": "",
    "child_ranges": [
      "(line 2976,col 5)-(line 2980,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum18()",
    "snippet": "public void testEnum18() throws Exception {\n  testTypes(\" var E \u003d {A: 1, B: 2};\" + \"\\n\" + \"var f \u003d function(x) { return x; };\");\n}",
    "begin_line": 2983,
    "end_line": 2987,
    "comment": "",
    "child_ranges": [
      "(line 2984,col 5)-(line 2986,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum19()",
    "snippet": "public void testEnum19() throws Exception {\n  testTypes(\" var E \u003d {A: 1, B: 2};\" + \"\\n\" + \"var f \u003d function(x) { return x; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: E.\u003cnumber\u003e\");\n}",
    "begin_line": 2989,
    "end_line": 2996,
    "comment": "",
    "child_ranges": [
      "(line 2990,col 5)-(line 2995,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum20()",
    "snippet": "public void testEnum20() throws Exception {\n  testTypes(\" var E \u003d {A: 1, B: 2}; var x \u003d []; x[E.A] \u003d 0;\");\n}",
    "begin_line": 2998,
    "end_line": 3000,
    "comment": "",
    "child_ranges": [
      "(line 2999,col 5)-(line 2999,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum21()",
    "snippet": "public void testEnum21() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" var E \u003d {A : \u0027a\u0027, B : \u0027b\u0027};\\n\" + \" function f(x) { return x; }\");\n  Node nodeX\u003dn.getLastChild().getLastChild().getLastChild().getLastChild();\n  JSType typeE\u003dnodeX.getJSType();\n  assertFalse(typeE.isObject());\n  assertFalse(typeE.isNullable());\n}",
    "begin_line": 3002,
    "end_line": 3010,
    "comment": "",
    "child_ranges": [
      "(line 3003,col 5)-(line 3005,col 74)",
      "(line 3006,col 5)-(line 3006,col 79)",
      "(line 3007,col 5)-(line 3007,col 37)",
      "(line 3008,col 5)-(line 3008,col 34)",
      "(line 3009,col 5)-(line 3009,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum22()",
    "snippet": "public void testEnum22() throws Exception {\n  testTypes(\" var E \u003d {A: 1, B: 2};\" + \" function f(x) {return x}\");\n}",
    "begin_line": 3012,
    "end_line": 3015,
    "comment": "",
    "child_ranges": [
      "(line 3013,col 5)-(line 3014,col 77)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum23()",
    "snippet": "public void testEnum23() throws Exception {\n  testTypes(\" var E \u003d {A: 1, B: 2};\" + \" function f(x) {return x}\",\"inconsistent return type\\n\" + \"found   : E.\u003cnumber\u003e\\n\" + \"required: string\");\n}",
    "begin_line": 3017,
    "end_line": 3023,
    "comment": "",
    "child_ranges": [
      "(line 3018,col 5)-(line 3022,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum24()",
    "snippet": "public void testEnum24() throws Exception {\n  testTypes(\" var E \u003d {A: {}};\" + \" function f(x) {return x}\",\"inconsistent return type\\n\" + \"found   : E.\u003c(Object|null)\u003e\\n\" + \"required: Object\");\n}",
    "begin_line": 3025,
    "end_line": 3031,
    "comment": "",
    "child_ranges": [
      "(line 3026,col 5)-(line 3030,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum25()",
    "snippet": "public void testEnum25() throws Exception {\n  testTypes(\" var E \u003d {A: {}};\" + \" function f(x) {return x}\");\n}",
    "begin_line": 3033,
    "end_line": 3036,
    "comment": "",
    "child_ranges": [
      "(line 3034,col 5)-(line 3035,col 78)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum26()",
    "snippet": "public void testEnum26() throws Exception {\n  testTypes(\"var a \u003d {};  a.B \u003d {A: 1, B: 2};\" + \" function f(x) {return x}\");\n}",
    "begin_line": 3038,
    "end_line": 3041,
    "comment": "",
    "child_ranges": [
      "(line 3039,col 5)-(line 3040,col 79)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum27()",
    "snippet": "public void testEnum27() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \"function f(x) { return A \u003d\u003d x; }\");\n}",
    "begin_line": 3043,
    "end_line": 3047,
    "comment": "",
    "child_ranges": [
      "(line 3045,col 5)-(line 3046,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum28()",
    "snippet": "public void testEnum28() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \"function f(x) { return A.B \u003d\u003d x; }\");\n}",
    "begin_line": 3049,
    "end_line": 3053,
    "comment": "",
    "child_ranges": [
      "(line 3051,col 5)-(line 3052,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum29()",
    "snippet": "public void testEnum29() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \" function f() { return A; }\",\"inconsistent return type\\n\" + \"found   : enum{A}\\n\" + \"required: number\");\n}",
    "begin_line": 3055,
    "end_line": 3061,
    "comment": "",
    "child_ranges": [
      "(line 3056,col 5)-(line 3060,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum30()",
    "snippet": "public void testEnum30() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \" function f() { return A.B; }\");\n}",
    "begin_line": 3063,
    "end_line": 3066,
    "comment": "",
    "child_ranges": [
      "(line 3064,col 5)-(line 3065,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum31()",
    "snippet": "public void testEnum31() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \" function f() { return A; }\",\"inconsistent return type\\n\" + \"found   : enum{A}\\n\" + \"required: A.\u003cnumber\u003e\");\n}",
    "begin_line": 3068,
    "end_line": 3074,
    "comment": "",
    "child_ranges": [
      "(line 3069,col 5)-(line 3073,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum32()",
    "snippet": "public void testEnum32() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \" function f() { return A.B; }\");\n}",
    "begin_line": 3076,
    "end_line": 3079,
    "comment": "",
    "child_ranges": [
      "(line 3077,col 5)-(line 3078,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum34()",
    "snippet": "public void testEnum34() throws Exception {\n  testTypes(\" var A \u003d {B: 1, C: 2}; \" + \" function f(x) { return x \u003d\u003d A.B; }\");\n}",
    "begin_line": 3081,
    "end_line": 3084,
    "comment": "",
    "child_ranges": [
      "(line 3082,col 5)-(line 3083,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum35()",
    "snippet": "public void testEnum35() throws Exception {\n  testTypes(\"var a \u003d a || {};  a.b \u003d {C: 1, D: 2};\" + \" function f() { return a.b.C; }\");\n}",
    "begin_line": 3086,
    "end_line": 3089,
    "comment": "",
    "child_ranges": [
      "(line 3087,col 5)-(line 3088,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum36()",
    "snippet": "public void testEnum36() throws Exception {\n  testTypes(\"var a \u003d a || {};  a.b \u003d {C: 1, D: 2};\" + \" function f() { return 1; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: a.b.\u003cnumber\u003e\");\n}",
    "begin_line": 3091,
    "end_line": 3097,
    "comment": "",
    "child_ranges": [
      "(line 3092,col 5)-(line 3096,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum37()",
    "snippet": "public void testEnum37() throws Exception {\n  testTypes(\"var goog \u003d goog || {};\" + \" goog.a \u003d {};\" + \" var b \u003d goog.a;\");\n}",
    "begin_line": 3099,
    "end_line": 3104,
    "comment": "",
    "child_ranges": [
      "(line 3100,col 5)-(line 3103,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum38()",
    "snippet": "public void testEnum38() throws Exception {\n  testTypes(\" var MyEnum \u003d {};\" + \" function f(x) {}\",\"Parse error. Cycle detected in inheritance chain \" + \"of type MyEnum\");\n}",
    "begin_line": 3106,
    "end_line": 3112,
    "comment": "",
    "child_ranges": [
      "(line 3107,col 5)-(line 3111,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum39()",
    "snippet": "public void testEnum39() throws Exception {\n  testTypes(\" var MyEnum \u003d {FOO: new Number(1)};\" + \"\" + \"function f(x) { return x \u003d\u003d MyEnum.FOO \u0026\u0026 MyEnum.FOO \u003d\u003d x; }\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 3114,
    "end_line": 3122,
    "comment": "",
    "child_ranges": [
      "(line 3115,col 5)-(line 3121,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum40()",
    "snippet": "public void testEnum40() throws Exception {\n  testTypes(\" var MyEnum \u003d {FOO: new Number(1)};\" + \"\" + \"function f(x) { return x \u003d\u003d MyEnum.FOO \u0026\u0026 MyEnum.FOO \u003d\u003d x; }\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 3124,
    "end_line": 3132,
    "comment": "",
    "child_ranges": [
      "(line 3125,col 5)-(line 3131,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum41()",
    "snippet": "public void testEnum41() throws Exception {\n  testTypes(\" var MyEnum \u003d { FOO: 1};\" + \"\" + \"function f() { return MyEnum.FOO; }\",\"inconsistent return type\\n\" + \"found   : MyEnum.\u003cnumber\u003e\\n\" + \"required: string\");\n}",
    "begin_line": 3134,
    "end_line": 3142,
    "comment": "",
    "child_ranges": [
      "(line 3135,col 5)-(line 3141,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testEnum42()",
    "snippet": "public void testEnum42() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var MyEnum \u003d {FOO: {newProperty: 1, b: 2}};\" + \"f(MyEnum.FOO.newProperty);\");\n}",
    "begin_line": 3144,
    "end_line": 3149,
    "comment": "",
    "child_ranges": [
      "(line 3145,col 5)-(line 3148,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAliasedEnum1()",
    "snippet": "public void testAliasedEnum1() throws Exception {\n  testTypes(\" var YourEnum \u003d {FOO: 3};\" + \" var MyEnum \u003d YourEnum;\" + \" function f(x) {} f(MyEnum.FOO);\");\n}",
    "begin_line": 3151,
    "end_line": 3156,
    "comment": "",
    "child_ranges": [
      "(line 3152,col 5)-(line 3155,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAliasedEnum2()",
    "snippet": "public void testAliasedEnum2() throws Exception {\n  testTypes(\" var YourEnum \u003d {FOO: 3};\" + \" var MyEnum \u003d YourEnum;\" + \" function f(x) {} f(MyEnum.FOO);\");\n}",
    "begin_line": 3158,
    "end_line": 3163,
    "comment": "",
    "child_ranges": [
      "(line 3159,col 5)-(line 3162,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAliasedEnum3()",
    "snippet": "public void testAliasedEnum3() throws Exception {\n  testTypes(\" var YourEnum \u003d {FOO: 3};\" + \" var MyEnum \u003d YourEnum;\" + \" function f(x) {} f(YourEnum.FOO);\");\n}",
    "begin_line": 3165,
    "end_line": 3170,
    "comment": "",
    "child_ranges": [
      "(line 3166,col 5)-(line 3169,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAliasedEnum4()",
    "snippet": "public void testAliasedEnum4() throws Exception {\n  testTypes(\" var YourEnum \u003d {FOO: 3};\" + \" var MyEnum \u003d YourEnum;\" + \" function f(x) {} f(YourEnum.FOO);\");\n}",
    "begin_line": 3172,
    "end_line": 3177,
    "comment": "",
    "child_ranges": [
      "(line 3173,col 5)-(line 3176,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAliasedEnum5()",
    "snippet": "public void testAliasedEnum5() throws Exception {\n  testTypes(\" var YourEnum \u003d {FOO: 3};\" + \" var MyEnum \u003d YourEnum;\" + \" function f(x) {} f(MyEnum.FOO);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : YourEnum.\u003cnumber\u003e\\n\" + \"required: string\");\n}",
    "begin_line": 3179,
    "end_line": 3187,
    "comment": "",
    "child_ranges": [
      "(line 3180,col 5)-(line 3186,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsEnumUse1()",
    "snippet": "public void testBackwardsEnumUse1() throws Exception {\n  testTypes(\" function f() { return MyEnum.FOO; }\" + \" var MyEnum \u003d {FOO: \u0027x\u0027};\");\n}",
    "begin_line": 3189,
    "end_line": 3193,
    "comment": "",
    "child_ranges": [
      "(line 3190,col 5)-(line 3192,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsEnumUse2()",
    "snippet": "public void testBackwardsEnumUse2() throws Exception {\n  testTypes(\" function f() { return MyEnum.FOO; }\" + \" var MyEnum \u003d {FOO: \u0027x\u0027};\",\"inconsistent return type\\n\" + \"found   : MyEnum.\u003cstring\u003e\\n\" + \"required: number\");\n}",
    "begin_line": 3195,
    "end_line": 3202,
    "comment": "",
    "child_ranges": [
      "(line 3196,col 5)-(line 3201,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsEnumUse3()",
    "snippet": "public void testBackwardsEnumUse3() throws Exception {\n  testTypes(\" function f() { return MyEnum.FOO; }\" + \" var YourEnum \u003d {FOO: \u0027x\u0027};\" + \" var MyEnum \u003d YourEnum;\");\n}",
    "begin_line": 3204,
    "end_line": 3209,
    "comment": "",
    "child_ranges": [
      "(line 3205,col 5)-(line 3208,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsEnumUse4()",
    "snippet": "public void testBackwardsEnumUse4() throws Exception {\n  testTypes(\" function f() { return MyEnum.FOO; }\" + \" var YourEnum \u003d {FOO: \u0027x\u0027};\" + \" var MyEnum \u003d YourEnum;\",\"inconsistent return type\\n\" + \"found   : YourEnum.\u003cstring\u003e\\n\" + \"required: number\");\n}",
    "begin_line": 3211,
    "end_line": 3219,
    "comment": "",
    "child_ranges": [
      "(line 3212,col 5)-(line 3218,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsEnumUse5()",
    "snippet": "public void testBackwardsEnumUse5() throws Exception {\n  testTypes(\" function f() { return MyEnum.BAR; }\" + \" var YourEnum \u003d {FOO: \u0027x\u0027};\" + \" var MyEnum \u003d YourEnum;\",\"element BAR does not exist on this enum\");\n}",
    "begin_line": 3221,
    "end_line": 3227,
    "comment": "",
    "child_ranges": [
      "(line 3222,col 5)-(line 3226,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse2()",
    "snippet": "public void testBackwardsTypedefUse2() throws Exception {\n  testTypes(\" function f() {}\" + \" var MyTypedef;\");\n}",
    "begin_line": 3229,
    "end_line": 3233,
    "comment": "",
    "child_ranges": [
      "(line 3230,col 5)-(line 3232,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse4()",
    "snippet": "public void testBackwardsTypedefUse4() throws Exception {\n  testTypes(\" function f() { return null; }\" + \" var MyTypedef;\",\"inconsistent return type\\n\" + \"found   : null\\n\" + \"required: string\");\n}",
    "begin_line": 3235,
    "end_line": 3242,
    "comment": "",
    "child_ranges": [
      "(line 3236,col 5)-(line 3241,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse6()",
    "snippet": "public void testBackwardsTypedefUse6() throws Exception {\n  testTypes(\" function f() { return null; }\" + \"var goog \u003d {};\" + \" goog.MyTypedef;\",\"inconsistent return type\\n\" + \"found   : null\\n\" + \"required: string\");\n}",
    "begin_line": 3244,
    "end_line": 3252,
    "comment": "",
    "child_ranges": [
      "(line 3245,col 5)-(line 3251,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse7()",
    "snippet": "public void testBackwardsTypedefUse7() throws Exception {\n  testTypes(\" function f() { return null; }\" + \"var goog \u003d {};\" + \" goog.MyTypedef;\");\n}",
    "begin_line": 3254,
    "end_line": 3259,
    "comment": "",
    "child_ranges": [
      "(line 3255,col 5)-(line 3258,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse8()",
    "snippet": "public void testBackwardsTypedefUse8() throws Exception {\n  testTypes(\" function g(x) {}\" + \" function f() { g(this); }\" + \"var goog \u003d {};\"+ \" goog.MyTypedef;\");\n}",
    "begin_line": 3261,
    "end_line": 3269,
    "comment": "",
    "child_ranges": [
      "(line 3264,col 5)-(line 3268,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse9()",
    "snippet": "public void testBackwardsTypedefUse9() throws Exception {\n  testTypes(\" function g(x) {}\" + \" function f() { g(this); }\" + \"var goog \u003d {};\"+ \" goog.MyTypedef;\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : Error\\n\" + \"required: Array\");\n}",
    "begin_line": 3271,
    "end_line": 3280,
    "comment": "",
    "child_ranges": [
      "(line 3272,col 5)-(line 3279,col 27)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsTypedefUse10()",
    "snippet": "public void testBackwardsTypedefUse10() throws Exception {\n  testTypes(\" function g(x) {}\" + \"var goog \u003d {};\" + \" goog.MyEnum \u003d {FOO: 1};\"+ \" goog.MyTypedef;\"+ \"g(1);\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: goog.MyEnum.\u003cnumber\u003e\");\n}",
    "begin_line": 3282,
    "end_line": 3292,
    "comment": "",
    "child_ranges": [
      "(line 3283,col 5)-(line 3291,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsConstructor1()",
    "snippet": "public void testBackwardsConstructor1() throws Exception {\n  testTypes(\"function f() { (new Foo(true)); }\" + \"\" + \"var Foo \u003d function(x) {};\",\"actual parameter 1 of Foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 3294,
    "end_line": 3302,
    "comment": "",
    "child_ranges": [
      "(line 3295,col 5)-(line 3301,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsConstructor2()",
    "snippet": "public void testBackwardsConstructor2() throws Exception {\n  testTypes(\"function f() { (new Foo(true)); }\" + \"\" + \"var YourFoo \u003d function(x) {};\"+ \"\"+ \"var Foo \u003d YourFoo;\",\"actual parameter 1 of Foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 3304,
    "end_line": 3314,
    "comment": "",
    "child_ranges": [
      "(line 3305,col 5)-(line 3313,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMinimalConstructorAnnotation()",
    "snippet": "public void testMinimalConstructorAnnotation() throws Exception {\n  testTypes(\"function Foo(){}\");\n}",
    "begin_line": 3316,
    "end_line": 3318,
    "comment": "",
    "child_ranges": [
      "(line 3317,col 5)-(line 3317,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends1()",
    "snippet": "public void testGoodExtends1() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\");\n}",
    "begin_line": 3320,
    "end_line": 3324,
    "comment": "",
    "child_ranges": [
      "(line 3322,col 5)-(line 3323,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends2()",
    "snippet": "public void testGoodExtends2() throws Exception {\n  testTypes(\"function derived() {}\\n\" + \"function base() {}\\n\");\n}",
    "begin_line": 3326,
    "end_line": 3329,
    "comment": "",
    "child_ranges": [
      "(line 3327,col 5)-(line 3328,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends3()",
    "snippet": "public void testGoodExtends3() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\");\n}",
    "begin_line": 3331,
    "end_line": 3334,
    "comment": "",
    "child_ranges": [
      "(line 3332,col 5)-(line 3333,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends4()",
    "snippet": "public void testGoodExtends4() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"var goog \u003d {};\\n\" + \"goog.Base \u003d function(){};\\n\" + \"goog.Derived \u003d function(){};\\n\");\n  Node subTypeName\u003dn.getLastChild().getLastChild().getFirstChild();\n  assertEquals(\"goog.Derived\",subTypeName.getQualifiedName());\n  FunctionType subCtorType\u003d(FunctionType)subTypeName.getNext().getJSType();\n  assertEquals(\"goog.Derived\",subCtorType.getInstanceType().toString());\n  JSType superType\u003dsubCtorType.getPrototype().getImplicitPrototype();\n  assertEquals(\"goog.Base\",superType.toString());\n}",
    "begin_line": 3336,
    "end_line": 3354,
    "comment": "",
    "child_ranges": [
      "(line 3340,col 5)-(line 3344,col 69)",
      "(line 3345,col 5)-(line 3345,col 71)",
      "(line 3346,col 5)-(line 3346,col 65)",
      "(line 3348,col 5)-(line 3349,col 57)",
      "(line 3350,col 5)-(line 3350,col 75)",
      "(line 3352,col 5)-(line 3352,col 73)",
      "(line 3353,col 5)-(line 3353,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends5()",
    "snippet": "public void testGoodExtends5() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\");\n}",
    "begin_line": 3356,
    "end_line": 3360,
    "comment": "",
    "child_ranges": [
      "(line 3358,col 5)-(line 3359,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends6()",
    "snippet": "public void testGoodExtends6() throws Exception {\n  testFunctionType(CLOSURE_DEFS + \"function base() {}\\n\" + \" \"+ \"  base.prototype.foo \u003d function() { return 1; };\\n\"+ \"function derived() {}\\n\"+ \"goog.inherits(derived, base);\",\"derived.superClass_.foo\",\"function (this:base): number\");\n}",
    "begin_line": 3362,
    "end_line": 3372,
    "comment": "",
    "child_ranges": [
      "(line 3363,col 5)-(line 3371,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends7()",
    "snippet": "public void testGoodExtends7() throws Exception {\n  testFunctionType(\"Function.prototype.inherits \u003d function(x) {};\" + \"function base() {}\\n\" + \"function derived() {}\\n\"+ \"derived.inherits(base);\",\"(new derived).constructor\",\"function (new:derived, ...[?]): ?\");\n}",
    "begin_line": 3374,
    "end_line": 3382,
    "comment": "",
    "child_ranges": [
      "(line 3375,col 5)-(line 3381,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends8()",
    "snippet": "public void testGoodExtends8() throws Exception {\n  testTypes(\" function Sub() {}\" + \" function f() { return (new Sub()).foo; }\" + \" function Base() {}\"+ \" Base.prototype.foo \u003d true;\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 3384,
    "end_line": 3392,
    "comment": "",
    "child_ranges": [
      "(line 3385,col 5)-(line 3391,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends9()",
    "snippet": "public void testGoodExtends9() throws Exception {\n  testTypes(\" function Super() {}\" + \"Super.prototype.foo \u003d function() {};\" + \" function Sub() {}\"+ \"Sub.prototype \u003d new Super();\"+ \" Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 3394,
    "end_line": 3401,
    "comment": "",
    "child_ranges": [
      "(line 3395,col 5)-(line 3400,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends10()",
    "snippet": "public void testGoodExtends10() throws Exception {\n  testTypes(\" function Super() {}\" + \" function Sub() {}\" + \"Sub.prototype \u003d new Super();\"+ \" function foo() { return new Sub(); }\");\n}",
    "begin_line": 3403,
    "end_line": 3409,
    "comment": "",
    "child_ranges": [
      "(line 3404,col 5)-(line 3408,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends11()",
    "snippet": "public void testGoodExtends11() throws Exception {\n  testTypes(\" function Super() {}\" + \" Super.prototype.foo \u003d function(x) {};\" + \" function Sub() {}\"+ \"Sub.prototype \u003d new Super();\"+ \"(new Sub()).foo(0);\",\"actual parameter 1 of Super.prototype.foo \" + \"does not match formal parameter\\n\" + \"found   : number\\n\"+ \"required: boolean\");\n}",
    "begin_line": 3411,
    "end_line": 3422,
    "comment": "",
    "child_ranges": [
      "(line 3412,col 5)-(line 3421,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends12()",
    "snippet": "public void testGoodExtends12() throws Exception {\n  testTypes(\" function Sub() {}\" + \" function Sub2() {}\" + \" function Super() {}\"+ \" function foo(x) {}\"+ \"foo(new Sub2());\");\n}",
    "begin_line": 3424,
    "end_line": 3431,
    "comment": "",
    "child_ranges": [
      "(line 3425,col 5)-(line 3430,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends13()",
    "snippet": "public void testGoodExtends13() throws Exception {\n  testTypes(\" function C() {}\" + \" function E() {}\" + \" function D() {}\"+ \" function B() {}\"+ \" function A() {}\"+ \" function f(x) {} f(new E());\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : E\\n\" + \"required: number\");\n}",
    "begin_line": 3433,
    "end_line": 3444,
    "comment": "",
    "child_ranges": [
      "(line 3434,col 5)-(line 3443,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends14()",
    "snippet": "public void testGoodExtends14() throws Exception {\n  testTypes(CLOSURE_DEFS + \" function g(f) {\" + \"   function NewType() {};\"+ \"  goog.inherits(NewType, f);\"+ \"  (new NewType());\"+ \"}\");\n}",
    "begin_line": 3446,
    "end_line": 3454,
    "comment": "",
    "child_ranges": [
      "(line 3447,col 5)-(line 3453,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends15()",
    "snippet": "public void testGoodExtends15() throws Exception {\n  testTypes(CLOSURE_DEFS + \" function OldType() {}\" + \" function g(f) {\"+ \"  \\n\"+ \"  function NewType() {};\"+ \"  goog.inherits(NewType, f);\"+ \"  NewType.prototype.method \u003d function() {\"+ \"    NewType.superClass_.foo.call(this);\"+ \"  };\"+ \"}\",\"Property foo never defined on OldType.prototype\");\n}",
    "begin_line": 3456,
    "end_line": 3472,
    "comment": "",
    "child_ranges": [
      "(line 3457,col 5)-(line 3471,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends16()",
    "snippet": "public void testGoodExtends16() throws Exception {\n  testTypes(CLOSURE_DEFS + \" function g(f) {\" + \"   function NewType() {};\"+ \"  goog.inherits(f, NewType);\"+ \"  (new NewType());\"+ \"}\");\n}",
    "begin_line": 3474,
    "end_line": 3482,
    "comment": "",
    "child_ranges": [
      "(line 3475,col 5)-(line 3481,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodExtends17()",
    "snippet": "public void testGoodExtends17() throws Exception {\n  testFunctionType(\"Function.prototype.inherits \u003d function(x) {};\" + \"function base() {}\\n\" + \" base.prototype.bar \u003d function(x) {};\\n\"+ \"function derived() {}\\n\"+ \"derived.inherits(base);\",\"(new derived).constructor.prototype.bar\",\"function (this:base, number): undefined\");\n}",
    "begin_line": 3484,
    "end_line": 3493,
    "comment": "",
    "child_ranges": [
      "(line 3485,col 5)-(line 3492,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadExtends1()",
    "snippet": "public void testBadExtends1() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\",\"Bad type annotation. Unknown type not_base\");\n}",
    "begin_line": 3495,
    "end_line": 3499,
    "comment": "",
    "child_ranges": [
      "(line 3496,col 5)-(line 3498,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadExtends2()",
    "snippet": "public void testBadExtends2() throws Exception {\n  testTypes(\"function base() {\\n\" + \"\\n\" + \"this.baseMember \u003d new Number(4);\\n\"+ \"}\\n\"+ \"function derived() {}\\n\"+ \"\\n\"+ \"function foo(x){ }\\n\"+ \"var y;\\n\"+ \"foo(y.baseMember);\\n\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : Number\\n\" + \"required: String\");\n}",
    "begin_line": 3501,
    "end_line": 3515,
    "comment": "",
    "child_ranges": [
      "(line 3502,col 5)-(line 3514,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadExtends3()",
    "snippet": "public void testBadExtends3() throws Exception {\n  testTypes(\"function base() {}\",\"@extends used without @constructor or @interface for base\");\n}",
    "begin_line": 3517,
    "end_line": 3520,
    "comment": "",
    "child_ranges": [
      "(line 3518,col 5)-(line 3519,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadExtends4()",
    "snippet": "public void testBadExtends4() throws Exception {\n  testTypes(\" function Sub() {}\" + \" function Sub2() {}\" + \" function foo(x) {}\"+ \"foo(new Sub2());\",\"Bad type annotation. Unknown type bad\");\n}",
    "begin_line": 3522,
    "end_line": 3531,
    "comment": "",
    "child_ranges": [
      "(line 3525,col 5)-(line 3530,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLateExtends()",
    "snippet": "public void testLateExtends() throws Exception {\n  testTypes(CLOSURE_DEFS + \" function Foo() {}\\n\" + \"Foo.prototype.foo \u003d function() {};\\n\"+ \"function Bar() {}\\n\"+ \"goog.inherits(Foo, Bar);\\n\",\"Missing @extends tag on type Foo\");\n}",
    "begin_line": 3533,
    "end_line": 3541,
    "comment": "",
    "child_ranges": [
      "(line 3534,col 5)-(line 3540,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperclassMatch()",
    "snippet": "public void testSuperclassMatch() throws Exception {\n  compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n  testTypes(\" var Foo \u003d function() {};\\n\" + \" var Bar \u003d function() {};\\n\" + \"Bar.inherits \u003d function(x){};\"+ \"Bar.inherits(Foo);\\n\");\n}",
    "begin_line": 3543,
    "end_line": 3549,
    "comment": "",
    "child_ranges": [
      "(line 3544,col 5)-(line 3544,col 76)",
      "(line 3545,col 5)-(line 3548,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperclassMatchWithMixin()",
    "snippet": "public void testSuperclassMatchWithMixin() throws Exception {\n  compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n  testTypes(\" var Foo \u003d function() {};\\n\" + \" var Baz \u003d function() {};\\n\" + \" var Bar \u003d function() {};\\n\"+ \"Bar.inherits \u003d function(x){};\"+ \"Bar.mixin \u003d function(y){};\"+ \"Bar.inherits(Foo);\\n\"+ \"Bar.mixin(Baz);\\n\");\n}",
    "begin_line": 3551,
    "end_line": 3560,
    "comment": "",
    "child_ranges": [
      "(line 3552,col 5)-(line 3552,col 76)",
      "(line 3553,col 5)-(line 3559,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperclassMismatch1()",
    "snippet": "public void testSuperclassMismatch1() throws Exception {\n  compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n  testTypes(\" var Foo \u003d function() {};\\n\" + \" var Bar \u003d function() {};\\n\" + \"Bar.inherits \u003d function(x){};\"+ \"Bar.inherits(Foo);\\n\",\"Missing @extends tag on type Bar\");\n}",
    "begin_line": 3562,
    "end_line": 3569,
    "comment": "",
    "child_ranges": [
      "(line 3563,col 5)-(line 3563,col 76)",
      "(line 3564,col 5)-(line 3568,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperclassMismatch2()",
    "snippet": "public void testSuperclassMismatch2() throws Exception {\n  compiler.getOptions().setCodingConvention(new GoogleCodingConvention());\n  testTypes(\" var Foo \u003d function(){};\\n\" + \" var Bar \u003d function(){};\\n\" + \"Bar.inherits \u003d function(x){};\"+ \"Bar.inherits(Foo);\",\"Missing @extends tag on type Bar\");\n}",
    "begin_line": 3571,
    "end_line": 3578,
    "comment": "",
    "child_ranges": [
      "(line 3572,col 5)-(line 3572,col 76)",
      "(line 3573,col 5)-(line 3577,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass1()",
    "snippet": "public void testSuperClassDefinedAfterSubClass1() throws Exception {\n  testTypes(\" function A() {}\" + \" function B() {}\" + \" function Base() {}\"+ \" \"+ \"function foo(x) { return x; }\");\n}",
    "begin_line": 3580,
    "end_line": 3587,
    "comment": "",
    "child_ranges": [
      "(line 3581,col 5)-(line 3586,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSuperClassDefinedAfterSubClass2()",
    "snippet": "public void testSuperClassDefinedAfterSubClass2() throws Exception {\n  testTypes(\" function A() {}\" + \" function B() {}\" + \" \"+ \"function foo(x) { return x; }\"+ \" function Base() {}\");\n}",
    "begin_line": 3589,
    "end_line": 3596,
    "comment": "",
    "child_ranges": [
      "(line 3590,col 5)-(line 3595,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDirectPrototypeAssignment1()",
    "snippet": "public void testDirectPrototypeAssignment1() throws Exception {\n  testTypes(\" function Base() {}\" + \"Base.prototype.foo \u003d 3;\" + \" function A() {}\"+ \"A.prototype \u003d new Base();\"+ \" function foo() { return (new A).foo; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 3598,
    "end_line": 3608,
    "comment": "",
    "child_ranges": [
      "(line 3599,col 5)-(line 3607,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDirectPrototypeAssignment2()",
    "snippet": "public void testDirectPrototypeAssignment2() throws Exception {\n  testTypes(\" function Base() {}\" + \" function A() {}\" + \"A.prototype \u003d new Base();\"+ \"A.prototype.foo \u003d 3;\"+ \" function foo() { return (new Base).foo; }\");\n}",
    "begin_line": 3610,
    "end_line": 3619,
    "comment": "",
    "child_ranges": [
      "(line 3613,col 5)-(line 3618,col 77)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDirectPrototypeAssignment3()",
    "snippet": "public void testDirectPrototypeAssignment3() throws Exception {\n  testTypes(\" var MainWidgetCreator \u003d function() {};\" + \"\" + \"function createMainWidget(ctor) {\"+ \"   function tempCtor() {};\"+ \"  tempCtor.prototype \u003d ctor.prototype;\"+ \"  MainWidgetCreator.superClass_ \u003d ctor.prototype;\"+ \"  MainWidgetCreator.prototype \u003d new tempCtor();\"+ \"}\");\n}",
    "begin_line": 3621,
    "end_line": 3633,
    "comment": "",
    "child_ranges": [
      "(line 3624,col 5)-(line 3632,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements1()",
    "snippet": "public void testGoodImplements1() throws Exception {\n  testTypes(\"function Disposable() {}\\n\" + \"function f() {}\");\n}",
    "begin_line": 3635,
    "end_line": 3638,
    "comment": "",
    "child_ranges": [
      "(line 3636,col 5)-(line 3637,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements2()",
    "snippet": "public void testGoodImplements2() throws Exception {\n  testTypes(\"function Base1() {}\\n\" + \"function Base2() {}\\n\" + \" function derived() {}\");\n}",
    "begin_line": 3640,
    "end_line": 3647,
    "comment": "",
    "child_ranges": [
      "(line 3641,col 5)-(line 3646,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements3()",
    "snippet": "public void testGoodImplements3() throws Exception {\n  testTypes(\"function Disposable() {}\\n\" + \"function f() {}\");\n}",
    "begin_line": 3649,
    "end_line": 3652,
    "comment": "",
    "child_ranges": [
      "(line 3650,col 5)-(line 3651,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements4()",
    "snippet": "public void testGoodImplements4() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"\" + \"goog.abstractMethod \u003d function() {};\"+ \"\\n\"+ \"goog.Disposable \u003d goog.abstractMethod;\"+ \"goog.Disposable.prototype.dispose \u003d goog.abstractMethod;\"+ \"\"+ \"goog.SubDisposable \u003d function() {};\"+ \" \"+ \"goog.SubDisposable.prototype.dispose \u003d function() {};\");\n}",
    "begin_line": 3654,
    "end_line": 3665,
    "comment": "",
    "child_ranges": [
      "(line 3655,col 5)-(line 3664,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements5()",
    "snippet": "public void testGoodImplements5() throws Exception {\n  testTypes(\"\\n\" + \"goog.Disposable \u003d function() {};\" + \"\"+ \"goog.Disposable.prototype.dispose \u003d function() {};\"+ \"\"+ \"goog.SubDisposable \u003d function() {};\"+ \" \"+ \"goog.SubDisposable.prototype.dispose \u003d function(key) {};\");\n}",
    "begin_line": 3667,
    "end_line": 3677,
    "comment": "",
    "child_ranges": [
      "(line 3668,col 5)-(line 3676,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements6()",
    "snippet": "public void testGoodImplements6() throws Exception {\n  testTypes(\"var myNullFunction \u003d function() {};\" + \"\\n\" + \"goog.Disposable \u003d function() {};\"+ \"\"+ \"goog.Disposable.prototype.dispose \u003d myNullFunction;\"+ \"\"+ \"goog.SubDisposable \u003d function() {};\"+ \" \"+ \"goog.SubDisposable.prototype.dispose \u003d function() { return 0; };\");\n}",
    "begin_line": 3679,
    "end_line": 3690,
    "comment": "",
    "child_ranges": [
      "(line 3680,col 5)-(line 3689,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoodImplements7()",
    "snippet": "public void testGoodImplements7() throws Exception {\n  testTypes(\"var myNullFunction \u003d function() {};\" + \"\\n\" + \"goog.Disposable \u003d function() {};\"+ \"\"+ \"goog.Disposable.prototype.dispose \u003d function() {};\"+ \"\"+ \"goog.SubDisposable \u003d function() {};\"+ \" \"+ \"goog.SubDisposable.prototype.dispose \u003d function() { return 0; };\");\n}",
    "begin_line": 3692,
    "end_line": 3703,
    "comment": "",
    "child_ranges": [
      "(line 3693,col 5)-(line 3702,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements1()",
    "snippet": "public void testBadImplements1() throws Exception {\n  testTypes(\"function Base1() {}\\n\" + \"function Base2() {}\\n\" + \" function derived() {}\",\"Bad type annotation. Unknown type nonExistent\");\n}",
    "begin_line": 3705,
    "end_line": 3713,
    "comment": "",
    "child_ranges": [
      "(line 3706,col 5)-(line 3712,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements2()",
    "snippet": "public void testBadImplements2() throws Exception {\n  testTypes(\"function Disposable() {}\\n\" + \"function f() {}\",\"@implements used without @constructor for f\");\n}",
    "begin_line": 3715,
    "end_line": 3719,
    "comment": "",
    "child_ranges": [
      "(line 3716,col 5)-(line 3718,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements3()",
    "snippet": "public void testBadImplements3() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.abstractMethod \u003d function(){};\" + \" var Disposable \u003d goog.abstractMethod;\"+ \"Disposable.prototype.method \u003d goog.abstractMethod;\"+ \"function f() {}\",\"property method on interface Disposable is not implemented by type f\");\n}",
    "begin_line": 3721,
    "end_line": 3729,
    "comment": "",
    "child_ranges": [
      "(line 3722,col 5)-(line 3728,col 80)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements4()",
    "snippet": "public void testBadImplements4() throws Exception {\n  testTypes(\"function Disposable() {}\\n\" + \"function f() {}\",\"f cannot implement this type; an interface can only extend, \" + \"but not implement interfaces\");\n}",
    "begin_line": 3731,
    "end_line": 3736,
    "comment": "",
    "child_ranges": [
      "(line 3732,col 5)-(line 3735,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements5()",
    "snippet": "public void testBadImplements5() throws Exception {\n  testTypes(\"function Disposable() {}\\n\" + \" Disposable.prototype.bar \u003d function() {};\",\"assignment to property bar of Disposable.prototype\\n\" + \"found   : function (): undefined\\n\" + \"required: number\");\n}",
    "begin_line": 3738,
    "end_line": 3744,
    "comment": "",
    "child_ranges": [
      "(line 3739,col 5)-(line 3743,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplements6()",
    "snippet": "public void testBadImplements6() throws Exception {\n  testClosureTypesMultipleWarnings(\"function Disposable() {}\\n\" + \" Disposable.prototype.bar \u003d 3;\",Lists.newArrayList(\"assignment to property bar of Disposable.prototype\\n\" + \"found   : number\\n\" + \"required: function (): ?\",\"interface members can only be empty property declarations, \" + \"empty functions, or goog.abstractMethod\"));\n}",
    "begin_line": 3746,
    "end_line": 3756,
    "comment": "",
    "child_ranges": [
      "(line 3747,col 5)-(line 3755,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceExtends()",
    "snippet": "public void testInterfaceExtends() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\\n\" + \" function derived() {}\");\n}",
    "begin_line": 3758,
    "end_line": 3764,
    "comment": "",
    "child_ranges": [
      "(line 3759,col 5)-(line 3763,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtends1()",
    "snippet": "public void testBadInterfaceExtends1() throws Exception {\n  testTypes(\"function A() {}\",\"Bad type annotation. Unknown type nonExistent\");\n}",
    "begin_line": 3766,
    "end_line": 3769,
    "comment": "",
    "child_ranges": [
      "(line 3767,col 5)-(line 3768,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtendsNonExistentInterfaces()",
    "snippet": "public void testBadInterfaceExtendsNonExistentInterfaces() throws Exception {\n  String js\u003d\"function A() {}\";\n  String[] expectedWarnings\u003d{\"Bad type annotation. Unknown type nonExistent1\",\"Bad type annotation. Unknown type nonExistent2\"};\n  testTypes(js,expectedWarnings);\n}",
    "begin_line": 3771,
    "end_line": 3781,
    "comment": "",
    "child_ranges": [
      "(line 3772,col 5)-(line 3775,col 29)",
      "(line 3776,col 5)-(line 3779,col 6)",
      "(line 3780,col 5)-(line 3780,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtends2()",
    "snippet": "public void testBadInterfaceExtends2() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\",\"B cannot extend this type; interfaces can only extend interfaces\");\n}",
    "begin_line": 3783,
    "end_line": 3787,
    "comment": "",
    "child_ranges": [
      "(line 3784,col 5)-(line 3786,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtends3()",
    "snippet": "public void testBadInterfaceExtends3() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\",\"B cannot extend this type; constructors can only extend constructors\");\n}",
    "begin_line": 3789,
    "end_line": 3793,
    "comment": "",
    "child_ranges": [
      "(line 3790,col 5)-(line 3792,col 80)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtends4()",
    "snippet": "public void testBadInterfaceExtends4() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\\n\" + \"B.prototype \u003d A;\");\n}",
    "begin_line": 3795,
    "end_line": 3802,
    "comment": "",
    "child_ranges": [
      "(line 3799,col 5)-(line 3801,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadInterfaceExtends5()",
    "snippet": "public void testBadInterfaceExtends5() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\\n\" + \"B.prototype \u003d A;\");\n}",
    "begin_line": 3804,
    "end_line": 3811,
    "comment": "",
    "child_ranges": [
      "(line 3808,col 5)-(line 3810,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplementsAConstructor()",
    "snippet": "public void testBadImplementsAConstructor() throws Exception {\n  testTypes(\"function A() {}\\n\" + \"function B() {}\",\"can only implement interfaces\");\n}",
    "begin_line": 3813,
    "end_line": 3817,
    "comment": "",
    "child_ranges": [
      "(line 3814,col 5)-(line 3816,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplementsNonInterfaceType()",
    "snippet": "public void testBadImplementsNonInterfaceType() throws Exception {\n  testTypes(\"function B() {}\",\"can only implement interfaces\");\n}",
    "begin_line": 3819,
    "end_line": 3822,
    "comment": "",
    "child_ranges": [
      "(line 3820,col 5)-(line 3821,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadImplementsNonObjectType()",
    "snippet": "public void testBadImplementsNonObjectType() throws Exception {\n  testTypes(\"function S() {}\",\"can only implement interfaces\");\n}",
    "begin_line": 3824,
    "end_line": 3827,
    "comment": "",
    "child_ranges": [
      "(line 3825,col 5)-(line 3826,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment1()",
    "snippet": "public void testInterfaceAssignment1() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\" + \"var t \u003d new T();\\n\"+ \"var i \u003d t;\");\n}",
    "begin_line": 3829,
    "end_line": 3834,
    "comment": "",
    "child_ranges": [
      "(line 3830,col 5)-(line 3833,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment2()",
    "snippet": "public void testInterfaceAssignment2() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\" + \"var t \u003d new T();\\n\"+ \"var i \u003d t;\",\"initializing variable\\n\" + \"found   : T\\n\" + \"required: I\");\n}",
    "begin_line": 3836,
    "end_line": 3844,
    "comment": "",
    "child_ranges": [
      "(line 3837,col 5)-(line 3843,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment3()",
    "snippet": "public void testInterfaceAssignment3() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\" + \"var t \u003d new T();\\n\"+ \"var i \u003d t;\");\n}",
    "begin_line": 3846,
    "end_line": 3851,
    "comment": "",
    "child_ranges": [
      "(line 3847,col 5)-(line 3850,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment4()",
    "snippet": "public void testInterfaceAssignment4() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\"+ \"var t \u003d new T();\\n\"+ \"var i \u003d t;\");\n}",
    "begin_line": 3853,
    "end_line": 3859,
    "comment": "",
    "child_ranges": [
      "(line 3854,col 5)-(line 3858,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment5()",
    "snippet": "public void testInterfaceAssignment5() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"\"+ \"var T \u003d function() {};\\n\"+ \"var t \u003d new T();\\n\"+ \"var i1 \u003d t;\\n\"+ \"var i2 \u003d t;\\n\");\n}",
    "begin_line": 3861,
    "end_line": 3869,
    "comment": "",
    "child_ranges": [
      "(line 3862,col 5)-(line 3868,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment6()",
    "snippet": "public void testInterfaceAssignment6() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\"+ \"var i1 \u003d new T();\\n\"+ \"var i2 \u003d i1;\\n\",\"initializing variable\\n\" + \"found   : I1\\n\" + \"required: I2\");\n}",
    "begin_line": 3871,
    "end_line": 3880,
    "comment": "",
    "child_ranges": [
      "(line 3872,col 5)-(line 3879,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment7()",
    "snippet": "public void testInterfaceAssignment7() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\"+ \"var t \u003d new T();\\n\"+ \"var i1 \u003d t;\\n\"+ \"var i2 \u003d t;\\n\"+ \"i1 \u003d i2;\\n\");\n}",
    "begin_line": 3882,
    "end_line": 3890,
    "comment": "",
    "child_ranges": [
      "(line 3883,col 5)-(line 3889,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment8()",
    "snippet": "public void testInterfaceAssignment8() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var i;\\n\" + \"var o \u003d i;\\n\"+ \"new Object().prototype \u003d i.prototype;\");\n}",
    "begin_line": 3892,
    "end_line": 3897,
    "comment": "",
    "child_ranges": [
      "(line 3893,col 5)-(line 3896,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment9()",
    "snippet": "public void testInterfaceAssignment9() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"function f() { return null; }\\n\" + \"var i \u003d f();\\n\",\"initializing variable\\n\" + \"found   : (I|null)\\n\" + \"required: I\");\n}",
    "begin_line": 3899,
    "end_line": 3906,
    "comment": "",
    "child_ranges": [
      "(line 3900,col 5)-(line 3905,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment10()",
    "snippet": "public void testInterfaceAssignment10() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\"+ \"function f() { return new T(); }\\n\"+ \"var i1 \u003d f();\\n\",\"initializing variable\\n\" + \"found   : (I1|I2)\\n\" + \"required: I1\");\n}",
    "begin_line": 3908,
    "end_line": 3917,
    "comment": "",
    "child_ranges": [
      "(line 3909,col 5)-(line 3916,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment11()",
    "snippet": "public void testInterfaceAssignment11() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \"var I2 \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\"+ \"function f() { return new T(); }\\n\"+ \"var i1 \u003d f();\\n\",\"initializing variable\\n\" + \"found   : (I1|I2|T)\\n\" + \"required: I1\");\n}",
    "begin_line": 3919,
    "end_line": 3928,
    "comment": "",
    "child_ranges": [
      "(line 3920,col 5)-(line 3927,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment12()",
    "snippet": "public void testInterfaceAssignment12() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var T1 \u003d function() {};\\n\" + \"var T2 \u003d function() {};\\n\"+ \"function f() { return new T2(); }\");\n}",
    "begin_line": 3930,
    "end_line": 3935,
    "comment": "",
    "child_ranges": [
      "(line 3931,col 5)-(line 3934,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceAssignment13()",
    "snippet": "public void testInterfaceAssignment13() throws Exception {\n  testTypes(\"var I \u003d function() {};\\n\" + \"var T \u003d function() {};\\n\" + \"function Super() {};\\n\"+ \"Super.prototype.foo \u003d \"+ \"function() { return new T(); };\\n\"+ \"function Sub() {}\\n\"+ \"Sub.prototype.foo \u003d \"+ \"function() { return new T(); };\\n\");\n}",
    "begin_line": 3937,
    "end_line": 3946,
    "comment": "",
    "child_ranges": [
      "(line 3938,col 5)-(line 3945,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetprop1()",
    "snippet": "public void testGetprop1() throws Exception {\n  testTypes(\"function foo(){foo().bar;}\",\"No properties on this expression\\n\" + \"found   : undefined\\n\" + \"required: Object\");\n}",
    "begin_line": 3948,
    "end_line": 3953,
    "comment": "",
    "child_ranges": [
      "(line 3949,col 5)-(line 3952,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetprop2()",
    "snippet": "public void testGetprop2() throws Exception {\n  testTypes(\"var x \u003d null; x.alert();\",\"No properties on this expression\\n\" + \"found   : null\\n\" + \"required: Object\");\n}",
    "begin_line": 3955,
    "end_line": 3960,
    "comment": "",
    "child_ranges": [
      "(line 3956,col 5)-(line 3959,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetprop3()",
    "snippet": "public void testGetprop3() throws Exception {\n  testTypes(\" \" + \"function Foo() {  this.x \u003d null; }\" + \"Foo.prototype.initX \u003d function() { this.x \u003d {foo: 1}; };\"+ \"Foo.prototype.bar \u003d function() {\"+ \"  if (this.x \u003d\u003d null) { this.initX(); alert(this.x.foo); }\"+ \"};\");\n}",
    "begin_line": 3962,
    "end_line": 3970,
    "comment": "",
    "child_ranges": [
      "(line 3963,col 5)-(line 3969,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetprop4()",
    "snippet": "public void testGetprop4() throws Exception {\n  testTypes(\"var x \u003d null; x.prop \u003d 3;\",\"No properties on this expression\\n\" + \"found   : null\\n\" + \"required: Object\");\n}",
    "begin_line": 3972,
    "end_line": 3977,
    "comment": "",
    "child_ranges": [
      "(line 3973,col 5)-(line 3976,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop1()",
    "snippet": "public void testSetprop1() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() { this.x \u003d 123; }\");\n}",
    "begin_line": 3979,
    "end_line": 3986,
    "comment": "",
    "child_ranges": [
      "(line 3981,col 5)-(line 3985,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop2()",
    "snippet": "public void testSetprop2() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"(new Foo()).x \u003d 123;\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 3988,
    "end_line": 3998,
    "comment": "",
    "child_ranges": [
      "(line 3990,col 5)-(line 3997,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop3()",
    "snippet": "public void testSetprop3() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"(function() { (new Foo()).x \u003d 123; })();\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4000,
    "end_line": 4010,
    "comment": "",
    "child_ranges": [
      "(line 4002,col 5)-(line 4009,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop4()",
    "snippet": "public void testSetprop4() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() { this.x \u003d 123; }\\n\"+ \"(new Foo()).x \u003d \\\"asdf\\\";\");\n}",
    "begin_line": 4012,
    "end_line": 4020,
    "comment": "",
    "child_ranges": [
      "(line 4014,col 5)-(line 4019,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop5()",
    "snippet": "public void testSetprop5() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"(true ? new Foo() : {}).x \u003d 123;\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4022,
    "end_line": 4032,
    "comment": "",
    "child_ranges": [
      "(line 4024,col 5)-(line 4031,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop6()",
    "snippet": "public void testSetprop6() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"\\n\"+ \"function Bar(f) { f.x \u003d 123; }\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4034,
    "end_line": 4048,
    "comment": "",
    "child_ranges": [
      "(line 4036,col 5)-(line 4047,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop7()",
    "snippet": "public void testSetprop7() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {\\n\"+ \"  var t \u003d this;\\n\"+ \"  t.x \u003d 123;\\n\"+ \"}\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4050,
    "end_line": 4062,
    "comment": "",
    "child_ranges": [
      "(line 4052,col 5)-(line 4061,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop8()",
    "snippet": "public void testSetprop8() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"(new Foo()).x--;\",new String[]{\"Property x never defined on Foo\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\"});\n}",
    "begin_line": 4064,
    "end_line": 4077,
    "comment": "",
    "child_ranges": [
      "(line 4066,col 5)-(line 4076,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop9()",
    "snippet": "public void testSetprop9() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"(new Foo()).x +\u003d 123;\",new String[]{\"Property x never defined on Foo\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\"});\n}",
    "begin_line": 4079,
    "end_line": 4092,
    "comment": "",
    "child_ranges": [
      "(line 4081,col 5)-(line 4091,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop10()",
    "snippet": "public void testSetprop10() throws Exception {\n  testTypes(\" \\n\"+ \"function Square(side) { \\n\"+ \"  this.side \u003d side; \\n\"+ \"} \\n\"+ \"Square.prototype \u003d  {\\n\"+ \"  area: function() { return this.side * this.side; }\\n\"+ \"};\\n\"+ \"Square.prototype.id \u003d function(x) { return x; };\\n\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4094,
    "end_line": 4109,
    "comment": "",
    "child_ranges": [
      "(line 4096,col 5)-(line 4108,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSetprop11()",
    "snippet": "public void testSetprop11() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"function Bar() {}\\n\"+ \"Bar.prototype \u003d new Foo();\\n\"+ \"Bar.prototype.someprop \u003d 123;\\n\",\"Cannot add a property to a struct instance \" + \"after it is constructed.\");\n}",
    "begin_line": 4111,
    "end_line": 4122,
    "comment": "",
    "child_ranges": [
      "(line 4112,col 5)-(line 4121,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict1()",
    "snippet": "public void testGetpropDict1() throws Exception {\n  testTypes(\"\"+ \"function Dict1(){ this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function takesDict(x) { return x.prop; }\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4124,
    "end_line": 4133,
    "comment": "",
    "child_ranges": [
      "(line 4125,col 5)-(line 4132,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict2()",
    "snippet": "public void testGetpropDict2() throws Exception {\n  testTypes(\"\"+ \"function Dict1(){ this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function Dict1kid(){ this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function takesDict(x) { return x.prop; }\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4135,
    "end_line": 4149,
    "comment": "",
    "child_ranges": [
      "(line 4136,col 5)-(line 4148,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict3()",
    "snippet": "public void testGetpropDict3() throws Exception {\n  testTypes(\"\"+ \"function Dict1() { this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function NonDict() { this.prop \u003d 321; }\"+ \"\"+ \"function takesDict(x) { return x.prop; }\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4151,
    "end_line": 4162,
    "comment": "",
    "child_ranges": [
      "(line 4152,col 5)-(line 4161,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict4()",
    "snippet": "public void testGetpropDict4() throws Exception {\n  testTypes(\"\"+ \"function Dict1() { this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function Struct1() { this.prop \u003d 123; }\"+ \"\"+ \"function takesNothing(x) { return x.prop; }\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4164,
    "end_line": 4178,
    "comment": "",
    "child_ranges": [
      "(line 4165,col 5)-(line 4177,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict5()",
    "snippet": "public void testGetpropDict5() throws Exception {\n  testTypes(\"\"+ \"function Dict1(){ this.prop \u003d 123; }\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4180,
    "end_line": 4187,
    "comment": "",
    "child_ranges": [
      "(line 4181,col 5)-(line 4186,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict6()",
    "snippet": "public void testGetpropDict6() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"function Bar() {}\\n\"+ \"Bar.prototype \u003d new Foo();\\n\"+ \"Bar.prototype.someprop \u003d 123;\\n\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4189,
    "end_line": 4199,
    "comment": "",
    "child_ranges": [
      "(line 4190,col 5)-(line 4198,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetpropDict7()",
    "snippet": "public void testGetpropDict7() throws Exception {\n  testTypes(\"( {\u0027x\u0027: 123}).x \u003d 321;\",\"Cannot do \u0027.\u0027 access on a dict\");\n}",
    "begin_line": 4201,
    "end_line": 4204,
    "comment": "",
    "child_ranges": [
      "(line 4202,col 5)-(line 4203,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct1()",
    "snippet": "public void testGetelemStruct1() throws Exception {\n  testTypes(\"\"+ \"function Struct1(){ this.prop \u003d 123; }\"+ \"\"+ \"function takesStruct(x) {\"+ \"  var z \u003d x;\"+ \"  return z[\u0027prop\u0027];\"+ \"}\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4206,
    "end_line": 4218,
    "comment": "",
    "child_ranges": [
      "(line 4207,col 5)-(line 4217,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct2()",
    "snippet": "public void testGetelemStruct2() throws Exception {\n  testTypes(\"\"+ \"function Struct1(){ this.prop \u003d 123; }\"+ \"\"+ \"function Struct1kid(){ this.prop \u003d 123; }\"+ \"\"+ \"function takesStruct2(x) { return x[\u0027prop\u0027]; }\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4220,
    "end_line": 4234,
    "comment": "",
    "child_ranges": [
      "(line 4221,col 5)-(line 4233,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct3()",
    "snippet": "public void testGetelemStruct3() throws Exception {\n  testTypes(\"\"+ \"function Struct1(){ this.prop \u003d 123; }\"+ \"\"+ \"function Struct1kid(){ this.prop \u003d 123; }\"+ \"var x \u003d (new Struct1kid())[\u0027prop\u0027];\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4236,
    "end_line": 4249,
    "comment": "",
    "child_ranges": [
      "(line 4237,col 5)-(line 4248,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct4()",
    "snippet": "public void testGetelemStruct4() throws Exception {\n  testTypes(\"\"+ \"function Struct1() { this.prop \u003d 123; }\"+ \"\"+ \"function NonStruct() { this.prop \u003d 321; }\"+ \"\"+ \"function takesStruct(x) { return x[\u0027prop\u0027]; }\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4251,
    "end_line": 4262,
    "comment": "",
    "child_ranges": [
      "(line 4252,col 5)-(line 4261,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct5()",
    "snippet": "public void testGetelemStruct5() throws Exception {\n  testTypes(\"\"+ \"function Struct1() { this.prop \u003d 123; }\"+ \"\"+ \"function Dict1() { this[\u0027prop\u0027] \u003d 123; }\"+ \"\"+ \"function takesNothing(x) { return x[\u0027prop\u0027]; }\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4264,
    "end_line": 4278,
    "comment": "",
    "child_ranges": [
      "(line 4265,col 5)-(line 4277,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct6()",
    "snippet": "public void testGetelemStruct6() throws Exception {\n  testTypes(\" function Foo(){}\\n\" + \"\"+ \"function Bar(){ this.x \u003d 123; }\\n\"+ \"var z \u003d (new Bar)[\u0027x\u0027];\");\n}",
    "begin_line": 4280,
    "end_line": 4290,
    "comment": "",
    "child_ranges": [
      "(line 4282,col 5)-(line 4289,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetelemStruct7()",
    "snippet": "public void testGetelemStruct7() throws Exception {\n  testTypes(\"\\n\"+ \"function Foo() {}\\n\"+ \"function Bar() {}\\n\"+ \"Bar.prototype \u003d new Foo();\\n\"+ \"Bar.prototype[\u0027someprop\u0027] \u003d 123;\\n\",\"Cannot do \u0027[]\u0027 access on a struct\");\n}",
    "begin_line": 4292,
    "end_line": 4302,
    "comment": "",
    "child_ranges": [
      "(line 4293,col 5)-(line 4301,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInOnStruct()",
    "snippet": "public void testInOnStruct() throws Exception {\n  testTypes(\"\"+ \"function Foo() {}\\n\"+ \"if (\u0027prop\u0027 in (new Foo())) {}\",\"Cannot use the IN operator with structs\");\n}",
    "begin_line": 4304,
    "end_line": 4312,
    "comment": "",
    "child_ranges": [
      "(line 4305,col 5)-(line 4311,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForinOnStruct()",
    "snippet": "public void testForinOnStruct() throws Exception {\n  testTypes(\"\"+ \"function Foo() {}\\n\"+ \"for (var prop in (new Foo())) {}\",\"Cannot use the IN operator with structs\");\n}",
    "begin_line": 4314,
    "end_line": 4322,
    "comment": "",
    "child_ranges": [
      "(line 4315,col 5)-(line 4321,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess1()",
    "snippet": "public void testArrayAccess1() throws Exception {\n  testTypes(\"var a \u003d []; var b \u003d a[\u0027hi\u0027];\");\n}",
    "begin_line": 4324,
    "end_line": 4326,
    "comment": "",
    "child_ranges": [
      "(line 4325,col 5)-(line 4325,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess2()",
    "snippet": "public void testArrayAccess2() throws Exception {\n  testTypes(\"var a \u003d []; var b \u003d a[[1,2]];\",\"array access\\n\" + \"found   : Array\\n\" + \"required: number\");\n}",
    "begin_line": 4328,
    "end_line": 4333,
    "comment": "",
    "child_ranges": [
      "(line 4329,col 5)-(line 4332,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess3()",
    "snippet": "public void testArrayAccess3() throws Exception {\n  testTypes(\"var bar \u003d [];\" + \"function baz(){};\" + \"var foo \u003d bar[baz()];\",\"array access\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 4335,
    "end_line": 4342,
    "comment": "",
    "child_ranges": [
      "(line 4336,col 5)-(line 4341,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess4()",
    "snippet": "public void testArrayAccess4() throws Exception {\n  testTypes(\"function foo(){};var bar \u003d foo()[foo()];\",\"array access\\n\" + \"found   : Array\\n\" + \"required: number\");\n}",
    "begin_line": 4344,
    "end_line": 4349,
    "comment": "",
    "child_ranges": [
      "(line 4345,col 5)-(line 4348,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess6()",
    "snippet": "public void testArrayAccess6() throws Exception {\n  testTypes(\"var bar \u003d null[1];\",\"only arrays or objects can be accessed\\n\" + \"found   : null\\n\" + \"required: Object\");\n}",
    "begin_line": 4351,
    "end_line": 4356,
    "comment": "",
    "child_ranges": [
      "(line 4352,col 5)-(line 4355,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess7()",
    "snippet": "public void testArrayAccess7() throws Exception {\n  testTypes(\"var bar \u003d void 0; bar[0];\",\"only arrays or objects can be accessed\\n\" + \"found   : undefined\\n\" + \"required: Object\");\n}",
    "begin_line": 4358,
    "end_line": 4363,
    "comment": "",
    "child_ranges": [
      "(line 4359,col 5)-(line 4362,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess8()",
    "snippet": "public void testArrayAccess8() throws Exception {\n  testTypes(\"var bar \u003d void 0; bar[0]; bar[1];\",\"only arrays or objects can be accessed\\n\" + \"found   : undefined\\n\" + \"required: Object\");\n}",
    "begin_line": 4365,
    "end_line": 4372,
    "comment": "",
    "child_ranges": [
      "(line 4368,col 5)-(line 4371,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testArrayAccess9()",
    "snippet": "public void testArrayAccess9() throws Exception {\n  testTypes(\" function f() { return []; }\" + \"f()[{}]\",\"array access\\n\" + \"found   : {}\\n\" + \"required: number\");\n}",
    "begin_line": 4374,
    "end_line": 4380,
    "comment": "",
    "child_ranges": [
      "(line 4375,col 5)-(line 4379,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropAccess()",
    "snippet": "public void testPropAccess() throws Exception {\n  testTypes(\"var f \u003d function(x) {\\n\" + \"var o \u003d String(x);\\n\" + \"if (typeof o[\u0027a\u0027] !\u003d \u0027undefined\u0027) { return o[\u0027a\u0027]; }\\n\"+ \"return null;\\n\"+ \"};\");\n}",
    "begin_line": 4382,
    "end_line": 4388,
    "comment": "",
    "child_ranges": [
      "(line 4383,col 5)-(line 4387,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropAccess2()",
    "snippet": "public void testPropAccess2() throws Exception {\n  testTypes(\"var bar \u003d void 0; bar.baz;\",\"No properties on this expression\\n\" + \"found   : undefined\\n\" + \"required: Object\");\n}",
    "begin_line": 4390,
    "end_line": 4395,
    "comment": "",
    "child_ranges": [
      "(line 4391,col 5)-(line 4394,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropAccess3()",
    "snippet": "public void testPropAccess3() throws Exception {\n  testTypes(\"var bar \u003d void 0; bar.baz; bar.bax;\",\"No properties on this expression\\n\" + \"found   : undefined\\n\" + \"required: Object\");\n}",
    "begin_line": 4397,
    "end_line": 4404,
    "comment": "",
    "child_ranges": [
      "(line 4400,col 5)-(line 4403,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropAccess4()",
    "snippet": "public void testPropAccess4() throws Exception {\n  testTypes(\" function f(x) { return x[\u0027hi\u0027]; }\");\n}",
    "begin_line": 4406,
    "end_line": 4408,
    "comment": "",
    "child_ranges": [
      "(line 4407,col 5)-(line 4407,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase1()",
    "snippet": "public void testSwitchCase1() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"switch(a){case b:;}\",\"case expression doesn\u0027t match switch\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4410,
    "end_line": 4417,
    "comment": "",
    "child_ranges": [
      "(line 4411,col 5)-(line 4416,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase2()",
    "snippet": "public void testSwitchCase2() throws Exception {\n  testTypes(\"var a \u003d null; switch (typeof a) { case \u0027foo\u0027: }\");\n}",
    "begin_line": 4419,
    "end_line": 4421,
    "comment": "",
    "child_ranges": [
      "(line 4420,col 5)-(line 4420,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar1()",
    "snippet": "public void testVar1() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var a \u003d null\");\n  assertTypeEquals(createUnionType(STRING_TYPE,NULL_TYPE),p.scope.getVar(\"a\").getType());\n}",
    "begin_line": 4423,
    "end_line": 4429,
    "comment": "",
    "child_ranges": [
      "(line 4424,col 5)-(line 4425,col 79)",
      "(line 4427,col 5)-(line 4428,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar2()",
    "snippet": "public void testVar2() throws Exception {\n  testTypes(\" var a \u003d function(){}\");\n}",
    "begin_line": 4431,
    "end_line": 4433,
    "comment": "",
    "child_ranges": [
      "(line 4432,col 5)-(line 4432,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar3()",
    "snippet": "public void testVar3() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var a \u003d 3;\");\n  assertTypeEquals(NUMBER_TYPE,p.scope.getVar(\"a\").getType());\n}",
    "begin_line": 4435,
    "end_line": 4439,
    "comment": "",
    "child_ranges": [
      "(line 4436,col 5)-(line 4436,col 65)",
      "(line 4438,col 5)-(line 4438,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar4()",
    "snippet": "public void testVar4() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var a \u003d 3; a \u003d \u0027string\u0027;\");\n  assertTypeEquals(createUnionType(STRING_TYPE,NUMBER_TYPE),p.scope.getVar(\"a\").getType());\n}",
    "begin_line": 4441,
    "end_line": 4447,
    "comment": "",
    "child_ranges": [
      "(line 4442,col 5)-(line 4443,col 36)",
      "(line 4445,col 5)-(line 4446,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar5()",
    "snippet": "public void testVar5() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.foo \u003d \u0027hello\u0027;\" + \"var a \u003d goog.foo;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4449,
    "end_line": 4456,
    "comment": "",
    "child_ranges": [
      "(line 4450,col 5)-(line 4455,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar6()",
    "snippet": "public void testVar6() throws Exception {\n  testTypes(\"function f() {\" + \"  return function() {\" + \"    \"+ \"    var a \u003d 7;\"+ \"  };\"+ \"}\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: Date\");\n}",
    "begin_line": 4458,
    "end_line": 4469,
    "comment": "",
    "child_ranges": [
      "(line 4459,col 5)-(line 4468,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar7()",
    "snippet": "public void testVar7() throws Exception {\n  testTypes(\"var a, b;\",\"declaration of multiple variables with shared type information\");\n}",
    "begin_line": 4471,
    "end_line": 4474,
    "comment": "",
    "child_ranges": [
      "(line 4472,col 5)-(line 4473,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar8()",
    "snippet": "public void testVar8() throws Exception {\n  testTypes(\"var a, b;\");\n}",
    "begin_line": 4476,
    "end_line": 4478,
    "comment": "",
    "child_ranges": [
      "(line 4477,col 5)-(line 4477,col 27)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar9()",
    "snippet": "public void testVar9() throws Exception {\n  testTypes(\"var a;\",\"enum initializer must be an object literal or an enum\");\n}",
    "begin_line": 4480,
    "end_line": 4483,
    "comment": "",
    "child_ranges": [
      "(line 4481,col 5)-(line 4482,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar10()",
    "snippet": "public void testVar10() throws Exception {\n  testTypes(\"var foo \u003d \u0027abc\u0027;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: Number\");\n}",
    "begin_line": 4485,
    "end_line": 4490,
    "comment": "",
    "child_ranges": [
      "(line 4486,col 5)-(line 4489,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar11()",
    "snippet": "public void testVar11() throws Exception {\n  testTypes(\"var foo \u003d \u0027abc\u0027;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: Date\");\n}",
    "begin_line": 4492,
    "end_line": 4497,
    "comment": "",
    "child_ranges": [
      "(line 4493,col 5)-(line 4496,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar12()",
    "snippet": "public void testVar12() throws Exception {\n  testTypes(\"var foo \u003d \u0027abc\u0027, \" + \"bar \u003d 5;\",new String[]{\"initializing variable\\n\" + \"found   : string\\n\" + \"required: Date\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: RegExp\"});\n}",
    "begin_line": 4499,
    "end_line": 4509,
    "comment": "",
    "child_ranges": [
      "(line 4500,col 5)-(line 4508,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar13()",
    "snippet": "public void testVar13() throws Exception {\n  testTypes(\"var a,a;\");\n}",
    "begin_line": 4511,
    "end_line": 4514,
    "comment": "",
    "child_ranges": [
      "(line 4513,col 5)-(line 4513,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar14()",
    "snippet": "public void testVar14() throws Exception {\n  testTypes(\" function f() { var x; return x; }\",\"inconsistent return type\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 4516,
    "end_line": 4521,
    "comment": "",
    "child_ranges": [
      "(line 4517,col 5)-(line 4520,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testVar15()",
    "snippet": "public void testVar15() throws Exception {\n  testTypes(\"\" + \"function f() { var x \u003d x || {}; return x; }\",\"inconsistent return type\\n\" + \"found   : {}\\n\" + \"required: number\");\n}",
    "begin_line": 4523,
    "end_line": 4529,
    "comment": "",
    "child_ranges": [
      "(line 4524,col 5)-(line 4528,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssign1()",
    "snippet": "public void testAssign1() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.foo \u003d \u0027hello\u0027;\",\"assignment to property foo of goog\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4531,
    "end_line": 4537,
    "comment": "",
    "child_ranges": [
      "(line 4532,col 5)-(line 4536,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssign2()",
    "snippet": "public void testAssign2() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.foo \u003d 3;\" + \"goog.foo \u003d \u0027hello\u0027;\",\"assignment to property foo of goog\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4539,
    "end_line": 4546,
    "comment": "",
    "child_ranges": [
      "(line 4540,col 5)-(line 4545,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssign3()",
    "snippet": "public void testAssign3() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.foo \u003d 3;\" + \"goog.foo \u003d 4;\");\n}",
    "begin_line": 4548,
    "end_line": 4552,
    "comment": "",
    "child_ranges": [
      "(line 4549,col 5)-(line 4551,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssign4()",
    "snippet": "public void testAssign4() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.foo \u003d 3;\" + \"goog.foo \u003d \u0027hello\u0027;\");\n}",
    "begin_line": 4554,
    "end_line": 4558,
    "comment": "",
    "child_ranges": [
      "(line 4555,col 5)-(line 4557,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssignInference()",
    "snippet": "public void testAssignInference() throws Exception {\n  testTypes(\"\"+ \"function f(x) {\"+ \"  var y \u003d null;\"+ \"  y \u003d x[0];\"+ \"  if (y \u003d\u003d null) { return 4; } else { return 6; }\"+ \"}\");\n}",
    "begin_line": 4560,
    "end_line": 4571,
    "comment": "",
    "child_ranges": [
      "(line 4561,col 5)-(line 4570,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOr1()",
    "snippet": "public void testOr1() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a + b || undefined;\");\n}",
    "begin_line": 4573,
    "end_line": 4577,
    "comment": "",
    "child_ranges": [
      "(line 4574,col 5)-(line 4576,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOr2()",
    "snippet": "public void testOr2() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"var c \u003d a + b || undefined;\",\"initializing variable\\n\" + \"found   : (number|undefined)\\n\" + \"required: number\");\n}",
    "begin_line": 4579,
    "end_line": 4586,
    "comment": "",
    "child_ranges": [
      "(line 4580,col 5)-(line 4585,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOr3()",
    "snippet": "public void testOr3() throws Exception {\n  testTypes(\"var a;\" + \"var c \u003d a || 3;\");\n}",
    "begin_line": 4588,
    "end_line": 4591,
    "comment": "",
    "child_ranges": [
      "(line 4589,col 5)-(line 4590,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOr4()",
    "snippet": "public void testOr4() throws Exception {\n  testTypes(\"var x;x\u003dnull || \\\"a\\\";\",\"assignment\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4598,
    "end_line": 4603,
    "comment": "/** \n * Test that type inference continues with the right side, when no short-circuiting is possible. See bugid 1205387 for more details.\n */\n",
    "child_ranges": [
      "(line 4599,col 6)-(line 4602,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOr5()",
    "snippet": "public void testOr5() throws Exception {\n  testTypes(\"var x;x\u003dundefined || \\\"a\\\";\",\"assignment\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4608,
    "end_line": 4613,
    "comment": "/** \n * @see #testOr4()\n */\n",
    "child_ranges": [
      "(line 4609,col 6)-(line 4612,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd1()",
    "snippet": "public void testAnd1() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"a + b \u0026\u0026 undefined;\");\n}",
    "begin_line": 4615,
    "end_line": 4619,
    "comment": "",
    "child_ranges": [
      "(line 4616,col 5)-(line 4618,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd2()",
    "snippet": "public void testAnd2() throws Exception {\n  testTypes(\"var a;\" + \"var b;\" + \"var c \u003d a + b \u0026\u0026 undefined;\",\"initializing variable\\n\" + \"found   : (number|undefined)\\n\" + \"required: number\");\n}",
    "begin_line": 4621,
    "end_line": 4628,
    "comment": "",
    "child_ranges": [
      "(line 4622,col 5)-(line 4627,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd3()",
    "snippet": "public void testAnd3() throws Exception {\n  testTypes(\"var a;\" + \"var c \u003d a \u0026\u0026 undefined;\",\"initializing variable\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 4630,
    "end_line": 4636,
    "comment": "",
    "child_ranges": [
      "(line 4631,col 5)-(line 4635,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd4()",
    "snippet": "public void testAnd4() throws Exception {\n  testTypes(\"function f(x){};\\n\" + \"var x; var y;\\n\" + \"if (x \u0026\u0026 y) { f(y) }\");\n}",
    "begin_line": 4638,
    "end_line": 4642,
    "comment": "",
    "child_ranges": [
      "(line 4639,col 5)-(line 4641,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd5()",
    "snippet": "public void testAnd5() throws Exception {\n  testTypes(\"function f(x,y){};\\n\" + \"var x; var y;\\n\" + \"if (x \u0026\u0026 y) { f(x, y) }\");\n}",
    "begin_line": 4644,
    "end_line": 4648,
    "comment": "",
    "child_ranges": [
      "(line 4645,col 5)-(line 4647,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd6()",
    "snippet": "public void testAnd6() throws Exception {\n  testTypes(\"function f(x){};\\n\" + \"var x;\\n\" + \"if (x \u0026\u0026 f(x)) { f(x) }\");\n}",
    "begin_line": 4650,
    "end_line": 4654,
    "comment": "",
    "child_ranges": [
      "(line 4651,col 5)-(line 4653,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnd7()",
    "snippet": "public void testAnd7() throws Exception {\n  testTypes(\"var x; if (x \u0026\u0026 x) {}\");\n}",
    "begin_line": 4656,
    "end_line": 4662,
    "comment": "",
    "child_ranges": [
      "(line 4661,col 5)-(line 4661,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHook()",
    "snippet": "public void testHook() throws Exception {\n  testTypes(\"function foo(){ var x\u003dfoo()?a:b; }\");\n}",
    "begin_line": 4664,
    "end_line": 4666,
    "comment": "",
    "child_ranges": [
      "(line 4665,col 5)-(line 4665,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType1()",
    "snippet": "public void testHookRestrictsType1() throws Exception {\n  testTypes(\"\" + \"function f() { return null;}\" + \" var a \u003d f();\"+ \"\"+ \"var b \u003d a ? a : \u0027default\u0027;\");\n}",
    "begin_line": 4668,
    "end_line": 4674,
    "comment": "",
    "child_ranges": [
      "(line 4669,col 5)-(line 4673,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType2()",
    "snippet": "public void testHookRestrictsType2() throws Exception {\n  testTypes(\"\" + \"var a \u003d null;\" + \"\"+ \"var b \u003d a ? null : a;\");\n}",
    "begin_line": 4676,
    "end_line": 4681,
    "comment": "",
    "child_ranges": [
      "(line 4677,col 5)-(line 4680,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType3()",
    "snippet": "public void testHookRestrictsType3() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d (!a) ? a : null;\");\n}",
    "begin_line": 4683,
    "end_line": 4688,
    "comment": "",
    "child_ranges": [
      "(line 4684,col 5)-(line 4687,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType4()",
    "snippet": "public void testHookRestrictsType4() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d a !\u003d null ? a : true;\");\n}",
    "begin_line": 4690,
    "end_line": 4695,
    "comment": "",
    "child_ranges": [
      "(line 4691,col 5)-(line 4694,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType5()",
    "snippet": "public void testHookRestrictsType5() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d a \u003d\u003d null ? a : undefined;\");\n}",
    "begin_line": 4697,
    "end_line": 4702,
    "comment": "",
    "child_ranges": [
      "(line 4698,col 5)-(line 4701,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType6()",
    "snippet": "public void testHookRestrictsType6() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d a \u003d\u003d null ? 5 : a;\");\n}",
    "begin_line": 4704,
    "end_line": 4709,
    "comment": "",
    "child_ranges": [
      "(line 4705,col 5)-(line 4708,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHookRestrictsType7()",
    "snippet": "public void testHookRestrictsType7() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d a \u003d\u003d undefined ? 5 : a;\");\n}",
    "begin_line": 4711,
    "end_line": 4716,
    "comment": "",
    "child_ranges": [
      "(line 4712,col 5)-(line 4715,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWhileRestrictsType1()",
    "snippet": "public void testWhileRestrictsType1() throws Exception {\n  testTypes(\" function g(x) {}\" + \"\\n\" + \"function f(x) {\\n\"+ \"while (x) {\\n\"+ \"if (g(x)) { x \u003d 1; }\\n\"+ \"x \u003d x-1;\\n}\\n}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: null\");\n}",
    "begin_line": 4718,
    "end_line": 4728,
    "comment": "",
    "child_ranges": [
      "(line 4719,col 5)-(line 4727,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWhileRestrictsType2()",
    "snippet": "public void testWhileRestrictsType2() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) {\\nvar y \u003d 0;\" + \"while (x) {\\n\"+ \"y \u003d x;\\n\"+ \"x \u003d x-1;\\n}\\n\"+ \"return y;}\");\n}",
    "begin_line": 4730,
    "end_line": 4737,
    "comment": "",
    "child_ranges": [
      "(line 4731,col 5)-(line 4736,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHigherOrderFunctions1()",
    "snippet": "public void testHigherOrderFunctions1() throws Exception {\n  testTypes(\"var f;\" + \"f(true);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 4739,
    "end_line": 4746,
    "comment": "",
    "child_ranges": [
      "(line 4740,col 5)-(line 4745,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHigherOrderFunctions2()",
    "snippet": "public void testHigherOrderFunctions2() throws Exception {\n  testTypes(\"var f;\" + \"var a \u003d f();\",\"initializing variable\\n\" + \"found   : Date\\n\" + \"required: boolean\");\n}",
    "begin_line": 4748,
    "end_line": 4755,
    "comment": "",
    "child_ranges": [
      "(line 4749,col 5)-(line 4754,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHigherOrderFunctions3()",
    "snippet": "public void testHigherOrderFunctions3() throws Exception {\n  testTypes(\"var f; new f\",\"cannot instantiate non-constructor\");\n}",
    "begin_line": 4757,
    "end_line": 4761,
    "comment": "",
    "child_ranges": [
      "(line 4758,col 5)-(line 4760,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHigherOrderFunctions4()",
    "snippet": "public void testHigherOrderFunctions4() throws Exception {\n  testTypes(\"var f; new f\",\"cannot instantiate non-constructor\");\n}",
    "begin_line": 4763,
    "end_line": 4767,
    "comment": "",
    "child_ranges": [
      "(line 4764,col 5)-(line 4766,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testHigherOrderFunctions5()",
    "snippet": "public void testHigherOrderFunctions5() throws Exception {\n  testTypes(\" function g(x) {}\" + \" var f;\" + \"g(new f());\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : Error\\n\" + \"required: number\");\n}",
    "begin_line": 4769,
    "end_line": 4777,
    "comment": "",
    "child_ranges": [
      "(line 4770,col 5)-(line 4776,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias1()",
    "snippet": "public void testConstructorAlias1() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" Foo.prototype.bar \u003d 3;\" + \" var FooAlias \u003d Foo;\"+ \" function foo() { \"+ \"  return (new FooAlias()).bar; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 4779,
    "end_line": 4789,
    "comment": "",
    "child_ranges": [
      "(line 4780,col 5)-(line 4788,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias2()",
    "snippet": "public void testConstructorAlias2() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" var FooAlias \u003d Foo;\" + \" FooAlias.prototype.bar \u003d 3;\"+ \" function foo() { \"+ \"  return (new Foo()).bar; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 4791,
    "end_line": 4801,
    "comment": "",
    "child_ranges": [
      "(line 4792,col 5)-(line 4800,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias3()",
    "snippet": "public void testConstructorAlias3() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" Foo.prototype.bar \u003d 3;\" + \" var FooAlias \u003d Foo;\"+ \" function foo() { \"+ \"  return (new FooAlias()).bar; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 4803,
    "end_line": 4813,
    "comment": "",
    "child_ranges": [
      "(line 4804,col 5)-(line 4812,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias4()",
    "snippet": "public void testConstructorAlias4() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \"var FooAlias \u003d Foo;\" + \" FooAlias.prototype.bar \u003d 3;\"+ \" function foo() { \"+ \"  return (new Foo()).bar; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 4815,
    "end_line": 4825,
    "comment": "",
    "child_ranges": [
      "(line 4816,col 5)-(line 4824,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias5()",
    "snippet": "public void testConstructorAlias5() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" var FooAlias \u003d Foo;\" + \" function foo() { \"+ \"  return new Foo(); }\");\n}",
    "begin_line": 4827,
    "end_line": 4833,
    "comment": "",
    "child_ranges": [
      "(line 4828,col 5)-(line 4832,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias6()",
    "snippet": "public void testConstructorAlias6() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" var FooAlias \u003d Foo;\" + \" function foo() { \"+ \"  return new FooAlias(); }\");\n}",
    "begin_line": 4835,
    "end_line": 4841,
    "comment": "",
    "child_ranges": [
      "(line 4836,col 5)-(line 4840,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias7()",
    "snippet": "public void testConstructorAlias7() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Foo \u003d function() {};\" + \" goog.FooAlias \u003d goog.Foo;\"+ \" function foo() { \"+ \"  return new goog.FooAlias(); }\",\"inconsistent return type\\n\" + \"found   : goog.Foo\\n\" + \"required: number\");\n}",
    "begin_line": 4843,
    "end_line": 4853,
    "comment": "",
    "child_ranges": [
      "(line 4844,col 5)-(line 4852,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias8()",
    "snippet": "public void testConstructorAlias8() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" \" + \"goog.Foo \u003d function(x) {};\"+ \" \"+ \"goog.FooAlias \u003d goog.Foo;\"+ \" function foo() { \"+ \"  return new goog.FooAlias(1); }\",\"inconsistent return type\\n\" + \"found   : goog.Foo\\n\" + \"required: number\");\n}",
    "begin_line": 4855,
    "end_line": 4867,
    "comment": "",
    "child_ranges": [
      "(line 4856,col 5)-(line 4866,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias9()",
    "snippet": "public void testConstructorAlias9() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" \" + \"goog.Foo \u003d function(x) {};\"+ \" goog.FooAlias \u003d goog.Foo;\"+ \" function foo() { \"+ \"  return new goog.FooAlias(1); }\",\"inconsistent return type\\n\" + \"found   : goog.Foo\\n\" + \"required: number\");\n}",
    "begin_line": 4869,
    "end_line": 4880,
    "comment": "",
    "child_ranges": [
      "(line 4870,col 5)-(line 4879,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorAlias10()",
    "snippet": "public void testConstructorAlias10() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(x) {};\" + \" var FooAlias \u003d Foo;\"+ \" function foo() { \"+ \"  return new FooAlias(1); }\",\"inconsistent return type\\n\" + \"found   : Foo\\n\" + \"required: number\");\n}",
    "begin_line": 4882,
    "end_line": 4892,
    "comment": "",
    "child_ranges": [
      "(line 4883,col 5)-(line 4891,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure1()",
    "snippet": "public void testClosure1() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d goog.isDef(a) ? a : \u0027default\u0027;\",null);\n}",
    "begin_line": 4894,
    "end_line": 4901,
    "comment": "",
    "child_ranges": [
      "(line 4895,col 5)-(line 4900,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure2()",
    "snippet": "public void testClosure2() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d goog.isNull(a) ? \u0027default\u0027 : a;\",null);\n}",
    "begin_line": 4903,
    "end_line": 4910,
    "comment": "",
    "child_ranges": [
      "(line 4904,col 5)-(line 4909,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure3()",
    "snippet": "public void testClosure3() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d goog.isDefAndNotNull(a) ? a : \u0027default\u0027;\",null);\n}",
    "begin_line": 4912,
    "end_line": 4919,
    "comment": "",
    "child_ranges": [
      "(line 4913,col 5)-(line 4918,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure4()",
    "snippet": "public void testClosure4() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d !goog.isDef(a) ? \u0027default\u0027 : a;\",null);\n}",
    "begin_line": 4921,
    "end_line": 4928,
    "comment": "",
    "child_ranges": [
      "(line 4922,col 5)-(line 4927,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure5()",
    "snippet": "public void testClosure5() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d !goog.isNull(a) ? a : \u0027default\u0027;\",null);\n}",
    "begin_line": 4930,
    "end_line": 4937,
    "comment": "",
    "child_ranges": [
      "(line 4931,col 5)-(line 4936,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure6()",
    "snippet": "public void testClosure6() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"var a;\" + \"\"+ \"var b \u003d !goog.isDefAndNotNull(a) ? \u0027default\u0027 : a;\",null);\n}",
    "begin_line": 4939,
    "end_line": 4946,
    "comment": "",
    "child_ranges": [
      "(line 4940,col 5)-(line 4945,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosure7()",
    "snippet": "public void testClosure7() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" var a \u003d foo();\" + \"\"+ \"var b \u003d goog.asserts.assert(a);\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 4948,
    "end_line": 4957,
    "comment": "",
    "child_ranges": [
      "(line 4949,col 5)-(line 4956,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn1()",
    "snippet": "public void testReturn1() throws Exception {\n  testTypes(\"function foo(){ return 3; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: undefined\");\n}",
    "begin_line": 4959,
    "end_line": 4964,
    "comment": "",
    "child_ranges": [
      "(line 4960,col 5)-(line 4963,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn2()",
    "snippet": "public void testReturn2() throws Exception {\n  testTypes(\"function foo(){ return; }\",\"inconsistent return type\\n\" + \"found   : undefined\\n\" + \"required: Number\");\n}",
    "begin_line": 4966,
    "end_line": 4971,
    "comment": "",
    "child_ranges": [
      "(line 4967,col 5)-(line 4970,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn3()",
    "snippet": "public void testReturn3() throws Exception {\n  testTypes(\"function foo(){ return \u0027abc\u0027; }\",\"inconsistent return type\\n\" + \"found   : string\\n\" + \"required: Number\");\n}",
    "begin_line": 4973,
    "end_line": 4978,
    "comment": "",
    "child_ranges": [
      "(line 4974,col 5)-(line 4977,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn4()",
    "snippet": "public void testReturn4() throws Exception {\n  testTypes(\"\\n function a(){return new Array();}\",\"inconsistent return type\\n\" + \"found   : Array\\n\" + \"required: Number\");\n}",
    "begin_line": 4980,
    "end_line": 4985,
    "comment": "",
    "child_ranges": [
      "(line 4981,col 5)-(line 4984,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn5()",
    "snippet": "public void testReturn5() throws Exception {\n  testTypes(\"function n(n){return};\");\n}",
    "begin_line": 4987,
    "end_line": 4990,
    "comment": "",
    "child_ranges": [
      "(line 4988,col 5)-(line 4989,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn6()",
    "snippet": "public void testReturn6() throws Exception {\n  testTypes(\"\" + \"function a(opt_a) { return opt_a }\",\"inconsistent return type\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 4992,
    "end_line": 4999,
    "comment": "",
    "child_ranges": [
      "(line 4993,col 5)-(line 4998,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn7()",
    "snippet": "public void testReturn7() throws Exception {\n  testTypes(\"var A \u003d function() {};\\n\" + \"var B \u003d function() {};\\n\" + \"A.f \u003d function() { return 1; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: B\");\n}",
    "begin_line": 5001,
    "end_line": 5008,
    "comment": "",
    "child_ranges": [
      "(line 5002,col 5)-(line 5007,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReturn8()",
    "snippet": "public void testReturn8() throws Exception {\n  testTypes(\"var A \u003d function() {};\\n\" + \"var B \u003d function() {};\\n\" + \"A.prototype.f \u003d function() { return 1; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: B\");\n}",
    "begin_line": 5010,
    "end_line": 5017,
    "comment": "",
    "child_ranges": [
      "(line 5011,col 5)-(line 5016,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn1()",
    "snippet": "public void testInferredReturn1() throws Exception {\n  testTypes(\"function f() {}  function g(x) {}\" + \"g(f());\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 5019,
    "end_line": 5026,
    "comment": "",
    "child_ranges": [
      "(line 5020,col 5)-(line 5025,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn2()",
    "snippet": "public void testInferredReturn2() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() {}; \" + \" function g(x) {}\"+ \"g((new Foo()).bar());\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : undefined\\n\" + \"required: number\");\n}",
    "begin_line": 5028,
    "end_line": 5037,
    "comment": "",
    "child_ranges": [
      "(line 5029,col 5)-(line 5036,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn3()",
    "snippet": "public void testInferredReturn3() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() {}; \" + \" function SubFoo() {}\"+ \" \"+ \"SubFoo.prototype.bar \u003d function() { return 3; }; \",\"mismatch of the bar property type and the type of the property \" + \"it overrides from superclass Foo\\n\" + \"original: function (this:Foo): undefined\\n\"+ \"override: function (this:SubFoo): number\");\n}",
    "begin_line": 5039,
    "end_line": 5050,
    "comment": "",
    "child_ranges": [
      "(line 5040,col 5)-(line 5049,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn4()",
    "snippet": "public void testInferredReturn4() throws Exception {\n  testTypes(\"var x \u003d function() {};\" + \"x \u003d  (function() { return 3; });\",\"assignment\\n\" + \"found   : function (): number\\n\" + \"required: function (): undefined\");\n}",
    "begin_line": 5052,
    "end_line": 5062,
    "comment": "",
    "child_ranges": [
      "(line 5056,col 5)-(line 5061,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn5()",
    "snippet": "public void testInferredReturn5() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \"  var x \u003d function() {};\"+ \"  x \u003d  (function() { return 3; });\"+ \"  return x();\"+ \"}\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5064,
    "end_line": 5076,
    "comment": "",
    "child_ranges": [
      "(line 5066,col 5)-(line 5075,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn6()",
    "snippet": "public void testInferredReturn6() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \"  var x \u003d function() {};\"+ \"  if (f()) \"+ \"    x \u003d  \"+ \"        (function() { return 3; });\"+ \"  return x();\"+ \"}\",\"inconsistent return type\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5078,
    "end_line": 5091,
    "comment": "",
    "child_ranges": [
      "(line 5079,col 5)-(line 5090,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn7()",
    "snippet": "public void testInferredReturn7() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\" + \"Foo.prototype.bar \u003d function(x) { return 3; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: undefined\");\n}",
    "begin_line": 5093,
    "end_line": 5101,
    "comment": "",
    "child_ranges": [
      "(line 5094,col 5)-(line 5100,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredReturn8()",
    "snippet": "public void testInferredReturn8() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\" + \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function(x) { return 3; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: undefined\");\n}",
    "begin_line": 5103,
    "end_line": 5114,
    "comment": "",
    "child_ranges": [
      "(line 5104,col 5)-(line 5104,col 44)",
      "(line 5105,col 5)-(line 5113,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam1()",
    "snippet": "public void testInferredParam1() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\" + \" function f(x) {}\"+ \"Foo.prototype.bar \u003d function(y) { f(y); };\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5116,
    "end_line": 5125,
    "comment": "",
    "child_ranges": [
      "(line 5117,col 5)-(line 5124,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam2()",
    "snippet": "public void testInferredParam2() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function(x) { f(x); }\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5127,
    "end_line": 5139,
    "comment": "",
    "child_ranges": [
      "(line 5128,col 5)-(line 5128,col 44)",
      "(line 5129,col 5)-(line 5138,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam3()",
    "snippet": "public void testInferredParam3() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function(x) { f(x); }; (new SubFoo()).bar();\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5141,
    "end_line": 5153,
    "comment": "",
    "child_ranges": [
      "(line 5142,col 5)-(line 5142,col 44)",
      "(line 5143,col 5)-(line 5152,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam4()",
    "snippet": "public void testInferredParam4() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function(x) { f(x); }; (new SubFoo()).bar();\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5155,
    "end_line": 5167,
    "comment": "",
    "child_ranges": [
      "(line 5156,col 5)-(line 5156,col 44)",
      "(line 5157,col 5)-(line 5166,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam5()",
    "snippet": "public void testInferredParam5() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\"+ \" function SubFoo() {}\"+ \" \"+ \"SubFoo.prototype.bar \u003d \"+ \"    function(x, y) { f(x); }; (new SubFoo()).bar();\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5169,
    "end_line": 5182,
    "comment": "",
    "child_ranges": [
      "(line 5170,col 5)-(line 5170,col 44)",
      "(line 5171,col 5)-(line 5181,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam6()",
    "snippet": "public void testInferredParam6() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\"+ \" function SubFoo() {}\"+ \" \"+ \"SubFoo.prototype.bar \u003d \"+ \"    function(x, y) { f(y); };\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5184,
    "end_line": 5197,
    "comment": "",
    "child_ranges": [
      "(line 5185,col 5)-(line 5185,col 44)",
      "(line 5186,col 5)-(line 5196,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInferredParam7()",
    "snippet": "public void testInferredParam7() throws Exception {\n  testTypes(\" function f(x) {}\" + \"var bar \u003d  (\" + \"    function(x, y) { f(y); });\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (number|undefined)\\n\" + \"required: string\");\n}",
    "begin_line": 5199,
    "end_line": 5207,
    "comment": "",
    "child_ranges": [
      "(line 5200,col 5)-(line 5206,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams1()",
    "snippet": "public void testOverriddenParams1() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(var_args) {};\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function(x) {};\");\n}",
    "begin_line": 5209,
    "end_line": 5223,
    "comment": "",
    "child_ranges": [
      "(line 5210,col 5)-(line 5222,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams2()",
    "snippet": "public void testOverriddenParams2() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(var_args) {};\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function(x) {};\");\n}",
    "begin_line": 5225,
    "end_line": 5239,
    "comment": "",
    "child_ranges": [
      "(line 5226,col 5)-(line 5238,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams3()",
    "snippet": "public void testOverriddenParams3() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(var_args) { };\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function(x) {};\",\"mismatch of the bar property type and the type of the \" + \"property it overrides from superclass Foo\\n\" + \"original: function (this:Foo, ...[number]): undefined\\n\"+ \"override: function (this:SubFoo, number): undefined\");\n}",
    "begin_line": 5241,
    "end_line": 5259,
    "comment": "",
    "child_ranges": [
      "(line 5242,col 5)-(line 5258,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams4()",
    "snippet": "public void testOverriddenParams4() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(var_args) {};\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function(x) {};\",\"mismatch of the bar property type and the type of the \" + \"property it overrides from superclass Foo\\n\" + \"original: function (...[number]): ?\\n\"+ \"override: function (number): ?\");\n}",
    "begin_line": 5261,
    "end_line": 5279,
    "comment": "",
    "child_ranges": [
      "(line 5262,col 5)-(line 5278,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams5()",
    "snippet": "public void testOverriddenParams5() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(x) { };\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function() {};\"+ \"(new SubFoo()).bar();\");\n}",
    "begin_line": 5281,
    "end_line": 5295,
    "comment": "",
    "child_ranges": [
      "(line 5282,col 5)-(line 5294,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenParams6()",
    "snippet": "public void testOverriddenParams6() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d function(x) { };\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d function() {};\"+ \"(new SubFoo()).bar(true);\",\"actual parameter 1 of SubFoo.prototype.bar \" + \"does not match formal parameter\\n\" + \"found   : boolean\\n\"+ \"required: number\");\n}",
    "begin_line": 5297,
    "end_line": 5315,
    "comment": "",
    "child_ranges": [
      "(line 5298,col 5)-(line 5314,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenReturn1()",
    "snippet": "public void testOverriddenReturn1() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d \" + \"    function() { return {}; };\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function() { return new Foo(); }\",\"inconsistent return type\\n\" + \"found   : Foo\\n\" + \"required: (SubFoo|null)\");\n}",
    "begin_line": 5317,
    "end_line": 5328,
    "comment": "",
    "child_ranges": [
      "(line 5318,col 5)-(line 5327,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenReturn2()",
    "snippet": "public void testOverriddenReturn2() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d \" + \"    function() { return new SubFoo(); };\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d \"+ \"    function() { return new SubFoo(); }\",\"mismatch of the bar property type and the type of the \" + \"property it overrides from superclass Foo\\n\" + \"original: function (this:Foo): (SubFoo|null)\\n\"+ \"override: function (this:SubFoo): (Foo|null)\");\n}",
    "begin_line": 5330,
    "end_line": 5342,
    "comment": "",
    "child_ranges": [
      "(line 5331,col 5)-(line 5341,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis1()",
    "snippet": "public void testThis1() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.A \u003d function(){};\" + \"\"+ \"goog.A.prototype.n \u003d function() { return this };\",\"inconsistent return type\\n\" + \"found   : goog.A\\n\" + \"required: number\");\n}",
    "begin_line": 5344,
    "end_line": 5352,
    "comment": "",
    "child_ranges": [
      "(line 5345,col 5)-(line 5351,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty1()",
    "snippet": "public void testOverriddenProperty1() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\" + \"Foo.prototype.bar \u003d {};\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d [];\");\n}",
    "begin_line": 5354,
    "end_line": 5368,
    "comment": "",
    "child_ranges": [
      "(line 5355,col 5)-(line 5367,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty2()",
    "snippet": "public void testOverriddenProperty2() throws Exception {\n  testTypes(\" function Foo() {\" + \"  \" + \"  this.bar \u003d {};\"+ \"}\"+ \" function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.bar \u003d [];\");\n}",
    "begin_line": 5370,
    "end_line": 5385,
    "comment": "",
    "child_ranges": [
      "(line 5371,col 5)-(line 5384,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty3()",
    "snippet": "public void testOverriddenProperty3() throws Exception {\n  testTypes(\" function Foo() {\" + \"}\" + \" Foo.prototype.data;\"+ \" function SubFoo() {}\"+ \" \"+ \"SubFoo.prototype.data \u003d null;\",\"mismatch of the data property type and the type \" + \"of the property it overrides from superclass Foo\\n\" + \"original: string\\n\"+ \"override: (Object|null|string)\");\n}",
    "begin_line": 5387,
    "end_line": 5402,
    "comment": "",
    "child_ranges": [
      "(line 5388,col 5)-(line 5401,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty4()",
    "snippet": "public void testOverriddenProperty4() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d null;\" + \" function SubFoo() {}\"+ \"SubFoo.prototype.bar \u003d 3;\");\n}",
    "begin_line": 5404,
    "end_line": 5414,
    "comment": "",
    "child_ranges": [
      "(line 5406,col 5)-(line 5413,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty5()",
    "snippet": "public void testOverriddenProperty5() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d null;\" + \" function SubFoo() {}\"+ \" SubFoo.prototype.bar \u003d 3;\");\n}",
    "begin_line": 5416,
    "end_line": 5426,
    "comment": "",
    "child_ranges": [
      "(line 5418,col 5)-(line 5425,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testOverriddenProperty6()",
    "snippet": "public void testOverriddenProperty6() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d null;\" + \" function SubFoo() {}\"+ \"SubFoo.prototype.bar \u003d 3;\");\n}",
    "begin_line": 5428,
    "end_line": 5439,
    "comment": "",
    "child_ranges": [
      "(line 5431,col 5)-(line 5438,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis2()",
    "snippet": "public void testThis2() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.A \u003d function(){\" + \"  this.foo \u003d null;\"+ \"};\"+ \"\"+ \"goog.A.prototype.n \u003d function() { return this.foo };\",\"inconsistent return type\\n\" + \"found   : null\\n\" + \"required: number\");\n}",
    "begin_line": 5441,
    "end_line": 5451,
    "comment": "",
    "child_ranges": [
      "(line 5442,col 5)-(line 5450,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis3()",
    "snippet": "public void testThis3() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.A \u003d function(){\" + \"  this.foo \u003d null;\"+ \"  this.foo \u003d 5;\"+ \"};\");\n}",
    "begin_line": 5453,
    "end_line": 5459,
    "comment": "",
    "child_ranges": [
      "(line 5454,col 5)-(line 5458,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis4()",
    "snippet": "public void testThis4() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.A \u003d function(){\" + \"  this.foo \u003d null;\"+ \"};\"+ \"goog.A.prototype.n \u003d function() {\"+ \"  return this.foo };\",\"inconsistent return type\\n\" + \"found   : (null|string)\\n\" + \"required: number\");\n}",
    "begin_line": 5461,
    "end_line": 5471,
    "comment": "",
    "child_ranges": [
      "(line 5462,col 5)-(line 5470,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis5()",
    "snippet": "public void testThis5() throws Exception {\n  testTypes(\"function h() { return this }\",\"inconsistent return type\\n\" + \"found   : Date\\n\" + \"required: number\");\n}",
    "begin_line": 5473,
    "end_line": 5478,
    "comment": "",
    "child_ranges": [
      "(line 5474,col 5)-(line 5477,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis6()",
    "snippet": "public void testThis6() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"\" + \"goog.A \u003d function(){ return this };\",\"inconsistent return type\\n\" + \"found   : goog.A\\n\" + \"required: Date\");\n}",
    "begin_line": 5480,
    "end_line": 5487,
    "comment": "",
    "child_ranges": [
      "(line 5481,col 5)-(line 5486,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis7()",
    "snippet": "public void testThis7() throws Exception {\n  testTypes(\"function A(){};\" + \"A.prototype.n \u003d function() { return this };\",\"inconsistent return type\\n\" + \"found   : A\\n\" + \"required: number\");\n}",
    "begin_line": 5489,
    "end_line": 5495,
    "comment": "",
    "child_ranges": [
      "(line 5490,col 5)-(line 5494,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis8()",
    "snippet": "public void testThis8() throws Exception {\n  testTypes(\"function A(){\" + \"  this.foo \u003d null;\" + \"};\"+ \"A.prototype.n \u003d function() {\"+ \"  return this.foo };\",\"inconsistent return type\\n\" + \"found   : (null|string)\\n\" + \"required: number\");\n}",
    "begin_line": 5497,
    "end_line": 5506,
    "comment": "",
    "child_ranges": [
      "(line 5498,col 5)-(line 5505,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis9()",
    "snippet": "public void testThis9() throws Exception {\n  testTypes(\"function A(){};\" + \"A.prototype.foo \u003d 3;\" + \" A.bar \u003d function() { return this.foo; };\");\n}",
    "begin_line": 5508,
    "end_line": 5513,
    "comment": "",
    "child_ranges": [
      "(line 5510,col 5)-(line 5512,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis10()",
    "snippet": "public void testThis10() throws Exception {\n  testTypes(\"function A(){};\" + \"A.prototype.foo \u003d 3;\" + \"\"+ \"A.bar \u003d function() { return this.foo; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5515,
    "end_line": 5524,
    "comment": "",
    "child_ranges": [
      "(line 5517,col 5)-(line 5523,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis11()",
    "snippet": "public void testThis11() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function Ctor() {\" + \"  \"+ \"  this.method \u003d function() {\"+ \"    f(this);\"+ \"  };\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : Date\\n\" + \"required: number\");\n}",
    "begin_line": 5526,
    "end_line": 5538,
    "comment": "",
    "child_ranges": [
      "(line 5527,col 5)-(line 5537,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis12()",
    "snippet": "public void testThis12() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function Ctor() {}\" + \"Ctor.prototype[\u0027method\u0027] \u003d function() {\"+ \"  f(this);\"+ \"}\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : Ctor\\n\" + \"required: number\");\n}",
    "begin_line": 5540,
    "end_line": 5550,
    "comment": "",
    "child_ranges": [
      "(line 5541,col 5)-(line 5549,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis13()",
    "snippet": "public void testThis13() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function Ctor() {}\" + \"Ctor.prototype \u003d {\"+ \"  method: function() {\"+ \"    f(this);\"+ \"  }\"+ \"};\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : Ctor\\n\" + \"required: number\");\n}",
    "begin_line": 5552,
    "end_line": 5564,
    "comment": "",
    "child_ranges": [
      "(line 5553,col 5)-(line 5563,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThis14()",
    "snippet": "public void testThis14() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f(this.Object);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : function (new:Object, *\u003d): ?\\n\" + \"required: number\");\n}",
    "begin_line": 5566,
    "end_line": 5573,
    "comment": "",
    "child_ranges": [
      "(line 5567,col 5)-(line 5572,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThisTypeOfFunction1()",
    "snippet": "public void testThisTypeOfFunction1() throws Exception {\n  testTypes(\" function f() {}\" + \"f();\");\n}",
    "begin_line": 5575,
    "end_line": 5579,
    "comment": "",
    "child_ranges": [
      "(line 5576,col 5)-(line 5578,col 16)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThisTypeOfFunction2()",
    "snippet": "public void testThisTypeOfFunction2() throws Exception {\n  testTypes(\" function F() {}\" + \" function f() {}\" + \"f();\",\"\\\"function (this:F): ?\\\" must be called with a \\\"this\\\" type\");\n}",
    "begin_line": 5581,
    "end_line": 5587,
    "comment": "",
    "child_ranges": [
      "(line 5582,col 5)-(line 5586,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThisTypeOfFunction3()",
    "snippet": "public void testThisTypeOfFunction3() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.bar \u003d function() {};\" + \"var f \u003d (new F()).bar; f();\",\"\\\"function (this:F): undefined\\\" must be called with a \\\"this\\\" type\");\n}",
    "begin_line": 5589,
    "end_line": 5595,
    "comment": "",
    "child_ranges": [
      "(line 5590,col 5)-(line 5594,col 80)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testThisTypeOfFunction4()",
    "snippet": "public void testThisTypeOfFunction4() throws Exception {\n  testTypes(\" function F() {}\" + \"F.prototype.moveTo \u003d function(x, y) {};\" + \"F.prototype.lineTo \u003d function(x, y) {};\"+ \"function demo() {\"+ \"  var path \u003d new F();\"+ \"  var points \u003d [[1,1], [2,2]];\"+ \"  for (var i \u003d 0; i \u003c points.length; i++) {\"+ \"    (i \u003d\u003d 0 ? path.moveTo : path.lineTo)(\"+ \"       points[i][0], points[i][1]);\"+ \"  }\"+ \"}\",\"\\\"function (this:F, ?, ?): undefined\\\" \" + \"must be called with a \\\"this\\\" type\");\n}",
    "begin_line": 5597,
    "end_line": 5612,
    "comment": "",
    "child_ranges": [
      "(line 5598,col 5)-(line 5611,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis1()",
    "snippet": "public void testGlobalThis1() throws Exception {\n  testTypes(\" function Window() {}\" + \" \" + \"Window.prototype.alert \u003d function(msg) {};\"+ \"this.alert(3);\",\"actual parameter 1 of Window.prototype.alert \" + \"does not match formal parameter\\n\" + \"found   : number\\n\"+ \"required: string\");\n}",
    "begin_line": 5614,
    "end_line": 5623,
    "comment": "",
    "child_ranges": [
      "(line 5615,col 5)-(line 5622,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis2()",
    "snippet": "public void testGlobalThis2() throws Exception {\n  testTypes(\" function Bindow() {}\" + \" \" + \"Bindow.prototype.alert \u003d function(msg) {};\"+ \"this.alert \u003d 3;\"+ \"(new Bindow()).alert(this.alert)\");\n}",
    "begin_line": 5625,
    "end_line": 5632,
    "comment": "",
    "child_ranges": [
      "(line 5627,col 5)-(line 5631,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis2b()",
    "snippet": "public void testGlobalThis2b() throws Exception {\n  testTypes(\" function Bindow() {}\" + \" \" + \"Bindow.prototype.alert \u003d function(msg) {};\"+ \" this.alert \u003d function() { return 3; };\"+ \"(new Bindow()).alert(this.alert())\",\"actual parameter 1 of Bindow.prototype.alert \" + \"does not match formal parameter\\n\" + \"found   : number\\n\"+ \"required: string\");\n}",
    "begin_line": 5635,
    "end_line": 5645,
    "comment": "",
    "child_ranges": [
      "(line 5636,col 5)-(line 5644,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis3()",
    "snippet": "public void testGlobalThis3() throws Exception {\n  testTypes(\" \" + \"function alert(msg) {};\" + \"this.alert(3);\",\"actual parameter 1 of global this.alert \" + \"does not match formal parameter\\n\" + \"found   : number\\n\"+ \"required: string\");\n}",
    "begin_line": 5647,
    "end_line": 5656,
    "comment": "",
    "child_ranges": [
      "(line 5648,col 5)-(line 5655,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis4()",
    "snippet": "public void testGlobalThis4() throws Exception {\n  testTypes(\" \" + \"var alert \u003d function(msg) {};\" + \"this.alert(3);\",\"actual parameter 1 of global this.alert \" + \"does not match formal parameter\\n\" + \"found   : number\\n\"+ \"required: string\");\n}",
    "begin_line": 5658,
    "end_line": 5667,
    "comment": "",
    "child_ranges": [
      "(line 5659,col 5)-(line 5666,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis5()",
    "snippet": "public void testGlobalThis5() throws Exception {\n  testTypes(\"function f() {\" + \"   \" + \"  var alert \u003d function(msg) {};\"+ \"}\"+ \"this.alert(3);\",\"Property alert never defined on global this\");\n}",
    "begin_line": 5669,
    "end_line": 5677,
    "comment": "",
    "child_ranges": [
      "(line 5670,col 5)-(line 5676,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis6()",
    "snippet": "public void testGlobalThis6() throws Exception {\n  testTypes(\" \" + \"var alert \u003d function(msg) {};\" + \"var x \u003d 3;\"+ \"x \u003d \u0027msg\u0027;\"+ \"this.alert(this.x);\");\n}",
    "begin_line": 5679,
    "end_line": 5686,
    "comment": "",
    "child_ranges": [
      "(line 5680,col 5)-(line 5685,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis7()",
    "snippet": "public void testGlobalThis7() throws Exception {\n  testTypes(\" function Window() {}\" + \" \" + \"var foo \u003d function(msg) {};\"+ \"foo(this);\");\n}",
    "begin_line": 5688,
    "end_line": 5694,
    "comment": "",
    "child_ranges": [
      "(line 5689,col 5)-(line 5693,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis8()",
    "snippet": "public void testGlobalThis8() throws Exception {\n  testTypes(\" function Window() {}\" + \" \" + \"var foo \u003d function(msg) {};\"+ \"foo(this);\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : global this\\n\" + \"required: number\");\n}",
    "begin_line": 5696,
    "end_line": 5705,
    "comment": "",
    "child_ranges": [
      "(line 5697,col 5)-(line 5704,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGlobalThis9()",
    "snippet": "public void testGlobalThis9() throws Exception {\n  testTypes(\"function Window() {}\" + \"Window.prototype.alert \u003d function() {};\" + \"this.alert();\",\"Property alert never defined on global this\");\n}",
    "begin_line": 5707,
    "end_line": 5715,
    "comment": "",
    "child_ranges": [
      "(line 5708,col 5)-(line 5714,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType1()",
    "snippet": "public void testControlFlowRestrictsType1() throws Exception {\n  testTypes(\" function f() { return null; }\" + \" var a \u003d f();\" + \" var b \u003d new String(\u0027foo\u0027);\"+ \" var c \u003d null;\"+ \"if (a) {\"+ \"  b \u003d a;\"+ \"} else {\"+ \"  c \u003d a;\"+ \"}\");\n}",
    "begin_line": 5717,
    "end_line": 5727,
    "comment": "",
    "child_ranges": [
      "(line 5718,col 5)-(line 5726,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType2()",
    "snippet": "public void testControlFlowRestrictsType2() throws Exception {\n  testTypes(\" function f() { return null; }\" + \" var a \u003d f();\" + \" var b \u003d \u0027foo\u0027;\"+ \" var c \u003d null;\"+ \"if (a) {\"+ \"  b \u003d a;\"+ \"} else {\"+ \"  c \u003d a;\"+ \"}\",\"assignment\\n\" + \"found   : (null|string)\\n\" + \"required: null\");\n}",
    "begin_line": 5729,
    "end_line": 5742,
    "comment": "",
    "child_ranges": [
      "(line 5730,col 5)-(line 5741,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType3()",
    "snippet": "public void testControlFlowRestrictsType3() throws Exception {\n  testTypes(\"\" + \"var a;\" + \"\"+ \"var b \u003d \u0027foo\u0027;\"+ \"if (a) {\"+ \"  b \u003d a;\"+ \"}\");\n}",
    "begin_line": 5744,
    "end_line": 5752,
    "comment": "",
    "child_ranges": [
      "(line 5745,col 5)-(line 5751,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType4()",
    "snippet": "public void testControlFlowRestrictsType4() throws Exception {\n  testTypes(\" function f(a){}\" + \" var a;\" + \"a \u0026\u0026 f(a);\");\n}",
    "begin_line": 5754,
    "end_line": 5758,
    "comment": "",
    "child_ranges": [
      "(line 5755,col 5)-(line 5757,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType5()",
    "snippet": "public void testControlFlowRestrictsType5() throws Exception {\n  testTypes(\" function f(a){}\" + \" var a;\" + \"a || f(a);\");\n}",
    "begin_line": 5760,
    "end_line": 5764,
    "comment": "",
    "child_ranges": [
      "(line 5761,col 5)-(line 5763,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType6()",
    "snippet": "public void testControlFlowRestrictsType6() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var a;\" + \"a \u0026\u0026 f(a);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: undefined\");\n}",
    "begin_line": 5766,
    "end_line": 5773,
    "comment": "",
    "child_ranges": [
      "(line 5767,col 5)-(line 5772,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType7()",
    "snippet": "public void testControlFlowRestrictsType7() throws Exception {\n  testTypes(\" function f(x) {}\" + \" var a;\" + \"a \u0026\u0026 f(a);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: undefined\");\n}",
    "begin_line": 5775,
    "end_line": 5782,
    "comment": "",
    "child_ranges": [
      "(line 5776,col 5)-(line 5781,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType8()",
    "snippet": "public void testControlFlowRestrictsType8() throws Exception {\n  testTypes(\" function f(a){}\" + \" var a;\" + \"if (a || f(a)) {}\");\n}",
    "begin_line": 5784,
    "end_line": 5788,
    "comment": "",
    "child_ranges": [
      "(line 5785,col 5)-(line 5787,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType9()",
    "snippet": "public void testControlFlowRestrictsType9() throws Exception {\n  testTypes(\"\\n\" + \"var f \u003d function(x) {\\n\" + \"if (!x || x \u003d\u003d 1) { return 1; } else { return x; }\\n\"+ \"};\");\n}",
    "begin_line": 5790,
    "end_line": 5795,
    "comment": "",
    "child_ranges": [
      "(line 5791,col 5)-(line 5794,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType10()",
    "snippet": "public void testControlFlowRestrictsType10() throws Exception {\n  testTypes(\" function f(x) {}\" + \"function g() {\" + \"  var y \u003d null;\"+ \"  for (var i \u003d 0; i \u003c 10; i++) {\"+ \"    f(y);\"+ \"    if (y !\u003d null) {\"+ \"",
    "begin_line": 5797,
    "end_line": 5815,
    "comment": "",
    "child_ranges": [
      "(line 5800,col 5)-(line 5814,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testControlFlowRestrictsType11()",
    "snippet": "public void testControlFlowRestrictsType11() throws Exception {\n  testTypes(\" function f(x) {}\" + \"function g() {\" + \"  var y \u003d null;\"+ \"  if (y !\u003d null) {\"+ \"    for (var i \u003d 0; i \u003c 10; i++) {\"+ \"      f(y);\"+ \"    }\"+ \"  }\"+ \"};\",\"condition always evaluates to false\\n\" + \"left : null\\n\" + \"right: null\");\n}",
    "begin_line": 5817,
    "end_line": 5830,
    "comment": "",
    "child_ranges": [
      "(line 5818,col 5)-(line 5829,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase3()",
    "snippet": "public void testSwitchCase3() throws Exception {\n  testTypes(\"\" + \"var a \u003d new String(\u0027foo\u0027);\" + \"switch (a) { case \u0027A\u0027: }\");\n}",
    "begin_line": 5832,
    "end_line": 5836,
    "comment": "",
    "child_ranges": [
      "(line 5833,col 5)-(line 5835,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase4()",
    "snippet": "public void testSwitchCase4() throws Exception {\n  testTypes(\"\" + \"var a \u003d \u0027foo\u0027;\" + \"switch (a) { case \u0027A\u0027:break; case null:break; }\");\n}",
    "begin_line": 5838,
    "end_line": 5842,
    "comment": "",
    "child_ranges": [
      "(line 5839,col 5)-(line 5841,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase5()",
    "snippet": "public void testSwitchCase5() throws Exception {\n  testTypes(\"\" + \"var a \u003d new String(\u0027foo\u0027);\" + \"switch (a) { case \u0027A\u0027:break; case null:break; }\");\n}",
    "begin_line": 5844,
    "end_line": 5848,
    "comment": "",
    "child_ranges": [
      "(line 5845,col 5)-(line 5847,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase6()",
    "snippet": "public void testSwitchCase6() throws Exception {\n  testTypes(\"\" + \"var a \u003d new Number(5);\" + \"switch (a) { case 5:break; case null:break; }\");\n}",
    "begin_line": 5850,
    "end_line": 5854,
    "comment": "",
    "child_ranges": [
      "(line 5851,col 5)-(line 5853,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase7()",
    "snippet": "public void testSwitchCase7() throws Exception {\n  testTypes(\"\\n\"+ \"function g(x) { return 5; }\"+ \"function f() {\"+ \"  var x \u003d {};\"+ \"  x.foo \u003d \u00273\u0027;\"+ \"  switch (3) { case g(x.foo): return 3; }\"+ \"}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 5856,
    "end_line": 5872,
    "comment": "",
    "child_ranges": [
      "(line 5858,col 5)-(line 5871,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSwitchCase8()",
    "snippet": "public void testSwitchCase8() throws Exception {\n  testTypes(\"\\n\"+ \"function g(x) { return 5; }\"+ \"function f() {\"+ \"  var x \u003d {};\"+ \"  x.foo \u003d \u00273\u0027;\"+ \"  switch (g(x.foo)) { case 3: return 3; }\"+ \"}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 5874,
    "end_line": 5890,
    "comment": "",
    "child_ranges": [
      "(line 5876,col 5)-(line 5889,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck1()",
    "snippet": "public void testNoTypeCheck1() throws Exception {\n  testTypes(\"function foo() { new 4 }\");\n}",
    "begin_line": 5892,
    "end_line": 5894,
    "comment": "",
    "child_ranges": [
      "(line 5893,col 5)-(line 5893,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck2()",
    "snippet": "public void testNoTypeCheck2() throws Exception {\n  testTypes(\"var foo \u003d function() { new 4 }\");\n}",
    "begin_line": 5896,
    "end_line": 5898,
    "comment": "",
    "child_ranges": [
      "(line 5897,col 5)-(line 5897,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck3()",
    "snippet": "public void testNoTypeCheck3() throws Exception {\n  testTypes(\"var foo \u003d function bar() { new 4 }\");\n}",
    "begin_line": 5900,
    "end_line": 5902,
    "comment": "",
    "child_ranges": [
      "(line 5901,col 5)-(line 5901,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck4()",
    "snippet": "public void testNoTypeCheck4() throws Exception {\n  testTypes(\"var foo;\" + \"foo \u003d function() { new 4 }\");\n}",
    "begin_line": 5904,
    "end_line": 5907,
    "comment": "",
    "child_ranges": [
      "(line 5905,col 5)-(line 5906,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck5()",
    "snippet": "public void testNoTypeCheck5() throws Exception {\n  testTypes(\"var foo;\" + \"foo \u003d function() { new 4 }\");\n}",
    "begin_line": 5909,
    "end_line": 5912,
    "comment": "",
    "child_ranges": [
      "(line 5910,col 5)-(line 5911,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck6()",
    "snippet": "public void testNoTypeCheck6() throws Exception {\n  testTypes(\"var foo;\" + \"foo \u003d function bar() { new 4 }\");\n}",
    "begin_line": 5914,
    "end_line": 5917,
    "comment": "",
    "child_ranges": [
      "(line 5915,col 5)-(line 5916,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck7()",
    "snippet": "public void testNoTypeCheck7() throws Exception {\n  testTypes(\"var foo;\" + \"foo \u003d function bar() { new 4 }\");\n}",
    "begin_line": 5919,
    "end_line": 5922,
    "comment": "",
    "child_ranges": [
      "(line 5920,col 5)-(line 5921,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck8()",
    "snippet": "public void testNoTypeCheck8() throws Exception {\n  testTypes(\" var foo;\" + \"var bar \u003d 3;  function f(x) {} f(bar);\");\n}",
    "begin_line": 5924,
    "end_line": 5927,
    "comment": "",
    "child_ranges": [
      "(line 5925,col 5)-(line 5926,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck9()",
    "snippet": "public void testNoTypeCheck9() throws Exception {\n  testTypes(\" function g() { }\" + \"  var a \u003d 1\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5929,
    "end_line": 5936,
    "comment": "",
    "child_ranges": [
      "(line 5930,col 5)-(line 5935,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck10()",
    "snippet": "public void testNoTypeCheck10() throws Exception {\n  testTypes(\" function g() { }\" + \" function h() { var a \u003d 1}\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5938,
    "end_line": 5945,
    "comment": "",
    "child_ranges": [
      "(line 5939,col 5)-(line 5944,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck11()",
    "snippet": "public void testNoTypeCheck11() throws Exception {\n  testTypes(\" function g() { }\" + \" function h() { var a \u003d 1}\");\n}",
    "begin_line": 5947,
    "end_line": 5951,
    "comment": "",
    "child_ranges": [
      "(line 5948,col 5)-(line 5950,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck12()",
    "snippet": "public void testNoTypeCheck12() throws Exception {\n  testTypes(\" function g() { }\" + \"function h() { var a \u003d 1}\");\n}",
    "begin_line": 5953,
    "end_line": 5957,
    "comment": "",
    "child_ranges": [
      "(line 5954,col 5)-(line 5956,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck13()",
    "snippet": "public void testNoTypeCheck13() throws Exception {\n  testTypes(\" function g() { }\" + \"function h() { var a \u003d 1;\" + \" var b \u003d 1}\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 5959,
    "end_line": 5967,
    "comment": "",
    "child_ranges": [
      "(line 5960,col 5)-(line 5966,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoTypeCheck14()",
    "snippet": "public void testNoTypeCheck14() throws Exception {\n  testTypes(\" function g() { }\" + \"g(1,2,3)\");\n}",
    "begin_line": 5969,
    "end_line": 5972,
    "comment": "",
    "child_ranges": [
      "(line 5970,col 5)-(line 5971,col 20)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testImplicitCast()",
    "snippet": "public void testImplicitCast() throws Exception {\n  testTypes(\" function Element() {};\\n\" + \"\"+ \"Element.prototype.innerHTML;\",\"(new Element).innerHTML \u003d new Array();\",null,false);\n}",
    "begin_line": 5974,
    "end_line": 5980,
    "comment": "",
    "child_ranges": [
      "(line 5975,col 5)-(line 5979,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testImplicitCastSubclassAccess()",
    "snippet": "public void testImplicitCastSubclassAccess() throws Exception {\n  testTypes(\" function Element() {};\\n\" + \"\"+ \"Element.prototype.innerHTML;\"+ \"\"+ \"function DIVElement() {};\",\"(new DIVElement).innerHTML \u003d new Array();\",null,false);\n}",
    "begin_line": 5982,
    "end_line": 5991,
    "comment": "",
    "child_ranges": [
      "(line 5983,col 5)-(line 5990,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testImplicitCastNotInExterns()",
    "snippet": "public void testImplicitCastNotInExterns() throws Exception {\n  testTypes(\" function Element() {};\\n\" + \"\"+ \"Element.prototype.innerHTML;\"+ \"(new Element).innerHTML \u003d new Array();\",new String[]{\"Illegal annotation on innerHTML. @implicitCast may only be \" + \"used in externs.\",\"assignment to property innerHTML of Element\\n\" + \"found   : Array\\n\" + \"required: string\"});\n}",
    "begin_line": 5993,
    "end_line": 6005,
    "comment": "",
    "child_ranges": [
      "(line 5994,col 5)-(line 6004,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumberNode()",
    "snippet": "public void testNumberNode() throws Exception {\n  Node n\u003dtypeCheck(Node.newNumber(0));\n  assertTypeEquals(NUMBER_TYPE,n.getJSType());\n}",
    "begin_line": 6007,
    "end_line": 6011,
    "comment": "",
    "child_ranges": [
      "(line 6008,col 5)-(line 6008,col 42)",
      "(line 6010,col 5)-(line 6010,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringNode()",
    "snippet": "public void testStringNode() throws Exception {\n  Node n\u003dtypeCheck(Node.newString(\"hello\"));\n  assertTypeEquals(STRING_TYPE,n.getJSType());\n}",
    "begin_line": 6013,
    "end_line": 6017,
    "comment": "",
    "child_ranges": [
      "(line 6014,col 5)-(line 6014,col 48)",
      "(line 6016,col 5)-(line 6016,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanNodeTrue()",
    "snippet": "public void testBooleanNodeTrue() throws Exception {\n  Node trueNode\u003dtypeCheck(new Node(Token.TRUE));\n  assertTypeEquals(BOOLEAN_TYPE,trueNode.getJSType());\n}",
    "begin_line": 6019,
    "end_line": 6023,
    "comment": "",
    "child_ranges": [
      "(line 6020,col 5)-(line 6020,col 52)",
      "(line 6022,col 5)-(line 6022,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanNodeFalse()",
    "snippet": "public void testBooleanNodeFalse() throws Exception {\n  Node falseNode\u003dtypeCheck(new Node(Token.FALSE));\n  assertTypeEquals(BOOLEAN_TYPE,falseNode.getJSType());\n}",
    "begin_line": 6025,
    "end_line": 6029,
    "comment": "",
    "child_ranges": [
      "(line 6026,col 5)-(line 6026,col 54)",
      "(line 6028,col 5)-(line 6028,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUndefinedNode()",
    "snippet": "public void testUndefinedNode() throws Exception {\n  Node p\u003dnew Node(Token.ADD);\n  Node n\u003dNode.newString(Token.NAME,\"undefined\");\n  p.addChildToBack(n);\n  p.addChildToBack(Node.newNumber(5));\n  typeCheck(p);\n  assertTypeEquals(VOID_TYPE,n.getJSType());\n}",
    "begin_line": 6031,
    "end_line": 6039,
    "comment": "",
    "child_ranges": [
      "(line 6032,col 5)-(line 6032,col 33)",
      "(line 6033,col 5)-(line 6033,col 53)",
      "(line 6034,col 5)-(line 6034,col 24)",
      "(line 6035,col 5)-(line 6035,col 40)",
      "(line 6036,col 5)-(line 6036,col 17)",
      "(line 6038,col 5)-(line 6038,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumberAutoboxing()",
    "snippet": "public void testNumberAutoboxing() throws Exception {\n  testTypes(\"var a \u003d 4;\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: (Number|null)\");\n}",
    "begin_line": 6041,
    "end_line": 6046,
    "comment": "",
    "child_ranges": [
      "(line 6042,col 5)-(line 6045,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNumberUnboxing()",
    "snippet": "public void testNumberUnboxing() throws Exception {\n  testTypes(\"var a \u003d new Number(4);\",\"initializing variable\\n\" + \"found   : Number\\n\" + \"required: number\");\n}",
    "begin_line": 6048,
    "end_line": 6053,
    "comment": "",
    "child_ranges": [
      "(line 6049,col 5)-(line 6052,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringAutoboxing()",
    "snippet": "public void testStringAutoboxing() throws Exception {\n  testTypes(\"var a \u003d \u0027hello\u0027;\",\"initializing variable\\n\" + \"found   : string\\n\" + \"required: (String|null)\");\n}",
    "begin_line": 6055,
    "end_line": 6060,
    "comment": "",
    "child_ranges": [
      "(line 6056,col 5)-(line 6059,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStringUnboxing()",
    "snippet": "public void testStringUnboxing() throws Exception {\n  testTypes(\"var a \u003d new String(\u0027hello\u0027);\",\"initializing variable\\n\" + \"found   : String\\n\" + \"required: string\");\n}",
    "begin_line": 6062,
    "end_line": 6067,
    "comment": "",
    "child_ranges": [
      "(line 6063,col 5)-(line 6066,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanAutoboxing()",
    "snippet": "public void testBooleanAutoboxing() throws Exception {\n  testTypes(\"var a \u003d true;\",\"initializing variable\\n\" + \"found   : boolean\\n\" + \"required: (Boolean|null)\");\n}",
    "begin_line": 6069,
    "end_line": 6074,
    "comment": "",
    "child_ranges": [
      "(line 6070,col 5)-(line 6073,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBooleanUnboxing()",
    "snippet": "public void testBooleanUnboxing() throws Exception {\n  testTypes(\"var a \u003d new Boolean(false);\",\"initializing variable\\n\" + \"found   : Boolean\\n\" + \"required: boolean\");\n}",
    "begin_line": 6076,
    "end_line": 6081,
    "comment": "",
    "child_ranges": [
      "(line 6077,col 5)-(line 6080,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIIFE1()",
    "snippet": "public void testIIFE1() throws Exception {\n  testTypes(\"var namespace \u003d {};\" + \" namespace.prop \u003d 3;\" + \"(function(ns) {\"+ \"  ns.prop \u003d true;\"+ \"})(namespace);\",\"assignment to property prop of ns\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6083,
    "end_line": 6093,
    "comment": "",
    "child_ranges": [
      "(line 6084,col 5)-(line 6092,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIIFE2()",
    "snippet": "public void testIIFE2() throws Exception {\n  testTypes(\" function Foo() {}\" + \"(function(ctor) {\" + \"   ctor.prop \u003d true;\"+ \"})(Foo);\"+ \" function f() { return Foo.prop; }\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6095,
    "end_line": 6105,
    "comment": "",
    "child_ranges": [
      "(line 6096,col 5)-(line 6104,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIIFE3()",
    "snippet": "public void testIIFE3() throws Exception {\n  testTypes(\" function Foo() {}\" + \"(function(ctor) {\" + \"   ctor.prop \u003d true;\"+ \"})(Foo);\"+ \" function f(x) {}\"+ \"f(Foo.prop);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6107,
    "end_line": 6118,
    "comment": "",
    "child_ranges": [
      "(line 6108,col 5)-(line 6117,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIIFE4()",
    "snippet": "public void testIIFE4() throws Exception {\n  testTypes(\" var namespace \u003d {};\" + \"(function(ns) {\" + \"  \\n\"+ \"   ns.Ctor \u003d function(x) {};\"+ \"})(namespace);\"+ \"new namespace.Ctor(true);\",\"actual parameter 1 of namespace.Ctor \" + \"does not match formal parameter\\n\" + \"found   : boolean\\n\"+ \"required: number\");\n}",
    "begin_line": 6120,
    "end_line": 6135,
    "comment": "",
    "child_ranges": [
      "(line 6121,col 5)-(line 6134,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIIFE5()",
    "snippet": "public void testIIFE5() throws Exception {\n  testTypes(\" var namespace \u003d {};\" + \"(function(ns) {\" + \"  \\n\"+ \"   ns.Ctor \u003d function() {};\"+ \"    ns.Ctor.prototype.bar \u003d true;\"+ \"})(namespace);\"+ \" function f(x) { return x.bar; }\",\"Bad type annotation. Unknown type namespace.Ctor\");\n}",
    "begin_line": 6137,
    "end_line": 6153,
    "comment": "",
    "child_ranges": [
      "(line 6141,col 5)-(line 6152,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNotIIFE1()",
    "snippet": "public void testNotIIFE1() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function g(x) {}\" + \"g(function(y) { f(y); }, true);\");\n}",
    "begin_line": 6155,
    "end_line": 6160,
    "comment": "",
    "child_ranges": [
      "(line 6156,col 5)-(line 6159,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue61()",
    "snippet": "public void testIssue61() throws Exception {\n  testTypes(\"var ns \u003d {};\" + \"(function() {\" + \"  \"+ \"  ns.a \u003d function(b) {};\"+ \"})();\"+ \"function d() {\"+ \"  ns.a(123);\"+ \"}\",\"actual parameter 1 of ns.a does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 6162,
    "end_line": 6175,
    "comment": "",
    "child_ranges": [
      "(line 6163,col 5)-(line 6174,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue61b()",
    "snippet": "public void testIssue61b() throws Exception {\n  testTypes(\"var ns \u003d {};\" + \"(function() {\" + \"  \"+ \"  ns.a \u003d function(b) {};\"+ \"})();\"+ \"ns.a(123);\",\"actual parameter 1 of ns.a does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 6177,
    "end_line": 6188,
    "comment": "",
    "child_ranges": [
      "(line 6178,col 5)-(line 6187,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue86()",
    "snippet": "public void testIssue86() throws Exception {\n  testTypes(\" function I() {}\" + \" I.prototype.get \u003d function(){};\" + \" function F() {}\"+ \" F.prototype.get \u003d function() { return true; };\",\"inconsistent return type\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6190,
    "end_line": 6199,
    "comment": "",
    "child_ranges": [
      "(line 6191,col 5)-(line 6198,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue124()",
    "snippet": "public void testIssue124() throws Exception {\n  testTypes(\"var t \u003d null;\" + \"function test() {\" + \"  if (t !\u003d null) { t \u003d null; }\"+ \"  t \u003d 1;\"+ \"}\");\n}",
    "begin_line": 6201,
    "end_line": 6208,
    "comment": "",
    "child_ranges": [
      "(line 6202,col 5)-(line 6207,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue124b()",
    "snippet": "public void testIssue124b() throws Exception {\n  testTypes(\"var t \u003d null;\" + \"function test() {\" + \"  if (t !\u003d null) { t \u003d null; }\"+ \"  t \u003d undefined;\"+ \"}\",\"condition always evaluates to false\\n\" + \"left : (null|undefined)\\n\" + \"right: null\");\n}",
    "begin_line": 6210,
    "end_line": 6220,
    "comment": "",
    "child_ranges": [
      "(line 6211,col 5)-(line 6219,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue259()",
    "snippet": "public void testIssue259() throws Exception {\n  testTypes(\" function f(x) {}\" + \"\" + \"var Clock \u003d function() {\"+ \"  \"+ \"  this.Date \u003d function() {};\"+ \"  f(new this.Date());\"+ \"};\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : this.Date\\n\" + \"required: number\");\n}",
    "begin_line": 6222,
    "end_line": 6234,
    "comment": "",
    "child_ranges": [
      "(line 6223,col 5)-(line 6233,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue301()",
    "snippet": "public void testIssue301() throws Exception {\n  testTypes(\"Array.indexOf \u003d function() {};\" + \"var s \u003d \u0027hello\u0027;\" + \"alert(s.toLowerCase.indexOf(\u00271\u0027));\",\"Property indexOf never defined on String.prototype.toLowerCase\");\n}",
    "begin_line": 6236,
    "end_line": 6242,
    "comment": "",
    "child_ranges": [
      "(line 6237,col 5)-(line 6241,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue368()",
    "snippet": "public void testIssue368() throws Exception {\n  testTypes(\" function Foo(){}\" + \"\\n\"+ \"Foo.prototype.add \u003d function(one, two) {};\"+ \"\\n\"+ \"function Bar(){}\"+ \"\\n\"+ \"Bar.prototype.add \u003d function(ignored) {};\"+ \"(new Bar()).add(1, 2);\",\"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 6244,
    "end_line": 6263,
    "comment": "",
    "child_ranges": [
      "(line 6245,col 5)-(line 6262,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue380()",
    "snippet": "public void testIssue380() throws Exception {\n  testTypes(\"\\n\" + \"document.getElementById;\\n\" + \"var list \u003d  [\u0027hello\u0027, \u0027you\u0027];\\n\"+ \"list.push(\u0027?\u0027);\\n\"+ \"document.getElementById(\u0027node\u0027).innerHTML \u003d list.toString();\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\");\n}",
    "begin_line": 6265,
    "end_line": 6275,
    "comment": "",
    "child_ranges": [
      "(line 6266,col 5)-(line 6274,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue483()",
    "snippet": "public void testIssue483() throws Exception {\n  testTypes(\" function C() {\" + \"   this.a \u003d [];\" + \"}\"+ \"C.prototype.f \u003d function() {\"+ \"  if (this.a.length \u003e 0) {\"+ \"    g(this.a);\"+ \"  }\"+ \"};\"+ \" function g(a) {}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : Array\\n\" + \"required: number\");\n}",
    "begin_line": 6277,
    "end_line": 6291,
    "comment": "",
    "child_ranges": [
      "(line 6278,col 5)-(line 6290,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue537a()",
    "snippet": "public void testIssue537a() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype \u003d {method: function() {}};\" + \"\\n\"+ \"function Bar() {\"+ \"  Foo.call(this);\"+ \"  if (this.baz()) this.method(1);\"+ \"}\"+ \"Bar.prototype \u003d {\"+ \"  baz: function() {\"+ \"    return true;\"+ \"  }\"+ \"};\"+ \"Bar.prototype.__proto__ \u003d Foo.prototype;\",\"Function Foo.prototype.method: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 6293,
    "end_line": 6314,
    "comment": "",
    "child_ranges": [
      "(line 6294,col 5)-(line 6313,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue537b()",
    "snippet": "public void testIssue537b() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype \u003d {method: function() {}};\" + \"\\n\"+ \"function Bar() {\"+ \"  Foo.call(this);\"+ \"  if (this.baz(1)) this.method();\"+ \"}\"+ \"Bar.prototype \u003d {\"+ \"  baz: function() {\"+ \"    return true;\"+ \"  }\"+ \"};\"+ \"Bar.prototype.__proto__ \u003d Foo.prototype;\",\"Function Bar.prototype.baz: called with 1 argument(s). \" + \"Function requires at least 0 argument(s) \" + \"and no more than 0 argument(s).\");\n}",
    "begin_line": 6316,
    "end_line": 6337,
    "comment": "",
    "child_ranges": [
      "(line 6317,col 5)-(line 6336,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue537c()",
    "snippet": "public void testIssue537c() throws Exception {\n  testTypes(\" function Foo() {}\" + \"\\n\"+ \"function Bar() {\"+ \"  Foo.call(this);\"+ \"  if (this.baz2()) alert(1);\"+ \"}\"+ \"Bar.prototype \u003d {\"+ \"  baz: function() {\"+ \"    return true;\"+ \"  }\"+ \"};\"+ \"Bar.prototype.__proto__ \u003d Foo.prototype;\",\"Property baz2 never defined on Bar\");\n}",
    "begin_line": 6339,
    "end_line": 6357,
    "comment": "",
    "child_ranges": [
      "(line 6340,col 5)-(line 6356,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue537d()",
    "snippet": "public void testIssue537d() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype \u003d {\" + \"   x: function() { new Bar(); },\"+ \"   y: function() { new Bar(); }\"+ \"};\"+ \"\\n\"+ \"function Bar() {\"+ \"  this.xy \u003d 3;\"+ \"}\"+ \" function f() { return new Bar(); }\"+ \" function g() { return new Bar(); }\"+ \"Bar.prototype \u003d {\"+ \"   x: function() { new Bar(); },\"+ \"   y: function() { new Bar(); }\"+ \"};\"+ \"Bar.prototype.__proto__ \u003d Foo.prototype;\");\n}",
    "begin_line": 6359,
    "end_line": 6380,
    "comment": "",
    "child_ranges": [
      "(line 6360,col 5)-(line 6379,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue586()",
    "snippet": "public void testIssue586() throws Exception {\n  testTypes(\"\" + \"var MyClass \u003d function() {};\" + \"\"+ \"MyClass.prototype.fn \u003d function(success) {};\"+ \"MyClass.prototype.test \u003d function() {\"+ \"  this.fn();\"+ \"  this.fn \u003d function() {};\"+ \"};\",\"Function MyClass.prototype.fn: called with 0 argument(s). \" + \"Function requires at least 1 argument(s) \" + \"and no more than 1 argument(s).\");\n}",
    "begin_line": 6382,
    "end_line": 6395,
    "comment": "",
    "child_ranges": [
      "(line 6383,col 5)-(line 6394,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue635()",
    "snippet": "public void testIssue635() throws Exception {\n  testTypes(\"\" + \"function F() {}\" + \"F.prototype.bar \u003d function() { this.baz(); };\"+ \"F.prototype.baz \u003d function() {};\"+ \"\"+ \"function G() {}\"+ \"G.prototype.bar \u003d F.prototype.bar;\");\n}",
    "begin_line": 6397,
    "end_line": 6407,
    "comment": "",
    "child_ranges": [
      "(line 6399,col 5)-(line 6406,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue635b()",
    "snippet": "public void testIssue635b() throws Exception {\n  testTypes(\"\" + \"function F() {}\" + \"\"+ \"function G() {}\"+ \" var x \u003d F;\",\"initializing variable\\n\" + \"found   : function (new:F): undefined\\n\" + \"required: function (new:G): ?\");\n}",
    "begin_line": 6409,
    "end_line": 6419,
    "comment": "",
    "child_ranges": [
      "(line 6410,col 5)-(line 6418,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue669()",
    "snippet": "public void testIssue669() throws Exception {\n  testTypes(\"\" + \"function f(a) {\" + \"  var results;\"+ \"  if (a) {\"+ \"    results \u003d {};\"+ \"    results.prop1 \u003d {a: 3};\"+ \"  } else {\"+ \"    results \u003d {prop2: 3};\"+ \"  }\"+ \"  return results;\"+ \"}\");\n}",
    "begin_line": 6421,
    "end_line": 6434,
    "comment": "",
    "child_ranges": [
      "(line 6422,col 5)-(line 6433,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue688()",
    "snippet": "public void testIssue688() throws Exception {\n  testTypes(\" var SOME_DEFAULT \u003d\\n\" + \"     ({first: 1, second: 2});\\n\" + \"\\n\"+ \"function TwoNumbers() {}\\n\"+ \"\\n\"+ \"TwoNumbers.prototype.first;\\n\"+ \"\\n\"+ \"TwoNumbers.prototype.second;\\n\"+ \" function f() { return SOME_DEFAULT; }\",\"inconsistent return type\\n\" + \"found   : (TwoNumbers|null)\\n\" + \"required: number\");\n}",
    "begin_line": 6436,
    "end_line": 6453,
    "comment": "",
    "child_ranges": [
      "(line 6437,col 5)-(line 6452,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue700()",
    "snippet": "public void testIssue700() throws Exception {\n  testTypes(\"\\n\"+ \"function temp1(opt_data) {\\n\"+ \"  return opt_data.text;\\n\"+ \"}\\n\"+ \"\\n\"+ \"\\n\"+ \"function temp2(opt_data) {\\n\"+ \"  \\n\"+ \"  function __inner() {\\n\"+ \"    return temp1(opt_data.activity);\\n\"+ \"  }\\n\"+ \"  return __inner();\\n\"+ \"}\\n\"+ \"\\n\"+ \"\\n\"+ \"function temp3(opt_data) {\\n\"+ \"  return \u0027n: \u0027 + opt_data.n + \u0027, t: \u0027 + opt_data.text + \u0027.\u0027;\\n\"+ \"}\\n\"+ \"\\n\"+ \"function callee() {\\n\"+ \"  var output \u003d temp3({\\n\"+ \"    n: 0,\\n\"+ \"    text: \u0027a string\u0027,\\n\"+ \"    b: true\\n\"+ \"  })\\n\"+ \"  alert(output);\\n\"+ \"}\\n\"+ \"\\n\"+ \"callee();\");\n}",
    "begin_line": 6455,
    "end_line": 6495,
    "comment": "",
    "child_ranges": [
      "(line 6456,col 5)-(line 6494,col 21)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue725()",
    "snippet": "public void testIssue725() throws Exception {\n  testTypes(\" var RecordType1;\" + \" var RecordType2;\" + \" function f(rec) {\"+ \"  alert(rec.name2);\"+ \"}\",\"Property name2 never defined on rec\");\n}",
    "begin_line": 6497,
    "end_line": 6505,
    "comment": "",
    "child_ranges": [
      "(line 6498,col 5)-(line 6504,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue726()",
    "snippet": "public void testIssue726() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d function(x) {};\" + \" \"+ \"Foo.prototype.getDeferredBar \u003d function() { \"+ \"  var self \u003d this;\"+ \"  return function() {\"+ \"    self.bar(true);\"+ \"  };\"+ \"};\",\"actual parameter 1 of Foo.prototype.bar does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6507,
    "end_line": 6521,
    "comment": "",
    "child_ranges": [
      "(line 6508,col 5)-(line 6520,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue765()",
    "snippet": "public void testIssue765() throws Exception {\n  testTypes(\"\" + \"var AnotherType \u003d function (parent) {\" + \"    \"+ \"    this.doSomething \u003d function (stringParameter) {};\"+ \"};\"+ \"\"+ \"var YetAnotherType \u003d function () {\"+ \"    this.field \u003d new AnotherType(self);\"+ \"    this.testfun\u003dfunction(stringdata) {\"+ \"        this.field.doSomething(null);\"+ \"    };\"+ \"};\",\"actual parameter 1 of AnotherType.doSomething \" + \"does not match formal parameter\\n\" + \"found   : null\\n\"+ \"required: string\");\n}",
    "begin_line": 6523,
    "end_line": 6541,
    "comment": "",
    "child_ranges": [
      "(line 6524,col 5)-(line 6540,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue783()",
    "snippet": "public void testIssue783() throws Exception {\n  testTypes(\"\" + \"var Type \u003d function () {\" + \"  \"+ \"  this.me_ \u003d this;\"+ \"};\"+ \"Type.prototype.doIt \u003d function() {\"+ \"  var me \u003d this.me_;\"+ \"  for (var i \u003d 0; i \u003c me.unknownProp; i++) {}\"+ \"};\",\"Property unknownProp never defined on Type\");\n}",
    "begin_line": 6543,
    "end_line": 6555,
    "comment": "",
    "child_ranges": [
      "(line 6544,col 5)-(line 6554,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue791()",
    "snippet": "public void testIssue791() throws Exception {\n  testTypes(\"\" + \"function test1(obj) {}\" + \"var fnStruc1 \u003d {};\"+ \"fnStruc1.func \u003d function() {};\"+ \"test1(fnStruc1);\");\n}",
    "begin_line": 6557,
    "end_line": 6564,
    "comment": "",
    "child_ranges": [
      "(line 6558,col 5)-(line 6563,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testIssue810()",
    "snippet": "public void testIssue810() throws Exception {\n  testTypes(\"\" + \"var Type \u003d function () {\" + \"};\"+ \"Type.prototype.doIt \u003d function(obj) {\"+ \"  this.prop \u003d obj.unknownProp;\"+ \"};\",\"Property unknownProp never defined on obj\");\n}",
    "begin_line": 6566,
    "end_line": 6575,
    "comment": "",
    "child_ranges": [
      "(line 6567,col 5)-(line 6574,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug592170()",
    "snippet": "public void testBug592170() throws Exception {\n  testTypes(\"\" + \"function foo(opt_f) {\" + \"  \"+ \"  return opt_f || function () {};\"+ \"}\",\"Type annotations are not allowed here. Are you missing parentheses?\");\n}",
    "begin_line": 6582,
    "end_line": 6590,
    "comment": "/** \n * Tests that the || operator is type checked correctly, that is of the type of the first argument or of the second argument. See bugid 592170 for more details.\n */\n",
    "child_ranges": [
      "(line 6583,col 5)-(line 6589,col 79)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug901455()",
    "snippet": "public void testBug901455() throws Exception {\n  testTypes(\" function a() { return 3; }\" + \"var b \u003d undefined \u003d\u003d\u003d a()\");\n  testTypes(\" function a() { return 3; }\" + \"var b \u003d a() \u003d\u003d\u003d undefined\");\n}",
    "begin_line": 6597,
    "end_line": 6602,
    "comment": "/** \n * Tests that undefined can be compared shallowly to a value of type (number,undefined) regardless of the side on which the undefined value is.\n */\n",
    "child_ranges": [
      "(line 6598,col 5)-(line 6599,col 37)",
      "(line 6600,col 5)-(line 6601,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug908701()",
    "snippet": "public void testBug908701() throws Exception {\n  testTypes(\"var s \u003d new String(\u0027foo\u0027);\" + \"var b \u003d s.match(/a/) !\u003d null;\");\n}",
    "begin_line": 6607,
    "end_line": 6610,
    "comment": "/** \n * Tests that the match method of strings returns nullable arrays.\n */\n",
    "child_ranges": [
      "(line 6608,col 5)-(line 6609,col 41)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug908625()",
    "snippet": "public void testBug908625() throws Exception {\n  testTypes(\"function A(){}\" + \"function B(){}\" + \"function foo(b){return b}\");\n}",
    "begin_line": 6615,
    "end_line": 6620,
    "comment": "/** \n * Tests that named types play nicely with subtyping.\n */\n",
    "child_ranges": [
      "(line 6616,col 5)-(line 6619,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug911118()",
    "snippet": "public void testBug911118() throws Exception {\n  Scope s\u003dparseAndTypeCheckWithScope(\"var a \u003d function(){};\").scope;\n  JSType type\u003ds.getVar(\"a\").getType();\n  assertEquals(\"function (): undefined\",type.toString());\n  testTypes(\"function nullFunction() {};\" + \"var foo \u003d nullFunction;\" + \"foo \u003d function() {};\"+ \"foo();\");\n}",
    "begin_line": 6626,
    "end_line": 6637,
    "comment": "/** \n * Tests that assigning two untyped functions to a variable whose type is inferred and calling this variable is legal.\n */\n",
    "child_ranges": [
      "(line 6628,col 5)-(line 6628,col 72)",
      "(line 6629,col 5)-(line 6629,col 42)",
      "(line 6630,col 5)-(line 6630,col 60)",
      "(line 6633,col 5)-(line 6636,col 18)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug909000()",
    "snippet": "public void testBug909000() throws Exception {\n  testTypes(\"function A(){}\\n\" + \"\\n\"+ \"function y(a) { return a }\",\"inconsistent return type\\n\" + \"found   : A\\n\" + \"required: boolean\");\n}",
    "begin_line": 6639,
    "end_line": 6647,
    "comment": "",
    "child_ranges": [
      "(line 6640,col 5)-(line 6646,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug930117()",
    "snippet": "public void testBug930117() throws Exception {\n  testTypes(\"function f(x){}\" + \"f(null);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : null\\n\" + \"required: boolean\");\n}",
    "begin_line": 6649,
    "end_line": 6656,
    "comment": "",
    "child_ranges": [
      "(line 6650,col 5)-(line 6655,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1484445()",
    "snippet": "public void testBug1484445() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d null;\" + \" Foo.prototype.baz \u003d null;\"+ \"\"+ \"function f(foo) {\"+ \"  while (true) {\"+ \"    if (foo.bar \u003d\u003d null \u0026\u0026 foo.baz \u003d\u003d null) {\"+ \"      foo.bar;\"+ \"    }\"+ \"  }\"+ \"}\");\n}",
    "begin_line": 6658,
    "end_line": 6671,
    "comment": "",
    "child_ranges": [
      "(line 6659,col 5)-(line 6670,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1859535()",
    "snippet": "public void testBug1859535() throws Exception {\n  testTypes(\"\"+ \"var inherits \u003d function(childCtor, parentCtor) {\"+ \"  \"+ \"  function tempCtor() {};\"+ \"  tempCtor.prototype \u003d parentCtor.prototype;\"+ \"  childCtor.superClass_ \u003d parentCtor.prototype;\"+ \"  childCtor.prototype \u003d new tempCtor();\"+ \"   childCtor.prototype.constructor \u003d childCtor;\"+ \"};\"+ \"\"+ \"var factory \u003d function(constructor, var_args) {\"+ \"  \"+ \"  var tempCtor \u003d function() {};\"+ \"  tempCtor.prototype \u003d constructor.prototype;\"+ \"  var obj \u003d new tempCtor();\"+ \"  constructor.apply(obj, arguments);\"+ \"  return obj;\"+ \"};\");\n}",
    "begin_line": 6673,
    "end_line": 6700,
    "comment": "",
    "child_ranges": [
      "(line 6674,col 5)-(line 6699,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1940591()",
    "snippet": "public void testBug1940591() throws Exception {\n  testTypes(\"\" + \"var a \u003d {};\\n\" + \"\\n\"+ \"a.name \u003d 0;\\n\"+ \"\\n\"+ \"a.g \u003d function(x) { x.name \u003d \u0027a\u0027; }\");\n}",
    "begin_line": 6702,
    "end_line": 6712,
    "comment": "",
    "child_ranges": [
      "(line 6703,col 5)-(line 6711,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1942972()",
    "snippet": "public void testBug1942972() throws Exception {\n  testTypes(\"var google \u003d {\\n\" + \"  gears: {\\n\" + \"    factory: {},\\n\"+ \"    workerPool: {}\\n\"+ \"  }\\n\"+ \"};\\n\"+ \"\\n\"+ \"google.gears \u003d {factory: {}};\\n\");\n}",
    "begin_line": 6714,
    "end_line": 6724,
    "comment": "",
    "child_ranges": [
      "(line 6715,col 5)-(line 6723,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1943776()",
    "snippet": "public void testBug1943776() throws Exception {\n  testTypes(\"\" + \"function bar() {\" + \"  return {foo: []};\"+ \"}\");\n}",
    "begin_line": 6726,
    "end_line": 6732,
    "comment": "",
    "child_ranges": [
      "(line 6727,col 5)-(line 6731,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1987544()",
    "snippet": "public void testBug1987544() throws Exception {\n  testTypes(\" function foo(x) {}\" + \"var duration;\" + \"if (true \u0026\u0026 !(duration \u003d 3)) {\"+ \" foo(duration);\"+ \"}\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 6734,
    "end_line": 6744,
    "comment": "",
    "child_ranges": [
      "(line 6735,col 5)-(line 6743,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug1940769()",
    "snippet": "public void testBug1940769() throws Exception {\n  testTypes(\" \" + \"function proto(obj) { return obj.prototype; }\" + \" function Map() {}\"+ \"\"+ \"function Map2() { Map.call(this); };\"+ \"Map2.prototype \u003d proto(Map);\");\n}",
    "begin_line": 6746,
    "end_line": 6757,
    "comment": "",
    "child_ranges": [
      "(line 6747,col 5)-(line 6756,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug2335992()",
    "snippet": "public void testBug2335992() throws Exception {\n  testTypes(\" function f() { return 3; }\" + \"var x \u003d f();\" + \"\"+ \"x.y \u003d 3;\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 6759,
    "end_line": 6768,
    "comment": "",
    "child_ranges": [
      "(line 6760,col 5)-(line 6767,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug2341812()",
    "snippet": "public void testBug2341812() throws Exception {\n  testTypes(\"\" + \"function EventTarget() {}\" + \"\"+ \"function Node() {}\"+ \" Node.prototype.index;\"+ \"\"+ \"function foo(x) { return x.index; }\");\n}",
    "begin_line": 6770,
    "end_line": 6779,
    "comment": "",
    "child_ranges": [
      "(line 6771,col 5)-(line 6778,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBug7701884()",
    "snippet": "public void testBug7701884() throws Exception {\n  testTypes(\"\\n\"+ \"var forEach \u003d function(x, y) {\\n\"+ \"  for (var i \u003d 0; i \u003c x.length; i++) y(x[i]);\\n\"+ \"};\"+ \"\"+ \"function f(x) {}\"+ \"\"+ \"function h(x) {\"+ \"  var top \u003d null;\"+ \"  forEach(x, function(z) { top \u003d z; });\"+ \"  if (top) f(top);\"+ \"}\");\n}",
    "begin_line": 6781,
    "end_line": 6799,
    "comment": "",
    "child_ranges": [
      "(line 6782,col 5)-(line 6798,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScopedConstructors1()",
    "snippet": "public void testScopedConstructors1() throws Exception {\n  testTypes(\"function foo1() { \" + \"   function Bar() { \" + \"     this.x \u003d 3;\"+ \"  }\"+ \"}\"+ \"function foo2() { \"+ \"   function Bar() { \"+ \"     this.x \u003d \u0027y\u0027;\"+ \"  }\"+ \"  \"+ \"  function baz(b) { return b.x; }\"+ \"}\",\"inconsistent return type\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 6801,
    "end_line": 6821,
    "comment": "",
    "child_ranges": [
      "(line 6802,col 5)-(line 6820,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testScopedConstructors2()",
    "snippet": "public void testScopedConstructors2() throws Exception {\n  testTypes(\"\" + \"function foo1(f) {\" + \"  \"+ \"  f.prototype.bar \u003d function(g) {};\"+ \"}\");\n}",
    "begin_line": 6823,
    "end_line": 6830,
    "comment": "",
    "child_ranges": [
      "(line 6824,col 5)-(line 6829,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference1()",
    "snippet": "public void testQualifiedNameInference1() throws Exception {\n  testTypes(\" function Foo() {}\" + \" Foo.prototype.bar \u003d null;\" + \" Foo.prototype.baz \u003d null;\"+ \"\"+ \"function f(foo) {\"+ \"  while (true) {\"+ \"    if (!foo.baz) break; \"+ \"    foo.bar \u003d null;\"+ \"  }\"+ \"  return foo.bar \u003d\u003d null;\"+ \"}\");\n}",
    "begin_line": 6832,
    "end_line": 6846,
    "comment": "",
    "child_ranges": [
      "(line 6833,col 5)-(line 6845,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference2()",
    "snippet": "public void testQualifiedNameInference2() throws Exception {\n  testTypes(\"var x \u003d {};\" + \"x.y \u003d c;\" + \"function f(a, b) {\"+ \"  if (a) {\"+ \"    if (b) \"+ \"      x.y \u003d 2;\"+ \"    else \"+ \"      x.y \u003d 1;\"+ \"  }\"+ \"  return x.y \u003d\u003d null;\"+ \"}\");\n}",
    "begin_line": 6848,
    "end_line": 6861,
    "comment": "",
    "child_ranges": [
      "(line 6849,col 5)-(line 6860,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference3()",
    "snippet": "public void testQualifiedNameInference3() throws Exception {\n  testTypes(\"var x \u003d {};\" + \"x.y \u003d c;\" + \"function f(a, b) {\"+ \"  if (a) {\"+ \"    if (b) \"+ \"      x.y \u003d 2;\"+ \"    else \"+ \"      x.y \u003d 1;\"+ \"  }\"+ \"  return x.y \u003d\u003d null;\"+ \"} function g() { x.y \u003d null; }\");\n}",
    "begin_line": 6863,
    "end_line": 6876,
    "comment": "",
    "child_ranges": [
      "(line 6864,col 5)-(line 6875,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference4()",
    "snippet": "public void testQualifiedNameInference4() throws Exception {\n  testTypes(\" function f(x) {}\\n\" + \"\"+ \"function Foo(x) { this.x_ \u003d x; }\\n\"+ \"Foo.prototype.bar \u003d function() {\"+ \"  if (this.x_) { f(this.x_); }\"+ \"};\");\n}",
    "begin_line": 6878,
    "end_line": 6889,
    "comment": "",
    "child_ranges": [
      "(line 6879,col 5)-(line 6888,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference5()",
    "snippet": "public void testQualifiedNameInference5() throws Exception {\n  testTypes(\"var ns \u003d {}; \" + \"(function() { \" + \"     ns.foo \u003d function(x) {}; })();\"+ \"(function() { ns.foo(true); })();\",\"actual parameter 1 of ns.foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6891,
    "end_line": 6900,
    "comment": "",
    "child_ranges": [
      "(line 6892,col 5)-(line 6899,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference6()",
    "snippet": "public void testQualifiedNameInference6() throws Exception {\n  testTypes(\" var ns \u003d {}; \" + \" ns.foo \u003d function(x) {};\" + \"(function() { \"+ \"    ns.foo \u003d function(x) {};\"+ \"    ns.foo(true); \"+ \"})();\",\"actual parameter 1 of ns.foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6902,
    "end_line": 6913,
    "comment": "",
    "child_ranges": [
      "(line 6903,col 5)-(line 6912,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference7()",
    "snippet": "public void testQualifiedNameInference7() throws Exception {\n  testTypes(\"var ns \u003d {}; \" + \"(function() { \" + \"   \"+ \"  ns.Foo \u003d function(x) {};\"+ \"   function f(x) {}\"+ \"  f(new ns.Foo(true));\"+ \"})();\",\"actual parameter 1 of ns.Foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6915,
    "end_line": 6927,
    "comment": "",
    "child_ranges": [
      "(line 6916,col 5)-(line 6926,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference8()",
    "snippet": "public void testQualifiedNameInference8() throws Exception {\n  testClosureTypesMultipleWarnings(\"var ns \u003d {}; \" + \"(function() { \" + \"   \"+ \"  ns.Foo \u003d function(x) {};\"+ \"})();\"+ \" function f(x) {}\"+ \"f(new ns.Foo(true));\",Lists.newArrayList(\"Bad type annotation. Unknown type ns.Foo\",\"actual parameter 1 of ns.Foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\"));\n}",
    "begin_line": 6929,
    "end_line": 6945,
    "comment": "",
    "child_ranges": [
      "(line 6932,col 5)-(line 6944,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference9()",
    "snippet": "public void testQualifiedNameInference9() throws Exception {\n  testTypes(\"var ns \u003d {}; \" + \"ns.ns2 \u003d {}; \" + \"(function() { \"+ \"   \"+ \"  ns.ns2.Foo \u003d function(x) {};\"+ \"   function f(x) {}\"+ \"  f(new ns.ns2.Foo(true));\"+ \"})();\",\"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 6947,
    "end_line": 6960,
    "comment": "",
    "child_ranges": [
      "(line 6948,col 5)-(line 6959,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference10()",
    "snippet": "public void testQualifiedNameInference10() throws Exception {\n  testTypes(\"var ns \u003d {}; \" + \"ns.ns2 \u003d {}; \" + \"(function() { \"+ \"   \"+ \"  ns.ns2.Foo \u003d function() {};\"+ \"   \"+ \"  function F() {}\"+ \"  (new F());\"+ \"})();\");\n}",
    "begin_line": 6962,
    "end_line": 6973,
    "comment": "",
    "child_ranges": [
      "(line 6963,col 5)-(line 6972,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference11()",
    "snippet": "public void testQualifiedNameInference11() throws Exception {\n  testTypes(\" function Foo() {}\" + \"function f() {\" + \"  var x \u003d new Foo();\"+ \"  x.onload \u003d function() {\"+ \"    x.onload \u003d null;\"+ \"  };\"+ \"}\");\n}",
    "begin_line": 6975,
    "end_line": 6984,
    "comment": "",
    "child_ranges": [
      "(line 6976,col 5)-(line 6983,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference12()",
    "snippet": "public void testQualifiedNameInference12() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function Foo() {\" + \"   this.bar \u003d 3;\"+ \"  f(function() { this.bar \u003d true; });\"+ \"}\");\n}",
    "begin_line": 6986,
    "end_line": 6995,
    "comment": "",
    "child_ranges": [
      "(line 6989,col 5)-(line 6994,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testQualifiedNameInference13()",
    "snippet": "public void testQualifiedNameInference13() throws Exception {\n  testTypes(\" function Foo() {}\" + \"function f(z) {\" + \"  var x \u003d new Foo();\"+ \"  if (z) {\"+ \"    x.onload \u003d function() {};\"+ \"  } else {\"+ \"    x.onload \u003d null;\"+ \"  };\"+ \"}\");\n}",
    "begin_line": 6997,
    "end_line": 7008,
    "comment": "",
    "child_ranges": [
      "(line 6998,col 5)-(line 7007,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testSheqRefinedScope()",
    "snippet": "public void testSheqRefinedScope() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"function A() {}\\n\" + \" function B() {}\\n\" + \"\\n\"+ \"B.prototype.p \u003d function() { return 1; }\\n\"+ \"\\n\"+ \"function f(a, b) {\\n\"+ \"  b.p();\\n\"+ \"  if (a \u003d\u003d\u003d b) {\\n\"+ \"    b.p();\\n\"+ \"  }\\n\"+ \"}\");\n  Node nodeC\u003dn.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild();\n  JSType typeC\u003dnodeC.getJSType();\n  assertTrue(typeC.isNumber());\n  Node nodeB\u003dnodeC.getFirstChild().getFirstChild();\n  JSType typeB\u003dnodeB.getJSType();\n  assertEquals(\"B\",typeB.toString());\n}",
    "begin_line": 7010,
    "end_line": 7031,
    "comment": "",
    "child_ranges": [
      "(line 7011,col 5)-(line 7022,col 13)",
      "(line 7023,col 5)-(line 7024,col 39)",
      "(line 7025,col 5)-(line 7025,col 37)",
      "(line 7026,col 5)-(line 7026,col 33)",
      "(line 7028,col 5)-(line 7028,col 55)",
      "(line 7029,col 5)-(line 7029,col 37)",
      "(line 7030,col 5)-(line 7030,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssignToUntypedVariable()",
    "snippet": "public void testAssignToUntypedVariable() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"var z; z \u003d 1;\");\n  Node assign\u003dn.getLastChild().getFirstChild();\n  Node node\u003dassign.getFirstChild();\n  assertFalse(node.getJSType().isUnknownType());\n  assertEquals(\"number\",node.getJSType().toString());\n}",
    "begin_line": 7033,
    "end_line": 7040,
    "comment": "",
    "child_ranges": [
      "(line 7034,col 5)-(line 7034,col 48)",
      "(line 7036,col 5)-(line 7036,col 51)",
      "(line 7037,col 5)-(line 7037,col 39)",
      "(line 7038,col 5)-(line 7038,col 50)",
      "(line 7039,col 5)-(line 7039,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAssignToUntypedProperty()",
    "snippet": "public void testAssignToUntypedProperty() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" function Foo() {}\\n\" + \"Foo.prototype.a \u003d 1;\" + \"(new Foo).a;\");\n  Node node\u003dn.getLastChild().getFirstChild();\n  assertFalse(node.getJSType().isUnknownType());\n  assertTrue(node.getJSType().isNumber());\n}",
    "begin_line": 7042,
    "end_line": 7051,
    "comment": "",
    "child_ranges": [
      "(line 7043,col 5)-(line 7046,col 24)",
      "(line 7048,col 5)-(line 7048,col 49)",
      "(line 7049,col 5)-(line 7049,col 50)",
      "(line 7050,col 5)-(line 7050,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew1()",
    "snippet": "public void testNew1() throws Exception {\n  testTypes(\"new 4\",TypeCheck.NOT_A_CONSTRUCTOR);\n}",
    "begin_line": 7053,
    "end_line": 7055,
    "comment": "",
    "child_ranges": [
      "(line 7054,col 5)-(line 7054,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew2()",
    "snippet": "public void testNew2() throws Exception {\n  testTypes(\"var Math \u003d {}; new Math()\",TypeCheck.NOT_A_CONSTRUCTOR);\n}",
    "begin_line": 7057,
    "end_line": 7059,
    "comment": "",
    "child_ranges": [
      "(line 7058,col 5)-(line 7058,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew3()",
    "snippet": "public void testNew3() throws Exception {\n  testTypes(\"new Date()\");\n}",
    "begin_line": 7061,
    "end_line": 7063,
    "comment": "",
    "child_ranges": [
      "(line 7062,col 5)-(line 7062,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew4()",
    "snippet": "public void testNew4() throws Exception {\n  testTypes(\"function A(){}; new A();\");\n}",
    "begin_line": 7065,
    "end_line": 7067,
    "comment": "",
    "child_ranges": [
      "(line 7066,col 5)-(line 7066,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew5()",
    "snippet": "public void testNew5() throws Exception {\n  testTypes(\"function A(){}; new A();\",TypeCheck.NOT_A_CONSTRUCTOR);\n}",
    "begin_line": 7069,
    "end_line": 7071,
    "comment": "",
    "child_ranges": [
      "(line 7070,col 5)-(line 7070,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew6()",
    "snippet": "public void testNew6() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"function A(){};\" + \"var a \u003d new A();\");\n  JSType aType\u003dp.scope.getVar(\"a\").getType();\n  assertTrue(aType instanceof ObjectType);\n  ObjectType aObjectType\u003d(ObjectType)aType;\n  assertEquals(\"A\",aObjectType.getConstructor().getReferenceName());\n}",
    "begin_line": 7073,
    "end_line": 7082,
    "comment": "",
    "child_ranges": [
      "(line 7074,col 5)-(line 7076,col 26)",
      "(line 7078,col 5)-(line 7078,col 49)",
      "(line 7079,col 5)-(line 7079,col 44)",
      "(line 7080,col 5)-(line 7080,col 48)",
      "(line 7081,col 5)-(line 7081,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew7()",
    "snippet": "public void testNew7() throws Exception {\n  testTypes(\"\" + \"function foo(opt_constructor) {\" + \"if (opt_constructor) { new opt_constructor; }\"+ \"}\");\n}",
    "begin_line": 7084,
    "end_line": 7089,
    "comment": "",
    "child_ranges": [
      "(line 7085,col 5)-(line 7088,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew8()",
    "snippet": "public void testNew8() throws Exception {\n  testTypes(\"\" + \"function foo(opt_constructor) {\" + \"new opt_constructor;\"+ \"}\");\n}",
    "begin_line": 7091,
    "end_line": 7096,
    "comment": "",
    "child_ranges": [
      "(line 7092,col 5)-(line 7095,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew9()",
    "snippet": "public void testNew9() throws Exception {\n  testTypes(\"\" + \"function foo(opt_constructor) {\" + \"new (opt_constructor || Array);\"+ \"}\");\n}",
    "begin_line": 7098,
    "end_line": 7103,
    "comment": "",
    "child_ranges": [
      "(line 7099,col 5)-(line 7102,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew10()",
    "snippet": "public void testNew10() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"\" + \"goog.Foo \u003d function (opt_constructor) {\"+ \"new (opt_constructor || Array);\"+ \"}\");\n}",
    "begin_line": 7105,
    "end_line": 7111,
    "comment": "",
    "child_ranges": [
      "(line 7106,col 5)-(line 7110,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew11()",
    "snippet": "public void testNew11() throws Exception {\n  testTypes(\"\" + \"function f(c1) {\" + \"  var c2 \u003d function(){};\"+ \"  c1.prototype \u003d new c2;\"+ \"}\",TypeCheck.NOT_A_CONSTRUCTOR);\n}",
    "begin_line": 7113,
    "end_line": 7119,
    "comment": "",
    "child_ranges": [
      "(line 7114,col 5)-(line 7118,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew12()",
    "snippet": "public void testNew12() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var a \u003d new Array();\");\n  Var a\u003dp.scope.getVar(\"a\");\n  assertTypeEquals(ARRAY_TYPE,a.getType());\n}",
    "begin_line": 7121,
    "end_line": 7126,
    "comment": "",
    "child_ranges": [
      "(line 7122,col 5)-(line 7122,col 75)",
      "(line 7123,col 5)-(line 7123,col 32)",
      "(line 7125,col 5)-(line 7125,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew13()",
    "snippet": "public void testNew13() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"function FooBar(){};\" + \"var a \u003d new FooBar();\");\n  Var a\u003dp.scope.getVar(\"a\");\n  assertTrue(a.getType() instanceof ObjectType);\n  assertEquals(\"FooBar\",a.getType().toString());\n}",
    "begin_line": 7128,
    "end_line": 7136,
    "comment": "",
    "child_ranges": [
      "(line 7129,col 5)-(line 7131,col 33)",
      "(line 7132,col 5)-(line 7132,col 32)",
      "(line 7134,col 5)-(line 7134,col 50)",
      "(line 7135,col 5)-(line 7135,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew14()",
    "snippet": "public void testNew14() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var FooBar \u003d function(){};\" + \"var a \u003d new FooBar();\");\n  Var a\u003dp.scope.getVar(\"a\");\n  assertTrue(a.getType() instanceof ObjectType);\n  assertEquals(\"FooBar\",a.getType().toString());\n}",
    "begin_line": 7138,
    "end_line": 7146,
    "comment": "",
    "child_ranges": [
      "(line 7139,col 5)-(line 7141,col 33)",
      "(line 7142,col 5)-(line 7142,col 32)",
      "(line 7144,col 5)-(line 7144,col 50)",
      "(line 7145,col 5)-(line 7145,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew15()",
    "snippet": "public void testNew15() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var goog \u003d {};\" + \"goog.A \u003d function(){};\" + \"var a \u003d new goog.A();\");\n  Var a\u003dp.scope.getVar(\"a\");\n  assertTrue(a.getType() instanceof ObjectType);\n  assertEquals(\"goog.A\",a.getType().toString());\n}",
    "begin_line": 7148,
    "end_line": 7157,
    "comment": "",
    "child_ranges": [
      "(line 7149,col 5)-(line 7152,col 33)",
      "(line 7153,col 5)-(line 7153,col 32)",
      "(line 7155,col 5)-(line 7155,col 50)",
      "(line 7156,col 5)-(line 7156,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew16()",
    "snippet": "public void testNew16() throws Exception {\n  testTypes(\"\"+ \"function Foo(x) {}\"+ \"function g() { new Foo(1); }\",\"actual parameter 1 of Foo does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 7159,
    "end_line": 7170,
    "comment": "",
    "child_ranges": [
      "(line 7160,col 5)-(line 7169,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew17()",
    "snippet": "public void testNew17() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.x \u003d 3; new goog.x\",\"cannot instantiate non-constructor\");\n}",
    "begin_line": 7172,
    "end_line": 7175,
    "comment": "",
    "child_ranges": [
      "(line 7173,col 5)-(line 7174,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNew18()",
    "snippet": "public void testNew18() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.F \u003d function() {};\" + \" goog.G \u003d goog.F;\");\n}",
    "begin_line": 7177,
    "end_line": 7181,
    "comment": "",
    "child_ranges": [
      "(line 7178,col 5)-(line 7180,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testName1()",
    "snippet": "public void testName1() throws Exception {\n  assertTypeEquals(VOID_TYPE,testNameNode(\"undefined\"));\n}",
    "begin_line": 7183,
    "end_line": 7185,
    "comment": "",
    "child_ranges": [
      "(line 7184,col 5)-(line 7184,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testName2()",
    "snippet": "public void testName2() throws Exception {\n  assertTypeEquals(OBJECT_FUNCTION_TYPE,testNameNode(\"Object\"));\n}",
    "begin_line": 7187,
    "end_line": 7189,
    "comment": "",
    "child_ranges": [
      "(line 7188,col 5)-(line 7188,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testName3()",
    "snippet": "public void testName3() throws Exception {\n  assertTypeEquals(ARRAY_FUNCTION_TYPE,testNameNode(\"Array\"));\n}",
    "begin_line": 7191,
    "end_line": 7193,
    "comment": "",
    "child_ranges": [
      "(line 7192,col 5)-(line 7192,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testName4()",
    "snippet": "public void testName4() throws Exception {\n  assertTypeEquals(DATE_FUNCTION_TYPE,testNameNode(\"Date\"));\n}",
    "begin_line": 7195,
    "end_line": 7197,
    "comment": "",
    "child_ranges": [
      "(line 7196,col 5)-(line 7196,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testName5()",
    "snippet": "public void testName5() throws Exception {\n  assertTypeEquals(REGEXP_FUNCTION_TYPE,testNameNode(\"RegExp\"));\n}",
    "begin_line": 7199,
    "end_line": 7201,
    "comment": "",
    "child_ranges": [
      "(line 7200,col 5)-(line 7200,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNameNode(java.lang.String)",
    "snippet": "private JSType testNameNode(String name){\n  Node node\u003dNode.newString(Token.NAME,name);\n  Node parent\u003dnew Node(Token.SCRIPT,node);\n  parent.setInputId(new InputId(\"code\"));\n  Node externs\u003dnew Node(Token.SCRIPT);\n  externs.setInputId(new InputId(\"externs\"));\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externs,parent);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  makeTypeCheck().processForTesting(null,parent);\n  return node.getJSType();\n}",
    "begin_line": 7206,
    "end_line": 7219,
    "comment": "/** \n * Type checks a NAME node and retrieve its type.\n */\n",
    "child_ranges": [
      "(line 7207,col 5)-(line 7207,col 49)",
      "(line 7208,col 5)-(line 7208,col 47)",
      "(line 7209,col 5)-(line 7209,col 43)",
      "(line 7211,col 5)-(line 7211,col 42)",
      "(line 7212,col 5)-(line 7212,col 47)",
      "(line 7214,col 5)-(line 7214,col 66)",
      "(line 7215,col 5)-(line 7215,col 46)",
      "(line 7217,col 5)-(line 7217,col 52)",
      "(line 7218,col 5)-(line 7218,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation1()",
    "snippet": "public void testBitOperation1() throws Exception {\n  testTypes(\"function foo(){ ~foo(); }\",\"operator ~ cannot be applied to undefined\");\n}",
    "begin_line": 7221,
    "end_line": 7224,
    "comment": "",
    "child_ranges": [
      "(line 7222,col 5)-(line 7223,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation2()",
    "snippet": "public void testBitOperation2() throws Exception {\n  testTypes(\"function foo(){var a \u003d foo()\u003c\u003c3;}\",\"operator \u003c\u003c cannot be applied to undefined\");\n}",
    "begin_line": 7226,
    "end_line": 7229,
    "comment": "",
    "child_ranges": [
      "(line 7227,col 5)-(line 7228,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation3()",
    "snippet": "public void testBitOperation3() throws Exception {\n  testTypes(\"function foo(){var a \u003d 3\u003c\u003cfoo();}\",\"operator \u003c\u003c cannot be applied to undefined\");\n}",
    "begin_line": 7231,
    "end_line": 7234,
    "comment": "",
    "child_ranges": [
      "(line 7232,col 5)-(line 7233,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation4()",
    "snippet": "public void testBitOperation4() throws Exception {\n  testTypes(\"function foo(){var a \u003d foo()\u003e\u003e\u003e3;}\",\"operator \u003e\u003e\u003e cannot be applied to undefined\");\n}",
    "begin_line": 7236,
    "end_line": 7239,
    "comment": "",
    "child_ranges": [
      "(line 7237,col 5)-(line 7238,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation5()",
    "snippet": "public void testBitOperation5() throws Exception {\n  testTypes(\"function foo(){var a \u003d 3\u003e\u003e\u003efoo();}\",\"operator \u003e\u003e\u003e cannot be applied to undefined\");\n}",
    "begin_line": 7241,
    "end_line": 7244,
    "comment": "",
    "child_ranges": [
      "(line 7242,col 5)-(line 7243,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation6()",
    "snippet": "public void testBitOperation6() throws Exception {\n  testTypes(\"function foo(){var a \u003d foo()\u00263;}\",\"bad left operand to bitwise operator\\n\" + \"found   : Object\\n\" + \"required: (boolean|null|number|string|undefined)\");\n}",
    "begin_line": 7246,
    "end_line": 7251,
    "comment": "",
    "child_ranges": [
      "(line 7247,col 5)-(line 7250,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation7()",
    "snippet": "public void testBitOperation7() throws Exception {\n  testTypes(\"var x \u003d null; x |\u003d undefined; x \u0026\u003d 3; x ^\u003d \u00273\u0027; x |\u003d true;\");\n}",
    "begin_line": 7253,
    "end_line": 7255,
    "comment": "",
    "child_ranges": [
      "(line 7254,col 5)-(line 7254,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation8()",
    "snippet": "public void testBitOperation8() throws Exception {\n  testTypes(\"var x \u003d void 0; x |\u003d new Number(3);\");\n}",
    "begin_line": 7257,
    "end_line": 7259,
    "comment": "",
    "child_ranges": [
      "(line 7258,col 5)-(line 7258,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBitOperation9()",
    "snippet": "public void testBitOperation9() throws Exception {\n  testTypes(\"var x \u003d void 0; x |\u003d {};\",\"bad right operand to bitwise operator\\n\" + \"found   : {}\\n\" + \"required: (boolean|null|number|string|undefined)\");\n}",
    "begin_line": 7261,
    "end_line": 7266,
    "comment": "",
    "child_ranges": [
      "(line 7262,col 5)-(line 7265,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall1()",
    "snippet": "public void testCall1() throws Exception {\n  testTypes(\"3();\",\"number expressions are not callable\");\n}",
    "begin_line": 7268,
    "end_line": 7270,
    "comment": "",
    "child_ranges": [
      "(line 7269,col 5)-(line 7269,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall2()",
    "snippet": "public void testCall2() throws Exception {\n  testTypes(\"function bar(foo){ bar(\u0027abc\u0027); }\",\"actual parameter 1 of bar does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: Number\");\n}",
    "begin_line": 7272,
    "end_line": 7277,
    "comment": "",
    "child_ranges": [
      "(line 7273,col 5)-(line 7276,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall3()",
    "snippet": "public void testCall3() throws Exception {\n  testTypes(\"var opt_f;\" + \"var f1;\" + \"var f2 \u003d opt_f || f1;\"+ \"f2();\",\"Bad type annotation. Unknown type some.unknown.type\");\n}",
    "begin_line": 7279,
    "end_line": 7287,
    "comment": "",
    "child_ranges": [
      "(line 7282,col 5)-(line 7286,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall4()",
    "snippet": "public void testCall4() throws Exception {\n  testTypes(\"var foo \u003d function bar(a){ bar(\u0027abc\u0027); }\",\"actual parameter 1 of bar does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: RegExp\");\n}",
    "begin_line": 7289,
    "end_line": 7294,
    "comment": "",
    "child_ranges": [
      "(line 7290,col 5)-(line 7293,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall5()",
    "snippet": "public void testCall5() throws Exception {\n  testTypes(\"var foo \u003d function bar(a){ foo(\u0027abc\u0027); }\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: RegExp\");\n}",
    "begin_line": 7296,
    "end_line": 7301,
    "comment": "",
    "child_ranges": [
      "(line 7297,col 5)-(line 7300,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall6()",
    "snippet": "public void testCall6() throws Exception {\n  testTypes(\"function bar(foo){}\" + \"bar(\u0027abc\u0027);\",\"actual parameter 1 of bar does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: Number\");\n}",
    "begin_line": 7303,
    "end_line": 7309,
    "comment": "",
    "child_ranges": [
      "(line 7304,col 5)-(line 7308,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall7()",
    "snippet": "public void testCall7() throws Exception {\n  testTypes(\"var foo \u003d function bar(a){};\" + \"foo(\u0027abc\u0027);\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: RegExp\");\n}",
    "begin_line": 7311,
    "end_line": 7317,
    "comment": "",
    "child_ranges": [
      "(line 7312,col 5)-(line 7316,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall8()",
    "snippet": "public void testCall8() throws Exception {\n  testTypes(\"var f;f();\",\"(Function|number) expressions are \" + \"not callable\");\n}",
    "begin_line": 7319,
    "end_line": 7323,
    "comment": "",
    "child_ranges": [
      "(line 7320,col 5)-(line 7322,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall9()",
    "snippet": "public void testCall9() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Foo \u003d function() {};\" + \" var bar \u003d function(a){};\"+ \"bar(\u0027abc\u0027);\",\"actual parameter 1 of bar does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: goog.Foo\");\n}",
    "begin_line": 7325,
    "end_line": 7334,
    "comment": "",
    "child_ranges": [
      "(line 7326,col 5)-(line 7333,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall10()",
    "snippet": "public void testCall10() throws Exception {\n  testTypes(\"var f;f();\");\n}",
    "begin_line": 7336,
    "end_line": 7338,
    "comment": "",
    "child_ranges": [
      "(line 7337,col 5)-(line 7337,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCall11()",
    "snippet": "public void testCall11() throws Exception {\n  testTypes(\"var f \u003d new Function(); f();\");\n}",
    "begin_line": 7340,
    "end_line": 7342,
    "comment": "",
    "child_ranges": [
      "(line 7341,col 5)-(line 7341,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall1()",
    "snippet": "public void testFunctionCall1() throws Exception {\n  testTypes(\" var foo \u003d function(x) {};\" + \"foo.call(null, 3);\");\n}",
    "begin_line": 7344,
    "end_line": 7348,
    "comment": "",
    "child_ranges": [
      "(line 7345,col 5)-(line 7347,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall2()",
    "snippet": "public void testFunctionCall2() throws Exception {\n  testTypes(\" var foo \u003d function(x) {};\" + \"foo.call(null, \u0027bar\u0027);\",\"actual parameter 2 of foo.call does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 7350,
    "end_line": 7357,
    "comment": "",
    "child_ranges": [
      "(line 7351,col 5)-(line 7356,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall3()",
    "snippet": "public void testFunctionCall3() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(x) { this.bar.call(null, x); };\" + \" Foo.prototype.bar;\");\n}",
    "begin_line": 7359,
    "end_line": 7364,
    "comment": "",
    "child_ranges": [
      "(line 7360,col 5)-(line 7363,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall4()",
    "snippet": "public void testFunctionCall4() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(x) { this.bar.call(null, x); };\" + \" Foo.prototype.bar;\",\"actual parameter 2 of this.bar.call \" + \"does not match formal parameter\\n\" + \"found   : string\\n\"+ \"required: number\");\n}",
    "begin_line": 7366,
    "end_line": 7375,
    "comment": "",
    "child_ranges": [
      "(line 7367,col 5)-(line 7374,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall5()",
    "snippet": "public void testFunctionCall5() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(handler) { handler.call(this, x); };\");\n}",
    "begin_line": 7377,
    "end_line": 7381,
    "comment": "",
    "child_ranges": [
      "(line 7378,col 5)-(line 7380,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall6()",
    "snippet": "public void testFunctionCall6() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(handler) { handler.apply(this, x); };\");\n}",
    "begin_line": 7383,
    "end_line": 7387,
    "comment": "",
    "child_ranges": [
      "(line 7384,col 5)-(line 7386,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall7()",
    "snippet": "public void testFunctionCall7() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(handler, opt_context) { \" + \"  handler.call(opt_context, x);\"+ \"};\");\n}",
    "begin_line": 7389,
    "end_line": 7395,
    "comment": "",
    "child_ranges": [
      "(line 7390,col 5)-(line 7394,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionCall8()",
    "snippet": "public void testFunctionCall8() throws Exception {\n  testTypes(\" \" + \"var Foo \u003d function(handler, opt_context) { \" + \"  handler.apply(opt_context, x);\"+ \"};\");\n}",
    "begin_line": 7397,
    "end_line": 7403,
    "comment": "",
    "child_ranges": [
      "(line 7398,col 5)-(line 7402,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionBind1()",
    "snippet": "public void testFunctionBind1() throws Exception {\n  testTypes(\"\" + \"function f(x, y) { return true; }\" + \"f.bind(null, 3);\",\"actual parameter 2 of f.bind does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 7405,
    "end_line": 7413,
    "comment": "",
    "child_ranges": [
      "(line 7406,col 5)-(line 7412,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionBind2()",
    "snippet": "public void testFunctionBind2() throws Exception {\n  testTypes(\"\" + \"function f(x) { return true; }\" + \"f(f.bind(null, 3)());\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 7415,
    "end_line": 7423,
    "comment": "",
    "child_ranges": [
      "(line 7416,col 5)-(line 7422,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionBind3()",
    "snippet": "public void testFunctionBind3() throws Exception {\n  testTypes(\"\" + \"function f(x, y) { return true; }\" + \"f.bind(null, 3)(true);\",\"actual parameter 1 of function does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 7425,
    "end_line": 7433,
    "comment": "",
    "child_ranges": [
      "(line 7426,col 5)-(line 7432,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionBind4()",
    "snippet": "public void testFunctionBind4() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"f.bind(null, 3, 3, 3)(true);\",\"actual parameter 1 of function does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: (number|undefined)\");\n}",
    "begin_line": 7435,
    "end_line": 7443,
    "comment": "",
    "child_ranges": [
      "(line 7436,col 5)-(line 7442,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionBind5()",
    "snippet": "public void testFunctionBind5() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"f.bind(null, true)(3, 3, 3);\",\"actual parameter 2 of f.bind does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: (number|undefined)\");\n}",
    "begin_line": 7445,
    "end_line": 7453,
    "comment": "",
    "child_ranges": [
      "(line 7446,col 5)-(line 7452,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoogBind1()",
    "snippet": "public void testGoogBind1() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; goog.bind \u003d function(var_args) {};\" + \"\" + \"function f(x, y) { return true; }\"+ \"f(goog.bind(f, null, \u0027x\u0027)());\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 7455,
    "end_line": 7464,
    "comment": "",
    "child_ranges": [
      "(line 7456,col 5)-(line 7463,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGoogBind2()",
    "snippet": "public void testGoogBind2() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; goog.bind \u003d function(var_args) {};\" + \"\" + \"function f(x, y) { return true; }\"+ \"f(goog.bind(f, null, \u0027x\u0027)());\",null);\n}",
    "begin_line": 7466,
    "end_line": 7475,
    "comment": "",
    "child_ranges": [
      "(line 7469,col 5)-(line 7474,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast2()",
    "snippet": "public void testCast2() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\" + \" var baz \u003d new derived();\\n\");\n}",
    "begin_line": 7477,
    "end_line": 7482,
    "comment": "",
    "child_ranges": [
      "(line 7479,col 5)-(line 7481,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast3()",
    "snippet": "public void testCast3() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\" + \" var baz \u003d new base();\\n\",\"initializing variable\\n\" + \"found   : base\\n\" + \"required: derived\");\n}",
    "begin_line": 7484,
    "end_line": 7492,
    "comment": "",
    "child_ranges": [
      "(line 7486,col 5)-(line 7491,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast3a()",
    "snippet": "public void testCast3a() throws Exception {\n  testTypes(\"function Base() {}\\n\" + \"function Derived() {}\\n\" + \"var baseInstance \u003d new Base();\"+ \" var baz \u003d baseInstance;\\n\",\"initializing variable\\n\" + \"found   : Base\\n\" + \"required: Derived\");\n}",
    "begin_line": 7494,
    "end_line": 7503,
    "comment": "",
    "child_ranges": [
      "(line 7496,col 5)-(line 7502,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast4()",
    "snippet": "public void testCast4() throws Exception {\n  testTypes(\"function base() {}\\n\" + \"function derived() {}\\n\" + \" var baz \u003d \"+ \"(new base());\\n\");\n}",
    "begin_line": 7505,
    "end_line": 7511,
    "comment": "",
    "child_ranges": [
      "(line 7507,col 5)-(line 7510,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast5()",
    "snippet": "public void testCast5() throws Exception {\n  testTypes(\"function foo() {}\\n\" + \"function bar() {}\\n\" + \"var baz \u003d (new bar);\\n\",\"invalid cast - must be a subtype or supertype\\n\" + \"from: bar\\n\" + \"to  : foo\");\n}",
    "begin_line": 7513,
    "end_line": 7521,
    "comment": "",
    "child_ranges": [
      "(line 7515,col 5)-(line 7520,col 21)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast5a()",
    "snippet": "public void testCast5a() throws Exception {\n  testTypes(\"function foo() {}\\n\" + \"function bar() {}\\n\" + \"var barInstance \u003d new bar;\\n\"+ \"var baz \u003d (barInstance);\\n\",\"invalid cast - must be a subtype or supertype\\n\" + \"from: bar\\n\" + \"to  : foo\");\n}",
    "begin_line": 7523,
    "end_line": 7532,
    "comment": "",
    "child_ranges": [
      "(line 7525,col 5)-(line 7531,col 21)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast6()",
    "snippet": "public void testCast6() throws Exception {\n  testTypes(\"function foo() {}\\n\" + \"function bar() {}\\n\" + \"var baz \u003d (new bar);\\n\"+ \"var baz \u003d (new foo);\\n\"+ \"var baz \u003d (new bar);\\n\"+ \"var baz \u003d (new foo);\\n\"+ \"var baz \u003d (new bar);\\n\"+ \"var baz \u003d (new foo);\\n\"+ \"var baz \u003d (new bar);\\n\"+ \"var baz \u003d (new foo);\\n\");\n}",
    "begin_line": 7534,
    "end_line": 7546,
    "comment": "",
    "child_ranges": [
      "(line 7536,col 5)-(line 7545,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast7()",
    "snippet": "public void testCast7() throws Exception {\n  testTypes(\"var x \u003d  (new Object());\",\"Bad type annotation. Unknown type foo\");\n}",
    "begin_line": 7548,
    "end_line": 7551,
    "comment": "",
    "child_ranges": [
      "(line 7549,col 5)-(line 7550,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast8()",
    "snippet": "public void testCast8() throws Exception {\n  testTypes(\"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type foo\");\n}",
    "begin_line": 7553,
    "end_line": 7556,
    "comment": "",
    "child_ranges": [
      "(line 7554,col 5)-(line 7555,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast9()",
    "snippet": "public void testCast9() throws Exception {\n  testTypes(\"var foo \u003d {};\" + \"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type foo\");\n}",
    "begin_line": 7558,
    "end_line": 7562,
    "comment": "",
    "child_ranges": [
      "(line 7559,col 5)-(line 7561,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast10()",
    "snippet": "public void testCast10() throws Exception {\n  testTypes(\"var foo \u003d function() {};\" + \"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type foo\");\n}",
    "begin_line": 7564,
    "end_line": 7568,
    "comment": "",
    "child_ranges": [
      "(line 7565,col 5)-(line 7567,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast11()",
    "snippet": "public void testCast11() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.foo \u003d {};\" + \"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type goog.foo\");\n}",
    "begin_line": 7570,
    "end_line": 7574,
    "comment": "",
    "child_ranges": [
      "(line 7571,col 5)-(line 7573,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast12()",
    "snippet": "public void testCast12() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.foo \u003d function() {};\" + \"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type goog.foo\");\n}",
    "begin_line": 7576,
    "end_line": 7580,
    "comment": "",
    "child_ranges": [
      "(line 7577,col 5)-(line 7579,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast13()",
    "snippet": "public void testCast13() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; \" + \"goog.addDependency(\u0027zzz.js\u0027, [\u0027goog.foo\u0027], []);\" + \"goog.foo \u003d function() {};\"+ \"function f() { return  (new Object()); }\",\"Bad type annotation. Unknown type goog.foo\");\n}",
    "begin_line": 7582,
    "end_line": 7590,
    "comment": "",
    "child_ranges": [
      "(line 7585,col 5)-(line 7589,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast14()",
    "snippet": "public void testCast14() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; \" + \"goog.addDependency(\u0027zzz.js\u0027, [\u0027goog.bar\u0027], []);\" + \"function f() { return  (new Object()); }\",null);\n}",
    "begin_line": 7592,
    "end_line": 7599,
    "comment": "",
    "child_ranges": [
      "(line 7595,col 5)-(line 7598,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast15()",
    "snippet": "public void testCast15() throws Exception {\n  testTypes(\"for (var i \u003d 0; i \u003c 10; i++) {\" + \"var x \u003d  ({foo: 3});\" + \" function f(x) {}\"+ \"f(x.foo);\"+ \"f([].foo);\"+ \"}\",\"Property foo never defined on Array\");\n}",
    "begin_line": 7601,
    "end_line": 7617,
    "comment": "",
    "child_ranges": [
      "(line 7609,col 5)-(line 7616,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast16()",
    "snippet": "public void testCast16() throws Exception {\n  testTypes(\"for (var i \u003d 0; i \u003c 10; i++) {\" + \"var x \u003d  (\" + \"  { foo: 3});\"+ \"}\",\"assignment to property foo of Object\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 7619,
    "end_line": 7629,
    "comment": "",
    "child_ranges": [
      "(line 7621,col 5)-(line 7628,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast17a()",
    "snippet": "public void testCast17a() throws Exception {\n  testTypes(\" function Foo() {} \\n\" + \" var x \u003d  (y)\");\n  testTypes(\" function Foo() {} \\n\" + \" var x \u003d ( y)\");\n}",
    "begin_line": 7631,
    "end_line": 7638,
    "comment": "",
    "child_ranges": [
      "(line 7633,col 5)-(line 7634,col 61)",
      "(line 7636,col 5)-(line 7637,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast17b()",
    "snippet": "public void testCast17b() throws Exception {\n  testTypes(\" function Foo() {} \\n\" + \" var x \u003d  ({})\");\n}",
    "begin_line": 7640,
    "end_line": 7644,
    "comment": "",
    "child_ranges": [
      "(line 7642,col 5)-(line 7643,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast18()",
    "snippet": "public void testCast18() throws Exception {\n  testTypes(\" function Foo() {} \\n\" + \" var x \u003d ( {})\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\");\n  testTypes(\" function Foo() {} \\n\" + \" var x \u003d  {}\",\"Type annotations are not allowed here. \" + \"Are you missing parentheses?\");\n}",
    "begin_line": 7646,
    "end_line": 7659,
    "comment": "",
    "child_ranges": [
      "(line 7649,col 5)-(line 7652,col 40)",
      "(line 7655,col 5)-(line 7658,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast19()",
    "snippet": "public void testCast19() throws Exception {\n  testTypes(\"var x \u003d \u0027string\u0027;\\n\" + \"\\n\" + \"var y \u003d (x);\",\"invalid cast - must be a subtype or supertype\\n\" + \"from: string\\n\" + \"to  : number\");\n}",
    "begin_line": 7661,
    "end_line": 7669,
    "comment": "",
    "child_ranges": [
      "(line 7662,col 5)-(line 7668,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast20()",
    "snippet": "public void testCast20() throws Exception {\n  testTypes(\"\\n\" + \"var X \u003d {\" + \"  AA: true,\"+ \"  BB: false,\"+ \"  CC: null\"+ \"};\\n\"+ \"var y \u003d (true);\");\n}",
    "begin_line": 7671,
    "end_line": 7680,
    "comment": "",
    "child_ranges": [
      "(line 7672,col 5)-(line 7679,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast21()",
    "snippet": "public void testCast21() throws Exception {\n  testTypes(\"\\n\" + \"var X \u003d {\" + \"  AA: true,\"+ \"  BB: false,\"+ \"  CC: null\"+ \"};\\n\"+ \"var value \u003d true;\\n\"+ \"var y \u003d (value);\");\n}",
    "begin_line": 7682,
    "end_line": 7692,
    "comment": "",
    "child_ranges": [
      "(line 7683,col 5)-(line 7691,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast22()",
    "snippet": "public void testCast22() throws Exception {\n  testTypes(\"var x \u003d null;\\n\" + \"var y \u003d (x);\",\"invalid cast - must be a subtype or supertype\\n\" + \"from: null\\n\" + \"to  : number\");\n}",
    "begin_line": 7694,
    "end_line": 7701,
    "comment": "",
    "child_ranges": [
      "(line 7695,col 5)-(line 7700,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast23()",
    "snippet": "public void testCast23() throws Exception {\n  testTypes(\"var x \u003d null;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7703,
    "end_line": 7707,
    "comment": "",
    "child_ranges": [
      "(line 7704,col 5)-(line 7706,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast24()",
    "snippet": "public void testCast24() throws Exception {\n  testTypes(\"var x \u003d undefined;\\n\" + \"var y \u003d (x);\",\"invalid cast - must be a subtype or supertype\\n\" + \"from: undefined\\n\" + \"to  : number\");\n}",
    "begin_line": 7709,
    "end_line": 7716,
    "comment": "",
    "child_ranges": [
      "(line 7710,col 5)-(line 7715,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast25()",
    "snippet": "public void testCast25() throws Exception {\n  testTypes(\"var x \u003d undefined;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7718,
    "end_line": 7722,
    "comment": "",
    "child_ranges": [
      "(line 7719,col 5)-(line 7721,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast26()",
    "snippet": "public void testCast26() throws Exception {\n  testTypes(\"function fn(dir) {\\n\" + \"  var node \u003d dir ? 1 : 2;\\n\" + \"  fn( (node));\\n\"+ \"}\");\n}",
    "begin_line": 7724,
    "end_line": 7730,
    "comment": "",
    "child_ranges": [
      "(line 7725,col 5)-(line 7729,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast27()",
    "snippet": "public void testCast27() throws Exception {\n  testTypes(\" function I() {}\\n\" + \" function C() {}\\n\" + \"var x \u003d new C();\\n\"+ \"var y \u003d (x);\");\n}",
    "begin_line": 7732,
    "end_line": 7739,
    "comment": "",
    "child_ranges": [
      "(line 7734,col 5)-(line 7738,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast27a()",
    "snippet": "public void testCast27a() throws Exception {\n  testTypes(\" function I() {}\\n\" + \" function C() {}\\n\" + \" var x ;\\n\"+ \"var y \u003d (x);\");\n}",
    "begin_line": 7741,
    "end_line": 7748,
    "comment": "",
    "child_ranges": [
      "(line 7743,col 5)-(line 7747,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast28()",
    "snippet": "public void testCast28() throws Exception {\n  testTypes(\" function I() {}\\n\" + \" function C() {}\\n\" + \" var x;\\n\"+ \"var y \u003d (x);\");\n}",
    "begin_line": 7750,
    "end_line": 7757,
    "comment": "",
    "child_ranges": [
      "(line 7752,col 5)-(line 7756,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast28a()",
    "snippet": "public void testCast28a() throws Exception {\n  testTypes(\" function I() {}\\n\" + \" function C() {}\\n\" + \" var x;\\n\"+ \"var y \u003d (x);\");\n}",
    "begin_line": 7759,
    "end_line": 7766,
    "comment": "",
    "child_ranges": [
      "(line 7761,col 5)-(line 7765,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast29a()",
    "snippet": "public void testCast29a() throws Exception {\n  testTypes(\" function C() {}\\n\" + \"var x \u003d new C();\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7768,
    "end_line": 7774,
    "comment": "",
    "child_ranges": [
      "(line 7770,col 5)-(line 7773,col 77)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast29b()",
    "snippet": "public void testCast29b() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7776,
    "end_line": 7782,
    "comment": "",
    "child_ranges": [
      "(line 7778,col 5)-(line 7781,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast29c()",
    "snippet": "public void testCast29c() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7784,
    "end_line": 7790,
    "comment": "",
    "child_ranges": [
      "(line 7786,col 5)-(line 7789,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast30()",
    "snippet": "public void testCast30() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7792,
    "end_line": 7798,
    "comment": "",
    "child_ranges": [
      "(line 7794,col 5)-(line 7797,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast31()",
    "snippet": "public void testCast31() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7800,
    "end_line": 7806,
    "comment": "",
    "child_ranges": [
      "(line 7802,col 5)-(line 7805,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast32()",
    "snippet": "public void testCast32() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7808,
    "end_line": 7813,
    "comment": "",
    "child_ranges": [
      "(line 7809,col 5)-(line 7812,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast33()",
    "snippet": "public void testCast33() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7815,
    "end_line": 7834,
    "comment": "",
    "child_ranges": [
      "(line 7818,col 5)-(line 7821,col 56)",
      "(line 7822,col 5)-(line 7825,col 55)",
      "(line 7826,col 5)-(line 7829,col 46)",
      "(line 7830,col 5)-(line 7833,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast34a()",
    "snippet": "public void testCast34a() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7836,
    "end_line": 7841,
    "comment": "",
    "child_ranges": [
      "(line 7837,col 5)-(line 7840,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCast34b()",
    "snippet": "public void testCast34b() throws Exception {\n  testTypes(\" function C() {}\\n\" + \" var x ;\\n\" + \"var y \u003d (x);\");\n}",
    "begin_line": 7843,
    "end_line": 7848,
    "comment": "",
    "child_ranges": [
      "(line 7844,col 5)-(line 7847,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNestedCasts()",
    "snippet": "public void testNestedCasts() throws Exception {\n  testTypes(\"var T \u003d function() {};\\n\" + \"var V \u003d function() {};\\n\" + \"\\n\"+ \"function f(b) { return b ? new T() : new V(); }\\n\"+ \"\\n\"+ \"function g(b) { return b ? true : undefined; }\\n\"+ \"\\n\"+ \"function h() {\\n\"+ \"return  (f( (g(true))));\\n\"+ \"}\");\n}",
    "begin_line": 7850,
    "end_line": 7867,
    "comment": "",
    "child_ranges": [
      "(line 7851,col 5)-(line 7866,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNativeCast1()",
    "snippet": "public void testNativeCast1() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f(String(true));\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 7869,
    "end_line": 7876,
    "comment": "",
    "child_ranges": [
      "(line 7870,col 5)-(line 7875,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNativeCast2()",
    "snippet": "public void testNativeCast2() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f(Number(true));\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 7878,
    "end_line": 7885,
    "comment": "",
    "child_ranges": [
      "(line 7879,col 5)-(line 7884,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNativeCast3()",
    "snippet": "public void testNativeCast3() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f(Boolean(\u0027\u0027));\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : boolean\\n\" + \"required: number\");\n}",
    "begin_line": 7887,
    "end_line": 7894,
    "comment": "",
    "child_ranges": [
      "(line 7888,col 5)-(line 7893,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNativeCast4()",
    "snippet": "public void testNativeCast4() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f(Error(\u0027\u0027));\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : Error\\n\" + \"required: number\");\n}",
    "begin_line": 7896,
    "end_line": 7903,
    "comment": "",
    "child_ranges": [
      "(line 7897,col 5)-(line 7902,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadConstructorCall()",
    "snippet": "public void testBadConstructorCall() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo();\",\"Constructor function (new:Foo): undefined should be called \" + \"with the \\\"new\\\" keyword\");\n}",
    "begin_line": 7905,
    "end_line": 7911,
    "comment": "",
    "child_ranges": [
      "(line 7906,col 5)-(line 7910,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeof()",
    "snippet": "public void testTypeof() throws Exception {\n  testTypes(\"function foo(){ var a \u003d typeof foo(); }\");\n}",
    "begin_line": 7913,
    "end_line": 7915,
    "comment": "",
    "child_ranges": [
      "(line 7914,col 5)-(line 7914,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeof2()",
    "snippet": "public void testTypeof2() throws Exception {\n  testTypes(\"function f(){ if (typeof 123 \u003d\u003d \u0027numbr\u0027) return 321; }\",\"unknown type: numbr\");\n}",
    "begin_line": 7917,
    "end_line": 7920,
    "comment": "",
    "child_ranges": [
      "(line 7918,col 5)-(line 7919,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeof3()",
    "snippet": "public void testTypeof3() throws Exception {\n  testTypes(\"function f() {\" + \"return (typeof 123 \u003d\u003d \u0027number\u0027 ||\" + \"typeof 123 \u003d\u003d \u0027string\u0027 ||\"+ \"typeof 123 \u003d\u003d \u0027boolean\u0027 ||\"+ \"typeof 123 \u003d\u003d \u0027undefined\u0027 ||\"+ \"typeof 123 \u003d\u003d \u0027function\u0027 ||\"+ \"typeof 123 \u003d\u003d \u0027object\u0027 ||\"+ \"typeof 123 \u003d\u003d \u0027unknown\u0027); }\");\n}",
    "begin_line": 7922,
    "end_line": 7931,
    "comment": "",
    "child_ranges": [
      "(line 7923,col 5)-(line 7930,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType1()",
    "snippet": "public void testConstructorType1() throws Exception {\n  testTypes(\"function Foo(){}\" + \"var f \u003d new Date();\",\"initializing variable\\n\" + \"found   : Date\\n\" + \"required: Foo\");\n}",
    "begin_line": 7933,
    "end_line": 7939,
    "comment": "",
    "child_ranges": [
      "(line 7934,col 5)-(line 7938,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType2()",
    "snippet": "public void testConstructorType2() throws Exception {\n  testTypes(\"function Foo(){\\n\" + \"this.bar \u003d new Number(5);\\n\" + \"}\\n\"+ \"var f \u003d new Foo();\\n\"+ \"var n \u003d f.bar;\");\n}",
    "begin_line": 7941,
    "end_line": 7947,
    "comment": "",
    "child_ranges": [
      "(line 7942,col 5)-(line 7946,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType3()",
    "snippet": "public void testConstructorType3() throws Exception {\n  testTypes(\"var f \u003d new Foo();\\n\" + \"var n \u003d f.bar;\" + \"function Foo(){\\n\"+ \"this.bar \u003d new Number(5);\\n\"+ \"}\\n\");\n}",
    "begin_line": 7949,
    "end_line": 7957,
    "comment": "",
    "child_ranges": [
      "(line 7952,col 5)-(line 7956,col 15)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType4()",
    "snippet": "public void testConstructorType4() throws Exception {\n  testTypes(\"function Foo(){\\n\" + \"this.bar \u003d new Number(5);\\n\" + \"}\\n\"+ \"var f \u003d new Foo();\\n\"+ \"var n \u003d f.bar;\",\"initializing variable\\n\" + \"found   : Number\\n\" + \"required: String\");\n}",
    "begin_line": 7959,
    "end_line": 7968,
    "comment": "",
    "child_ranges": [
      "(line 7960,col 5)-(line 7967,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType5()",
    "snippet": "public void testConstructorType5() throws Exception {\n  testTypes(\"function Foo(){}\\n\" + \"if (Foo){}\\n\");\n}",
    "begin_line": 7970,
    "end_line": 7973,
    "comment": "",
    "child_ranges": [
      "(line 7971,col 5)-(line 7972,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType6()",
    "snippet": "public void testConstructorType6() throws Exception {\n  testTypes(\"\\n\" + \"function bar() {}\\n\" + \"function _foo() {\\n\"+ \" \\n\"+ \"  function f(x) {}\\n\"+ \"}\");\n}",
    "begin_line": 7975,
    "end_line": 7982,
    "comment": "",
    "child_ranges": [
      "(line 7976,col 5)-(line 7981,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType7()",
    "snippet": "public void testConstructorType7() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"function A(){};\");\n  JSType type\u003dp.scope.getVar(\"A\").getType();\n  assertTrue(type instanceof FunctionType);\n  FunctionType fType\u003d(FunctionType)type;\n  assertEquals(\"A\",fType.getReferenceName());\n}",
    "begin_line": 7984,
    "end_line": 7992,
    "comment": "",
    "child_ranges": [
      "(line 7985,col 5)-(line 7986,col 73)",
      "(line 7988,col 5)-(line 7988,col 48)",
      "(line 7989,col 5)-(line 7989,col 45)",
      "(line 7990,col 5)-(line 7990,col 45)",
      "(line 7991,col 5)-(line 7991,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType8()",
    "snippet": "public void testConstructorType8() throws Exception {\n  testTypes(\"var ns \u003d {};\" + \"ns.create \u003d function() { return function() {}; };\" + \" ns.Foo \u003d ns.create();\"+ \"ns.Foo.prototype \u003d {x: 0, y: 0};\"+ \"\\n\"+ \"function f(foo) {\"+ \"  return foo.x;\"+ \"}\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 7994,
    "end_line": 8010,
    "comment": "",
    "child_ranges": [
      "(line 7995,col 5)-(line 8009,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType9()",
    "snippet": "public void testConstructorType9() throws Exception {\n  testTypes(\"var ns \u003d {};\" + \"ns.create \u003d function() { return function() {}; };\" + \"ns.extend \u003d function(x) { return x; };\"+ \" ns.Foo \u003d ns.create();\"+ \"ns.Foo.prototype \u003d ns.extend({x: 0, y: 0});\"+ \"\\n\"+ \"function f(foo) {\"+ \"  return foo.x;\"+ \"}\");\n}",
    "begin_line": 8012,
    "end_line": 8026,
    "comment": "",
    "child_ranges": [
      "(line 8013,col 5)-(line 8025,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType10()",
    "snippet": "public void testConstructorType10() throws Exception {\n  testTypes(\"\" + \"function NonStr() {}\" + \"\"+ \"function NonStrKid() {}\",\"NonStrKid cannot extend this type; \" + \"structs can only extend structs\");\n}",
    "begin_line": 8028,
    "end_line": 8039,
    "comment": "",
    "child_ranges": [
      "(line 8029,col 5)-(line 8038,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType11()",
    "snippet": "public void testConstructorType11() throws Exception {\n  testTypes(\"\" + \"function NonDict() {}\" + \"\"+ \"function NonDictKid() {}\",\"NonDictKid cannot extend this type; \" + \"dicts can only extend dicts\");\n}",
    "begin_line": 8041,
    "end_line": 8052,
    "comment": "",
    "child_ranges": [
      "(line 8042,col 5)-(line 8051,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConstructorType12()",
    "snippet": "public void testConstructorType12() throws Exception {\n  testTypes(\"\\n\"+ \"function Bar() {}\\n\"+ \"Bar.prototype \u003d {};\\n\",\"Bar cannot extend this type; \" + \"structs can only extend structs\");\n}",
    "begin_line": 8054,
    "end_line": 8063,
    "comment": "",
    "child_ranges": [
      "(line 8055,col 5)-(line 8062,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadStruct()",
    "snippet": "public void testBadStruct() throws Exception {\n  testTypes(\"function Struct1() {}\",\"@struct used without @constructor for Struct1\");\n}",
    "begin_line": 8065,
    "end_line": 8068,
    "comment": "",
    "child_ranges": [
      "(line 8066,col 5)-(line 8067,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadDict()",
    "snippet": "public void testBadDict() throws Exception {\n  testTypes(\"function Dict1() {}\",\"@dict used without @constructor for Dict1\");\n}",
    "begin_line": 8070,
    "end_line": 8073,
    "comment": "",
    "child_ranges": [
      "(line 8071,col 5)-(line 8072,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnonymousPrototype1()",
    "snippet": "public void testAnonymousPrototype1() throws Exception {\n  testTypes(\"var ns \u003d {};\" + \" ns.Foo \u003d function() {\" + \"  this.bar(3, 5);\"+ \"};\"+ \"ns.Foo.prototype \u003d {\"+ \"  bar: function(x) {}\"+ \"};\",\"Function ns.Foo.prototype.bar: called with 2 argument(s). \" + \"Function requires at least 1 argument(s) and no more \" + \"than 1 argument(s).\");\n}",
    "begin_line": 8075,
    "end_line": 8087,
    "comment": "",
    "child_ranges": [
      "(line 8076,col 5)-(line 8086,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnonymousPrototype2()",
    "snippet": "public void testAnonymousPrototype2() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \"Foo.prototype \u003d {\" + \"  foo: function(x) {}\"+ \"};\"+ \" var Bar \u003d function() {};\",\"property foo on interface Foo is not implemented by type Bar\");\n}",
    "begin_line": 8089,
    "end_line": 8100,
    "comment": "",
    "child_ranges": [
      "(line 8090,col 5)-(line 8099,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnonymousType1()",
    "snippet": "public void testAnonymousType1() throws Exception {\n  testTypes(\"function f() { return {}; }\" + \"\\n\" + \"f().bar \u003d function() {};\");\n}",
    "begin_line": 8102,
    "end_line": 8106,
    "comment": "",
    "child_ranges": [
      "(line 8103,col 5)-(line 8105,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnonymousType2()",
    "snippet": "public void testAnonymousType2() throws Exception {\n  testTypes(\"function f() { return {}; }\" + \"\\n\" + \"f().bar \u003d function() {};\");\n}",
    "begin_line": 8108,
    "end_line": 8112,
    "comment": "",
    "child_ranges": [
      "(line 8109,col 5)-(line 8111,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnonymousType3()",
    "snippet": "public void testAnonymousType3() throws Exception {\n  testTypes(\"function f() { return {}; }\" + \"\\n\" + \"f().bar \u003d {FOO: 1};\");\n}",
    "begin_line": 8114,
    "end_line": 8118,
    "comment": "",
    "child_ranges": [
      "(line 8115,col 5)-(line 8117,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang1()",
    "snippet": "public void testBang1() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) { return x; }\",\"inconsistent return type\\n\" + \"found   : (Object|null)\\n\" + \"required: Object\");\n}",
    "begin_line": 8120,
    "end_line": 8126,
    "comment": "",
    "child_ranges": [
      "(line 8121,col 5)-(line 8125,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang2()",
    "snippet": "public void testBang2() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) { return x ? x : new Object(); }\");\n}",
    "begin_line": 8128,
    "end_line": 8131,
    "comment": "",
    "child_ranges": [
      "(line 8129,col 5)-(line 8130,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang3()",
    "snippet": "public void testBang3() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) { return  (x); }\");\n}",
    "begin_line": 8133,
    "end_line": 8136,
    "comment": "",
    "child_ranges": [
      "(line 8134,col 5)-(line 8135,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang4()",
    "snippet": "public void testBang4() throws Exception {\n  testTypes(\"\\n\" + \"function f(x, y) {\\n\" + \"if (typeof x !\u003d \u0027undefined\u0027) { return x \u003d\u003d y; }\\n\"+ \"else { return x !\u003d y; }\\n}\");\n}",
    "begin_line": 8138,
    "end_line": 8143,
    "comment": "",
    "child_ranges": [
      "(line 8139,col 5)-(line 8142,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang5()",
    "snippet": "public void testBang5() throws Exception {\n  testTypes(\"\\n\" + \"function f(x, y) { return !!x \u0026\u0026 x \u003d\u003d y; }\");\n}",
    "begin_line": 8145,
    "end_line": 8148,
    "comment": "",
    "child_ranges": [
      "(line 8146,col 5)-(line 8147,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang6()",
    "snippet": "public void testBang6() throws Exception {\n  testTypes(\"\\n\" + \"function f(x) { return x; }\");\n}",
    "begin_line": 8150,
    "end_line": 8153,
    "comment": "",
    "child_ranges": [
      "(line 8151,col 5)-(line 8152,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBang7()",
    "snippet": "public void testBang7() throws Exception {\n  testTypes(\"function f(x) { return x; }\");\n}",
    "begin_line": 8155,
    "end_line": 8158,
    "comment": "",
    "child_ranges": [
      "(line 8156,col 5)-(line 8157,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject1()",
    "snippet": "public void testDefinePropertyOnNullableObject1() throws Exception {\n  testTypes(\" var n \u003d {};\\n\" + \" n.x \u003d 1;\\n\" + \"function f() { return n.x; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: boolean\");\n}",
    "begin_line": 8160,
    "end_line": 8167,
    "comment": "",
    "child_ranges": [
      "(line 8161,col 5)-(line 8166,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDefinePropertyOnNullableObject2()",
    "snippet": "public void testDefinePropertyOnNullableObject2() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \"function f(t) {\\n\" + \"t.x \u003d 1; return t.x; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: boolean\");\n}",
    "begin_line": 8169,
    "end_line": 8176,
    "comment": "",
    "child_ranges": [
      "(line 8170,col 5)-(line 8175,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType1()",
    "snippet": "public void testUnknownConstructorInstanceType1() throws Exception {\n  testTypes(\" function g(f) { return new f(); }\");\n}",
    "begin_line": 8178,
    "end_line": 8180,
    "comment": "",
    "child_ranges": [
      "(line 8179,col 5)-(line 8179,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType2()",
    "snippet": "public void testUnknownConstructorInstanceType2() throws Exception {\n  testTypes(\"function g(f) { return (new f()); }\");\n}",
    "begin_line": 8182,
    "end_line": 8184,
    "comment": "",
    "child_ranges": [
      "(line 8183,col 5)-(line 8183,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnknownConstructorInstanceType3()",
    "snippet": "public void testUnknownConstructorInstanceType3() throws Exception {\n  testTypes(\"function g(f) { var x \u003d new f(); x.a \u003d 1; return x; }\");\n}",
    "begin_line": 8186,
    "end_line": 8188,
    "comment": "",
    "child_ranges": [
      "(line 8187,col 5)-(line 8187,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnknownPrototypeChain()",
    "snippet": "public void testUnknownPrototypeChain() throws Exception {\n  testTypes(\"\\n\"+ \"function inst(co) {\\n\"+ \" \\n\"+ \" var c \u003d function() {};\\n\"+ \" c.prototype \u003d co.prototype;\\n\"+ \" return new c;\\n\"+ \"}\");\n}",
    "begin_line": 8190,
    "end_line": 8201,
    "comment": "",
    "child_ranges": [
      "(line 8191,col 5)-(line 8200,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNamespacedConstructor()",
    "snippet": "public void testNamespacedConstructor() throws Exception {\n  Node root\u003dparseAndTypeCheck(\"var goog \u003d {};\" + \" goog.MyClass \u003d function() {};\" + \" \"+ \"function foo() { return new goog.MyClass(); }\");\n  JSType typeOfFoo\u003droot.getLastChild().getJSType();\n  assert (typeOfFoo instanceof FunctionType);\n  JSType retType\u003d((FunctionType)typeOfFoo).getReturnType();\n  assert (retType instanceof ObjectType);\n  assertEquals(\"goog.MyClass\",((ObjectType)retType).getReferenceName());\n}",
    "begin_line": 8203,
    "end_line": 8216,
    "comment": "",
    "child_ranges": [
      "(line 8204,col 5)-(line 8208,col 57)",
      "(line 8210,col 5)-(line 8210,col 55)",
      "(line 8211,col 5)-(line 8211,col 46)",
      "(line 8213,col 5)-(line 8213,col 64)",
      "(line 8214,col 5)-(line 8214,col 42)",
      "(line 8215,col 5)-(line 8215,col 76)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testComplexNamespace()",
    "snippet": "public void testComplexNamespace() throws Exception {\n  String js\u003d\"var goog \u003d {};\" + \"goog.foo \u003d {};\" + \"goog.foo.bar \u003d 5;\";\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(js);\n  JSType googScopeType\u003dp.scope.getVar(\"goog\").getType();\n  assertTrue(googScopeType instanceof ObjectType);\n  assertTrue(\"foo property not present on goog type\",((ObjectType)googScopeType).hasProperty(\"foo\"));\n  assertFalse(\"bar property present on goog type\",((ObjectType)googScopeType).hasProperty(\"bar\"));\n  Node varNode\u003dp.root.getFirstChild();\n  assertEquals(Token.VAR,varNode.getType());\n  JSType googNodeType\u003dvarNode.getFirstChild().getJSType();\n  assertTrue(googNodeType instanceof ObjectType);\n  assertTrue(googScopeType \u003d\u003d googNodeType);\n  Node getpropFoo1\u003dvarNode.getNext().getFirstChild().getFirstChild();\n  assertEquals(Token.GETPROP,getpropFoo1.getType());\n  assertEquals(\"goog\",getpropFoo1.getFirstChild().getString());\n  JSType googGetpropFoo1Type\u003dgetpropFoo1.getFirstChild().getJSType();\n  assertTrue(googGetpropFoo1Type instanceof ObjectType);\n  assertTrue(googGetpropFoo1Type \u003d\u003d googScopeType);\n  JSType googFooType\u003d((ObjectType)googScopeType).getPropertyType(\"foo\");\n  assertTrue(googFooType instanceof ObjectType);\n  Node getpropFoo2\u003dvarNode.getNext().getNext().getFirstChild().getFirstChild().getFirstChild();\n  assertEquals(Token.GETPROP,getpropFoo2.getType());\n  assertEquals(\"goog\",getpropFoo2.getFirstChild().getString());\n  JSType googGetpropFoo2Type\u003dgetpropFoo2.getFirstChild().getJSType();\n  assertTrue(googGetpropFoo2Type instanceof ObjectType);\n  assertTrue(googGetpropFoo2Type \u003d\u003d googScopeType);\n  JSType googFooGetprop2Type\u003dgetpropFoo2.getJSType();\n  assertTrue(\"goog.foo incorrectly annotated in goog.foo.bar selection\",googFooGetprop2Type instanceof ObjectType);\n  ObjectType googFooGetprop2ObjectType\u003d(ObjectType)googFooGetprop2Type;\n  assertFalse(\"foo property present on goog.foo type\",googFooGetprop2ObjectType.hasProperty(\"foo\"));\n  assertTrue(\"bar property not present on goog.foo type\",googFooGetprop2ObjectType.hasProperty(\"bar\"));\n  assertTypeEquals(\"bar property on goog.foo type incorrectly inferred\",NUMBER_TYPE,googFooGetprop2ObjectType.getPropertyType(\"bar\"));\n}",
    "begin_line": 8218,
    "end_line": 8281,
    "comment": "",
    "child_ranges": [
      "(line 8219,col 5)-(line 8222,col 26)",
      "(line 8224,col 5)-(line 8224,col 55)",
      "(line 8227,col 5)-(line 8227,col 60)",
      "(line 8228,col 5)-(line 8228,col 52)",
      "(line 8229,col 5)-(line 8230,col 57)",
      "(line 8231,col 5)-(line 8232,col 57)",
      "(line 8235,col 5)-(line 8235,col 42)",
      "(line 8236,col 5)-(line 8236,col 47)",
      "(line 8237,col 5)-(line 8237,col 62)",
      "(line 8238,col 5)-(line 8238,col 51)",
      "(line 8241,col 5)-(line 8241,col 46)",
      "(line 8244,col 5)-(line 8244,col 73)",
      "(line 8245,col 5)-(line 8245,col 55)",
      "(line 8246,col 5)-(line 8246,col 66)",
      "(line 8247,col 5)-(line 8247,col 73)",
      "(line 8248,col 5)-(line 8248,col 58)",
      "(line 8251,col 5)-(line 8251,col 53)",
      "(line 8254,col 5)-(line 8254,col 77)",
      "(line 8255,col 5)-(line 8255,col 50)",
      "(line 8259,col 5)-(line 8260,col 57)",
      "(line 8261,col 5)-(line 8261,col 55)",
      "(line 8262,col 5)-(line 8262,col 66)",
      "(line 8263,col 5)-(line 8263,col 73)",
      "(line 8264,col 5)-(line 8264,col 58)",
      "(line 8267,col 5)-(line 8267,col 53)",
      "(line 8271,col 5)-(line 8271,col 57)",
      "(line 8272,col 5)-(line 8273,col 51)",
      "(line 8274,col 5)-(line 8274,col 76)",
      "(line 8275,col 5)-(line 8276,col 54)",
      "(line 8277,col 5)-(line 8278,col 54)",
      "(line 8279,col 5)-(line 8280,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomSimpleNamespace()",
    "snippet": "public void testAddingMethodsUsingPrototypeIdiomSimpleNamespace() throws Exception {\n  Node js1Node\u003dparseAndTypeCheck(\"function A() {}\" + \"A.prototype.m1 \u003d 5\");\n  ObjectType instanceType\u003dgetInstanceType(js1Node);\n  assertEquals(NATIVE_PROPERTIES_COUNT + 1,instanceType.getPropertiesCount());\n  checkObjectType(instanceType,\"m1\",NUMBER_TYPE);\n}",
    "begin_line": 8283,
    "end_line": 8293,
    "comment": "",
    "child_ranges": [
      "(line 8285,col 5)-(line 8287,col 30)",
      "(line 8289,col 5)-(line 8289,col 55)",
      "(line 8290,col 5)-(line 8291,col 43)",
      "(line 8292,col 5)-(line 8292,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace1()",
    "snippet": "public void testAddingMethodsUsingPrototypeIdiomComplexNamespace1() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var goog \u003d {};\" + \"goog.A \u003d function() {};\" + \"goog.A.prototype.m1 \u003d 5\");\n  testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n}",
    "begin_line": 8295,
    "end_line": 8303,
    "comment": "",
    "child_ranges": [
      "(line 8297,col 5)-(line 8300,col 54)",
      "(line 8302,col 5)-(line 8302,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace2()",
    "snippet": "public void testAddingMethodsUsingPrototypeIdiomComplexNamespace2() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"var goog \u003d {};\" + \"goog.A \u003d function() {};\" + \"goog.A.prototype.m1 \u003d 5\");\n  testAddingMethodsUsingPrototypeIdiomComplexNamespace(p);\n}",
    "begin_line": 8305,
    "end_line": 8313,
    "comment": "",
    "child_ranges": [
      "(line 8307,col 5)-(line 8310,col 54)",
      "(line 8312,col 5)-(line 8312,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddingMethodsUsingPrototypeIdiomComplexNamespace(com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult)",
    "snippet": "private void testAddingMethodsUsingPrototypeIdiomComplexNamespace(TypeCheckResult p){\n  ObjectType goog\u003d(ObjectType)p.scope.getVar(\"goog\").getType();\n  assertEquals(NATIVE_PROPERTIES_COUNT + 1,goog.getPropertiesCount());\n  JSType googA\u003dgoog.getPropertyType(\"A\");\n  assertNotNull(googA);\n  assertTrue(googA instanceof FunctionType);\n  FunctionType googAFunction\u003d(FunctionType)googA;\n  ObjectType classA\u003dgoogAFunction.getInstanceType();\n  assertEquals(NATIVE_PROPERTIES_COUNT + 1,classA.getPropertiesCount());\n  checkObjectType(classA,\"m1\",NUMBER_TYPE);\n}",
    "begin_line": 8315,
    "end_line": 8326,
    "comment": "",
    "child_ranges": [
      "(line 8317,col 5)-(line 8317,col 68)",
      "(line 8318,col 5)-(line 8318,col 73)",
      "(line 8319,col 5)-(line 8319,col 45)",
      "(line 8320,col 5)-(line 8320,col 25)",
      "(line 8321,col 5)-(line 8321,col 46)",
      "(line 8322,col 5)-(line 8322,col 54)",
      "(line 8323,col 5)-(line 8323,col 56)",
      "(line 8324,col 5)-(line 8324,col 75)",
      "(line 8325,col 5)-(line 8325,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace()",
    "snippet": "public void testAddingMethodsPrototypeIdiomAndObjectLiteralSimpleNamespace() throws Exception {\n  Node js1Node\u003dparseAndTypeCheck(\"function A() {}\" + \"A.prototype \u003d {m1: 5, m2: true}\");\n  ObjectType instanceType\u003dgetInstanceType(js1Node);\n  assertEquals(NATIVE_PROPERTIES_COUNT + 2,instanceType.getPropertiesCount());\n  checkObjectType(instanceType,\"m1\",NUMBER_TYPE);\n  checkObjectType(instanceType,\"m2\",BOOLEAN_TYPE);\n}",
    "begin_line": 8328,
    "end_line": 8339,
    "comment": "",
    "child_ranges": [
      "(line 8330,col 5)-(line 8332,col 43)",
      "(line 8334,col 5)-(line 8334,col 55)",
      "(line 8335,col 5)-(line 8336,col 43)",
      "(line 8337,col 5)-(line 8337,col 53)",
      "(line 8338,col 5)-(line 8338,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDontAddMethodsIfNoConstructor()",
    "snippet": "public void testDontAddMethodsIfNoConstructor() throws Exception {\n  Node js1Node\u003dparseAndTypeCheck(\"function A() {}\" + \"A.prototype \u003d {m1: 5, m2: true}\");\n  JSType functionAType\u003djs1Node.getFirstChild().getJSType();\n  assertEquals(\"function (): undefined\",functionAType.toString());\n  assertTypeEquals(UNKNOWN_TYPE,U2U_FUNCTION_TYPE.getPropertyType(\"m1\"));\n  assertTypeEquals(UNKNOWN_TYPE,U2U_FUNCTION_TYPE.getPropertyType(\"m2\"));\n}",
    "begin_line": 8341,
    "end_line": 8353,
    "comment": "",
    "child_ranges": [
      "(line 8343,col 5)-(line 8345,col 43)",
      "(line 8347,col 5)-(line 8347,col 63)",
      "(line 8348,col 5)-(line 8348,col 69)",
      "(line 8349,col 5)-(line 8350,col 49)",
      "(line 8351,col 5)-(line 8352,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionAssignement()",
    "snippet": "public void testFunctionAssignement() throws Exception {\n  testTypes(\"\"+ \"function MSG_CALENDAR_ACCESS_ERROR(ph0, ph1) {return \u0027\u0027}\"+ \"\"+ \"var MSG_CALENDAR_ADD_ERROR \u003d MSG_CALENDAR_ACCESS_ERROR;\");\n}",
    "begin_line": 8355,
    "end_line": 8364,
    "comment": "",
    "child_ranges": [
      "(line 8356,col 5)-(line 8363,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddMethodsPrototypeTwoWays()",
    "snippet": "public void testAddMethodsPrototypeTwoWays() throws Exception {\n  Node js1Node\u003dparseAndTypeCheck(\"function A() {}\" + \"A.prototype \u003d {m1: 5, m2: true};\" + \"A.prototype.m3 \u003d \u0027third property!\u0027;\");\n  ObjectType instanceType\u003dgetInstanceType(js1Node);\n  assertEquals(\"A\",instanceType.toString());\n  assertEquals(NATIVE_PROPERTIES_COUNT + 3,instanceType.getPropertiesCount());\n  checkObjectType(instanceType,\"m1\",NUMBER_TYPE);\n  checkObjectType(instanceType,\"m2\",BOOLEAN_TYPE);\n  checkObjectType(instanceType,\"m3\",STRING_TYPE);\n}",
    "begin_line": 8366,
    "end_line": 8379,
    "comment": "",
    "child_ranges": [
      "(line 8367,col 5)-(line 8370,col 47)",
      "(line 8372,col 5)-(line 8372,col 55)",
      "(line 8373,col 5)-(line 8373,col 47)",
      "(line 8374,col 5)-(line 8375,col 43)",
      "(line 8376,col 5)-(line 8376,col 53)",
      "(line 8377,col 5)-(line 8377,col 54)",
      "(line 8378,col 5)-(line 8378,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrototypePropertyTypes()",
    "snippet": "public void testPrototypePropertyTypes() throws Exception {\n  Node js1Node\u003dparseAndTypeCheck(\"function A() {\\n\" + \"   this.m1;\\n\" + \"   this.m2 \u003d {};\\n\"+ \"   this.m3;\\n\"+ \"}\\n\"+ \" A.prototype.m4;\\n\"+ \" A.prototype.m5 \u003d 0;\\n\"+ \" A.prototype.m6;\\n\");\n  ObjectType instanceType\u003dgetInstanceType(js1Node);\n  assertEquals(NATIVE_PROPERTIES_COUNT + 6,instanceType.getPropertiesCount());\n  checkObjectType(instanceType,\"m1\",STRING_TYPE);\n  checkObjectType(instanceType,\"m2\",createUnionType(OBJECT_TYPE,NULL_TYPE));\n  checkObjectType(instanceType,\"m3\",BOOLEAN_TYPE);\n  checkObjectType(instanceType,\"m4\",STRING_TYPE);\n  checkObjectType(instanceType,\"m5\",NUMBER_TYPE);\n  checkObjectType(instanceType,\"m6\",BOOLEAN_TYPE);\n}",
    "begin_line": 8381,
    "end_line": 8402,
    "comment": "",
    "child_ranges": [
      "(line 8382,col 5)-(line 8390,col 50)",
      "(line 8392,col 5)-(line 8392,col 55)",
      "(line 8393,col 5)-(line 8394,col 43)",
      "(line 8395,col 5)-(line 8395,col 53)",
      "(line 8396,col 5)-(line 8397,col 49)",
      "(line 8398,col 5)-(line 8398,col 54)",
      "(line 8399,col 5)-(line 8399,col 53)",
      "(line 8400,col 5)-(line 8400,col 53)",
      "(line 8401,col 5)-(line 8401,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testValueTypeBuiltInPrototypePropertyType()",
    "snippet": "public void testValueTypeBuiltInPrototypePropertyType() throws Exception {\n  Node node\u003dparseAndTypeCheck(\"\\\"x\\\".charAt(0)\");\n  assertTypeEquals(STRING_TYPE,node.getFirstChild().getFirstChild().getJSType());\n}",
    "begin_line": 8404,
    "end_line": 8407,
    "comment": "",
    "child_ranges": [
      "(line 8405,col 5)-(line 8405,col 53)",
      "(line 8406,col 5)-(line 8406,col 84)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDeclareBuiltInConstructor()",
    "snippet": "public void testDeclareBuiltInConstructor() throws Exception {\n  Node node\u003dparseAndTypeCheck(\" var String \u003d function(opt_str) {};\\n\" + \"(new String(\\\"x\\\")).charAt(0)\");\n  assertTypeEquals(STRING_TYPE,node.getLastChild().getFirstChild().getJSType());\n}",
    "begin_line": 8409,
    "end_line": 8416,
    "comment": "",
    "child_ranges": [
      "(line 8412,col 5)-(line 8414,col 41)",
      "(line 8415,col 5)-(line 8415,col 83)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendBuiltInType1()",
    "snippet": "public void testExtendBuiltInType1() throws Exception {\n  String externs\u003d\" var String \u003d function(opt_str) {};\\n\" + \"\\n\"+ \"String.prototype.substr \u003d function(start, opt_length) {};\\n\";\n  Node n1\u003dparseAndTypeCheck(externs + \"(new String(\\\"x\\\")).substr(0,1);\");\n  assertTypeEquals(STRING_TYPE,n1.getLastChild().getFirstChild().getJSType());\n}",
    "begin_line": 8418,
    "end_line": 8429,
    "comment": "",
    "child_ranges": [
      "(line 8419,col 5)-(line 8426,col 70)",
      "(line 8427,col 5)-(line 8427,col 78)",
      "(line 8428,col 5)-(line 8428,col 81)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendBuiltInType2()",
    "snippet": "public void testExtendBuiltInType2() throws Exception {\n  String externs\u003d\" var String \u003d function(opt_str) {};\\n\" + \"\\n\"+ \"String.prototype.substr \u003d function(start, opt_length) {};\\n\";\n  Node n2\u003dparseAndTypeCheck(externs + \"\\\"x\\\".substr(0,1);\");\n  assertTypeEquals(STRING_TYPE,n2.getLastChild().getFirstChild().getJSType());\n}",
    "begin_line": 8431,
    "end_line": 8442,
    "comment": "",
    "child_ranges": [
      "(line 8432,col 5)-(line 8439,col 70)",
      "(line 8440,col 5)-(line 8440,col 64)",
      "(line 8441,col 5)-(line 8441,col 81)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendFunction1()",
    "snippet": "public void testExtendFunction1() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"Function.prototype.f \u003d \" + \"function() { return 1; };\\n\" + \"(new Function()).f();\");\n  JSType type\u003dn.getLastChild().getLastChild().getJSType();\n  assertTypeEquals(NUMBER_TYPE,type);\n}",
    "begin_line": 8444,
    "end_line": 8450,
    "comment": "",
    "child_ranges": [
      "(line 8445,col 5)-(line 8447,col 33)",
      "(line 8448,col 5)-(line 8448,col 62)",
      "(line 8449,col 5)-(line 8449,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendFunction2()",
    "snippet": "public void testExtendFunction2() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"Function.prototype.f \u003d \" + \"function() { return 1; };\\n\" + \"(function() {}).f();\");\n  JSType type\u003dn.getLastChild().getLastChild().getJSType();\n  assertTypeEquals(NUMBER_TYPE,type);\n}",
    "begin_line": 8452,
    "end_line": 8458,
    "comment": "",
    "child_ranges": [
      "(line 8453,col 5)-(line 8455,col 32)",
      "(line 8456,col 5)-(line 8456,col 62)",
      "(line 8457,col 5)-(line 8457,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck1()",
    "snippet": "public void testInheritanceCheck1() throws Exception {\n  testTypes(\"function Super() {};\" + \"function Sub() {};\" + \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8460,
    "end_line": 8465,
    "comment": "",
    "child_ranges": [
      "(line 8461,col 5)-(line 8464,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck2()",
    "snippet": "public void testInheritanceCheck2() throws Exception {\n  testTypes(\"function Super() {};\" + \"function Sub() {};\" + \"Sub.prototype.foo \u003d function() {};\",\"property foo not defined on any superclass of Sub\");\n}",
    "begin_line": 8467,
    "end_line": 8473,
    "comment": "",
    "child_ranges": [
      "(line 8468,col 5)-(line 8472,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck3()",
    "snippet": "public void testInheritanceCheck3() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\",\"property foo already defined on superclass Super; \" + \"use @override to override it\");\n}",
    "begin_line": 8475,
    "end_line": 8483,
    "comment": "",
    "child_ranges": [
      "(line 8476,col 5)-(line 8482,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck4()",
    "snippet": "public void testInheritanceCheck4() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8485,
    "end_line": 8491,
    "comment": "",
    "child_ranges": [
      "(line 8486,col 5)-(line 8490,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck5()",
    "snippet": "public void testInheritanceCheck5() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\",\"property foo already defined on superclass Root; \" + \"use @override to override it\");\n}",
    "begin_line": 8493,
    "end_line": 8502,
    "comment": "",
    "child_ranges": [
      "(line 8494,col 5)-(line 8501,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck6()",
    "snippet": "public void testInheritanceCheck6() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8504,
    "end_line": 8511,
    "comment": "",
    "child_ranges": [
      "(line 8505,col 5)-(line 8510,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck7()",
    "snippet": "public void testInheritanceCheck7() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.Super \u003d function() {};\" + \"goog.Super.prototype.foo \u003d 3;\"+ \"goog.Sub \u003d function() {};\"+ \"goog.Sub.prototype.foo \u003d 5;\");\n}",
    "begin_line": 8513,
    "end_line": 8520,
    "comment": "",
    "child_ranges": [
      "(line 8514,col 5)-(line 8519,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck8()",
    "snippet": "public void testInheritanceCheck8() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.Super \u003d function() {};\" + \"goog.Super.prototype.foo \u003d 3;\"+ \"goog.Sub \u003d function() {};\"+ \"goog.Sub.prototype.foo \u003d 5;\");\n}",
    "begin_line": 8522,
    "end_line": 8529,
    "comment": "",
    "child_ranges": [
      "(line 8523,col 5)-(line 8528,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck9_1()",
    "snippet": "public void testInheritanceCheck9_1() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() { return 3; };\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return 1; };\");\n}",
    "begin_line": 8531,
    "end_line": 8538,
    "comment": "",
    "child_ranges": [
      "(line 8532,col 5)-(line 8537,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck9_2()",
    "snippet": "public void testInheritanceCheck9_2() throws Exception {\n  testTypes(\"function Super() {};\" + \"\" + \"Super.prototype.foo \u003d function() { return 1; };\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() {};\");\n}",
    "begin_line": 8540,
    "end_line": 8548,
    "comment": "",
    "child_ranges": [
      "(line 8541,col 5)-(line 8547,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck9_3()",
    "snippet": "public void testInheritanceCheck9_3() throws Exception {\n  testTypes(\"function Super() {};\" + \"\" + \"Super.prototype.foo \u003d function() { return 1; };\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return \\\"some string\\\" };\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from superclass Super\\n\" + \"original: function (this:Super): number\\n\"+ \"override: function (this:Sub): string\");\n}",
    "begin_line": 8550,
    "end_line": 8562,
    "comment": "",
    "child_ranges": [
      "(line 8551,col 5)-(line 8561,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck10_1()",
    "snippet": "public void testInheritanceCheck10_1() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() { return 3; };\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return 1; };\");\n}",
    "begin_line": 8564,
    "end_line": 8572,
    "comment": "",
    "child_ranges": [
      "(line 8565,col 5)-(line 8571,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck10_2()",
    "snippet": "public void testInheritanceCheck10_2() throws Exception {\n  testTypes(\"function Root() {};\" + \"\" + \"Root.prototype.foo \u003d function() { return 1; };\"+ \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() {};\");\n}",
    "begin_line": 8574,
    "end_line": 8583,
    "comment": "",
    "child_ranges": [
      "(line 8575,col 5)-(line 8582,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck10_3()",
    "snippet": "public void testInheritanceCheck10_3() throws Exception {\n  testTypes(\"function Root() {};\" + \"\" + \"Root.prototype.foo \u003d function() { return 1; };\"+ \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return \\\"some string\\\" };\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from superclass Root\\n\" + \"original: function (this:Root): number\\n\"+ \"override: function (this:Sub): string\");\n}",
    "begin_line": 8585,
    "end_line": 8598,
    "comment": "",
    "child_ranges": [
      "(line 8586,col 5)-(line 8597,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck11()",
    "snippet": "public void testInterfaceInheritanceCheck11() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function(bar) {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function(bar) {};\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from superclass Super\\n\" + \"original: function (this:Super, number): undefined\\n\"+ \"override: function (this:Sub, string): undefined\");\n}",
    "begin_line": 8600,
    "end_line": 8611,
    "comment": "",
    "child_ranges": [
      "(line 8601,col 5)-(line 8610,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck12()",
    "snippet": "public void testInheritanceCheck12() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.Super \u003d function() {};\" + \"goog.Super.prototype.foo \u003d 3;\"+ \"goog.Sub \u003d function() {};\"+ \"goog.Sub.prototype.foo \u003d \\\"some string\\\";\");\n}",
    "begin_line": 8613,
    "end_line": 8620,
    "comment": "",
    "child_ranges": [
      "(line 8614,col 5)-(line 8619,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck13()",
    "snippet": "public void testInheritanceCheck13() throws Exception {\n  testTypes(\"var goog \u003d {};\\n\" + \"function Sub() {};\" + \"Sub.prototype.foo \u003d function() {};\",\"Bad type annotation. Unknown type goog.Missing\");\n}",
    "begin_line": 8622,
    "end_line": 8628,
    "comment": "",
    "child_ranges": [
      "(line 8623,col 5)-(line 8627,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck14()",
    "snippet": "public void testInheritanceCheck14() throws Exception {\n  testClosureTypes(\"var goog \u003d {};\\n\" + \"\\n\" + \"goog.Super \u003d function() {};\\n\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\",\"Bad type annotation. Unknown type goog.Missing\");\n}",
    "begin_line": 8630,
    "end_line": 8638,
    "comment": "",
    "child_ranges": [
      "(line 8631,col 5)-(line 8637,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck15()",
    "snippet": "public void testInheritanceCheck15() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo;\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function(bar) {};\");\n}",
    "begin_line": 8640,
    "end_line": 8647,
    "comment": "",
    "child_ranges": [
      "(line 8641,col 5)-(line 8646,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck16()",
    "snippet": "public void testInheritanceCheck16() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \"goog.Super \u003d function() {};\" + \" goog.Super.prototype.foo \u003d 3;\"+ \"goog.Sub \u003d function() {};\"+ \" goog.Sub.prototype.foo \u003d 5;\",\"property foo already defined on superclass goog.Super; \" + \"use @override to override it\");\n}",
    "begin_line": 8649,
    "end_line": 8658,
    "comment": "",
    "child_ranges": [
      "(line 8650,col 5)-(line 8657,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInheritanceCheck17()",
    "snippet": "public void testInheritanceCheck17() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\"var goog \u003d {};\" + \"goog.Super \u003d function() {};\" + \" goog.Super.prototype.foo \u003d function(x) {};\"+ \"goog.Sub \u003d function() {};\"+ \" goog.Sub.prototype.foo \u003d function(x) {};\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from superclass goog.Super\\n\" + \"original: function (this:goog.Super, number): undefined\\n\"+ \"override: function (this:goog.Sub, string): undefined\");\n}",
    "begin_line": 8660,
    "end_line": 8674,
    "comment": "",
    "child_ranges": [
      "(line 8663,col 5)-(line 8663,col 44)",
      "(line 8664,col 5)-(line 8673,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfacePropertyOverride1()",
    "snippet": "public void testInterfacePropertyOverride1() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8676,
    "end_line": 8682,
    "comment": "",
    "child_ranges": [
      "(line 8677,col 5)-(line 8681,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfacePropertyOverride2()",
    "snippet": "public void testInterfacePropertyOverride2() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8684,
    "end_line": 8691,
    "comment": "",
    "child_ranges": [
      "(line 8685,col 5)-(line 8690,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck1()",
    "snippet": "public void testInterfaceInheritanceCheck1() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\",\"property foo already defined on interface Super; use @override to \" + \"override it\");\n}",
    "begin_line": 8693,
    "end_line": 8701,
    "comment": "",
    "child_ranges": [
      "(line 8694,col 5)-(line 8700,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck2()",
    "snippet": "public void testInterfaceInheritanceCheck2() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() {};\");\n}",
    "begin_line": 8703,
    "end_line": 8709,
    "comment": "",
    "child_ranges": [
      "(line 8704,col 5)-(line 8708,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck3()",
    "snippet": "public void testInterfaceInheritanceCheck3() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d function() { return 1;};\",\"property foo already defined on interface Root; use @override to \" + \"override it\");\n}",
    "begin_line": 8711,
    "end_line": 8720,
    "comment": "",
    "child_ranges": [
      "(line 8712,col 5)-(line 8719,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck4()",
    "snippet": "public void testInterfaceInheritanceCheck4() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return 1;};\");\n}",
    "begin_line": 8722,
    "end_line": 8730,
    "comment": "",
    "child_ranges": [
      "(line 8723,col 5)-(line 8729,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck5()",
    "snippet": "public void testInterfaceInheritanceCheck5() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function() {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return 1; };\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from interface Super\\n\" + \"original: function (this:Super): string\\n\"+ \"override: function (this:Sub): number\");\n}",
    "begin_line": 8732,
    "end_line": 8743,
    "comment": "",
    "child_ranges": [
      "(line 8733,col 5)-(line 8742,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck6()",
    "snippet": "public void testInterfaceInheritanceCheck6() throws Exception {\n  testTypes(\"function Root() {};\" + \"Root.prototype.foo \u003d function() {};\" + \"function Super() {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function() { return 1; };\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from interface Root\\n\" + \"original: function (this:Root): string\\n\"+ \"override: function (this:Sub): number\");\n}",
    "begin_line": 8745,
    "end_line": 8757,
    "comment": "",
    "child_ranges": [
      "(line 8746,col 5)-(line 8756,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck7()",
    "snippet": "public void testInterfaceInheritanceCheck7() throws Exception {\n  testTypes(\"function Super() {};\" + \"Super.prototype.foo \u003d function(bar) {};\" + \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function(bar) {};\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from interface Super\\n\" + \"original: function (this:Super, number): undefined\\n\"+ \"override: function (this:Sub, string): undefined\");\n}",
    "begin_line": 8759,
    "end_line": 8770,
    "comment": "",
    "child_ranges": [
      "(line 8760,col 5)-(line 8769,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck8()",
    "snippet": "public void testInterfaceInheritanceCheck8() throws Exception {\n  testTypes(\"function Sub() {};\" + \"Sub.prototype.foo \u003d function() {};\",new String[]{\"Bad type annotation. Unknown type Super\",\"property foo not defined on any superclass of Sub\"});\n}",
    "begin_line": 8772,
    "end_line": 8780,
    "comment": "",
    "child_ranges": [
      "(line 8773,col 5)-(line 8779,col 11)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck9()",
    "snippet": "public void testInterfaceInheritanceCheck9() throws Exception {\n  testTypes(\" function I() {}\" + \" I.prototype.bar \u003d function() {};\" + \" function F() {}\"+ \" F.prototype.bar \u003d function() {return 3; };\"+ \" F.prototype.foo \u003d function() {return 3; };\"+ \" \"+ \"function G() {}\"+ \" function f() { return new G().bar(); }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 8782,
    "end_line": 8795,
    "comment": "",
    "child_ranges": [
      "(line 8783,col 5)-(line 8794,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck10()",
    "snippet": "public void testInterfaceInheritanceCheck10() throws Exception {\n  testTypes(\" function I() {}\" + \" I.prototype.bar \u003d function() {};\" + \" function F() {}\"+ \" F.prototype.foo \u003d function() {return 3; };\"+ \" \"+ \"function G() {}\"+ \" \"+ \"G.prototype.bar \u003d G.prototype.foo;\"+ \" function f() { return new G().bar(); }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 8797,
    "end_line": 8811,
    "comment": "",
    "child_ranges": [
      "(line 8798,col 5)-(line 8810,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck12()",
    "snippet": "public void testInterfaceInheritanceCheck12() throws Exception {\n  testTypes(\" function I() {};\\n\" + \" I.prototype.foobar;\\n\" + \"\\n\"+ \"function C() {\\n\"+ \" this.foobar \u003d 2;};\\n\"+ \" \\n var test \u003d new C(); alert(test.foobar);\",\"mismatch of the foobar property type and the type of the property\" + \" it overrides from interface I\\n\" + \"original: string\\n\"+ \"override: number\");\n}",
    "begin_line": 8813,
    "end_line": 8825,
    "comment": "",
    "child_ranges": [
      "(line 8814,col 5)-(line 8824,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInheritanceCheck13()",
    "snippet": "public void testInterfaceInheritanceCheck13() throws Exception {\n  testTypes(\"function abstractMethod() {};\\n\" + \"var base \u003d function() {};\\n\" + \" var Int \u003d function() {}\\n\"+ \" var x; \\n\"+ \" base.prototype.bar \u003d abstractMethod; \\n\"+ \" var foo;\\n\"+ \"foo.bar();\");\n}",
    "begin_line": 8827,
    "end_line": 8836,
    "comment": "",
    "child_ranges": [
      "(line 8828,col 5)-(line 8835,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented()",
    "snippet": "public void testInterfacePropertyNotImplemented() throws Exception {\n  testTypes(\"function Int() {};\" + \"Int.prototype.foo \u003d function() {};\" + \"function Foo() {};\",\"property foo on interface Int is not implemented by type Foo\");\n}",
    "begin_line": 8838,
    "end_line": 8844,
    "comment": "",
    "child_ranges": [
      "(line 8839,col 5)-(line 8843,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfacePropertyNotImplemented2()",
    "snippet": "public void testInterfacePropertyNotImplemented2() throws Exception {\n  testTypes(\"function Int() {};\" + \"Int.prototype.foo \u003d function() {};\" + \"function Int2() {};\"+ \"function Foo() {};\",\"property foo on interface Int is not implemented by type Foo\");\n}",
    "begin_line": 8846,
    "end_line": 8853,
    "comment": "",
    "child_ranges": [
      "(line 8847,col 5)-(line 8852,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStubConstructorImplementingInterface()",
    "snippet": "public void testStubConstructorImplementingInterface() throws Exception {\n  testTypes(\" function Int() {}\\n\" + \"Int.prototype.foo \u003d function() {};\" + \" var Foo;\\n\",\"\",null,false);\n}",
    "begin_line": 8855,
    "end_line": 8864,
    "comment": "",
    "child_ranges": [
      "(line 8858,col 5)-(line 8863,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteral()",
    "snippet": "public void testObjectLiteral() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"var a \u003d {m1: 7, m2: \u0027hello\u0027}\");\n  Node nameNode\u003dn.getFirstChild().getFirstChild();\n  Node objectNode\u003dnameNode.getFirstChild();\n  assertEquals(Token.NAME,nameNode.getType());\n  assertEquals(Token.OBJECTLIT,objectNode.getType());\n  ObjectType objectType\u003d(ObjectType)objectNode.getJSType();\n  assertTypeEquals(NUMBER_TYPE,objectType.getPropertyType(\"m1\"));\n  assertTypeEquals(STRING_TYPE,objectType.getPropertyType(\"m2\"));\n  assertTypeEquals(objectType,nameNode.getJSType());\n}",
    "begin_line": 8866,
    "end_line": 8884,
    "comment": "",
    "child_ranges": [
      "(line 8867,col 5)-(line 8867,col 63)",
      "(line 8869,col 5)-(line 8869,col 54)",
      "(line 8870,col 5)-(line 8870,col 47)",
      "(line 8873,col 5)-(line 8873,col 49)",
      "(line 8874,col 5)-(line 8874,col 56)",
      "(line 8877,col 5)-(line 8878,col 44)",
      "(line 8879,col 5)-(line 8879,col 68)",
      "(line 8880,col 5)-(line 8880,col 68)",
      "(line 8883,col 5)-(line 8883,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration1()",
    "snippet": "public void testObjectLiteralDeclaration1() throws Exception {\n  testTypes(\"var x \u003d {\" + \" abc: true,\" + \" \u0027def\u0027: 0,\"+ \" 3: \u0027fgh\u0027\"+ \"};\");\n}",
    "begin_line": 8886,
    "end_line": 8893,
    "comment": "",
    "child_ranges": [
      "(line 8887,col 5)-(line 8892,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration2()",
    "snippet": "public void testObjectLiteralDeclaration2() throws Exception {\n  testTypes(\"var x \u003d {\" + \"   abc: true\" + \"};\"+ \"x.abc \u003d 0;\",\"assignment to property abc of x\\n\" + \"found   : number\\n\" + \"required: boolean\");\n}",
    "begin_line": 8895,
    "end_line": 8904,
    "comment": "",
    "child_ranges": [
      "(line 8896,col 5)-(line 8903,col 29)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration3()",
    "snippet": "public void testObjectLiteralDeclaration3() throws Exception {\n  testTypes(\" function f(x) {}\" + \"f({foo: function() {}});\");\n}",
    "begin_line": 8906,
    "end_line": 8910,
    "comment": "",
    "child_ranges": [
      "(line 8907,col 5)-(line 8909,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration4()",
    "snippet": "public void testObjectLiteralDeclaration4() throws Exception {\n  testClosureTypes(\"var x \u003d {\" + \"   abc: function(x) {}\" + \"};\"+ \" x.abc \u003d function(x) {};\",\"assignment to property abc of x\\n\" + \"found   : function (string): undefined\\n\" + \"required: function (boolean): undefined\");\n}",
    "begin_line": 8912,
    "end_line": 8927,
    "comment": "",
    "child_ranges": [
      "(line 8913,col 5)-(line 8923,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration5()",
    "snippet": "public void testObjectLiteralDeclaration5() throws Exception {\n  testTypes(\"var x \u003d {\" + \"   abc: function(x) {}\" + \"};\"+ \" x.abc \u003d function(x) {};\");\n}",
    "begin_line": 8929,
    "end_line": 8938,
    "comment": "",
    "child_ranges": [
      "(line 8930,col 5)-(line 8937,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration6()",
    "snippet": "public void testObjectLiteralDeclaration6() throws Exception {\n  testTypes(\"var x \u003d {};\" + \" x.abc \u003d function(x) {};\"+ \"x \u003d {\"+ \"  \"+ \"  abc: function(x) {}\"+ \"};\");\n}",
    "begin_line": 8940,
    "end_line": 8954,
    "comment": "",
    "child_ranges": [
      "(line 8941,col 5)-(line 8953,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testObjectLiteralDeclaration7()",
    "snippet": "public void testObjectLiteralDeclaration7() throws Exception {\n  testTypes(\"var x \u003d {};\" + \" x.abc \u003d function(x) {};\"+ \"x \u003d {\"+ \"  \"+ \"  abc: function(x) {}\"+ \"};\");\n}",
    "begin_line": 8956,
    "end_line": 8969,
    "comment": "",
    "child_ranges": [
      "(line 8957,col 5)-(line 8968,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCallDateConstructorAsFunction()",
    "snippet": "public void testCallDateConstructorAsFunction() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"Date()\");\n  assertTypeEquals(STRING_TYPE,n.getFirstChild().getFirstChild().getJSType());\n}",
    "begin_line": 8971,
    "end_line": 8976,
    "comment": "",
    "child_ranges": [
      "(line 8974,col 5)-(line 8974,col 41)",
      "(line 8975,col 5)-(line 8975,col 81)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCallErrorConstructorAsFunction()",
    "snippet": "public void testCallErrorConstructorAsFunction() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"Error(\u0027x\u0027)\");\n  assertTypeEquals(ERROR_TYPE,n.getFirstChild().getFirstChild().getJSType());\n}",
    "begin_line": 8981,
    "end_line": 8985,
    "comment": "",
    "child_ranges": [
      "(line 8982,col 5)-(line 8982,col 45)",
      "(line 8983,col 5)-(line 8984,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCallArrayConstructorAsFunction()",
    "snippet": "public void testCallArrayConstructorAsFunction() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"Array()\");\n  assertTypeEquals(ARRAY_TYPE,n.getFirstChild().getFirstChild().getJSType());\n}",
    "begin_line": 8987,
    "end_line": 8991,
    "comment": "",
    "child_ranges": [
      "(line 8988,col 5)-(line 8988,col 42)",
      "(line 8989,col 5)-(line 8990,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyTypeOfUnionType()",
    "snippet": "public void testPropertyTypeOfUnionType() throws Exception {\n  testTypes(\"var a \u003d {};\" + \" a.N \u003d function() {};\\n\" + \"a.N.prototype.p \u003d 1;\\n\"+ \" a.S \u003d function() {};\\n\"+ \"a.S.prototype.p \u003d \u0027a\u0027;\\n\"+ \"\\n\"+ \"var f \u003d function(x) { return x.p; };\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 8993,
    "end_line": 9004,
    "comment": "",
    "child_ranges": [
      "(line 8994,col 5)-(line 9003,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface1()",
    "snippet": "public void testAnnotatedPropertyOnInterface1() throws Exception {\n  testTypes(\" u.T \u003d function() {};\\n\" + \" u.T.prototype.f \u003d function() {};\");\n}",
    "begin_line": 9037,
    "end_line": 9042,
    "comment": "",
    "child_ranges": [
      "(line 9040,col 5)-(line 9041,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface2()",
    "snippet": "public void testAnnotatedPropertyOnInterface2() throws Exception {\n  testTypes(\" u.T \u003d function() {};\\n\" + \" u.T.prototype.f \u003d function() { };\");\n}",
    "begin_line": 9044,
    "end_line": 9047,
    "comment": "",
    "child_ranges": [
      "(line 9045,col 5)-(line 9046,col 69)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface3()",
    "snippet": "public void testAnnotatedPropertyOnInterface3() throws Exception {\n  testTypes(\" function T() {};\\n\" + \" T.prototype.f \u003d function() { };\");\n}",
    "begin_line": 9049,
    "end_line": 9052,
    "comment": "",
    "child_ranges": [
      "(line 9050,col 5)-(line 9051,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAnnotatedPropertyOnInterface4()",
    "snippet": "public void testAnnotatedPropertyOnInterface4() throws Exception {\n  testTypes(CLOSURE_DEFS + \" function T() {};\\n\" + \" T.prototype.f \u003d goog.abstractMethod;\");\n}",
    "begin_line": 9054,
    "end_line": 9059,
    "comment": "",
    "child_ranges": [
      "(line 9055,col 5)-(line 9058,col 72)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface5()",
    "snippet": "public void testWarnUnannotatedPropertyOnInterface5() throws Exception {\n  testTypes(\" u.T \u003d function () {};\\n\" + \"u.T.prototype.x \u003d function() {};\");\n}",
    "begin_line": 9073,
    "end_line": 9076,
    "comment": "",
    "child_ranges": [
      "(line 9074,col 5)-(line 9075,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWarnUnannotatedPropertyOnInterface6()",
    "snippet": "public void testWarnUnannotatedPropertyOnInterface6() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x \u003d function() {};\");\n}",
    "begin_line": 9078,
    "end_line": 9081,
    "comment": "",
    "child_ranges": [
      "(line 9079,col 5)-(line 9080,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDataPropertyOnInterface1()",
    "snippet": "public void testDataPropertyOnInterface1() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x;\");\n}",
    "begin_line": 9091,
    "end_line": 9094,
    "comment": "",
    "child_ranges": [
      "(line 9092,col 5)-(line 9093,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDataPropertyOnInterface2()",
    "snippet": "public void testDataPropertyOnInterface2() throws Exception {\n  reportMissingOverrides\u003dCheckLevel.OFF;\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x;\\n\" + \"\\n\"+ \"function C() {}\\n\"+ \"C.prototype.x \u003d \u0027foo\u0027;\",\"mismatch of the x property type and the type of the property it \" + \"overrides from interface T\\n\" + \"original: number\\n\"+ \"override: string\");\n}",
    "begin_line": 9096,
    "end_line": 9109,
    "comment": "",
    "child_ranges": [
      "(line 9097,col 5)-(line 9097,col 44)",
      "(line 9098,col 5)-(line 9108,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDataPropertyOnInterface3()",
    "snippet": "public void testDataPropertyOnInterface3() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x;\\n\" + \"\\n\"+ \"function C() {}\\n\"+ \"\\n\"+ \"C.prototype.x \u003d \u0027foo\u0027;\",\"mismatch of the x property type and the type of the property it \" + \"overrides from interface T\\n\" + \"original: number\\n\"+ \"override: string\");\n}",
    "begin_line": 9111,
    "end_line": 9124,
    "comment": "",
    "child_ranges": [
      "(line 9112,col 5)-(line 9123,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDataPropertyOnInterface4()",
    "snippet": "public void testDataPropertyOnInterface4() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x;\\n\" + \"\\n\"+ \"function C() {  \\n this.x \u003d \u0027foo\u0027; }\\n\",\"mismatch of the x property type and the type of the property it \" + \"overrides from interface T\\n\" + \"original: number\\n\"+ \"override: string\");\n}",
    "begin_line": 9126,
    "end_line": 9137,
    "comment": "",
    "child_ranges": [
      "(line 9127,col 5)-(line 9136,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface3()",
    "snippet": "public void testWarnDataPropertyOnInterface3() throws Exception {\n  testTypes(\" u.T \u003d function () {};\\n\" + \"u.T.prototype.x \u003d 1;\",\"interface members can only be empty property declarations, \" + \"empty functions, or goog.abstractMethod\");\n}",
    "begin_line": 9139,
    "end_line": 9144,
    "comment": "",
    "child_ranges": [
      "(line 9140,col 5)-(line 9143,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testWarnDataPropertyOnInterface4()",
    "snippet": "public void testWarnDataPropertyOnInterface4() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x \u003d 1;\",\"interface members can only be empty property declarations, \" + \"empty functions, or goog.abstractMethod\");\n}",
    "begin_line": 9146,
    "end_line": 9151,
    "comment": "",
    "child_ranges": [
      "(line 9147,col 5)-(line 9150,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface4()",
    "snippet": "public void testErrorMismatchingPropertyOnInterface4() throws Exception {\n  testTypes(\" u.T \u003d function () {};\\n\" + \"u.T.prototype.x \u003d\\n\" + \"function() {};\",\"parameter foo does not appear in u.T.prototype.x\u0027s parameter list\");\n}",
    "begin_line": 9182,
    "end_line": 9187,
    "comment": "",
    "child_ranges": [
      "(line 9183,col 5)-(line 9186,col 77)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface5()",
    "snippet": "public void testErrorMismatchingPropertyOnInterface5() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x \u003d function() { };\",\"assignment to property x of T.prototype\\n\" + \"found   : function (): undefined\\n\" + \"required: number\");\n}",
    "begin_line": 9189,
    "end_line": 9195,
    "comment": "",
    "child_ranges": [
      "(line 9190,col 5)-(line 9194,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testErrorMismatchingPropertyOnInterface6()",
    "snippet": "public void testErrorMismatchingPropertyOnInterface6() throws Exception {\n  testClosureTypesMultipleWarnings(\" function T() {};\\n\" + \"T.prototype.x \u003d 1\",Lists.newArrayList(\"assignment to property x of T.prototype\\n\" + \"found   : number\\n\" + \"required: function (this:T): number\",\"interface members can only be empty property declarations, \" + \"empty functions, or goog.abstractMethod\"));\n}",
    "begin_line": 9197,
    "end_line": 9207,
    "comment": "",
    "child_ranges": [
      "(line 9198,col 5)-(line 9206,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceNonEmptyFunction()",
    "snippet": "public void testInterfaceNonEmptyFunction() throws Exception {\n  testTypes(\" function T() {};\\n\" + \"T.prototype.x \u003d function() { return \u0027foo\u0027; }\",\"interface member functions must have an empty body\");\n}",
    "begin_line": 9209,
    "end_line": 9214,
    "comment": "",
    "child_ranges": [
      "(line 9210,col 5)-(line 9213,col 10)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDoubleNestedInterface()",
    "snippet": "public void testDoubleNestedInterface() throws Exception {\n  testTypes(\" var I1 \u003d function() {};\\n\" + \" I1.I2 \u003d function() {};\\n\" + \" I1.I2.I3 \u003d function() {};\\n\");\n}",
    "begin_line": 9216,
    "end_line": 9220,
    "comment": "",
    "child_ranges": [
      "(line 9217,col 5)-(line 9219,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testStaticDataPropertyOnNestedInterface()",
    "snippet": "public void testStaticDataPropertyOnNestedInterface() throws Exception {\n  testTypes(\" var I1 \u003d function() {};\\n\" + \" I1.I2 \u003d function() {};\\n\" + \" I1.I2.x \u003d 1;\\n\");\n}",
    "begin_line": 9222,
    "end_line": 9226,
    "comment": "",
    "child_ranges": [
      "(line 9223,col 5)-(line 9225,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceInstantiation()",
    "snippet": "public void testInterfaceInstantiation() throws Exception {\n  testTypes(\"var f \u003d function(){}; new f\",\"cannot instantiate non-constructor\");\n}",
    "begin_line": 9228,
    "end_line": 9231,
    "comment": "",
    "child_ranges": [
      "(line 9229,col 5)-(line 9230,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrototypeLoop()",
    "snippet": "public void testPrototypeLoop() throws Exception {\n  testClosureTypesMultipleWarnings(suppressMissingProperty(\"foo\") + \"var T \u003d function() {};\" + \"alert((new T).foo);\",Lists.newArrayList(\"Parse error. Cycle detected in inheritance chain of type T\",\"Could not resolve type in @extends tag of T\"));\n}",
    "begin_line": 9233,
    "end_line": 9241,
    "comment": "",
    "child_ranges": [
      "(line 9234,col 5)-(line 9240,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testImplementsLoop()",
    "snippet": "public void testImplementsLoop() throws Exception {\n  testClosureTypesMultipleWarnings(suppressMissingProperty(\"foo\") + \"var T \u003d function() {};\" + \"alert((new T).foo);\",Lists.newArrayList(\"Parse error. Cycle detected in inheritance chain of type T\"));\n}",
    "begin_line": 9243,
    "end_line": 9250,
    "comment": "",
    "child_ranges": [
      "(line 9244,col 5)-(line 9249,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testImplementsExtendsLoop()",
    "snippet": "public void testImplementsExtendsLoop() throws Exception {\n  testClosureTypesMultipleWarnings(suppressMissingProperty(\"foo\") + \"var G \u003d function() {};\" + \"var F \u003d function() {};\"+ \"alert((new F).foo);\",Lists.newArrayList(\"Parse error. Cycle detected in inheritance chain of type F\"));\n}",
    "begin_line": 9252,
    "end_line": 9260,
    "comment": "",
    "child_ranges": [
      "(line 9253,col 5)-(line 9259,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceExtendsLoop()",
    "snippet": "public void testInterfaceExtendsLoop() throws Exception {\n  testClosureTypesMultipleWarnings(suppressMissingProperty(\"foo\") + \"var G \u003d function() {};\" + \"var F \u003d function() {};\",Lists.newArrayList(\"Could not resolve type in @extends tag of G\"));\n}",
    "begin_line": 9262,
    "end_line": 9271,
    "comment": "",
    "child_ranges": [
      "(line 9265,col 5)-(line 9270,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testConversionFromInterfaceToRecursiveConstructor()",
    "snippet": "public void testConversionFromInterfaceToRecursiveConstructor() throws Exception {\n  testClosureTypesMultipleWarnings(suppressMissingProperty(\"foo\") + \" var OtherType \u003d function() {}\\n\" + \"\\n\"+ \"var MyType \u003d function() {}\\n\"+ \"\\n\"+ \"var x \u003d  (new Object());\",Lists.newArrayList(\"Parse error. Cycle detected in inheritance chain of type MyType\",\"initializing variable\\n\" + \"found   : OtherType\\n\" + \"required: (MyType|null)\"));\n}",
    "begin_line": 9273,
    "end_line": 9287,
    "comment": "",
    "child_ranges": [
      "(line 9275,col 5)-(line 9286,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDirectPrototypeAssign()",
    "snippet": "public void testDirectPrototypeAssign() throws Exception {\n  testTypes(\" function Foo() {}\" + \" function Bar() {}\" + \" Bar.prototype \u003d new Foo()\");\n}",
    "begin_line": 9289,
    "end_line": 9295,
    "comment": "",
    "child_ranges": [
      "(line 9291,col 5)-(line 9294,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolutionViaRegistry1()",
    "snippet": "public void testResolutionViaRegistry1() throws Exception {\n  testTypes(\" u.T \u003d function() {};\\n\" + \" u.T.prototype.a;\\n\" + \"\\n\"+ \"var f \u003d function(t) { return t.a; };\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 9300,
    "end_line": 9311,
    "comment": "",
    "child_ranges": [
      "(line 9301,col 5)-(line 9310,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolutionViaRegistry2()",
    "snippet": "public void testResolutionViaRegistry2() throws Exception {\n  testTypes(\" u.T \u003d function() {\" + \"  this.a \u003d 0; };\\n\" + \"\\n\"+ \"var f \u003d function(t) { return t.a; };\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 9313,
    "end_line": 9325,
    "comment": "",
    "child_ranges": [
      "(line 9314,col 5)-(line 9324,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolutionViaRegistry3()",
    "snippet": "public void testResolutionViaRegistry3() throws Exception {\n  testTypes(\" u.T \u003d function() {};\\n\" + \" u.T.prototype.a \u003d 0;\\n\" + \"\\n\"+ \"var f \u003d function(t) { return t.a; };\",\"inconsistent return type\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 9327,
    "end_line": 9338,
    "comment": "",
    "child_ranges": [
      "(line 9328,col 5)-(line 9337,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolutionViaRegistry4()",
    "snippet": "public void testResolutionViaRegistry4() throws Exception {\n  testTypes(\" u.A \u003d function() {};\\n\" + \"\\nu.A.A \u003d function() {}\\n;\" + \"\\nu.A.B \u003d function() {};\\n\"+ \"var ab \u003d new u.A.B();\\n\"+ \" var a \u003d ab;\\n\"+ \" var aa \u003d ab;\\n\",\"initializing variable\\n\" + \"found   : u.A.B\\n\" + \"required: u.A.A\");\n}",
    "begin_line": 9340,
    "end_line": 9350,
    "comment": "",
    "child_ranges": [
      "(line 9341,col 5)-(line 9349,col 27)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolutionViaRegistry5()",
    "snippet": "public void testResolutionViaRegistry5() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" u.T \u003d function() {}; u.T\");\n  JSType type\u003dn.getLastChild().getLastChild().getJSType();\n  assertFalse(type.isUnknownType());\n  assertTrue(type instanceof FunctionType);\n  assertEquals(\"u.T\",((FunctionType)type).getInstanceType().getReferenceName());\n}",
    "begin_line": 9352,
    "end_line": 9359,
    "comment": "",
    "child_ranges": [
      "(line 9353,col 5)-(line 9353,col 79)",
      "(line 9354,col 5)-(line 9354,col 62)",
      "(line 9355,col 5)-(line 9355,col 38)",
      "(line 9356,col 5)-(line 9356,col 45)",
      "(line 9357,col 5)-(line 9358,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation1()",
    "snippet": "public void testGatherProperyWithoutAnnotation1() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" var T \u003d function() {};\" + \"var t; t.x; t;\");\n  JSType type\u003dn.getLastChild().getLastChild().getJSType();\n  assertFalse(type.isUnknownType());\n  assertTrue(type instanceof ObjectType);\n  ObjectType objectType\u003d(ObjectType)type;\n  assertFalse(objectType.hasProperty(\"x\"));\n  Asserts.assertTypeCollectionEquals(Lists.newArrayList(objectType),registry.getTypesWithProperty(\"x\"));\n}",
    "begin_line": 9361,
    "end_line": 9372,
    "comment": "",
    "child_ranges": [
      "(line 9362,col 5)-(line 9363,col 43)",
      "(line 9364,col 5)-(line 9364,col 62)",
      "(line 9365,col 5)-(line 9365,col 38)",
      "(line 9366,col 5)-(line 9366,col 43)",
      "(line 9367,col 5)-(line 9367,col 46)",
      "(line 9368,col 5)-(line 9368,col 45)",
      "(line 9369,col 5)-(line 9371,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGatherProperyWithoutAnnotation2()",
    "snippet": "public void testGatherProperyWithoutAnnotation2() throws Exception {\n  TypeCheckResult ns\u003dparseAndTypeCheckWithScope(\"var t; t.x; t;\");\n  Node n\u003dns.root;\n  Scope s\u003dns.scope;\n  JSType type\u003dn.getLastChild().getLastChild().getJSType();\n  assertFalse(type.isUnknownType());\n  assertTypeEquals(type,OBJECT_TYPE);\n  assertTrue(type instanceof ObjectType);\n  ObjectType objectType\u003d(ObjectType)type;\n  assertFalse(objectType.hasProperty(\"x\"));\n  Asserts.assertTypeCollectionEquals(Lists.newArrayList(OBJECT_TYPE),registry.getTypesWithProperty(\"x\"));\n}",
    "begin_line": 9374,
    "end_line": 9388,
    "comment": "",
    "child_ranges": [
      "(line 9375,col 5)-(line 9376,col 75)",
      "(line 9377,col 5)-(line 9377,col 21)",
      "(line 9378,col 5)-(line 9378,col 23)",
      "(line 9379,col 5)-(line 9379,col 62)",
      "(line 9380,col 5)-(line 9380,col 38)",
      "(line 9381,col 5)-(line 9381,col 40)",
      "(line 9382,col 5)-(line 9382,col 43)",
      "(line 9383,col 5)-(line 9383,col 46)",
      "(line 9384,col 5)-(line 9384,col 45)",
      "(line 9385,col 5)-(line 9387,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionMasksVariableBug()",
    "snippet": "public void testFunctionMasksVariableBug() throws Exception {\n  testTypes(\"var x \u003d 4; var f \u003d function x(b) { return b ? 1 : x(true); };\",\"function x masks variable (IE bug)\");\n}",
    "begin_line": 9390,
    "end_line": 9393,
    "comment": "",
    "child_ranges": [
      "(line 9391,col 5)-(line 9392,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa1()",
    "snippet": "public void testDfa1() throws Exception {\n  testTypes(\"var x \u003d null;\\n x \u003d 1;\\n  var y \u003d x;\");\n}",
    "begin_line": 9395,
    "end_line": 9397,
    "comment": "",
    "child_ranges": [
      "(line 9396,col 5)-(line 9396,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa2()",
    "snippet": "public void testDfa2() throws Exception {\n  testTypes(\"function u() {}\\n\" + \" function f() {\\nvar x \u003d \u0027todo\u0027;\\n\" + \"if (u()) { x \u003d 1; } else { x \u003d 2; } return x;\\n}\");\n}",
    "begin_line": 9399,
    "end_line": 9403,
    "comment": "",
    "child_ranges": [
      "(line 9400,col 5)-(line 9402,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa3()",
    "snippet": "public void testDfa3() throws Exception {\n  testTypes(\"function u() {}\\n\" + \" function f() {\\n\" + \" var x \u003d \u0027todo\u0027;\\n\"+ \"if (u()) { x \u003d 1; } else { x \u003d 2; } return x;\\n}\");\n}",
    "begin_line": 9405,
    "end_line": 9410,
    "comment": "",
    "child_ranges": [
      "(line 9406,col 5)-(line 9409,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa4()",
    "snippet": "public void testDfa4() throws Exception {\n  testTypes(\" function f(d) {\\n\" + \"if (!d) { return; }\\n\" + \" var e \u003d d;\\n}\");\n}",
    "begin_line": 9412,
    "end_line": 9416,
    "comment": "",
    "child_ranges": [
      "(line 9413,col 5)-(line 9415,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa5()",
    "snippet": "public void testDfa5() throws Exception {\n  testTypes(\" function u() {return \u0027a\u0027;}\\n\" + \" function f(x) {\\n\" + \"while (!x) { x \u003d u(); }\\nreturn x;\\n}\");\n}",
    "begin_line": 9418,
    "end_line": 9422,
    "comment": "",
    "child_ranges": [
      "(line 9419,col 5)-(line 9421,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa6()",
    "snippet": "public void testDfa6() throws Exception {\n  testTypes(\" function u() {return {};}\\n\" + \" function f(x) {\\n\" + \"while (x) { x \u003d u(); if (!x) { x \u003d u(); } }\\n}\");\n}",
    "begin_line": 9424,
    "end_line": 9428,
    "comment": "",
    "child_ranges": [
      "(line 9425,col 5)-(line 9427,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa7()",
    "snippet": "public void testDfa7() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \" T.prototype.x \u003d null;\\n\" + \" function f(t) {\\n\"+ \"if (!t.x) { return; }\\n\"+ \" var e \u003d t.x;\\n}\");\n}",
    "begin_line": 9430,
    "end_line": 9436,
    "comment": "",
    "child_ranges": [
      "(line 9431,col 5)-(line 9435,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa8()",
    "snippet": "public void testDfa8() throws Exception {\n  testTypes(\" var T \u003d function() {};\\n\" + \" T.prototype.x \u003d \u0027\u0027;\\n\" + \"function u() {}\\n\"+ \" function f(t) {\\n\"+ \"if (u()) { t.x \u003d 1; } else { t.x \u003d 2; } return t.x;\\n}\");\n}",
    "begin_line": 9438,
    "end_line": 9444,
    "comment": "",
    "child_ranges": [
      "(line 9439,col 5)-(line 9443,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa9()",
    "snippet": "public void testDfa9() throws Exception {\n  testTypes(\"function f() {\\nvar x;\\nx \u003d null;\\n\" + \"if (x \u003d\u003d null) { return 0; } else { return 1; } }\",\"condition always evaluates to true\\n\" + \"left : null\\n\" + \"right: null\");\n}",
    "begin_line": 9446,
    "end_line": 9452,
    "comment": "",
    "child_ranges": [
      "(line 9447,col 5)-(line 9451,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa10()",
    "snippet": "public void testDfa10() throws Exception {\n  testTypes(\" function g(x) {}\" + \"function f(x) {\\n\" + \"if (!x) { x \u003d \u0027\u0027; }\\n\"+ \"if (g(x)) { return 0; } else { return 1; } }\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: null\");\n}",
    "begin_line": 9454,
    "end_line": 9462,
    "comment": "",
    "child_ranges": [
      "(line 9455,col 5)-(line 9461,col 26)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa11()",
    "snippet": "public void testDfa11() throws Exception {\n  testTypes(\"\\n\" + \"function f(opt_x) { if (!opt_x) { \" + \"throw new Error(\u0027x cannot be empty\u0027); } return opt_x; }\");\n}",
    "begin_line": 9464,
    "end_line": 9468,
    "comment": "",
    "child_ranges": [
      "(line 9465,col 5)-(line 9467,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa12()",
    "snippet": "public void testDfa12() throws Exception {\n  testTypes(\"\" + \"var Bar \u003d function(x) {};\" + \" function g(x) { return true; }\"+ \" \"+ \"function f(opt_x) { \"+ \"  if (opt_x) { new Bar(g(opt_x) \u0026\u0026 \u0027x\u0027); }\"+ \"}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : (number|string)\\n\" + \"required: string\");\n}",
    "begin_line": 9470,
    "end_line": 9481,
    "comment": "",
    "child_ranges": [
      "(line 9471,col 5)-(line 9480,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDfa13()",
    "snippet": "public void testDfa13() throws Exception {\n  testTypes(\"\"+ \"function g(x, y, z) {}\"+ \"function f() { \"+ \"  var x \u003d \u0027a\u0027; g(x, x \u003d 3, x);\"+ \"}\");\n}",
    "begin_line": 9483,
    "end_line": 9494,
    "comment": "",
    "child_ranges": [
      "(line 9484,col 5)-(line 9493,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithCast1()",
    "snippet": "public void testTypeInferenceWithCast1() throws Exception {\n  testTypes(\"function u(x) {return null;}\" + \"function f(x) {return x;}\" + \"function g(x) {\"+ \"var y \u003d (u(x)); return f(y);}\");\n}",
    "begin_line": 9496,
    "end_line": 9502,
    "comment": "",
    "child_ranges": [
      "(line 9497,col 5)-(line 9501,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithCast2()",
    "snippet": "public void testTypeInferenceWithCast2() throws Exception {\n  testTypes(\"function u(x) {return null;}\" + \"function f(x) {return x;}\" + \"function g(x) {\"+ \"var y; y \u003d (u(x)); return f(y);}\");\n}",
    "begin_line": 9504,
    "end_line": 9510,
    "comment": "",
    "child_ranges": [
      "(line 9505,col 5)-(line 9509,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithCast3()",
    "snippet": "public void testTypeInferenceWithCast3() throws Exception {\n  testTypes(\"function u(x) {return 1;}\" + \"function g(x) {\" + \"return (u(x));}\");\n}",
    "begin_line": 9512,
    "end_line": 9517,
    "comment": "",
    "child_ranges": [
      "(line 9513,col 5)-(line 9516,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithCast4()",
    "snippet": "public void testTypeInferenceWithCast4() throws Exception {\n  testTypes(\"function u(x) {return 1;}\" + \"function g(x) {\" + \"return (u(x)) \u0026\u0026 1;}\");\n}",
    "begin_line": 9519,
    "end_line": 9524,
    "comment": "",
    "child_ranges": [
      "(line 9520,col 5)-(line 9523,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithCast5()",
    "snippet": "public void testTypeInferenceWithCast5() throws Exception {\n  testTypes(\" function foo(x) {}\" + \" function bar(y) {\" + \"   y.length;\"+ \"  foo(y.length);\"+ \"}\",\"actual parameter 1 of foo does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 9526,
    "end_line": 9536,
    "comment": "",
    "child_ranges": [
      "(line 9527,col 5)-(line 9535,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithClosure1()",
    "snippet": "public void testTypeInferenceWithClosure1() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \"   var x \u003d null;\"+ \"  function g() { x \u003d \u0027y\u0027; } g(); \"+ \"  return x \u003d\u003d null;\"+ \"}\");\n}",
    "begin_line": 9538,
    "end_line": 9546,
    "comment": "",
    "child_ranges": [
      "(line 9539,col 5)-(line 9545,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithClosure2()",
    "snippet": "public void testTypeInferenceWithClosure2() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \"   var x \u003d null;\"+ \"  function g() { x \u003d \u0027y\u0027; } g(); \"+ \"  return x \u003d\u003d\u003d 3;\"+ \"}\",\"condition always evaluates to false\\n\" + \"left : (null|string)\\n\" + \"right: number\");\n}",
    "begin_line": 9548,
    "end_line": 9559,
    "comment": "",
    "child_ranges": [
      "(line 9549,col 5)-(line 9558,col 25)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry1()",
    "snippet": "public void testTypeInferenceWithNoEntry1() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function Foo() {}\" + \"Foo.prototype.init \u003d function() {\"+ \"   this.bar \u003d {baz: 3};\"+ \"};\"+ \"\"+ \"function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.method \u003d function() {\"+ \"  for (var i \u003d 0; i \u003c 10; i++) {\"+ \"    f(this.bar);\"+ \"    f(this.bar.baz);\"+ \"  }\"+ \"};\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (null|{baz: number})\\n\" + \"required: number\");\n}",
    "begin_line": 9561,
    "end_line": 9583,
    "comment": "",
    "child_ranges": [
      "(line 9562,col 5)-(line 9582,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeInferenceWithNoEntry2()",
    "snippet": "public void testTypeInferenceWithNoEntry2() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \" function f(x) {}\" + \" function g(x) {}\"+ \" function Foo() {}\"+ \"Foo.prototype.init \u003d function() {\"+ \"   this.bar \u003d {baz: 3};\"+ \"};\"+ \"\"+ \"function SubFoo() {}\"+ \"\"+ \"SubFoo.prototype.method \u003d function() {\"+ \"  for (var i \u003d 0; i \u003c 10; i++) {\"+ \"    f(this.bar);\"+ \"    goog.asserts.assert(this.bar);\"+ \"    g(this.bar);\"+ \"  }\"+ \"};\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : (null|{baz: number})\\n\" + \"required: number\");\n}",
    "begin_line": 9585,
    "end_line": 9610,
    "comment": "",
    "child_ranges": [
      "(line 9586,col 5)-(line 9609,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardPropertyReference()",
    "snippet": "public void testForwardPropertyReference() throws Exception {\n  testTypes(\" var Foo \u003d function() { this.init(); };\" + \"\" + \"Foo.prototype.getString \u003d function() {\"+ \"  return this.number_;\"+ \"};\"+ \"Foo.prototype.init \u003d function() {\"+ \"  \"+ \"  this.number_ \u003d 3;\"+ \"};\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 9612,
    "end_line": 9625,
    "comment": "",
    "child_ranges": [
      "(line 9613,col 5)-(line 9624,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoForwardTypeDeclaration()",
    "snippet": "public void testNoForwardTypeDeclaration() throws Exception {\n  testTypes(\" function f(x) {}\",\"Bad type annotation. Unknown type MyType\");\n}",
    "begin_line": 9627,
    "end_line": 9631,
    "comment": "",
    "child_ranges": [
      "(line 9628,col 5)-(line 9630,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testNoForwardTypeDeclarationAndNoBraces()",
    "snippet": "public void testNoForwardTypeDeclarationAndNoBraces() throws Exception {\n  testTypes(\" function f() {}\");\n}",
    "begin_line": 9633,
    "end_line": 9635,
    "comment": "",
    "child_ranges": [
      "(line 9634,col 5)-(line 9634,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration1()",
    "snippet": "public void testForwardTypeDeclaration1() throws Exception {\n  testClosureTypes(\"goog.addDependency();\" + \"goog.addDependency(\u0027y\u0027, [goog]);\" + \"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\"+ \"\"+ \"function f(x) { return 3; }\",null);\n}",
    "begin_line": 9637,
    "end_line": 9646,
    "comment": "",
    "child_ranges": [
      "(line 9638,col 5)-(line 9645,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration2()",
    "snippet": "public void testForwardTypeDeclaration2() throws Exception {\n  String f\u003d\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" function f(x) { }\";\n  testClosureTypes(f,null);\n  testClosureTypes(f + \"f(3);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: (MyType|null)\");\n}",
    "begin_line": 9648,
    "end_line": 9656,
    "comment": "",
    "child_ranges": [
      "(line 9649,col 5)-(line 9650,col 53)",
      "(line 9651,col 5)-(line 9651,col 30)",
      "(line 9652,col 5)-(line 9655,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration3()",
    "snippet": "public void testForwardTypeDeclaration3() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" function f(x) { return x; }\" + \" var MyType \u003d function() {};\"+ \"f(3);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: (MyType|null)\");\n}",
    "begin_line": 9658,
    "end_line": 9667,
    "comment": "",
    "child_ranges": [
      "(line 9659,col 5)-(line 9666,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration4()",
    "snippet": "public void testForwardTypeDeclaration4() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" function f(x) { return x; }\" + \" var MyType \u003d function() {};\"+ \"f(new MyType());\",null);\n}",
    "begin_line": 9669,
    "end_line": 9676,
    "comment": "",
    "child_ranges": [
      "(line 9670,col 5)-(line 9675,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration5()",
    "snippet": "public void testForwardTypeDeclaration5() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" var YourType \u003d function() {};\"+ \" YourType.prototype.method \u003d function() {};\",\"Could not resolve type in @extends tag of YourType\");\n}",
    "begin_line": 9678,
    "end_line": 9687,
    "comment": "",
    "child_ranges": [
      "(line 9679,col 5)-(line 9686,col 62)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration6()",
    "snippet": "public void testForwardTypeDeclaration6() throws Exception {\n  testClosureTypesMultipleWarnings(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" var YourType \u003d function() {};\"+ \" YourType.prototype.method \u003d function() {};\",Lists.newArrayList(\"Could not resolve type in @implements tag of YourType\",\"property method not defined on any superclass of YourType\"));\n}",
    "begin_line": 9689,
    "end_line": 9700,
    "comment": "",
    "child_ranges": [
      "(line 9690,col 5)-(line 9699,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration7()",
    "snippet": "public void testForwardTypeDeclaration7() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \"\" + \"function f(x) { return x \u003d\u003d undefined; }\",null);\n}",
    "begin_line": 9702,
    "end_line": 9707,
    "comment": "",
    "child_ranges": [
      "(line 9703,col 5)-(line 9706,col 58)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration8()",
    "snippet": "public void testForwardTypeDeclaration8() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \"\" + \"function f(x) { return x.name \u003d\u003d undefined; }\",null);\n}",
    "begin_line": 9709,
    "end_line": 9714,
    "comment": "",
    "child_ranges": [
      "(line 9710,col 5)-(line 9713,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration9()",
    "snippet": "public void testForwardTypeDeclaration9() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \"\" + \"function f(x) { x.name \u003d \u0027Bob\u0027; }\",null);\n}",
    "begin_line": 9716,
    "end_line": 9721,
    "comment": "",
    "child_ranges": [
      "(line 9717,col 5)-(line 9720,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration10()",
    "snippet": "public void testForwardTypeDeclaration10() throws Exception {\n  String f\u003d\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \" function f(x) { }\";\n  testClosureTypes(f,null);\n  testClosureTypes(f + \"f(3);\",null);\n  testClosureTypes(f + \"f(\u00273\u0027);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: (MyType|null|number)\");\n}",
    "begin_line": 9723,
    "end_line": 9732,
    "comment": "",
    "child_ranges": [
      "(line 9724,col 5)-(line 9725,col 60)",
      "(line 9726,col 5)-(line 9726,col 30)",
      "(line 9727,col 5)-(line 9727,col 40)",
      "(line 9728,col 5)-(line 9731,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration12()",
    "snippet": "public void testForwardTypeDeclaration12() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \"\\n\"+ \"function f(ctor) { return new ctor(); }\",null);\n}",
    "begin_line": 9734,
    "end_line": 9744,
    "comment": "",
    "child_ranges": [
      "(line 9737,col 5)-(line 9743,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testForwardTypeDeclaration13()",
    "snippet": "public void testForwardTypeDeclaration13() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MyType\u0027], []);\" + \"\\n\"+ \"function f(ctor) { return (new ctor()).impossibleProp; }\",\"Property impossibleProp never defined on ?\");\n}",
    "begin_line": 9746,
    "end_line": 9758,
    "comment": "",
    "child_ranges": [
      "(line 9750,col 5)-(line 9757,col 54)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateTypeDef()",
    "snippet": "public void testDuplicateTypeDef() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Bar \u003d function() {};\" + \" goog.Bar;\",\"variable goog.Bar redefined with type None, \" + \"original definition at [testcode]:1 \" + \"with type function (new:goog.Bar): undefined\");\n}",
    "begin_line": 9760,
    "end_line": 9768,
    "comment": "",
    "child_ranges": [
      "(line 9761,col 5)-(line 9767,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeDef1()",
    "snippet": "public void testTypeDef1() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Bar;\" + \" function f(x) {}\"+ \"f(3);\");\n}",
    "begin_line": 9770,
    "end_line": 9776,
    "comment": "",
    "child_ranges": [
      "(line 9771,col 5)-(line 9775,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeDef2()",
    "snippet": "public void testTypeDef2() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Bar;\" + \" function f(x) {}\"+ \"f(\u00273\u0027);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 9778,
    "end_line": 9787,
    "comment": "",
    "child_ranges": [
      "(line 9779,col 5)-(line 9786,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeDef3()",
    "snippet": "public void testTypeDef3() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" var Bar;\" + \" function f(x) {}\"+ \"f(\u00273\u0027);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 9789,
    "end_line": 9798,
    "comment": "",
    "child_ranges": [
      "(line 9790,col 5)-(line 9797,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeDef4()",
    "snippet": "public void testTypeDef4() throws Exception {\n  testTypes(\" function A() {}\" + \" function B() {}\" + \" var AB;\"+ \" function f(x) {}\"+ \"f(new A()); f(new B()); f(1);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: (A|B|null)\");\n}",
    "begin_line": 9800,
    "end_line": 9810,
    "comment": "",
    "child_ranges": [
      "(line 9801,col 5)-(line 9809,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeDef5()",
    "snippet": "public void testTypeDef5() throws Exception {\n  testTypes(\" function f(x) {}\" + \" function A() {}\" + \" function B() {}\"+ \" var AB;\"+ \"f(new A()); f(new B()); f(1);\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: (A|B|null)\");\n}",
    "begin_line": 9812,
    "end_line": 9826,
    "comment": "",
    "child_ranges": [
      "(line 9817,col 5)-(line 9825,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCircularTypeDef()",
    "snippet": "public void testCircularTypeDef() throws Exception {\n  testTypes(\"var goog \u003d {};\" + \" goog.Bar;\" + \" function f(x) {}\"+ \"f(3); f([3]); f([[3]]);\");\n}",
    "begin_line": 9828,
    "end_line": 9834,
    "comment": "",
    "child_ranges": [
      "(line 9829,col 5)-(line 9833,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent1()",
    "snippet": "public void testGetTypedPercent1() throws Exception {\n  String js\u003d\"var id \u003d function(x) { return x; }\\n\" + \"var id2 \u003d function(x) { return id(x); }\";\n  assertEquals(50.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9836,
    "end_line": 9840,
    "comment": "",
    "child_ranges": [
      "(line 9837,col 5)-(line 9838,col 58)",
      "(line 9839,col 5)-(line 9839,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent2()",
    "snippet": "public void testGetTypedPercent2() throws Exception {\n  String js\u003d\"var x \u003d {}; x.y \u003d 1;\";\n  assertEquals(100.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9842,
    "end_line": 9845,
    "comment": "",
    "child_ranges": [
      "(line 9843,col 5)-(line 9843,col 39)",
      "(line 9844,col 5)-(line 9844,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent3()",
    "snippet": "public void testGetTypedPercent3() throws Exception {\n  String js\u003d\"var f \u003d function(x) { x.a \u003d x.b; }\";\n  assertEquals(50.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9847,
    "end_line": 9850,
    "comment": "",
    "child_ranges": [
      "(line 9848,col 5)-(line 9848,col 53)",
      "(line 9849,col 5)-(line 9849,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent4()",
    "snippet": "public void testGetTypedPercent4() throws Exception {\n  String js\u003d\"var n \u003d {};\\n  n.T \u003d function() {};\\n\" + \" var x \u003d new n.T();\";\n  assertEquals(100.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9852,
    "end_line": 9856,
    "comment": "",
    "child_ranges": [
      "(line 9853,col 5)-(line 9854,col 46)",
      "(line 9855,col 5)-(line 9855,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent5()",
    "snippet": "public void testGetTypedPercent5() throws Exception {\n  String js\u003d\" keys \u003d {A: 1,B: 2,C: 3};\";\n  assertEquals(100.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9858,
    "end_line": 9861,
    "comment": "",
    "child_ranges": [
      "(line 9859,col 5)-(line 9859,col 65)",
      "(line 9860,col 5)-(line 9860,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGetTypedPercent6()",
    "snippet": "public void testGetTypedPercent6() throws Exception {\n  String js\u003d\"a \u003d {TRUE: 1, FALSE: 0};\";\n  assertEquals(100.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9863,
    "end_line": 9866,
    "comment": "",
    "child_ranges": [
      "(line 9864,col 5)-(line 9864,col 43)",
      "(line 9865,col 5)-(line 9865,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.getTypedPercent(java.lang.String)",
    "snippet": "private double getTypedPercent(String js) throws Exception {\n  Node n\u003dcompiler.parseTestCode(js);\n  Node externs\u003dnew Node(Token.BLOCK);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externs,n);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  TypeCheck t\u003dmakeTypeCheck();\n  t.processForTesting(null,n);\n  return t.getTypedPercent();\n}",
    "begin_line": 9868,
    "end_line": 9878,
    "comment": "",
    "child_ranges": [
      "(line 9869,col 5)-(line 9869,col 40)",
      "(line 9871,col 5)-(line 9871,col 41)",
      "(line 9872,col 5)-(line 9872,col 61)",
      "(line 9873,col 5)-(line 9873,col 46)",
      "(line 9875,col 5)-(line 9875,col 34)",
      "(line 9876,col 5)-(line 9876,col 33)",
      "(line 9877,col 5)-(line 9877,col 31)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.getInstanceType(Node)",
    "snippet": "private ObjectType getInstanceType(Node js1Node){\n  JSType type\u003djs1Node.getFirstChild().getJSType();\n  assertNotNull(type);\n  assertTrue(type instanceof FunctionType);\n  FunctionType functionType\u003d(FunctionType)type;\n  assertTrue(functionType.isConstructor());\n  return functionType.getInstanceType();\n}",
    "begin_line": 9880,
    "end_line": 9887,
    "comment": "",
    "child_ranges": [
      "(line 9881,col 5)-(line 9881,col 54)",
      "(line 9882,col 5)-(line 9882,col 24)",
      "(line 9883,col 5)-(line 9883,col 45)",
      "(line 9884,col 5)-(line 9884,col 52)",
      "(line 9885,col 5)-(line 9885,col 45)",
      "(line 9886,col 5)-(line 9886,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPrototypePropertyReference()",
    "snippet": "public void testPrototypePropertyReference() throws Exception {\n  TypeCheckResult p\u003dparseAndTypeCheckWithScope(\"\" + \"\\n\" + \"function Foo() {}\\n\"+ \"\\n\"+ \"Foo.prototype.bar \u003d function(a){};\\n\"+ \"\\n\"+ \"function baz(f) {\\n\"+ \"  Foo.prototype.bar.call(f, 3);\\n\"+ \"}\");\n  assertEquals(0,compiler.getErrorCount());\n  assertEquals(0,compiler.getWarningCount());\n  assertTrue(p.scope.getVar(\"Foo\").getType() instanceof FunctionType);\n  FunctionType fooType\u003d(FunctionType)p.scope.getVar(\"Foo\").getType();\n  assertEquals(\"function (this:Foo, number): undefined\",fooType.getPrototype().getPropertyType(\"bar\").toString());\n}",
    "begin_line": 9889,
    "end_line": 9906,
    "comment": "",
    "child_ranges": [
      "(line 9890,col 5)-(line 9898,col 15)",
      "(line 9899,col 5)-(line 9899,col 46)",
      "(line 9900,col 5)-(line 9900,col 48)",
      "(line 9902,col 5)-(line 9902,col 72)",
      "(line 9903,col 5)-(line 9903,col 74)",
      "(line 9904,col 5)-(line 9905,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testResolvingNamedTypes()",
    "snippet": "public void testResolvingNamedTypes() throws Exception {\n  String js\u003d\"\" + \"\\n\" + \"var Foo \u003d function() {}\\n\"+ \"\\n\"+ \"Foo.prototype.foo \u003d function(a) {\\n\"+ \"  return this.baz().toString();\\n\"+ \"};\\n\"+ \"\\n\"+ \"Foo.prototype.baz \u003d function() { return new Baz(); };\\n\"+ \"\\n\"+ \"var Bar \u003d function() {};\"+ \"\\n\"+ \"var Baz \u003d function() {};\";\n  assertEquals(100.0,getTypedPercent(js),0.1);\n}",
    "begin_line": 9908,
    "end_line": 9924,
    "comment": "",
    "child_ranges": [
      "(line 9909,col 5)-(line 9922,col 37)",
      "(line 9923,col 5)-(line 9923,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty1()",
    "snippet": "public void testMissingProperty1() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \"Foo.prototype.baz \u003d function() { this.a \u003d 3; };\");\n}",
    "begin_line": 9926,
    "end_line": 9931,
    "comment": "",
    "child_ranges": [
      "(line 9927,col 5)-(line 9930,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty2()",
    "snippet": "public void testMissingProperty2() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \"Foo.prototype.baz \u003d function() { this.b \u003d 3; };\",\"Property a never defined on Foo\");\n}",
    "begin_line": 9933,
    "end_line": 9939,
    "comment": "",
    "child_ranges": [
      "(line 9934,col 5)-(line 9938,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty3()",
    "snippet": "public void testMissingProperty3() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \"(new Foo).a \u003d 3;\");\n}",
    "begin_line": 9941,
    "end_line": 9946,
    "comment": "",
    "child_ranges": [
      "(line 9942,col 5)-(line 9945,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty4()",
    "snippet": "public void testMissingProperty4() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \"(new Foo).b \u003d 3;\",\"Property a never defined on Foo\");\n}",
    "begin_line": 9948,
    "end_line": 9954,
    "comment": "",
    "child_ranges": [
      "(line 9949,col 5)-(line 9953,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty5()",
    "snippet": "public void testMissingProperty5() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \" function Bar() { this.a \u003d 3; };\",\"Property a never defined on Foo\");\n}",
    "begin_line": 9956,
    "end_line": 9962,
    "comment": "",
    "child_ranges": [
      "(line 9957,col 5)-(line 9961,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty6()",
    "snippet": "public void testMissingProperty6() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\" + \" \"+ \"function Bar() { this.a \u003d 3; };\");\n}",
    "begin_line": 9964,
    "end_line": 9970,
    "comment": "",
    "child_ranges": [
      "(line 9965,col 5)-(line 9969,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty7()",
    "snippet": "public void testMissingProperty7() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { return obj.impossible; }\",\"Property impossible never defined on Object\");\n}",
    "begin_line": 9972,
    "end_line": 9977,
    "comment": "",
    "child_ranges": [
      "(line 9973,col 5)-(line 9976,col 55)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty8()",
    "snippet": "public void testMissingProperty8() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { return typeof obj.impossible; }\");\n}",
    "begin_line": 9979,
    "end_line": 9983,
    "comment": "",
    "child_ranges": [
      "(line 9980,col 5)-(line 9982,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty9()",
    "snippet": "public void testMissingProperty9() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { if (obj.impossible) { return true; } }\");\n}",
    "begin_line": 9985,
    "end_line": 9989,
    "comment": "",
    "child_ranges": [
      "(line 9986,col 5)-(line 9988,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty10()",
    "snippet": "public void testMissingProperty10() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { while (obj.impossible) { return true; } }\");\n}",
    "begin_line": 9991,
    "end_line": 9995,
    "comment": "",
    "child_ranges": [
      "(line 9992,col 5)-(line 9994,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty11()",
    "snippet": "public void testMissingProperty11() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { for (;obj.impossible;) { return true; } }\");\n}",
    "begin_line": 9997,
    "end_line": 10001,
    "comment": "",
    "child_ranges": [
      "(line 9998,col 5)-(line 10000,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty12()",
    "snippet": "public void testMissingProperty12() throws Exception {\n  testTypes(\"\" + \"function foo(obj) { do { } while (obj.impossible); }\");\n}",
    "begin_line": 10003,
    "end_line": 10007,
    "comment": "",
    "child_ranges": [
      "(line 10004,col 5)-(line 10006,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty13()",
    "snippet": "public void testMissingProperty13() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.isDef \u003d function(x) { return false; };\" + \"\" + \"function foo(obj) { return goog.isDef(obj.impossible); }\");\n}",
    "begin_line": 10009,
    "end_line": 10014,
    "comment": "",
    "child_ranges": [
      "(line 10010,col 5)-(line 10013,col 68)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty14()",
    "snippet": "public void testMissingProperty14() throws Exception {\n  testTypes(\"var goog \u003d {}; goog.isDef \u003d function(x) { return false; };\" + \"\" + \"function foo(obj) { return goog.isNull(obj.impossible); }\",\"Property isNull never defined on goog\");\n}",
    "begin_line": 10016,
    "end_line": 10022,
    "comment": "",
    "child_ranges": [
      "(line 10017,col 5)-(line 10021,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty15()",
    "snippet": "public void testMissingProperty15() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (x.foo) { x.foo(); } }\");\n}",
    "begin_line": 10024,
    "end_line": 10028,
    "comment": "",
    "child_ranges": [
      "(line 10025,col 5)-(line 10027,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty16()",
    "snippet": "public void testMissingProperty16() throws Exception {\n  testTypes(\"\" + \"function f(x) { x.foo(); if (x.foo) {} }\",\"Property foo never defined on Object\");\n}",
    "begin_line": 10030,
    "end_line": 10035,
    "comment": "",
    "child_ranges": [
      "(line 10031,col 5)-(line 10034,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty17()",
    "snippet": "public void testMissingProperty17() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (typeof x.foo \u003d\u003d \u0027function\u0027) { x.foo(); } }\");\n}",
    "begin_line": 10037,
    "end_line": 10041,
    "comment": "",
    "child_ranges": [
      "(line 10038,col 5)-(line 10040,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty18()",
    "snippet": "public void testMissingProperty18() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (x.foo instanceof Function) { x.foo(); } }\");\n}",
    "begin_line": 10043,
    "end_line": 10047,
    "comment": "",
    "child_ranges": [
      "(line 10044,col 5)-(line 10046,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty19()",
    "snippet": "public void testMissingProperty19() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (x.bar) { if (x.foo) {} } else { x.foo(); } }\",\"Property foo never defined on Object\");\n}",
    "begin_line": 10049,
    "end_line": 10054,
    "comment": "",
    "child_ranges": [
      "(line 10050,col 5)-(line 10053,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty20()",
    "snippet": "public void testMissingProperty20() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (x.foo) { } else { x.foo(); } }\",\"Property foo never defined on Object\");\n}",
    "begin_line": 10056,
    "end_line": 10061,
    "comment": "",
    "child_ranges": [
      "(line 10057,col 5)-(line 10060,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty21()",
    "snippet": "public void testMissingProperty21() throws Exception {\n  testTypes(\"\" + \"function f(x) { x.foo \u0026\u0026 x.foo(); }\");\n}",
    "begin_line": 10063,
    "end_line": 10067,
    "comment": "",
    "child_ranges": [
      "(line 10064,col 5)-(line 10066,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty22()",
    "snippet": "public void testMissingProperty22() throws Exception {\n  testTypes(\"\" + \"function f(x) { return x.foo ? x.foo() : true; }\");\n}",
    "begin_line": 10069,
    "end_line": 10073,
    "comment": "",
    "child_ranges": [
      "(line 10070,col 5)-(line 10072,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty23()",
    "snippet": "public void testMissingProperty23() throws Exception {\n  testTypes(\"function f(x) { x.impossible(); }\",\"Property impossible never defined on x\");\n}",
    "begin_line": 10075,
    "end_line": 10079,
    "comment": "",
    "child_ranges": [
      "(line 10076,col 5)-(line 10078,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty24()",
    "snippet": "public void testMissingProperty24() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MissingType\u0027], []);\" + \"\" + \"function f(x) { x.impossible(); }\",null);\n}",
    "begin_line": 10081,
    "end_line": 10086,
    "comment": "",
    "child_ranges": [
      "(line 10082,col 5)-(line 10085,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty25()",
    "snippet": "public void testMissingProperty25() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \"Foo.prototype.bar \u003d function() {};\" + \" var FooAlias \u003d Foo;\"+ \"(new FooAlias()).bar();\");\n}",
    "begin_line": 10088,
    "end_line": 10094,
    "comment": "",
    "child_ranges": [
      "(line 10089,col 5)-(line 10093,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty26()",
    "snippet": "public void testMissingProperty26() throws Exception {\n  testTypes(\" var Foo \u003d function() {};\" + \" var FooAlias \u003d Foo;\" + \"FooAlias.prototype.bar \u003d function() {};\"+ \"(new Foo()).bar();\");\n}",
    "begin_line": 10096,
    "end_line": 10102,
    "comment": "",
    "child_ranges": [
      "(line 10097,col 5)-(line 10101,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty27()",
    "snippet": "public void testMissingProperty27() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MissingType\u0027], []);\" + \"\" + \"function f(x) {\"+ \"  for (var parent \u003d x; parent; parent \u003d parent.getParent()) {}\"+ \"}\",null);\n}",
    "begin_line": 10104,
    "end_line": 10111,
    "comment": "",
    "child_ranges": [
      "(line 10105,col 5)-(line 10110,col 19)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty28()",
    "snippet": "public void testMissingProperty28() throws Exception {\n  testTypes(\"function f(obj) {\" + \"   obj.foo;\" + \"  return obj.foo;\"+ \"}\");\n  testTypes(\"function f(obj) {\" + \"   obj.foo;\" + \"  return obj.foox;\"+ \"}\",\"Property foox never defined on obj\");\n}",
    "begin_line": 10113,
    "end_line": 10125,
    "comment": "",
    "child_ranges": [
      "(line 10114,col 5)-(line 10118,col 13)",
      "(line 10119,col 5)-(line 10124,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty29()",
    "snippet": "public void testMissingProperty29() throws Exception {\n  testTypes(\" var Foo;\" + \"Foo.prototype.opera;\" + \"Foo.prototype.opera.postError;\",\"\",null,false);\n}",
    "begin_line": 10127,
    "end_line": 10137,
    "comment": "",
    "child_ranges": [
      "(line 10129,col 5)-(line 10136,col 15)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty30()",
    "snippet": "public void testMissingProperty30() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \" return {};\"+ \"}\"+ \"f().a \u003d 3;\"+ \" function g(y) { return y.a; }\");\n}",
    "begin_line": 10139,
    "end_line": 10147,
    "comment": "",
    "child_ranges": [
      "(line 10140,col 5)-(line 10146,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty31()",
    "snippet": "public void testMissingProperty31() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \" return [];\"+ \"}\"+ \"f().a \u003d 3;\"+ \" function g(y) { return y.a; }\");\n}",
    "begin_line": 10149,
    "end_line": 10157,
    "comment": "",
    "child_ranges": [
      "(line 10150,col 5)-(line 10156,col 65)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty32()",
    "snippet": "public void testMissingProperty32() throws Exception {\n  testTypes(\"\" + \"function f() {\" + \" return [];\"+ \"}\"+ \"f().a \u003d 3;\"+ \" function g(y) { return y.a; }\",\"Property a never defined on Date\");\n}",
    "begin_line": 10159,
    "end_line": 10168,
    "comment": "",
    "child_ranges": [
      "(line 10160,col 5)-(line 10167,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty33()",
    "snippet": "public void testMissingProperty33() throws Exception {\n  testTypes(\"\" + \"function f(x) { !x.foo || x.foo(); }\");\n}",
    "begin_line": 10170,
    "end_line": 10174,
    "comment": "",
    "child_ranges": [
      "(line 10171,col 5)-(line 10173,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty34()",
    "snippet": "public void testMissingProperty34() throws Exception {\n  testTypes(\"\" + \" function Foo() {}\" + \"Foo.prototype.bar \u003d function() { return this.a; };\"+ \"Foo.prototype.baz \u003d function() { this.b \u003d 3; };\");\n}",
    "begin_line": 10176,
    "end_line": 10182,
    "comment": "",
    "child_ranges": [
      "(line 10177,col 5)-(line 10181,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty35()",
    "snippet": "public void testMissingProperty35() throws Exception {\n  testTypes(\" function Foo() {}\" + \" function Bar() {}\" + \" function Baz() {}\"+ \" function f(x) { x.specialProp \u003d 1; }\"+ \" function g(x) { return x.specialProp; }\");\n}",
    "begin_line": 10184,
    "end_line": 10192,
    "comment": "",
    "child_ranges": [
      "(line 10186,col 5)-(line 10191,col 77)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty36()",
    "snippet": "public void testMissingProperty36() throws Exception {\n  testTypes(\" function Foo() {}\" + \"Foo.prototype.baz \u003d 0;\" + \" function SubFoo() {}\"+ \"SubFoo.prototype.bar \u003d 0;\"+ \" function f(x) { return x.baz; }\");\n}",
    "begin_line": 10194,
    "end_line": 10203,
    "comment": "",
    "child_ranges": [
      "(line 10197,col 5)-(line 10202,col 75)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty37()",
    "snippet": "public void testMissingProperty37() throws Exception {\n  testTypes(\" function f(x){\" + \"  x.isVisible \u003d false;\" + \"}\"+ \" function Foo() {}\"+ \" function SubFoo() {}\"+ \" SubFoo.prototype.isVisible \u003d true;\"+ \"\\n\"+ \"function g(x) { return x.isVisible; }\");\n}",
    "begin_line": 10205,
    "end_line": 10223,
    "comment": "",
    "child_ranges": [
      "(line 10208,col 5)-(line 10222,col 49)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty38()",
    "snippet": "public void testMissingProperty38() throws Exception {\n  testTypes(\" function Foo() {}\" + \" function Bar() {}\" + \" function f() { return new Foo(); }\"+ \"f().missing;\",\"Property missing never defined on (Bar|Foo|null)\");\n}",
    "begin_line": 10225,
    "end_line": 10232,
    "comment": "",
    "child_ranges": [
      "(line 10226,col 5)-(line 10231,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty39()",
    "snippet": "public void testMissingProperty39() throws Exception {\n  testTypes(\" function f() { return 3; }\" + \"f().length;\");\n}",
    "begin_line": 10234,
    "end_line": 10238,
    "comment": "",
    "child_ranges": [
      "(line 10235,col 5)-(line 10237,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty40()",
    "snippet": "public void testMissingProperty40() throws Exception {\n  testClosureTypes(\"goog.addDependency(\u0027zzz.js\u0027, [\u0027MissingType\u0027], []);\" + \"\" + \"function f(x) { x.impossible(); }\",null);\n}",
    "begin_line": 10240,
    "end_line": 10245,
    "comment": "",
    "child_ranges": [
      "(line 10241,col 5)-(line 10244,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty41()",
    "snippet": "public void testMissingProperty41() throws Exception {\n  testTypes(\"\" + \"function f(x) { if (x.impossible) x.impossible(); }\");\n}",
    "begin_line": 10247,
    "end_line": 10251,
    "comment": "",
    "child_ranges": [
      "(line 10248,col 5)-(line 10250,col 63)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMissingProperty42()",
    "snippet": "public void testMissingProperty42() throws Exception {\n  testTypes(\"\" + \"function f(x) { \" + \"  if (typeof x.impossible \u003d\u003d \u0027undefined\u0027) throw Error();\"+ \"  return x.impossible;\"+ \"}\");\n}",
    "begin_line": 10254,
    "end_line": 10261,
    "comment": "",
    "child_ranges": [
      "(line 10255,col 5)-(line 10260,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReflectObject1()",
    "snippet": "public void testReflectObject1() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; goog.reflect \u003d {}; \" + \"goog.reflect.object \u003d function(x, y){};\" + \" function A() {}\"+ \"goog.reflect.object(A, {x: 3});\",null);\n}",
    "begin_line": 10263,
    "end_line": 10270,
    "comment": "",
    "child_ranges": [
      "(line 10264,col 5)-(line 10269,col 14)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testReflectObject2()",
    "snippet": "public void testReflectObject2() throws Exception {\n  testClosureTypes(\"var goog \u003d {}; goog.reflect \u003d {}; \" + \"goog.reflect.object \u003d function(x, y){};\" + \" function f(x) {}\"+ \" function A() {}\"+ \"goog.reflect.object(A, {x: f(1 + 1)});\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 10272,
    "end_line": 10282,
    "comment": "",
    "child_ranges": [
      "(line 10273,col 5)-(line 10281,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends1()",
    "snippet": "public void testLends1() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\",\"Bad type annotation. missing object name in @lends tag\");\n}",
    "begin_line": 10284,
    "end_line": 10290,
    "comment": "",
    "child_ranges": [
      "(line 10285,col 5)-(line 10289,col 66)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends2()",
    "snippet": "public void testLends2() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\",\"Variable Foob not declared before @lends annotation.\");\n}",
    "begin_line": 10292,
    "end_line": 10298,
    "comment": "",
    "child_ranges": [
      "(line 10293,col 5)-(line 10297,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends3()",
    "snippet": "public void testLends3() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo, {bar: 1});\"+ \"alert(Foo.bar);\",\"Property bar never defined on Foo\");\n}",
    "begin_line": 10300,
    "end_line": 10307,
    "comment": "",
    "child_ranges": [
      "(line 10301,col 5)-(line 10306,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends4()",
    "snippet": "public void testLends4() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\"+ \"alert(Foo.bar);\");\n}",
    "begin_line": 10309,
    "end_line": 10315,
    "comment": "",
    "child_ranges": [
      "(line 10310,col 5)-(line 10314,col 27)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends5()",
    "snippet": "public void testLends5() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo, {bar: 1});\"+ \"alert((new Foo()).bar);\",\"Property bar never defined on Foo\");\n}",
    "begin_line": 10317,
    "end_line": 10324,
    "comment": "",
    "child_ranges": [
      "(line 10318,col 5)-(line 10323,col 45)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends6()",
    "snippet": "public void testLends6() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\"+ \"alert((new Foo()).bar);\");\n}",
    "begin_line": 10326,
    "end_line": 10332,
    "comment": "",
    "child_ranges": [
      "(line 10327,col 5)-(line 10331,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends7()",
    "snippet": "public void testLends7() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\",\"Bad type annotation. expected closing }\");\n}",
    "begin_line": 10334,
    "end_line": 10340,
    "comment": "",
    "child_ranges": [
      "(line 10335,col 5)-(line 10339,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends8()",
    "snippet": "public void testLends8() throws Exception {\n  testTypes(\"function extend(x, y) {}\" + \" var Foo \u003d 3;\" + \"extend(Foo,  ({bar: 1}));\",\"May only lend properties to object types. Foo has type number.\");\n}",
    "begin_line": 10342,
    "end_line": 10348,
    "comment": "",
    "child_ranges": [
      "(line 10343,col 5)-(line 10347,col 74)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends9()",
    "snippet": "public void testLends9() throws Exception {\n  testClosureTypesMultipleWarnings(\"function extend(x, y) {}\" + \" function Foo() {}\" + \"extend(Foo,  ({bar: 1}));\",Lists.newArrayList(\"Bad type annotation. expected closing }\",\"Bad type annotation. missing object name in @lends tag\"));\n}",
    "begin_line": 10350,
    "end_line": 10358,
    "comment": "",
    "child_ranges": [
      "(line 10351,col 5)-(line 10357,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends10()",
    "snippet": "public void testLends10() throws Exception {\n  testTypes(\"function defineClass(x) { return function() {}; } \" + \"\" + \"var Foo \u003d defineClass(\"+ \"     ({ bar: 1}));\"+ \" function f() { return (new Foo()).bar; }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 10360,
    "end_line": 10370,
    "comment": "",
    "child_ranges": [
      "(line 10361,col 5)-(line 10369,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testLends11()",
    "snippet": "public void testLends11() throws Exception {\n  testTypes(\"function defineClass(x, y) { return function() {}; } \" + \"\" + \"var Foo \u003d function() {};\"+ \" Foo.prototype.bar \u003d function() { return 3; };\"+ \"\\n\"+ \"var SubFoo \u003d defineClass(Foo, \"+ \"     ({\\n\"+ \"       bar: function() { return 3; }}));\"+ \" function f() { return (new SubFoo()).bar(); }\",\"inconsistent return type\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 10372,
    "end_line": 10389,
    "comment": "",
    "child_ranges": [
      "(line 10373,col 5)-(line 10388,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDeclaredNativeTypeEquality()",
    "snippet": "public void testDeclaredNativeTypeEquality() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" function Object() {};\");\n  assertTypeEquals(registry.getNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE),n.getFirstChild().getJSType());\n}",
    "begin_line": 10391,
    "end_line": 10395,
    "comment": "",
    "child_ranges": [
      "(line 10392,col 5)-(line 10392,col 76)",
      "(line 10393,col 5)-(line 10394,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUndefinedVar()",
    "snippet": "public void testUndefinedVar() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"var undefined;\");\n  assertTypeEquals(registry.getNativeType(JSTypeNative.VOID_TYPE),n.getFirstChild().getFirstChild().getJSType());\n}",
    "begin_line": 10397,
    "end_line": 10401,
    "comment": "",
    "child_ranges": [
      "(line 10398,col 5)-(line 10398,col 49)",
      "(line 10399,col 5)-(line 10400,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFlowScopeBug1()",
    "snippet": "public void testFlowScopeBug1() throws Exception {\n  Node n\u003dparseAndTypeCheck(\"\\n\" + \"function f(a, b) {\\n\"+ \"\"+ \"var i \u003d 0;\"+ \"for (; (i + a) \u003c b; ++i) {}}\");\n  assertTypeEquals(registry.getNativeType(JSTypeNative.NUMBER_TYPE),n.getFirstChild().getLastChild().getLastChild().getFirstChild().getNext().getFirstChild().getJSType());\n}",
    "begin_line": 10403,
    "end_line": 10415,
    "comment": "",
    "child_ranges": [
      "(line 10404,col 5)-(line 10409,col 42)",
      "(line 10412,col 5)-(line 10414,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFlowScopeBug2()",
    "snippet": "public void testFlowScopeBug2() throws Exception {\n  Node n\u003dparseAndTypeCheck(\" function Foo() {};\\n\" + \"Foo.prototype.hi \u003d false;\" + \"function foo(a, b) {\\n\"+ \"  \"+ \"  var arr;\"+ \"  \"+ \"  var iter;\"+ \"  for (iter \u003d 0; iter \u003c arr.length; ++ iter) {\"+ \"    \"+ \"    var afoo \u003d arr[iter];\"+ \"    afoo;\"+ \"  }\"+ \"}\");\n  assertTypeEquals(registry.createNullableType(registry.getType(\"Foo\")),n.getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getLastChild().getJSType());\n}",
    "begin_line": 10417,
    "end_line": 10436,
    "comment": "",
    "child_ranges": [
      "(line 10418,col 5)-(line 10430,col 15)",
      "(line 10433,col 5)-(line 10435,col 52)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testAddSingletonGetter()",
    "snippet": "public void testAddSingletonGetter(){\n  Node n\u003dparseAndTypeCheck(\" function Foo() {};\\n\" + \"goog.addSingletonGetter(Foo);\");\n  ObjectType o\u003d(ObjectType)n.getFirstChild().getJSType();\n  assertEquals(\"function (): Foo\",o.getPropertyType(\"getInstance\").toString());\n  assertEquals(\"Foo\",o.getPropertyType(\"instance_\").toString());\n}",
    "begin_line": 10438,
    "end_line": 10446,
    "comment": "",
    "child_ranges": [
      "(line 10439,col 5)-(line 10441,col 41)",
      "(line 10442,col 5)-(line 10442,col 62)",
      "(line 10443,col 5)-(line 10444,col 53)",
      "(line 10445,col 5)-(line 10445,col 67)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypeCheckStandaloneAST()",
    "snippet": "public void testTypeCheckStandaloneAST() throws Exception {\n  Node n\u003dcompiler.parseTestCode(\"function Foo() { }\");\n  typeCheck(n);\n  MemoizedScopeCreator scopeCreator\u003dnew MemoizedScopeCreator(new TypedScopeCreator(compiler));\n  Scope topScope\u003dscopeCreator.createScope(n,null);\n  Node second\u003dcompiler.parseTestCode(\"new Foo\");\n  Node externs\u003dnew Node(Token.BLOCK);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externs,second);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  new TypeCheck(compiler,new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),registry),registry,topScope,scopeCreator,CheckLevel.WARNING,CheckLevel.OFF).process(null,second);\n  assertEquals(1,compiler.getWarningCount());\n  assertEquals(\"cannot instantiate non-constructor\",compiler.getWarnings()[0].description);\n}",
    "begin_line": 10448,
    "end_line": 10471,
    "comment": "",
    "child_ranges": [
      "(line 10449,col 5)-(line 10449,col 58)",
      "(line 10450,col 5)-(line 10450,col 17)",
      "(line 10451,col 5)-(line 10452,col 41)",
      "(line 10453,col 5)-(line 10453,col 55)",
      "(line 10455,col 5)-(line 10455,col 52)",
      "(line 10457,col 5)-(line 10457,col 41)",
      "(line 10458,col 5)-(line 10458,col 66)",
      "(line 10459,col 5)-(line 10459,col 46)",
      "(line 10461,col 5)-(line 10466,col 31)",
      "(line 10468,col 5)-(line 10468,col 48)",
      "(line 10469,col 5)-(line 10470,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUpdateParameterTypeOnClosure()",
    "snippet": "public void testUpdateParameterTypeOnClosure() throws Exception {\n  testTypes(\"\\n\"+ \"function Object(opt_value) {}\\n\"+ \"\\n\"+ \"function Function(var_args) {}\\n\"+ \"\\n\"+ \"Object.prototype.constructor \u003d function() {};\\n\",\"\\n\"+ \"function f(fn) {}\\n\"+ \"f(function(g) { });\\n\",null,false);\n}",
    "begin_line": 10473,
    "end_line": 10499,
    "comment": "",
    "child_ranges": [
      "(line 10474,col 5)-(line 10498,col 15)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplatedThisType1()",
    "snippet": "public void testTemplatedThisType1() throws Exception {\n  testTypes(\"\\n\" + \"function Foo() {}\\n\" + \"\\n\"+ \"Foo.prototype.method \u003d function() {};\\n\"+ \"\\n\"+ \"function Bar() {}\\n\"+ \"var g \u003d new Bar().method();\\n\"+ \"\\n\"+ \"function compute(a) {};\\n\"+ \"compute(g);\\n\",\"actual parameter 1 of compute does not match formal parameter\\n\" + \"found   : Bar\\n\" + \"required: number\");\n}",
    "begin_line": 10501,
    "end_line": 10526,
    "comment": "",
    "child_ranges": [
      "(line 10502,col 5)-(line 10525,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplatedThisType2()",
    "snippet": "public void testTemplatedThisType2() throws Exception {\n  testTypes(\"\\n\"+ \"Array.prototype.method \u003d function() {};\\n\"+ \"(function(){\\n\"+ \"  Array.prototype.method.call(arguments);\"+ \"})();\");\n}",
    "begin_line": 10528,
    "end_line": 10539,
    "comment": "",
    "child_ranges": [
      "(line 10529,col 5)-(line 10538,col 17)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplateType1()",
    "snippet": "public void testTemplateType1() throws Exception {\n  testTypes(\"\\n\"+ \"function f(x, y, z) {}\\n\"+ \"f(this, this, function() { this });\");\n}",
    "begin_line": 10541,
    "end_line": 10551,
    "comment": "",
    "child_ranges": [
      "(line 10542,col 5)-(line 10550,col 47)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplateType2()",
    "snippet": "public void testTemplateType2() throws Exception {\n  testTypes(\"\\n\"+ \"function f(x, y) {}\\n\"+ \"f(0, function() {});\");\n}",
    "begin_line": 10553,
    "end_line": 10564,
    "comment": "",
    "child_ranges": [
      "(line 10556,col 5)-(line 10563,col 32)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplateType3()",
    "snippet": "public void testTemplateType3() throws Exception {\n  testTypes(\"\\n\"+ \"function call(v, f) { f.call(null, v); }\"+ \" var s;\"+ \"call(3, function(x) {\"+ \" x \u003d true;\"+ \" s \u003d x;\"+ \"});\",\"assignment\\n\" + \"found   : boolean\\n\" + \"required: string\");\n}",
    "begin_line": 10566,
    "end_line": 10582,
    "comment": "",
    "child_ranges": [
      "(line 10567,col 5)-(line 10581,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplateType4()",
    "snippet": "public void testTemplateType4() throws Exception {\n  testTypes(\"\\n\"+ \"function fn(p) { return p; }\\n\"+ \" var x;\"+ \"x \u003d fn(3, null);\",\"assignment\\n\" + \"found   : (null|number)\\n\" + \"required: Object\");\n}",
    "begin_line": 10584,
    "end_line": 10597,
    "comment": "",
    "child_ranges": [
      "(line 10585,col 5)-(line 10596,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTemplateType5()",
    "snippet": "public void testTemplateType5() throws Exception {\n  testTypes(\"\\n\"+ \"function fn(arr, f) { return arr[0]; }\\n\"+ \" function g(arr) {\"+ \"   var x \u003d fn.call(null, arr, null);\"+ \"}\",\"initializing variable\\n\" + \"found   : number\\n\" + \"required: Object\");\n}",
    "begin_line": 10599,
    "end_line": 10614,
    "comment": "",
    "child_ranges": [
      "(line 10600,col 5)-(line 10613,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.disable_testBadTemplateType4()",
    "snippet": "public void disable_testBadTemplateType4() throws Exception {\n  testTypes(\"\\n\"+ \"function f() {}\\n\"+ \"f();\",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n}",
    "begin_line": 10616,
    "end_line": 10627,
    "comment": "",
    "child_ranges": [
      "(line 10620,col 5)-(line 10626,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.disable_testBadTemplateType5()",
    "snippet": "public void disable_testBadTemplateType5() throws Exception {\n  testTypes(\"\\n\"+ \"function f() {}\\n\"+ \"f();\",FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n}",
    "begin_line": 10629,
    "end_line": 10641,
    "comment": "",
    "child_ranges": [
      "(line 10633,col 5)-(line 10640,col 61)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.disable_testFunctionLiteralUndefinedThisArgument()",
    "snippet": "public void disable_testFunctionLiteralUndefinedThisArgument() throws Exception {\n  testTypes(\"\" + \"\\n\"+ \"function baz(fn, opt_obj) {}\\n\"+ \"baz(function() { this; });\",\"Function literal argument refers to undefined this argument\");\n}",
    "begin_line": 10643,
    "end_line": 10657,
    "comment": "",
    "child_ranges": [
      "(line 10648,col 5)-(line 10656,col 71)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument()",
    "snippet": "public void testFunctionLiteralDefinedThisArgument() throws Exception {\n  testTypes(\"\" + \"\\n\"+ \"function baz(fn, opt_obj) {}\\n\"+ \"baz(function() { this; }, {});\");\n}",
    "begin_line": 10659,
    "end_line": 10668,
    "comment": "",
    "child_ranges": [
      "(line 10660,col 5)-(line 10667,col 44)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionLiteralDefinedThisArgument2()",
    "snippet": "public void testFunctionLiteralDefinedThisArgument2() throws Exception {\n  testTypes(\"\" + \" function f(x) {}\" + \"\\n\"+ \"function baz(fn, opt_obj) {}\\n\"+ \"function g() { baz(function() { f(this.length); }, []); }\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 10670,
    "end_line": 10683,
    "comment": "",
    "child_ranges": [
      "(line 10671,col 5)-(line 10682,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFunctionLiteralUnreadNullThisArgument()",
    "snippet": "public void testFunctionLiteralUnreadNullThisArgument() throws Exception {\n  testTypes(\"\" + \"\\n\"+ \"function baz(fn, opt_obj) {}\\n\"+ \"baz(function() {}, null);\");\n}",
    "begin_line": 10685,
    "end_line": 10694,
    "comment": "",
    "child_ranges": [
      "(line 10686,col 5)-(line 10693,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testUnionTemplateThisType()",
    "snippet": "public void testUnionTemplateThisType() throws Exception {\n  testTypes(\" function F() {}\" + \" function g() { return []; }\" + \" function h(x) { }\"+ \"\\n\"+ \"function f(x, y) {}\\n\"+ \"f(g(), function() { h(this); });\",\"actual parameter 1 of h does not match formal parameter\\n\" + \"found   : (Array|F|null)\\n\" + \"required: (F|null)\");\n}",
    "begin_line": 10696,
    "end_line": 10711,
    "comment": "",
    "child_ranges": [
      "(line 10697,col 5)-(line 10710,col 30)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testActiveXObject()",
    "snippet": "public void testActiveXObject() throws Exception {\n  testTypes(\" var x \u003d new ActiveXObject();\" + \" var y \u003d new ActiveXObject();\");\n}",
    "begin_line": 10713,
    "end_line": 10717,
    "comment": "",
    "child_ranges": [
      "(line 10714,col 5)-(line 10716,col 78)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType1()",
    "snippet": "public void testRecordType1() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"f({});\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : {prop: (number|undefined)}\\n\" + \"required: {prop: number}\");\n}",
    "begin_line": 10719,
    "end_line": 10727,
    "comment": "",
    "child_ranges": [
      "(line 10720,col 5)-(line 10726,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType2()",
    "snippet": "public void testRecordType2() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"f({});\");\n}",
    "begin_line": 10729,
    "end_line": 10734,
    "comment": "",
    "child_ranges": [
      "(line 10730,col 5)-(line 10733,col 18)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType3()",
    "snippet": "public void testRecordType3() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"f({prop: \u0027x\u0027});\",\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : {prop: (number|string)}\\n\" + \"required: {prop: number}\");\n}",
    "begin_line": 10736,
    "end_line": 10744,
    "comment": "",
    "child_ranges": [
      "(line 10737,col 5)-(line 10743,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType4()",
    "snippet": "public void testRecordType4() throws Exception {\n  testClosureTypesMultipleWarnings(\"\" + \"function f(x) {}\" + \"\"+ \"function g(x) {}\"+ \"var x \u003d {}; f(x); g(x);\",Lists.newArrayList(\"actual parameter 1 of f does not match formal parameter\\n\" + \"found   : {prop: (number|string|undefined)}\\n\" + \"required: {prop: (number|undefined)}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : {prop: (number|string|undefined)}\\n\" + \"required: {prop: (string|undefined)}\"));\n}",
    "begin_line": 10746,
    "end_line": 10763,
    "comment": "",
    "child_ranges": [
      "(line 10750,col 5)-(line 10762,col 53)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType5()",
    "snippet": "public void testRecordType5() throws Exception {\n  testTypes(\"\" + \"function f(x) {}\" + \"\"+ \"function g(x) {}\"+ \"var x \u003d {}; f(x); g(x);\");\n}",
    "begin_line": 10765,
    "end_line": 10772,
    "comment": "",
    "child_ranges": [
      "(line 10766,col 5)-(line 10771,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType6()",
    "snippet": "public void testRecordType6() throws Exception {\n  testTypes(\"\" + \"function f() { return {}; }\");\n}",
    "begin_line": 10774,
    "end_line": 10778,
    "comment": "",
    "child_ranges": [
      "(line 10775,col 5)-(line 10777,col 39)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType7()",
    "snippet": "public void testRecordType7() throws Exception {\n  testTypes(\"\" + \"function f() { var x \u003d {}; g(x); return x; }\" + \"\"+ \"function g(x) {}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : {prop: (number|undefined)}\\n\" + \"required: number\");\n}",
    "begin_line": 10780,
    "end_line": 10789,
    "comment": "",
    "child_ranges": [
      "(line 10781,col 5)-(line 10788,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testRecordType8()",
    "snippet": "public void testRecordType8() throws Exception {\n  testTypes(\"\" + \"function f() { var x \u003d {prop: 3}; g(x.prop); return x; }\" + \"\"+ \"function g(x) {}\",\"actual parameter 1 of g does not match formal parameter\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 10791,
    "end_line": 10800,
    "comment": "",
    "child_ranges": [
      "(line 10792,col 5)-(line 10799,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateRecordFields1()",
    "snippet": "public void testDuplicateRecordFields1() throws Exception {\n  testTypes(\"\"+ \"function f(a) {};\",\"Parse error. Duplicate record field x\");\n}",
    "begin_line": 10802,
    "end_line": 10808,
    "comment": "",
    "child_ranges": [
      "(line 10803,col 5)-(line 10807,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testDuplicateRecordFields2()",
    "snippet": "public void testDuplicateRecordFields2() throws Exception {\n  testTypes(\"\"+ \"function f(a) {};\",new String[]{\"Bad type annotation. Unknown type x\",\"Parse error. Duplicate record field number\",\"Bad type annotation. Unknown type y\"});\n}",
    "begin_line": 10810,
    "end_line": 10818,
    "comment": "",
    "child_ranges": [
      "(line 10811,col 5)-(line 10817,col 51)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface1()",
    "snippet": "public void testMultipleExtendsInterface1() throws Exception {\n  testTypes(\" function base1() {}\\n\" + \" function base2() {}\\n\" + \"\\n\"+ \"function derived() {}\");\n}",
    "begin_line": 10820,
    "end_line": 10828,
    "comment": "",
    "child_ranges": [
      "(line 10821,col 5)-(line 10827,col 35)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface2()",
    "snippet": "public void testMultipleExtendsInterface2() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"Int0.prototype.foo \u003d function() {};\"+ \"\"+ \"function Int2() {};\"+ \"function Foo() {};\",\"property foo on interface Int0 is not implemented by type Foo\");\n}",
    "begin_line": 10830,
    "end_line": 10839,
    "comment": "",
    "child_ranges": [
      "(line 10831,col 5)-(line 10838,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface3()",
    "snippet": "public void testMultipleExtendsInterface3() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"Int1.prototype.foo \u003d function() {};\"+ \"\"+ \"function Int2() {};\"+ \"function Foo() {};\",\"property foo on interface Int1 is not implemented by type Foo\");\n}",
    "begin_line": 10841,
    "end_line": 10850,
    "comment": "",
    "child_ranges": [
      "(line 10842,col 5)-(line 10849,col 73)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface4()",
    "snippet": "public void testMultipleExtendsInterface4() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"function Int2() {};\"+ \"function Foo() {};\",\"Int2 @extends non-object type number\");\n}",
    "begin_line": 10852,
    "end_line": 10861,
    "comment": "",
    "child_ranges": [
      "(line 10853,col 5)-(line 10860,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface5()",
    "snippet": "public void testMultipleExtendsInterface5() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"\"+ \"function Int2() {};\",\"Int2 cannot extend this type; interfaces can only extend interfaces\");\n}",
    "begin_line": 10863,
    "end_line": 10871,
    "comment": "",
    "child_ranges": [
      "(line 10864,col 5)-(line 10870,col 79)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterface6()",
    "snippet": "public void testMultipleExtendsInterface6() throws Exception {\n  testTypes(\"function Super1() {};\" + \"function Super2() {};\" + \"Super2.prototype.foo \u003d function(bar) {};\"+ \"function Sub() {};\"+ \"Sub.prototype.foo \u003d\\n\"+ \"function(bar) {};\",\"mismatch of the foo property type and the type of the property it \" + \"overrides from superclass Super2\\n\" + \"original: function (this:Super2, number): undefined\\n\"+ \"override: function (this:Sub, string): undefined\");\n}",
    "begin_line": 10873,
    "end_line": 10886,
    "comment": "",
    "child_ranges": [
      "(line 10874,col 5)-(line 10885,col 60)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceAssignment()",
    "snippet": "public void testMultipleExtendsInterfaceAssignment() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \" var I2 \u003d function() {}\\n\" + \"\"+ \"var I3 \u003d function() {};\\n\"+ \"var T \u003d function() {};\\n\"+ \"var t \u003d new T();\\n\"+ \"var i1 \u003d t;\\n\"+ \"var i2 \u003d t;\\n\"+ \"var i3 \u003d t;\\n\"+ \"i1 \u003d i3;\\n\"+ \"i2 \u003d i3;\\n\");\n}",
    "begin_line": 10888,
    "end_line": 10900,
    "comment": "",
    "child_ranges": [
      "(line 10889,col 5)-(line 10899,col 23)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testMultipleExtendsInterfaceParamPass()",
    "snippet": "public void testMultipleExtendsInterfaceParamPass() throws Exception {\n  testTypes(\"var I1 \u003d function() {};\\n\" + \" var I2 \u003d function() {}\\n\" + \"\"+ \"var I3 \u003d function() {};\\n\"+ \"var T \u003d function() {};\\n\"+ \"var t \u003d new T();\\n\"+ \"function foo(x,y,z){};\\n\"+ \"foo(t,t,t)\\n\");\n}",
    "begin_line": 10902,
    "end_line": 10911,
    "comment": "",
    "child_ranges": [
      "(line 10903,col 5)-(line 10910,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBadMultipleExtendsClass()",
    "snippet": "public void testBadMultipleExtendsClass() throws Exception {\n  testTypes(\" function base1() {}\\n\" + \" function base2() {}\\n\" + \"\\n\"+ \"function derived() {}\",\"Bad type annotation. type annotation incompatible \" + \"with other annotations\");\n}",
    "begin_line": 10913,
    "end_line": 10923,
    "comment": "",
    "child_ranges": [
      "(line 10914,col 5)-(line 10922,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testInterfaceExtendsResolution()",
    "snippet": "public void testInterfaceExtendsResolution() throws Exception {\n  testTypes(\" function B() {};\\n\" + \" function C() {};\\n\" + \" function A() {};\");\n}",
    "begin_line": 10925,
    "end_line": 10929,
    "comment": "",
    "child_ranges": [
      "(line 10926,col 5)-(line 10928,col 46)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testPropertyCanBeDefinedInObject()",
    "snippet": "public void testPropertyCanBeDefinedInObject() throws Exception {\n  testTypes(\" function I() {};\" + \"I.prototype.bar \u003d function() {};\" + \" var foo;\"+ \"foo.bar();\");\n}",
    "begin_line": 10931,
    "end_line": 10936,
    "comment": "",
    "child_ranges": [
      "(line 10932,col 5)-(line 10935,col 22)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.checkObjectType(ObjectType, java.lang.String, JSType)",
    "snippet": "private void checkObjectType(ObjectType objectType,String propertyName,JSType expectedType){\n  assertTrue(\"Expected \" + objectType.getReferenceName() + \" to have property \"+ propertyName,objectType.hasProperty(propertyName));\n  assertTypeEquals(\"Expected \" + objectType.getReferenceName() + \"\u0027s property \"+ propertyName+ \" to have type \"+ expectedType,expectedType,objectType.getPropertyType(propertyName));\n}",
    "begin_line": 10938,
    "end_line": 10947,
    "comment": "",
    "child_ranges": [
      "(line 10940,col 5)-(line 10942,col 60)",
      "(line 10943,col 5)-(line 10946,col 64)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility1()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \"\"+ \"function Int2() {};\",\"Interface Int2 has a property foo with incompatible types in its \" + \"super interfaces Int0 and Int1\");\n}",
    "begin_line": 10949,
    "end_line": 10961,
    "comment": "",
    "child_ranges": [
      "(line 10950,col 5)-(line 10960,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility2()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"function Int2() {};\"+ \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \"\"+ \"Int2.prototype.foo;\"+ \"\"+ \"function Int3() {};\",new String[]{\"Interface Int3 has a property foo with incompatible types in \" + \"its super interfaces Int0 and Int1\",\"Interface Int3 has a property foo with incompatible types in \" + \"its super interfaces Int1 and Int2\"});\n}",
    "begin_line": 10963,
    "end_line": 10983,
    "comment": "",
    "child_ranges": [
      "(line 10964,col 5)-(line 10982,col 11)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility3()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \" function Int2() {};\"+ \"\"+ \"function Int3() {};\",\"Interface Int3 has a property foo with incompatible types in its \" + \"super interfaces Int0 and Int1\");\n}",
    "begin_line": 10985,
    "end_line": 10998,
    "comment": "",
    "child_ranges": [
      "(line 10986,col 5)-(line 10997,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility4()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n  testTypes(\"function Int0() {};\" + \" function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"function Int2() {};\"+ \" function Int3() {};\"+ \"\"+ \"Int2.prototype.foo;\"+ \"\"+ \"function Int4() {};\",\"Interface Int4 has a property foo with incompatible types in its \" + \"super interfaces Int0 and Int2\");\n}",
    "begin_line": 11000,
    "end_line": 11014,
    "comment": "",
    "child_ranges": [
      "(line 11001,col 5)-(line 11013,col 42)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility5()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \" function Int2() {};\"+ \"\"+ \"function Int3() {};\"+ \"function Int4() {};\"+ \"\"+ \"Int4.prototype.foo;\"+ \"\"+ \"function Int5() {};\",new String[]{\"Interface Int3 has a property foo with incompatible types in its\" + \" super interfaces Int0 and Int1\",\"Interface Int5 has a property foo with incompatible types in its\" + \" super interfaces Int1 and Int4\"});\n}",
    "begin_line": 11016,
    "end_line": 11037,
    "comment": "",
    "child_ranges": [
      "(line 11017,col 5)-(line 11036,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility6()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \" function Int2() {};\"+ \"\"+ \"function Int3() {};\"+ \"function Int4() {};\"+ \"\"+ \"Int4.prototype.foo;\"+ \"\"+ \"function Int5() {};\",\"Interface Int3 has a property foo with incompatible types in its\" + \" super interfaces Int0 and Int1\");\n}",
    "begin_line": 11039,
    "end_line": 11057,
    "comment": "",
    "child_ranges": [
      "(line 11040,col 5)-(line 11056,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility7()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.foo;\"+ \" function Int2() {};\"+ \"\"+ \"function Int3() {};\"+ \"function Int4() {};\"+ \"\"+ \"Int4.prototype.foo;\"+ \"\"+ \"function Int5() {};\",new String[]{\"Interface Int3 has a property foo with incompatible types in its\" + \" super interfaces Int0 and Int1\",\"Interface Int5 has a property foo with incompatible types in its\" + \" super interfaces Int1 and Int4\"});\n}",
    "begin_line": 11059,
    "end_line": 11080,
    "comment": "",
    "child_ranges": [
      "(line 11060,col 5)-(line 11079,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testExtendedInterfacePropertiesCompatibility8()",
    "snippet": "public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n  testTypes(\"function Int0() {};\" + \"function Int1() {};\" + \"\"+ \"Int0.prototype.foo;\"+ \"\"+ \"Int1.prototype.bar;\"+ \" function Int2() {};\"+ \"\"+ \"function Int3() {};\"+ \"function Int4() {};\"+ \"\"+ \"Int4.prototype.foo;\"+ \"\"+ \"Int4.prototype.bar;\"+ \"\"+ \"function Int5() {};\",new String[]{\"Interface Int5 has a property bar with incompatible types in its\" + \" super interfaces Int1 and Int4\",\"Interface Int5 has a property foo with incompatible types in its\" + \" super interfaces Int0 and Int4\"});\n}",
    "begin_line": 11082,
    "end_line": 11105,
    "comment": "",
    "child_ranges": [
      "(line 11083,col 5)-(line 11104,col 48)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testGenerics1()",
    "snippet": "public void testGenerics1() throws Exception {\n  String FN_DECL\u003d\" \\n\"+ \"function f(x,y) { return y(x); }\\n\";\n  testTypes(FN_DECL + \"\" + \"var out;\"+ \"\"+ \"var result \u003d f(\u0027hi\u0027, function(x){ out \u003d x; return x; });\");\n  testTypes(FN_DECL + \"\" + \"var out;\"+ \"var result \u003d f(0, function(x){ out \u003d x; return x; });\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n  testTypes(FN_DECL + \"var out;\" + \"\"+ \"var result \u003d f(0, function(x){ out \u003d x; return x; });\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 11107,
    "end_line": 11139,
    "comment": "",
    "child_ranges": [
      "(line 11108,col 5)-(line 11113,col 45)",
      "(line 11115,col 5)-(line 11120,col 68)",
      "(line 11122,col 5)-(line 11129,col 28)",
      "(line 11131,col 5)-(line 11138,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFilter0()",
    "snippet": "public void testFilter0() throws Exception {\n  testTypes(\"\\n\"+ \"var filter \u003d function(arr){};\\n\"+ \"\"+ \"var arr;\\n\"+ \"\"+ \"var result \u003d filter(arr);\");\n}",
    "begin_line": 11141,
    "end_line": 11155,
    "comment": "",
    "child_ranges": [
      "(line 11143,col 5)-(line 11154,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFilter1()",
    "snippet": "public void testFilter1() throws Exception {\n  testTypes(\"\\n\"+ \"var filter \u003d function(arr){};\\n\"+ \"\"+ \"var arr;\\n\"+ \"\"+ \"var result \u003d filter(arr);\");\n}",
    "begin_line": 11157,
    "end_line": 11171,
    "comment": "",
    "child_ranges": [
      "(line 11159,col 5)-(line 11170,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFilter2()",
    "snippet": "public void testFilter2() throws Exception {\n  testTypes(\"\\n\"+ \"var filter \u003d function(arr){};\\n\"+ \"\"+ \"var arr;\\n\"+ \"\"+ \"var result \u003d filter(arr);\",\"initializing variable\\n\" + \"found   : Array.\u003cstring\u003e\\n\" + \"required: Array.\u003cnumber\u003e\");\n}",
    "begin_line": 11173,
    "end_line": 11190,
    "comment": "",
    "child_ranges": [
      "(line 11175,col 5)-(line 11189,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testFilter3()",
    "snippet": "public void testFilter3() throws Exception {\n  testTypes(\"\\n\"+ \"var filter \u003d function(arr){};\\n\"+ \"\"+ \"var arr;\\n\"+ \"\"+ \"var result \u003d filter(arr);\",\"initializing variable\\n\" + \"found   : (Array.\u003cstring\u003e|null)\\n\" + \"required: (Array.\u003cnumber\u003e|null)\");\n}",
    "begin_line": 11192,
    "end_line": 11209,
    "comment": "",
    "child_ranges": [
      "(line 11194,col 5)-(line 11208,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter1()",
    "snippet": "public void testBackwardsInferenceGoogArrayFilter1() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\" + \"var arr;\\n\"+ \"\"+ \"var result \u003d goog.array.filter(\"+ \"   arr,\"+ \"   function(item,index,src) {return false;});\",\"initializing variable\\n\" + \"found   : Array.\u003cstring\u003e\\n\" + \"required: Array.\u003cnumber\u003e\");\n}",
    "begin_line": 11211,
    "end_line": 11224,
    "comment": "",
    "child_ranges": [
      "(line 11213,col 5)-(line 11223,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter2()",
    "snippet": "public void testBackwardsInferenceGoogArrayFilter2() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\" + \"var out;\"+ \"\"+ \"var arr;\\n\"+ \"var out4 \u003d goog.array.filter(\"+ \"   arr,\"+ \"   function(item,index,src) {out \u003d item;});\",\"assignment\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 11226,
    "end_line": 11239,
    "comment": "",
    "child_ranges": [
      "(line 11227,col 5)-(line 11238,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter3()",
    "snippet": "public void testBackwardsInferenceGoogArrayFilter3() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\" + \"var out;\"+ \" var arr;\\n\"+ \"var result \u003d goog.array.filter(\"+ \"   arr,\"+ \"   function(item,index,src) {out \u003d index;});\",\"assignment\\n\" + \"found   : number\\n\" + \"required: string\");\n}",
    "begin_line": 11241,
    "end_line": 11253,
    "comment": "",
    "child_ranges": [
      "(line 11242,col 5)-(line 11252,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testBackwardsInferenceGoogArrayFilter4()",
    "snippet": "public void testBackwardsInferenceGoogArrayFilter4() throws Exception {\n  testClosureTypes(CLOSURE_DEFS + \"\" + \"var out;\"+ \" var arr;\\n\"+ \"var out4 \u003d goog.array.filter(\"+ \"   arr,\"+ \"   function(item,index,srcArr) {out \u003d srcArr;});\",\"assignment\\n\" + \"found   : (null|{length: number})\\n\" + \"required: string\");\n}",
    "begin_line": 11255,
    "end_line": 11267,
    "comment": "",
    "child_ranges": [
      "(line 11256,col 5)-(line 11266,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCatchExpression1()",
    "snippet": "public void testCatchExpression1() throws Exception {\n  testTypes(\"function fn() {\" + \"  \" + \"  var out \u003d 0;\"+ \"  try {\\n\"+ \"    foo();\\n\"+ \"  } catch ( e) {\\n\"+ \"    out \u003d e;\"+ \"  }\"+ \"}\\n\",\"assignment\\n\" + \"found   : string\\n\" + \"required: number\");\n}",
    "begin_line": 11269,
    "end_line": 11283,
    "comment": "",
    "child_ranges": [
      "(line 11270,col 5)-(line 11282,col 28)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testCatchExpression2()",
    "snippet": "public void testCatchExpression2() throws Exception {\n  testTypes(\"function fn() {\" + \"  \" + \"  var out \u003d 0;\"+ \"  \"+ \"  var e;\"+ \"  try {\\n\"+ \"    foo();\\n\"+ \"  } catch (e) {\\n\"+ \"    out \u003d e;\"+ \"  }\"+ \"}\\n\");\n}",
    "begin_line": 11285,
    "end_line": 11298,
    "comment": "",
    "child_ranges": [
      "(line 11286,col 5)-(line 11297,col 15)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterized1()",
    "snippet": "public void testParameterized1() throws Exception {\n  testTypes(\"\" + \"var arr1 \u003d [];\\n\" + \"\"+ \"var arr2 \u003d [];\\n\"+ \"arr1 \u003d arr2;\",\"assignment\\n\" + \"found   : Array.\u003cnumber\u003e\\n\" + \"required: Array.\u003cstring\u003e\");\n}",
    "begin_line": 11300,
    "end_line": 11310,
    "comment": "",
    "child_ranges": [
      "(line 11301,col 5)-(line 11309,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterized2()",
    "snippet": "public void testParameterized2() throws Exception {\n  testTypes(\"\" + \"var arr1 \u003d ([]);\\n\",\"initializing variable\\n\" + \"found   : Array.\u003cnumber\u003e\\n\" + \"required: Array.\u003cstring\u003e\");\n}",
    "begin_line": 11312,
    "end_line": 11319,
    "comment": "",
    "child_ranges": [
      "(line 11313,col 5)-(line 11318,col 36)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterized3()",
    "snippet": "public void testParameterized3() throws Exception {\n  testTypes(\"\" + \"var arr1 \u003d ([]);\\n\",\"initializing variable\\n\" + \"found   : Array.\u003cnumber\u003e\\n\" + \"required: (Array.\u003cstring\u003e|null)\");\n}",
    "begin_line": 11321,
    "end_line": 11328,
    "comment": "",
    "child_ranges": [
      "(line 11322,col 5)-(line 11327,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterized4()",
    "snippet": "public void testParameterized4() throws Exception {\n  testTypes(\"\" + \"var arr1 \u003d [];\\n\" + \"\"+ \"var arr2 \u003d arr1;\\n\",\"initializing variable\\n\" + \"found   : (Array.\u003cstring\u003e|null)\\n\" + \"required: (Array.\u003cnumber\u003e|null)\");\n}",
    "begin_line": 11330,
    "end_line": 11339,
    "comment": "",
    "child_ranges": [
      "(line 11331,col 5)-(line 11338,col 43)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterized5()",
    "snippet": "public void testParameterized5() throws Exception {\n  testTypes(\"\\n\"+ \"var some \u003d function(obj) {\"+ \"  for (var key in obj) if (obj[key]) return true;\"+ \"};\"+ \" function f() { return []; }\"+ \" function g() { return []; }\"+ \"some(f());\\n\"+ \"some(g());\\n\");\n}",
    "begin_line": 11341,
    "end_line": 11355,
    "comment": "",
    "child_ranges": [
      "(line 11342,col 5)-(line 11354,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testParameterizedTypeSubtypes2()",
    "snippet": "public void testParameterizedTypeSubtypes2() throws Exception {\n  JSType arrayOfNumber\u003dcreateParameterizedType(ARRAY_TYPE,NUMBER_TYPE);\n  JSType arrayOfString\u003dcreateParameterizedType(ARRAY_TYPE,STRING_TYPE);\n  assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber,NULL_VOID)));\n}",
    "begin_line": 11357,
    "end_line": 11364,
    "comment": "",
    "child_ranges": [
      "(line 11358,col 5)-(line 11359,col 33)",
      "(line 11360,col 5)-(line 11361,col 33)",
      "(line 11362,col 5)-(line 11362,col 84)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String)",
    "snippet": "private void testTypes(String js) throws Exception {\n  testTypes(js,(String)null);\n}",
    "begin_line": 11366,
    "end_line": 11368,
    "comment": "",
    "child_ranges": [
      "(line 11367,col 5)-(line 11367,col 33)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String)",
    "snippet": "private void testTypes(String js,String description) throws Exception {\n  testTypes(js,description,false);\n}",
    "begin_line": 11370,
    "end_line": 11372,
    "comment": "",
    "child_ranges": [
      "(line 11371,col 5)-(line 11371,col 38)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String, DiagnosticType)",
    "snippet": "private void testTypes(String js,DiagnosticType type) throws Exception {\n  testTypes(js,type.format(),false);\n}",
    "begin_line": 11374,
    "end_line": 11376,
    "comment": "",
    "child_ranges": [
      "(line 11375,col 5)-(line 11375,col 40)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosureTypes(java.lang.String, java.lang.String)",
    "snippet": "private void testClosureTypes(String js,String description) throws Exception {\n  testClosureTypesMultipleWarnings(js,description \u003d\u003d null ? null : Lists.newArrayList(description));\n}",
    "begin_line": 11378,
    "end_line": 11382,
    "comment": "",
    "child_ranges": [
      "(line 11380,col 5)-(line 11381,col 70)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testClosureTypesMultipleWarnings(java.lang.String, java.util.List\u003cjava.lang.String\u003e)",
    "snippet": "private void testClosureTypesMultipleWarnings(String js,List\u003cString\u003e descriptions) throws Exception {\n  Node n\u003dcompiler.parseTestCode(js);\n  Node externs\u003dnew Node(Token.BLOCK);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externs,n);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  assertEquals(\"parsing error: \" + Joiner.on(\", \").join(compiler.getErrors()),0,compiler.getErrorCount());\n  new ProcessClosurePrimitives(compiler,null,CheckLevel.ERROR).process(null,n);\n  CodingConvention convention\u003dcompiler.getCodingConvention();\n  new TypeCheck(compiler,new ClosureReverseAbstractInterpreter(convention,registry).append(new SemanticReverseAbstractInterpreter(convention,registry)).getFirst(),registry).processForTesting(null,n);\n  assertEquals(\"unexpected error(s) : \" + Joiner.on(\", \").join(compiler.getErrors()),0,compiler.getErrorCount());\n  if (descriptions \u003d\u003d null) {\n    assertEquals(\"unexpected warning(s) : \" + Joiner.on(\", \").join(compiler.getWarnings()),0,compiler.getWarningCount());\n  }\n else {\n    assertEquals(\"unexpected warning(s) : \" + Joiner.on(\", \").join(compiler.getWarnings()),descriptions.size(),compiler.getWarningCount());\n    Set\u003cString\u003e actualWarningDescriptions\u003dSets.newHashSet();\n    for (int i\u003d0; i \u003c descriptions.size(); i++) {\n      actualWarningDescriptions.add(compiler.getWarnings()[i].description);\n    }\n    assertEquals(Sets.newHashSet(descriptions),actualWarningDescriptions);\n  }\n}",
    "begin_line": 11384,
    "end_line": 11431,
    "comment": "",
    "child_ranges": [
      "(line 11386,col 5)-(line 11386,col 40)",
      "(line 11387,col 5)-(line 11387,col 41)",
      "(line 11388,col 5)-(line 11388,col 61)",
      "(line 11389,col 5)-(line 11389,col 46)",
      "(line 11391,col 5)-(line 11393,col 37)",
      "(line 11396,col 5)-(line 11397,col 26)",
      "(line 11399,col 5)-(line 11399,col 65)",
      "(line 11400,col 5)-(line 11407,col 36)",
      "(line 11409,col 5)-(line 11412,col 37)",
      "(line 11414,col 5)-(line 11430,col 5)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, boolean)",
    "snippet": "void testTypes(String js,String description,boolean isError) throws Exception {\n  testTypes(DEFAULT_EXTERNS,js,description,isError);\n}",
    "begin_line": 11433,
    "end_line": 11436,
    "comment": "",
    "child_ranges": [
      "(line 11435,col 5)-(line 11435,col 57)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String, java.lang.String, boolean)",
    "snippet": "void testTypes(String externs,String js,String description,boolean isError) throws Exception {\n  Node n\u003dparseAndTypeCheck(externs,js);\n  JSError[] errors\u003dcompiler.getErrors();\n  if (description !\u003d null \u0026\u0026 isError) {\n    assertTrue(\"expected an error\",errors.length \u003e 0);\n    assertEquals(description,errors[0].description);\n    errors\u003dArrays.asList(errors).subList(1,errors.length).toArray(new JSError[errors.length - 1]);\n  }\n  if (errors.length \u003e 0) {\n    fail(\"unexpected error(s):\\n\" + Joiner.on(\"\\n\").join(errors));\n  }\n  JSError[] warnings\u003dcompiler.getWarnings();\n  if (description !\u003d null \u0026\u0026 !isError) {\n    assertTrue(\"expected a warning\",warnings.length \u003e 0);\n    assertEquals(description,warnings[0].description);\n    warnings\u003dArrays.asList(warnings).subList(1,warnings.length).toArray(new JSError[warnings.length - 1]);\n  }\n  if (warnings.length \u003e 0) {\n    fail(\"unexpected warnings(s):\\n\" + Joiner.on(\"\\n\").join(warnings));\n  }\n}",
    "begin_line": 11438,
    "end_line": 11463,
    "comment": "",
    "child_ranges": [
      "(line 11440,col 5)-(line 11440,col 44)",
      "(line 11442,col 5)-(line 11442,col 44)",
      "(line 11443,col 5)-(line 11448,col 5)",
      "(line 11449,col 5)-(line 11451,col 5)",
      "(line 11453,col 5)-(line 11453,col 48)",
      "(line 11454,col 5)-(line 11459,col 5)",
      "(line 11460,col 5)-(line 11462,col 5)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String)",
    "snippet": "private Node parseAndTypeCheck(String js){\n  return parseAndTypeCheck(DEFAULT_EXTERNS,js);\n}",
    "begin_line": 11468,
    "end_line": 11470,
    "comment": "/** \n * Parses and type checks the JavaScript code.\n */\n",
    "child_ranges": [
      "(line 11469,col 5)-(line 11469,col 50)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.parseAndTypeCheck(java.lang.String, java.lang.String)",
    "snippet": "private Node parseAndTypeCheck(String externs,String js){\n  return parseAndTypeCheckWithScope(externs,js).root;\n}",
    "begin_line": 11472,
    "end_line": 11474,
    "comment": "",
    "child_ranges": [
      "(line 11473,col 5)-(line 11473,col 56)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String)",
    "snippet": "private TypeCheckResult parseAndTypeCheckWithScope(String js){\n  return parseAndTypeCheckWithScope(DEFAULT_EXTERNS,js);\n}",
    "begin_line": 11480,
    "end_line": 11482,
    "comment": "/** \n * Parses and type checks the JavaScript code and returns the Scope used whilst type checking.\n */\n",
    "child_ranges": [
      "(line 11481,col 5)-(line 11481,col 59)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(java.lang.String, java.lang.String)",
    "snippet": "private TypeCheckResult parseAndTypeCheckWithScope(String externs,String js){\n  compiler.init(Lists.newArrayList(SourceFile.fromCode(\"[externs]\",externs)),Lists.newArrayList(SourceFile.fromCode(\"[testcode]\",js)),compiler.getOptions());\n  Node n\u003dcompiler.getInput(new InputId(\"[testcode]\")).getAstRoot(compiler);\n  Node externsNode\u003dcompiler.getInput(new InputId(\"[externs]\")).getAstRoot(compiler);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externsNode,n);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  assertEquals(\"parsing error: \" + Joiner.on(\", \").join(compiler.getErrors()),0,compiler.getErrorCount());\n  Scope s\u003dmakeTypeCheck().processForTesting(externsNode,n);\n  return new TypeCheckResult(n,s);\n}",
    "begin_line": 11484,
    "end_line": 11503,
    "comment": "",
    "child_ranges": [
      "(line 11486,col 5)-(line 11489,col 31)",
      "(line 11491,col 5)-(line 11491,col 79)",
      "(line 11492,col 5)-(line 11493,col 30)",
      "(line 11494,col 5)-(line 11494,col 65)",
      "(line 11495,col 5)-(line 11495,col 46)",
      "(line 11497,col 5)-(line 11499,col 37)",
      "(line 11501,col 5)-(line 11501,col 64)",
      "(line 11502,col 5)-(line 11502,col 37)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.typeCheck(Node)",
    "snippet": "private Node typeCheck(Node n){\n  Node externsNode\u003dnew Node(Token.BLOCK);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externsNode,n);\n  externAndJsRoot.setIsSyntheticBlock(true);\n  makeTypeCheck().processForTesting(null,n);\n  return n;\n}",
    "begin_line": 11505,
    "end_line": 11512,
    "comment": "",
    "child_ranges": [
      "(line 11506,col 5)-(line 11506,col 45)",
      "(line 11507,col 5)-(line 11507,col 65)",
      "(line 11508,col 5)-(line 11508,col 46)",
      "(line 11510,col 5)-(line 11510,col 47)",
      "(line 11511,col 5)-(line 11511,col 13)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.makeTypeCheck()",
    "snippet": "private TypeCheck makeTypeCheck(){\n  return new TypeCheck(compiler,new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),registry),registry,reportMissingOverrides,CheckLevel.OFF);\n}",
    "begin_line": 11514,
    "end_line": 11522,
    "comment": "",
    "child_ranges": [
      "(line 11515,col 5)-(line 11521,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.testTypes(java.lang.String, java.lang.String[])",
    "snippet": "void testTypes(String js,String[] warnings) throws Exception {\n  Node n\u003dcompiler.parseTestCode(js);\n  assertEquals(0,compiler.getErrorCount());\n  Node externsNode\u003dnew Node(Token.BLOCK);\n  Node externAndJsRoot\u003dnew Node(Token.BLOCK,externsNode,n);\n  makeTypeCheck().processForTesting(null,n);\n  assertEquals(0,compiler.getErrorCount());\n  if (warnings !\u003d null) {\n    assertEquals(warnings.length,compiler.getWarningCount());\n    JSError[] messages\u003dcompiler.getWarnings();\n    for (int i\u003d0; i \u003c warnings.length \u0026\u0026 i \u003c compiler.getWarningCount(); i++) {\n      assertEquals(warnings[i],messages[i].description);\n    }\n  }\n else {\n    assertEquals(0,compiler.getWarningCount());\n  }\n}",
    "begin_line": 11524,
    "end_line": 11542,
    "comment": "",
    "child_ranges": [
      "(line 11525,col 5)-(line 11525,col 40)",
      "(line 11526,col 5)-(line 11526,col 46)",
      "(line 11527,col 5)-(line 11527,col 45)",
      "(line 11528,col 5)-(line 11528,col 65)",
      "(line 11530,col 5)-(line 11530,col 47)",
      "(line 11531,col 5)-(line 11531,col 46)",
      "(line 11532,col 5)-(line 11541,col 5)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.suppressMissingProperty(java.lang.String)",
    "snippet": "String suppressMissingProperty(String... props){\n  String result\u003d\"function dummy(x) { \";\n  for (  String prop : props) {\n    result+\u003d\"x.\" + prop + \" \u003d 3;\";\n  }\n  return result + \"}\";\n}",
    "begin_line": 11544,
    "end_line": 11550,
    "comment": "",
    "child_ranges": [
      "(line 11545,col 5)-(line 11545,col 43)",
      "(line 11546,col 5)-(line 11548,col 5)",
      "(line 11549,col 5)-(line 11549,col 24)"
    ]
  },
  {
    "class_name": "com.googlescript.jscomp.TypeCheckTest",
    "child_classes": [],
    "src_path": "com/google/javascript/jscomp/TypeCheckTest.java",
    "signature": "com.googlescript.jscomp.TypeCheckTest.TypeCheckResult(Node, Scope)",
    "snippet": "private TypeCheckResult(Node root,Scope scope){\n  this.root\u003droot;\n  this.scope\u003dscope;\n}",
    "begin_line": 11556,
    "end_line": 11559,
    "comment": "",
    "child_ranges": [
      "(line 11557,col 7)-(line 11557,col 23)",
      "(line 11558,col 7)-(line 11558,col 25)"
    ]
  }
]