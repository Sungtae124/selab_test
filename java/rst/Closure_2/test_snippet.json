[
    [
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.testInitialTypingScope()",
            "snippet": "public void testInitialTypingScope() {\nScope s = new TypedScopeCreator(compiler,",
            "begin_line": 52,
            "end_line": 53,
            "comment": "\n * Tests {@link TypeCheck}.\n *\n ",
            "child_ranges": []
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.testNameNode(String name)",
            "snippet": "private JSType testNameNode(String name) {\nNode node = Node.newString(Token.NAME, name);\nNode parent = new Node(Token.SCRIPT, node);\nparent.setInputId(new InputId(\"code\"));\n\nNode externs = new Node(Token.SCRIPT);\nexterns.setInputId(new InputId(\"externs\"));\n\nNode externAndJsRoot = new Node(Token.BLOCK, externs, parent);\nexternAndJsRoot.setIsSyntheticBlock(true);\n\nmakeTypeCheck().processForTesting(null, parent);\nreturn node.getJSType();\n}",
            "begin_line": 7206,
            "end_line": 7219,
            "comment": "  \n   * Type checks a NAME node and retrieve its type.\n   ",
            "child_ranges": [
                "(line 7207,col 5)-(line 7207,col 49)",
                "(line 7208,col 5)-(line 7208,col 47)",
                "(line 7209,col 5)-(line 7209,col 43)",
                "(line 7210,col 0)-(line 7210,col 0)",
                "(line 7211,col 5)-(line 7211,col 42)",
                "(line 7212,col 5)-(line 7212,col 47)",
                "(line 7213,col 0)-(line 7213,col 0)",
                "(line 7214,col 5)-(line 7214,col 66)",
                "(line 7215,col 5)-(line 7215,col 46)",
                "(line 7216,col 0)-(line 7216,col 0)",
                "(line 7217,col 5)-(line 7217,col 52)",
                "(line 7218,col 5)-(line 7218,col 28)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.getInstanceType(Node js1Node)",
            "snippet": "private ObjectType getInstanceType(Node js1Node) {\nJSType type = js1Node.getFirstChild().getJSType();\nassertNotNull(type);\nassertTrue(type instanceof FunctionType);\nFunctionType functionType = (FunctionType) type;\nassertTrue(functionType.isConstructor());\nreturn functionType.getInstanceType();\n}",
            "begin_line": 9880,
            "end_line": 9887,
            "comment": "     OK, and it should change if NamedTypes ever go away.",
            "child_ranges": [
                "(line 9881,col 5)-(line 9881,col 54)",
                "(line 9882,col 5)-(line 9882,col 24)",
                "(line 9883,col 5)-(line 9883,col 45)",
                "(line 9884,col 5)-(line 9884,col 52)",
                "(line 9885,col 5)-(line 9885,col 45)",
                "(line 9886,col 5)-(line 9886,col 42)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.testAddSingletonGetter()",
            "snippet": "public void testAddSingletonGetter() {\nNode n = parseAndTypeCheck(",
            "begin_line": 10438,
            "end_line": 10439,
            "comment": "     check the type of afoo when referenced",
            "child_ranges": []
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(String js)",
            "snippet": "private Node parseAndTypeCheck(String js) {\nreturn parseAndTypeCheck(DEFAULT_EXTERNS, js);\n}",
            "begin_line": 11468,
            "end_line": 11470,
            "comment": "  \n   * Parses and type checks the JavaScript code.\n   ",
            "child_ranges": [
                "(line 11469,col 5)-(line 11469,col 50)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheck(String externs, String js)",
            "snippet": "private Node parseAndTypeCheck(String externs, String js) {\nreturn parseAndTypeCheckWithScope(externs, js).root;\n}",
            "begin_line": 11472,
            "end_line": 11474,
            "comment": "  \n   * Parses and type checks the JavaScript code.\n   ",
            "child_ranges": [
                "(line 11473,col 5)-(line 11473,col 56)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.parseAndTypeCheckWithScope(String js)",
            "snippet": "private TypeCheckResult parseAndTypeCheckWithScope(String js) {\nreturn parseAndTypeCheckWithScope(DEFAULT_EXTERNS, js);\n}",
            "begin_line": 11480,
            "end_line": 11482,
            "comment": "  \n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
            "child_ranges": [
                "(line 11481,col 5)-(line 11481,col 59)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.typeCheck(Node n)",
            "snippet": "private Node typeCheck(Node n) {\nNode externsNode = new Node(Token.BLOCK);\nNode externAndJsRoot = new Node(Token.BLOCK, externsNode, n);\nexternAndJsRoot.setIsSyntheticBlock(true);\n\nmakeTypeCheck().processForTesting(null, n);\nreturn n;\n}",
            "begin_line": 11505,
            "end_line": 11512,
            "comment": "  \n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
            "child_ranges": [
                "(line 11506,col 5)-(line 11506,col 45)",
                "(line 11507,col 5)-(line 11507,col 65)",
                "(line 11508,col 5)-(line 11508,col 46)",
                "(line 11509,col 0)-(line 11509,col 0)",
                "(line 11510,col 5)-(line 11510,col 47)",
                "(line 11511,col 5)-(line 11511,col 13)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.makeTypeCheck()",
            "snippet": "private TypeCheck makeTypeCheck() {\nreturn new TypeCheck(",
            "begin_line": 11514,
            "end_line": 11515,
            "comment": "  \n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
            "child_ranges": []
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.suppressMissingProperty(String ... props)",
            "snippet": "String suppressMissingProperty(String ... props) {\nString result = \"function dummy(x) { \";\nfor (String prop : props) {",
            "begin_line": 11544,
            "end_line": 11546,
            "comment": "  \n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
            "child_ranges": [
                "(line 11545,col 5)-(line 11545,col 43)"
            ]
        },
        {
            "class_name": "com.google.javascript.jscomp.TypeCheckTest",
            "child_classes": [],
            "src_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "signature": "com.google.javascript.jscomp.TypeCheckTest.TypeCheckResult(Node root, Scope scope)",
            "snippet": "private TypeCheckResult(Node root, Scope scope) {\nthis.root = root;\nthis.scope = scope;\n}",
            "begin_line": 11556,
            "end_line": 11559,
            "comment": "  \n   * Parses and type checks the JavaScript code and returns the Scope used\n   * whilst type checking.\n   ",
            "child_ranges": [
                "(line 11557,col 7)-(line 11557,col 23)",
                "(line 11558,col 7)-(line 11558,col 25)"
            ]
        }
    ]
]