[
    [
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.StringUtilsTest(String name)",
            "snippet": "public StringUtilsTest(String name) {\nsuper(name);\n}",
            "begin_line": 95,
            "end_line": 97,
            "comment": "\n * Unit tests {@link org.apache.commons.lang3.StringUtils}.\n *\n * @author Apache Software Foundation\n * @author Daniel L. Rall\n * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Phil Steitz\n * @author Gary D. Gregory\n * @author Scott Johnson\n * @author Al Chou\n * @version $Id$\n ",
            "child_ranges": [
                "(line 96,col 9)-(line 96,col 20)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.main(String[] args)",
            "snippet": "public static void main(String[] args) {\nTestRunner.run(suite());\n}",
            "begin_line": 99,
            "end_line": 101,
            "comment": "\n * Unit tests {@link org.apache.commons.lang3.StringUtils}.\n *\n * @author Apache Software Foundation\n * @author Daniel L. Rall\n * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Phil Steitz\n * @author Gary D. Gregory\n * @author Scott Johnson\n * @author Al Chou\n * @version $Id$\n ",
            "child_ranges": [
                "(line 100,col 9)-(line 100,col 32)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.suite()",
            "snippet": "public static Test suite() {\nTestSuite suite = new TestSuite(StringUtilsTest.class);\nsuite.setName(\"StringUtilsTest Tests\");\nreturn suite;\n}",
            "begin_line": 103,
            "end_line": 107,
            "comment": "\n * Unit tests {@link org.apache.commons.lang3.StringUtils}.\n *\n * @author Apache Software Foundation\n * @author Daniel L. Rall\n * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Phil Steitz\n * @author Gary D. Gregory\n * @author Scott Johnson\n * @author Al Chou\n * @version $Id$\n ",
            "child_ranges": [
                "(line 104,col 9)-(line 104,col 63)",
                "(line 105,col 9)-(line 105,col 47)",
                "(line 106,col 9)-(line 106,col 21)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
            "snippet": "public void testConstructor() {\nassertNotNull(new StringUtils());\nConstructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\nassertEquals(1, cons.length);\nassertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\nassertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\nassertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n}",
            "begin_line": 120,
            "end_line": 127,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 121,col 9)-(line 121,col 41)",
                "(line 122,col 9)-(line 122,col 76)",
                "(line 123,col 9)-(line 123,col 37)",
                "(line 124,col 9)-(line 124,col 70)",
                "(line 125,col 9)-(line 125,col 80)",
                "(line 126,col 9)-(line 126,col 80)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testCaseFunctions()",
            "snippet": "public void testCaseFunctions() {\nassertEquals(null, StringUtils.upperCase(null));\nassertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\nassertEquals(null, StringUtils.lowerCase(null));\nassertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\nassertEquals(null, StringUtils.capitalize(null));\nassertEquals(null, StringUtils.uncapitalize(null));\n\nassertEquals(\"capitalize(empty-string) failed\",",
            "begin_line": 130,
            "end_line": 138,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 131,col 9)-(line 131,col 56)",
                "(line 132,col 9)-(line 132,col 72)",
                "(line 133,col 9)-(line 133,col 56)",
                "(line 134,col 9)-(line 134,col 72)",
                "(line 135,col 9)-(line 135,col 57)",
                "(line 136,col 9)-(line 136,col 59)",
                "(line 137,col 0)-(line 137,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
            "snippet": "public void testSwapCase_String() {\nassertEquals(null, StringUtils.swapCase(null));\nassertEquals(\"\", StringUtils.swapCase(\"\"));\nassertEquals(\"  \", StringUtils.swapCase(\"  \"));\n\nassertEquals(\"i\", WordUtils.swapCase(\"I\") );\nassertEquals(\"I\", WordUtils.swapCase(\"i\") );\nassertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\nassertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\nassertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\nassertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n\nString test = \"This String contains a TitleCase character: \\u01C8\";\nString expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\nassertEquals(expect, WordUtils.swapCase(test));\n}",
            "begin_line": 180,
            "end_line": 195,
            "comment": "         reflection type of tests: One word.",
            "child_ranges": [
                "(line 181,col 9)-(line 181,col 55)",
                "(line 182,col 9)-(line 182,col 51)",
                "(line 183,col 9)-(line 183,col 55)",
                "(line 184,col 0)-(line 184,col 8)",
                "(line 185,col 9)-(line 185,col 52)",
                "(line 186,col 9)-(line 186,col 52)",
                "(line 187,col 9)-(line 187,col 78)",
                "(line 188,col 9)-(line 188,col 78)",
                "(line 189,col 9)-(line 189,col 78)",
                "(line 190,col 9)-(line 190,col 78)",
                "(line 191,col 0)-(line 191,col 8)",
                "(line 192,col 9)-(line 192,col 75)",
                "(line 193,col 9)-(line 193,col 77)",
                "(line 194,col 9)-(line 194,col 55)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
            "snippet": "public void testJoin_Objectarray() {\nassertEquals(null, StringUtils.join(null));\nassertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\nassertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\nassertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\nassertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\nassertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\nassertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n}",
            "begin_line": 198,
            "end_line": 206,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 199,col 9)-(line 199,col 51)",
                "(line 200,col 9)-(line 200,col 61)",
                "(line 201,col 9)-(line 201,col 60)",
                "(line 202,col 9)-(line 202,col 76)",
                "(line 203,col 9)-(line 203,col 74)",
                "(line 204,col 9)-(line 204,col 64)",
                "(line 205,col 9)-(line 205,col 64)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar()",
            "snippet": "public void testJoin_ArrayChar() {\nassertEquals(null, StringUtils.join((Object[]) null, ','));\nassertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\nassertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\nassertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\nassertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\nassertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\nassertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\nassertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\nassertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\nassertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n}",
            "begin_line": 208,
            "end_line": 220,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 209,col 9)-(line 209,col 67)",
                "(line 210,col 9)-(line 210,col 83)",
                "(line 211,col 9)-(line 211,col 77)",
                "(line 212,col 9)-(line 212,col 82)",
                "(line 213,col 9)-(line 213,col 81)",
                "(line 214,col 0)-(line 214,col 0)",
                "(line 215,col 9)-(line 215,col 97)",
                "(line 216,col 9)-(line 216,col 74)",
                "(line 217,col 9)-(line 217,col 76)",
                "(line 218,col 9)-(line 218,col 72)",
                "(line 219,col 9)-(line 219,col 71)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
            "snippet": "public void testJoin_ArrayString() {\nassertEquals(null, StringUtils.join((Object[]) null, null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n\nassertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n\nassertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\nassertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\nassertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\nassertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\nassertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\nassertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\nassertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\nassertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\nassertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\nassertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\nassertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\nassertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n}",
            "begin_line": 222,
            "end_line": 243,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 223,col 9)-(line 223,col 68)",
                "(line 224,col 9)-(line 224,col 74)",
                "(line 225,col 9)-(line 225,col 72)",
                "(line 226,col 0)-(line 226,col 8)",
                "(line 227,col 9)-(line 227,col 66)",
                "(line 228,col 0)-(line 228,col 8)",
                "(line 229,col 9)-(line 229,col 67)",
                "(line 230,col 9)-(line 230,col 65)",
                "(line 231,col 9)-(line 231,col 72)",
                "(line 232,col 0)-(line 232,col 0)",
                "(line 233,col 9)-(line 233,col 73)",
                "(line 234,col 9)-(line 234,col 77)",
                "(line 235,col 9)-(line 235,col 76)",
                "(line 236,col 0)-(line 236,col 0)",
                "(line 237,col 9)-(line 237,col 97)",
                "(line 238,col 9)-(line 238,col 95)",
                "(line 239,col 9)-(line 239,col 74)",
                "(line 240,col 9)-(line 240,col 76)",
                "(line 241,col 9)-(line 241,col 72)",
                "(line 242,col 9)-(line 242,col 71)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
            "snippet": "public void testJoin_IteratorChar() {\nassertEquals(null, StringUtils.join((Iterator<?>) null, ','));\nassertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\nassertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n}",
            "begin_line": 245,
            "end_line": 251,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 246,col 9)-(line 246,col 70)",
                "(line 247,col 9)-(line 247,col 109)",
                "(line 248,col 9)-(line 248,col 102)",
                "(line 249,col 9)-(line 249,col 103)",
                "(line 250,col 9)-(line 250,col 92)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
            "snippet": "public void testJoin_IteratorString() {\nassertEquals(null, StringUtils.join((Iterator<?>) null, null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\nassertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n\nassertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n}",
            "begin_line": 253,
            "end_line": 267,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 254,col 9)-(line 254,col 71)",
                "(line 255,col 9)-(line 255,col 100)",
                "(line 256,col 9)-(line 256,col 98)",
                "(line 257,col 9)-(line 257,col 92)",
                "(line 258,col 9)-(line 258,col 93)",
                "(line 259,col 0)-(line 259,col 0)",
                "(line 260,col 9)-(line 260,col 92)",
                "(line 261,col 0)-(line 261,col 8)",
                "(line 262,col 9)-(line 262,col 93)",
                "(line 263,col 9)-(line 263,col 91)",
                "(line 264,col 9)-(line 264,col 98)",
                "(line 265,col 0)-(line 265,col 8)",
                "(line 266,col 9)-(line 266,col 99)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
            "snippet": "public void testJoin_IterableChar() {\nassertEquals(null, StringUtils.join((Iterable<?>) null, ','));\nassertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\nassertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n}",
            "begin_line": 269,
            "end_line": 275,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 270,col 9)-(line 270,col 70)",
                "(line 271,col 9)-(line 271,col 98)",
                "(line 272,col 9)-(line 272,col 91)",
                "(line 273,col 9)-(line 273,col 92)",
                "(line 274,col 9)-(line 274,col 81)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
            "snippet": "public void testJoin_IterableString() {\nassertEquals(null, StringUtils.join((Iterable<?>) null, null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\nassertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\nassertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\nassertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\nassertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\nassertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n}",
            "begin_line": 277,
            "end_line": 291,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 278,col 9)-(line 278,col 71)",
                "(line 279,col 9)-(line 279,col 89)",
                "(line 280,col 9)-(line 280,col 87)",
                "(line 281,col 9)-(line 281,col 81)",
                "(line 282,col 9)-(line 282,col 82)",
                "(line 283,col 0)-(line 283,col 0)",
                "(line 284,col 9)-(line 284,col 81)",
                "(line 285,col 0)-(line 285,col 0)",
                "(line 286,col 9)-(line 286,col 82)",
                "(line 287,col 9)-(line 287,col 80)",
                "(line 288,col 9)-(line 288,col 87)",
                "(line 289,col 0)-(line 289,col 0)",
                "(line 290,col 9)-(line 290,col 88)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
            "snippet": "public void testSplit_String() {\nassertEquals(null, StringUtils.split(null));\nassertEquals(0, StringUtils.split(\"\").length);\n\nString str = \"a b  .c\";\nString[] res = StringUtils.split(str);\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\".c\", res[2]);\n\nstr = \" a \";\nres = StringUtils.split(str);\nassertEquals(1, res.length);\nassertEquals(\"a\", res[0]);\n\nstr = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\nres = StringUtils.split(str);\nassertEquals(2, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);\n}",
            "begin_line": 293,
            "end_line": 314,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 294,col 9)-(line 294,col 52)",
                "(line 295,col 9)-(line 295,col 54)",
                "(line 296,col 0)-(line 296,col 8)",
                "(line 297,col 9)-(line 297,col 31)",
                "(line 298,col 9)-(line 298,col 46)",
                "(line 299,col 9)-(line 299,col 36)",
                "(line 300,col 9)-(line 300,col 34)",
                "(line 301,col 9)-(line 301,col 34)",
                "(line 302,col 9)-(line 302,col 35)",
                "(line 303,col 0)-(line 303,col 8)",
                "(line 304,col 9)-(line 304,col 20)",
                "(line 305,col 9)-(line 305,col 37)",
                "(line 306,col 9)-(line 306,col 36)",
                "(line 307,col 9)-(line 307,col 34)",
                "(line 308,col 0)-(line 308,col 8)",
                "(line 309,col 9)-(line 309,col 60)",
                "(line 310,col 9)-(line 310,col 37)",
                "(line 311,col 9)-(line 311,col 36)",
                "(line 312,col 9)-(line 312,col 34)",
                "(line 313,col 9)-(line 313,col 80)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
            "snippet": "public void testSplit_StringChar() {\nassertEquals(null, StringUtils.split(null, '.'));\nassertEquals(0, StringUtils.split(\"\", '.').length);\n\nString str = \"a.b.. c\";\nString[] res = StringUtils.split(str, '.');\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\" c\", res[2]);\n\nstr = \".a.\";\nres = StringUtils.split(str, '.');\nassertEquals(1, res.length);\nassertEquals(\"a\", res[0]);\n\nstr = \"a b c\";\nres = StringUtils.split(str,' ');\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\"c\", res[2]);\n}",
            "begin_line": 316,
            "end_line": 338,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 317,col 9)-(line 317,col 57)",
                "(line 318,col 9)-(line 318,col 59)",
                "(line 319,col 0)-(line 319,col 0)",
                "(line 320,col 9)-(line 320,col 31)",
                "(line 321,col 9)-(line 321,col 51)",
                "(line 322,col 9)-(line 322,col 36)",
                "(line 323,col 9)-(line 323,col 34)",
                "(line 324,col 9)-(line 324,col 34)",
                "(line 325,col 9)-(line 325,col 35)",
                "(line 326,col 0)-(line 326,col 12)",
                "(line 327,col 9)-(line 327,col 20)",
                "(line 328,col 9)-(line 328,col 42)",
                "(line 329,col 9)-(line 329,col 36)",
                "(line 330,col 9)-(line 330,col 34)",
                "(line 331,col 0)-(line 331,col 8)",
                "(line 332,col 9)-(line 332,col 22)",
                "(line 333,col 9)-(line 333,col 41)",
                "(line 334,col 9)-(line 334,col 36)",
                "(line 335,col 9)-(line 335,col 34)",
                "(line 336,col 9)-(line 336,col 34)",
                "(line 337,col 9)-(line 337,col 34)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
            "snippet": "public void testSplit_StringString_StringStringInt() {\nassertEquals(null, StringUtils.split(null, \".\"));\nassertEquals(null, StringUtils.split(null, \".\", 3));\n\nassertEquals(0, StringUtils.split(\"\", \".\").length);\nassertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n\ninnerTestSplit('.', \".\", ' ');\ninnerTestSplit('.', \".\", ',');\ninnerTestSplit('.', \".,\", 'x');\nfor (int i = 0; i < WHITESPACE.length(); i++) {",
            "begin_line": 340,
            "end_line": 350,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 341,col 9)-(line 341,col 57)",
                "(line 342,col 9)-(line 342,col 60)",
                "(line 343,col 0)-(line 343,col 8)",
                "(line 344,col 9)-(line 344,col 59)",
                "(line 345,col 9)-(line 345,col 62)",
                "(line 346,col 0)-(line 346,col 8)",
                "(line 347,col 9)-(line 347,col 38)",
                "(line 348,col 9)-(line 348,col 38)",
                "(line 349,col 9)-(line 349,col 39)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char separator, String sepStr, char noMatch)",
            "snippet": "private void innerTestSplit(char separator, String sepStr, char noMatch) {\nString msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +",
            "begin_line": 373,
            "end_line": 374,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
            "snippet": "public void testSplitByWholeString_StringStringBoolean() {\nassertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\nassertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\nString stringToSplitOnNulls = \"ab   de fg\" ;\nString[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\nString[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\nassertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\nfor ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {",
            "begin_line": 413,
            "end_line": 423,
            "comment": "         (str, sepStr)",
            "child_ranges": [
                "(line 414,col 9)-(line 414,col 78)",
                "(line 415,col 0)-(line 415,col 0)",
                "(line 416,col 9)-(line 416,col 80)",
                "(line 417,col 0)-(line 417,col 0)",
                "(line 418,col 9)-(line 418,col 52)",
                "(line 419,col 9)-(line 419,col 68)",
                "(line 420,col 0)-(line 420,col 0)",
                "(line 421,col 9)-(line 421,col 103)",
                "(line 422,col 9)-(line 422,col 86)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
            "snippet": "public void testSplitByWholeString_StringStringBooleanInt() {\nassertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\nassertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\nString stringToSplitOnNulls = \"ab   de fg\" ;\nString[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n//String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\nString[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\nassertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\nfor ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {",
            "begin_line": 444,
            "end_line": 455,
            "comment": "         (str, sepStr)",
            "child_ranges": [
                "(line 445,col 9)-(line 445,col 81)",
                "(line 446,col 0)-(line 446,col 0)",
                "(line 447,col 9)-(line 447,col 83)",
                "(line 448,col 0)-(line 448,col 0)",
                "(line 449,col 9)-(line 449,col 52)",
                "(line 450,col 9)-(line 450,col 65)",
                "(line 451,col 9)-(line 451,col 64)",
                "(line 452,col 0)-(line 452,col 0)",
                "(line 453,col 9)-(line 453,col 106)",
                "(line 454,col 9)-(line 454,col 86)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
            "snippet": "public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\nassertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\nassertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n// test whitespace",
            "begin_line": 470,
            "end_line": 475,
            "comment": "        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;",
            "child_ranges": [
                "(line 471,col 9)-(line 471,col 99)",
                "(line 472,col 0)-(line 472,col 0)",
                "(line 473,col 9)-(line 473,col 101)",
                "(line 474,col 0)-(line 474,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
            "snippet": "public void testSplitPreserveAllTokens_String() {\nassertEquals(null, StringUtils.splitPreserveAllTokens(null));\nassertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n\nString str = \"abc def\";\nString[] res = StringUtils.splitPreserveAllTokens(str);\nassertEquals(2, res.length);\nassertEquals(\"abc\", res[0]);\nassertEquals(\"def\", res[1]);\n\nstr = \"abc  def\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(3, res.length);\nassertEquals(\"abc\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"def\", res[2]);\n\nstr = \" abc \";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(3, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"abc\", res[1]);\nassertEquals(\"\", res[2]);\n\nstr = \"a b .c\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\".c\", res[2]);\n\nstr = \" a b .c\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"b\", res[2]);\nassertEquals(\".c\", res[3]);\n\nstr = \"a  b  .c\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(5, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"b\", res[2]);\nassertEquals(\"\", res[3]);\nassertEquals(\".c\", res[4]);\n\nstr = \" a  \";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"\", res[2]);\nassertEquals(\"\", res[3]);\n\nstr = \" a  b\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"\", res[2]);\nassertEquals(\"b\", res[3]);\n\nstr = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\nres = StringUtils.splitPreserveAllTokens(str);\nassertEquals(WHITESPACE.length() + 1, res.length);\nassertEquals(\"a\", res[0]);\nfor(int i = 1; i < WHITESPACE.length()-1; i++)",
            "begin_line": 516,
            "end_line": 584,
            "comment": "         test delimiter char with max",
            "child_ranges": [
                "(line 517,col 9)-(line 517,col 69)",
                "(line 518,col 9)-(line 518,col 71)",
                "(line 519,col 0)-(line 519,col 8)",
                "(line 520,col 9)-(line 520,col 31)",
                "(line 521,col 9)-(line 521,col 63)",
                "(line 522,col 9)-(line 522,col 36)",
                "(line 523,col 9)-(line 523,col 36)",
                "(line 524,col 9)-(line 524,col 36)",
                "(line 525,col 0)-(line 525,col 8)",
                "(line 526,col 9)-(line 526,col 25)",
                "(line 527,col 9)-(line 527,col 54)",
                "(line 528,col 9)-(line 528,col 36)",
                "(line 529,col 9)-(line 529,col 36)",
                "(line 530,col 9)-(line 530,col 33)",
                "(line 531,col 9)-(line 531,col 36)",
                "(line 532,col 0)-(line 532,col 8)",
                "(line 533,col 9)-(line 533,col 22)",
                "(line 534,col 9)-(line 534,col 54)",
                "(line 535,col 9)-(line 535,col 36)",
                "(line 536,col 9)-(line 536,col 33)",
                "(line 537,col 9)-(line 537,col 36)",
                "(line 538,col 9)-(line 538,col 33)",
                "(line 539,col 0)-(line 539,col 8)",
                "(line 540,col 9)-(line 540,col 23)",
                "(line 541,col 9)-(line 541,col 54)",
                "(line 542,col 9)-(line 542,col 36)",
                "(line 543,col 9)-(line 543,col 34)",
                "(line 544,col 9)-(line 544,col 34)",
                "(line 545,col 9)-(line 545,col 35)",
                "(line 546,col 0)-(line 546,col 8)",
                "(line 547,col 9)-(line 547,col 24)",
                "(line 548,col 9)-(line 548,col 54)",
                "(line 549,col 9)-(line 549,col 36)",
                "(line 550,col 9)-(line 550,col 33)",
                "(line 551,col 9)-(line 551,col 34)",
                "(line 552,col 9)-(line 552,col 34)",
                "(line 553,col 9)-(line 553,col 35)",
                "(line 554,col 0)-(line 554,col 8)",
                "(line 555,col 9)-(line 555,col 25)",
                "(line 556,col 9)-(line 556,col 54)",
                "(line 557,col 9)-(line 557,col 36)",
                "(line 558,col 9)-(line 558,col 34)",
                "(line 559,col 9)-(line 559,col 33)",
                "(line 560,col 9)-(line 560,col 34)",
                "(line 561,col 9)-(line 561,col 33)",
                "(line 562,col 9)-(line 562,col 35)",
                "(line 563,col 0)-(line 563,col 8)",
                "(line 564,col 9)-(line 564,col 21)",
                "(line 565,col 9)-(line 565,col 54)",
                "(line 566,col 9)-(line 566,col 36)",
                "(line 567,col 9)-(line 567,col 33)",
                "(line 568,col 9)-(line 568,col 34)",
                "(line 569,col 9)-(line 569,col 33)",
                "(line 570,col 9)-(line 570,col 33)",
                "(line 571,col 0)-(line 571,col 0)",
                "(line 572,col 9)-(line 572,col 22)",
                "(line 573,col 9)-(line 573,col 54)",
                "(line 574,col 9)-(line 574,col 36)",
                "(line 575,col 9)-(line 575,col 33)",
                "(line 576,col 9)-(line 576,col 34)",
                "(line 577,col 9)-(line 577,col 33)",
                "(line 578,col 9)-(line 578,col 34)",
                "(line 579,col 0)-(line 579,col 0)",
                "(line 580,col 9)-(line 580,col 60)",
                "(line 581,col 9)-(line 581,col 54)",
                "(line 582,col 9)-(line 582,col 58)",
                "(line 583,col 9)-(line 583,col 34)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
            "snippet": "public void testSplitPreserveAllTokens_StringChar() {\nassertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\nassertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\nString str = \"a.b. c\";\nString[] res = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\" c\", res[2]);\n\nstr = \"a.b.. c\";\nres = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(4, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\"\", res[2]);\nassertEquals(\" c\", res[3]);\n\nstr = \".a.\";\nres = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(3, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"\", res[2]);\n\nstr = \".a..\";\nres = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"\", res[2]);\nassertEquals(\"\", res[3]);\n\nstr = \"..a.\";\nres = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"a\", res[2]);\nassertEquals(\"\", res[3]);\n\nstr = \"..a\";\nres = StringUtils.splitPreserveAllTokens(str, '.');\nassertEquals(3, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"a\", res[2]);\n\nstr = \"a b c\";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(3, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\"c\", res[2]);\n\nstr = \"a  b  c\";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(5, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"b\", res[2]);\nassertEquals(\"\", res[3]);\nassertEquals(\"c\", res[4]);\n\nstr = \" a b c\";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(4, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"a\", res[1]);\nassertEquals(\"b\", res[2]);\nassertEquals(\"c\", res[3]);\n\nstr = \"  a b c\";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(5, res.length);\nassertEquals(\"\", res[0]);\nassertEquals(\"\", res[1]);\nassertEquals(\"a\", res[2]);\nassertEquals(\"b\", res[3]);\nassertEquals(\"c\", res[4]);\n\nstr = \"a b c \";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(4, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\"c\", res[2]);\nassertEquals(\"\", res[3]);\n\nstr = \"a b c  \";\nres = StringUtils.splitPreserveAllTokens(str,' ');\nassertEquals(5, res.length);\nassertEquals(\"a\", res[0]);\nassertEquals(\"b\", res[1]);\nassertEquals(\"c\", res[2]);\nassertEquals(\"\", res[3]);\nassertEquals(\"\", res[3]);\n\n// Match example in javadoc",
            "begin_line": 591,
            "end_line": 690,
            "comment": "         test delimiter char with max",
            "child_ranges": [
                "(line 592,col 9)-(line 592,col 74)",
                "(line 593,col 9)-(line 593,col 76)",
                "(line 594,col 0)-(line 594,col 0)",
                "(line 595,col 9)-(line 595,col 30)",
                "(line 596,col 9)-(line 596,col 68)",
                "(line 597,col 9)-(line 597,col 36)",
                "(line 598,col 9)-(line 598,col 34)",
                "(line 599,col 9)-(line 599,col 34)",
                "(line 600,col 9)-(line 600,col 35)",
                "(line 601,col 0)-(line 601,col 12)",
                "(line 602,col 9)-(line 602,col 24)",
                "(line 603,col 9)-(line 603,col 59)",
                "(line 604,col 9)-(line 604,col 36)",
                "(line 605,col 9)-(line 605,col 34)",
                "(line 606,col 9)-(line 606,col 34)",
                "(line 607,col 9)-(line 607,col 33)",
                "(line 608,col 9)-(line 608,col 35)",
                "(line 609,col 0)-(line 609,col 0)",
                "(line 610,col 9)-(line 610,col 20)",
                "(line 611,col 9)-(line 611,col 59)",
                "(line 612,col 9)-(line 612,col 36)",
                "(line 613,col 9)-(line 613,col 33)",
                "(line 614,col 9)-(line 614,col 34)",
                "(line 615,col 9)-(line 615,col 33)",
                "(line 616,col 0)-(line 616,col 7)",
                "(line 617,col 9)-(line 617,col 21)",
                "(line 618,col 9)-(line 618,col 59)",
                "(line 619,col 9)-(line 619,col 36)",
                "(line 620,col 9)-(line 620,col 33)",
                "(line 621,col 9)-(line 621,col 34)",
                "(line 622,col 9)-(line 622,col 33)",
                "(line 623,col 9)-(line 623,col 33)",
                "(line 624,col 0)-(line 624,col 8)",
                "(line 625,col 9)-(line 625,col 21)",
                "(line 626,col 9)-(line 626,col 59)",
                "(line 627,col 9)-(line 627,col 36)",
                "(line 628,col 9)-(line 628,col 33)",
                "(line 629,col 9)-(line 629,col 33)",
                "(line 630,col 9)-(line 630,col 34)",
                "(line 631,col 9)-(line 631,col 33)",
                "(line 632,col 0)-(line 632,col 8)",
                "(line 633,col 9)-(line 633,col 20)",
                "(line 634,col 9)-(line 634,col 59)",
                "(line 635,col 9)-(line 635,col 36)",
                "(line 636,col 9)-(line 636,col 33)",
                "(line 637,col 9)-(line 637,col 33)",
                "(line 638,col 9)-(line 638,col 34)",
                "(line 639,col 0)-(line 639,col 8)",
                "(line 640,col 9)-(line 640,col 22)",
                "(line 641,col 9)-(line 641,col 58)",
                "(line 642,col 9)-(line 642,col 36)",
                "(line 643,col 9)-(line 643,col 34)",
                "(line 644,col 9)-(line 644,col 34)",
                "(line 645,col 9)-(line 645,col 34)",
                "(line 646,col 0)-(line 646,col 0)",
                "(line 647,col 9)-(line 647,col 24)",
                "(line 648,col 9)-(line 648,col 58)",
                "(line 649,col 9)-(line 649,col 36)",
                "(line 650,col 9)-(line 650,col 34)",
                "(line 651,col 9)-(line 651,col 33)",
                "(line 652,col 9)-(line 652,col 34)",
                "(line 653,col 9)-(line 653,col 33)",
                "(line 654,col 9)-(line 654,col 34)",
                "(line 655,col 0)-(line 655,col 8)",
                "(line 656,col 9)-(line 656,col 23)",
                "(line 657,col 9)-(line 657,col 58)",
                "(line 658,col 9)-(line 658,col 36)",
                "(line 659,col 9)-(line 659,col 33)",
                "(line 660,col 9)-(line 660,col 34)",
                "(line 661,col 9)-(line 661,col 34)",
                "(line 662,col 9)-(line 662,col 34)",
                "(line 663,col 0)-(line 663,col 0)",
                "(line 664,col 9)-(line 664,col 24)",
                "(line 665,col 9)-(line 665,col 58)",
                "(line 666,col 9)-(line 666,col 36)",
                "(line 667,col 9)-(line 667,col 33)",
                "(line 668,col 9)-(line 668,col 33)",
                "(line 669,col 9)-(line 669,col 34)",
                "(line 670,col 9)-(line 670,col 34)",
                "(line 671,col 9)-(line 671,col 34)",
                "(line 672,col 0)-(line 672,col 0)",
                "(line 673,col 9)-(line 673,col 23)",
                "(line 674,col 9)-(line 674,col 58)",
                "(line 675,col 9)-(line 675,col 36)",
                "(line 676,col 9)-(line 676,col 34)",
                "(line 677,col 9)-(line 677,col 34)",
                "(line 678,col 9)-(line 678,col 34)",
                "(line 679,col 9)-(line 679,col 33)",
                "(line 680,col 0)-(line 680,col 0)",
                "(line 681,col 9)-(line 681,col 24)",
                "(line 682,col 9)-(line 682,col 58)",
                "(line 683,col 9)-(line 683,col 36)",
                "(line 684,col 9)-(line 684,col 34)",
                "(line 685,col 9)-(line 685,col 34)",
                "(line 686,col 9)-(line 686,col 34)",
                "(line 687,col 9)-(line 687,col 33)",
                "(line 688,col 9)-(line 688,col 33)",
                "(line 689,col 0)-(line 689,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
            "snippet": "public void testSplitPreserveAllTokens_StringString_StringStringInt() {\nassertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\nassertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n\nassertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\nassertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n\ninnerTestSplitPreserveAllTokens('.', \".\", ' ');\ninnerTestSplitPreserveAllTokens('.', \".\", ',');\ninnerTestSplitPreserveAllTokens('.', \".,\", 'x');\nfor (int i = 0; i < WHITESPACE.length(); i++) {",
            "begin_line": 702,
            "end_line": 712,
            "comment": "         Match example in javadoc",
            "child_ranges": [
                "(line 703,col 9)-(line 703,col 74)",
                "(line 704,col 9)-(line 704,col 77)",
                "(line 705,col 0)-(line 705,col 8)",
                "(line 706,col 9)-(line 706,col 76)",
                "(line 707,col 9)-(line 707,col 79)",
                "(line 708,col 0)-(line 708,col 8)",
                "(line 709,col 9)-(line 709,col 55)",
                "(line 710,col 9)-(line 710,col 55)",
                "(line 711,col 9)-(line 711,col 56)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch)",
            "snippet": "private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\nString msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +",
            "begin_line": 831,
            "end_line": 832,
            "comment": "         Match example in javadoc",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
            "snippet": "public void testSplitByCharacterType() {\nassertNull(StringUtils.splitByCharacterType(null));\nassertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n\nassertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",",
            "begin_line": 876,
            "end_line": 880,
            "comment": "         (str, sepStr)",
            "child_ranges": [
                "(line 877,col 9)-(line 877,col 59)",
                "(line 878,col 9)-(line 878,col 69)",
                "(line 879,col 0)-(line 879,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
            "snippet": "public void testSplitByCharacterTypeCamelCase() {\nassertNull(StringUtils.splitByCharacterTypeCamelCase(null));\nassertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\nassertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",",
            "begin_line": 902,
            "end_line": 906,
            "comment": "         (str, sepStr)",
            "child_ranges": [
                "(line 903,col 9)-(line 903,col 68)",
                "(line 904,col 9)-(line 904,col 78)",
                "(line 905,col 0)-(line 905,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
            "snippet": "public void testDeleteWhitespace_String() {\nassertEquals(null, StringUtils.deleteWhitespace(null));\nassertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\nassertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\nassertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\nassertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n// Note: u-2007 and u-000A both cause problems in the source code",
            "begin_line": 928,
            "end_line": 934,
            "comment": "         (str, sepStr)",
            "child_ranges": [
                "(line 929,col 9)-(line 929,col 63)",
                "(line 930,col 9)-(line 930,col 59)",
                "(line 931,col 9)-(line 931,col 92)",
                "(line 932,col 9)-(line 932,col 83)",
                "(line 933,col 9)-(line 933,col 115)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
            "snippet": "public void testReplace_StringStringString() {\nassertEquals(null, StringUtils.replace(null, null, null));\nassertEquals(null, StringUtils.replace(null, null, \"any\"));\nassertEquals(null, StringUtils.replace(null, \"any\", null));\nassertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\nassertEquals(\"\", StringUtils.replace(\"\", null, null));\nassertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\nassertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\nassertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\nassertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\nassertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\nassertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\nassertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\nassertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\nassertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\nassertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n}",
            "begin_line": 941,
            "end_line": 960,
            "comment": "         it should ignore 2007 but delete 000A",
            "child_ranges": [
                "(line 942,col 9)-(line 942,col 66)",
                "(line 943,col 9)-(line 943,col 67)",
                "(line 944,col 9)-(line 944,col 67)",
                "(line 945,col 9)-(line 945,col 68)",
                "(line 946,col 0)-(line 946,col 0)",
                "(line 947,col 9)-(line 947,col 62)",
                "(line 948,col 9)-(line 948,col 63)",
                "(line 949,col 9)-(line 949,col 63)",
                "(line 950,col 9)-(line 950,col 64)",
                "(line 951,col 0)-(line 951,col 0)",
                "(line 952,col 9)-(line 952,col 67)",
                "(line 953,col 9)-(line 953,col 69)",
                "(line 954,col 9)-(line 954,col 67)",
                "(line 955,col 9)-(line 955,col 68)",
                "(line 956,col 0)-(line 956,col 0)",
                "(line 957,col 9)-(line 957,col 70)",
                "(line 958,col 9)-(line 958,col 82)",
                "(line 959,col 9)-(line 959,col 80)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
            "snippet": "public void testReplace_StringStringStringInt() {\nassertEquals(null, StringUtils.replace(null, null, null, 2));\nassertEquals(null, StringUtils.replace(null, null, \"any\", 2));\nassertEquals(null, StringUtils.replace(null, \"any\", null, 2));\nassertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\nassertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\nassertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\nassertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\nassertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n\nString str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\nassertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n\nassertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\nassertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\nassertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\nassertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\nassertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\nassertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n\nassertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\nassertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n}",
            "begin_line": 962,
            "end_line": 985,
            "comment": "         it should ignore 2007 but delete 000A",
            "child_ranges": [
                "(line 963,col 9)-(line 963,col 69)",
                "(line 964,col 9)-(line 964,col 70)",
                "(line 965,col 9)-(line 965,col 70)",
                "(line 966,col 9)-(line 966,col 71)",
                "(line 967,col 0)-(line 967,col 0)",
                "(line 968,col 9)-(line 968,col 65)",
                "(line 969,col 9)-(line 969,col 66)",
                "(line 970,col 9)-(line 970,col 66)",
                "(line 971,col 9)-(line 971,col 67)",
                "(line 972,col 0)-(line 972,col 8)",
                "(line 973,col 9)-(line 973,col 70)",
                "(line 974,col 9)-(line 974,col 63)",
                "(line 975,col 0)-(line 975,col 8)",
                "(line 976,col 9)-(line 976,col 69)",
                "(line 977,col 9)-(line 977,col 72)",
                "(line 978,col 9)-(line 978,col 71)",
                "(line 979,col 9)-(line 979,col 70)",
                "(line 980,col 9)-(line 980,col 69)",
                "(line 981,col 9)-(line 981,col 68)",
                "(line 982,col 0)-(line 982,col 8)",
                "(line 983,col 9)-(line 983,col 69)",
                "(line 984,col 9)-(line 984,col 71)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
            "snippet": "public void testReplaceOnce_StringStringString() {\nassertEquals(null, StringUtils.replaceOnce(null, null, null));\nassertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\nassertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\nassertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\nassertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\nassertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\nassertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\nassertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\nassertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\nassertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\nassertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\nassertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\nassertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n}",
            "begin_line": 987,
            "end_line": 1004,
            "comment": "         it should ignore 2007 but delete 000A",
            "child_ranges": [
                "(line 988,col 9)-(line 988,col 70)",
                "(line 989,col 9)-(line 989,col 71)",
                "(line 990,col 9)-(line 990,col 71)",
                "(line 991,col 9)-(line 991,col 72)",
                "(line 992,col 0)-(line 992,col 0)",
                "(line 993,col 9)-(line 993,col 66)",
                "(line 994,col 9)-(line 994,col 67)",
                "(line 995,col 9)-(line 995,col 67)",
                "(line 996,col 9)-(line 996,col 68)",
                "(line 997,col 0)-(line 997,col 0)",
                "(line 998,col 9)-(line 998,col 71)",
                "(line 999,col 9)-(line 999,col 73)",
                "(line 1000,col 9)-(line 1000,col 71)",
                "(line 1001,col 9)-(line 1001,col 72)",
                "(line 1002,col 0)-(line 1002,col 0)",
                "(line 1003,col 9)-(line 1003,col 80)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
            "snippet": "public void testReplace_StringStringArrayStringArray() {\n\n\n//JAVADOC TESTS START",
            "begin_line": 1009,
            "end_line": 1012,
            "comment": "    \n     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n     ",
            "child_ranges": [
                "(line 1010,col 0)-(line 1010,col 0)",
                "(line 1011,col 0)-(line 1011,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
            "snippet": "public void testReplace_StringStringArrayStringArrayBoolean() {\n//JAVADOC TESTS START",
            "begin_line": 1045,
            "end_line": 1046,
            "comment": "    \n     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
            "snippet": "public void testReplaceChars_StringCharChar() {\nassertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\nassertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\nassertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\nassertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n}",
            "begin_line": 1068,
            "end_line": 1073,
            "comment": "        JAVADOC TESTS END",
            "child_ranges": [
                "(line 1069,col 9)-(line 1069,col 69)",
                "(line 1070,col 9)-(line 1070,col 65)",
                "(line 1071,col 9)-(line 1071,col 75)",
                "(line 1072,col 9)-(line 1072,col 75)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
            "snippet": "public void testReplaceChars_StringStringString() {\nassertEquals(null, StringUtils.replaceChars(null, null, null));\nassertEquals(null, StringUtils.replaceChars(null, \"\", null));\nassertEquals(null, StringUtils.replaceChars(null, \"a\", null));\nassertEquals(null, StringUtils.replaceChars(null, null, \"\"));\nassertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n\nassertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\nassertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\nassertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\nassertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\nassertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\nassertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n\nassertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\nassertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\nassertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n\nassertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\nassertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\nassertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n\nassertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\nassertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n\n// Javadoc examples:",
            "begin_line": 1075,
            "end_line": 1107,
            "comment": "        JAVADOC TESTS END",
            "child_ranges": [
                "(line 1076,col 9)-(line 1076,col 71)",
                "(line 1077,col 9)-(line 1077,col 69)",
                "(line 1078,col 9)-(line 1078,col 70)",
                "(line 1079,col 9)-(line 1079,col 69)",
                "(line 1080,col 9)-(line 1080,col 70)",
                "(line 1081,col 0)-(line 1081,col 8)",
                "(line 1082,col 9)-(line 1082,col 67)",
                "(line 1083,col 9)-(line 1083,col 65)",
                "(line 1084,col 9)-(line 1084,col 66)",
                "(line 1085,col 9)-(line 1085,col 65)",
                "(line 1086,col 9)-(line 1086,col 66)",
                "(line 1087,col 0)-(line 1087,col 0)",
                "(line 1088,col 9)-(line 1088,col 73)",
                "(line 1089,col 9)-(line 1089,col 71)",
                "(line 1090,col 9)-(line 1090,col 72)",
                "(line 1091,col 0)-(line 1091,col 8)",
                "(line 1092,col 9)-(line 1092,col 71)",
                "(line 1093,col 9)-(line 1093,col 69)",
                "(line 1094,col 9)-(line 1094,col 70)",
                "(line 1095,col 0)-(line 1095,col 8)",
                "(line 1096,col 9)-(line 1096,col 71)",
                "(line 1097,col 9)-(line 1097,col 69)",
                "(line 1098,col 9)-(line 1098,col 71)",
                "(line 1099,col 0)-(line 1099,col 8)",
                "(line 1100,col 9)-(line 1100,col 77)",
                "(line 1101,col 9)-(line 1101,col 75)",
                "(line 1102,col 9)-(line 1102,col 78)",
                "(line 1103,col 0)-(line 1103,col 8)",
                "(line 1104,col 9)-(line 1104,col 75)",
                "(line 1105,col 9)-(line 1105,col 73)",
                "(line 1106,col 0)-(line 1106,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
            "snippet": "public void testOverlay_StringStringIntInt() {\nassertEquals(null, StringUtils.overlay(null, null, 2, 4));\nassertEquals(null, StringUtils.overlay(null, null, -2, -4));\n\nassertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\nassertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\nassertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\nassertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\nassertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n\nassertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\nassertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\nassertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\nassertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\nassertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\nassertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n\nassertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\nassertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\nassertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\nassertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\nassertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\nassertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\nassertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\nassertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n}",
            "begin_line": 1120,
            "end_line": 1145,
            "comment": "         From http:issues.apache.org/bugzilla/show_bug.cgi?id=25454",
            "child_ranges": [
                "(line 1121,col 9)-(line 1121,col 66)",
                "(line 1122,col 9)-(line 1122,col 68)",
                "(line 1123,col 0)-(line 1123,col 8)",
                "(line 1124,col 9)-(line 1124,col 62)",
                "(line 1125,col 9)-(line 1125,col 60)",
                "(line 1126,col 9)-(line 1126,col 68)",
                "(line 1127,col 9)-(line 1127,col 68)",
                "(line 1128,col 9)-(line 1128,col 70)",
                "(line 1129,col 0)-(line 1129,col 8)",
                "(line 1130,col 9)-(line 1130,col 72)",
                "(line 1131,col 9)-(line 1131,col 72)",
                "(line 1132,col 9)-(line 1132,col 70)",
                "(line 1133,col 9)-(line 1133,col 70)",
                "(line 1134,col 9)-(line 1134,col 78)",
                "(line 1135,col 9)-(line 1135,col 78)",
                "(line 1136,col 0)-(line 1136,col 8)",
                "(line 1137,col 9)-(line 1137,col 77)",
                "(line 1138,col 9)-(line 1138,col 77)",
                "(line 1139,col 9)-(line 1139,col 82)",
                "(line 1140,col 9)-(line 1140,col 82)",
                "(line 1141,col 9)-(line 1141,col 79)",
                "(line 1142,col 9)-(line 1142,col 79)",
                "(line 1143,col 9)-(line 1143,col 81)",
                "(line 1144,col 9)-(line 1144,col 81)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
            "snippet": "public void testRepeat_StringInt() {\nassertEquals(null, StringUtils.repeat(null, 2));\nassertEquals(\"\", StringUtils.repeat(\"ab\", 0));\nassertEquals(\"\", StringUtils.repeat(\"\", 3));\nassertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\nassertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\nassertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\nString str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit",
            "begin_line": 1147,
            "end_line": 1154,
            "comment": "         From http:issues.apache.org/bugzilla/show_bug.cgi?id=25454",
            "child_ranges": [
                "(line 1148,col 9)-(line 1148,col 56)",
                "(line 1149,col 9)-(line 1149,col 54)",
                "(line 1150,col 9)-(line 1150,col 52)",
                "(line 1151,col 9)-(line 1151,col 56)",
                "(line 1152,col 9)-(line 1152,col 60)",
                "(line 1153,col 9)-(line 1153,col 64)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
            "snippet": "public void testRepeat_StringStringInt() {\nassertEquals(null, StringUtils.repeat(null, null, 2));\nassertEquals(null, StringUtils.repeat(null, \"x\", 2));\nassertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\nassertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\nassertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\nassertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\nassertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n}",
            "begin_line": 1159,
            "end_line": 1170,
            "comment": "         From http:issues.apache.org/bugzilla/show_bug.cgi?id=25454",
            "child_ranges": [
                "(line 1160,col 9)-(line 1160,col 62)",
                "(line 1161,col 9)-(line 1161,col 61)",
                "(line 1162,col 9)-(line 1162,col 58)",
                "(line 1163,col 0)-(line 1163,col 0)",
                "(line 1164,col 9)-(line 1164,col 58)",
                "(line 1165,col 9)-(line 1165,col 56)",
                "(line 1166,col 0)-(line 1166,col 0)",
                "(line 1167,col 9)-(line 1167,col 59)",
                "(line 1168,col 0)-(line 1168,col 0)",
                "(line 1169,col 9)-(line 1169,col 66)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
            "snippet": "public void testChop() {\n\nString[][] chopCases = {",
            "begin_line": 1172,
            "end_line": 1174,
            "comment": "         From http:issues.apache.org/bugzilla/show_bug.cgi?id=25454",
            "child_ranges": [
                "(line 1173,col 0)-(line 1173,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
            "snippet": "public void testChomp() {\n\nString[][] chompCases = {",
            "begin_line": 1196,
            "end_line": 1198,
            "comment": "         From http:issues.apache.org/bugzilla/show_bug.cgi?id=25454",
            "child_ranges": [
                "(line 1197,col 0)-(line 1197,col 0)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
            "snippet": "public void testRightPad_StringInt() {\nassertEquals(null, StringUtils.rightPad(null, 5));\nassertEquals(\"     \", StringUtils.rightPad(\"\", 5));\nassertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n}",
            "begin_line": 1254,
            "end_line": 1260,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1255,col 9)-(line 1255,col 58)",
                "(line 1256,col 9)-(line 1256,col 59)",
                "(line 1257,col 9)-(line 1257,col 62)",
                "(line 1258,col 9)-(line 1258,col 60)",
                "(line 1259,col 9)-(line 1259,col 61)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
            "snippet": "public void testRightPad_StringIntChar() {\nassertEquals(null, StringUtils.rightPad(null, 5, ' '));\nassertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\nassertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\nassertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\nString str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length",
            "begin_line": 1262,
            "end_line": 1269,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1263,col 9)-(line 1263,col 63)",
                "(line 1264,col 9)-(line 1264,col 64)",
                "(line 1265,col 9)-(line 1265,col 67)",
                "(line 1266,col 9)-(line 1266,col 65)",
                "(line 1267,col 9)-(line 1267,col 66)",
                "(line 1268,col 9)-(line 1268,col 67)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
            "snippet": "public void testRightPad_StringIntString() {\nassertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\nassertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\nassertEquals(null, StringUtils.rightPad(null, 8, null));\nassertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\nassertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\nassertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\nassertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\nassertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\nassertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n}",
            "begin_line": 1274,
            "end_line": 1285,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1275,col 9)-(line 1275,col 64)",
                "(line 1276,col 9)-(line 1276,col 64)",
                "(line 1277,col 9)-(line 1277,col 64)",
                "(line 1278,col 9)-(line 1278,col 70)",
                "(line 1279,col 9)-(line 1279,col 70)",
                "(line 1280,col 9)-(line 1280,col 69)",
                "(line 1281,col 9)-(line 1281,col 65)",
                "(line 1282,col 9)-(line 1282,col 66)",
                "(line 1283,col 9)-(line 1283,col 68)",
                "(line 1284,col 9)-(line 1284,col 66)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
            "snippet": "public void testLeftPad_StringInt() {\nassertEquals(null, StringUtils.leftPad(null, 5));\nassertEquals(\"     \", StringUtils.leftPad(\"\", 5));\nassertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\nassertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n}",
            "begin_line": 1288,
            "end_line": 1293,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1289,col 9)-(line 1289,col 57)",
                "(line 1290,col 9)-(line 1290,col 58)",
                "(line 1291,col 9)-(line 1291,col 61)",
                "(line 1292,col 9)-(line 1292,col 59)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
            "snippet": "public void testLeftPad_StringIntChar() {\nassertEquals(null, StringUtils.leftPad(null, 5, ' '));\nassertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\nassertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\nassertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\nassertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\nassertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\nString str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length",
            "begin_line": 1295,
            "end_line": 1302,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1296,col 9)-(line 1296,col 62)",
                "(line 1297,col 9)-(line 1297,col 63)",
                "(line 1298,col 9)-(line 1298,col 66)",
                "(line 1299,col 9)-(line 1299,col 66)",
                "(line 1300,col 9)-(line 1300,col 81)",
                "(line 1301,col 9)-(line 1301,col 64)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
            "snippet": "public void testLeftPad_StringIntString() {\nassertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\nassertEquals(null, StringUtils.leftPad(null, 5, null));\nassertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\nassertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\nassertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\nassertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\nassertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\nassertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\nassertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\nassertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n}",
            "begin_line": 1307,
            "end_line": 1318,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1308,col 9)-(line 1308,col 63)",
                "(line 1309,col 9)-(line 1309,col 63)",
                "(line 1310,col 9)-(line 1310,col 63)",
                "(line 1311,col 9)-(line 1311,col 69)",
                "(line 1312,col 9)-(line 1312,col 69)",
                "(line 1313,col 9)-(line 1313,col 68)",
                "(line 1314,col 9)-(line 1314,col 64)",
                "(line 1315,col 9)-(line 1315,col 65)",
                "(line 1316,col 9)-(line 1316,col 67)",
                "(line 1317,col 9)-(line 1317,col 65)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testLength()",
            "snippet": "public void testLength() {\nassertEquals(0, StringUtils.length(null));\nassertEquals(0, StringUtils.length(\"\"));\nassertEquals(0, StringUtils.length(StringUtils.EMPTY));\nassertEquals(1, StringUtils.length(\"A\"));\nassertEquals(1, StringUtils.length(\" \"));\nassertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n}",
            "begin_line": 1320,
            "end_line": 1327,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1321,col 9)-(line 1321,col 50)",
                "(line 1322,col 9)-(line 1322,col 48)",
                "(line 1323,col 9)-(line 1323,col 63)",
                "(line 1324,col 9)-(line 1324,col 49)",
                "(line 1325,col 9)-(line 1325,col 49)",
                "(line 1326,col 9)-(line 1326,col 56)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
            "snippet": "public void testCenter_StringInt() {\nassertEquals(null, StringUtils.center(null, -1));\nassertEquals(null, StringUtils.center(null, 4));\nassertEquals(\"    \", StringUtils.center(\"\", 4));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 0));\nassertEquals(\"ab\", StringUtils.center(\"ab\", -1));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 1));\nassertEquals(\"    \", StringUtils.center(\"\", 4));\nassertEquals(\" ab \", StringUtils.center(\"ab\", 4));\nassertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\nassertEquals(\" a  \", StringUtils.center(\"a\", 4));\nassertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n}",
            "begin_line": 1330,
            "end_line": 1342,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1331,col 9)-(line 1331,col 57)",
                "(line 1332,col 9)-(line 1332,col 56)",
                "(line 1333,col 9)-(line 1333,col 56)",
                "(line 1334,col 9)-(line 1334,col 56)",
                "(line 1335,col 9)-(line 1335,col 57)",
                "(line 1336,col 9)-(line 1336,col 56)",
                "(line 1337,col 9)-(line 1337,col 56)",
                "(line 1338,col 9)-(line 1338,col 58)",
                "(line 1339,col 9)-(line 1339,col 60)",
                "(line 1340,col 9)-(line 1340,col 57)",
                "(line 1341,col 9)-(line 1341,col 58)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
            "snippet": "public void testCenter_StringIntChar() {\nassertEquals(null, StringUtils.center(null, -1, ' '));\nassertEquals(null, StringUtils.center(null, 4, ' '));\nassertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\nassertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\nassertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\nassertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\nassertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\nassertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\nassertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\nassertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n}",
            "begin_line": 1344,
            "end_line": 1357,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1345,col 9)-(line 1345,col 62)",
                "(line 1346,col 9)-(line 1346,col 61)",
                "(line 1347,col 9)-(line 1347,col 61)",
                "(line 1348,col 9)-(line 1348,col 61)",
                "(line 1349,col 9)-(line 1349,col 62)",
                "(line 1350,col 9)-(line 1350,col 61)",
                "(line 1351,col 9)-(line 1351,col 61)",
                "(line 1352,col 9)-(line 1352,col 63)",
                "(line 1353,col 9)-(line 1353,col 65)",
                "(line 1354,col 9)-(line 1354,col 62)",
                "(line 1355,col 9)-(line 1355,col 63)",
                "(line 1356,col 9)-(line 1356,col 63)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
            "snippet": "public void testCenter_StringIntString() {\nassertEquals(null, StringUtils.center(null, 4, null));\nassertEquals(null, StringUtils.center(null, -1, \" \"));\nassertEquals(null, StringUtils.center(null, 4, \" \"));\nassertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\nassertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\nassertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\nassertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\nassertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\nassertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\nassertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\nassertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\nassertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\nassertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\nassertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n}",
            "begin_line": 1359,
            "end_line": 1375,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1360,col 9)-(line 1360,col 62)",
                "(line 1361,col 9)-(line 1361,col 62)",
                "(line 1362,col 9)-(line 1362,col 61)",
                "(line 1363,col 9)-(line 1363,col 61)",
                "(line 1364,col 9)-(line 1364,col 61)",
                "(line 1365,col 9)-(line 1365,col 62)",
                "(line 1366,col 9)-(line 1366,col 61)",
                "(line 1367,col 9)-(line 1367,col 61)",
                "(line 1368,col 9)-(line 1368,col 63)",
                "(line 1369,col 9)-(line 1369,col 65)",
                "(line 1370,col 9)-(line 1370,col 62)",
                "(line 1371,col 9)-(line 1371,col 63)",
                "(line 1372,col 9)-(line 1372,col 66)",
                "(line 1373,col 9)-(line 1373,col 68)",
                "(line 1374,col 9)-(line 1374,col 66)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
            "snippet": "public void testReverse_String() {\nassertEquals(null, StringUtils.reverse(null) );\nassertEquals(\"\", StringUtils.reverse(\"\") );\nassertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n}",
            "begin_line": 1378,
            "end_line": 1382,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1379,col 9)-(line 1379,col 55)",
                "(line 1380,col 9)-(line 1380,col 51)",
                "(line 1381,col 9)-(line 1381,col 69)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
            "snippet": "public void testReverseDelimited_StringChar() {\nassertEquals(null, StringUtils.reverseDelimited(null, '.') );\nassertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\nassertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\nassertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\nassertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n}",
            "begin_line": 1384,
            "end_line": 1390,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1385,col 9)-(line 1385,col 69)",
                "(line 1386,col 9)-(line 1386,col 65)",
                "(line 1387,col 9)-(line 1387,col 75)",
                "(line 1388,col 9)-(line 1388,col 75)",
                "(line 1389,col 9)-(line 1389,col 65)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
            "snippet": "public void testDefault_String() {\nassertEquals(\"\", StringUtils.defaultString(null));\nassertEquals(\"\", StringUtils.defaultString(\"\"));\nassertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n}",
            "begin_line": 1393,
            "end_line": 1397,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1394,col 9)-(line 1394,col 58)",
                "(line 1395,col 9)-(line 1395,col 56)",
                "(line 1396,col 9)-(line 1396,col 62)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
            "snippet": "public void testDefault_StringString() {\nassertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\nassertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\nassertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n}",
            "begin_line": 1399,
            "end_line": 1403,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1400,col 9)-(line 1400,col 70)",
                "(line 1401,col 9)-(line 1401,col 64)",
                "(line 1402,col 9)-(line 1402,col 70)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
            "snippet": "public void testDefaultIfEmpty_StringString() {\nassertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\nassertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\nassertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\nassertNull(StringUtils.defaultIfEmpty(\"\", null));\n}",
            "begin_line": 1405,
            "end_line": 1410,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1406,col 9)-(line 1406,col 71)",
                "(line 1407,col 9)-(line 1407,col 69)",
                "(line 1408,col 9)-(line 1408,col 71)",
                "(line 1409,col 9)-(line 1409,col 57)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
            "snippet": "public void testAbbreviate_StringInt() {\nassertEquals(null, StringUtils.abbreviate(null, 10));\nassertEquals(\"\", StringUtils.abbreviate(\"\", 10));\nassertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\nassertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\nString raspberry = \"raspberry peach\";\nassertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\nassertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\nassertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\nassertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\nassertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\nassertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\nassertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\nassertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n\ntry {",
            "begin_line": 1413,
            "end_line": 1429,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1414,col 9)-(line 1414,col 61)",
                "(line 1415,col 9)-(line 1415,col 57)",
                "(line 1416,col 9)-(line 1416,col 67)",
                "(line 1417,col 9)-(line 1417,col 134)",
                "(line 1418,col 0)-(line 1418,col 0)",
                "(line 1419,col 9)-(line 1419,col 45)",
                "(line 1420,col 9)-(line 1420,col 78)",
                "(line 1421,col 9)-(line 1421,col 87)",
                "(line 1422,col 9)-(line 1422,col 87)",
                "(line 1423,col 9)-(line 1423,col 69)",
                "(line 1424,col 9)-(line 1424,col 70)",
                "(line 1425,col 9)-(line 1425,col 70)",
                "(line 1426,col 9)-(line 1426,col 67)",
                "(line 1427,col 9)-(line 1427,col 56)",
                "(line 1428,col 0)-(line 1428,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
            "snippet": "public void testAbbreviate_StringIntInt() {\nassertEquals(null, StringUtils.abbreviate(null, 10, 12));\nassertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\nassertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n\ntry {",
            "begin_line": 1438,
            "end_line": 1443,
            "comment": "                 empty",
            "child_ranges": [
                "(line 1439,col 9)-(line 1439,col 65)",
                "(line 1440,col 9)-(line 1440,col 60)",
                "(line 1441,col 9)-(line 1441,col 60)",
                "(line 1442,col 0)-(line 1442,col 8)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(String expected, int offset, int maxWidth)",
            "snippet": "private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\nString abcdefghijklmno = \"abcdefghijklmno\";\nString message = \"abbreviate(String,int,int) failed\";\nString actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\nif (offset >= 0 && offset < abcdefghijklmno.length()) {",
            "begin_line": 1485,
            "end_line": 1489,
            "comment": "                 empty",
            "child_ranges": [
                "(line 1486,col 9)-(line 1486,col 51)",
                "(line 1487,col 9)-(line 1487,col 61)",
                "(line 1488,col 9)-(line 1488,col 82)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
            "snippet": "public void testDifference_StringString() {\nassertEquals(null, StringUtils.difference(null, null));\nassertEquals(\"\", StringUtils.difference(\"\", \"\"));\nassertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\nassertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\nassertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\nassertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\nassertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\nassertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\nassertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n}",
            "begin_line": 1499,
            "end_line": 1509,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1500,col 9)-(line 1500,col 63)",
                "(line 1501,col 9)-(line 1501,col 57)",
                "(line 1502,col 9)-(line 1502,col 63)",
                "(line 1503,col 9)-(line 1503,col 60)",
                "(line 1504,col 9)-(line 1504,col 83)",
                "(line 1505,col 9)-(line 1505,col 87)",
                "(line 1506,col 9)-(line 1506,col 88)",
                "(line 1507,col 9)-(line 1507,col 63)",
                "(line 1508,col 9)-(line 1508,col 99)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
            "snippet": "public void testDifferenceAt_StringString() {\nassertEquals(-1, StringUtils.indexOfDifference(null, null));\nassertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\nassertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\nassertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\nassertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\nassertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\nassertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\nassertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\nassertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n//System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n}",
            "begin_line": 1511,
            "end_line": 1522,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1512,col 9)-(line 1512,col 68)",
                "(line 1513,col 9)-(line 1513,col 77)",
                "(line 1514,col 9)-(line 1514,col 64)",
                "(line 1515,col 9)-(line 1515,col 66)",
                "(line 1516,col 9)-(line 1516,col 66)",
                "(line 1517,col 9)-(line 1517,col 79)",
                "(line 1518,col 9)-(line 1518,col 89)",
                "(line 1519,col 9)-(line 1519,col 70)",
                "(line 1520,col 9)-(line 1520,col 90)",
                "(line 1521,col 9)-(line 1521,col 109)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
            "snippet": "public void testGetLevenshteinDistance_StringString() {\nassertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\nassertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\nassertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\nassertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\nassertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\nassertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\nassertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\nassertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\nassertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\nassertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\ntry {",
            "begin_line": 1525,
            "end_line": 1536,
            "comment": "    -----------------------------------------------------------------------",
            "child_ranges": [
                "(line 1526,col 9)-(line 1526,col 69)",
                "(line 1527,col 9)-(line 1527,col 70)",
                "(line 1528,col 9)-(line 1528,col 76)",
                "(line 1529,col 9)-(line 1529,col 76)",
                "(line 1530,col 9)-(line 1530,col 75)",
                "(line 1531,col 9)-(line 1531,col 82)",
                "(line 1532,col 9)-(line 1532,col 82)",
                "(line 1533,col 9)-(line 1533,col 82)",
                "(line 1534,col 9)-(line 1534,col 82)",
                "(line 1535,col 9)-(line 1535,col 79)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
            "snippet": "public void testEMPTY() {\nassertNotNull(StringUtils.EMPTY);\nassertEquals(\"\", StringUtils.EMPTY);\nassertEquals(0, StringUtils.EMPTY.length());\n}",
            "begin_line": 1555,
            "end_line": 1559,
            "comment": "    \n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
            "child_ranges": [
                "(line 1556,col 9)-(line 1556,col 41)",
                "(line 1557,col 9)-(line 1557,col 44)",
                "(line 1558,col 9)-(line 1558,col 52)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
            "snippet": "public void testIsAllLowerCase() {\nassertFalse(StringUtils.isAllLowerCase(null));\nassertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\nassertTrue(StringUtils.isAllLowerCase(\"abc\"));\nassertFalse(StringUtils.isAllLowerCase(\"abc \"));\nassertFalse(StringUtils.isAllLowerCase(\"abC\"));\n}",
            "begin_line": 1564,
            "end_line": 1570,
            "comment": "    \n     * Test for {@link StringUtils#isAllLowerCase(String)}.\n     ",
            "child_ranges": [
                "(line 1565,col 9)-(line 1565,col 54)",
                "(line 1566,col 9)-(line 1566,col 67)",
                "(line 1567,col 9)-(line 1567,col 54)",
                "(line 1568,col 9)-(line 1568,col 56)",
                "(line 1569,col 9)-(line 1569,col 55)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
            "snippet": "public void testIsAllUpperCase() {\nassertFalse(StringUtils.isAllUpperCase(null));\nassertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\nassertTrue(StringUtils.isAllUpperCase(\"ABC\"));\nassertFalse(StringUtils.isAllUpperCase(\"ABC \"));\nassertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n}",
            "begin_line": 1575,
            "end_line": 1581,
            "comment": "    \n     * Test for {@link StringUtils#isAllUpperCase(String)}.\n     ",
            "child_ranges": [
                "(line 1576,col 9)-(line 1576,col 54)",
                "(line 1577,col 9)-(line 1577,col 67)",
                "(line 1578,col 9)-(line 1578,col 54)",
                "(line 1579,col 9)-(line 1579,col 56)",
                "(line 1580,col 9)-(line 1580,col 55)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
            "snippet": "public void testRemoveStart() {\n// StringUtils.removeStart(\"\", *)        = \"\"",
            "begin_line": 1583,
            "end_line": 1584,
            "comment": "    \n     * Test for {@link StringUtils#isAllUpperCase(String)}.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
            "snippet": "public void testRemoveStartIgnoreCase() {\n// StringUtils.removeStart(\"\", *)        = \"\"",
            "begin_line": 1601,
            "end_line": 1602,
            "comment": "         All others:",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
            "snippet": "public void testRemoveEnd() {\n// StringUtils.removeEnd(\"\", *)        = \"\"",
            "begin_line": 1622,
            "end_line": 1623,
            "comment": "         Case insensitive:",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
            "snippet": "public void testRemoveEndIgnoreCase() {\n// StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"",
            "begin_line": 1641,
            "end_line": 1642,
            "comment": "         All others:",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
            "snippet": "public void testRemove_String() {\n// StringUtils.remove(null, *)        = null",
            "begin_line": 1663,
            "end_line": 1664,
            "comment": "         Case insensitive:",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
            "snippet": "public void testRemove_char() {\n// StringUtils.remove(null, *)       = null",
            "begin_line": 1691,
            "end_line": 1692,
            "comment": "         StringUtils.remove(\"queued\", \"zz\") = \"queued\"",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
            "snippet": "public void testDifferenceAt_StringArray(){\nassertEquals(-1, StringUtils.indexOfDifference(null));\nassertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\nassertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\nassertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\nassertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\nassertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\nassertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\nassertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\nassertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\nassertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\nassertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n}",
            "begin_line": 1710,
            "end_line": 1728,
            "comment": "         StringUtils.remove(\"queued\", 'z') = \"queued\"",
            "child_ranges": [
                "(line 1711,col 9)-(line 1711,col 62)",
                "(line 1712,col 9)-(line 1712,col 73)",
                "(line 1713,col 9)-(line 1713,col 78)",
                "(line 1714,col 9)-(line 1714,col 83)",
                "(line 1715,col 9)-(line 1715,col 79)",
                "(line 1716,col 9)-(line 1716,col 80)",
                "(line 1717,col 9)-(line 1717,col 89)",
                "(line 1718,col 9)-(line 1718,col 89)",
                "(line 1719,col 9)-(line 1719,col 81)",
                "(line 1720,col 9)-(line 1720,col 81)",
                "(line 1721,col 9)-(line 1721,col 85)",
                "(line 1722,col 9)-(line 1722,col 82)",
                "(line 1723,col 9)-(line 1723,col 85)",
                "(line 1724,col 9)-(line 1724,col 88)",
                "(line 1725,col 9)-(line 1725,col 86)",
                "(line 1726,col 9)-(line 1726,col 86)",
                "(line 1727,col 9)-(line 1727,col 104)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
            "snippet": "public void testGetCommonPrefix_StringArray(){\nassertEquals(\"\", StringUtils.getCommonPrefix(null));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\nassertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\nassertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\nassertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\nassertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\nassertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\nassertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\nassertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n}",
            "begin_line": 1730,
            "end_line": 1748,
            "comment": "         StringUtils.remove(\"queued\", 'z') = \"queued\"",
            "child_ranges": [
                "(line 1731,col 9)-(line 1731,col 60)",
                "(line 1732,col 9)-(line 1732,col 71)",
                "(line 1733,col 9)-(line 1733,col 79)",
                "(line 1734,col 9)-(line 1734,col 81)",
                "(line 1735,col 9)-(line 1735,col 77)",
                "(line 1736,col 9)-(line 1736,col 79)",
                "(line 1737,col 9)-(line 1737,col 88)",
                "(line 1738,col 9)-(line 1738,col 88)",
                "(line 1739,col 9)-(line 1739,col 80)",
                "(line 1740,col 9)-(line 1740,col 80)",
                "(line 1741,col 9)-(line 1741,col 86)",
                "(line 1742,col 9)-(line 1742,col 82)",
                "(line 1743,col 9)-(line 1743,col 86)",
                "(line 1744,col 9)-(line 1744,col 89)",
                "(line 1745,col 9)-(line 1745,col 85)",
                "(line 1746,col 9)-(line 1746,col 85)",
                "(line 1747,col 9)-(line 1747,col 110)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang3.StringUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
            "signature": "org.apache.commons.lang3.StringUtilsTest.testStartsWithAny()",
            "snippet": "public void testStartsWithAny() {\nassertFalse(StringUtils.startsWithAny(null, null));\nassertFalse(StringUtils.startsWithAny(null, new String[] {\"abc\"}));\nassertFalse(StringUtils.startsWithAny(\"abcxyz\", null));\nassertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {}));\nassertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}));\nassertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}));\nassertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n}",
            "begin_line": 1750,
            "end_line": 1758,
            "comment": "         StringUtils.remove(\"queued\", 'z') = \"queued\"",
            "child_ranges": [
                "(line 1751,col 9)-(line 1751,col 59)",
                "(line 1752,col 9)-(line 1752,col 75)",
                "(line 1753,col 9)-(line 1753,col 63)",
                "(line 1754,col 9)-(line 1754,col 74)",
                "(line 1755,col 9)-(line 1755,col 78)",
                "(line 1756,col 9)-(line 1756,col 91)",
                "(line 1757,col 9)-(line 1757,col 93)"
            ]
        }
    ]
]