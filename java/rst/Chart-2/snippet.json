[
  {
    "name": "ComparableObjectItem.ComparableObjectItem#71",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.ComparableObjectItem",
    "snippet": "public ComparableObjectItem(Comparable x,Object y){\n  if (x \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027x\u0027 argument.\");\n  }\n  this.x\u003dx;\n  this.obj\u003dy;\n}",
    "begin_line": 71,
    "end_line": 78,
    "comment": "/** \n * Constructs a new data item.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.getComparable#84",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.getComparable",
    "snippet": "protected Comparable getComparable(){\n  return this.x;\n}",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Returns the x-value.\n * @return The x-value (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.getObject#93",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.getObject",
    "snippet": "protected Object getObject(){\n  return this.obj;\n}",
    "begin_line": 93,
    "end_line": 96,
    "comment": "/** \n * Returns the y-value.\n * @return The y-value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.setObject#102",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.setObject",
    "snippet": "protected void setObject(Object y){\n  this.obj\u003dy;\n}",
    "begin_line": 102,
    "end_line": 106,
    "comment": "/** \n * Sets the y-value for this data item.  Note that there is no corresponding method to change the x-value.\n * @param y  the new y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.compareTo#113",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.compareTo",
    "snippet": "public int compareTo(Object o1){\n  int result;\n  if (o1 instanceof ComparableObjectItem) {\n    ComparableObjectItem that\u003d(ComparableObjectItem)o1;\n    return this.x.compareTo(that.x);\n  }\n else {\n    result\u003d1;\n  }\n  return result;\n}",
    "begin_line": 113,
    "end_line": 140,
    "comment": "/** \n * Returns an integer indicating the order of this object relative to another object. \u003cP\u003e For the order we consider only the x-value: negative \u003d\u003d \"less-than\", zero \u003d\u003d \"equal\", positive \u003d\u003d \"greater-than\".\n * @param o1  the object being compared to.\n * @return An integer indicating the order of this data pair objectrelative to another object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.clone#143",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 143,
    "end_line": 152,
    "comment": "/** \n * Returns a clone of this object.\n * @return A clone.\n * @throws CloneNotSupportedException not thrown by this class, butsubclasses may differ.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.equals#159",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ComparableObjectItem)) {\n    return false;\n  }\n  ComparableObjectItem that\u003d(ComparableObjectItem)obj;\n  if (!this.x.equals(that.x)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.obj,that.obj)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 159,
    "end_line": 177,
    "comment": "/** \n * Tests if this object is equal to another.\n * @param obj  the object to test against for equality (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectItem.hashCode#183",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectItem.java",
    "class_name": "org.jfree.data.ComparableObjectItem",
    "signature": "org.jfree.data.ComparableObjectItem.hashCode",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.x.hashCode();\n  result\u003d29 * result + (this.obj !\u003d null ? this.obj.hashCode() : 0);\n  return result;\n}",
    "begin_line": 183,
    "end_line": 189,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.ComparableObjectSeries#79",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.ComparableObjectSeries",
    "snippet": "public ComparableObjectSeries(Comparable key){\n  this(key,true,true);\n}",
    "begin_line": 79,
    "end_line": 84,
    "comment": "/** \n * Creates a new empty series.  By default, items added to the series will be sorted into ascending order by x-value, and duplicate x-values will be allowed (these defaults can be modified with another constructor.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.ComparableObjectSeries#92",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.ComparableObjectSeries",
    "snippet": "public ComparableObjectSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){\n  super(key);\n  this.data\u003dnew java.util.ArrayList();\n  this.autoSort\u003dautoSort;\n  this.allowDuplicateXValues\u003dallowDuplicateXValues;\n}",
    "begin_line": 92,
    "end_line": 102,
    "comment": "/** \n * Constructs a new series that contains no data.  You can specify whether or not duplicate x-values are allowed for the series.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param autoSort  a flag that controls whether or not the items in theseries are sorted.\n * @param allowDuplicateXValues  a flag that controls whether duplicatex-values are allowed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.getAutoSort#108",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.getAutoSort",
    "snippet": "public boolean getAutoSort(){\n  return this.autoSort;\n}",
    "begin_line": 108,
    "end_line": 113,
    "comment": "/** \n * Returns the flag that controls whether the items in the series are automatically sorted.  There is no setter for this flag, it must be defined in the series constructor.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.getAllowDuplicateXValues#119",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.getAllowDuplicateXValues",
    "snippet": "public boolean getAllowDuplicateXValues(){\n  return this.allowDuplicateXValues;\n}",
    "begin_line": 119,
    "end_line": 123,
    "comment": "/** \n * Returns a flag that controls whether duplicate x-values are allowed. This flag can only be set in the constructor.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.getItemCount#129",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.getItemCount",
    "snippet": "public int getItemCount(){\n  return this.data.size();\n}",
    "begin_line": 129,
    "end_line": 132,
    "comment": "/** \n * Returns the number of items in the series.\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.getMaximumItemCount#139",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.getMaximumItemCount",
    "snippet": "public int getMaximumItemCount(){\n  return this.maximumItemCount;\n}",
    "begin_line": 139,
    "end_line": 143,
    "comment": "/** \n * Returns the maximum number of items that will be retained in the series. The default value is \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e.\n * @return The maximum item count.\n * @see #setMaximumItemCount(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.setMaximumItemCount#149",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.setMaximumItemCount",
    "snippet": "public void setMaximumItemCount(int maximum){\n  this.maximumItemCount\u003dmaximum;\n  boolean dataRemoved\u003dfalse;\n  while (this.data.size() \u003e maximum) {\n    this.data.remove(0);\n    dataRemoved\u003dtrue;\n  }\n  if (dataRemoved) {\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 149,
    "end_line": 169,
    "comment": "/** \n * Sets the maximum number of items that will be retained in the series. If you add a new item to the series such that the number of items will exceed the maximum item count, then the first element in the series is automatically removed, ensuring that the maximum item count is not exceeded. \u003cp\u003e Typically this value is set before the series is populated with data, but if it is applied later, it may cause some items to be removed from the series (in which case a  {@link SeriesChangeEvent} will be sent toall registered listeners.\n * @param maximum  the maximum number of items for the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.add#176",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.add",
    "snippet": "protected void add(Comparable x,Object y){\n  add(x,y,true);\n}",
    "begin_line": 176,
    "end_line": 184,
    "comment": "/** \n * Adds new data to the series and sends a  {@link SeriesChangeEvent} toall registered listeners. \u003cP\u003e Throws an exception if the x-value is a duplicate AND the allowDuplicateXValues flag is false.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.add#192",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.add",
    "snippet": "protected void add(Comparable x,Object y,boolean notify){\n  ComparableObjectItem item\u003dnew ComparableObjectItem(x,y);\n  add(item,notify);\n}",
    "begin_line": 192,
    "end_line": 203,
    "comment": "/** \n * Adds new data to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.\u003cP\u003e Throws an exception if the x-value is a duplicate AND the allowDuplicateXValues flag is false.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  a flag the controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.add#210",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.add",
    "snippet": "protected void add(ComparableObjectItem item,boolean notify){\n  if (item \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027item\u0027 argument.\");\n  }\n  if (this.autoSort) {\n    int index\u003dCollections.binarySearch(this.data,item);\n    if (index \u003c 0) {\n      this.data.add(-index - 1,item);\n    }\n else {\n      if (this.allowDuplicateXValues) {\n        int size\u003dthis.data.size();\n        while (index \u003c size \u0026\u0026 item.compareTo(this.data.get(index)) \u003d\u003d 0) {\n          index++;\n        }\n        if (index \u003c this.data.size()) {\n          this.data.add(index,item);\n        }\n else {\n          this.data.add(item);\n        }\n      }\n else {\n        throw new SeriesException(\"X-value already exists.\");\n      }\n    }\n  }\n else {\n    if (!this.allowDuplicateXValues) {\n      int index\u003dindexOf(item.getComparable());\n      if (index \u003e\u003d 0) {\n        throw new SeriesException(\"X-value already exists.\");\n      }\n    }\n    this.data.add(item);\n  }\n  if (getItemCount() \u003e this.maximumItemCount) {\n    this.data.remove(0);\n  }\n  if (notify) {\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 210,
    "end_line": 262,
    "comment": "/** \n * Adds a data item to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param item  the (x, y) item (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.indexOf#269",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.indexOf",
    "snippet": "public int indexOf(Comparable x){\n  if (this.autoSort) {\n    return Collections.binarySearch(this.data,new ComparableObjectItem(x,null));\n  }\n else {\n    for (int i\u003d0; i \u003c this.data.size(); i++) {\n      ComparableObjectItem item\u003d(ComparableObjectItem)this.data.get(i);\n      if (item.getComparable().equals(x)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}",
    "begin_line": 269,
    "end_line": 289,
    "comment": "/** \n * Returns the index of the item with the specified x-value, or a negative index if the series does not contain an item with that x-value.  Be aware that for an unsorted series, the index is found by iterating through all items in the series.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.update#297",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.update",
    "snippet": "protected void update(Comparable x,Object y){\n  int index\u003dindexOf(x);\n  if (index \u003c 0) {\n    throw new SeriesException(\"No observation for x \u003d \" + x);\n  }\n else {\n    ComparableObjectItem item\u003dgetDataItem(index);\n    item.setObject(y);\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 297,
    "end_line": 310,
    "comment": "/** \n * Updates an item in the series.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @throws SeriesException if there is no existing item with the specifiedx-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.updateByIndex#317",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.updateByIndex",
    "snippet": "protected void updateByIndex(int index,Object y){\n  ComparableObjectItem item\u003dgetDataItem(index);\n  item.setObject(y);\n  fireSeriesChanged();\n}",
    "begin_line": 317,
    "end_line": 323,
    "comment": "/** \n * Updates the value of an item in the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param index  the item (zero based index).\n * @param y  the new value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.getDataItem#330",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.getDataItem",
    "snippet": "protected ComparableObjectItem getDataItem(int index){\n  return (ComparableObjectItem)this.data.get(index);\n}",
    "begin_line": 330,
    "end_line": 334,
    "comment": "/** \n * Return the data item with the specified index.\n * @param index  the index.\n * @return The data item with the specified index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.delete#341",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.delete",
    "snippet": "protected void delete(int start,int end){\n  for (int i\u003dstart; i \u003c\u003d end; i++) {\n    this.data.remove(start);\n  }\n  fireSeriesChanged();\n}",
    "begin_line": 341,
    "end_line": 348,
    "comment": "/** \n * Deletes a range of items from the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param start  the start index (zero-based).\n * @param end  the end index (zero-based).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.clear#353",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.clear",
    "snippet": "public void clear(){\n  if (this.data.size() \u003e 0) {\n    this.data.clear();\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 353,
    "end_line": 360,
    "comment": "/** \n * Removes all data items from the series and, unless the series is already empty, sends a  {@link SeriesChangeEvent} to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.remove#365",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.remove",
    "snippet": "protected ComparableObjectItem remove(int index){\n  ComparableObjectItem result\u003d(ComparableObjectItem)this.data.remove(index);\n  fireSeriesChanged();\n  return result;\n}",
    "begin_line": 365,
    "end_line": 375,
    "comment": "/** \n * Removes the item at the specified index and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param index  the index.\n * @return The item removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.remove#380",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.remove",
    "snippet": "public ComparableObjectItem remove(Comparable x){\n  return remove(indexOf(x));\n}",
    "begin_line": 380,
    "end_line": 387,
    "comment": "/** \n * Removes the item with the specified x-value and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param x  the x-value.\n * @return The item removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.equals#394",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ComparableObjectSeries)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  ComparableObjectSeries that\u003d(ComparableObjectSeries)obj;\n  if (this.maximumItemCount !\u003d that.maximumItemCount) {\n    return false;\n  }\n  if (this.autoSort !\u003d that.autoSort) {\n    return false;\n  }\n  if (this.allowDuplicateXValues !\u003d that.allowDuplicateXValues) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 394,
    "end_line": 421,
    "comment": "/** \n * Tests this series for equality with an arbitrary object.\n * @param obj  the object to test against for equality(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ComparableObjectSeries.hashCode#427",
    "is_bug": true,
    "src_path": "source/org/jfree/data/ComparableObjectSeries.java",
    "class_name": "org.jfree.data.ComparableObjectSeries",
    "signature": "org.jfree.data.ComparableObjectSeries.hashCode",
    "snippet": "public int hashCode(){\n  int result\u003dsuper.hashCode();\n  int count\u003dgetItemCount();\n  if (count \u003e 0) {\n    ComparableObjectItem item\u003dgetDataItem(0);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 1) {\n    ComparableObjectItem item\u003dgetDataItem(count - 1);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 2) {\n    ComparableObjectItem item\u003dgetDataItem(count / 2);\n    result\u003d29 * result + item.hashCode();\n  }\n  result\u003d29 * result + this.maximumItemCount;\n  result\u003d29 * result + (this.autoSort ? 1 : 0);\n  result\u003d29 * result + (this.allowDuplicateXValues ? 1 : 0);\n  return result;\n}",
    "begin_line": 427,
    "end_line": 449,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetChangeEvent.DatasetChangeEvent#79",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/DatasetChangeEvent.java",
    "class_name": "org.jfree.data.event.DatasetChangeEvent",
    "signature": "org.jfree.data.event.DatasetChangeEvent.DatasetChangeEvent",
    "snippet": "public DatasetChangeEvent(Object source,Dataset dataset,DatasetChangeInfo info){\n  super(source);\n  if (info \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027info\u0027 argument.\");\n  }\n  this.dataset\u003ddataset;\n  this.info\u003dinfo;\n}",
    "begin_line": 79,
    "end_line": 93,
    "comment": "/** \n * Constructs a new event.  The source is either the dataset or the {@link Plot} class.  The dataset can be \u003ccode\u003enull\u003c/code\u003e (in this casethe source will be the  {@link Plot} class).\n * @param source  the source of the event.\n * @param dataset  the dataset that generated the event (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param info  information about the change (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetChangeEvent.getDataset#99",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/DatasetChangeEvent.java",
    "class_name": "org.jfree.data.event.DatasetChangeEvent",
    "signature": "org.jfree.data.event.DatasetChangeEvent.getDataset",
    "snippet": "public Dataset getDataset(){\n  return this.dataset;\n}",
    "begin_line": 99,
    "end_line": 104,
    "comment": "/** \n * Returns the dataset that generated the event.  Note that the dataset may be \u003ccode\u003enull\u003c/code\u003e since adding a \u003ccode\u003enull\u003c/code\u003e dataset to a plot will generated a change event.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetChangeEvent.getInfo#111",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/DatasetChangeEvent.java",
    "class_name": "org.jfree.data.event.DatasetChangeEvent",
    "signature": "org.jfree.data.event.DatasetChangeEvent.getInfo",
    "snippet": "public DatasetChangeInfo getInfo(){\n  return this.info;\n}",
    "begin_line": 111,
    "end_line": 115,
    "comment": "/** \n * Returns the dataset change info.\n * @return The dataset change info.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.SeriesChangeEvent#68",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.event.SeriesChangeEvent",
    "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent",
    "snippet": "public SeriesChangeEvent(Object source){\n  this(source,null);\n}",
    "begin_line": 68,
    "end_line": 71,
    "comment": "/** \n * Constructs a new event.\n * @param source  the source of the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.SeriesChangeEvent#79",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.event.SeriesChangeEvent",
    "signature": "org.jfree.data.event.SeriesChangeEvent.SeriesChangeEvent",
    "snippet": "public SeriesChangeEvent(Object source,SeriesChangeInfo summary){\n  super(source);\n  this.summary\u003dsummary;\n}",
    "begin_line": 79,
    "end_line": 84,
    "comment": "/** \n * Constructs a new change event.\n * @param source  the event source.\n * @param summary  a summary of the change (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.getSummary#91",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.event.SeriesChangeEvent",
    "signature": "org.jfree.data.event.SeriesChangeEvent.getSummary",
    "snippet": "public SeriesChangeInfo getSummary(){\n  return this.summary;\n}",
    "begin_line": 91,
    "end_line": 95,
    "comment": "/** \n * Returns a summary of the change for this event.\n * @return The change summary (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.setSummary#102",
    "is_bug": true,
    "src_path": "source/org/jfree/data/event/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.event.SeriesChangeEvent",
    "signature": "org.jfree.data.event.SeriesChangeEvent.setSummary",
    "snippet": "public void setSummary(SeriesChangeInfo summary){\n  this.summary\u003dsummary;\n}",
    "begin_line": 102,
    "end_line": 106,
    "comment": "/** \n * Sets the change info for this event.\n * @param summary  the info (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.AbstractDataset#94",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset",
    "snippet": "protected AbstractDataset(){\n  this.group\u003dnew DatasetGroup();\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 94,
    "end_line": 98,
    "comment": "/** \n * Constructs a dataset. By default, the dataset is assigned to its own group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.getGroup#105",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.getGroup",
    "snippet": "public DatasetGroup getGroup(){\n  return this.group;\n}",
    "begin_line": 105,
    "end_line": 109,
    "comment": "/** \n * Returns the dataset group for the dataset.\n * @return The group (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGroup(DatasetGroup)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.setGroup#116",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.setGroup",
    "snippet": "public void setGroup(DatasetGroup group){\n  if (group \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027group\u0027 argument.\");\n  }\n  this.group\u003dgroup;\n}",
    "begin_line": 116,
    "end_line": 123,
    "comment": "/** \n * Sets the dataset group for the dataset.\n * @param group  the group (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGroup()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.addChangeListener#130",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.addChangeListener",
    "snippet": "public void addChangeListener(DatasetChangeListener listener){\n  this.listenerList.add(DatasetChangeListener.class,listener);\n}",
    "begin_line": 130,
    "end_line": 134,
    "comment": "/** \n * Registers an object to receive notification of changes to the dataset.\n * @param listener  the object to register.\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.removeChangeListener#141",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.removeChangeListener",
    "snippet": "public void removeChangeListener(DatasetChangeListener listener){\n  this.listenerList.remove(DatasetChangeListener.class,listener);\n}",
    "begin_line": 141,
    "end_line": 146,
    "comment": "/** \n * Deregisters an object so that it no longer receives notification of changes to the dataset.\n * @param listener  the object to deregister.\n * @see #addChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.hasListener#155",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.hasListener",
    "snippet": "public boolean hasListener(EventListener listener){\n  List list\u003dArrays.asList(this.listenerList.getListenerList());\n  return list.contains(listener);\n}",
    "begin_line": 155,
    "end_line": 163,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified object is registered with the dataset as a listener.  Most applications won\u0027t need to call this method, it exists mainly for use by unit testing code.\n * @param listener  the listener.\n * @return A boolean.\n * @see #addChangeListener(DatasetChangeListener)\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.fireDatasetChanged#171",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged",
    "snippet": "protected void fireDatasetChanged(DatasetChangeInfo info){\n  notifyListeners(new DatasetChangeEvent(this,this,info));\n}",
    "begin_line": 171,
    "end_line": 177,
    "comment": "/** \n * Notifies all registered listeners that the dataset has changed.\n * @param info  information about the change (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @see #addChangeListener(DatasetChangeListener)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.notifyListeners#185",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.notifyListeners",
    "snippet": "protected void notifyListeners(DatasetChangeEvent event){\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d DatasetChangeListener.class) {\n      ((DatasetChangeListener)listeners[i + 1]).datasetChanged(event);\n    }\n  }\n}",
    "begin_line": 185,
    "end_line": 196,
    "comment": "/** \n * Notifies all registered listeners that the dataset has changed.\n * @param event  contains information about the event that triggered thenotification.\n * @see #addChangeListener(DatasetChangeListener)\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.clone#199",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractDataset clone\u003d(AbstractDataset)super.clone();\n  clone.listenerList\u003dnew EventListenerList();\n  return clone;\n}",
    "begin_line": 199,
    "end_line": 212,
    "comment": "/** \n * Returns a clone of the dataset. The cloned dataset will NOT include the {@link DatasetChangeListener} references that have been registered withthis dataset.\n * @return A clone.\n * @throws CloneNotSupportedException  if the dataset does not supportcloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.writeObject#219",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.writeObject",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n}",
    "begin_line": 219,
    "end_line": 223,
    "comment": "/** \n * Handles serialization.\n * @param stream  the output stream.\n * @throws IOException if there is an I/O problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.readObject#231",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.readObject",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.listenerList\u003dnew EventListenerList();\n  stream.registerValidation(this,10);\n}",
    "begin_line": 231,
    "end_line": 239,
    "comment": "/** \n * Restores a serialized object.\n * @param stream  the input stream.\n * @throws IOException if there is an I/O problem.\n * @throws ClassNotFoundException if there is a problem loading a class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.validateObject#242",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.validateObject",
    "snippet": "public void validateObject() throws InvalidObjectException {\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 242,
    "end_line": 261,
    "comment": "/** \n * Validates the object. We use this opportunity to call listeners who have registered during the deserialization process, as listeners are not serialized. This method is called by the serialization system after the entire graph is read. This object has registered itself to the system with a priority of 10. Other callbacks may register with a higher priority number to be called before this object, or with a lower priority number to be called after the listeners were notified. All listeners are supposed to have register by now, either in their readObject or validateObject methods. Notify them that this dataset has changed.\n * @exception InvalidObjectException If the object cannot validate itself.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.AbstractSeriesDataset#65",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset",
    "snippet": "protected AbstractSeriesDataset(){\n  super();\n}",
    "begin_line": 65,
    "end_line": 67,
    "comment": "/** \n * Creates a new dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.getSeriesCount#73",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.getSeriesCount",
    "snippet": "public abstract int getSeriesCount();",
    "begin_line": 73,
    "end_line": 74,
    "comment": "/** \n * Returns the number of series in the dataset.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.getSeriesKey#81",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.getSeriesKey",
    "snippet": "public abstract Comparable getSeriesKey(int series);",
    "begin_line": 81,
    "end_line": 88,
    "comment": "/** \n * Returns the key for a series. \u003cp\u003e If \u003ccode\u003eseries\u003c/code\u003e is not within the specified range, the implementing method should throw an  {@link IndexOutOfBoundsException}(preferred) or an  {@link IllegalArgumentException}.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The series key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.indexOf#95",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.indexOf",
    "snippet": "public int indexOf(Comparable seriesKey){\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    if (getSeriesKey(s).equals(seriesKey)) {\n      return s;\n    }\n  }\n  return -1;\n}",
    "begin_line": 95,
    "end_line": 105,
    "comment": "/** \n * Returns the index of the named series, or -1.\n * @param seriesKey  the series key (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.seriesChanged#111",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.seriesChanged",
    "snippet": "public void seriesChanged(SeriesChangeEvent event){\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 111,
    "end_line": 116,
    "comment": "/** \n * Called when a series belonging to the dataset changes.\n * @param event  information about the change.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.DatasetGroup#62",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup",
    "snippet": "public DatasetGroup(){\n  super();\n  this.id\u003d\"NOID\";\n}",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Constructs a new group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.DatasetGroup#71",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup",
    "snippet": "public DatasetGroup(String id){\n  if (id \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027id\u0027 argument.\");\n  }\n  this.id\u003did;\n}",
    "begin_line": 71,
    "end_line": 77,
    "comment": "/** \n * Creates a new group with the specified id.\n * @param id  the identification for the group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.getID#83",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.getID",
    "snippet": "public String getID(){\n  return this.id;\n}",
    "begin_line": 83,
    "end_line": 86,
    "comment": "/** \n * Returns the identification string for this group.\n * @return The identification string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.clone#90",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 90,
    "end_line": 97,
    "comment": "/** \n * Clones the group.\n * @return A clone.\n * @throws CloneNotSupportedException not by this class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.equals#104",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DatasetGroup)) {\n    return false;\n  }\n  DatasetGroup that\u003d(DatasetGroup)obj;\n  if (!this.id.equals(that.id)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 104,
    "end_line": 118,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.DatasetUtilities#167",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.DatasetUtilities",
    "snippet": "private DatasetUtilities(){\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Private constructor for non-instanceability.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.calculatePieDatasetTotal#176",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal",
    "snippet": "public static double calculatePieDatasetTotal(PieDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  List keys\u003ddataset.getKeys();\n  double totalValue\u003d0;\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable current\u003d(Comparable)iterator.next();\n    if (current !\u003d null) {\n      Number value\u003ddataset.getValue(current);\n      double v\u003d0.0;\n      if (value !\u003d null) {\n        v\u003dvalue.doubleValue();\n      }\n      if (v \u003e 0) {\n        totalValue\u003dtotalValue + v;\n      }\n    }\n  }\n  return totalValue;\n}",
    "begin_line": 176,
    "end_line": 201,
    "comment": "/** \n * Calculates the total of all the values in a  {@link PieDataset}.  If the dataset contains negative or \u003ccode\u003enull\u003c/code\u003e values, they are ignored.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The total.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForRow#209",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForRow",
    "snippet": "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,Comparable rowKey){\n  int row\u003ddataset.getRowIndex(rowKey);\n  return createPieDatasetForRow(dataset,row);\n}",
    "begin_line": 209,
    "end_line": 216,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single row.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param rowKey  the row key.\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForRow#224",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForRow",
    "snippet": "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,int row){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  int columnCount\u003ddataset.getColumnCount();\n  for (int current\u003d0; current \u003c columnCount; current++) {\n    Comparable columnKey\u003ddataset.getColumnKey(current);\n    result.setValue(columnKey,dataset.getValue(row,current));\n  }\n  return result;\n}",
    "begin_line": 224,
    "end_line": 236,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single row.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param row  the row (zero-based index).\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForColumn#244",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn",
    "snippet": "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,Comparable columnKey){\n  int column\u003ddataset.getColumnIndex(columnKey);\n  return createPieDatasetForColumn(dataset,column);\n}",
    "begin_line": 244,
    "end_line": 251,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single column.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param columnKey  the column key.\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForColumn#259",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn",
    "snippet": "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,int column){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  int rowCount\u003ddataset.getRowCount();\n  for (int i\u003d0; i \u003c rowCount; i++) {\n    Comparable rowKey\u003ddataset.getRowKey(i);\n    result.setValue(rowKey,dataset.getValue(i,column));\n  }\n  return result;\n}",
    "begin_line": 259,
    "end_line": 271,
    "comment": "/** \n * Creates a pie dataset from a  {@link CategoryDataset} by taking all thevalues for a single column.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param column  the column (zero-based index).\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createConsolidatedPieDataset#280",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset",
    "snippet": "public static PieDataset createConsolidatedPieDataset(PieDataset source,Comparable key,double minimumPercent){\n  return DatasetUtilities.createConsolidatedPieDataset(source,key,minimumPercent,2);\n}",
    "begin_line": 280,
    "end_line": 290,
    "comment": "/** \n * Creates a new pie dataset based on the supplied dataset, but modified by aggregating all the low value items (those whose value is lower than the \u003ccode\u003epercentThreshold\u003c/code\u003e) into a single item with the key \"Other\".\n * @param source  the source dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  a new key for the aggregated items (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param minimumPercent  the percent threshold.\n * @return The pie dataset with (possibly) aggregated items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createConsolidatedPieDataset#300",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset",
    "snippet": "public static PieDataset createConsolidatedPieDataset(PieDataset source,Comparable key,double minimumPercent,int minItems){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  double total\u003dDatasetUtilities.calculatePieDatasetTotal(source);\n  List keys\u003dsource.getKeys();\n  ArrayList otherKeys\u003dnew ArrayList();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable currentKey\u003d(Comparable)iterator.next();\n    Number dataValue\u003dsource.getValue(currentKey);\n    if (dataValue !\u003d null) {\n      double value\u003ddataValue.doubleValue();\n      if (value / total \u003c minimumPercent) {\n        otherKeys.add(currentKey);\n      }\n    }\n  }\n  iterator\u003dkeys.iterator();\n  double otherValue\u003d0;\n  while (iterator.hasNext()) {\n    Comparable currentKey\u003d(Comparable)iterator.next();\n    Number dataValue\u003dsource.getValue(currentKey);\n    if (dataValue !\u003d null) {\n      if (otherKeys.contains(currentKey) \u0026\u0026 otherKeys.size() \u003e\u003d minItems) {\n        otherValue+\u003ddataValue.doubleValue();\n      }\n else {\n        result.setValue(currentKey,dataValue);\n      }\n    }\n  }\n  if (otherKeys.size() \u003e\u003d minItems) {\n    result.setValue(key,otherValue);\n  }\n  return result;\n}",
    "begin_line": 300,
    "end_line": 351,
    "comment": "/** \n * Creates a new pie dataset based on the supplied dataset, but modified by aggregating all the low value items (those whose value is lower than the \u003ccode\u003epercentThreshold\u003c/code\u003e) into a single item.  The aggregated items are assigned the specified key.  Aggregation only occurs if there are at least \u003ccode\u003eminItems\u003c/code\u003e items to aggregate.\n * @param source  the source dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the key to represent the aggregated items.\n * @param minimumPercent  the percent threshold (ten percent is 0.10).\n * @param minItems  only aggregate low values if there are at least thismany.\n * @return The pie dataset with (possibly) aggregated items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#360",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset",
    "snippet": "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,String columnKeyPrefix,double[][] data){\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    String rowKey\u003drowKeyPrefix + (r + 1);\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      String columnKey\u003dcolumnKeyPrefix + (c + 1);\n      result.addValue(new Double(data[r][c]),rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 360,
    "end_line": 380,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data in anarray (instances of \u003ccode\u003eDouble\u003c/code\u003e are created to represent the data items). \u003cp\u003e Row and column keys are created by appending 0, 1, 2, ... to the supplied prefixes.\n * @param rowKeyPrefix  the row key prefix.\n * @param columnKeyPrefix  the column key prefix.\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#389",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset",
    "snippet": "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,String columnKeyPrefix,Number[][] data){\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    String rowKey\u003drowKeyPrefix + (r + 1);\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      String columnKey\u003dcolumnKeyPrefix + (c + 1);\n      result.addValue(data[r][c],rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 389,
    "end_line": 408,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data inan array. \u003cp\u003e Row and column keys are created by appending 0, 1, 2, ... to the supplied prefixes.\n * @param rowKeyPrefix  the row key prefix.\n * @param columnKeyPrefix  the column key prefix.\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#417",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset",
    "snippet": "public static CategoryDataset createCategoryDataset(Comparable[] rowKeys,Comparable[] columnKeys,double[][] data){\n  if (rowKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowKeys\u0027 argument.\");\n  }\n  if (columnKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027columnKeys\u0027 argument.\");\n  }\n  if (ArrayUtilities.hasDuplicateItems(rowKeys)) {\n    throw new IllegalArgumentException(\"Duplicate items in \u0027rowKeys\u0027.\");\n  }\n  if (ArrayUtilities.hasDuplicateItems(columnKeys)) {\n    throw new IllegalArgumentException(\"Duplicate items in \u0027columnKeys\u0027.\");\n  }\n  if (rowKeys.length !\u003d data.length) {\n    throw new IllegalArgumentException(\"The number of row keys does not match the number of rows in \" + \"the data array.\");\n  }\n  int columnCount\u003d0;\n  for (int r\u003d0; r \u003c data.length; r++) {\n    columnCount\u003dMath.max(columnCount,data[r].length);\n  }\n  if (columnKeys.length !\u003d columnCount) {\n    throw new IllegalArgumentException(\"The number of column keys does not match the number of \" + \"columns in the data array.\");\n  }\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    Comparable rowKey\u003drowKeys[r];\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      Comparable columnKey\u003dcolumnKeys[c];\n      result.addValue(new Double(data[r][c]),rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 417,
    "end_line": 466,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data inan array (instances of \u003ccode\u003eDouble\u003c/code\u003e are created to represent the data items). \u003cp\u003e Row and column keys are taken from the supplied arrays.\n * @param rowKeys  the row keys (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param columnKeys  the column keys (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#474",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset",
    "snippet": "public static CategoryDataset createCategoryDataset(Comparable rowKey,KeyedValues rowData){\n  if (rowKey \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowKey\u0027 argument.\");\n  }\n  if (rowData \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowData\u0027 argument.\");\n  }\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int i\u003d0; i \u003c rowData.getItemCount(); i++) {\n    result.addValue(rowData.getValue(i),rowKey,rowData.getKey(i));\n  }\n  return result;\n}",
    "begin_line": 474,
    "end_line": 492,
    "comment": "/** \n * Creates a  {@link CategoryDataset} by copying the data from the supplied{@link KeyedValues} instance.\n * @param rowKey  the row key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param rowData  the row data (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.sampleFunction2D#503",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.sampleFunction2D",
    "snippet": "public static XYDataset sampleFunction2D(Function2D f,double start,double end,int samples,Comparable seriesKey){\n  XYSeries series\u003dsampleFunction2DToSeries(f,start,end,samples,seriesKey);\n  XYSeriesCollection collection\u003dnew XYSeriesCollection(series);\n  return collection;\n}",
    "begin_line": 503,
    "end_line": 515,
    "comment": "/** \n * Creates an  {@link XYDataset} by sampling the specified function over afixed range.\n * @param f  the function (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param start  the start value for the range.\n * @param end  the end value for the range.\n * @param samples  the number of sample points (must be \u003e 1).\n * @param seriesKey  the key to give the resulting series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.sampleFunction2DToSeries#527",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries",
    "snippet": "public static XYSeries sampleFunction2DToSeries(Function2D f,double start,double end,int samples,Comparable seriesKey){\n  if (f \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027f\u0027 argument.\");\n  }\n  if (seriesKey \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027seriesKey\u0027 argument.\");\n  }\n  if (start \u003e\u003d end) {\n    throw new IllegalArgumentException(\"Requires \u0027start\u0027 \u003c \u0027end\u0027.\");\n  }\n  if (samples \u003c 2) {\n    throw new IllegalArgumentException(\"Requires \u0027samples\u0027 \u003e 1\");\n  }\n  XYSeries series\u003dnew XYSeries(seriesKey);\n  double step\u003d(end - start) / (samples - 1);\n  for (int i\u003d0; i \u003c samples; i++) {\n    double x\u003dstart + (step * i);\n    series.add(x,f.getValue(x));\n  }\n  return series;\n}",
    "begin_line": 527,
    "end_line": 555,
    "comment": "/** \n * Creates an  {@link XYSeries} by sampling the specified function over afixed range.\n * @param f  the function (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param start  the start value for the range.\n * @param end  the end value for the range.\n * @param samples  the number of sample points (must be \u003e 1).\n * @param seriesKey  the key to give the resulting series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A series.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#562",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull",
    "snippet": "public static boolean isEmptyOrNull(PieDataset dataset){\n  if (dataset \u003d\u003d null) {\n    return true;\n  }\n  int itemCount\u003ddataset.getItemCount();\n  if (itemCount \u003d\u003d 0) {\n    return true;\n  }\n  for (int item\u003d0; item \u003c itemCount; item++) {\n    Number y\u003ddataset.getValue(item);\n    if (y !\u003d null) {\n      double yy\u003dy.doubleValue();\n      if (yy \u003e 0.0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 562,
    "end_line": 588,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#595",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull",
    "snippet": "public static boolean isEmptyOrNull(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    return true;\n  }\n  int rowCount\u003ddataset.getRowCount();\n  int columnCount\u003ddataset.getColumnCount();\n  if (rowCount \u003d\u003d 0 || columnCount \u003d\u003d 0) {\n    return true;\n  }\n  for (int r\u003d0; r \u003c rowCount; r++) {\n    for (int c\u003d0; c \u003c columnCount; c++) {\n      if (dataset.getValue(r,c) !\u003d null) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 595,
    "end_line": 621,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#628",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull",
    "snippet": "public static boolean isEmptyOrNull(XYDataset dataset){\n  if (dataset !\u003d null) {\n    for (int s\u003d0; s \u003c dataset.getSeriesCount(); s++) {\n      if (dataset.getItemCount(s) \u003e 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 628,
    "end_line": 640,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#647",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds",
    "snippet": "public static Range findDomainBounds(XYDataset dataset){\n  return findDomainBounds(dataset,true);\n}",
    "begin_line": 647,
    "end_line": 651,
    "comment": "/** \n * Returns the range of values in the domain (x-values) of a dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range of values (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#659",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds",
    "snippet": "public static Range findDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    result\u003dinfo.getDomainBounds(includeInterval);\n  }\n else {\n    result\u003diterateDomainBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 659,
    "end_line": 681,
    "comment": "/** \n * Returns the range of values in the domain (x-values) of a dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  determines whether or not the x-interval is takeninto account (only applies if the dataset is an {@link IntervalXYDataset}).\n * @return The range of values (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#691",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds",
    "snippet": "public static Range findDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof XYDomainInfo) {\n    XYDomainInfo info\u003d(XYDomainInfo)dataset;\n    result\u003dinfo.getDomainBounds(visibleSeriesKeys,includeInterval);\n  }\n else {\n    result\u003diterateToFindDomainBounds(dataset,visibleSeriesKeys,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 691,
    "end_line": 713,
    "comment": "/** \n * Returns the bounds of the x-values in the specified \u003ccode\u003edataset\u003c/code\u003e taking into account only the visible series and including any x-interval if requested.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param includeInterval  include the x-interval (if any)?\n * @return The bounds (or \u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateDomainBounds#720",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds",
    "snippet": "public static Range iterateDomainBounds(XYDataset dataset){\n  return iterateDomainBounds(dataset,true);\n}",
    "begin_line": 720,
    "end_line": 727,
    "comment": "/** \n * Iterates over the items in an  {@link XYDataset} to findthe range of x-values.  If the dataset is an instance of {@link IntervalXYDataset}, the starting and ending x-values will be used for the bounds calculation.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateDomainBounds#735",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds",
    "snippet": "public static Range iterateDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int seriesCount\u003ddataset.getSeriesCount();\n  double lvalue;\n  double uvalue;\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        lvalue\u003dintervalXYData.getStartXValue(series,item);\n        uvalue\u003dintervalXYData.getEndXValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        lvalue\u003ddataset.getXValue(series,item);\n        uvalue\u003dlvalue;\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n  if (minimum \u003e maximum) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 735,
    "end_line": 785,
    "comment": "/** \n * Iterates over the items in an  {@link XYDataset} to findthe range of x-values.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines, for an{@link IntervalXYDataset}, whether the x-interval or just the x-value is used to determine the overall range.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#792",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset){\n  return findRangeBounds(dataset,true);\n}",
    "begin_line": 792,
    "end_line": 796,
    "comment": "/** \n * Returns the range of values in the range for the dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#804",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(includeInterval);\n  }\n else {\n    result\u003diterateRangeBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 804,
    "end_line": 821,
    "comment": "/** \n * Returns the range of values in the range for the dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#831",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof CategoryRangeInfo) {\n    CategoryRangeInfo info\u003d(CategoryRangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(visibleSeriesKeys,includeInterval);\n  }\n else {\n    result\u003diterateToFindRangeBounds(dataset,visibleSeriesKeys,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 831,
    "end_line": 852,
    "comment": "/** \n * Finds the bounds of the y-values in the specified dataset, including only those series that are listed in visibleSeriesKeys.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the keys for the visible series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  include the y-interval (if the dataset has ay-interval).\n * @return The data bounds.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#859",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(XYDataset dataset){\n  return findRangeBounds(dataset,true);\n}",
    "begin_line": 859,
    "end_line": 864,
    "comment": "/** \n * Returns the range of values in the range for the dataset.  This method is the partner for the  {@link #findDomainBounds(XYDataset)} method.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#872",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(includeInterval);\n  }\n else {\n    result\u003diterateRangeBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 872,
    "end_line": 891,
    "comment": "/** \n * Returns the range of values in the range for the dataset.  This method is the partner for the  {@link #findDomainBounds(XYDataset,boolean)}method.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#902",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds",
    "snippet": "public static Range findRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof XYRangeInfo) {\n    XYRangeInfo info\u003d(XYRangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(visibleSeriesKeys,xRange,includeInterval);\n  }\n else {\n    result\u003diterateToFindRangeBounds(dataset,visibleSeriesKeys,xRange,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 902,
    "end_line": 925,
    "comment": "/** \n * Finds the bounds of the y-values in the specified dataset, including only those series that are listed in visibleSeriesKeys, and those items whose x-values fall within the specified range.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the keys for the visible series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param xRange  the x-range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  include the y-interval (if the dataset has ay-interval).\n * @return The data bounds.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateCategoryRangeBounds#934",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds",
    "snippet": "public static Range iterateCategoryRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  return iterateRangeBounds(dataset,includeInterval);\n}",
    "begin_line": 934,
    "end_line": 943,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @deprecated As of 1.0.10, use{@link #iterateRangeBounds(CategoryDataset,boolean)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#951",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds",
    "snippet": "public static Range iterateRangeBounds(CategoryDataset dataset){\n  return iterateRangeBounds(dataset,true);\n}",
    "begin_line": 951,
    "end_line": 957,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#966",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds",
    "snippet": "public static Range iterateRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int rowCount\u003ddataset.getRowCount();\n  int columnCount\u003ddataset.getColumnCount();\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalCategoryDataset) {\n    IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n    Number value, lvalue, uvalue;\n    for (int row\u003d0; row \u003c rowCount; row++) {\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        value\u003dicd.getValue(row,column);\n        double v;\n        if ((value !\u003d null) \u0026\u0026 !Double.isNaN(v\u003dvalue.doubleValue())) {\n          minimum\u003dMath.min(v,minimum);\n          maximum\u003dMath.max(v,maximum);\n        }\n        lvalue\u003dicd.getStartValue(row,column);\n        if (lvalue !\u003d null \u0026\u0026 !Double.isNaN(v\u003dlvalue.doubleValue())) {\n          minimum\u003dMath.min(v,minimum);\n          maximum\u003dMath.max(v,maximum);\n        }\n        uvalue\u003dicd.getEndValue(row,column);\n        if (uvalue !\u003d null \u0026\u0026 !Double.isNaN(v\u003duvalue.doubleValue())) {\n          minimum\u003dMath.min(v,minimum);\n          maximum\u003dMath.max(v,maximum);\n        }\n      }\n    }\n  }\n else {\n    for (int row\u003d0; row \u003c rowCount; row++) {\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number value\u003ddataset.getValue(row,column);\n        if (value !\u003d null) {\n          double v\u003dvalue.doubleValue();\n          if (!Double.isNaN(v)) {\n            minimum\u003dMath.min(minimum,v);\n            maximum\u003dMath.max(maximum,v);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 966,
    "end_line": 1027,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindRangeBounds#1037",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds",
    "snippet": "public static Range iterateToFindRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int columnCount\u003ddataset.getColumnCount();\n  if (includeInterval \u0026\u0026 dataset instanceof BoxAndWhiskerCategoryDataset) {\n    BoxAndWhiskerCategoryDataset bx\u003d(BoxAndWhiskerCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      int itemCount\u003ddataset.getColumnCount();\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number lvalue\u003dbx.getMinRegularValue(series,item);\n        if (lvalue \u003d\u003d null) {\n          lvalue\u003dbx.getValue(series,item);\n        }\n        Number uvalue\u003dbx.getMaxRegularValue(series,item);\n        if (uvalue \u003d\u003d null) {\n          uvalue\u003dbx.getValue(series,item);\n        }\n        if (lvalue !\u003d null) {\n          minimum\u003dMath.min(minimum,lvalue.doubleValue());\n        }\n        if (uvalue !\u003d null) {\n          maximum\u003dMath.max(maximum,uvalue.doubleValue());\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof IntervalCategoryDataset) {\n    IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n    Number lvalue, uvalue;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        lvalue\u003dicd.getStartValue(series,column);\n        uvalue\u003dicd.getEndValue(series,column);\n        if (lvalue !\u003d null \u0026\u0026 !Double.isNaN(lvalue.doubleValue())) {\n          minimum\u003dMath.min(minimum,lvalue.doubleValue());\n        }\n        if (uvalue !\u003d null \u0026\u0026 !Double.isNaN(uvalue.doubleValue())) {\n          maximum\u003dMath.max(maximum,uvalue.doubleValue());\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof MultiValueCategoryDataset) {\n    MultiValueCategoryDataset mvcd\u003d(MultiValueCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        List values\u003dmvcd.getValues(series,column);\n        Iterator valueIterator\u003dvalues.iterator();\n        while (valueIterator.hasNext()) {\n          Object o\u003dvalueIterator.next();\n          if (o instanceof Number) {\n            double v\u003d((Number)o).doubleValue();\n            if (!Double.isNaN(v)) {\n              minimum\u003dMath.min(minimum,v);\n              maximum\u003dMath.max(maximum,v);\n            }\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof StatisticalCategoryDataset) {\n    StatisticalCategoryDataset scd\u003d(StatisticalCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number meanN\u003dscd.getMeanValue(series,column);\n        if (meanN !\u003d null) {\n          double std\u003d0.0;\n          Number stdN\u003dscd.getStdDevValue(series,column);\n          if (stdN !\u003d null) {\n            std\u003dstdN.doubleValue();\n            if (Double.isNaN(std)) {\n              std\u003d0.0;\n            }\n          }\n          double mean\u003dmeanN.doubleValue();\n          if (!Double.isNaN(mean)) {\n            minimum\u003dMath.min(minimum,mean - std);\n            maximum\u003dMath.max(maximum,mean + std);\n          }\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number value\u003ddataset.getValue(series,column);\n        if (value !\u003d null) {\n          double v\u003dvalue.doubleValue();\n          if (!Double.isNaN(v)) {\n            minimum\u003dMath.min(minimum,v);\n            maximum\u003dMath.max(maximum,v);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1037,
    "end_line": 1186,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @param visibleSeriesKeys  the visible series keys.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateXYRangeBounds#1194",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds",
    "snippet": "public static Range iterateXYRangeBounds(XYDataset dataset){\n  return iterateRangeBounds(dataset);\n}",
    "begin_line": 1194,
    "end_line": 1200,
    "comment": "/** \n * Iterates over the data item of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @deprecated As of 1.0.10, use {@link #iterateRangeBounds(XYDataset)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#1208",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds",
    "snippet": "public static Range iterateRangeBounds(XYDataset dataset){\n  return iterateRangeBounds(dataset,true);\n}",
    "begin_line": 1208,
    "end_line": 1214,
    "comment": "/** \n * Iterates over the data item of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#1223",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds",
    "snippet": "public static Range iterateRangeBounds(XYDataset dataset,boolean includeInterval){\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int seriesCount\u003ddataset.getSeriesCount();\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dixyd.getStartYValue(series,item);\n        double uvalue\u003dixyd.getEndYValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof OHLCDataset) {\n    OHLCDataset ohlc\u003d(OHLCDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dohlc.getLowValue(series,item);\n        double uvalue\u003dohlc.getHighValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value\u003ddataset.getYValue(series,item);\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1223,
    "end_line": 1289,
    "comment": "/** \n * Iterates over the data items of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines, for an{@link IntervalXYDataset}, whether the y-interval or just the y-value is used to determine the overall range.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindDomainBounds#1299",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds",
    "snippet": "public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dixyd.getStartXValue(series,item);\n        double uvalue\u003dixyd.getEndXValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003ddataset.getXValue(series,item);\n        if (!Double.isNaN(x)) {\n          minimum\u003dMath.min(minimum,x);\n          maximum\u003dMath.max(maximum,x);\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1299,
    "end_line": 1363,
    "comment": "/** \n * Returns the range of x-values in the specified dataset for the data items belonging to the visible series.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).\n * @return The x-range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindRangeBounds#1374",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds",
    "snippet": "public static Range iterateToFindRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  if (xRange \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027xRange\u0027 argument\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  if (includeInterval \u0026\u0026 dataset instanceof OHLCDataset) {\n    OHLCDataset ohlc\u003d(OHLCDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dohlc.getXValue(series,item);\n        if (xRange.contains(x)) {\n          double lvalue\u003dohlc.getLowValue(series,item);\n          double uvalue\u003dohlc.getHighValue(series,item);\n          if (!Double.isNaN(lvalue)) {\n            minimum\u003dMath.min(minimum,lvalue);\n          }\n          if (!Double.isNaN(uvalue)) {\n            maximum\u003dMath.max(maximum,uvalue);\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof BoxAndWhiskerXYDataset) {\n    BoxAndWhiskerXYDataset bx\u003d(BoxAndWhiskerXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dbx.getXValue(series,item);\n        if (xRange.contains(x)) {\n          Number lvalue\u003dbx.getMinRegularValue(series,item);\n          Number uvalue\u003dbx.getMaxRegularValue(series,item);\n          if (lvalue !\u003d null) {\n            minimum\u003dMath.min(minimum,lvalue.doubleValue());\n          }\n          if (uvalue !\u003d null) {\n            maximum\u003dMath.max(maximum,uvalue.doubleValue());\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dixyd.getXValue(series,item);\n        if (xRange.contains(x)) {\n          double lvalue\u003dixyd.getStartYValue(series,item);\n          double uvalue\u003dixyd.getEndYValue(series,item);\n          if (!Double.isNaN(lvalue)) {\n            minimum\u003dMath.min(minimum,lvalue);\n          }\n          if (!Double.isNaN(uvalue)) {\n            maximum\u003dMath.max(maximum,uvalue);\n          }\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003ddataset.getXValue(series,item);\n        double y\u003ddataset.getYValue(series,item);\n        if (xRange.contains(x)) {\n          if (!Double.isNaN(y)) {\n            minimum\u003dMath.min(minimum,y);\n            maximum\u003dMath.max(maximum,y);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1374,
    "end_line": 1494,
    "comment": "/** \n * Returns the range of y-values in the specified dataset for the data items belonging to the visible series and with x-values in the given range.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param xRange  the x-range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).\n * @return The y-range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumDomainValue#1501",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumDomainValue",
    "snippet": "public static Number findMinimumDomainValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    return new Double(info.getDomainLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getStartXValue(series,item);\n        }\n else {\n          value\u003ddataset.getXValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      result\u003dnull;\n    }\n else {\n      result\u003dnew Double(minimum);\n    }\n  }\n  return result;\n}",
    "begin_line": 1501,
    "end_line": 1550,
    "comment": "/** \n * Finds the minimum domain (or X) value for the specified dataset.  This is easy if the dataset implements the  {@link DomainInfo} interface (agood idea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set. \u003cp\u003e Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumDomainValue#1557",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumDomainValue",
    "snippet": "public static Number findMaximumDomainValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    return new Double(info.getDomainUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getEndXValue(series,item);\n        }\n else {\n          value\u003ddataset.getXValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      result\u003dnull;\n    }\n else {\n      result\u003dnew Double(maximum);\n    }\n  }\n  return result;\n}",
    "begin_line": 1557,
    "end_line": 1607,
    "comment": "/** \n * Returns the maximum domain value for the specified dataset.  This is easy if the dataset implements the  {@link DomainInfo} interface (a goodidea if there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumRangeValue#1614",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumRangeValue",
    "snippet": "public static Number findMinimumRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getRowCount();\n    int itemCount\u003ddataset.getColumnCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number value;\n        if (dataset instanceof IntervalCategoryDataset) {\n          IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n          value\u003dicd.getStartValue(series,item);\n        }\n else {\n          value\u003ddataset.getValue(series,item);\n        }\n        if (value !\u003d null) {\n          minimum\u003dMath.min(minimum,value.doubleValue());\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(minimum);\n    }\n  }\n}",
    "begin_line": 1614,
    "end_line": 1662,
    "comment": "/** \n * Returns the minimum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumRangeValue#1669",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumRangeValue",
    "snippet": "public static Number findMinimumRangeValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getStartYValue(series,item);\n        }\n else         if (dataset instanceof OHLCDataset) {\n          OHLCDataset highLowData\u003d(OHLCDataset)dataset;\n          value\u003dhighLowData.getLowValue(series,item);\n        }\n else {\n          value\u003ddataset.getYValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(minimum);\n    }\n  }\n}",
    "begin_line": 1669,
    "end_line": 1724,
    "comment": "/** \n * Returns the minimum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumRangeValue#1731",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumRangeValue",
    "snippet": "public static Number findMaximumRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getRowCount();\n    int itemCount\u003ddataset.getColumnCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number value;\n        if (dataset instanceof IntervalCategoryDataset) {\n          IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n          value\u003dicd.getEndValue(series,item);\n        }\n else {\n          value\u003ddataset.getValue(series,item);\n        }\n        if (value !\u003d null) {\n          maximum\u003dMath.max(maximum,value.doubleValue());\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(maximum);\n    }\n  }\n}",
    "begin_line": 1731,
    "end_line": 1780,
    "comment": "/** \n * Returns the maximum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a good ideaif there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumRangeValue#1787",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumRangeValue",
    "snippet": "public static Number findMaximumRangeValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getEndYValue(series,item);\n        }\n else         if (dataset instanceof OHLCDataset) {\n          OHLCDataset highLowData\u003d(OHLCDataset)dataset;\n          value\u003dhighLowData.getHighValue(series,item);\n        }\n else {\n          value\u003ddataset.getYValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(maximum);\n    }\n  }\n}",
    "begin_line": 1787,
    "end_line": 1840,
    "comment": "/** \n * Returns the maximum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1847",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset){\n  return findStackedRangeBounds(dataset,0.0);\n}",
    "begin_line": 1847,
    "end_line": 1852,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1860",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset,double base){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double positive\u003dbase;\n    double negative\u003dbase;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          positive\u003dpositive + value;\n        }\n        if (value \u003c 0.0) {\n          negative\u003dnegative + value;\n        }\n      }\n    }\n    minimum\u003dMath.min(minimum,negative);\n    maximum\u003dMath.max(maximum,positive);\n  }\n  if (minimum \u003c\u003d maximum) {\n    result\u003dnew Range(minimum,maximum);\n  }\n  return result;\n}",
    "begin_line": 1860,
    "end_line": 1897,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param base  the base value for the bars.\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1905",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset,KeyToGroupMap map){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  boolean hasValidData\u003dfalse;\n  Range result\u003dnull;\n  int[] groupIndex\u003dnew int[dataset.getRowCount()];\n  for (int i\u003d0; i \u003c dataset.getRowCount(); i++) {\n    groupIndex[i]\u003dmap.getGroupIndex(map.getGroup(dataset.getRowKey(i)));\n  }\n  int groupCount\u003dmap.getGroupCount();\n  double[] minimum\u003dnew double[groupCount];\n  double[] maximum\u003dnew double[groupCount];\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double[] positive\u003dnew double[groupCount];\n    double[] negative\u003dnew double[groupCount];\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          positive[groupIndex[series]]\u003dpositive[groupIndex[series]] + value;\n        }\n        if (value \u003c 0.0) {\n          negative[groupIndex[series]]\u003dnegative[groupIndex[series]] + value;\n        }\n      }\n    }\n    for (int g\u003d0; g \u003c groupCount; g++) {\n      minimum[g]\u003dMath.min(minimum[g],negative[g]);\n      maximum[g]\u003dMath.max(maximum[g],positive[g]);\n    }\n  }\n  if (hasValidData) {\n    for (int j\u003d0; j \u003c groupCount; j++) {\n      result\u003dRange.combine(result,new Range(minimum[j],maximum[j]));\n    }\n  }\n  return result;\n}",
    "begin_line": 1905,
    "end_line": 1962,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset.\n * @param map  a structure that maps series to groups.\n * @return The value range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumStackedRangeValue#1970",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue",
    "snippet": "public static Number findMinimumStackedRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  boolean hasValidData\u003dfalse;\n  double minimum\u003d0.0;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double total\u003d0.0;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003c 0.0) {\n          total\u003dtotal + value;\n        }\n      }\n    }\n    minimum\u003dMath.min(minimum,total);\n  }\n  if (hasValidData) {\n    result\u003dnew Double(minimum);\n  }\n  return result;\n}",
    "begin_line": 1970,
    "end_line": 2002,
    "comment": "/** \n * Returns the minimum value in the dataset range, assuming that values in each category are \"stacked\".\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value.\n * @see #findMaximumStackedRangeValue(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumStackedRangeValue#2010",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue",
    "snippet": "public static Number findMaximumStackedRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  boolean hasValidData\u003dfalse;\n  double maximum\u003d0.0;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double total\u003d0.0;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          total\u003dtotal + value;\n        }\n      }\n    }\n    maximum\u003dMath.max(maximum,total);\n  }\n  if (hasValidData) {\n    result\u003dnew Double(maximum);\n  }\n  return result;\n}",
    "begin_line": 2010,
    "end_line": 2041,
    "comment": "/** \n * Returns the maximum value in the dataset range, assuming that values in each category are \"stacked\".\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #findMinimumStackedRangeValue(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#2048",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds",
    "snippet": "public static Range findStackedRangeBounds(TableXYDataset dataset){\n  return findStackedRangeBounds(dataset,0.0);\n}",
    "begin_line": 2048,
    "end_line": 2053,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range, assuming that the series are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range ([0.0, 0.0] if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#2061",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds",
    "snippet": "public static Range findStackedRangeBounds(TableXYDataset dataset,double base){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  double minimum\u003dbase;\n  double maximum\u003dbase;\n  for (int itemNo\u003d0; itemNo \u003c dataset.getItemCount(); itemNo++) {\n    double positive\u003dbase;\n    double negative\u003dbase;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int seriesNo\u003d0; seriesNo \u003c seriesCount; seriesNo++) {\n      double y\u003ddataset.getYValue(seriesNo,itemNo);\n      if (!Double.isNaN(y)) {\n        if (y \u003e 0.0) {\n          positive+\u003dy;\n        }\n else {\n          negative+\u003dy;\n        }\n      }\n    }\n    if (positive \u003e maximum) {\n      maximum\u003dpositive;\n    }\n    if (negative \u003c minimum) {\n      minimum\u003dnegative;\n    }\n  }\n  if (minimum \u003c\u003d maximum) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 2061,
    "end_line": 2099,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range, assuming that the series are stacked, using the specified base value.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param base  the base value.\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.calculateStackTotal#2108",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.calculateStackTotal",
    "snippet": "public static double calculateStackTotal(TableXYDataset dataset,int item){\n  double total\u003d0.0;\n  int seriesCount\u003ddataset.getSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    double value\u003ddataset.getYValue(s,item);\n    if (!Double.isNaN(value)) {\n      total\u003dtotal + value;\n    }\n  }\n  return total;\n}",
    "begin_line": 2108,
    "end_line": 2122,
    "comment": "/** \n * Calculates the total for the y-values in all series for a given item index.\n * @param dataset  the dataset.\n * @param item  the item index.\n * @return The total.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findCumulativeRangeBounds#2130",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds",
    "snippet": "public static Range findCumulativeRangeBounds(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  boolean allItemsNull\u003dtrue;\n  double minimum\u003d0.0;\n  double maximum\u003d0.0;\n  for (int row\u003d0; row \u003c dataset.getRowCount(); row++) {\n    double runningTotal\u003d0.0;\n    for (int column\u003d0; column \u003c\u003d dataset.getColumnCount() - 1; column++) {\n      Number n\u003ddataset.getValue(row,column);\n      if (n !\u003d null) {\n        allItemsNull\u003dfalse;\n        double value\u003dn.doubleValue();\n        if (!Double.isNaN(value)) {\n          runningTotal\u003drunningTotal + value;\n          minimum\u003dMath.min(minimum,runningTotal);\n          maximum\u003dMath.max(maximum,runningTotal);\n        }\n      }\n    }\n  }\n  if (!allItemsNull) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 2130,
    "end_line": 2164,
    "comment": "/** \n * Calculates the range of values for a dataset where each item is the running total of the items for the current series.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range.\n * @see #findRangeBounds(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.Series#102",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.Series",
    "snippet": "protected Series(Comparable key){\n  this(key,null);\n}",
    "begin_line": 102,
    "end_line": 105,
    "comment": "/** \n * Creates a new series with the specified key.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.Series#112",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.Series",
    "snippet": "protected Series(Comparable key,String description){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  this.key\u003dkey;\n  this.description\u003ddescription;\n  this.listeners\u003dnew EventListenerList();\n  this.propertyChangeSupport\u003dnew PropertyChangeSupport(this);\n  this.notify\u003dtrue;\n}",
    "begin_line": 112,
    "end_line": 122,
    "comment": "/** \n * Creates a new series with the specified key and description.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param description  the series description (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getKey#129",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getKey",
    "snippet": "public Comparable getKey(){\n  return this.key;\n}",
    "begin_line": 129,
    "end_line": 133,
    "comment": "/** \n * Returns the key for the series.\n * @return The series key (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setKey(Comparable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setKey#140",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setKey",
    "snippet": "public void setKey(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  Comparable old\u003dthis.key;\n  this.key\u003dkey;\n  this.propertyChangeSupport.firePropertyChange(\"Key\",old,key);\n}",
    "begin_line": 140,
    "end_line": 150,
    "comment": "/** \n * Sets the key for the series and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e (with the property name \"Key\") to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getKey()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getDescription#157",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getDescription",
    "snippet": "public String getDescription(){\n  return this.description;\n}",
    "begin_line": 157,
    "end_line": 161,
    "comment": "/** \n * Returns a description of the series.\n * @return The series description (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDescription(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setDescription#168",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setDescription",
    "snippet": "public void setDescription(String description){\n  String old\u003dthis.description;\n  this.description\u003ddescription;\n  this.propertyChangeSupport.firePropertyChange(\"Description\",old,description);\n}",
    "begin_line": 168,
    "end_line": 176,
    "comment": "/** \n * Sets the description of the series and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e to all registered listeners.\n * @param description  the description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDescription()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getNotify#183",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getNotify",
    "snippet": "public boolean getNotify(){\n  return this.notify;\n}",
    "begin_line": 183,
    "end_line": 188,
    "comment": "/** \n * Returns the flag that controls whether or not change events are sent to registered listeners.\n * @return A boolean.\n * @see #setNotify(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setNotify#195",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setNotify",
    "snippet": "public void setNotify(boolean notify){\n  if (this.notify !\u003d notify) {\n    this.notify\u003dnotify;\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 195,
    "end_line": 203,
    "comment": "/** \n * Sets the flag that controls whether or not change events are sent to registered listeners.\n * @param notify  the new value of the flag.\n * @see #getNotify()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.isEmpty#210",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.isEmpty",
    "snippet": "public boolean isEmpty(){\n  return (getItemCount() \u003d\u003d 0);\n}",
    "begin_line": 210,
    "end_line": 215,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the series contains no data items, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getItemCount#221",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getItemCount",
    "snippet": "public abstract int getItemCount();",
    "begin_line": 221,
    "end_line": 222,
    "comment": "/** \n * Returns the number of data items in the series.\n * @return The number of data items in the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.clone#225",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Series clone\u003d(Series)super.clone();\n  clone.listeners\u003dnew EventListenerList();\n  clone.propertyChangeSupport\u003dnew PropertyChangeSupport(clone);\n  return clone;\n}",
    "begin_line": 225,
    "end_line": 248,
    "comment": "/** \n * Returns a clone of the series. \u003cP\u003e Notes: \u003cul\u003e \u003cli\u003eNo need to clone the name or description, since String object is immutable.\u003c/li\u003e \u003cli\u003eWe set the listener list to empty, since the listeners did not register with the clone.\u003c/li\u003e \u003cli\u003eSame applies to the PropertyChangeSupport instance.\u003c/li\u003e \u003c/ul\u003e\n * @return A clone of the series.\n * @throws CloneNotSupportedException  not thrown by this class, butsubclasses may differ.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.equals#255",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Series)) {\n    return false;\n  }\n  Series that\u003d(Series)obj;\n  if (!getKey().equals(that.getKey())) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(getDescription(),that.getDescription())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 255,
    "end_line": 272,
    "comment": "/** \n * Tests the series for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.hashCode#278",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.hashCode",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.key.hashCode();\n  result\u003d29 * result + (this.description !\u003d null ? this.description.hashCode() : 0);\n  return result;\n}",
    "begin_line": 278,
    "end_line": 285,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.addChangeListener#291",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.addChangeListener",
    "snippet": "public void addChangeListener(SeriesChangeListener listener){\n  this.listeners.add(SeriesChangeListener.class,listener);\n}",
    "begin_line": 291,
    "end_line": 298,
    "comment": "/** \n * Registers an object with this series, to receive notification whenever the series changes. \u003cP\u003e Objects being registered must implement the  {@link SeriesChangeListener}interface.\n * @param listener  the listener to register.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.removeChangeListener#304",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.removeChangeListener",
    "snippet": "public void removeChangeListener(SeriesChangeListener listener){\n  this.listeners.remove(SeriesChangeListener.class,listener);\n}",
    "begin_line": 304,
    "end_line": 308,
    "comment": "/** \n * Deregisters an object, so that it not longer receives notification whenever the series changes.\n * @param listener  the listener to deregister.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.fireSeriesChanged#313",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.fireSeriesChanged",
    "snippet": "public void fireSeriesChanged(){\n  if (this.notify) {\n    notifyListeners(new SeriesChangeEvent(this));\n  }\n}",
    "begin_line": 313,
    "end_line": 318,
    "comment": "/** \n * General method for signalling to registered listeners that the series has been changed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.notifyListeners#324",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.notifyListeners",
    "snippet": "protected void notifyListeners(SeriesChangeEvent event){\n  Object[] listenerList\u003dthis.listeners.getListenerList();\n  for (int i\u003dlistenerList.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listenerList[i] \u003d\u003d SeriesChangeListener.class) {\n      ((SeriesChangeListener)listenerList[i + 1]).seriesChanged(event);\n    }\n  }\n}",
    "begin_line": 324,
    "end_line": 336,
    "comment": "/** \n * Sends a change event to all registered listeners.\n * @param event  contains information about the event that triggered thenotification.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.addPropertyChangeListener#342",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.addPropertyChangeListener",
    "snippet": "public void addPropertyChangeListener(PropertyChangeListener listener){\n  this.propertyChangeSupport.addPropertyChangeListener(listener);\n}",
    "begin_line": 342,
    "end_line": 345,
    "comment": "/** \n * Adds a property change listener to the series.\n * @param listener  the listener.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.removePropertyChangeListener#351",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.removePropertyChangeListener",
    "snippet": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  this.propertyChangeSupport.removePropertyChangeListener(listener);\n}",
    "begin_line": 351,
    "end_line": 354,
    "comment": "/** \n * Removes a property change listener from the series.\n * @param listener The listener.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.firePropertyChange#362",
    "is_bug": true,
    "src_path": "source/org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.firePropertyChange",
    "snippet": "protected void firePropertyChange(String property,Object oldValue,Object newValue){\n  this.propertyChangeSupport.firePropertyChange(property,oldValue,newValue);\n}",
    "begin_line": 362,
    "end_line": 367,
    "comment": "/** \n * Fires a property change event.\n * @param property  the property key.\n * @param oldValue  the old value.\n * @param newValue  the new value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getStartXValue#60",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue",
    "snippet": "public double getStartXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetStartX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 60,
    "end_line": 70,
    "comment": "/** \n * Returns the start x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getEndXValue#78",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue",
    "snippet": "public double getEndXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetEndX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 78,
    "end_line": 88,
    "comment": "/** \n * Returns the end x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getStartYValue#96",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getStartYValue",
    "snippet": "public double getStartYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetStartY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 96,
    "end_line": 106,
    "comment": "/** \n * Returns the start y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getEndYValue#114",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getEndYValue",
    "snippet": "public double getEndYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetEndY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 114,
    "end_line": 124,
    "comment": "/** \n * Returns the end y-value (as a double primitive) for an item within a series.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getDomainOrder#62",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getDomainOrder",
    "snippet": "public DomainOrder getDomainOrder(){\n  return DomainOrder.NONE;\n}",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Returns the order of the domain (X) values.\n * @return The domain order.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getXValue#73",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getXValue",
    "snippet": "public double getXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 73,
    "end_line": 82,
    "comment": "/** \n * Returns the x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getYValue#90",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getYValue",
    "snippet": "public double getYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 90,
    "end_line": 99,
    "comment": "/** \n * Returns the y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getSelectionState#113",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getSelectionState",
    "snippet": "public XYDatasetSelectionState getSelectionState(){\n  return this.selectionState;\n}",
    "begin_line": 113,
    "end_line": 118,
    "comment": "/** \n * Returns the selection state for this dataset, if any.  The default value is \u003ccode\u003enull\u003c/code\u003e.\n * @return The selection state (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.setSelectionState#125",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.setSelectionState",
    "snippet": "public void setSelectionState(XYDatasetSelectionState state){\n  this.selectionState\u003dstate;\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 125,
    "end_line": 131,
    "comment": "/** \n * Sets the selection state for this dataset.\n * @param state  the selection state (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.XYInterval#69",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.XYInterval",
    "snippet": "public XYInterval(double xLow,double xHigh,double y,double yLow,double yHigh){\n  this.xLow\u003dxLow;\n  this.xHigh\u003dxHigh;\n  this.y\u003dy;\n  this.yLow\u003dyLow;\n  this.yHigh\u003dyHigh;\n}",
    "begin_line": 69,
    "end_line": 84,
    "comment": "/** \n * Creates a new instance of \u003ccode\u003eXYInterval\u003c/code\u003e.\n * @param xLow  the lower bound of the x-interval.\n * @param xHigh  the upper bound of the y-interval.\n * @param y  the y-value.\n * @param yLow  the lower bound of the y-interval.\n * @param yHigh  the upper bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.getXLow#90",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.getXLow",
    "snippet": "public double getXLow(){\n  return this.xLow;\n}",
    "begin_line": 90,
    "end_line": 93,
    "comment": "/** \n * Returns the lower bound of the x-interval.\n * @return The lower bound of the x-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.getXHigh#99",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.getXHigh",
    "snippet": "public double getXHigh(){\n  return this.xHigh;\n}",
    "begin_line": 99,
    "end_line": 102,
    "comment": "/** \n * Returns the upper bound of the x-interval.\n * @return The upper bound of the x-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.getY#108",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.getY",
    "snippet": "public double getY(){\n  return this.y;\n}",
    "begin_line": 108,
    "end_line": 111,
    "comment": "/** \n * Returns the y-value.\n * @return The y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.getYLow#117",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.getYLow",
    "snippet": "public double getYLow(){\n  return this.yLow;\n}",
    "begin_line": 117,
    "end_line": 120,
    "comment": "/** \n * Returns the lower bound of the y-interval.\n * @return The lower bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.getYHigh#126",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.getYHigh",
    "snippet": "public double getYHigh(){\n  return this.yHigh;\n}",
    "begin_line": 126,
    "end_line": 129,
    "comment": "/** \n * Returns the upper bound of the y-interval.\n * @return The upper bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYInterval.equals#136",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYInterval.java",
    "class_name": "org.jfree.data.xy.XYInterval",
    "signature": "org.jfree.data.xy.XYInterval.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYInterval)) {\n    return false;\n  }\n  XYInterval that\u003d(XYInterval)obj;\n  if (this.xLow !\u003d that.xLow) {\n    return false;\n  }\n  if (this.xHigh !\u003d that.xHigh) {\n    return false;\n  }\n  if (this.y !\u003d that.y) {\n    return false;\n  }\n  if (this.yLow !\u003d that.yLow) {\n    return false;\n  }\n  if (this.yHigh !\u003d that.yHigh) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 136,
    "end_line": 162,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.XYIntervalDataItem#61",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.XYIntervalDataItem",
    "snippet": "public XYIntervalDataItem(double x,double xLow,double xHigh,double y,double yLow,double yHigh){\n  super(new Double(x),new XYInterval(xLow,xHigh,y,yLow,yHigh));\n}",
    "begin_line": 61,
    "end_line": 65,
    "comment": "/** \n * Creates a new instance of \u003ccode\u003eXYIntervalItem\u003c/code\u003e.\n * @param x  the x-value.\n * @param xLow  the lower bound of the x-interval.\n * @param xHigh  the upper bound of the x-interval.\n * @param y  the y-value.\n * @param yLow  the lower bound of the y-interval.\n * @param yHigh  the upper bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getX#71",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getX",
    "snippet": "public Double getX(){\n  return (Double)getComparable();\n}",
    "begin_line": 71,
    "end_line": 74,
    "comment": "/** \n * Returns the x-value.\n * @return The x-value (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getYValue#80",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getYValue",
    "snippet": "public double getYValue(){\n  XYInterval interval\u003d(XYInterval)getObject();\n  if (interval !\u003d null) {\n    return interval.getY();\n  }\n else {\n    return Double.NaN;\n  }\n}",
    "begin_line": 80,
    "end_line": 89,
    "comment": "/** \n * Returns the y-value.\n * @return The y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getXLowValue#95",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getXLowValue",
    "snippet": "public double getXLowValue(){\n  XYInterval interval\u003d(XYInterval)getObject();\n  if (interval !\u003d null) {\n    return interval.getXLow();\n  }\n else {\n    return Double.NaN;\n  }\n}",
    "begin_line": 95,
    "end_line": 104,
    "comment": "/** \n * Returns the lower bound of the x-interval.\n * @return The lower bound of the x-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getXHighValue#110",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getXHighValue",
    "snippet": "public double getXHighValue(){\n  XYInterval interval\u003d(XYInterval)getObject();\n  if (interval !\u003d null) {\n    return interval.getXHigh();\n  }\n else {\n    return Double.NaN;\n  }\n}",
    "begin_line": 110,
    "end_line": 119,
    "comment": "/** \n * Returns the upper bound of the x-interval.\n * @return The upper bound of the x-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getYLowValue#125",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getYLowValue",
    "snippet": "public double getYLowValue(){\n  XYInterval interval\u003d(XYInterval)getObject();\n  if (interval !\u003d null) {\n    return interval.getYLow();\n  }\n else {\n    return Double.NaN;\n  }\n}",
    "begin_line": 125,
    "end_line": 134,
    "comment": "/** \n * Returns the lower bound of the y-interval.\n * @return The lower bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalDataItem.getYHighValue#140",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalDataItem.java",
    "class_name": "org.jfree.data.xy.XYIntervalDataItem",
    "signature": "org.jfree.data.xy.XYIntervalDataItem.getYHighValue",
    "snippet": "public double getYHighValue(){\n  XYInterval interval\u003d(XYInterval)getObject();\n  if (interval !\u003d null) {\n    return interval.getYHigh();\n  }\n else {\n    return Double.NaN;\n  }\n}",
    "begin_line": 140,
    "end_line": 149,
    "comment": "/** \n * Returns the upper bound of the y-interval.\n * @return The upper bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.XYIntervalSeries#60",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.XYIntervalSeries",
    "snippet": "public XYIntervalSeries(Comparable key){\n  this(key,true,true);\n}",
    "begin_line": 60,
    "end_line": 65,
    "comment": "/** \n * Creates a new empty series.  By default, items added to the series will be sorted into ascending order by x-value, and duplicate x-values will be allowed (these defaults can be modified with another constructor).\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.XYIntervalSeries#73",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.XYIntervalSeries",
    "snippet": "public XYIntervalSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){\n  super(key,autoSort,allowDuplicateXValues);\n}",
    "begin_line": 73,
    "end_line": 80,
    "comment": "/** \n * Constructs a new xy-series that contains no data.  You can specify whether or not duplicate x-values are allowed for the series.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param autoSort  a flag that controls whether or not the items in theseries are sorted.\n * @param allowDuplicateXValues  a flag that controls whether duplicatex-values are allowed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.add#91",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.add",
    "snippet": "public void add(double x,double xLow,double xHigh,double y,double yLow,double yHigh){\n  super.add(new XYIntervalDataItem(x,xLow,xHigh,y,yLow,yHigh),true);\n}",
    "begin_line": 91,
    "end_line": 95,
    "comment": "/** \n * Adds a data item to the series.\n * @param x  the x-value.\n * @param xLow  the lower bound of the x-interval.\n * @param xHigh  the upper bound of the x-interval.\n * @param y  the y-value.\n * @param yLow  the lower bound of the y-interval.\n * @param yHigh  the upper bound of the y-interval.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getX#102",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getX",
    "snippet": "public Number getX(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getX();\n}",
    "begin_line": 102,
    "end_line": 107,
    "comment": "/** \n * Returns the x-value for the specified item.\n * @param index  the item index.\n * @return The x-value (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getXLowValue#115",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getXLowValue",
    "snippet": "public double getXLowValue(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getXLowValue();\n}",
    "begin_line": 115,
    "end_line": 122,
    "comment": "/** \n * Returns the lower bound of the x-interval for the specified item in the series.\n * @param index  the item index.\n * @return The lower bound of the x-interval.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getXHighValue#130",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getXHighValue",
    "snippet": "public double getXHighValue(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getXHighValue();\n}",
    "begin_line": 130,
    "end_line": 137,
    "comment": "/** \n * Returns the upper bound of the x-interval for the specified item in the series.\n * @param index  the item index.\n * @return The upper bound of the x-interval.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getYValue#144",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getYValue",
    "snippet": "public double getYValue(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getYValue();\n}",
    "begin_line": 144,
    "end_line": 149,
    "comment": "/** \n * Returns the y-value for the specified item.\n * @param index  the item index.\n * @return The y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getYLowValue#157",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getYLowValue",
    "snippet": "public double getYLowValue(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getYLowValue();\n}",
    "begin_line": 157,
    "end_line": 164,
    "comment": "/** \n * Returns the lower bound of the Y-interval for the specified item in the series.\n * @param index  the item index.\n * @return The lower bound of the Y-interval.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getYHighValue#172",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getYHighValue",
    "snippet": "public double getYHighValue(int index){\n  XYIntervalDataItem item\u003d(XYIntervalDataItem)getDataItem(index);\n  return item.getYHighValue();\n}",
    "begin_line": 172,
    "end_line": 179,
    "comment": "/** \n * Returns the upper bound of the y-interval for the specified item in the series.\n * @param index  the item index.\n * @return The upper bound of the y-interval.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeries.getDataItem#186",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeries.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeries",
    "signature": "org.jfree.data.xy.XYIntervalSeries.getDataItem",
    "snippet": "public ComparableObjectItem getDataItem(int index){\n  return super.getDataItem(index);\n}",
    "begin_line": 186,
    "end_line": 190,
    "comment": "/** \n * Returns the data item at the specified index.\n * @param index  the item index.\n * @return The data item.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.XYIntervalSeriesCollection#73",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.XYIntervalSeriesCollection",
    "snippet": "public XYIntervalSeriesCollection(){\n  this.data\u003dnew java.util.ArrayList();\n}",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Creates a new instance of \u003ccode\u003eXIntervalSeriesCollection\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.addSeries#81",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.addSeries",
    "snippet": "public void addSeries(XYIntervalSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  this.data.add(series);\n  series.addChangeListener(this);\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 81,
    "end_line": 91,
    "comment": "/** \n * Adds a series to the collection and sends a  {@link DatasetChangeEvent}to all registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getSeriesCount#97",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount",
    "snippet": "public int getSeriesCount(){\n  return this.data.size();\n}",
    "begin_line": 97,
    "end_line": 100,
    "comment": "/** \n * Returns the number of series in the collection.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getSeries#106",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getSeries",
    "snippet": "public XYIntervalSeries getSeries(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds\");\n  }\n  return (XYIntervalSeries)this.data.get(series);\n}",
    "begin_line": 106,
    "end_line": 117,
    "comment": "/** \n * Returns a series from the collection.\n * @param series  the series index (zero-based).\n * @return The series.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in therange \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getSeriesKey#125",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey",
    "snippet": "public Comparable getSeriesKey(int series){\n  return getSeries(series).getKey();\n}",
    "begin_line": 125,
    "end_line": 133,
    "comment": "/** \n * Returns the key for a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The key for a series.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in thespecified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getItemCount#141",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount",
    "snippet": "public int getItemCount(int series){\n  return getSeries(series).getItemCount();\n}",
    "begin_line": 141,
    "end_line": 148,
    "comment": "/** \n * Returns the number of items in the specified series.\n * @param series  the series (zero-based index).\n * @return The item count.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in therange \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getX#156",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getX",
    "snippet": "public Number getX(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getX(item);\n}",
    "begin_line": 156,
    "end_line": 161,
    "comment": "/** \n * Returns the x-value for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getStartXValue#169",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue",
    "snippet": "public double getStartXValue(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getXLowValue(item);\n}",
    "begin_line": 169,
    "end_line": 175,
    "comment": "/** \n * Returns the start x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getEndXValue#183",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue",
    "snippet": "public double getEndXValue(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getXHighValue(item);\n}",
    "begin_line": 183,
    "end_line": 189,
    "comment": "/** \n * Returns the end x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getYValue#197",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getYValue",
    "snippet": "public double getYValue(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getYValue(item);\n}",
    "begin_line": 197,
    "end_line": 203,
    "comment": "/** \n * Returns the y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getStartYValue#211",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartYValue",
    "snippet": "public double getStartYValue(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getYLowValue(item);\n}",
    "begin_line": 211,
    "end_line": 217,
    "comment": "/** \n * Returns the start y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getEndYValue#225",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndYValue",
    "snippet": "public double getEndYValue(int series,int item){\n  XYIntervalSeries s\u003d(XYIntervalSeries)this.data.get(series);\n  return s.getYHighValue(item);\n}",
    "begin_line": 225,
    "end_line": 231,
    "comment": "/** \n * Returns the end y-value (as a double primitive) for an item within a series.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getY#239",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getY",
    "snippet": "public Number getY(int series,int item){\n  return new Double(getYValue(series,item));\n}",
    "begin_line": 239,
    "end_line": 243,
    "comment": "/** \n * Returns the y-value for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getStartX#251",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartX",
    "snippet": "public Number getStartX(int series,int item){\n  return new Double(getStartXValue(series,item));\n}",
    "begin_line": 251,
    "end_line": 255,
    "comment": "/** \n * Returns the start x-value for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getEndX#263",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndX",
    "snippet": "public Number getEndX(int series,int item){\n  return new Double(getEndXValue(series,item));\n}",
    "begin_line": 263,
    "end_line": 267,
    "comment": "/** \n * Returns the end x-value for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getStartY#275",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getStartY",
    "snippet": "public Number getStartY(int series,int item){\n  return new Double(getStartYValue(series,item));\n}",
    "begin_line": 275,
    "end_line": 280,
    "comment": "/** \n * Returns the start y-value for an item within a series.  This method maps directly to  {@link #getY(int,int)}.\n * @param series  the series index.\n * @param item  the item index.\n * @return The start y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.getEndY#288",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.getEndY",
    "snippet": "public Number getEndY(int series,int item){\n  return new Double(getEndYValue(series,item));\n}",
    "begin_line": 288,
    "end_line": 293,
    "comment": "/** \n * Returns the end y-value for an item within a series.  This method maps directly to  {@link #getY(int,int)}.\n * @param series  the series index.\n * @param item  the item index.\n * @return The end y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.removeSeries#300",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.removeSeries",
    "snippet": "public void removeSeries(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds.\");\n  }\n  XYIntervalSeries ts\u003d(XYIntervalSeries)this.data.get(series);\n  ts.removeChangeListener(this);\n  this.data.remove(series);\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 300,
    "end_line": 312,
    "comment": "/** \n * Removes a series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.removeSeries#319",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.removeSeries",
    "snippet": "public void removeSeries(XYIntervalSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  if (this.data.contains(series)) {\n    series.removeChangeListener(this);\n    this.data.remove(series);\n    fireDatasetChanged(new DatasetChangeInfo());\n  }\n}",
    "begin_line": 319,
    "end_line": 332,
    "comment": "/** \n * Removes a series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.removeAllSeries#338",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.removeAllSeries",
    "snippet": "public void removeAllSeries(){\n  for (int i\u003d0; i \u003c this.data.size(); i++) {\n    XYIntervalSeries series\u003d(XYIntervalSeries)this.data.get(i);\n    series.removeChangeListener(this);\n  }\n  this.data.clear();\n  fireDatasetChanged(new DatasetChangeInfo());\n}",
    "begin_line": 338,
    "end_line": 350,
    "comment": "/** \n * Removes all the series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.equals#357",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.equals",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYIntervalSeriesCollection)) {\n    return false;\n  }\n  XYIntervalSeriesCollection that\u003d(XYIntervalSeriesCollection)obj;\n  return ObjectUtilities.equal(this.data,that.data);\n}",
    "begin_line": 357,
    "end_line": 368,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYIntervalSeriesCollection.clone#371",
    "is_bug": true,
    "src_path": "source/org/jfree/data/xy/XYIntervalSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYIntervalSeriesCollection",
    "signature": "org.jfree.data.xy.XYIntervalSeriesCollection.clone",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYIntervalSeriesCollection clone\u003d(XYIntervalSeriesCollection)super.clone();\n  int seriesCount\u003dgetSeriesCount();\n  clone.data\u003dnew java.util.ArrayList(seriesCount);\n  for (int i\u003d0; i \u003c this.data.size(); i++) {\n    clone.data.set(i,getSeries(i).clone());\n  }\n  return clone;\n}",
    "begin_line": 371,
    "end_line": 386,
    "comment": "/** \n * Returns a clone of this dataset.\n * @return A clone of this dataset.\n * @throws CloneNotSupportedException if there is a problem cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]