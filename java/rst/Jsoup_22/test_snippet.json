[
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.handlesBaseUri()",
    "snippet": "@Test public void handlesBaseUri(){\n  Tag tag\u003dTag.valueOf(\"a\");\n  Attributes attribs\u003dnew Attributes();\n  attribs.put(\"relHref\",\"/foo\");\n  attribs.put(\"absHref\",\"http:",
    "begin_line": 18,
    "end_line": 36,
    "comment": "",
    "child_ranges": [
      "(line 19,col 9)-(line 19,col 35)",
      "(line 20,col 9)-(line 20,col 46)",
      "(line 21,col 9)-(line 21,col 39)",
      "(line 22,col 9)-(line 22,col 49)",
      "(line 24,col 9)-(line 24,col 55)",
      "(line 25,col 9)-(line 25,col 51)",
      "(line 26,col 9)-(line 26,col 65)",
      "(line 28,col 9)-(line 28,col 68)",
      "(line 29,col 9)-(line 29,col 67)",
      "(line 30,col 9)-(line 30,col 67)",
      "(line 31,col 9)-(line 31,col 51)",
      "(line 33,col 9)-(line 33,col 81)",
      "(line 34,col 9)-(line 34,col 68)",
      "(line 35,col 9)-(line 35,col 54)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.setBaseUriIsRecursive()",
    "snippet": "@Test public void setBaseUriIsRecursive(){\n  Document doc\u003dJsoup.parse(\"\u003cdiv\u003e\u003cp\u003e\u003c/p\u003e\u003c/div\u003e\");\n  String baseUri\u003d\"http:",
    "begin_line": 38,
    "end_line": 46,
    "comment": "",
    "child_ranges": [
      "(line 39,col 9)-(line 39,col 57)",
      "(line 40,col 9)-(line 40,col 44)",
      "(line 41,col 9)-(line 41,col 32)",
      "(line 43,col 9)-(line 43,col 45)",
      "(line 44,col 9)-(line 44,col 67)",
      "(line 45,col 9)-(line 45,col 65)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.handlesAbsPrefix()",
    "snippet": "@Test public void handlesAbsPrefix(){\n  Document doc\u003dJsoup.parse(\"\u003ca href\u003d/foo\u003eHello\u003c/a\u003e\",\"http:",
    "begin_line": 48,
    "end_line": 54,
    "comment": "",
    "child_ranges": [
      "(line 49,col 9)-(line 49,col 82)",
      "(line 50,col 9)-(line 50,col 44)",
      "(line 51,col 9)-(line 51,col 45)",
      "(line 52,col 9)-(line 52,col 65)",
      "(line 53,col 9)-(line 53,col 42)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.handlesAbsOnImage()",
    "snippet": "@Test public void handlesAbsOnImage(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003e\u003cimg src\u003d\\\"/rez/osi_logo.png\\\" /\u003e\u003c/p\u003e\",\"http:",
    "begin_line": 56,
    "end_line": 61,
    "comment": "",
    "child_ranges": [
      "(line 57,col 9)-(line 57,col 100)",
      "(line 58,col 9)-(line 58,col 48)",
      "(line 59,col 9)-(line 59,col 79)",
      "(line 60,col 9)-(line 60,col 61)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.handlesAbsPrefixOnHasAttr()",
    "snippet": "@Test public void handlesAbsPrefixOnHasAttr(){\n  Document doc\u003dJsoup.parse(\"\u003ca id\u003d1 href\u003d\u0027/foo\u0027\u003eOne\u003c/a\u003e \u003ca id\u003d2 href\u003d\u0027http:",
    "begin_line": 63,
    "end_line": 76,
    "comment": "",
    "child_ranges": [
      "(line 65,col 9)-(line 65,col 107)",
      "(line 66,col 9)-(line 66,col 47)",
      "(line 67,col 9)-(line 67,col 47)",
      "(line 69,col 9)-(line 69,col 45)",
      "(line 70,col 9)-(line 70,col 40)",
      "(line 71,col 9)-(line 71,col 45)",
      "(line 73,col 9)-(line 73,col 44)",
      "(line 74,col 9)-(line 74,col 40)",
      "(line 75,col 9)-(line 75,col 62)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.literalAbsPrefix()",
    "snippet": "@Test public void literalAbsPrefix(){\n  Document doc\u003dJsoup.parse(\"\u003ca abs:href\u003d\u0027odd\u0027\u003eOne\u003c/a\u003e\");\n  Element el\u003ddoc.select(\"a\").first();\n  assertTrue(el.hasAttr(\"abs:href\"));\n  assertEquals(\"odd\",el.attr(\"abs:href\"));\n}",
    "begin_line": 78,
    "end_line": 84,
    "comment": "",
    "child_ranges": [
      "(line 80,col 9)-(line 80,col 64)",
      "(line 81,col 9)-(line 81,col 45)",
      "(line 82,col 9)-(line 82,col 43)",
      "(line 83,col 9)-(line 83,col 49)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.absHandlesRelativeQuery()",
    "snippet": "@Test public void absHandlesRelativeQuery(){\n  Document doc\u003dJsoup.parse(\"\u003ca href\u003d\u0027?foo\u0027\u003eOne\u003c/a\u003e \u003ca href\u003d\u0027bar.html?foo\u0027\u003eTwo\u003c/a\u003e\",\"http:",
    "begin_line": 89,
    "end_line": 97,
    "comment": "",
    "child_ranges": [
      "(line 90,col 9)-(line 90,col 126)",
      "(line 92,col 9)-(line 92,col 45)",
      "(line 93,col 9)-(line 93,col 74)",
      "(line 95,col 9)-(line 95,col 44)",
      "(line 96,col 9)-(line 96,col 78)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.testRemove()",
    "snippet": "@Test public void testRemove(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003eOne \u003cspan\u003etwo\u003c/span\u003e three\u003c/p\u003e\");\n  Element p\u003ddoc.select(\"p\").first();\n  p.childNode(0).remove();\n  assertEquals(\"two three\",p.text());\n  assertEquals(\"\u003cspan\u003etwo\u003c/span\u003e three\",TextUtil.stripNewlines(p.html()));\n}",
    "begin_line": 99,
    "end_line": 106,
    "comment": "",
    "child_ranges": [
      "(line 100,col 9)-(line 100,col 72)",
      "(line 101,col 9)-(line 101,col 44)",
      "(line 102,col 9)-(line 102,col 32)",
      "(line 104,col 9)-(line 104,col 44)",
      "(line 105,col 9)-(line 105,col 81)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.testReplace()",
    "snippet": "@Test public void testReplace(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003eOne \u003cspan\u003etwo\u003c/span\u003e three\u003c/p\u003e\");\n  Element p\u003ddoc.select(\"p\").first();\n  Element insert\u003ddoc.createElement(\"em\").text(\"foo\");\n  p.childNode(1).replaceWith(insert);\n  assertEquals(\"One \u003cem\u003efoo\u003c/em\u003e three\",p.html());\n}",
    "begin_line": 108,
    "end_line": 115,
    "comment": "",
    "child_ranges": [
      "(line 109,col 9)-(line 109,col 72)",
      "(line 110,col 9)-(line 110,col 44)",
      "(line 111,col 9)-(line 111,col 61)",
      "(line 112,col 9)-(line 112,col 43)",
      "(line 114,col 9)-(line 114,col 57)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.ownerDocument()",
    "snippet": "@Test public void ownerDocument(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003eHello\");\n  Element p\u003ddoc.select(\"p\").first();\n  assertTrue(p.ownerDocument() \u003d\u003d doc);\n  assertTrue(doc.ownerDocument() \u003d\u003d doc);\n  assertNull(doc.parent());\n}",
    "begin_line": 117,
    "end_line": 123,
    "comment": "",
    "child_ranges": [
      "(line 118,col 9)-(line 118,col 47)",
      "(line 119,col 9)-(line 119,col 44)",
      "(line 120,col 9)-(line 120,col 45)",
      "(line 121,col 9)-(line 121,col 47)",
      "(line 122,col 9)-(line 122,col 33)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.before()",
    "snippet": "@Test public void before(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003eOne \u003cb\u003etwo\u003c/b\u003e three\u003c/p\u003e\");\n  Element newNode\u003dnew Element(Tag.valueOf(\"em\"),\"\");\n  newNode.appendText(\"four\");\n  doc.select(\"b\").first().before(newNode);\n  assertEquals(\"\u003cp\u003eOne \u003cem\u003efour\u003c/em\u003e\u003cb\u003etwo\u003c/b\u003e three\u003c/p\u003e\",doc.body().html());\n  doc.select(\"b\").first().before(\"\u003ci\u003efive\u003c/i\u003e\");\n  assertEquals(\"\u003cp\u003eOne \u003cem\u003efour\u003c/em\u003e\u003ci\u003efive\u003c/i\u003e\u003cb\u003etwo\u003c/b\u003e three\u003c/p\u003e\",doc.body().html());\n}",
    "begin_line": 125,
    "end_line": 135,
    "comment": "",
    "child_ranges": [
      "(line 126,col 9)-(line 126,col 66)",
      "(line 127,col 9)-(line 127,col 61)",
      "(line 128,col 9)-(line 128,col 35)",
      "(line 130,col 9)-(line 130,col 48)",
      "(line 131,col 9)-(line 131,col 84)",
      "(line 133,col 9)-(line 133,col 54)",
      "(line 134,col 9)-(line 134,col 95)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.after()",
    "snippet": "@Test public void after(){\n  Document doc\u003dJsoup.parse(\"\u003cp\u003eOne \u003cb\u003etwo\u003c/b\u003e three\u003c/p\u003e\");\n  Element newNode\u003dnew Element(Tag.valueOf(\"em\"),\"\");\n  newNode.appendText(\"four\");\n  doc.select(\"b\").first().after(newNode);\n  assertEquals(\"\u003cp\u003eOne \u003cb\u003etwo\u003c/b\u003e\u003cem\u003efour\u003c/em\u003e three\u003c/p\u003e\",doc.body().html());\n  doc.select(\"b\").first().after(\"\u003ci\u003efive\u003c/i\u003e\");\n  assertEquals(\"\u003cp\u003eOne \u003cb\u003etwo\u003c/b\u003e\u003ci\u003efive\u003c/i\u003e\u003cem\u003efour\u003c/em\u003e three\u003c/p\u003e\",doc.body().html());\n}",
    "begin_line": 137,
    "end_line": 147,
    "comment": "",
    "child_ranges": [
      "(line 138,col 9)-(line 138,col 66)",
      "(line 139,col 9)-(line 139,col 61)",
      "(line 140,col 9)-(line 140,col 35)",
      "(line 142,col 9)-(line 142,col 47)",
      "(line 143,col 9)-(line 143,col 84)",
      "(line 145,col 9)-(line 145,col 53)",
      "(line 146,col 9)-(line 146,col 95)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.unwrap()",
    "snippet": "@Test public void unwrap(){\n  Document doc\u003dJsoup.parse(\"\u003cdiv\u003eOne \u003cspan\u003eTwo \u003cb\u003eThree\u003c/b\u003e\u003c/span\u003e Four\u003c/div\u003e\");\n  Element span\u003ddoc.select(\"span\").first();\n  Node twoText\u003dspan.childNode(0);\n  Node node\u003dspan.unwrap();\n  assertEquals(\"\u003cdiv\u003eOne Two \u003cb\u003eThree\u003c/b\u003e Four\u003c/div\u003e\",TextUtil.stripNewlines(doc.body().html()));\n  assertTrue(node instanceof TextNode);\n  assertEquals(\"Two \",((TextNode)node).text());\n  assertEquals(node,twoText);\n  assertEquals(node.parent(),doc.select(\"div\").first());\n}",
    "begin_line": 149,
    "end_line": 160,
    "comment": "",
    "child_ranges": [
      "(line 150,col 9)-(line 150,col 88)",
      "(line 151,col 9)-(line 151,col 50)",
      "(line 152,col 9)-(line 152,col 41)",
      "(line 153,col 9)-(line 153,col 34)",
      "(line 155,col 9)-(line 155,col 104)",
      "(line 156,col 9)-(line 156,col 45)",
      "(line 157,col 9)-(line 157,col 55)",
      "(line 158,col 9)-(line 158,col 36)",
      "(line 159,col 9)-(line 159,col 63)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.unwrapNoChildren()",
    "snippet": "@Test public void unwrapNoChildren(){\n  Document doc\u003dJsoup.parse(\"\u003cdiv\u003eOne \u003cspan\u003e\u003c/span\u003e Two\u003c/div\u003e\");\n  Element span\u003ddoc.select(\"span\").first();\n  Node node\u003dspan.unwrap();\n  assertEquals(\"\u003cdiv\u003eOne  Two\u003c/div\u003e\",TextUtil.stripNewlines(doc.body().html()));\n  assertTrue(node \u003d\u003d null);\n}",
    "begin_line": 162,
    "end_line": 168,
    "comment": "",
    "child_ranges": [
      "(line 163,col 9)-(line 163,col 71)",
      "(line 164,col 9)-(line 164,col 50)",
      "(line 165,col 9)-(line 165,col 34)",
      "(line 166,col 9)-(line 166,col 87)",
      "(line 167,col 9)-(line 167,col 33)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.traverse()",
    "snippet": "@Test public void traverse(){\n  Document doc\u003dJsoup.parse(\"\u003cdiv\u003e\u003cp\u003eHello\u003c/p\u003e\u003c/div\u003e\u003cdiv\u003eThere\u003c/div\u003e\");\n  final StringBuilder accum\u003dnew StringBuilder();\n  doc.select(\"div\").first().traverse(new NodeVisitor(){\n    public void head(    Node node,    int depth){\n      accum.append(\"\u003c\" + node.nodeName() + \"\u003e\");\n    }\n    public void tail(    Node node,    int depth){\n      accum.append(\"\u003c/\" + node.nodeName() + \"\u003e\");\n    }\n  }\n);\n  assertEquals(\"\u003cdiv\u003e\u003cp\u003e\u003c#text\u003e\u003c/#text\u003e\u003c/p\u003e\u003c/div\u003e\",accum.toString());\n}",
    "begin_line": 170,
    "end_line": 183,
    "comment": "",
    "child_ranges": [
      "(line 171,col 9)-(line 171,col 78)",
      "(line 172,col 9)-(line 172,col 56)",
      "(line 173,col 9)-(line 181,col 11)",
      "(line 182,col 9)-(line 182,col 76)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.head(Node, int)",
    "snippet": "public void head(Node node,int depth){\n  accum.append(\"\u003c\" + node.nodeName() + \"\u003e\");\n}",
    "begin_line": 174,
    "end_line": 176,
    "comment": "",
    "child_ranges": [
      "(line 175,col 17)-(line 175,col 58)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.tail(Node, int)",
    "snippet": "public void tail(Node node,int depth){\n  accum.append(\"\u003c/\" + node.nodeName() + \"\u003e\");\n}",
    "begin_line": 178,
    "end_line": 180,
    "comment": "",
    "child_ranges": [
      "(line 179,col 17)-(line 179,col 59)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.orphanNodeReturnsNullForSiblingElements()",
    "snippet": "@Test public void orphanNodeReturnsNullForSiblingElements(){\n  Node node\u003dnew Element(Tag.valueOf(\"p\"),\"\");\n  Element el\u003dnew Element(Tag.valueOf(\"p\"),\"\");\n  assertEquals(0,node.siblingIndex());\n  assertEquals(0,node.siblingNodes().size());\n  assertNull(node.previousSibling());\n  assertNull(node.nextSibling());\n  assertEquals(0,el.siblingElements().size());\n  assertNull(el.previousElementSibling());\n  assertNull(el.nextElementSibling());\n}",
    "begin_line": 185,
    "end_line": 198,
    "comment": "",
    "child_ranges": [
      "(line 186,col 9)-(line 186,col 54)",
      "(line 187,col 9)-(line 187,col 55)",
      "(line 189,col 9)-(line 189,col 45)",
      "(line 190,col 9)-(line 190,col 52)",
      "(line 192,col 9)-(line 192,col 43)",
      "(line 193,col 9)-(line 193,col 39)",
      "(line 195,col 9)-(line 195,col 53)",
      "(line 196,col 9)-(line 196,col 48)",
      "(line 197,col 9)-(line 197,col 44)"
    ]
  },
  {
    "class_name": "org.jsoup.nodes.NodeTest",
    "child_classes": [],
    "src_path": "org/jsoup/nodes/NodeTest.java",
    "signature": "org.jsoup.nodes.NodeTest.nodeIsNotASiblingOfItself()",
    "snippet": "@Test public void nodeIsNotASiblingOfItself(){\n  Document doc\u003dJsoup.parse(\"\u003cdiv\u003e\u003cp\u003eOne\u003cp\u003eTwo\u003cp\u003eThree\u003c/div\u003e\");\n  Element p2\u003ddoc.select(\"p\").get(1);\n  assertEquals(\"Two\",p2.text());\n  List\u003cNode\u003e nodes\u003dp2.siblingNodes();\n  assertEquals(2,nodes.size());\n  assertEquals(\"\u003cp\u003eOne\u003c/p\u003e\",nodes.get(0).outerHtml());\n  assertEquals(\"\u003cp\u003eThree\u003c/p\u003e\",nodes.get(1).outerHtml());\n}",
    "begin_line": 200,
    "end_line": 209,
    "comment": "",
    "child_ranges": [
      "(line 201,col 9)-(line 201,col 70)",
      "(line 202,col 9)-(line 202,col 44)",
      "(line 204,col 9)-(line 204,col 39)",
      "(line 205,col 9)-(line 205,col 45)",
      "(line 206,col 9)-(line 206,col 38)",
      "(line 207,col 9)-(line 207,col 61)",
      "(line 208,col 9)-(line 208,col 63)"
    ]
  }
]