[
  {
    "name": "ChartColor.ChartColor#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartColor.java",
    "class_name": "org.jfree.chart.ChartColor",
    "signature": "org.jfree.chart.ChartColor.ChartColor(int, int, int)",
    "snippet": "public ChartColor(int r,int g,int b){\n  super(r,g,b);\n}",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Creates a Color with an opaque sRGB with red, green and blue values in range 0-255.\n * @param r  the red component in range 0x00-0xFF.\n * @param g  the green component in range 0x00-0xFF.\n * @param b  the blue component in range 0x00-0xFF.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartColor.createDefaultPaintArray#149",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartColor.java",
    "class_name": "org.jfree.chart.ChartColor",
    "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
    "snippet": "public static Paint[] createDefaultPaintArray(){\n  return new Paint[]{new Color(0xFF,0x55,0x55),new Color(0x55,0x55,0xFF),new Color(0x55,0xFF,0x55),new Color(0xFF,0xFF,0x55),new Color(0xFF,0x55,0xFF),new Color(0x55,0xFF,0xFF),Color.pink,Color.gray,ChartColor.DARK_RED,ChartColor.DARK_BLUE,ChartColor.DARK_GREEN,ChartColor.DARK_YELLOW,ChartColor.DARK_MAGENTA,ChartColor.DARK_CYAN,Color.darkGray,ChartColor.LIGHT_RED,ChartColor.LIGHT_BLUE,ChartColor.LIGHT_GREEN,ChartColor.LIGHT_YELLOW,ChartColor.LIGHT_MAGENTA,ChartColor.LIGHT_CYAN,Color.lightGray,ChartColor.VERY_DARK_RED,ChartColor.VERY_DARK_BLUE,ChartColor.VERY_DARK_GREEN,ChartColor.VERY_DARK_YELLOW,ChartColor.VERY_DARK_MAGENTA,ChartColor.VERY_DARK_CYAN,ChartColor.VERY_LIGHT_RED,ChartColor.VERY_LIGHT_BLUE,ChartColor.VERY_LIGHT_GREEN,ChartColor.VERY_LIGHT_YELLOW,ChartColor.VERY_LIGHT_MAGENTA,ChartColor.VERY_LIGHT_CYAN};\n}",
    "begin_line": 149,
    "end_line": 187,
    "comment": "/** \n * Convenience method to return an array of \u003ccode\u003ePaint\u003c/code\u003e objects that represent the pre-defined colors in the \u003ccode\u003eColor\u003ccode\u003e and \u003ccode\u003eChartColor\u003c/code\u003e objects.\n * @return An array of objects with the \u003ccode\u003ePaint\u003c/code\u003e interface.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.getChartTheme#245",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.getChartTheme()",
    "snippet": "public static ChartTheme getChartTheme(){\n  return currentTheme;\n}",
    "begin_line": 245,
    "end_line": 247,
    "comment": "/** \n * Returns the current chart theme used by the factory.\n * @return The chart theme.\n * @see #setChartTheme(ChartTheme)\n * @see ChartUtilities#applyCurrentTheme(JFreeChart)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.setChartTheme#260",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.setChartTheme(org.jfree.chart.ChartTheme)",
    "snippet": "public static void setChartTheme(ChartTheme theme){\n  if (theme \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027theme\u0027 argument.\");\n  }\n  currentTheme\u003dtheme;\n  if (theme instanceof StandardChartTheme) {\n    StandardChartTheme sct\u003d(StandardChartTheme)theme;\n    if (sct.getName().equals(\"Legacy\")) {\n      BarRenderer.setDefaultBarPainter(new StandardBarPainter());\n      XYBarRenderer.setDefaultBarPainter(new StandardXYBarPainter());\n    }\n else {\n      BarRenderer.setDefaultBarPainter(new GradientBarPainter());\n      XYBarRenderer.setDefaultBarPainter(new GradientXYBarPainter());\n    }\n  }\n}",
    "begin_line": 260,
    "end_line": 279,
    "comment": "/** \n * Sets the current chart theme.  This will be applied to all new charts created via methods in this class.\n * @param theme  the theme (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getChartTheme()\n * @see ChartUtilities#applyCurrentTheme(JFreeChart)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart#297",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, java.util.Locale)",
    "snippet": "public static JFreeChart createPieChart(String title,PieDataset dataset,boolean legend,boolean tooltips,Locale locale){\n  PiePlot plot\u003dnew PiePlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 297,
    "end_line": 311,
    "comment": "/** \n * Creates a pie chart with default settings. \u003cP\u003e The chart object returned by this method uses a  {@link PiePlot} instanceas the plot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A pie chart.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart#327",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createPieChart(String title,PieDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  PiePlot plot\u003dnew PiePlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator());\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n  }\n  if (urls) {\n    plot.setURLGenerator(new StandardPieURLGenerator());\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 327,
    "end_line": 346,
    "comment": "/** \n * Creates a pie chart with default settings. \u003cP\u003e The chart object returned by this method uses a  {@link PiePlot} instanceas the plot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A pie chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart#388",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, org.jfree.data.general.PieDataset, int, boolean, boolean, boolean, java.util.Locale, boolean, boolean)",
    "snippet": "public static JFreeChart createPieChart(String title,PieDataset dataset,PieDataset previousDataset,int percentDiffForMaxScale,boolean greenForIncrease,boolean legend,boolean tooltips,Locale locale,boolean subTitle,boolean showDifference){\n  PiePlot plot\u003dnew PiePlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n  }\n  List keys\u003ddataset.getKeys();\n  DefaultPieDataset series\u003dnull;\n  if (showDifference) {\n    series\u003dnew DefaultPieDataset();\n  }\n  double colorPerPercent\u003d255.0 / percentDiffForMaxScale;\n  for (Iterator it\u003dkeys.iterator(); it.hasNext(); ) {\n    Comparable key\u003d(Comparable)it.next();\n    Number newValue\u003ddataset.getValue(key);\n    Number oldValue\u003dpreviousDataset.getValue(key);\n    if (oldValue \u003d\u003d null) {\n      if (greenForIncrease) {\n        plot.setSectionPaint(key,Color.green);\n      }\n else {\n        plot.setSectionPaint(key,Color.red);\n      }\n      if (showDifference) {\n        series.setValue(key + \" (+100%)\",newValue);\n      }\n    }\n else {\n      double percentChange\u003d(newValue.doubleValue() / oldValue.doubleValue() - 1.0) * 100.0;\n      double shade\u003d(Math.abs(percentChange) \u003e\u003d percentDiffForMaxScale ? 255 : Math.abs(percentChange) * colorPerPercent);\n      if (greenForIncrease \u0026\u0026 newValue.doubleValue() \u003e oldValue.doubleValue() || !greenForIncrease \u0026\u0026 newValue.doubleValue() \u003c oldValue.doubleValue()) {\n        plot.setSectionPaint(key,new Color(0,(int)shade,0));\n      }\n else {\n        plot.setSectionPaint(key,new Color((int)shade,0,0));\n      }\n      if (showDifference) {\n        series.setValue(key + \" (\" + (percentChange \u003e\u003d 0 ? \"+\" : \"\")+ NumberFormat.getPercentInstance().format(percentChange / 100.0)+ \")\",newValue);\n      }\n    }\n  }\n  if (showDifference) {\n    plot.setDataset(series);\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  if (subTitle) {\n    TextTitle subtitle\u003dnull;\n    subtitle\u003dnew TextTitle(\"Bright \" + (greenForIncrease ? \"red\" : \"green\") + \"\u003dchange \u003e\u003d-\"+ percentDiffForMaxScale+ \"%, Bright \"+ (!greenForIncrease ? \"red\" : \"green\")+ \"\u003dchange \u003e\u003d+\"+ percentDiffForMaxScale+ \"%\",new Font(\"Tahoma\",Font.PLAIN,10));\n    chart.addSubtitle(subtitle);\n  }\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 388,
    "end_line": 465,
    "comment": "/** \n * Creates a pie chart with default settings that compares 2 datasets. The colour of each section will be determined by the move from the value for the same key in \u003ccode\u003epreviousDataset\u003c/code\u003e. ie if value1 \u003e value2 then the section will be in green (unless \u003ccode\u003egreenForIncrease\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, in which case it would be \u003ccode\u003ered\u003c/code\u003e). Each section can have a shade of red or green as the difference can be tailored between 0% (black) and percentDiffForMaxScale% (bright red/green). \u003cp\u003e For instance if \u003ccode\u003epercentDiffForMaxScale\u003c/code\u003e is 10 (10%), a difference of 5% will have a half shade of red/green, a difference of 10% or more will have a maximum shade/brightness of red/green. \u003cP\u003e The chart object returned by this method uses a  {@link PiePlot} instanceas the plot. \u003cp\u003e Written by \u003ca href\u003d\"mailto:opensource@objectlab.co.uk\"\u003eBenoit Xhenseval\u003c/a\u003e.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param previousDataset  the dataset for the last run, this will be usedto compare each key in the dataset\n * @param percentDiffForMaxScale scale goes from bright red/green to black,percentDiffForMaxScale indicate the change required to reach top scale.\n * @param greenForIncrease  an increase since previousDataset will bedisplayed in green (decrease red) if true.\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param subTitle displays a subtitle with colour scheme if true\n * @param showDifference  create a new dataset that will show the %difference between the two datasets.\n * @return A pie chart.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart#505",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset, org.jfree.data.general.PieDataset, int, boolean, boolean, boolean, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createPieChart(String title,PieDataset dataset,PieDataset previousDataset,int percentDiffForMaxScale,boolean greenForIncrease,boolean legend,boolean tooltips,boolean urls,boolean subTitle,boolean showDifference){\n  PiePlot plot\u003dnew PiePlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator());\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n  }\n  if (urls) {\n    plot.setURLGenerator(new StandardPieURLGenerator());\n  }\n  List keys\u003ddataset.getKeys();\n  DefaultPieDataset series\u003dnull;\n  if (showDifference) {\n    series\u003dnew DefaultPieDataset();\n  }\n  double colorPerPercent\u003d255.0 / percentDiffForMaxScale;\n  for (Iterator it\u003dkeys.iterator(); it.hasNext(); ) {\n    Comparable key\u003d(Comparable)it.next();\n    Number newValue\u003ddataset.getValue(key);\n    Number oldValue\u003dpreviousDataset.getValue(key);\n    if (oldValue \u003d\u003d null) {\n      if (greenForIncrease) {\n        plot.setSectionPaint(key,Color.green);\n      }\n else {\n        plot.setSectionPaint(key,Color.red);\n      }\n      if (showDifference) {\n        series.setValue(key + \" (+100%)\",newValue);\n      }\n    }\n else {\n      double percentChange\u003d(newValue.doubleValue() / oldValue.doubleValue() - 1.0) * 100.0;\n      double shade\u003d(Math.abs(percentChange) \u003e\u003d percentDiffForMaxScale ? 255 : Math.abs(percentChange) * colorPerPercent);\n      if (greenForIncrease \u0026\u0026 newValue.doubleValue() \u003e oldValue.doubleValue() || !greenForIncrease \u0026\u0026 newValue.doubleValue() \u003c oldValue.doubleValue()) {\n        plot.setSectionPaint(key,new Color(0,(int)shade,0));\n      }\n else {\n        plot.setSectionPaint(key,new Color((int)shade,0,0));\n      }\n      if (showDifference) {\n        series.setValue(key + \" (\" + (percentChange \u003e\u003d 0 ? \"+\" : \"\")+ NumberFormat.getPercentInstance().format(percentChange / 100.0)+ \")\",newValue);\n      }\n    }\n  }\n  if (showDifference) {\n    plot.setDataset(series);\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  if (subTitle) {\n    TextTitle subtitle\u003dnull;\n    subtitle\u003dnew TextTitle(\"Bright \" + (greenForIncrease ? \"red\" : \"green\") + \"\u003dchange \u003e\u003d-\"+ percentDiffForMaxScale+ \"%, Bright \"+ (!greenForIncrease ? \"red\" : \"green\")+ \"\u003dchange \u003e\u003d+\"+ percentDiffForMaxScale+ \"%\",new Font(\"Tahoma\",Font.PLAIN,10));\n    chart.addSubtitle(subtitle);\n  }\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 505,
    "end_line": 591,
    "comment": "/** \n * Creates a pie chart with default settings that compares 2 datasets. The colour of each section will be determined by the move from the value for the same key in \u003ccode\u003epreviousDataset\u003c/code\u003e. ie if value1 \u003e value2 then the section will be in green (unless \u003ccode\u003egreenForIncrease\u003c/code\u003e is \u003ccode\u003efalse\u003c/code\u003e, in which case it would be \u003ccode\u003ered\u003c/code\u003e). Each section can have a shade of red or green as the difference can be tailored between 0% (black) and percentDiffForMaxScale% (bright red/green). \u003cp\u003e For instance if \u003ccode\u003epercentDiffForMaxScale\u003c/code\u003e is 10 (10%), a difference of 5% will have a half shade of red/green, a difference of 10% or more will have a maximum shade/brightness of red/green. \u003cP\u003e The chart object returned by this method uses a  {@link PiePlot} instanceas the plot. \u003cp\u003e Written by \u003ca href\u003d\"mailto:opensource@objectlab.co.uk\"\u003eBenoit Xhenseval\u003c/a\u003e.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param previousDataset  the dataset for the last run, this will be usedto compare each key in the dataset\n * @param percentDiffForMaxScale scale goes from bright red/green to black,percentDiffForMaxScale indicate the change required to reach top scale.\n * @param greenForIncrease  an increase since previousDataset will bedisplayed in green (decrease red) if true.\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @param subTitle displays a subtitle with colour scheme if true\n * @param showDifference  create a new dataset that will show the %difference between the two datasets.\n * @return A pie chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createRingChart#609",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createRingChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, java.util.Locale)",
    "snippet": "public static JFreeChart createRingChart(String title,PieDataset dataset,boolean legend,boolean tooltips,Locale locale){\n  RingPlot plot\u003dnew RingPlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator(locale));\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 609,
    "end_line": 622,
    "comment": "/** \n * Creates a ring chart with default settings. \u003cP\u003e The chart object returned by this method uses a  {@link RingPlot}instance as the plot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A ring chart.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createRingChart#638",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createRingChart(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createRingChart(String title,PieDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  RingPlot plot\u003dnew RingPlot(dataset);\n  plot.setLabelGenerator(new StandardPieSectionLabelGenerator());\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n  }\n  if (urls) {\n    plot.setURLGenerator(new StandardPieURLGenerator());\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 638,
    "end_line": 658,
    "comment": "/** \n * Creates a ring chart with default settings. \u003cP\u003e The chart object returned by this method uses a  {@link RingPlot}instance as the plot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A ring chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createMultiplePieChart#675",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createMultiplePieChart(java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.util.TableOrder, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createMultiplePieChart(String title,CategoryDataset dataset,TableOrder order,boolean legend,boolean tooltips,boolean urls){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  MultiplePiePlot plot\u003dnew MultiplePiePlot(dataset);\n  plot.setDataExtractOrder(order);\n  plot.setBackgroundPaint(null);\n  plot.setOutlineStroke(null);\n  if (tooltips) {\n    PieToolTipGenerator tooltipGenerator\u003dnew StandardPieToolTipGenerator();\n    PiePlot pp\u003d(PiePlot)plot.getPieChart().getPlot();\n    pp.setToolTipGenerator(tooltipGenerator);\n  }\n  if (urls) {\n    PieURLGenerator urlGenerator\u003dnew StandardPieURLGenerator();\n    PiePlot pp\u003d(PiePlot)plot.getPieChart().getPlot();\n    pp.setURLGenerator(urlGenerator);\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 675,
    "end_line": 708,
    "comment": "/** \n * Creates a chart that displays multiple pie plots.  The chart object returned by this method uses a  {@link MultiplePiePlot} instance as theplot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param order  the order that the data is extracted (by row or by column)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  include a legend?\n * @param tooltips  generate tooltips?\n * @param urls  generate URLs?\n * @return A chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart3D#725",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, java.util.Locale)",
    "snippet": "public static JFreeChart createPieChart3D(String title,PieDataset dataset,boolean legend,boolean tooltips,Locale locale){\n  PiePlot3D plot\u003dnew PiePlot3D(dataset);\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator(locale));\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 725,
    "end_line": 738,
    "comment": "/** \n * Creates a 3D pie chart using the specified dataset.  The chart object returned by this method uses a  {@link PiePlot3D} instance as theplot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A pie chart.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPieChart3D#753",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createPieChart3D(String title,PieDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  PiePlot3D plot\u003dnew PiePlot3D(dataset);\n  plot.setInsets(new RectangleInsets(0.0,5.0,5.0,5.0));\n  if (tooltips) {\n    plot.setToolTipGenerator(new StandardPieToolTipGenerator());\n  }\n  if (urls) {\n    plot.setURLGenerator(new StandardPieURLGenerator());\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 753,
    "end_line": 772,
    "comment": "/** \n * Creates a 3D pie chart using the specified dataset.  The chart object returned by this method uses a  {@link PiePlot3D} instance as theplot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A pie chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createMultiplePieChart3D#789",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createMultiplePieChart3D(java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.util.TableOrder, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createMultiplePieChart3D(String title,CategoryDataset dataset,TableOrder order,boolean legend,boolean tooltips,boolean urls){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  MultiplePiePlot plot\u003dnew MultiplePiePlot(dataset);\n  plot.setDataExtractOrder(order);\n  plot.setBackgroundPaint(null);\n  plot.setOutlineStroke(null);\n  JFreeChart pieChart\u003dnew JFreeChart(new PiePlot3D(null));\n  TextTitle seriesTitle\u003dnew TextTitle(\"Series Title\",new Font(\"Tahoma\",Font.BOLD,12));\n  seriesTitle.setPosition(RectangleEdge.BOTTOM);\n  pieChart.setTitle(seriesTitle);\n  pieChart.removeLegend();\n  pieChart.setBackgroundPaint(null);\n  plot.setPieChart(pieChart);\n  if (tooltips) {\n    PieToolTipGenerator tooltipGenerator\u003dnew StandardPieToolTipGenerator();\n    PiePlot pp\u003d(PiePlot)plot.getPieChart().getPlot();\n    pp.setToolTipGenerator(tooltipGenerator);\n  }\n  if (urls) {\n    PieURLGenerator urlGenerator\u003dnew StandardPieURLGenerator();\n    PiePlot pp\u003d(PiePlot)plot.getPieChart().getPlot();\n    pp.setURLGenerator(urlGenerator);\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 789,
    "end_line": 831,
    "comment": "/** \n * Creates a chart that displays multiple pie plots.  The chart object returned by this method uses a  {@link MultiplePiePlot} instance as theplot.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param order  the order that the data is extracted (by row or by column)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  include a legend?\n * @param tooltips  generate tooltips?\n * @param urls  generate URLs?\n * @return A chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createBarChart#853",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createBarChart(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  BarRenderer renderer\u003dnew BarRenderer();\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    ItemLabelPosition position1\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE3,TextAnchor.CENTER_LEFT);\n    renderer.setBasePositiveItemLabelPosition(position1);\n    ItemLabelPosition position2\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE9,TextAnchor.CENTER_RIGHT);\n    renderer.setBaseNegativeItemLabelPosition(position2);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    ItemLabelPosition position1\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER);\n    renderer.setBasePositiveItemLabelPosition(position1);\n    ItemLabelPosition position2\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE6,TextAnchor.TOP_CENTER);\n    renderer.setBaseNegativeItemLabelPosition(position2);\n  }\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 853,
    "end_line": 901,
    "comment": "/** \n * Creates a bar chart.  The chart object returned by this method uses a {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis}for the domain axis, a  {@link NumberAxis} as the range axis, and a{@link BarRenderer} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A bar chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createStackedBarChart#924",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createStackedBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createStackedBarChart(String title,String domainAxisLabel,String rangeAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(domainAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis(rangeAxisLabel);\n  StackedBarRenderer renderer\u003dnew StackedBarRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 924,
    "end_line": 957,
    "comment": "/** \n * Creates a stacked bar chart with default settings.  The chart object returned by this method uses a  {@link CategoryPlot} instance as theplot, with a  {@link CategoryAxis} for the domain axis, a{@link NumberAxis} as the range axis, and a {@link StackedBarRenderer}as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param domainAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param rangeAxisLabel  the label for the value axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the orientation of the chart (horizontal orvertical) (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A stacked bar chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createBarChart3D#979",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createBarChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createBarChart3D(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis3D(categoryAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis3D(valueAxisLabel);\n  BarRenderer3D renderer\u003dnew BarRenderer3D();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    plot.setRowRenderingOrder(SortOrder.DESCENDING);\n    plot.setColumnRenderingOrder(SortOrder.DESCENDING);\n  }\n  plot.setForegroundAlpha(0.75f);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 979,
    "end_line": 1019,
    "comment": "/** \n * Creates a bar chart with a 3D effect. The chart object returned by this method uses a  {@link CategoryPlot} instance as the plot, with a{@link CategoryAxis3D} for the domain axis, a {@link NumberAxis3D} asthe range axis, and a  {@link BarRenderer3D} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A bar chart with a 3D effect.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createStackedBarChart3D#1042",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createStackedBarChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createStackedBarChart3D(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis3D(categoryAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis3D(valueAxisLabel);\n  CategoryItemRenderer renderer\u003dnew StackedBarRenderer3D();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    plot.setColumnRenderingOrder(SortOrder.DESCENDING);\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1042,
    "end_line": 1083,
    "comment": "/** \n * Creates a stacked bar chart with a 3D effect and default settings. The chart object returned by this method uses a  {@link CategoryPlot}instance as the plot, with a  {@link CategoryAxis3D} for the domain axis,a  {@link NumberAxis3D} as the range axis, and a{@link StackedBarRenderer3D} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A stacked bar chart with a 3D effect.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createAreaChart#1105",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createAreaChart(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  categoryAxis.setCategoryMargin(0.0);\n  ValueAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  AreaRenderer renderer\u003dnew AreaRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1105,
    "end_line": 1139,
    "comment": "/** \n * Creates an area chart with default settings.  The chart object returned by this method uses a  {@link CategoryPlot} instance as the plot, with a{@link CategoryAxis} for the domain axis, a {@link NumberAxis} as therange axis, and an  {@link AreaRenderer} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return An area chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createStackedAreaChart#1162",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createStackedAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createStackedAreaChart(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  categoryAxis.setCategoryMargin(0.0);\n  ValueAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  StackedAreaRenderer renderer\u003dnew StackedAreaRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1162,
    "end_line": 1191,
    "comment": "/** \n * Creates a stacked area chart with default settings.  The chart object returned by this method uses a  {@link CategoryPlot} instance as theplot, with a  {@link CategoryAxis} for the domain axis, a{@link NumberAxis} as the range axis, and a {@link StackedAreaRenderer}as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A stacked area chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createLineChart#1213",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createLineChart(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  LineAndShapeRenderer renderer\u003dnew LineAndShapeRenderer(true,false);\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1213,
    "end_line": 1244,
    "comment": "/** \n * Creates a line chart with default settings.  The chart object returned by this method uses a  {@link CategoryPlot} instance as the plot, with a{@link CategoryAxis} for the domain axis, a {@link NumberAxis} as therange axis, and a  {@link LineAndShapeRenderer} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the chart orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A line chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createLineChart3D#1266",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createLineChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createLineChart3D(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis3D(categoryAxisLabel);\n  ValueAxis valueAxis\u003dnew NumberAxis3D(valueAxisLabel);\n  LineRenderer3D renderer\u003dnew LineRenderer3D();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1266,
    "end_line": 1297,
    "comment": "/** \n * Creates a line chart with default settings. The chart object returned by this method uses a  {@link CategoryPlot} instance as the plot, with a{@link CategoryAxis3D} for the domain axis, a {@link NumberAxis3D} asthe range axis, and a  {@link LineRenderer3D} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the chart orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A line chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createGanttChart#1318",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createGanttChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.IntervalCategoryDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createGanttChart(String title,String categoryAxisLabel,String dateAxisLabel,IntervalCategoryDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  DateAxis dateAxis\u003dnew DateAxis(dateAxisLabel);\n  CategoryItemRenderer renderer\u003dnew GanttRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new IntervalCategoryToolTipGenerator(\"{3} - {4}\",DateFormat.getDateInstance()));\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,dateAxis,renderer);\n  plot.setOrientation(PlotOrientation.HORIZONTAL);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1318,
    "end_line": 1347,
    "comment": "/** \n * Creates a Gantt chart using the supplied attributes plus default values where required.  The chart object returned by this method uses a {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis}for the domain axis, a  {@link DateAxis} as the range axis, and a{@link GanttRenderer} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dateAxisLabel  the label for the date axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A Gantt chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createWaterfallChart#1369",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createWaterfallChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createWaterfallChart(String title,String categoryAxisLabel,String valueAxisLabel,CategoryDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  categoryAxis.setCategoryMargin(0.0);\n  ValueAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  WaterfallBarRenderer renderer\u003dnew WaterfallBarRenderer();\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    ItemLabelPosition position\u003dnew ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER,TextAnchor.CENTER,Math.PI / 2.0);\n    renderer.setBasePositiveItemLabelPosition(position);\n    renderer.setBaseNegativeItemLabelPosition(position);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    ItemLabelPosition position\u003dnew ItemLabelPosition(ItemLabelAnchor.CENTER,TextAnchor.CENTER,TextAnchor.CENTER,0.0);\n    renderer.setBasePositiveItemLabelPosition(position);\n    renderer.setBaseNegativeItemLabelPosition(position);\n  }\n  if (tooltips) {\n    StandardCategoryToolTipGenerator generator\u003dnew StandardCategoryToolTipGenerator();\n    renderer.setBaseToolTipGenerator(generator);\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n  }\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  plot.clearRangeMarkers();\n  Marker baseline\u003dnew ValueMarker(0.0);\n  baseline.setPaint(Color.black);\n  plot.addRangeMarker(baseline,Layer.FOREGROUND);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1369,
    "end_line": 1422,
    "comment": "/** \n * Creates a waterfall chart.  The chart object returned by this method uses a  {@link CategoryPlot} instance as the plot, with a{@link CategoryAxis} for the domain axis, a {@link NumberAxis} as therange axis, and a  {@link WaterfallBarRenderer} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  the label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  the label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A waterfall chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createPolarChart#1438",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createPolarChart(java.lang.String, org.jfree.data.xy.XYDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createPolarChart(String title,XYDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  PolarPlot plot\u003dnew PolarPlot();\n  plot.setDataset(dataset);\n  NumberAxis rangeAxis\u003dnew NumberAxis();\n  rangeAxis.setAxisLineVisible(false);\n  rangeAxis.setTickMarksVisible(false);\n  rangeAxis.setTickLabelInsets(new RectangleInsets(0.0,0.0,0.0,0.0));\n  plot.setAxis(rangeAxis);\n  plot.setRenderer(new DefaultPolarItemRenderer());\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1438,
    "end_line": 1457,
    "comment": "/** \n * Creates a polar plot for the specified dataset (x-values interpreted as angles in degrees).  The chart object returned by this method uses a {@link PolarPlot} instance as the plot, with a {@link NumberAxis} forthe radial axis.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  legend required?\n * @param tooltips  tooltips required?\n * @param urls  URLs required?\n * @return A chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createScatterPlot#1478",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createScatterPlot(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  yAxis.setAutoRangeIncludesZero(false);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,null);\n  XYToolTipGenerator toolTipGenerator\u003dnull;\n  if (tooltips) {\n    toolTipGenerator\u003dnew StandardXYToolTipGenerator();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  XYItemRenderer renderer\u003dnew XYLineAndShapeRenderer(false,true);\n  renderer.setBaseToolTipGenerator(toolTipGenerator);\n  renderer.setBaseURLGenerator(urlGenerator);\n  plot.setRenderer(renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1478,
    "end_line": 1512,
    "comment": "/** \n * Creates a scatter plot with default settings.  The chart object returned by this method uses an  {@link XYPlot} instance as the plot,with a  {@link NumberAxis} for the domain axis, a  {@link NumberAxis}as the range axis, and an  {@link XYLineAndShapeRenderer} as therenderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A scatter plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createXYBarChart#1535",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createXYBarChart(java.lang.String, java.lang.String, boolean, java.lang.String, org.jfree.data.xy.IntervalXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createXYBarChart(String title,String xAxisLabel,boolean dateAxis,String yAxisLabel,IntervalXYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  ValueAxis domainAxis\u003dnull;\n  if (dateAxis) {\n    domainAxis\u003dnew DateAxis(xAxisLabel);\n  }\n else {\n    NumberAxis axis\u003dnew NumberAxis(xAxisLabel);\n    axis.setAutoRangeIncludesZero(false);\n    domainAxis\u003daxis;\n  }\n  ValueAxis valueAxis\u003dnew NumberAxis(yAxisLabel);\n  XYBarRenderer renderer\u003dnew XYBarRenderer();\n  if (tooltips) {\n    XYToolTipGenerator tt;\n    if (dateAxis) {\n      tt\u003dStandardXYToolTipGenerator.getTimeSeriesInstance();\n    }\n else {\n      tt\u003dnew StandardXYToolTipGenerator();\n    }\n    renderer.setBaseToolTipGenerator(tt);\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardXYURLGenerator());\n  }\n  XYPlot plot\u003dnew XYPlot(dataset,domainAxis,valueAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1535,
    "end_line": 1582,
    "comment": "/** \n * Creates and returns a default instance of an XY bar chart. \u003cP\u003e The chart object returned by this method uses an  {@link XYPlot} instanceas the plot, with a  {@link DateAxis} for the domain axis, a{@link NumberAxis} as the range axis, and a {@link XYBarRenderer} as therenderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dateAxis  make the domain axis display dates?\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return An XY bar chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createXYAreaChart#1604",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createXYAreaChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,null);\n  plot.setOrientation(orientation);\n  plot.setForegroundAlpha(0.5f);\n  XYToolTipGenerator tipGenerator\u003dnull;\n  if (tooltips) {\n    tipGenerator\u003dnew StandardXYToolTipGenerator();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  plot.setRenderer(new XYAreaRenderer(XYAreaRenderer.AREA,tipGenerator,urlGenerator));\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1604,
    "end_line": 1640,
    "comment": "/** \n * Creates an area chart using an  {@link XYDataset}. \u003cP\u003e The chart object returned by this method uses an  {@link XYPlot} instanceas the plot, with a  {@link NumberAxis} for the domain axis, a{@link NumberAxis} as the range axis, and a {@link XYAreaRenderer} asthe renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return An XY area chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createStackedXYAreaChart#1660",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createStackedXYAreaChart(String title,String xAxisLabel,String yAxisLabel,TableXYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  xAxis.setLowerMargin(0.0);\n  xAxis.setUpperMargin(0.0);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  XYToolTipGenerator toolTipGenerator\u003dnull;\n  if (tooltips) {\n    toolTipGenerator\u003dnew StandardXYToolTipGenerator();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  StackedXYAreaRenderer2 renderer\u003dnew StackedXYAreaRenderer2(toolTipGenerator,urlGenerator);\n  renderer.setOutline(true);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,renderer);\n  plot.setOrientation(orientation);\n  plot.setRangeAxis(yAxis);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1660,
    "end_line": 1699,
    "comment": "/** \n * Creates a stacked XY area plot.  The chart object returned by this method uses an  {@link XYPlot} instance as the plot, with a{@link NumberAxis} for the domain axis, a {@link NumberAxis} as therange axis, and a  {@link StackedXYAreaRenderer2} as the renderer.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A stacked XY area chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createXYLineChart#1717",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createXYLineChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  XYItemRenderer renderer\u003dnew XYLineAndShapeRenderer(true,false);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,renderer);\n  plot.setOrientation(orientation);\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardXYURLGenerator());\n  }\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1717,
    "end_line": 1747,
    "comment": "/** \n * Creates a line chart (based on an  {@link XYDataset}) with default settings.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return The chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createXYStepChart#1764",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createXYStepChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createXYStepChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  DateAxis xAxis\u003dnew DateAxis(xAxisLabel);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  yAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());\n  XYToolTipGenerator toolTipGenerator\u003dnull;\n  if (tooltips) {\n    toolTipGenerator\u003dnew StandardXYToolTipGenerator();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  XYItemRenderer renderer\u003dnew XYStepRenderer(toolTipGenerator,urlGenerator);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,null);\n  plot.setRenderer(renderer);\n  plot.setOrientation(orientation);\n  plot.setDomainCrosshairVisible(false);\n  plot.setRangeCrosshairVisible(false);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1764,
    "end_line": 1802,
    "comment": "/** \n * Creates a stepped XY plot with default settings.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createXYStepAreaChart#1819",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createXYStepAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createXYStepAreaChart(String title,String xAxisLabel,String yAxisLabel,XYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  XYToolTipGenerator toolTipGenerator\u003dnull;\n  if (tooltips) {\n    toolTipGenerator\u003dnew StandardXYToolTipGenerator();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  XYItemRenderer renderer\u003dnew XYStepAreaRenderer(XYStepAreaRenderer.AREA_AND_SHAPES,toolTipGenerator,urlGenerator);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,null);\n  plot.setRenderer(renderer);\n  plot.setOrientation(orientation);\n  plot.setDomainCrosshairVisible(false);\n  plot.setRangeCrosshairVisible(false);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1819,
    "end_line": 1857,
    "comment": "/** \n * Creates a filled stepped XY plot with default settings.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createTimeSeriesChart#1880",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createTimeSeriesChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createTimeSeriesChart(String title,String timeAxisLabel,String valueAxisLabel,XYDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  ValueAxis timeAxis\u003dnew DateAxis(timeAxisLabel);\n  timeAxis.setLowerMargin(0.02);\n  timeAxis.setUpperMargin(0.02);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  valueAxis.setAutoRangeIncludesZero(false);\n  XYPlot plot\u003dnew XYPlot(dataset,timeAxis,valueAxis,null);\n  XYToolTipGenerator toolTipGenerator\u003dnull;\n  if (tooltips) {\n    toolTipGenerator\u003dStandardXYToolTipGenerator.getTimeSeriesInstance();\n  }\n  XYURLGenerator urlGenerator\u003dnull;\n  if (urls) {\n    urlGenerator\u003dnew StandardXYURLGenerator();\n  }\n  XYLineAndShapeRenderer renderer\u003dnew XYLineAndShapeRenderer(true,false);\n  renderer.setBaseToolTipGenerator(toolTipGenerator);\n  renderer.setBaseURLGenerator(urlGenerator);\n  plot.setRenderer(renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1880,
    "end_line": 1917,
    "comment": "/** \n * Creates and returns a time series chart.  A time series chart is an {@link XYPlot} with a {@link DateAxis} for the x-axis and a{@link NumberAxis} for the y-axis.  The default renderer is an{@link XYLineAndShapeRenderer}. \u003cP\u003e A convenient dataset to use with this chart is a {@link org.jfree.data.time.TimeSeriesCollection}.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeAxisLabel  a label for the time axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A time series chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createCandlestickChart#1932",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createCandlestickChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.OHLCDataset, boolean)",
    "snippet": "public static JFreeChart createCandlestickChart(String title,String timeAxisLabel,String valueAxisLabel,OHLCDataset dataset,boolean legend){\n  ValueAxis timeAxis\u003dnew DateAxis(timeAxisLabel);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  XYPlot plot\u003dnew XYPlot(dataset,timeAxis,valueAxis,null);\n  plot.setRenderer(new CandlestickRenderer());\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1932,
    "end_line": 1947,
    "comment": "/** \n * Creates and returns a default instance of a candlesticks chart.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeAxisLabel  a label for the time axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @return A candlestick chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createHighLowChart#1962",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createHighLowChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.OHLCDataset, boolean)",
    "snippet": "public static JFreeChart createHighLowChart(String title,String timeAxisLabel,String valueAxisLabel,OHLCDataset dataset,boolean legend){\n  ValueAxis timeAxis\u003dnew DateAxis(timeAxisLabel);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  HighLowRenderer renderer\u003dnew HighLowRenderer();\n  renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());\n  XYPlot plot\u003dnew XYPlot(dataset,timeAxis,valueAxis,renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1962,
    "end_line": 1978,
    "comment": "/** \n * Creates and returns a default instance of a high-low-open-close chart.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeAxisLabel  a label for the time axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @return A high-low-open-close chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createHighLowChart#1998",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createHighLowChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.OHLCDataset, org.jfree.chart.axis.Timeline, boolean)",
    "snippet": "public static JFreeChart createHighLowChart(String title,String timeAxisLabel,String valueAxisLabel,OHLCDataset dataset,Timeline timeline,boolean legend){\n  DateAxis timeAxis\u003dnew DateAxis(timeAxisLabel);\n  timeAxis.setTimeline(timeline);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  HighLowRenderer renderer\u003dnew HighLowRenderer();\n  renderer.setBaseToolTipGenerator(new HighLowItemLabelGenerator());\n  XYPlot plot\u003dnew XYPlot(dataset,timeAxis,valueAxis,renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 1998,
    "end_line": 2016,
    "comment": "/** \n * Creates and returns a default instance of a high-low-open-close chart with a special timeline. This timeline can be a {@link org.jfree.chart.axis.SegmentedTimeline} such as the Mondaythrough Friday timeline that will remove Saturdays and Sundays from the axis.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeAxisLabel  a label for the time axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeline  the timeline.\n * @param legend  a flag specifying whether or not a legend is required.\n * @return A high-low-open-close chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createBubbleChart#2036",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createBubbleChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYZDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createBubbleChart(String title,String xAxisLabel,String yAxisLabel,XYZDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  NumberAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  yAxis.setAutoRangeIncludesZero(false);\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,null);\n  XYItemRenderer renderer\u003dnew XYBubbleRenderer(XYBubbleRenderer.SCALE_ON_RANGE_AXIS);\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardXYZToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardXYZURLGenerator());\n  }\n  plot.setRenderer(renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2036,
    "end_line": 2071,
    "comment": "/** \n * Creates a bubble chart with default settings.  The chart is composed of an  {@link XYPlot}, with a  {@link NumberAxis} for the domain axis,a  {@link NumberAxis} for the range axis, and an {@link XYBubbleRenderer}to draw the data items.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the X-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the Y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A bubble chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createHistogram#2090",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createHistogram(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.IntervalXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createHistogram(String title,String xAxisLabel,String yAxisLabel,IntervalXYDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  NumberAxis xAxis\u003dnew NumberAxis(xAxisLabel);\n  xAxis.setAutoRangeIncludesZero(false);\n  ValueAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  XYItemRenderer renderer\u003dnew XYBarRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardXYURLGenerator());\n  }\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,renderer);\n  plot.setOrientation(orientation);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2090,
    "end_line": 2121,
    "comment": "/** \n * Creates a histogram chart.  This chart is constructed with an {@link XYPlot} using an {@link XYBarRenderer}.  The domain and range axes are  {@link NumberAxis} instances.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  the x axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  the y axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param legend  create a legend?\n * @param tooltips  display tooltips?\n * @param urls  generate URLs?\n * @return The chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createBoxAndWhiskerChart#2139",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createBoxAndWhiskerChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.statistics.BoxAndWhiskerCategoryDataset, boolean)",
    "snippet": "public static JFreeChart createBoxAndWhiskerChart(String title,String categoryAxisLabel,String valueAxisLabel,BoxAndWhiskerCategoryDataset dataset,boolean legend){\n  CategoryAxis categoryAxis\u003dnew CategoryAxis(categoryAxisLabel);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  valueAxis.setAutoRangeIncludesZero(false);\n  BoxAndWhiskerRenderer renderer\u003dnew BoxAndWhiskerRenderer();\n  renderer.setBaseToolTipGenerator(new BoxAndWhiskerToolTipGenerator());\n  CategoryPlot plot\u003dnew CategoryPlot(dataset,categoryAxis,valueAxis,renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2139,
    "end_line": 2156,
    "comment": "/** \n * Creates and returns a default instance of a box and whisker chart based on data from a  {@link BoxAndWhiskerCategoryDataset}.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param categoryAxisLabel  a label for the category axis(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @return A box and whisker chart.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createBoxAndWhiskerChart#2171",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createBoxAndWhiskerChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.statistics.BoxAndWhiskerXYDataset, boolean)",
    "snippet": "public static JFreeChart createBoxAndWhiskerChart(String title,String timeAxisLabel,String valueAxisLabel,BoxAndWhiskerXYDataset dataset,boolean legend){\n  ValueAxis timeAxis\u003dnew DateAxis(timeAxisLabel);\n  NumberAxis valueAxis\u003dnew NumberAxis(valueAxisLabel);\n  valueAxis.setAutoRangeIncludesZero(false);\n  XYBoxAndWhiskerRenderer renderer\u003dnew XYBoxAndWhiskerRenderer(10.0);\n  XYPlot plot\u003dnew XYPlot(dataset,timeAxis,valueAxis,renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2171,
    "end_line": 2187,
    "comment": "/** \n * Creates and returns a default instance of a box and whisker chart.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param timeAxisLabel  a label for the time axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param valueAxisLabel  a label for the value axis (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag specifying whether or not a legend is required.\n * @return A box and whisker chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createWindPlot#2203",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createWindPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.WindDataset, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createWindPlot(String title,String xAxisLabel,String yAxisLabel,WindDataset dataset,boolean legend,boolean tooltips,boolean urls){\n  ValueAxis xAxis\u003dnew DateAxis(xAxisLabel);\n  ValueAxis yAxis\u003dnew NumberAxis(yAxisLabel);\n  yAxis.setRange(-12.0,12.0);\n  WindItemRenderer renderer\u003dnew WindItemRenderer();\n  if (tooltips) {\n    renderer.setBaseToolTipGenerator(new StandardXYToolTipGenerator());\n  }\n  if (urls) {\n    renderer.setBaseURLGenerator(new StandardXYURLGenerator());\n  }\n  XYPlot plot\u003dnew XYPlot(dataset,xAxis,yAxis,renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2203,
    "end_line": 2228,
    "comment": "/** \n * Creates a wind plot with default settings.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param xAxisLabel  a label for the x-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param yAxisLabel  a label for the y-axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset for the chart (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param legend  a flag that controls whether or not a legend is created.\n * @param tooltips  configure chart to generate tool tips?\n * @param urls  configure chart to generate URLs?\n * @return A wind plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartFactory.createWaferMapChart#2243",
    "is_bug": true,
    "src_path": "org/jfree/chart/ChartFactory.java",
    "class_name": "org.jfree.chart.ChartFactory",
    "signature": "org.jfree.chart.ChartFactory.createWaferMapChart(java.lang.String, org.jfree.data.general.WaferMapDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
    "snippet": "public static JFreeChart createWaferMapChart(String title,WaferMapDataset dataset,PlotOrientation orientation,boolean legend,boolean tooltips,boolean urls){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  WaferMapPlot plot\u003dnew WaferMapPlot(dataset);\n  WaferMapRenderer renderer\u003dnew WaferMapRenderer();\n  plot.setRenderer(renderer);\n  JFreeChart chart\u003dnew JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);\n  currentTheme.apply(chart);\n  return chart;\n}",
    "begin_line": 2243,
    "end_line": 2261,
    "comment": "/** \n * Creates a wafer map chart.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param orientation  the plot orientation (horizontal or vertical)(\u003ccode\u003enull\u003c/code\u003e NOT permitted.\n * @param legend  display a legend?\n * @param tooltips  generate tooltips?\n * @param urls  generate URLs?\n * @return A wafer map chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.JFreeChart#339",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.JFreeChart(org.jfree.chart.plot.Plot)",
    "snippet": "public JFreeChart(Plot plot){\n  this(null,null,plot,true);\n}",
    "begin_line": 339,
    "end_line": 341,
    "comment": "/** \n * Creates a new chart based on the supplied plot.  The chart will have a legend added automatically, but no title (although you can easily add one later). \u003cbr\u003e\u003cbr\u003e Note that the   {@link ChartFactory} class contains a rangeof static methods that will return ready-made charts, and often this is a more convenient way to create charts than using this constructor.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.JFreeChart#355",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, org.jfree.chart.plot.Plot)",
    "snippet": "public JFreeChart(String title,Plot plot){\n  this(title,JFreeChart.DEFAULT_TITLE_FONT,plot,true);\n}",
    "begin_line": 355,
    "end_line": 357,
    "comment": "/** \n * Creates a new chart with the given title and plot.  A default font ( {@link #DEFAULT_TITLE_FONT}) is used for the title, and the chart will have a legend added automatically. \u003cbr\u003e\u003cbr\u003e Note that the  {@link ChartFactory} class contains a rangeof static methods that will return ready-made charts, and often this is a more convenient way to create charts than using this constructor.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.JFreeChart#376",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
    "snippet": "public JFreeChart(String title,Font titleFont,Plot plot,boolean createLegend){\n  if (plot \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027plot\u0027 argument.\");\n  }\n  this.progressListeners\u003dnew EventListenerList();\n  this.changeListeners\u003dnew EventListenerList();\n  this.notify\u003dtrue;\n  this.renderingHints\u003dnew RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  this.borderVisible\u003dfalse;\n  this.borderStroke\u003dnew BasicStroke(1.0f);\n  this.borderPaint\u003dColor.black;\n  this.padding\u003dRectangleInsets.ZERO_INSETS;\n  this.plot\u003dplot;\n  plot.addChangeListener(this);\n  this.subtitles\u003dnew ArrayList();\n  if (createLegend) {\n    LegendTitle legend\u003dnew LegendTitle(this.plot);\n    legend.setMargin(new RectangleInsets(1.0,1.0,1.0,1.0));\n    legend.setFrame(new LineBorder());\n    legend.setBackgroundPaint(Color.white);\n    legend.setPosition(RectangleEdge.BOTTOM);\n    this.subtitles.add(legend);\n    legend.addChangeListener(this);\n  }\n  if (title !\u003d null) {\n    if (titleFont \u003d\u003d null) {\n      titleFont\u003dDEFAULT_TITLE_FONT;\n    }\n    this.title\u003dnew TextTitle(title,titleFont);\n    this.title.addChangeListener(this);\n  }\n  this.backgroundPaint\u003dDEFAULT_BACKGROUND_PAINT;\n  this.backgroundImage\u003dDEFAULT_BACKGROUND_IMAGE;\n  this.backgroundImageAlignment\u003dDEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n  this.backgroundImageAlpha\u003dDEFAULT_BACKGROUND_IMAGE_ALPHA;\n}",
    "begin_line": 376,
    "end_line": 430,
    "comment": "/** \n * Creates a new chart with the given title and plot.  The \u003ccode\u003ecreateLegend\u003c/code\u003e argument specifies whether or not a legend should be added to the chart. \u003cbr\u003e\u003cbr\u003e Note that the   {@link ChartFactory} class contains a rangeof static methods that will return ready-made charts, and often this is a more convenient way to create charts than using this constructor.\n * @param title  the chart title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param titleFont  the font for displaying the chart title(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param plot  controller of the visual representation of the data(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param createLegend  a flag indicating whether or not a legend shouldbe created for the chart.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getRenderingHints#439",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getRenderingHints()",
    "snippet": "public RenderingHints getRenderingHints(){\n  return this.renderingHints;\n}",
    "begin_line": 439,
    "end_line": 441,
    "comment": "/** \n * Returns the collection of rendering hints for the chart.\n * @return The rendering hints for the chart (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderingHints(RenderingHints)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setRenderingHints#453",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setRenderingHints(java.awt.RenderingHints)",
    "snippet": "public void setRenderingHints(RenderingHints renderingHints){\n  if (renderingHints \u003d\u003d null) {\n    throw new NullPointerException(\"RenderingHints given are null\");\n  }\n  this.renderingHints\u003drenderingHints;\n  fireChartChanged();\n}",
    "begin_line": 453,
    "end_line": 459,
    "comment": "/** \n * Sets the rendering hints for the chart.  These will be added (using the Graphics2D.addRenderingHints() method) near the start of the JFreeChart.draw() method.\n * @param renderingHints  the rendering hints (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @see #getRenderingHints()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.isBorderVisible#469",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.isBorderVisible()",
    "snippet": "public boolean isBorderVisible(){\n  return this.borderVisible;\n}",
    "begin_line": 469,
    "end_line": 471,
    "comment": "/** \n * Returns a flag that controls whether or not a border is drawn around the outside of the chart.\n * @return A boolean.\n * @see #setBorderVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBorderVisible#481",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBorderVisible(boolean)",
    "snippet": "public void setBorderVisible(boolean visible){\n  this.borderVisible\u003dvisible;\n  fireChartChanged();\n}",
    "begin_line": 481,
    "end_line": 484,
    "comment": "/** \n * Sets a flag that controls whether or not a border is drawn around the outside of the chart.\n * @param visible  the flag.\n * @see #isBorderVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBorderStroke#493",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBorderStroke()",
    "snippet": "public Stroke getBorderStroke(){\n  return this.borderStroke;\n}",
    "begin_line": 493,
    "end_line": 495,
    "comment": "/** \n * Returns the stroke used to draw the chart border (if visible).\n * @return The border stroke.\n * @see #setBorderStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBorderStroke#504",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBorderStroke(java.awt.Stroke)",
    "snippet": "public void setBorderStroke(Stroke stroke){\n  this.borderStroke\u003dstroke;\n  fireChartChanged();\n}",
    "begin_line": 504,
    "end_line": 507,
    "comment": "/** \n * Sets the stroke used to draw the chart border (if visible).\n * @param stroke  the stroke.\n * @see #getBorderStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBorderPaint#516",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBorderPaint()",
    "snippet": "public Paint getBorderPaint(){\n  return this.borderPaint;\n}",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Returns the paint used to draw the chart border (if visible).\n * @return The border paint.\n * @see #setBorderPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBorderPaint#527",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBorderPaint(java.awt.Paint)",
    "snippet": "public void setBorderPaint(Paint paint){\n  this.borderPaint\u003dpaint;\n  fireChartChanged();\n}",
    "begin_line": 527,
    "end_line": 530,
    "comment": "/** \n * Sets the paint used to draw the chart border (if visible).\n * @param paint  the paint.\n * @see #getBorderPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getPadding#539",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getPadding()",
    "snippet": "public RectangleInsets getPadding(){\n  return this.padding;\n}",
    "begin_line": 539,
    "end_line": 541,
    "comment": "/** \n * Returns the padding between the chart border and the chart drawing area.\n * @return The padding (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPadding(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setPadding#551",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setPadding(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setPadding(RectangleInsets padding){\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027padding\u0027 argument.\");\n  }\n  this.padding\u003dpadding;\n  notifyListeners(new ChartChangeEvent(this));\n}",
    "begin_line": 551,
    "end_line": 557,
    "comment": "/** \n * Sets the padding between the chart border and the chart drawing area, and sends a  {@link ChartChangeEvent} to all registered listeners.\n * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPadding()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getTitle#569",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getTitle()",
    "snippet": "public TextTitle getTitle(){\n  return this.title;\n}",
    "begin_line": 569,
    "end_line": 571,
    "comment": "/** \n * Returns the main chart title.  Very often a chart will have just one title, so we make this case simple by providing accessor methods for the main title.  However, multiple titles are supported - see the {@link #addSubtitle(Title)} method.\n * @return The chart title (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTitle(TextTitle)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setTitle#583",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setTitle(org.jfree.chart.title.TextTitle)",
    "snippet": "public void setTitle(TextTitle title){\n  if (this.title !\u003d null) {\n    this.title.removeChangeListener(this);\n  }\n  this.title\u003dtitle;\n  if (title !\u003d null) {\n    title.addChangeListener(this);\n  }\n  fireChartChanged();\n}",
    "begin_line": 583,
    "end_line": 592,
    "comment": "/** \n * Sets the main title for the chart and sends a  {@link ChartChangeEvent}to all registered listeners.  If you do not want a title for the chart, set it to \u003ccode\u003enull\u003c/code\u003e.  If you want more than one title on a chart, use the  {@link #addSubtitle(Title)} method.\n * @param title  the title (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getTitle()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setTitle#606",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setTitle(java.lang.String)",
    "snippet": "public void setTitle(String text){\n  if (text !\u003d null) {\n    if (this.title \u003d\u003d null) {\n      setTitle(new TextTitle(text,JFreeChart.DEFAULT_TITLE_FONT));\n    }\n else {\n      this.title.setText(text);\n    }\n  }\n else {\n    setTitle((TextTitle)null);\n  }\n}",
    "begin_line": 606,
    "end_line": 618,
    "comment": "/** \n * Sets the chart title and sends a  {@link ChartChangeEvent} to allregistered listeners.  This is a convenience method that ends up calling the  {@link #setTitle(TextTitle)} method.  If there is an existing title,its text is updated, otherwise a new title using the default font is added to the chart.  If \u003ccode\u003etext\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e the chart title is set to \u003ccode\u003enull\u003c/code\u003e.\n * @param text  the title text (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getTitle()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.addLegend#628",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.addLegend(org.jfree.chart.title.LegendTitle)",
    "snippet": "public void addLegend(LegendTitle legend){\n  addSubtitle(legend);\n}",
    "begin_line": 628,
    "end_line": 630,
    "comment": "/** \n * Adds a legend to the plot and sends a  {@link ChartChangeEvent} to allregistered listeners.\n * @param legend  the legend (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeLegend()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getLegend#640",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getLegend()",
    "snippet": "public LegendTitle getLegend(){\n  return getLegend(0);\n}",
    "begin_line": 640,
    "end_line": 642,
    "comment": "/** \n * Returns the legend for the chart, if there is one.  Note that a chart can have more than one legend - this method returns the first.\n * @return The legend (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getLegend(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getLegend#653",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getLegend(int)",
    "snippet": "public LegendTitle getLegend(int index){\n  int seen\u003d0;\n  Iterator iterator\u003dthis.subtitles.iterator();\n  while (iterator.hasNext()) {\n    Title subtitle\u003d(Title)iterator.next();\n    if (subtitle instanceof LegendTitle) {\n      if (seen \u003d\u003d index) {\n        return (LegendTitle)subtitle;\n      }\n else {\n        seen++;\n      }\n    }\n  }\n  return null;\n}",
    "begin_line": 653,
    "end_line": 668,
    "comment": "/** \n * Returns the nth legend for a chart, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the legend index (zero-based).\n * @return The legend (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #addLegend(LegendTitle)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.removeLegend#676",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.removeLegend()",
    "snippet": "public void removeLegend(){\n  removeSubtitle(getLegend());\n}",
    "begin_line": 676,
    "end_line": 678,
    "comment": "/** \n * Removes the first legend in the chart and sends a {@link ChartChangeEvent} to all registered listeners.\n * @see #getLegend()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getSubtitles#687",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getSubtitles()",
    "snippet": "public List getSubtitles(){\n  return new ArrayList(this.subtitles);\n}",
    "begin_line": 687,
    "end_line": 689,
    "comment": "/** \n * Returns the list of subtitles for the chart.\n * @return The subtitle list (possibly empty, but never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSubtitles(List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setSubtitles#701",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setSubtitles(java.util.List)",
    "snippet": "public void setSubtitles(List subtitles){\n  if (subtitles \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027subtitles\u0027 argument.\");\n  }\n  setNotify(false);\n  clearSubtitles();\n  Iterator iterator\u003dsubtitles.iterator();\n  while (iterator.hasNext()) {\n    Title t\u003d(Title)iterator.next();\n    if (t !\u003d null) {\n      addSubtitle(t);\n    }\n  }\n  setNotify(true);\n}",
    "begin_line": 701,
    "end_line": 715,
    "comment": "/** \n * Sets the title list for the chart (completely replaces any existing titles) and sends a  {@link ChartChangeEvent} to all registeredlisteners.\n * @param subtitles  the new list of subtitles (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @see #getSubtitles()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getSubtitleCount#724",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getSubtitleCount()",
    "snippet": "public int getSubtitleCount(){\n  return this.subtitles.size();\n}",
    "begin_line": 724,
    "end_line": 726,
    "comment": "/** \n * Returns the number of titles for the chart.\n * @return The number of titles for the chart.\n * @see #getSubtitles()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getSubtitle#737",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getSubtitle(int)",
    "snippet": "public Title getSubtitle(int index){\n  if ((index \u003c 0) || (index \u003e\u003d getSubtitleCount())) {\n    throw new IllegalArgumentException(\"Index out of range.\");\n  }\n  return (Title)this.subtitles.get(index);\n}",
    "begin_line": 737,
    "end_line": 742,
    "comment": "/** \n * Returns a chart subtitle.\n * @param index  the index of the chart subtitle (zero based).\n * @return A chart subtitle.\n * @see #addSubtitle(Title)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.addSubtitle#752",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.addSubtitle(org.jfree.chart.title.Title)",
    "snippet": "public void addSubtitle(Title subtitle){\n  if (subtitle \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027subtitle\u0027 argument.\");\n  }\n  this.subtitles.add(subtitle);\n  subtitle.addChangeListener(this);\n  fireChartChanged();\n}",
    "begin_line": 752,
    "end_line": 759,
    "comment": "/** \n * Adds a chart subtitle, and notifies registered listeners that the chart has been modified.\n * @param subtitle  the subtitle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getSubtitle(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.addSubtitle#770",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.addSubtitle(int, org.jfree.chart.title.Title)",
    "snippet": "public void addSubtitle(int index,Title subtitle){\n  if (index \u003c 0 || index \u003e getSubtitleCount()) {\n    throw new IllegalArgumentException(\"The \u0027index\u0027 argument is out of range.\");\n  }\n  if (subtitle \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027subtitle\u0027 argument.\");\n  }\n  this.subtitles.add(index,subtitle);\n  subtitle.addChangeListener(this);\n  fireChartChanged();\n}",
    "begin_line": 770,
    "end_line": 781,
    "comment": "/** \n * Adds a subtitle at a particular position in the subtitle list, and sends a  {@link ChartChangeEvent} to all registered listeners.\n * @param index  the index (in the range 0 to {@link #getSubtitleCount()}).\n * @param subtitle  the subtitle to add (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.clearSubtitles#789",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.clearSubtitles()",
    "snippet": "public void clearSubtitles(){\n  Iterator iterator\u003dthis.subtitles.iterator();\n  while (iterator.hasNext()) {\n    Title t\u003d(Title)iterator.next();\n    t.removeChangeListener(this);\n  }\n  this.subtitles.clear();\n  fireChartChanged();\n}",
    "begin_line": 789,
    "end_line": 797,
    "comment": "/** \n * Clears all subtitles from the chart and sends a  {@link ChartChangeEvent}to all registered listeners.\n * @see #addSubtitle(Title)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.removeSubtitle#807",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.removeSubtitle(org.jfree.chart.title.Title)",
    "snippet": "public void removeSubtitle(Title title){\n  this.subtitles.remove(title);\n  fireChartChanged();\n}",
    "begin_line": 807,
    "end_line": 810,
    "comment": "/** \n * Removes the specified subtitle and sends a  {@link ChartChangeEvent} toall registered listeners.\n * @param title  the title.\n * @see #addSubtitle(Title)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getPlot#819",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getPlot()",
    "snippet": "public Plot getPlot(){\n  return this.plot;\n}",
    "begin_line": 819,
    "end_line": 821,
    "comment": "/** \n * Returns the plot for the chart.  The plot is a class responsible for coordinating the visual representation of the data, including the axes (if any).\n * @return The plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getCategoryPlot#833",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getCategoryPlot()",
    "snippet": "public CategoryPlot getCategoryPlot(){\n  return (CategoryPlot)this.plot;\n}",
    "begin_line": 833,
    "end_line": 835,
    "comment": "/** \n * Returns the plot cast as a  {@link CategoryPlot}. \u003cp\u003e NOTE: if the plot is not an instance of  {@link CategoryPlot}, then a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.\n * @return The plot.\n * @see #getPlot()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getXYPlot#847",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getXYPlot()",
    "snippet": "public XYPlot getXYPlot(){\n  return (XYPlot)this.plot;\n}",
    "begin_line": 847,
    "end_line": 849,
    "comment": "/** \n * Returns the plot cast as an  {@link XYPlot}. \u003cp\u003e NOTE: if the plot is not an instance of  {@link XYPlot}, then a \u003ccode\u003eClassCastException\u003c/code\u003e is thrown.\n * @return The plot.\n * @see #getPlot()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getAntiAlias#859",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getAntiAlias()",
    "snippet": "public boolean getAntiAlias(){\n  Object val\u003dthis.renderingHints.get(RenderingHints.KEY_ANTIALIASING);\n  return RenderingHints.VALUE_ANTIALIAS_ON.equals(val);\n}",
    "begin_line": 859,
    "end_line": 862,
    "comment": "/** \n * Returns a flag that indicates whether or not anti-aliasing is used when the chart is drawn.\n * @return The flag.\n * @see #setAntiAlias(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setAntiAlias#874",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setAntiAlias(boolean)",
    "snippet": "public void setAntiAlias(boolean flag){\n  Object val\u003dthis.renderingHints.get(RenderingHints.KEY_ANTIALIASING);\n  if (val \u003d\u003d null) {\n    val\u003dRenderingHints.VALUE_ANTIALIAS_DEFAULT;\n  }\n  if (!flag \u0026\u0026 RenderingHints.VALUE_ANTIALIAS_OFF.equals(val) || flag \u0026\u0026 RenderingHints.VALUE_ANTIALIAS_ON.equals(val)) {\n    return;\n  }\n  if (flag) {\n    this.renderingHints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  }\n else {\n    this.renderingHints.put(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);\n  }\n  fireChartChanged();\n}",
    "begin_line": 874,
    "end_line": 895,
    "comment": "/** \n * Sets a flag that indicates whether or not anti-aliasing is used when the chart is drawn. \u003cP\u003e Anti-aliasing usually improves the appearance of charts, but is slower.\n * @param flag  the new value of the flag.\n * @see #getAntiAlias()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getTextAntiAlias#907",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getTextAntiAlias()",
    "snippet": "public Object getTextAntiAlias(){\n  return this.renderingHints.get(RenderingHints.KEY_TEXT_ANTIALIASING);\n}",
    "begin_line": 907,
    "end_line": 909,
    "comment": "/** \n * Returns the current value stored in the rendering hints table for {@link RenderingHints#KEY_TEXT_ANTIALIASING}.\n * @return The hint value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.5\n * @see #setTextAntiAlias(Object)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setTextAntiAlias#925",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setTextAntiAlias(boolean)",
    "snippet": "public void setTextAntiAlias(boolean flag){\n  if (flag) {\n    setTextAntiAlias(RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n  }\n else {\n    setTextAntiAlias(RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n  }\n}",
    "begin_line": 925,
    "end_line": 932,
    "comment": "/** \n * Sets the value in the rendering hints table for {@link RenderingHints#KEY_TEXT_ANTIALIASING} to either{@link RenderingHints#VALUE_TEXT_ANTIALIAS_ON} or{@link RenderingHints#VALUE_TEXT_ANTIALIAS_OFF}, then sends a {@link ChartChangeEvent} to all registered listeners.\n * @param flag  the new value of the flag.\n * @since 1.0.5\n * @see #getTextAntiAlias()\n * @see #setTextAntiAlias(Object)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setTextAntiAlias#946",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setTextAntiAlias(java.lang.Object)",
    "snippet": "public void setTextAntiAlias(Object val){\n  this.renderingHints.put(RenderingHints.KEY_TEXT_ANTIALIASING,val);\n  notifyListeners(new ChartChangeEvent(this));\n}",
    "begin_line": 946,
    "end_line": 949,
    "comment": "/** \n * Sets the value in the rendering hints table for {@link RenderingHints#KEY_TEXT_ANTIALIASING} and sends a{@link ChartChangeEvent} to all registered listeners.\n * @param val  the new value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.5\n * @see #getTextAntiAlias()\n * @see #setTextAntiAlias(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBackgroundPaint#958",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBackgroundPaint()",
    "snippet": "public Paint getBackgroundPaint(){\n  return this.backgroundPaint;\n}",
    "begin_line": 958,
    "end_line": 960,
    "comment": "/** \n * Returns the paint used for the chart background.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBackgroundPaint#970",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setBackgroundPaint(Paint paint){\n  if (this.backgroundPaint !\u003d null) {\n    if (!this.backgroundPaint.equals(paint)) {\n      this.backgroundPaint\u003dpaint;\n      fireChartChanged();\n    }\n  }\n else {\n    if (paint !\u003d null) {\n      this.backgroundPaint\u003dpaint;\n      fireChartChanged();\n    }\n  }\n}",
    "begin_line": 970,
    "end_line": 985,
    "comment": "/** \n * Sets the paint used to fill the chart background and sends a {@link ChartChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBackgroundImage#995",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBackgroundImage()",
    "snippet": "public Image getBackgroundImage(){\n  return this.backgroundImage;\n}",
    "begin_line": 995,
    "end_line": 997,
    "comment": "/** \n * Returns the background image for the chart, or \u003ccode\u003enull\u003c/code\u003e if there is no image.\n * @return The image (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundImage(Image)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBackgroundImage#1007",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBackgroundImage(java.awt.Image)",
    "snippet": "public void setBackgroundImage(Image image){\n  if (this.backgroundImage !\u003d null) {\n    if (!this.backgroundImage.equals(image)) {\n      this.backgroundImage\u003dimage;\n      fireChartChanged();\n    }\n  }\n else {\n    if (image !\u003d null) {\n      this.backgroundImage\u003dimage;\n      fireChartChanged();\n    }\n  }\n}",
    "begin_line": 1007,
    "end_line": 1022,
    "comment": "/** \n * Sets the background image for the chart and sends a {@link ChartChangeEvent} to all registered listeners.\n * @param image  the image (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundImage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBackgroundImageAlignment#1033",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBackgroundImageAlignment()",
    "snippet": "public int getBackgroundImageAlignment(){\n  return this.backgroundImageAlignment;\n}",
    "begin_line": 1033,
    "end_line": 1035,
    "comment": "/** \n * Returns the background image alignment. Alignment constants are defined in the \u003ccode\u003eorg.jfree.ui.Align\u003c/code\u003e class in the JCommon class library.\n * @return The alignment.\n * @see #setBackgroundImageAlignment(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBackgroundImageAlignment#1045",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBackgroundImageAlignment(int)",
    "snippet": "public void setBackgroundImageAlignment(int alignment){\n  if (this.backgroundImageAlignment !\u003d alignment) {\n    this.backgroundImageAlignment\u003dalignment;\n    fireChartChanged();\n  }\n}",
    "begin_line": 1045,
    "end_line": 1050,
    "comment": "/** \n * Sets the background alignment.  Alignment options are defined by the {@link Align} class.\n * @param alignment  the alignment.\n * @see #getBackgroundImageAlignment()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.getBackgroundImageAlpha#1059",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getBackgroundImageAlpha()",
    "snippet": "public float getBackgroundImageAlpha(){\n  return this.backgroundImageAlpha;\n}",
    "begin_line": 1059,
    "end_line": 1061,
    "comment": "/** \n * Returns the alpha-transparency for the chart\u0027s background image.\n * @return The alpha-transparency.\n * @see #setBackgroundImageAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setBackgroundImageAlpha#1071",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setBackgroundImageAlpha(float)",
    "snippet": "public void setBackgroundImageAlpha(float alpha){\n  if (this.backgroundImageAlpha !\u003d alpha) {\n    this.backgroundImageAlpha\u003dalpha;\n    fireChartChanged();\n  }\n}",
    "begin_line": 1071,
    "end_line": 1078,
    "comment": "/** \n * Sets the alpha-transparency for the chart\u0027s background image. Registered listeners are notified that the chart has been changed.\n * @param alpha  the alpha value.\n * @see #getBackgroundImageAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.isNotify#1088",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.isNotify()",
    "snippet": "public boolean isNotify(){\n  return this.notify;\n}",
    "begin_line": 1088,
    "end_line": 1090,
    "comment": "/** \n * Returns a flag that controls whether or not change events are sent to registered listeners.\n * @return A boolean.\n * @see #setNotify(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.setNotify#1100",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.setNotify(boolean)",
    "snippet": "public void setNotify(boolean notify){\n  this.notify\u003dnotify;\n  if (notify) {\n    notifyListeners(new ChartChangeEvent(this));\n  }\n}",
    "begin_line": 1100,
    "end_line": 1106,
    "comment": "/** \n * Sets a flag that controls whether or not listeners receive {@link ChartChangeEvent} notifications.\n * @param notify  a boolean.\n * @see #isNotify()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.draw#1117",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  draw(g2,area,null,null);\n}",
    "begin_line": 1117,
    "end_line": 1119,
    "comment": "/** \n * Draws the chart on a Java 2D graphics device (such as the screen or a printer). \u003cP\u003e This method is the focus of the entire JFreeChart library.\n * @param g2  the graphics device.\n * @param area  the area within which the chart should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.draw#1129",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area,ChartRenderingInfo info){\n  draw(g2,area,null,info);\n}",
    "begin_line": 1129,
    "end_line": 1131,
    "comment": "/** \n * Draws the chart on a Java 2D graphics device (such as the screen or a printer).  This method is the focus of the entire JFreeChart library.\n * @param g2  the graphics device.\n * @param area  the area within which the chart should be drawn.\n * @param info  records info about the drawing (null means collect no info).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.draw#1145",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D chartArea,Point2D anchor,ChartRenderingInfo info){\n  notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_STARTED,0));\n  EntityCollection entities\u003dnull;\n  if (info !\u003d null) {\n    info.clear();\n    info.setChartArea(chartArea);\n    entities\u003dinfo.getEntityCollection();\n  }\n  if (entities !\u003d null) {\n    entities.add(new JFreeChartEntity((Rectangle2D)chartArea.clone(),this));\n  }\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(chartArea);\n  g2.addRenderingHints(this.renderingHints);\n  if (this.backgroundPaint !\u003d null) {\n    g2.setPaint(this.backgroundPaint);\n    g2.fill(chartArea);\n  }\n  if (this.backgroundImage !\u003d null) {\n    Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundImageAlpha));\n    Rectangle2D dest\u003dnew Rectangle2D.Double(0.0,0.0,this.backgroundImage.getWidth(null),this.backgroundImage.getHeight(null));\n    Align.align(dest,chartArea,this.backgroundImageAlignment);\n    g2.drawImage(this.backgroundImage,(int)dest.getX(),(int)dest.getY(),(int)dest.getWidth(),(int)dest.getHeight(),null);\n    g2.setComposite(originalComposite);\n  }\n  if (isBorderVisible()) {\n    Paint paint\u003dgetBorderPaint();\n    Stroke stroke\u003dgetBorderStroke();\n    if (paint !\u003d null \u0026\u0026 stroke !\u003d null) {\n      Rectangle2D borderArea\u003dnew Rectangle2D.Double(chartArea.getX(),chartArea.getY(),chartArea.getWidth() - 1.0,chartArea.getHeight() - 1.0);\n      g2.setPaint(paint);\n      g2.setStroke(stroke);\n      g2.draw(borderArea);\n    }\n  }\n  Rectangle2D nonTitleArea\u003dnew Rectangle2D.Double();\n  nonTitleArea.setRect(chartArea);\n  this.padding.trim(nonTitleArea);\n  if (this.title !\u003d null \u0026\u0026 this.title.isVisible()) {\n    EntityCollection e\u003ddrawTitle(this.title,g2,nonTitleArea,(entities !\u003d null));\n    if (e !\u003d null) {\n      entities.addAll(e);\n    }\n  }\n  Iterator iterator\u003dthis.subtitles.iterator();\n  while (iterator.hasNext()) {\n    Title currentTitle\u003d(Title)iterator.next();\n    if (currentTitle.isVisible()) {\n      EntityCollection e\u003ddrawTitle(currentTitle,g2,nonTitleArea,(entities !\u003d null));\n      if (e !\u003d null) {\n        entities.addAll(e);\n      }\n    }\n  }\n  Rectangle2D plotArea\u003dnonTitleArea;\n  PlotRenderingInfo plotInfo\u003dnull;\n  if (info !\u003d null) {\n    plotInfo\u003dinfo.getPlotInfo();\n  }\n  this.plot.draw(g2,plotArea,anchor,null,plotInfo);\n  g2.setClip(savedClip);\n  notifyListeners(new ChartProgressEvent(this,this,ChartProgressEvent.DRAWING_FINISHED,100));\n}",
    "begin_line": 1145,
    "end_line": 1242,
    "comment": "/** \n * Draws the chart on a Java 2D graphics device (such as the screen or a printer). \u003cP\u003e This method is the focus of the entire JFreeChart library.\n * @param g2  the graphics device.\n * @param chartArea  the area within which the chart should be drawn.\n * @param anchor  the anchor point (in Java2D space) for the chart(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param info  records info about the drawing (null means collect no info).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.createAlignedRectangle2D#1254",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment)",
    "snippet": "private Rectangle2D createAlignedRectangle2D(Size2D dimensions,Rectangle2D frame,HorizontalAlignment hAlign,VerticalAlignment vAlign){\n  double x\u003dDouble.NaN;\n  double y\u003dDouble.NaN;\n  if (hAlign \u003d\u003d HorizontalAlignment.LEFT) {\n    x\u003dframe.getX();\n  }\n else   if (hAlign \u003d\u003d HorizontalAlignment.CENTER) {\n    x\u003dframe.getCenterX() - (dimensions.width / 2.0);\n  }\n else   if (hAlign \u003d\u003d HorizontalAlignment.RIGHT) {\n    x\u003dframe.getMaxX() - dimensions.width;\n  }\n  if (vAlign \u003d\u003d VerticalAlignment.TOP) {\n    y\u003dframe.getY();\n  }\n else   if (vAlign \u003d\u003d VerticalAlignment.CENTER) {\n    y\u003dframe.getCenterY() - (dimensions.height / 2.0);\n  }\n else   if (vAlign \u003d\u003d VerticalAlignment.BOTTOM) {\n    y\u003dframe.getMaxY() - dimensions.height;\n  }\n  return new Rectangle2D.Double(x,y,dimensions.width,dimensions.height);\n}",
    "begin_line": 1254,
    "end_line": 1280,
    "comment": "/** \n * Creates a rectangle that is aligned to the frame.\n * @param dimensions  the dimensions for the rectangle.\n * @param frame  the frame to align to.\n * @param hAlign  the horizontal alignment.\n * @param vAlign  the vertical alignment.\n * @return A rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.drawTitle#1296",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
    "snippet": "protected EntityCollection drawTitle(Title t,Graphics2D g2,Rectangle2D area,boolean entities){\n  if (t \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027t\u0027 argument.\");\n  }\n  if (area \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027area\u0027 argument.\");\n  }\n  Rectangle2D titleArea;\n  RectangleEdge position\u003dt.getPosition();\n  double ww\u003darea.getWidth();\n  if (ww \u003c\u003d 0.0) {\n    return null;\n  }\n  double hh\u003darea.getHeight();\n  if (hh \u003c\u003d 0.0) {\n    return null;\n  }\n  RectangleConstraint constraint\u003dnew RectangleConstraint(ww,new Range(0.0,ww),LengthConstraintType.RANGE,hh,new Range(0.0,hh),LengthConstraintType.RANGE);\n  Object retValue\u003dnull;\n  BlockParams p\u003dnew BlockParams();\n  p.setGenerateEntities(entities);\n  if (position \u003d\u003d RectangleEdge.TOP) {\n    Size2D size\u003dt.arrange(g2,constraint);\n    titleArea\u003dcreateAlignedRectangle2D(size,area,t.getHorizontalAlignment(),VerticalAlignment.TOP);\n    retValue\u003dt.draw(g2,titleArea,p);\n    area.setRect(area.getX(),Math.min(area.getY() + size.height,area.getMaxY()),area.getWidth(),Math.max(area.getHeight() - size.height,0));\n  }\n else   if (position \u003d\u003d RectangleEdge.BOTTOM) {\n    Size2D size\u003dt.arrange(g2,constraint);\n    titleArea\u003dcreateAlignedRectangle2D(size,area,t.getHorizontalAlignment(),VerticalAlignment.BOTTOM);\n    retValue\u003dt.draw(g2,titleArea,p);\n    area.setRect(area.getX(),area.getY(),area.getWidth(),area.getHeight() - size.height);\n  }\n else   if (position \u003d\u003d RectangleEdge.RIGHT) {\n    Size2D size\u003dt.arrange(g2,constraint);\n    titleArea\u003dcreateAlignedRectangle2D(size,area,HorizontalAlignment.RIGHT,t.getVerticalAlignment());\n    retValue\u003dt.draw(g2,titleArea,p);\n    area.setRect(area.getX(),area.getY(),area.getWidth() - size.width,area.getHeight());\n  }\n else   if (position \u003d\u003d RectangleEdge.LEFT) {\n    Size2D size\u003dt.arrange(g2,constraint);\n    titleArea\u003dcreateAlignedRectangle2D(size,area,HorizontalAlignment.LEFT,t.getVerticalAlignment());\n    retValue\u003dt.draw(g2,titleArea,p);\n    area.setRect(area.getX() + size.width,area.getY(),area.getWidth() - size.width,area.getHeight());\n  }\n else {\n    throw new RuntimeException(\"Unrecognised title position.\");\n  }\n  EntityCollection result\u003dnull;\n  if (retValue instanceof EntityBlockResult) {\n    EntityBlockResult ebr\u003d(EntityBlockResult)retValue;\n    result\u003debr.getEntityCollection();\n  }\n  return result;\n}",
    "begin_line": 1296,
    "end_line": 1364,
    "comment": "/** \n * Draws a title.  The title should be drawn at the top, bottom, left or right of the specified area, and the area should be updated to reflect the amount of space used by the title.\n * @param t  the title (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param area  the chart area, excluding any existing titles(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param entities  a flag that controls whether or not an entitycollection is returned for the title.\n * @return An entity collection for the title (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.createBufferedImage#1374",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int)",
    "snippet": "public BufferedImage createBufferedImage(int width,int height){\n  return createBufferedImage(width,height,null);\n}",
    "begin_line": 1374,
    "end_line": 1376,
    "comment": "/** \n * Creates and returns a buffered image into which the chart has been drawn.\n * @param width  the width.\n * @param height  the height.\n * @return A buffered image.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.createBufferedImage#1388",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public BufferedImage createBufferedImage(int width,int height,ChartRenderingInfo info){\n  return createBufferedImage(width,height,BufferedImage.TYPE_INT_ARGB,info);\n}",
    "begin_line": 1388,
    "end_line": 1392,
    "comment": "/** \n * Creates and returns a buffered image into which the chart has been drawn.\n * @param width  the width.\n * @param height  the height.\n * @param info  carries back chart state information (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A buffered image.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.createBufferedImage#1405",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, int, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public BufferedImage createBufferedImage(int width,int height,int imageType,ChartRenderingInfo info){\n  BufferedImage image\u003dnew BufferedImage(width,height,imageType);\n  Graphics2D g2\u003dimage.createGraphics();\n  draw(g2,new Rectangle2D.Double(0,0,width,height),null,info);\n  g2.dispose();\n  return image;\n}",
    "begin_line": 1405,
    "end_line": 1413,
    "comment": "/** \n * Creates and returns a buffered image into which the chart has been drawn.\n * @param width  the width.\n * @param height  the height.\n * @param imageType  the image type.\n * @param info  carries back chart state information (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A buffered image.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.createBufferedImage#1429",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, double, double, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public BufferedImage createBufferedImage(int imageWidth,int imageHeight,double drawWidth,double drawHeight,ChartRenderingInfo info){\n  BufferedImage image\u003dnew BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);\n  Graphics2D g2\u003dimage.createGraphics();\n  double scaleX\u003dimageWidth / drawWidth;\n  double scaleY\u003dimageHeight / drawHeight;\n  AffineTransform st\u003dAffineTransform.getScaleInstance(scaleX,scaleY);\n  g2.transform(st);\n  draw(g2,new Rectangle2D.Double(0,0,drawWidth,drawHeight),null,info);\n  g2.dispose();\n  return image;\n}",
    "begin_line": 1429,
    "end_line": 1447,
    "comment": "/** \n * Creates and returns a buffered image into which the chart has been drawn.\n * @param imageWidth  the image width.\n * @param imageHeight  the image height.\n * @param drawWidth  the width for drawing the chart (will be scaled tofit image).\n * @param drawHeight  the height for drawing the chart (will be scaled tofit image).\n * @param info  optional object for collection chart dimension and entityinformation.\n * @return A buffered image.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.handleClick#1461",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.handleClick(int, int, org.jfree.chart.ChartRenderingInfo)",
    "snippet": "public void handleClick(int x,int y,ChartRenderingInfo info){\n  this.plot.handleClick(x,y,info.getPlotInfo());\n}",
    "begin_line": 1461,
    "end_line": 1467,
    "comment": "/** \n * Handles a \u0027click\u0027 on the chart.  JFreeChart is not a UI component, so some other object (for example,  {@link ChartPanel}) needs to capture the click event and pass it onto the JFreeChart object. If you are not using JFreeChart in a client application, then this method is not required.\n * @param x  x-coordinate of the click (in Java2D space).\n * @param y  y-coordinate of the click (in Java2D space).\n * @param info  contains chart dimension and entity information(\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.addChangeListener#1476",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.addChangeListener(org.jfree.chart.event.ChartChangeListener)",
    "snippet": "public void addChangeListener(ChartChangeListener listener){\n  if (listener \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027listener\u0027 argument.\");\n  }\n  this.changeListeners.add(ChartChangeListener.class,listener);\n}",
    "begin_line": 1476,
    "end_line": 1481,
    "comment": "/** \n * Registers an object for notification of changes to the chart.\n * @param listener  the listener (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeChangeListener(ChartChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.removeChangeListener#1490",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.removeChangeListener(org.jfree.chart.event.ChartChangeListener)",
    "snippet": "public void removeChangeListener(ChartChangeListener listener){\n  if (listener \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027listener\u0027 argument.\");\n  }\n  this.changeListeners.remove(ChartChangeListener.class,listener);\n}",
    "begin_line": 1490,
    "end_line": 1495,
    "comment": "/** \n * Deregisters an object for notification of changes to the chart.\n * @param listener  the listener (\u003ccode\u003enull\u003c/code\u003e not permitted)\n * @see #addChangeListener(ChartChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.fireChartChanged#1502",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.fireChartChanged()",
    "snippet": "public void fireChartChanged(){\n  ChartChangeEvent event\u003dnew ChartChangeEvent(this);\n  notifyListeners(event);\n}",
    "begin_line": 1502,
    "end_line": 1505,
    "comment": "/** \n * Sends a default  {@link ChartChangeEvent} to all registered listeners.\u003cP\u003e This method is for convenience only.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.notifyListeners#1513",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent)",
    "snippet": "protected void notifyListeners(ChartChangeEvent event){\n  if (this.notify) {\n    Object[] listeners\u003dthis.changeListeners.getListenerList();\n    for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n      if (listeners[i] \u003d\u003d ChartChangeListener.class) {\n        ((ChartChangeListener)listeners[i + 1]).chartChanged(event);\n      }\n    }\n  }\n}",
    "begin_line": 1513,
    "end_line": 1523,
    "comment": "/** \n * Sends a  {@link ChartChangeEvent} to all registered listeners.\n * @param event  information about the event that triggered thenotification.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.addProgressListener#1533",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.addProgressListener(org.jfree.chart.event.ChartProgressListener)",
    "snippet": "public void addProgressListener(ChartProgressListener listener){\n  this.progressListeners.add(ChartProgressListener.class,listener);\n}",
    "begin_line": 1533,
    "end_line": 1535,
    "comment": "/** \n * Registers an object for notification of progress events relating to the chart.\n * @param listener  the object being registered.\n * @see #removeProgressListener(ChartProgressListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.removeProgressListener#1544",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.removeProgressListener(org.jfree.chart.event.ChartProgressListener)",
    "snippet": "public void removeProgressListener(ChartProgressListener listener){\n  this.progressListeners.remove(ChartProgressListener.class,listener);\n}",
    "begin_line": 1544,
    "end_line": 1546,
    "comment": "/** \n * Deregisters an object for notification of changes to the chart.\n * @param listener  the object being deregistered.\n * @see #addProgressListener(ChartProgressListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.notifyListeners#1554",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent)",
    "snippet": "protected void notifyListeners(ChartProgressEvent event){\n  Object[] listeners\u003dthis.progressListeners.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d ChartProgressListener.class) {\n      ((ChartProgressListener)listeners[i + 1]).chartProgress(event);\n    }\n  }\n}",
    "begin_line": 1554,
    "end_line": 1563,
    "comment": "/** \n * Sends a  {@link ChartProgressEvent} to all registered listeners.\n * @param event  information about the event that triggered thenotification.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.titleChanged#1571",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.titleChanged(org.jfree.chart.event.TitleChangeEvent)",
    "snippet": "public void titleChanged(TitleChangeEvent event){\n  event.setChart(this);\n  notifyListeners(event);\n}",
    "begin_line": 1571,
    "end_line": 1574,
    "comment": "/** \n * Receives notification that a chart title has changed, and passes this on to registered listeners.\n * @param event  information about the chart title change.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.plotChanged#1582",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
    "snippet": "public void plotChanged(PlotChangeEvent event){\n  event.setChart(this);\n  notifyListeners(event);\n}",
    "begin_line": 1582,
    "end_line": 1585,
    "comment": "/** \n * Receives notification that the plot has changed, and passes this on to registered listeners.\n * @param event  information about the plot change.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.equals#1594",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof JFreeChart)) {\n    return false;\n  }\n  JFreeChart that\u003d(JFreeChart)obj;\n  if (!this.renderingHints.equals(that.renderingHints)) {\n    return false;\n  }\n  if (this.borderVisible !\u003d that.borderVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.borderStroke,that.borderStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.borderPaint,that.borderPaint)) {\n    return false;\n  }\n  if (!this.padding.equals(that.padding)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.title,that.title)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.subtitles,that.subtitles)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.plot,that.plot)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundImage,that.backgroundImage)) {\n    return false;\n  }\n  if (this.backgroundImageAlignment !\u003d that.backgroundImageAlignment) {\n    return false;\n  }\n  if (this.backgroundImageAlpha !\u003d that.backgroundImageAlpha) {\n    return false;\n  }\n  if (this.notify !\u003d that.notify) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1594,
    "end_line": 1645,
    "comment": "/** \n * Tests this chart for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.writeObject#1654",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeStroke(this.borderStroke,stream);\n  SerialUtilities.writePaint(this.borderPaint,stream);\n  SerialUtilities.writePaint(this.backgroundPaint,stream);\n}",
    "begin_line": 1654,
    "end_line": 1659,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.readObject#1669",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.borderStroke\u003dSerialUtilities.readStroke(stream);\n  this.borderPaint\u003dSerialUtilities.readPaint(stream);\n  this.backgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.progressListeners\u003dnew EventListenerList();\n  this.changeListeners\u003dnew EventListenerList();\n  this.renderingHints\u003dnew RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);\n  if (this.title !\u003d null) {\n    this.title.addChangeListener(this);\n  }\n  for (int i\u003d0; i \u003c getSubtitleCount(); i++) {\n    getSubtitle(i).addChangeListener(this);\n  }\n  this.plot.addChangeListener(this);\n}",
    "begin_line": 1669,
    "end_line": 1690,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.main#1697",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.main(java.lang.String[])",
    "snippet": "public static void main(String[] args){\n  System.out.println(JFreeChart.INFO.toString());\n}",
    "begin_line": 1697,
    "end_line": 1699,
    "comment": "/** \n * Prints information about JFreeChart to standard output.\n * @param args  no arguments are honored.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChart.clone#1709",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  JFreeChart chart\u003d(JFreeChart)super.clone();\n  chart.renderingHints\u003d(RenderingHints)this.renderingHints.clone();\n  if (this.title !\u003d null) {\n    chart.title\u003d(TextTitle)this.title.clone();\n    chart.title.addChangeListener(chart);\n  }\n  chart.subtitles\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c getSubtitleCount(); i++) {\n    Title subtitle\u003d(Title)getSubtitle(i).clone();\n    chart.subtitles.add(subtitle);\n    subtitle.addChangeListener(chart);\n  }\n  if (this.plot !\u003d null) {\n    chart.plot\u003d(Plot)this.plot.clone();\n    chart.plot.addChangeListener(chart);\n  }\n  chart.progressListeners\u003dnew EventListenerList();\n  chart.changeListeners\u003dnew EventListenerList();\n  return chart;\n}",
    "begin_line": 1709,
    "end_line": 1737,
    "comment": "/** \n * Clones the object, and takes care of listeners. Note: caller shall register its own listeners on cloned graph.\n * @return A clone.\n * @throws CloneNotSupportedException if the chart is not cloneable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChartInfo.JFreeChartInfo#1750",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.JFreeChartInfo()",
    "snippet": "public JFreeChartInfo(){\n  String baseResourceClass\u003d\"org.jfree.chart.resources.JFreeChartResources\";\n  ResourceBundle resources\u003dResourceBundleWrapper.getBundle(baseResourceClass);\n  setName(resources.getString(\"project.name\"));\n  setVersion(resources.getString(\"project.version\"));\n  setInfo(resources.getString(\"project.info\"));\n  setCopyright(resources.getString(\"project.copyright\"));\n  setLogo(null);\n  setLicenceName(\"LGPL\");\n  setLicenceText(Licences.getInstance().getLGPL());\n  setContributors(Arrays.asList(new Contributor[]{new Contributor(\"Eric Alexander\",\"-\"),new Contributor(\"Richard Atkinson\",\"richard_c_atkinson@ntlworld.com\"),new Contributor(\"David Basten\",\"-\"),new Contributor(\"David Berry\",\"-\"),new Contributor(\"Chris Boek\",\"-\"),new Contributor(\"Zoheb Borbora\",\"-\"),new Contributor(\"Anthony Boulestreau\",\"-\"),new Contributor(\"Jeremy Bowman\",\"-\"),new Contributor(\"Nicolas Brodu\",\"-\"),new Contributor(\"Jody Brownell\",\"-\"),new Contributor(\"David Browning\",\"-\"),new Contributor(\"Soren Caspersen\",\"-\"),new Contributor(\"Chuanhao Chiu\",\"-\"),new Contributor(\"Brian Cole\",\"-\"),new Contributor(\"Pascal Collet\",\"-\"),new Contributor(\"Martin Cordova\",\"-\"),new Contributor(\"Paolo Cova\",\"-\"),new Contributor(\"Greg Darke\",\"-\"),new Contributor(\"Mike Duffy\",\"-\"),new Contributor(\"Don Elliott\",\"-\"),new Contributor(\"David Forslund\",\"-\"),new Contributor(\"Jonathan Gabbai\",\"-\"),new Contributor(\"David Gilbert\",\"david.gilbert@object-refinery.com\"),new Contributor(\"Serge V. Grachov\",\"-\"),new Contributor(\"Daniel Gredler\",\"-\"),new Contributor(\"Hans-Jurgen Greiner\",\"-\"),new Contributor(\"Joao Guilherme Del Valle\",\"-\"),new Contributor(\"Aiman Han\",\"-\"),new Contributor(\"Cameron Hayne\",\"-\"),new Contributor(\"Martin Hoeller\",\"-\"),new Contributor(\"Jon Iles\",\"-\"),new Contributor(\"Wolfgang Irler\",\"-\"),new Contributor(\"Sergei Ivanov\",\"-\"),new Contributor(\"Adriaan Joubert\",\"-\"),new Contributor(\"Darren Jung\",\"-\"),new Contributor(\"Xun Kang\",\"-\"),new Contributor(\"Bill Kelemen\",\"-\"),new Contributor(\"Norbert Kiesel\",\"-\"),new Contributor(\"Peter Kolb\",\"-\"),new Contributor(\"Gideon Krause\",\"-\"),new Contributor(\"Pierre-Marie Le Biot\",\"-\"),new Contributor(\"Arnaud Lelievre\",\"-\"),new Contributor(\"Wolfgang Lenhard\",\"-\"),new Contributor(\"David Li\",\"-\"),new Contributor(\"Yan Liu\",\"-\"),new Contributor(\"Tin Luu\",\"-\"),new Contributor(\"Craig MacFarlane\",\"-\"),new Contributor(\"Achilleus Mantzios\",\"-\"),new Contributor(\"Thomas Meier\",\"-\"),new Contributor(\"Jim Moore\",\"-\"),new Contributor(\"Jonathan Nash\",\"-\"),new Contributor(\"Barak Naveh\",\"-\"),new Contributor(\"David M. O\u0027Donnell\",\"-\"),new Contributor(\"Krzysztof Paz\",\"-\"),new Contributor(\"Eric Penfold\",\"-\"),new Contributor(\"Tomer Peretz\",\"-\"),new Contributor(\"Diego Pierangeli\",\"-\"),new Contributor(\"Xavier Poinsard\",\"-\"),new Contributor(\"Andrzej Porebski\",\"-\"),new Contributor(\"Viktor Rajewski\",\"-\"),new Contributor(\"Eduardo Ramalho\",\"-\"),new Contributor(\"Michael Rauch\",\"-\"),new Contributor(\"Cameron Riley\",\"-\"),new Contributor(\"Klaus Rheinwald\",\"-\"),new Contributor(\"Dan Rivett\",\"d.rivett@ukonline.co.uk\"),new Contributor(\"Scott Sams\",\"-\"),new Contributor(\"Michel Santos\",\"-\"),new Contributor(\"Thierry Saura\",\"-\"),new Contributor(\"Andreas Schneider\",\"-\"),new Contributor(\"Jean-Luc SCHWAB\",\"-\"),new Contributor(\"Bryan Scott\",\"-\"),new Contributor(\"Tobias Selb\",\"-\"),new Contributor(\"Darshan Shah\",\"-\"),new Contributor(\"Mofeed Shahin\",\"-\"),new Contributor(\"Michael Siemer\",\"-\"),new Contributor(\"Pady Srinivasan\",\"-\"),new Contributor(\"Greg Steckman\",\"-\"),new Contributor(\"Gerald Struck\",\"-\"),new Contributor(\"Roger Studner\",\"-\"),new Contributor(\"Irv Thomae\",\"-\"),new Contributor(\"Eric Thomas\",\"-\"),new Contributor(\"Jess Thrysoee\",\"-\"),new Contributor(\"Rich Unger\",\"-\"),new Contributor(\"Daniel van Enckevort\",\"-\"),new Contributor(\"Laurence Vanhelsuwe\",\"-\"),new Contributor(\"Sylvain Vieujot\",\"-\"),new Contributor(\"Ulrich Voigt\",\"-\"),new Contributor(\"Jelai Wang\",\"-\"),new Contributor(\"Mark Watson\",\"www.markwatson.com\"),new Contributor(\"Alex Weber\",\"-\"),new Contributor(\"Matthew Wright\",\"-\"),new Contributor(\"Benoit Xhenseval\",\"-\"),new Contributor(\"Christian W. Zuckschwerdt\",\"Christian.Zuckschwerdt@Informatik.Uni-Oldenburg.de\"),new Contributor(\"Hari\",\"-\"),new Contributor(\"Sam (oldman)\",\"-\")}));\n}",
    "begin_line": 1750,
    "end_line": 1869,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChartInfo.getLogo#1876",
    "is_bug": true,
    "src_path": "org/jfree/chart/JFreeChart.java",
    "class_name": "org.jfree.chart.JFreeChart",
    "signature": "org.jfree.chart.JFreeChart.getLogo()",
    "snippet": "public Image getLogo(){\n  Image logo\u003dsuper.getLogo();\n  if (logo \u003d\u003d null) {\n    URL imageURL\u003dthis.getClass().getClassLoader().getResource(\"org/jfree/chart/gorilla.jpg\");\n    if (imageURL !\u003d null) {\n      ImageIcon temp\u003dnew ImageIcon(imageURL);\n      logo\u003dtemp.getImage();\n      setLogo(logo);\n    }\n  }\n  return logo;\n}",
    "begin_line": 1876,
    "end_line": 1891,
    "comment": "/** \n * Returns the JFreeChart logo (a picture of a gorilla).\n * @return The JFreeChart logo.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.createJFreeTheme#238",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.createJFreeTheme()",
    "snippet": "public static ChartTheme createJFreeTheme(){\n  return new StandardChartTheme(\"JFree\");\n}",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * Creates and returns the default \u0027JFree\u0027 chart theme.\n * @return A chart theme.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.createDarknessTheme#248",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.createDarknessTheme()",
    "snippet": "public static ChartTheme createDarknessTheme(){\n  StandardChartTheme theme\u003dnew StandardChartTheme(\"Darkness\");\n  theme.titlePaint\u003dColor.white;\n  theme.subtitlePaint\u003dColor.white;\n  theme.legendBackgroundPaint\u003dColor.black;\n  theme.legendItemPaint\u003dColor.white;\n  theme.chartBackgroundPaint\u003dColor.black;\n  theme.plotBackgroundPaint\u003dColor.black;\n  theme.plotOutlinePaint\u003dColor.yellow;\n  theme.baselinePaint\u003dColor.white;\n  theme.crosshairPaint\u003dColor.red;\n  theme.labelLinkPaint\u003dColor.lightGray;\n  theme.tickLabelPaint\u003dColor.white;\n  theme.axisLabelPaint\u003dColor.white;\n  theme.shadowPaint\u003dColor.darkGray;\n  theme.itemLabelPaint\u003dColor.white;\n  theme.drawingSupplier\u003dnew DefaultDrawingSupplier(new Paint[]{Color.decode(\"0xFFFF00\"),Color.decode(\"0x0036CC\"),Color.decode(\"0xFF0000\"),Color.decode(\"0xFFFF7F\"),Color.decode(\"0x6681CC\"),Color.decode(\"0xFF7F7F\"),Color.decode(\"0xFFFFBF\"),Color.decode(\"0x99A6CC\"),Color.decode(\"0xFFBFBF\"),Color.decode(\"0xA9A938\"),Color.decode(\"0x2D4587\")},new Paint[]{Color.decode(\"0xFFFF00\"),Color.decode(\"0x0036CC\")},new Stroke[]{new BasicStroke(2.0f)},new Stroke[]{new BasicStroke(0.5f)},DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE);\n  theme.wallPaint\u003dColor.darkGray;\n  theme.errorIndicatorPaint\u003dColor.lightGray;\n  theme.gridBandPaint\u003dnew Color(255,255,255,20);\n  theme.gridBandAlternatePaint\u003dnew Color(255,255,255,40);\n  return theme;\n}",
    "begin_line": 248,
    "end_line": 281,
    "comment": "/** \n * Creates and returns a theme called \"Darkness\".  In this theme, the charts have a black background.\n * @return The \"Darkness\" theme.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.createLegacyTheme#289",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.createLegacyTheme()",
    "snippet": "public static ChartTheme createLegacyTheme(){\n  StandardChartTheme theme\u003dnew StandardChartTheme(\"Legacy\"){\n    public void apply(    JFreeChart chart){\n    }\n  }\n;\n  return theme;\n}",
    "begin_line": 289,
    "end_line": 296,
    "comment": "/** \n * Creates and returns a  {@link ChartTheme} that doesn\u0027t apply any changesto the JFreeChart defaults.  This produces the \"legacy\" look for JFreeChart.\n * @return A legacy theme.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.apply#291",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.apply(org.jfree.chart.JFreeChart)",
    "snippet": "public void apply(JFreeChart chart){\n}",
    "begin_line": 291,
    "end_line": 293,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.StandardChartTheme#303",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.StandardChartTheme(java.lang.String)",
    "snippet": "public StandardChartTheme(String name){\n  if (name \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027name\u0027 argument.\");\n  }\n  this.name\u003dname;\n  this.extraLargeFont\u003dnew Font(\"Tahoma\",Font.BOLD,20);\n  this.largeFont\u003dnew Font(\"Tahoma\",Font.BOLD,14);\n  this.regularFont\u003dnew Font(\"Tahoma\",Font.PLAIN,12);\n  this.smallFont\u003dnew Font(\"Tahoma\",Font.PLAIN,10);\n  this.titlePaint\u003dColor.black;\n  this.subtitlePaint\u003dColor.black;\n  this.legendBackgroundPaint\u003dColor.white;\n  this.legendItemPaint\u003dColor.darkGray;\n  this.chartBackgroundPaint\u003dColor.white;\n  this.drawingSupplier\u003dnew DefaultDrawingSupplier();\n  this.plotBackgroundPaint\u003dColor.lightGray;\n  this.plotOutlinePaint\u003dColor.black;\n  this.labelLinkPaint\u003dColor.black;\n  this.labelLinkStyle\u003dPieLabelLinkStyle.CUBIC_CURVE;\n  this.axisOffset\u003dnew RectangleInsets(4,4,4,4);\n  this.domainGridlinePaint\u003dColor.white;\n  this.rangeGridlinePaint\u003dColor.white;\n  this.baselinePaint\u003dColor.black;\n  this.crosshairPaint\u003dColor.blue;\n  this.axisLabelPaint\u003dColor.darkGray;\n  this.tickLabelPaint\u003dColor.darkGray;\n  this.barPainter\u003dnew GradientBarPainter();\n  this.xyBarPainter\u003dnew GradientXYBarPainter();\n  this.shadowVisible\u003dtrue;\n  this.shadowPaint\u003dColor.gray;\n  this.itemLabelPaint\u003dColor.black;\n  this.thermometerPaint\u003dColor.white;\n  this.wallPaint\u003dBarRenderer3D.DEFAULT_WALL_PAINT;\n  this.errorIndicatorPaint\u003dColor.black;\n}",
    "begin_line": 303,
    "end_line": 337,
    "comment": "/** \n * Creates a new default instance.\n * @param name  the name of the theme (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getExtraLargeFont#346",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getExtraLargeFont()",
    "snippet": "public Font getExtraLargeFont(){\n  return this.extraLargeFont;\n}",
    "begin_line": 346,
    "end_line": 348,
    "comment": "/** \n * Returns the largest font for this theme.\n * @return The largest font for this theme.\n * @see #setExtraLargeFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setExtraLargeFont#357",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setExtraLargeFont(java.awt.Font)",
    "snippet": "public void setExtraLargeFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.extraLargeFont\u003dfont;\n}",
    "begin_line": 357,
    "end_line": 362,
    "comment": "/** \n * Sets the largest font for this theme.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getExtraLargeFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getLargeFont#371",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getLargeFont()",
    "snippet": "public Font getLargeFont(){\n  return this.largeFont;\n}",
    "begin_line": 371,
    "end_line": 373,
    "comment": "/** \n * Returns the large font for this theme.\n * @return The large font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLargeFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setLargeFont#382",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setLargeFont(java.awt.Font)",
    "snippet": "public void setLargeFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.largeFont\u003dfont;\n}",
    "begin_line": 382,
    "end_line": 387,
    "comment": "/** \n * Sets the large font for this theme.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLargeFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getRegularFont#396",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getRegularFont()",
    "snippet": "public Font getRegularFont(){\n  return this.regularFont;\n}",
    "begin_line": 396,
    "end_line": 398,
    "comment": "/** \n * Returns the regular font.\n * @return The regular font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRegularFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setRegularFont#407",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setRegularFont(java.awt.Font)",
    "snippet": "public void setRegularFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.regularFont\u003dfont;\n}",
    "begin_line": 407,
    "end_line": 412,
    "comment": "/** \n * Sets the regular font for this theme.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRegularFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getSmallFont#423",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getSmallFont()",
    "snippet": "public Font getSmallFont(){\n  return this.smallFont;\n}",
    "begin_line": 423,
    "end_line": 425,
    "comment": "/** \n * Returns the small font.\n * @return The small font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSmallFont(Font)\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setSmallFont#436",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setSmallFont(java.awt.Font)",
    "snippet": "public void setSmallFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.smallFont\u003dfont;\n}",
    "begin_line": 436,
    "end_line": 441,
    "comment": "/** \n * Sets the small font for this theme.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getSmallFont()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getTitlePaint#450",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getTitlePaint()",
    "snippet": "public Paint getTitlePaint(){\n  return this.titlePaint;\n}",
    "begin_line": 450,
    "end_line": 452,
    "comment": "/** \n * Returns the title paint.\n * @return The title paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTitlePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setTitlePaint#461",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setTitlePaint(java.awt.Paint)",
    "snippet": "public void setTitlePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.titlePaint\u003dpaint;\n}",
    "begin_line": 461,
    "end_line": 466,
    "comment": "/** \n * Sets the title paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTitlePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getSubtitlePaint#475",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getSubtitlePaint()",
    "snippet": "public Paint getSubtitlePaint(){\n  return this.subtitlePaint;\n}",
    "begin_line": 475,
    "end_line": 477,
    "comment": "/** \n * Returns the subtitle paint.\n * @return The subtitle paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSubtitlePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setSubtitlePaint#486",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setSubtitlePaint(java.awt.Paint)",
    "snippet": "public void setSubtitlePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.subtitlePaint\u003dpaint;\n}",
    "begin_line": 486,
    "end_line": 491,
    "comment": "/** \n * Sets the subtitle paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getSubtitlePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getChartBackgroundPaint#500",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getChartBackgroundPaint()",
    "snippet": "public Paint getChartBackgroundPaint(){\n  return this.chartBackgroundPaint;\n}",
    "begin_line": 500,
    "end_line": 502,
    "comment": "/** \n * Returns the chart background paint.\n * @return The chart background paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setChartBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setChartBackgroundPaint#511",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setChartBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setChartBackgroundPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.chartBackgroundPaint\u003dpaint;\n}",
    "begin_line": 511,
    "end_line": 516,
    "comment": "/** \n * Sets the chart background paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getChartBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getLegendBackgroundPaint#525",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getLegendBackgroundPaint()",
    "snippet": "public Paint getLegendBackgroundPaint(){\n  return this.legendBackgroundPaint;\n}",
    "begin_line": 525,
    "end_line": 527,
    "comment": "/** \n * Returns the legend background paint.\n * @return The legend background paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setLegendBackgroundPaint#536",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setLegendBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setLegendBackgroundPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.legendBackgroundPaint\u003dpaint;\n}",
    "begin_line": 536,
    "end_line": 541,
    "comment": "/** \n * Sets the legend background paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getLegendItemPaint#550",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getLegendItemPaint()",
    "snippet": "public Paint getLegendItemPaint(){\n  return this.legendItemPaint;\n}",
    "begin_line": 550,
    "end_line": 552,
    "comment": "/** \n * Returns the legend item paint.\n * @return The legend item paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendItemPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setLegendItemPaint#561",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setLegendItemPaint(java.awt.Paint)",
    "snippet": "public void setLegendItemPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.legendItemPaint\u003dpaint;\n}",
    "begin_line": 561,
    "end_line": 566,
    "comment": "/** \n * Sets the legend item paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendItemPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getPlotBackgroundPaint#575",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getPlotBackgroundPaint()",
    "snippet": "public Paint getPlotBackgroundPaint(){\n  return this.plotBackgroundPaint;\n}",
    "begin_line": 575,
    "end_line": 577,
    "comment": "/** \n * Returns the plot background paint.\n * @return The plot background paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPlotBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setPlotBackgroundPaint#586",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setPlotBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setPlotBackgroundPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.plotBackgroundPaint\u003dpaint;\n}",
    "begin_line": 586,
    "end_line": 591,
    "comment": "/** \n * Sets the plot background paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPlotBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getPlotOutlinePaint#600",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getPlotOutlinePaint()",
    "snippet": "public Paint getPlotOutlinePaint(){\n  return this.plotOutlinePaint;\n}",
    "begin_line": 600,
    "end_line": 602,
    "comment": "/** \n * Returns the plot outline paint.\n * @return The plot outline paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPlotOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setPlotOutlinePaint#611",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setPlotOutlinePaint(java.awt.Paint)",
    "snippet": "public void setPlotOutlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.plotOutlinePaint\u003dpaint;\n}",
    "begin_line": 611,
    "end_line": 616,
    "comment": "/** \n * Sets the plot outline paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPlotOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getLabelLinkStyle#625",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getLabelLinkStyle()",
    "snippet": "public PieLabelLinkStyle getLabelLinkStyle(){\n  return this.labelLinkStyle;\n}",
    "begin_line": 625,
    "end_line": 627,
    "comment": "/** \n * Returns the label link style for pie charts.\n * @return The label link style (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelLinkStyle(PieLabelLinkStyle)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setLabelLinkStyle#636",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)",
    "snippet": "public void setLabelLinkStyle(PieLabelLinkStyle style){\n  if (style \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027style\u0027 argument.\");\n  }\n  this.labelLinkStyle\u003dstyle;\n}",
    "begin_line": 636,
    "end_line": 641,
    "comment": "/** \n * Sets the label link style for pie charts.\n * @param style  the style (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelLinkStyle()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getLabelLinkPaint#650",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getLabelLinkPaint()",
    "snippet": "public Paint getLabelLinkPaint(){\n  return this.labelLinkPaint;\n}",
    "begin_line": 650,
    "end_line": 652,
    "comment": "/** \n * Returns the label link paint for pie charts.\n * @return The label link paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelLinkPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setLabelLinkPaint#661",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setLabelLinkPaint(java.awt.Paint)",
    "snippet": "public void setLabelLinkPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.labelLinkPaint\u003dpaint;\n}",
    "begin_line": 661,
    "end_line": 666,
    "comment": "/** \n * Sets the label link paint for pie charts.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelLinkPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getDomainGridlinePaint#675",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getDomainGridlinePaint()",
    "snippet": "public Paint getDomainGridlinePaint(){\n  return this.domainGridlinePaint;\n}",
    "begin_line": 675,
    "end_line": 677,
    "comment": "/** \n * Returns the domain grid line paint.\n * @return The domain grid line paint (never \u003ccode\u003enull\u003ccode\u003e).\n * @see #setDomainGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setDomainGridlinePaint#686",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setDomainGridlinePaint(java.awt.Paint)",
    "snippet": "public void setDomainGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainGridlinePaint\u003dpaint;\n}",
    "begin_line": 686,
    "end_line": 691,
    "comment": "/** \n * Sets the domain grid line paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getRangeGridlinePaint#700",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getRangeGridlinePaint()",
    "snippet": "public Paint getRangeGridlinePaint(){\n  return this.rangeGridlinePaint;\n}",
    "begin_line": 700,
    "end_line": 702,
    "comment": "/** \n * Returns the range grid line paint.\n * @return The range grid line paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setRangeGridlinePaint#711",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setRangeGridlinePaint(java.awt.Paint)",
    "snippet": "public void setRangeGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeGridlinePaint\u003dpaint;\n}",
    "begin_line": 711,
    "end_line": 716,
    "comment": "/** \n * Sets the range grid line paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getBaselinePaint#725",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getBaselinePaint()",
    "snippet": "public Paint getBaselinePaint(){\n  return this.baselinePaint;\n}",
    "begin_line": 725,
    "end_line": 727,
    "comment": "/** \n * Returns the baseline paint.\n * @return The baseline paint.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setBaselinePaint#736",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setBaselinePaint(java.awt.Paint)",
    "snippet": "public void setBaselinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baselinePaint\u003dpaint;\n}",
    "begin_line": 736,
    "end_line": 741,
    "comment": "/** \n * Sets the baseline paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getCrosshairPaint#748",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getCrosshairPaint()",
    "snippet": "public Paint getCrosshairPaint(){\n  return this.crosshairPaint;\n}",
    "begin_line": 748,
    "end_line": 750,
    "comment": "/** \n * Returns the crosshair paint.\n * @return The crosshair paint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setCrosshairPaint#757",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setCrosshairPaint(java.awt.Paint)",
    "snippet": "public void setCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.crosshairPaint\u003dpaint;\n}",
    "begin_line": 757,
    "end_line": 762,
    "comment": "/** \n * Sets the crosshair paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getAxisOffset#771",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getAxisOffset()",
    "snippet": "public RectangleInsets getAxisOffset(){\n  return this.axisOffset;\n}",
    "begin_line": 771,
    "end_line": 773,
    "comment": "/** \n * Returns the axis offsets.\n * @return The axis offsets (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setAxisOffset#782",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setAxisOffset(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setAxisOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.axisOffset\u003doffset;\n}",
    "begin_line": 782,
    "end_line": 787,
    "comment": "/** \n * Sets the axis offset.\n * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getAxisLabelPaint#796",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getAxisLabelPaint()",
    "snippet": "public Paint getAxisLabelPaint(){\n  return this.axisLabelPaint;\n}",
    "begin_line": 796,
    "end_line": 798,
    "comment": "/** \n * Returns the axis label paint.\n * @return The axis label paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setAxisLabelPaint#807",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setAxisLabelPaint(java.awt.Paint)",
    "snippet": "public void setAxisLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.axisLabelPaint\u003dpaint;\n}",
    "begin_line": 807,
    "end_line": 812,
    "comment": "/** \n * Sets the axis label paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getTickLabelPaint#821",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getTickLabelPaint()",
    "snippet": "public Paint getTickLabelPaint(){\n  return this.tickLabelPaint;\n}",
    "begin_line": 821,
    "end_line": 823,
    "comment": "/** \n * Returns the tick label paint.\n * @return The tick label paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setTickLabelPaint#832",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setTickLabelPaint(java.awt.Paint)",
    "snippet": "public void setTickLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.tickLabelPaint\u003dpaint;\n}",
    "begin_line": 832,
    "end_line": 837,
    "comment": "/** \n * Sets the tick label paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getItemLabelPaint#846",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getItemLabelPaint()",
    "snippet": "public Paint getItemLabelPaint(){\n  return this.itemLabelPaint;\n}",
    "begin_line": 846,
    "end_line": 848,
    "comment": "/** \n * Returns the item label paint.\n * @return The item label paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setItemLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setItemLabelPaint#857",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setItemLabelPaint(java.awt.Paint)",
    "snippet": "public void setItemLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.itemLabelPaint\u003dpaint;\n}",
    "begin_line": 857,
    "end_line": 862,
    "comment": "/** \n * Sets the item label paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getItemLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.isShadowVisible#871",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.isShadowVisible()",
    "snippet": "public boolean isShadowVisible(){\n  return this.shadowVisible;\n}",
    "begin_line": 871,
    "end_line": 873,
    "comment": "/** \n * Returns the shadow visibility flag.\n * @return The shadow visibility flag.\n * @see #setShadowVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setShadowVisible#882",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setShadowVisible(boolean)",
    "snippet": "public void setShadowVisible(boolean visible){\n  this.shadowVisible\u003dvisible;\n}",
    "begin_line": 882,
    "end_line": 884,
    "comment": "/** \n * Sets the shadow visibility flag.\n * @param visible  the flag.\n * @see #isShadowVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getShadowPaint#893",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getShadowPaint()",
    "snippet": "public Paint getShadowPaint(){\n  return this.shadowPaint;\n}",
    "begin_line": 893,
    "end_line": 895,
    "comment": "/** \n * Returns the shadow paint.\n * @return The shadow paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setShadowPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setShadowPaint#904",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setShadowPaint(java.awt.Paint)",
    "snippet": "public void setShadowPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.shadowPaint\u003dpaint;\n}",
    "begin_line": 904,
    "end_line": 909,
    "comment": "/** \n * Sets the shadow paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getShadowPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getBarPainter#918",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getBarPainter()",
    "snippet": "public BarPainter getBarPainter(){\n  return this.barPainter;\n}",
    "begin_line": 918,
    "end_line": 920,
    "comment": "/** \n * Returns the bar painter.\n * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBarPainter(BarPainter)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setBarPainter#929",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setBarPainter(org.jfree.chart.renderer.category.BarPainter)",
    "snippet": "public void setBarPainter(BarPainter painter){\n  if (painter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027painter\u0027 argument.\");\n  }\n  this.barPainter\u003dpainter;\n}",
    "begin_line": 929,
    "end_line": 934,
    "comment": "/** \n * Sets the bar painter.\n * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBarPainter()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getXYBarPainter#943",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getXYBarPainter()",
    "snippet": "public XYBarPainter getXYBarPainter(){\n  return this.xyBarPainter;\n}",
    "begin_line": 943,
    "end_line": 945,
    "comment": "/** \n * Returns the XY bar painter.\n * @return The XY bar painter (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setXYBarPainter(XYBarPainter)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setXYBarPainter#954",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setXYBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)",
    "snippet": "public void setXYBarPainter(XYBarPainter painter){\n  if (painter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027painter\u0027 argument.\");\n  }\n  this.xyBarPainter\u003dpainter;\n}",
    "begin_line": 954,
    "end_line": 959,
    "comment": "/** \n * Sets the XY bar painter.\n * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getXYBarPainter()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getThermometerPaint#968",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getThermometerPaint()",
    "snippet": "public Paint getThermometerPaint(){\n  return this.thermometerPaint;\n}",
    "begin_line": 968,
    "end_line": 970,
    "comment": "/** \n * Returns the thermometer paint.\n * @return The thermometer paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setThermometerPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setThermometerPaint#979",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setThermometerPaint(java.awt.Paint)",
    "snippet": "public void setThermometerPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.thermometerPaint\u003dpaint;\n}",
    "begin_line": 979,
    "end_line": 984,
    "comment": "/** \n * Sets the thermometer paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getThermometerPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getWallPaint#993",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getWallPaint()",
    "snippet": "public Paint getWallPaint(){\n  return this.wallPaint;\n}",
    "begin_line": 993,
    "end_line": 995,
    "comment": "/** \n * Returns the wall paint for charts with a 3D effect.\n * @return The wall paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setWallPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setWallPaint#1004",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setWallPaint(java.awt.Paint)",
    "snippet": "public void setWallPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.wallPaint\u003dpaint;\n}",
    "begin_line": 1004,
    "end_line": 1009,
    "comment": "/** \n * Sets the wall paint for charts with a 3D effect.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getWallPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getErrorIndicatorPaint#1018",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getErrorIndicatorPaint()",
    "snippet": "public Paint getErrorIndicatorPaint(){\n  return this.errorIndicatorPaint;\n}",
    "begin_line": 1018,
    "end_line": 1020,
    "comment": "/** \n * Returns the error indicator paint.\n * @return The error indicator paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setErrorIndicatorPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setErrorIndicatorPaint#1029",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setErrorIndicatorPaint(java.awt.Paint)",
    "snippet": "public void setErrorIndicatorPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.errorIndicatorPaint\u003dpaint;\n}",
    "begin_line": 1029,
    "end_line": 1034,
    "comment": "/** \n * Sets the error indicator paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getErrorIndicatorPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getGridBandPaint#1043",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getGridBandPaint()",
    "snippet": "public Paint getGridBandPaint(){\n  return this.gridBandPaint;\n}",
    "begin_line": 1043,
    "end_line": 1045,
    "comment": "/** \n * Returns the grid band paint.\n * @return The grid band paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGridBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setGridBandPaint#1054",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setGridBandPaint(java.awt.Paint)",
    "snippet": "public void setGridBandPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.gridBandPaint\u003dpaint;\n}",
    "begin_line": 1054,
    "end_line": 1059,
    "comment": "/** \n * Sets the grid band paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGridBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getGridBandAlternatePaint#1068",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getGridBandAlternatePaint()",
    "snippet": "public Paint getGridBandAlternatePaint(){\n  return this.gridBandAlternatePaint;\n}",
    "begin_line": 1068,
    "end_line": 1070,
    "comment": "/** \n * Returns the grid band alternate paint (used for a  {@link SymbolAxis}).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGridBandAlternatePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setGridBandAlternatePaint#1079",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setGridBandAlternatePaint(java.awt.Paint)",
    "snippet": "public void setGridBandAlternatePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.gridBandAlternatePaint\u003dpaint;\n}",
    "begin_line": 1079,
    "end_line": 1084,
    "comment": "/** \n * Sets the grid band alternate paint (used for a  {@link SymbolAxis}).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGridBandAlternatePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getName#1091",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getName()",
    "snippet": "public String getName(){\n  return this.name;\n}",
    "begin_line": 1091,
    "end_line": 1093,
    "comment": "/** \n * Returns the name of this theme.\n * @return The name of this theme.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.getDrawingSupplier#1100",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.getDrawingSupplier()",
    "snippet": "public DrawingSupplier getDrawingSupplier(){\n  DrawingSupplier result\u003dnull;\n  if (this.drawingSupplier instanceof PublicCloneable) {\n    PublicCloneable pc\u003d(PublicCloneable)this.drawingSupplier;\n    try {\n      result\u003d(DrawingSupplier)pc.clone();\n    }\n catch (    CloneNotSupportedException e) {\n      e.printStackTrace();\n    }\n  }\n  return result;\n}",
    "begin_line": 1100,
    "end_line": 1112,
    "comment": "/** \n * Returns a clone of the drawing supplier for this theme.\n * @return A clone of the drawing supplier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.setDrawingSupplier#1121",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)",
    "snippet": "public void setDrawingSupplier(DrawingSupplier supplier){\n  if (supplier \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027supplier\u0027 argument.\");\n  }\n  this.drawingSupplier\u003dsupplier;\n}",
    "begin_line": 1121,
    "end_line": 1126,
    "comment": "/** \n * Sets the drawing supplier for this theme.\n * @param supplier  the supplier (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDrawingSupplier()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.apply#1133",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.apply(org.jfree.chart.JFreeChart)",
    "snippet": "public void apply(JFreeChart chart){\n  if (chart \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027chart\u0027 argument.\");\n  }\n  TextTitle title\u003dchart.getTitle();\n  if (title !\u003d null) {\n    title.setFont(this.extraLargeFont);\n    title.setPaint(this.titlePaint);\n  }\n  int subtitleCount\u003dchart.getSubtitleCount();\n  for (int i\u003d0; i \u003c subtitleCount; i++) {\n    applyToTitle(chart.getSubtitle(i));\n  }\n  chart.setBackgroundPaint(this.chartBackgroundPaint);\n  Plot plot\u003dchart.getPlot();\n  if (plot !\u003d null) {\n    applyToPlot(plot);\n  }\n}",
    "begin_line": 1133,
    "end_line": 1155,
    "comment": "/** \n * Applies this theme to the supplied chart.\n * @param chart  the chart (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToTitle#1162",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToTitle(org.jfree.chart.title.Title)",
    "snippet": "protected void applyToTitle(Title title){\n  if (title instanceof TextTitle) {\n    TextTitle tt\u003d(TextTitle)title;\n    tt.setFont(this.largeFont);\n    tt.setPaint(this.subtitlePaint);\n  }\n else   if (title instanceof LegendTitle) {\n    LegendTitle lt\u003d(LegendTitle)title;\n    if (lt.getBackgroundPaint() !\u003d null) {\n      lt.setBackgroundPaint(this.legendBackgroundPaint);\n    }\n    lt.setItemFont(this.regularFont);\n    lt.setItemPaint(this.legendItemPaint);\n    if (lt.getWrapper() !\u003d null) {\n      applyToBlockContainer(lt.getWrapper());\n    }\n  }\n else   if (title instanceof PaintScaleLegend) {\n    PaintScaleLegend psl\u003d(PaintScaleLegend)title;\n    psl.setBackgroundPaint(this.legendBackgroundPaint);\n    ValueAxis axis\u003dpsl.getAxis();\n    if (axis !\u003d null) {\n      applyToValueAxis(axis);\n    }\n  }\n else   if (title instanceof CompositeTitle) {\n    CompositeTitle ct\u003d(CompositeTitle)title;\n    BlockContainer bc\u003dct.getContainer();\n    List blocks\u003dbc.getBlocks();\n    Iterator iterator\u003dblocks.iterator();\n    while (iterator.hasNext()) {\n      Block b\u003d(Block)iterator.next();\n      if (b instanceof Title) {\n        applyToTitle((Title)b);\n      }\n    }\n  }\n}",
    "begin_line": 1162,
    "end_line": 1199,
    "comment": "/** \n * Applies the attributes of this theme to the specified title.\n * @param title  the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToBlockContainer#1206",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToBlockContainer(org.jfree.chart.block.BlockContainer)",
    "snippet": "protected void applyToBlockContainer(BlockContainer bc){\n  Iterator iterator\u003dbc.getBlocks().iterator();\n  while (iterator.hasNext()) {\n    Block b\u003d(Block)iterator.next();\n    applyToBlock(b);\n  }\n}",
    "begin_line": 1206,
    "end_line": 1212,
    "comment": "/** \n * Applies the attributes of this theme to the specified container.\n * @param bc  a block container (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToBlock#1219",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToBlock(org.jfree.chart.block.Block)",
    "snippet": "protected void applyToBlock(Block b){\n  if (b instanceof Title) {\n    applyToTitle((Title)b);\n  }\n else   if (b instanceof LabelBlock) {\n    LabelBlock lb\u003d(LabelBlock)b;\n    lb.setFont(this.regularFont);\n    lb.setPaint(this.legendItemPaint);\n  }\n}",
    "begin_line": 1219,
    "end_line": 1228,
    "comment": "/** \n * Applies the attributes of this theme to the specified block.\n * @param b  the block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToPlot#1235",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToPlot(org.jfree.chart.plot.Plot)",
    "snippet": "protected void applyToPlot(Plot plot){\n  if (plot \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027plot\u0027 argument.\");\n  }\n  if (plot.getDrawingSupplier() !\u003d null) {\n    plot.setDrawingSupplier(getDrawingSupplier());\n  }\n  if (plot.getBackgroundPaint() !\u003d null) {\n    plot.setBackgroundPaint(this.plotBackgroundPaint);\n  }\n  plot.setOutlinePaint(this.plotOutlinePaint);\n  if (plot instanceof PiePlot) {\n    applyToPiePlot((PiePlot)plot);\n  }\n else   if (plot instanceof MultiplePiePlot) {\n    applyToMultiplePiePlot((MultiplePiePlot)plot);\n  }\n else   if (plot instanceof CategoryPlot) {\n    applyToCategoryPlot((CategoryPlot)plot);\n  }\n else   if (plot instanceof XYPlot) {\n    applyToXYPlot((XYPlot)plot);\n  }\n else   if (plot instanceof FastScatterPlot) {\n    applyToFastScatterPlot((FastScatterPlot)plot);\n  }\n else   if (plot instanceof MeterPlot) {\n    applyToMeterPlot((MeterPlot)plot);\n  }\n else   if (plot instanceof ThermometerPlot) {\n    applyToThermometerPlot((ThermometerPlot)plot);\n  }\n else   if (plot instanceof SpiderWebPlot) {\n    applyToSpiderWebPlot((SpiderWebPlot)plot);\n  }\n else   if (plot instanceof PolarPlot) {\n    applyToPolarPlot((PolarPlot)plot);\n  }\n}",
    "begin_line": 1235,
    "end_line": 1278,
    "comment": "/** \n * Applies the attributes of this theme to a plot.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToPiePlot#1287",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToPiePlot(org.jfree.chart.plot.PiePlot)",
    "snippet": "protected void applyToPiePlot(PiePlot plot){\n  plot.setLabelLinkPaint(this.labelLinkPaint);\n  plot.setLabelLinkStyle(this.labelLinkStyle);\n  plot.setLabelFont(this.regularFont);\n  if (plot.getAutoPopulateSectionPaint()) {\n    plot.clearSectionPaints(false);\n  }\n  if (plot.getAutoPopulateSectionOutlinePaint()) {\n    plot.clearSectionOutlinePaints(false);\n  }\n  if (plot.getAutoPopulateSectionOutlineStroke()) {\n    plot.clearSectionOutlineStrokes(false);\n  }\n}",
    "begin_line": 1287,
    "end_line": 1303,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link PiePlot} instance.This method also clears any set values for the section paint, outline etc, so that the theme\u0027s  {@link DrawingSupplier} will be used.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToMultiplePiePlot#1310",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToMultiplePiePlot(org.jfree.chart.plot.MultiplePiePlot)",
    "snippet": "protected void applyToMultiplePiePlot(MultiplePiePlot plot){\n  apply(plot.getPieChart());\n}",
    "begin_line": 1310,
    "end_line": 1312,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link MultiplePiePlot}.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToCategoryPlot#1319",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToCategoryPlot(org.jfree.chart.plot.CategoryPlot)",
    "snippet": "protected void applyToCategoryPlot(CategoryPlot plot){\n  plot.setAxisOffset(this.axisOffset);\n  plot.setDomainGridlinePaint(this.domainGridlinePaint);\n  plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n  plot.setRangeZeroBaselinePaint(this.baselinePaint);\n  int domainAxisCount\u003dplot.getDomainAxisCount();\n  for (int i\u003d0; i \u003c domainAxisCount; i++) {\n    CategoryAxis axis\u003dplot.getDomainAxis(i);\n    if (axis !\u003d null) {\n      applyToCategoryAxis(axis);\n    }\n  }\n  int rangeAxisCount\u003dplot.getRangeAxisCount();\n  for (int i\u003d0; i \u003c rangeAxisCount; i++) {\n    ValueAxis axis\u003d(ValueAxis)plot.getRangeAxis(i);\n    if (axis !\u003d null) {\n      applyToValueAxis(axis);\n    }\n  }\n  int rendererCount\u003dplot.getRendererCount();\n  for (int i\u003d0; i \u003c rendererCount; i++) {\n    CategoryItemRenderer r\u003dplot.getRenderer(i);\n    if (r !\u003d null) {\n      applyToCategoryItemRenderer(r);\n    }\n  }\n  if (plot instanceof CombinedDomainCategoryPlot) {\n    CombinedDomainCategoryPlot cp\u003d(CombinedDomainCategoryPlot)plot;\n    Iterator iterator\u003dcp.getSubplots().iterator();\n    while (iterator.hasNext()) {\n      CategoryPlot subplot\u003d(CategoryPlot)iterator.next();\n      if (subplot !\u003d null) {\n        applyToPlot(subplot);\n      }\n    }\n  }\n  if (plot instanceof CombinedRangeCategoryPlot) {\n    CombinedRangeCategoryPlot cp\u003d(CombinedRangeCategoryPlot)plot;\n    Iterator iterator\u003dcp.getSubplots().iterator();\n    while (iterator.hasNext()) {\n      CategoryPlot subplot\u003d(CategoryPlot)iterator.next();\n      if (subplot !\u003d null) {\n        applyToPlot(subplot);\n      }\n    }\n  }\n}",
    "begin_line": 1319,
    "end_line": 1372,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link CategoryPlot}.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToXYPlot#1379",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToXYPlot(org.jfree.chart.plot.XYPlot)",
    "snippet": "protected void applyToXYPlot(XYPlot plot){\n  plot.setAxisOffset(this.axisOffset);\n  plot.setDomainZeroBaselinePaint(this.baselinePaint);\n  plot.setRangeZeroBaselinePaint(this.baselinePaint);\n  plot.setDomainGridlinePaint(this.domainGridlinePaint);\n  plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n  plot.setDomainCrosshairPaint(this.crosshairPaint);\n  plot.setRangeCrosshairPaint(this.crosshairPaint);\n  int domainAxisCount\u003dplot.getDomainAxisCount();\n  for (int i\u003d0; i \u003c domainAxisCount; i++) {\n    ValueAxis axis\u003dplot.getDomainAxis(i);\n    if (axis !\u003d null) {\n      applyToValueAxis(axis);\n    }\n  }\n  int rangeAxisCount\u003dplot.getRangeAxisCount();\n  for (int i\u003d0; i \u003c rangeAxisCount; i++) {\n    ValueAxis axis\u003d(ValueAxis)plot.getRangeAxis(i);\n    if (axis !\u003d null) {\n      applyToValueAxis(axis);\n    }\n  }\n  int rendererCount\u003dplot.getRendererCount();\n  for (int i\u003d0; i \u003c rendererCount; i++) {\n    XYItemRenderer r\u003dplot.getRenderer(i);\n    if (r !\u003d null) {\n      applyToXYItemRenderer(r);\n    }\n  }\n  Iterator iter\u003dplot.getAnnotations().iterator();\n  while (iter.hasNext()) {\n    XYAnnotation a\u003d(XYAnnotation)iter.next();\n    applyToXYAnnotation(a);\n  }\n  if (plot instanceof CombinedDomainXYPlot) {\n    CombinedDomainXYPlot cp\u003d(CombinedDomainXYPlot)plot;\n    Iterator iterator\u003dcp.getSubplots().iterator();\n    while (iterator.hasNext()) {\n      XYPlot subplot\u003d(XYPlot)iterator.next();\n      if (subplot !\u003d null) {\n        applyToPlot(subplot);\n      }\n    }\n  }\n  if (plot instanceof CombinedRangeXYPlot) {\n    CombinedRangeXYPlot cp\u003d(CombinedRangeXYPlot)plot;\n    Iterator iterator\u003dcp.getSubplots().iterator();\n    while (iterator.hasNext()) {\n      XYPlot subplot\u003d(XYPlot)iterator.next();\n      if (subplot !\u003d null) {\n        applyToPlot(subplot);\n      }\n    }\n  }\n}",
    "begin_line": 1379,
    "end_line": 1441,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link XYPlot}.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToFastScatterPlot#1447",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToFastScatterPlot(org.jfree.chart.plot.FastScatterPlot)",
    "snippet": "protected void applyToFastScatterPlot(FastScatterPlot plot){\n  plot.setDomainGridlinePaint(this.domainGridlinePaint);\n  plot.setRangeGridlinePaint(this.rangeGridlinePaint);\n  ValueAxis xAxis\u003dplot.getDomainAxis();\n  if (xAxis !\u003d null) {\n    applyToValueAxis(xAxis);\n  }\n  ValueAxis yAxis\u003dplot.getRangeAxis();\n  if (yAxis !\u003d null) {\n    applyToValueAxis(yAxis);\n  }\n}",
    "begin_line": 1447,
    "end_line": 1459,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link FastScatterPlot}.\n * @param plot\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToPolarPlot#1467",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToPolarPlot(org.jfree.chart.plot.PolarPlot)",
    "snippet": "protected void applyToPolarPlot(PolarPlot plot){\n  plot.setAngleLabelFont(this.regularFont);\n  plot.setAngleLabelPaint(this.tickLabelPaint);\n  plot.setAngleGridlinePaint(this.domainGridlinePaint);\n  plot.setRadiusGridlinePaint(this.rangeGridlinePaint);\n  ValueAxis axis\u003dplot.getAxis();\n  if (axis !\u003d null) {\n    applyToValueAxis(axis);\n  }\n}",
    "begin_line": 1467,
    "end_line": 1476,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link PolarPlot}.  This method is called from the  {@link #applyToPlot(Plot)} method.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToSpiderWebPlot#1483",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToSpiderWebPlot(org.jfree.chart.plot.SpiderWebPlot)",
    "snippet": "protected void applyToSpiderWebPlot(SpiderWebPlot plot){\n  plot.setLabelFont(this.regularFont);\n  plot.setLabelPaint(this.axisLabelPaint);\n  plot.setAxisLinePaint(this.axisLabelPaint);\n}",
    "begin_line": 1483,
    "end_line": 1487,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link SpiderWebPlot}.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToMeterPlot#1494",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToMeterPlot(org.jfree.chart.plot.MeterPlot)",
    "snippet": "protected void applyToMeterPlot(MeterPlot plot){\n  plot.setDialBackgroundPaint(this.plotBackgroundPaint);\n  plot.setValueFont(this.largeFont);\n  plot.setValuePaint(this.axisLabelPaint);\n  plot.setDialOutlinePaint(this.plotOutlinePaint);\n  plot.setNeedlePaint(this.thermometerPaint);\n  plot.setTickLabelFont(this.regularFont);\n  plot.setTickLabelPaint(this.tickLabelPaint);\n}",
    "begin_line": 1494,
    "end_line": 1502,
    "comment": "/** \n * Applies the attributes of this theme to a  {@link MeterPlot}.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToThermometerPlot#1510",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToThermometerPlot(org.jfree.chart.plot.ThermometerPlot)",
    "snippet": "protected void applyToThermometerPlot(ThermometerPlot plot){\n  plot.setValueFont(this.largeFont);\n  plot.setThermometerPaint(this.thermometerPaint);\n  ValueAxis axis\u003dplot.getRangeAxis();\n  if (axis !\u003d null) {\n    applyToValueAxis(axis);\n  }\n}",
    "begin_line": 1510,
    "end_line": 1517,
    "comment": "/** \n * Applies the attributes for this theme to a  {@link ThermometerPlot}. This method is called from the  {@link #applyToPlot(Plot)} method.\n * @param plot  the plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToCategoryAxis#1524",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToCategoryAxis(org.jfree.chart.axis.CategoryAxis)",
    "snippet": "protected void applyToCategoryAxis(CategoryAxis axis){\n  axis.setLabelFont(this.largeFont);\n  axis.setLabelPaint(this.axisLabelPaint);\n  axis.setTickLabelFont(this.regularFont);\n  axis.setTickLabelPaint(this.tickLabelPaint);\n  if (axis instanceof SubCategoryAxis) {\n    SubCategoryAxis sca\u003d(SubCategoryAxis)axis;\n    sca.setSubLabelFont(this.regularFont);\n    sca.setSubLabelPaint(this.tickLabelPaint);\n  }\n}",
    "begin_line": 1524,
    "end_line": 1534,
    "comment": "/** \n * Applies the attributes for this theme to a  {@link CategoryAxis}.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToValueAxis#1541",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToValueAxis(org.jfree.chart.axis.ValueAxis)",
    "snippet": "protected void applyToValueAxis(ValueAxis axis){\n  axis.setLabelFont(this.largeFont);\n  axis.setLabelPaint(this.axisLabelPaint);\n  axis.setTickLabelFont(this.regularFont);\n  axis.setTickLabelPaint(this.tickLabelPaint);\n  if (axis instanceof SymbolAxis) {\n    applyToSymbolAxis((SymbolAxis)axis);\n  }\n  if (axis instanceof PeriodAxis) {\n    applyToPeriodAxis((PeriodAxis)axis);\n  }\n}",
    "begin_line": 1541,
    "end_line": 1552,
    "comment": "/** \n * Applies the attributes for this theme to a  {@link ValueAxis}.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToSymbolAxis#1559",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToSymbolAxis(org.jfree.chart.axis.SymbolAxis)",
    "snippet": "protected void applyToSymbolAxis(SymbolAxis axis){\n  axis.setGridBandPaint(this.gridBandPaint);\n  axis.setGridBandAlternatePaint(this.gridBandAlternatePaint);\n}",
    "begin_line": 1559,
    "end_line": 1562,
    "comment": "/** \n * Applies the attributes for this theme to a  {@link SymbolAxis}.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToPeriodAxis#1569",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToPeriodAxis(org.jfree.chart.axis.PeriodAxis)",
    "snippet": "protected void applyToPeriodAxis(PeriodAxis axis){\n  PeriodAxisLabelInfo[] info\u003daxis.getLabelInfo();\n  for (int i\u003d0; i \u003c info.length; i++) {\n    PeriodAxisLabelInfo e\u003dinfo[i];\n    PeriodAxisLabelInfo n\u003dnew PeriodAxisLabelInfo(e.getPeriodClass(),e.getDateFormat(),e.getPadding(),this.regularFont,this.tickLabelPaint,e.getDrawDividers(),e.getDividerStroke(),e.getDividerPaint());\n    info[i]\u003dn;\n  }\n  axis.setLabelInfo(info);\n}",
    "begin_line": 1569,
    "end_line": 1580,
    "comment": "/** \n * Applies the attributes for this theme to a  {@link PeriodAxis}.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToAbstractRenderer#1587",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToAbstractRenderer(org.jfree.chart.renderer.AbstractRenderer)",
    "snippet": "protected void applyToAbstractRenderer(AbstractRenderer renderer){\n  if (renderer.getAutoPopulateSeriesPaint()) {\n    renderer.clearSeriesPaints(false);\n  }\n  if (renderer.getAutoPopulateSeriesStroke()) {\n    renderer.clearSeriesStrokes(false);\n  }\n}",
    "begin_line": 1587,
    "end_line": 1594,
    "comment": "/** \n * Applies the attributes for this theme to an  {@link AbstractRenderer}.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToCategoryItemRenderer#1601",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToCategoryItemRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)",
    "snippet": "protected void applyToCategoryItemRenderer(CategoryItemRenderer renderer){\n  if (renderer \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027renderer\u0027 argument.\");\n  }\n  if (renderer instanceof AbstractRenderer) {\n    applyToAbstractRenderer((AbstractRenderer)renderer);\n  }\n  renderer.setBaseItemLabelFont(this.regularFont);\n  renderer.setBaseItemLabelPaint(this.itemLabelPaint);\n  if (renderer instanceof BarRenderer) {\n    BarRenderer br\u003d(BarRenderer)renderer;\n    br.setBarPainter(this.barPainter);\n    br.setShadowVisible(this.shadowVisible);\n    br.setShadowPaint(this.shadowPaint);\n  }\n  if (renderer instanceof BarRenderer3D) {\n    BarRenderer3D br3d\u003d(BarRenderer3D)renderer;\n    br3d.setWallPaint(this.wallPaint);\n  }\n  if (renderer instanceof LineRenderer3D) {\n    LineRenderer3D lr3d\u003d(LineRenderer3D)renderer;\n    lr3d.setWallPaint(this.wallPaint);\n  }\n  if (renderer instanceof StatisticalBarRenderer) {\n    StatisticalBarRenderer sbr\u003d(StatisticalBarRenderer)renderer;\n    sbr.setErrorIndicatorPaint(this.errorIndicatorPaint);\n  }\n  if (renderer instanceof MinMaxCategoryRenderer) {\n    MinMaxCategoryRenderer mmcr\u003d(MinMaxCategoryRenderer)renderer;\n    mmcr.setGroupPaint(this.errorIndicatorPaint);\n  }\n}",
    "begin_line": 1601,
    "end_line": 1646,
    "comment": "/** \n * Applies the settings of this theme to the specified renderer.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToXYItemRenderer#1653",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToXYItemRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)",
    "snippet": "protected void applyToXYItemRenderer(XYItemRenderer renderer){\n  if (renderer \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027renderer\u0027 argument.\");\n  }\n  if (renderer instanceof AbstractRenderer) {\n    applyToAbstractRenderer((AbstractRenderer)renderer);\n  }\n  renderer.setBaseItemLabelFont(this.regularFont);\n  renderer.setBaseItemLabelPaint(this.itemLabelPaint);\n  if (renderer instanceof XYBarRenderer) {\n    XYBarRenderer br\u003d(XYBarRenderer)renderer;\n    br.setBarPainter(this.xyBarPainter);\n    br.setShadowVisible(this.shadowVisible);\n  }\n}",
    "begin_line": 1653,
    "end_line": 1667,
    "comment": "/** \n * Applies the settings of this theme to the specified renderer.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.applyToXYAnnotation#1674",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.applyToXYAnnotation(org.jfree.chart.annotations.XYAnnotation)",
    "snippet": "protected void applyToXYAnnotation(XYAnnotation annotation){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  if (annotation instanceof XYTextAnnotation) {\n    XYTextAnnotation xyta\u003d(XYTextAnnotation)annotation;\n    xyta.setFont(this.smallFont);\n    xyta.setPaint(this.itemLabelPaint);\n  }\n}",
    "begin_line": 1674,
    "end_line": 1683,
    "comment": "/** \n * Applies the settings of this theme to the specified annotation.\n * @param annotation  the annotation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.equals#1692",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StandardChartTheme)) {\n    return false;\n  }\n  StandardChartTheme that\u003d(StandardChartTheme)obj;\n  if (!this.name.equals(that.name)) {\n    return false;\n  }\n  if (!this.extraLargeFont.equals(that.extraLargeFont)) {\n    return false;\n  }\n  if (!this.largeFont.equals(that.largeFont)) {\n    return false;\n  }\n  if (!this.regularFont.equals(that.regularFont)) {\n    return false;\n  }\n  if (!this.smallFont.equals(that.smallFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.titlePaint,that.titlePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.subtitlePaint,that.subtitlePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.chartBackgroundPaint,that.chartBackgroundPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.legendBackgroundPaint,that.legendBackgroundPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.legendItemPaint,that.legendItemPaint)) {\n    return false;\n  }\n  if (!this.drawingSupplier.equals(that.drawingSupplier)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.plotBackgroundPaint,that.plotBackgroundPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.plotOutlinePaint,that.plotOutlinePaint)) {\n    return false;\n  }\n  if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelLinkPaint,that.labelLinkPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.crosshairPaint,that.crosshairPaint)) {\n    return false;\n  }\n  if (!this.axisOffset.equals(that.axisOffset)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.axisLabelPaint,that.axisLabelPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.tickLabelPaint,that.tickLabelPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.itemLabelPaint,that.itemLabelPaint)) {\n    return false;\n  }\n  if (this.shadowVisible !\u003d that.shadowVisible) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {\n    return false;\n  }\n  if (!this.barPainter.equals(that.barPainter)) {\n    return false;\n  }\n  if (!this.xyBarPainter.equals(that.xyBarPainter)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.thermometerPaint,that.thermometerPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.errorIndicatorPaint,that.errorIndicatorPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.gridBandPaint,that.gridBandPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.gridBandAlternatePaint,that.gridBandAlternatePaint)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1692,
    "end_line": 1803,
    "comment": "/** \n * Tests this theme for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.clone#1812",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 1812,
    "end_line": 1814,
    "comment": "/** \n * Returns a clone of this theme.\n * @return A clone.\n * @throws CloneNotSupportedException if the theme cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.writeObject#1823",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.titlePaint,stream);\n  SerialUtilities.writePaint(this.subtitlePaint,stream);\n  SerialUtilities.writePaint(this.chartBackgroundPaint,stream);\n  SerialUtilities.writePaint(this.legendBackgroundPaint,stream);\n  SerialUtilities.writePaint(this.legendItemPaint,stream);\n  SerialUtilities.writePaint(this.plotBackgroundPaint,stream);\n  SerialUtilities.writePaint(this.plotOutlinePaint,stream);\n  SerialUtilities.writePaint(this.labelLinkPaint,stream);\n  SerialUtilities.writePaint(this.baselinePaint,stream);\n  SerialUtilities.writePaint(this.domainGridlinePaint,stream);\n  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);\n  SerialUtilities.writePaint(this.crosshairPaint,stream);\n  SerialUtilities.writePaint(this.axisLabelPaint,stream);\n  SerialUtilities.writePaint(this.tickLabelPaint,stream);\n  SerialUtilities.writePaint(this.itemLabelPaint,stream);\n  SerialUtilities.writePaint(this.shadowPaint,stream);\n  SerialUtilities.writePaint(this.thermometerPaint,stream);\n  SerialUtilities.writePaint(this.wallPaint,stream);\n  SerialUtilities.writePaint(this.errorIndicatorPaint,stream);\n  SerialUtilities.writePaint(this.gridBandPaint,stream);\n  SerialUtilities.writePaint(this.gridBandAlternatePaint,stream);\n}",
    "begin_line": 1823,
    "end_line": 1846,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardChartTheme.readObject#1856",
    "is_bug": true,
    "src_path": "org/jfree/chart/StandardChartTheme.java",
    "class_name": "org.jfree.chart.StandardChartTheme",
    "signature": "org.jfree.chart.StandardChartTheme.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.titlePaint\u003dSerialUtilities.readPaint(stream);\n  this.subtitlePaint\u003dSerialUtilities.readPaint(stream);\n  this.chartBackgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.legendBackgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.legendItemPaint\u003dSerialUtilities.readPaint(stream);\n  this.plotBackgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.plotOutlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.labelLinkPaint\u003dSerialUtilities.readPaint(stream);\n  this.baselinePaint\u003dSerialUtilities.readPaint(stream);\n  this.domainGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.crosshairPaint\u003dSerialUtilities.readPaint(stream);\n  this.axisLabelPaint\u003dSerialUtilities.readPaint(stream);\n  this.tickLabelPaint\u003dSerialUtilities.readPaint(stream);\n  this.itemLabelPaint\u003dSerialUtilities.readPaint(stream);\n  this.shadowPaint\u003dSerialUtilities.readPaint(stream);\n  this.thermometerPaint\u003dSerialUtilities.readPaint(stream);\n  this.wallPaint\u003dSerialUtilities.readPaint(stream);\n  this.errorIndicatorPaint\u003dSerialUtilities.readPaint(stream);\n  this.gridBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.gridBandAlternatePaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 1856,
    "end_line": 1880,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.Axis#307",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.Axis(java.lang.String)",
    "snippet": "protected Axis(String label){\n  this.label\u003dlabel;\n  this.visible\u003dDEFAULT_AXIS_VISIBLE;\n  this.labelFont\u003dDEFAULT_AXIS_LABEL_FONT;\n  this.labelPaint\u003dDEFAULT_AXIS_LABEL_PAINT;\n  this.labelInsets\u003dDEFAULT_AXIS_LABEL_INSETS;\n  this.labelAngle\u003d0.0;\n  this.labelToolTip\u003dnull;\n  this.labelURL\u003dnull;\n  this.axisLineVisible\u003dtrue;\n  this.axisLinePaint\u003dDEFAULT_AXIS_LINE_PAINT;\n  this.axisLineStroke\u003dDEFAULT_AXIS_LINE_STROKE;\n  this.tickLabelsVisible\u003dDEFAULT_TICK_LABELS_VISIBLE;\n  this.tickLabelFont\u003dDEFAULT_TICK_LABEL_FONT;\n  this.tickLabelPaint\u003dDEFAULT_TICK_LABEL_PAINT;\n  this.tickLabelInsets\u003dDEFAULT_TICK_LABEL_INSETS;\n  this.tickMarksVisible\u003dDEFAULT_TICK_MARKS_VISIBLE;\n  this.tickMarkStroke\u003dDEFAULT_TICK_MARK_STROKE;\n  this.tickMarkPaint\u003dDEFAULT_TICK_MARK_PAINT;\n  this.tickMarkInsideLength\u003dDEFAULT_TICK_MARK_INSIDE_LENGTH;\n  this.tickMarkOutsideLength\u003dDEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n  this.minorTickMarksVisible\u003dfalse;\n  this.minorTickMarkInsideLength\u003d0.0f;\n  this.minorTickMarkOutsideLength\u003d2.0f;\n  this.plot\u003dnull;\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 307,
    "end_line": 341,
    "comment": "/** \n * Constructs an axis, using default values where necessary.\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.isVisible#351",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.isVisible()",
    "snippet": "public boolean isVisible(){\n  return this.visible;\n}",
    "begin_line": 351,
    "end_line": 353,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the axis is visible, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @see #setVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setVisible#363",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setVisible(boolean)",
    "snippet": "public void setVisible(boolean flag){\n  if (flag !\u003d this.visible) {\n    this.visible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 363,
    "end_line": 368,
    "comment": "/** \n * Sets a flag that controls whether or not the axis is visible and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabel#379",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabel()",
    "snippet": "public String getLabel(){\n  return this.label;\n}",
    "begin_line": 379,
    "end_line": 381,
    "comment": "/** \n * Returns the label for the axis.\n * @return The label for the axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #getLabelFont()\n * @see #getLabelPaint()\n * @see #setLabel(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabel#393",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabel(java.lang.String)",
    "snippet": "public void setLabel(String label){\n  String existing\u003dthis.label;\n  if (existing !\u003d null) {\n    if (!existing.equals(label)) {\n      this.label\u003dlabel;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (label !\u003d null) {\n      this.label\u003dlabel;\n      fireChangeEvent();\n    }\n  }\n}",
    "begin_line": 393,
    "end_line": 409,
    "comment": "/** \n * Sets the label for the axis and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param label  the new label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabel()\n * @see #setLabelFont(Font)\n * @see #setLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelFont#418",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelFont()",
    "snippet": "public Font getLabelFont(){\n  return this.labelFont;\n}",
    "begin_line": 418,
    "end_line": 420,
    "comment": "/** \n * Returns the font for the axis label.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelFont#430",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelFont(java.awt.Font)",
    "snippet": "public void setLabelFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  if (!this.labelFont.equals(font)) {\n    this.labelFont\u003dfont;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 430,
    "end_line": 438,
    "comment": "/** \n * Sets the font for the axis label and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelPaint#447",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelPaint()",
    "snippet": "public Paint getLabelPaint(){\n  return this.labelPaint;\n}",
    "begin_line": 447,
    "end_line": 449,
    "comment": "/** \n * Returns the color/shade used to draw the axis label.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelPaint#459",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelPaint(java.awt.Paint)",
    "snippet": "public void setLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.labelPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 459,
    "end_line": 465,
    "comment": "/** \n * Sets the paint used to draw the axis label and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelInsets#475",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelInsets()",
    "snippet": "public RectangleInsets getLabelInsets(){\n  return this.labelInsets;\n}",
    "begin_line": 475,
    "end_line": 477,
    "comment": "/** \n * Returns the insets for the label (that is, the amount of blank space that should be left around the label).\n * @return The label insets (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelInsets#487",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelInsets(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setLabelInsets(RectangleInsets insets){\n  setLabelInsets(insets,true);\n}",
    "begin_line": 487,
    "end_line": 489,
    "comment": "/** \n * Sets the insets for the axis label, and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param insets  the insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelInsets()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelInsets#500",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelInsets(org.jfree.chart.util.RectangleInsets, boolean)",
    "snippet": "public void setLabelInsets(RectangleInsets insets,boolean notify){\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  if (!insets.equals(this.labelInsets)) {\n    this.labelInsets\u003dinsets;\n    if (notify) {\n      fireChangeEvent();\n    }\n  }\n}",
    "begin_line": 500,
    "end_line": 510,
    "comment": "/** \n * Sets the insets for the axis label, and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param insets  the insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelAngle#519",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelAngle()",
    "snippet": "public double getLabelAngle(){\n  return this.labelAngle;\n}",
    "begin_line": 519,
    "end_line": 521,
    "comment": "/** \n * Returns the angle of the axis label.\n * @return The angle (in radians).\n * @see #setLabelAngle(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelAngle#531",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelAngle(double)",
    "snippet": "public void setLabelAngle(double angle){\n  this.labelAngle\u003dangle;\n  fireChangeEvent();\n}",
    "begin_line": 531,
    "end_line": 534,
    "comment": "/** \n * Sets the angle for the label and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param angle  the angle (in radians).\n * @see #getLabelAngle()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelToolTip#545",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelToolTip()",
    "snippet": "public String getLabelToolTip(){\n  return this.labelToolTip;\n}",
    "begin_line": 545,
    "end_line": 547,
    "comment": "/** \n * Returns the tool tip text for the axis label.\n * @return The tool tip text (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelToolTip(String)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelToolTip#559",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelToolTip(java.lang.String)",
    "snippet": "public void setLabelToolTip(String text){\n  this.labelToolTip\u003dtext;\n  fireChangeEvent();\n}",
    "begin_line": 559,
    "end_line": 562,
    "comment": "/** \n * Sets the tool tip text for the axis label and sends a . {@link AxisChangeEvent} to all registered listeners.\n * @param text  the tool tip text (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelToolTip()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelURL#573",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelURL()",
    "snippet": "public String getLabelURL(){\n  return this.labelURL;\n}",
    "begin_line": 573,
    "end_line": 575,
    "comment": "/** \n * Returns the URL text for the axis label.\n * @return The URL (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelURL(String)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setLabelURL#587",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setLabelURL(java.lang.String)",
    "snippet": "public void setLabelURL(String url){\n  this.labelURL\u003durl;\n  fireChangeEvent();\n}",
    "begin_line": 587,
    "end_line": 590,
    "comment": "/** \n * Sets the URL for the axis label and sends an  {@link AxisChangeEvent} toall registered listeners.\n * @param url  the URL (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelURL()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.isAxisLineVisible#601",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.isAxisLineVisible()",
    "snippet": "public boolean isAxisLineVisible(){\n  return this.axisLineVisible;\n}",
    "begin_line": 601,
    "end_line": 603,
    "comment": "/** \n * A flag that controls whether or not the axis line is drawn.\n * @return A boolean.\n * @see #getAxisLinePaint()\n * @see #getAxisLineStroke()\n * @see #setAxisLineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setAxisLineVisible#615",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setAxisLineVisible(boolean)",
    "snippet": "public void setAxisLineVisible(boolean visible){\n  this.axisLineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 615,
    "end_line": 618,
    "comment": "/** \n * Sets a flag that controls whether or not the axis line is visible and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @see #isAxisLineVisible()\n * @see #setAxisLinePaint(Paint)\n * @see #setAxisLineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getAxisLinePaint#627",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getAxisLinePaint()",
    "snippet": "public Paint getAxisLinePaint(){\n  return this.axisLinePaint;\n}",
    "begin_line": 627,
    "end_line": 629,
    "comment": "/** \n * Returns the paint used to draw the axis line.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisLinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setAxisLinePaint#639",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setAxisLinePaint(java.awt.Paint)",
    "snippet": "public void setAxisLinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.axisLinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 639,
    "end_line": 645,
    "comment": "/** \n * Sets the paint used to draw the axis line and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisLinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getAxisLineStroke#654",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getAxisLineStroke()",
    "snippet": "public Stroke getAxisLineStroke(){\n  return this.axisLineStroke;\n}",
    "begin_line": 654,
    "end_line": 656,
    "comment": "/** \n * Returns the stroke used to draw the axis line.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisLineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setAxisLineStroke#666",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setAxisLineStroke(java.awt.Stroke)",
    "snippet": "public void setAxisLineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.axisLineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 666,
    "end_line": 672,
    "comment": "/** \n * Sets the stroke used to draw the axis line and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisLineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.isTickLabelsVisible#683",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.isTickLabelsVisible()",
    "snippet": "public boolean isTickLabelsVisible(){\n  return this.tickLabelsVisible;\n}",
    "begin_line": 683,
    "end_line": 685,
    "comment": "/** \n * Returns a flag indicating whether or not the tick labels are visible.\n * @return The flag.\n * @see #getTickLabelFont()\n * @see #getTickLabelPaint()\n * @see #setTickLabelsVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickLabelsVisible#698",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickLabelsVisible(boolean)",
    "snippet": "public void setTickLabelsVisible(boolean flag){\n  if (flag !\u003d this.tickLabelsVisible) {\n    this.tickLabelsVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 698,
    "end_line": 705,
    "comment": "/** \n * Sets the flag that determines whether or not the tick labels are visible and sends an  {@link AxisChangeEvent} to all registeredlisteners.\n * @param flag  the flag.\n * @see #isTickLabelsVisible()\n * @see #setTickLabelFont(Font)\n * @see #setTickLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.isMinorTickMarksVisible#718",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.isMinorTickMarksVisible()",
    "snippet": "public boolean isMinorTickMarksVisible(){\n  return this.minorTickMarksVisible;\n}",
    "begin_line": 718,
    "end_line": 720,
    "comment": "/** \n * Returns the flag that indicates whether or not the minor tick marks are showing.\n * @return The flag that indicates whether or not the minor tick marks areshowing.\n * @see #setMinorTickMarksVisible(boolean)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setMinorTickMarksVisible#733",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setMinorTickMarksVisible(boolean)",
    "snippet": "public void setMinorTickMarksVisible(boolean flag){\n  if (flag !\u003d this.minorTickMarksVisible) {\n    this.minorTickMarksVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 733,
    "end_line": 738,
    "comment": "/** \n * Sets the flag that indicates whether or not the minor tick marks are showing and sends an  {@link AxisChangeEvent} to all registeredlisteners.\n * @param flag  the flag.\n * @see #isMinorTickMarksVisible()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickLabelFont#747",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickLabelFont()",
    "snippet": "public Font getTickLabelFont(){\n  return this.tickLabelFont;\n}",
    "begin_line": 747,
    "end_line": 749,
    "comment": "/** \n * Returns the font used for the tick labels (if showing).\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickLabelFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickLabelFont#759",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickLabelFont(java.awt.Font)",
    "snippet": "public void setTickLabelFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  if (!this.tickLabelFont.equals(font)) {\n    this.tickLabelFont\u003dfont;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 759,
    "end_line": 770,
    "comment": "/** \n * Sets the font for the tick labels and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not allowed).\n * @see #getTickLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickLabelPaint#779",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickLabelPaint()",
    "snippet": "public Paint getTickLabelPaint(){\n  return this.tickLabelPaint;\n}",
    "begin_line": 779,
    "end_line": 781,
    "comment": "/** \n * Returns the color/shade used for the tick labels.\n * @return The paint used for the tick labels.\n * @see #setTickLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickLabelPaint#791",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickLabelPaint(java.awt.Paint)",
    "snippet": "public void setTickLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.tickLabelPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 791,
    "end_line": 797,
    "comment": "/** \n * Sets the paint used to draw tick labels (if they are showing) and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickLabelInsets#806",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickLabelInsets()",
    "snippet": "public RectangleInsets getTickLabelInsets(){\n  return this.tickLabelInsets;\n}",
    "begin_line": 806,
    "end_line": 808,
    "comment": "/** \n * Returns the insets for the tick labels.\n * @return The insets (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickLabelInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickLabelInsets#818",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickLabelInsets(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setTickLabelInsets(RectangleInsets insets){\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  if (!this.tickLabelInsets.equals(insets)) {\n    this.tickLabelInsets\u003dinsets;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 818,
    "end_line": 826,
    "comment": "/** \n * Sets the insets for the tick labels and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param insets  the insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickLabelInsets()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.isTickMarksVisible#837",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.isTickMarksVisible()",
    "snippet": "public boolean isTickMarksVisible(){\n  return this.tickMarksVisible;\n}",
    "begin_line": 837,
    "end_line": 839,
    "comment": "/** \n * Returns the flag that indicates whether or not the tick marks are showing.\n * @return The flag that indicates whether or not the tick marks areshowing.\n * @see #setTickMarksVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickMarksVisible#849",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickMarksVisible(boolean)",
    "snippet": "public void setTickMarksVisible(boolean flag){\n  if (flag !\u003d this.tickMarksVisible) {\n    this.tickMarksVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 849,
    "end_line": 854,
    "comment": "/** \n * Sets the flag that indicates whether or not the tick marks are showing and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isTickMarksVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickMarkInsideLength#864",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickMarkInsideLength()",
    "snippet": "public float getTickMarkInsideLength(){\n  return this.tickMarkInsideLength;\n}",
    "begin_line": 864,
    "end_line": 866,
    "comment": "/** \n * Returns the inside length of the tick marks.\n * @return The length.\n * @see #getTickMarkOutsideLength()\n * @see #setTickMarkInsideLength(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickMarkInsideLength#876",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickMarkInsideLength(float)",
    "snippet": "public void setTickMarkInsideLength(float length){\n  this.tickMarkInsideLength\u003dlength;\n  fireChangeEvent();\n}",
    "begin_line": 876,
    "end_line": 879,
    "comment": "/** \n * Sets the inside length of the tick marks and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param length  the new length.\n * @see #getTickMarkInsideLength()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickMarkOutsideLength#889",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickMarkOutsideLength()",
    "snippet": "public float getTickMarkOutsideLength(){\n  return this.tickMarkOutsideLength;\n}",
    "begin_line": 889,
    "end_line": 891,
    "comment": "/** \n * Returns the outside length of the tick marks.\n * @return The length.\n * @see #getTickMarkInsideLength()\n * @see #setTickMarkOutsideLength(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickMarkOutsideLength#901",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickMarkOutsideLength(float)",
    "snippet": "public void setTickMarkOutsideLength(float length){\n  this.tickMarkOutsideLength\u003dlength;\n  fireChangeEvent();\n}",
    "begin_line": 901,
    "end_line": 904,
    "comment": "/** \n * Sets the outside length of the tick marks and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param length  the new length.\n * @see #getTickMarkInsideLength()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickMarkStroke#913",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickMarkStroke()",
    "snippet": "public Stroke getTickMarkStroke(){\n  return this.tickMarkStroke;\n}",
    "begin_line": 913,
    "end_line": 915,
    "comment": "/** \n * Returns the stroke used to draw tick marks.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickMarkStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickMarkStroke#925",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickMarkStroke(java.awt.Stroke)",
    "snippet": "public void setTickMarkStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  if (!this.tickMarkStroke.equals(stroke)) {\n    this.tickMarkStroke\u003dstroke;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 925,
    "end_line": 933,
    "comment": "/** \n * Sets the stroke used to draw tick marks and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickMarkStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getTickMarkPaint#942",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getTickMarkPaint()",
    "snippet": "public Paint getTickMarkPaint(){\n  return this.tickMarkPaint;\n}",
    "begin_line": 942,
    "end_line": 944,
    "comment": "/** \n * Returns the paint used to draw tick marks (if they are showing).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickMarkPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setTickMarkPaint#954",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setTickMarkPaint(java.awt.Paint)",
    "snippet": "public void setTickMarkPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.tickMarkPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 954,
    "end_line": 960,
    "comment": "/** \n * Sets the paint used to draw tick marks and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickMarkPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getMinorTickMarkInsideLength#972",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getMinorTickMarkInsideLength()",
    "snippet": "public float getMinorTickMarkInsideLength(){\n  return this.minorTickMarkInsideLength;\n}",
    "begin_line": 972,
    "end_line": 974,
    "comment": "/** \n * Returns the inside length of the minor tick marks.\n * @return The length.\n * @see #getMinorTickMarkOutsideLength()\n * @see #setMinorTickMarkInsideLength(float)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setMinorTickMarkInsideLength#986",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setMinorTickMarkInsideLength(float)",
    "snippet": "public void setMinorTickMarkInsideLength(float length){\n  this.minorTickMarkInsideLength\u003dlength;\n  fireChangeEvent();\n}",
    "begin_line": 986,
    "end_line": 989,
    "comment": "/** \n * Sets the inside length of the minor tick marks and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param length  the new length.\n * @see #getMinorTickMarkInsideLength()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getMinorTickMarkOutsideLength#1001",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getMinorTickMarkOutsideLength()",
    "snippet": "public float getMinorTickMarkOutsideLength(){\n  return this.minorTickMarkOutsideLength;\n}",
    "begin_line": 1001,
    "end_line": 1003,
    "comment": "/** \n * Returns the outside length of the minor tick marks.\n * @return The length.\n * @see #getMinorTickMarkInsideLength()\n * @see #setMinorTickMarkOutsideLength(float)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setMinorTickMarkOutsideLength#1015",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setMinorTickMarkOutsideLength(float)",
    "snippet": "public void setMinorTickMarkOutsideLength(float length){\n  this.minorTickMarkOutsideLength\u003dlength;\n  fireChangeEvent();\n}",
    "begin_line": 1015,
    "end_line": 1018,
    "comment": "/** \n * Sets the outside length of the minor tick marks and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param length  the new length.\n * @see #getMinorTickMarkInsideLength()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getPlot#1029",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getPlot()",
    "snippet": "public Plot getPlot(){\n  return this.plot;\n}",
    "begin_line": 1029,
    "end_line": 1031,
    "comment": "/** \n * Returns the plot that the axis is assigned to.  This method will return \u003ccode\u003enull\u003c/code\u003e if the axis is not currently assigned to a plot.\n * @return The plot that the axis is assigned to (possibly\u003ccode\u003enull\u003c/code\u003e).\n * @see #setPlot(Plot)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setPlot#1042",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setPlot(org.jfree.chart.plot.Plot)",
    "snippet": "public void setPlot(Plot plot){\n  this.plot\u003dplot;\n  configure();\n}",
    "begin_line": 1042,
    "end_line": 1045,
    "comment": "/** \n * Sets a reference to the plot that the axis is assigned to. \u003cP\u003e This method is used internally, you shouldn\u0027t need to call it yourself.\n * @param plot  the plot.\n * @see #getPlot()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getFixedDimension#1054",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getFixedDimension()",
    "snippet": "public double getFixedDimension(){\n  return this.fixedDimension;\n}",
    "begin_line": 1054,
    "end_line": 1056,
    "comment": "/** \n * Returns the fixed dimension for the axis.\n * @return The fixed dimension.\n * @see #setFixedDimension(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.setFixedDimension#1071",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.setFixedDimension(double)",
    "snippet": "public void setFixedDimension(double dimension){\n  this.fixedDimension\u003ddimension;\n}",
    "begin_line": 1071,
    "end_line": 1073,
    "comment": "/** \n * Sets the fixed dimension for the axis. \u003cP\u003e This is used when combining more than one plot on a chart.  In this case, there may be several axes that need to have the same height or width so that they are aligned.  This method is used to fix a dimension for the axis (the context determines whether the dimension is horizontal or vertical).\n * @param dimension  the fixed dimension.\n * @see #getFixedDimension()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.configure#1079",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.configure()",
    "snippet": "public abstract void configure();",
    "begin_line": 1079,
    "end_line": 1079,
    "comment": "/** \n * Configures the axis to work with the current plot.  Override this method to perform any special processing (such as auto-rescaling).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.reserveSpace#1094",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
    "snippet": "public abstract AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space);",
    "begin_line": 1094,
    "end_line": 1097,
    "comment": "/** \n * Estimates the space (height or width) required to draw the axis.\n * @param g2  the graphics device.\n * @param plot  the plot that the axis belongs to.\n * @param plotArea  the area within which the plot (including axes) shouldbe drawn.\n * @param edge  the axis location.\n * @param space  space already reserved.\n * @return The space required to draw the axis (including pre-reservedspace).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.draw#1113",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public abstract AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState);",
    "begin_line": 1113,
    "end_line": 1118,
    "comment": "/** \n * Draws the axis on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param cursor  the cursor location (determines where to draw the axis).\n * @param plotArea  the area within which the axes and plot should be drawn.\n * @param dataArea  the area within which the data should be drawn.\n * @param edge  the axis location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The axis state (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.refreshTicks#1131",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public abstract List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge);",
    "begin_line": 1131,
    "end_line": 1132,
    "comment": "/** \n * Calculates the positions of the ticks for the axis, storing the results in the tick list (ready for drawing).\n * @param g2  the graphics device.\n * @param state  the axis state.\n * @param dataArea  the area inside the axes.\n * @param edge  the edge on which the axis is located.\n * @return The list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.createAndAddEntity#1147",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.createAndAddEntity(double, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "protected void createAndAddEntity(double cursor,AxisState state,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){\n  if (plotState \u003d\u003d null || plotState.getOwner() \u003d\u003d null) {\n    return;\n  }\n  Rectangle2D hotspot\u003dnull;\n  if (edge.equals(RectangleEdge.TOP)) {\n    hotspot\u003dnew Rectangle2D.Double(dataArea.getX(),state.getCursor(),dataArea.getWidth(),cursor - state.getCursor());\n  }\n else   if (edge.equals(RectangleEdge.BOTTOM)) {\n    hotspot\u003dnew Rectangle2D.Double(dataArea.getX(),cursor,dataArea.getWidth(),state.getCursor() - cursor);\n  }\n else   if (edge.equals(RectangleEdge.LEFT)) {\n    hotspot\u003dnew Rectangle2D.Double(state.getCursor(),dataArea.getY(),cursor - state.getCursor(),dataArea.getHeight());\n  }\n else   if (edge.equals(RectangleEdge.RIGHT)) {\n    hotspot\u003dnew Rectangle2D.Double(cursor,dataArea.getY(),state.getCursor() - cursor,dataArea.getHeight());\n  }\n  EntityCollection e\u003dplotState.getOwner().getEntityCollection();\n  if (e !\u003d null) {\n    e.add(new AxisEntity(hotspot,this));\n  }\n}",
    "begin_line": 1147,
    "end_line": 1177,
    "comment": "/** \n * Created an entity for the axis.\n * @param cursor  the initial cursor value.\n * @param state  the axis state after completion of the drawing with apossibly updated cursor position.\n * @param dataArea  the data area.\n * @param edge  the edge.\n * @param plotState  the PlotRenderingInfo from which a reference to theentity collection can be obtained.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.addChangeListener#1186",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.addChangeListener(org.jfree.chart.event.AxisChangeListener)",
    "snippet": "public void addChangeListener(AxisChangeListener listener){\n  this.listenerList.add(AxisChangeListener.class,listener);\n}",
    "begin_line": 1186,
    "end_line": 1188,
    "comment": "/** \n * Registers an object for notification of changes to the axis.\n * @param listener  the object that is being registered.\n * @see #removeChangeListener(AxisChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.removeChangeListener#1197",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.removeChangeListener(org.jfree.chart.event.AxisChangeListener)",
    "snippet": "public void removeChangeListener(AxisChangeListener listener){\n  this.listenerList.remove(AxisChangeListener.class,listener);\n}",
    "begin_line": 1197,
    "end_line": 1199,
    "comment": "/** \n * Deregisters an object for notification of changes to the axis.\n * @param listener  the object to deregister.\n * @see #addChangeListener(AxisChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.hasListener#1210",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.hasListener(java.util.EventListener)",
    "snippet": "public boolean hasListener(EventListener listener){\n  List list\u003dArrays.asList(this.listenerList.getListenerList());\n  return list.contains(listener);\n}",
    "begin_line": 1210,
    "end_line": 1213,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified object is registered with the dataset as a listener.  Most applications won\u0027t need to call this method, it exists mainly for use by unit testing code.\n * @param listener  the listener.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.notifyListeners#1221",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.notifyListeners(org.jfree.chart.event.AxisChangeEvent)",
    "snippet": "protected void notifyListeners(AxisChangeEvent event){\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d AxisChangeListener.class) {\n      ((AxisChangeListener)listeners[i + 1]).axisChanged(event);\n    }\n  }\n}",
    "begin_line": 1221,
    "end_line": 1228,
    "comment": "/** \n * Notifies all registered listeners that the axis has changed. The AxisChangeEvent provides information about the change.\n * @param event  information about the change to the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.fireChangeEvent#1235",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.fireChangeEvent()",
    "snippet": "protected void fireChangeEvent(){\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1235,
    "end_line": 1237,
    "comment": "/** \n * Sends an  {@link AxisChangeEvent} to all registered listeners.\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.getLabelEnclosure#1248",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.getLabelEnclosure(java.awt.Graphics2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected Rectangle2D getLabelEnclosure(Graphics2D g2,RectangleEdge edge){\n  Rectangle2D result\u003dnew Rectangle2D.Double();\n  String axisLabel\u003dgetLabel();\n  if (axisLabel !\u003d null \u0026\u0026 !axisLabel.equals(\"\")) {\n    FontMetrics fm\u003dg2.getFontMetrics(getLabelFont());\n    Rectangle2D bounds\u003dTextUtilities.getTextBounds(axisLabel,g2,fm);\n    RectangleInsets insets\u003dgetLabelInsets();\n    bounds\u003dinsets.createOutsetRectangle(bounds);\n    double angle\u003dgetLabelAngle();\n    if (edge \u003d\u003d RectangleEdge.LEFT || edge \u003d\u003d RectangleEdge.RIGHT) {\n      angle\u003dangle - Math.PI / 2.0;\n    }\n    double x\u003dbounds.getCenterX();\n    double y\u003dbounds.getCenterY();\n    AffineTransform transformer\u003dAffineTransform.getRotateInstance(angle,x,y);\n    Shape labelBounds\u003dtransformer.createTransformedShape(bounds);\n    result\u003dlabelBounds.getBounds2D();\n  }\n  return result;\n}",
    "begin_line": 1248,
    "end_line": 1271,
    "comment": "/** \n * Returns a rectangle that encloses the axis label.  This is typically used for layout purposes (it gives the maximum dimensions of the label).\n * @param g2  the graphics device.\n * @param edge  the edge of the plot area along which the axis is measuring.\n * @return The enclosing rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.drawLabel#1286",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.drawLabel(java.lang.String, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "protected AxisState drawLabel(String label,Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,AxisState state,PlotRenderingInfo plotState){\n  if (state \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027state\u0027 argument.\");\n  }\n  if ((label \u003d\u003d null) || (label.equals(\"\"))) {\n    return state;\n  }\n  Font font\u003dgetLabelFont();\n  RectangleInsets insets\u003dgetLabelInsets();\n  g2.setFont(font);\n  g2.setPaint(getLabelPaint());\n  FontMetrics fm\u003dg2.getFontMetrics();\n  Rectangle2D labelBounds\u003dTextUtilities.getTextBounds(label,g2,fm);\n  Shape hotspot\u003dnull;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    AffineTransform t\u003dAffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY());\n    Shape rotatedLabelBounds\u003dt.createTransformedShape(labelBounds);\n    labelBounds\u003drotatedLabelBounds.getBounds2D();\n    float w\u003d(float)labelBounds.getWidth();\n    float h\u003d(float)labelBounds.getHeight();\n    float labelx\u003d(float)dataArea.getCenterX();\n    float labely\u003d(float)(state.getCursor() - insets.getBottom() - h / 2.0);\n    TextUtilities.drawRotatedString(label,g2,labelx,labely,TextAnchor.CENTER,getLabelAngle(),TextAnchor.CENTER);\n    hotspot\u003dnew Rectangle2D.Float(labelx - w / 2.0f,labely - h / 2.0f,w,h);\n    state.cursorUp(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    AffineTransform t\u003dAffineTransform.getRotateInstance(getLabelAngle(),labelBounds.getCenterX(),labelBounds.getCenterY());\n    Shape rotatedLabelBounds\u003dt.createTransformedShape(labelBounds);\n    labelBounds\u003drotatedLabelBounds.getBounds2D();\n    float w\u003d(float)labelBounds.getWidth();\n    float h\u003d(float)labelBounds.getHeight();\n    float labelx\u003d(float)dataArea.getCenterX();\n    float labely\u003d(float)(state.getCursor() + insets.getTop() + h / 2.0);\n    TextUtilities.drawRotatedString(label,g2,labelx,labely,TextAnchor.CENTER,getLabelAngle(),TextAnchor.CENTER);\n    hotspot\u003dnew Rectangle2D.Float(labelx - w / 2.0f,labely - h / 2.0f,w,h);\n    state.cursorDown(insets.getTop() + labelBounds.getHeight() + insets.getBottom());\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    AffineTransform t\u003dAffineTransform.getRotateInstance(getLabelAngle() - Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY());\n    Shape rotatedLabelBounds\u003dt.createTransformedShape(labelBounds);\n    labelBounds\u003drotatedLabelBounds.getBounds2D();\n    float w\u003d(float)labelBounds.getWidth();\n    float h\u003d(float)labelBounds.getHeight();\n    float labelx\u003d(float)(state.getCursor() - insets.getRight() - w / 2.0);\n    float labely\u003d(float)dataArea.getCenterY();\n    TextUtilities.drawRotatedString(label,g2,labelx,labely,TextAnchor.CENTER,getLabelAngle() - Math.PI / 2.0,TextAnchor.CENTER);\n    hotspot\u003dnew Rectangle2D.Float(labelx - w / 2.0f,labely - h / 2.0f,w,h);\n    state.cursorLeft(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    AffineTransform t\u003dAffineTransform.getRotateInstance(getLabelAngle() + Math.PI / 2.0,labelBounds.getCenterX(),labelBounds.getCenterY());\n    Shape rotatedLabelBounds\u003dt.createTransformedShape(labelBounds);\n    labelBounds\u003drotatedLabelBounds.getBounds2D();\n    float w\u003d(float)labelBounds.getWidth();\n    float h\u003d(float)labelBounds.getHeight();\n    float labelx\u003d(float)(state.getCursor() + insets.getLeft() + w / 2.0);\n    float labely\u003d(float)(dataArea.getY() + dataArea.getHeight() / 2.0);\n    TextUtilities.drawRotatedString(label,g2,labelx,labely,TextAnchor.CENTER,getLabelAngle() + Math.PI / 2.0,TextAnchor.CENTER);\n    hotspot\u003dnew Rectangle2D.Float(labelx - w / 2.0f,labely - h / 2.0f,w,h);\n    state.cursorRight(insets.getLeft() + labelBounds.getWidth() + insets.getRight());\n  }\n  if (plotState !\u003d null \u0026\u0026 hotspot !\u003d null) {\n    ChartRenderingInfo owner\u003dplotState.getOwner();\n    if (owner !\u003d null) {\n      EntityCollection entities\u003downer.getEntityCollection();\n      if (entities !\u003d null) {\n        entities.add(new AxisLabelEntity(this,hotspot,this.labelToolTip,this.labelURL));\n      }\n    }\n  }\n  return state;\n}",
    "begin_line": 1286,
    "end_line": 1396,
    "comment": "/** \n * Draws the axis label.\n * @param label  the label text.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param dataArea  the area inside the axes.\n * @param edge  the location of the axis.\n * @param state  the axis state (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  the plot state (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return Information about the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.drawAxisLine#1406",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void drawAxisLine(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge){\n  Line2D axisLine\u003dnull;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    axisLine\u003dnew Line2D.Double(dataArea.getX(),cursor,dataArea.getMaxX(),cursor);\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    axisLine\u003dnew Line2D.Double(dataArea.getX(),cursor,dataArea.getMaxX(),cursor);\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    axisLine\u003dnew Line2D.Double(cursor,dataArea.getY(),cursor,dataArea.getMaxY());\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    axisLine\u003dnew Line2D.Double(cursor,dataArea.getY(),cursor,dataArea.getMaxY());\n  }\n  g2.setPaint(this.axisLinePaint);\n  g2.setStroke(this.axisLineStroke);\n  g2.draw(axisLine);\n}",
    "begin_line": 1406,
    "end_line": 1430,
    "comment": "/** \n * Draws an axis line at the current cursor position and edge.\n * @param g2  the graphics device.\n * @param cursor  the cursor position.\n * @param dataArea  the data area.\n * @param edge  the edge.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.clone#1440",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Axis clone\u003d(Axis)super.clone();\n  clone.plot\u003dnull;\n  clone.listenerList\u003dnew EventListenerList();\n  return clone;\n}",
    "begin_line": 1440,
    "end_line": 1446,
    "comment": "/** \n * Returns a clone of the axis.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the axis doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.equals#1455",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Axis)) {\n    return false;\n  }\n  Axis that\u003d(Axis)obj;\n  if (this.visible !\u003d that.visible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.label,that.label)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelInsets,that.labelInsets)) {\n    return false;\n  }\n  if (this.labelAngle !\u003d that.labelAngle) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelToolTip,that.labelToolTip)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelURL,that.labelURL)) {\n    return false;\n  }\n  if (this.axisLineVisible !\u003d that.axisLineVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.axisLineStroke,that.axisLineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.axisLinePaint,that.axisLinePaint)) {\n    return false;\n  }\n  if (this.tickLabelsVisible !\u003d that.tickLabelsVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.tickLabelFont,that.tickLabelFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.tickLabelPaint,that.tickLabelPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.tickLabelInsets,that.tickLabelInsets)) {\n    return false;\n  }\n  if (this.tickMarksVisible !\u003d that.tickMarksVisible) {\n    return false;\n  }\n  if (this.tickMarkInsideLength !\u003d that.tickMarkInsideLength) {\n    return false;\n  }\n  if (this.tickMarkOutsideLength !\u003d that.tickMarkOutsideLength) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.tickMarkPaint,that.tickMarkPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.tickMarkStroke,that.tickMarkStroke)) {\n    return false;\n  }\n  if (this.minorTickMarksVisible !\u003d that.minorTickMarksVisible) {\n    return false;\n  }\n  if (this.minorTickMarkInsideLength !\u003d that.minorTickMarkInsideLength) {\n    return false;\n  }\n  if (this.minorTickMarkOutsideLength !\u003d that.minorTickMarkOutsideLength) {\n    return false;\n  }\n  if (this.fixedDimension !\u003d that.fixedDimension) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1455,
    "end_line": 1539,
    "comment": "/** \n * Tests this axis for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.writeObject#1548",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.labelPaint,stream);\n  SerialUtilities.writePaint(this.tickLabelPaint,stream);\n  SerialUtilities.writeStroke(this.axisLineStroke,stream);\n  SerialUtilities.writePaint(this.axisLinePaint,stream);\n  SerialUtilities.writeStroke(this.tickMarkStroke,stream);\n  SerialUtilities.writePaint(this.tickMarkPaint,stream);\n}",
    "begin_line": 1548,
    "end_line": 1556,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Axis.readObject#1566",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/Axis.java",
    "class_name": "org.jfree.chart.axis.Axis",
    "signature": "org.jfree.chart.axis.Axis.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.labelPaint\u003dSerialUtilities.readPaint(stream);\n  this.tickLabelPaint\u003dSerialUtilities.readPaint(stream);\n  this.axisLineStroke\u003dSerialUtilities.readStroke(stream);\n  this.axisLinePaint\u003dSerialUtilities.readPaint(stream);\n  this.tickMarkStroke\u003dSerialUtilities.readStroke(stream);\n  this.tickMarkPaint\u003dSerialUtilities.readPaint(stream);\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 1566,
    "end_line": 1576,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.AxisLocation#84",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
    "snippet": "private AxisLocation(String name){\n  this.name\u003dname;\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.getOpposite#95",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.getOpposite()",
    "snippet": "public AxisLocation getOpposite(){\n  return getOpposite(this);\n}",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * Returns the location that is opposite to this location.\n * @return The opposite location.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.toString#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.equals#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof AxisLocation)) {\n    return false;\n  }\n  AxisLocation location\u003d(AxisLocation)obj;\n  if (!this.name.equals(location.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 116,
    "end_line": 130,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.getOpposite#139",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.getOpposite(org.jfree.chart.axis.AxisLocation)",
    "snippet": "public static AxisLocation getOpposite(AxisLocation location){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  AxisLocation result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    result\u003dAxisLocation.BOTTOM_OR_RIGHT;\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    result\u003dAxisLocation.BOTTOM_OR_LEFT;\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    result\u003dAxisLocation.TOP_OR_RIGHT;\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    result\u003dAxisLocation.TOP_OR_LEFT;\n  }\n else {\n    throw new IllegalStateException(\"AxisLocation not recognised.\");\n  }\n  return result;\n}",
    "begin_line": 139,
    "end_line": 160,
    "comment": "/** \n * Returns the location that is opposite to the supplied location.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The opposite location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisLocation.readResolve#169",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/AxisLocation.java",
    "class_name": "org.jfree.chart.axis.AxisLocation",
    "signature": "org.jfree.chart.axis.AxisLocation.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(AxisLocation.TOP_OR_RIGHT)) {\n    return AxisLocation.TOP_OR_RIGHT;\n  }\n else   if (this.equals(AxisLocation.BOTTOM_OR_RIGHT)) {\n    return AxisLocation.BOTTOM_OR_RIGHT;\n  }\n else   if (this.equals(AxisLocation.TOP_OR_LEFT)) {\n    return AxisLocation.TOP_OR_LEFT;\n  }\n else   if (this.equals(AxisLocation.BOTTOM_OR_LEFT)) {\n    return AxisLocation.BOTTOM_OR_LEFT;\n  }\n  return null;\n}",
    "begin_line": 169,
    "end_line": 183,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.toTimelineValue#222",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.toTimelineValue(long)",
    "snippet": "public long toTimelineValue(long millisecond){\n  return millisecond;\n}",
    "begin_line": 222,
    "end_line": 224,
    "comment": "/** \n * Converts a millisecond into a timeline value.\n * @param millisecond  the millisecond.\n * @return The timeline value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.toTimelineValue#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.toTimelineValue(java.util.Date)",
    "snippet": "public long toTimelineValue(Date date){\n  return date.getTime();\n}",
    "begin_line": 233,
    "end_line": 235,
    "comment": "/** \n * Converts a date into a timeline value.\n * @param date  the domain value.\n * @return The timeline value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.toMillisecond#245",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.toMillisecond(long)",
    "snippet": "public long toMillisecond(long value){\n  return value;\n}",
    "begin_line": 245,
    "end_line": 247,
    "comment": "/** \n * Converts a timeline value into a millisecond (as encoded by \u003ccode\u003ejava.util.Date\u003c/code\u003e).\n * @param value  the value.\n * @return The millisecond.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.containsDomainValue#257",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.containsDomainValue(long)",
    "snippet": "public boolean containsDomainValue(long millisecond){\n  return true;\n}",
    "begin_line": 257,
    "end_line": 259,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the timeline includes the specified domain value.\n * @param millisecond  the millisecond.\n * @return \u003ccode\u003etrue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.containsDomainValue#269",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.containsDomainValue(java.util.Date)",
    "snippet": "public boolean containsDomainValue(Date date){\n  return true;\n}",
    "begin_line": 269,
    "end_line": 271,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the timeline includes the specified domain value.\n * @param date  the date.\n * @return \u003ccode\u003etrue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.containsDomainRange#282",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.containsDomainRange(long, long)",
    "snippet": "public boolean containsDomainRange(long from,long to){\n  return true;\n}",
    "begin_line": 282,
    "end_line": 284,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the timeline includes the specified domain value range.\n * @param from  the start value.\n * @param to  the end value.\n * @return \u003ccode\u003etrue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.containsDomainRange#295",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.containsDomainRange(java.util.Date, java.util.Date)",
    "snippet": "public boolean containsDomainRange(Date from,Date to){\n  return true;\n}",
    "begin_line": 295,
    "end_line": 297,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the timeline includes the specified domain value range.\n * @param from  the start date.\n * @param to  the end date.\n * @return \u003ccode\u003etrue\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.equals#306",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object object){\n  if (object \u003d\u003d null) {\n    return false;\n  }\n  if (object \u003d\u003d this) {\n    return true;\n  }\n  if (object instanceof DefaultTimeline) {\n    return true;\n  }\n  return false;\n}",
    "begin_line": 306,
    "end_line": 317,
    "comment": "/** \n * Tests an object for equality with this instance.\n * @param object  the object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.DateAxis#339",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.DateAxis()",
    "snippet": "public DateAxis(){\n  this(null);\n}",
    "begin_line": 339,
    "end_line": 341,
    "comment": "/** \n * Creates a date axis with no label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.DateAxis#348",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String)",
    "snippet": "public DateAxis(String label){\n  this(label,TimeZone.getDefault());\n}",
    "begin_line": 348,
    "end_line": 350,
    "comment": "/** \n * Creates a date axis with the specified label.\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.DateAxis#365",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String, java.util.TimeZone)",
    "snippet": "public DateAxis(String label,TimeZone zone){\n  this(label,zone,Locale.getDefault());\n}",
    "begin_line": 365,
    "end_line": 367,
    "comment": "/** \n * Creates a date axis. A timeline is specified for the axis. This allows special transformations to occur between a domain of values and the values included in the axis.\n * @see org.jfree.chart.axis.SegmentedTimeline\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param zone  the time zone.\n * @deprecated From 1.0.11 onwards, use {@link #DateAxis(String,TimeZone,Locale)} instead, to explicitly set the locale.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.DateAxis#382",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String, java.util.TimeZone, java.util.Locale)",
    "snippet": "public DateAxis(String label,TimeZone zone,Locale locale){\n  super(label,DateAxis.createStandardDateTickUnits(zone,locale));\n  setTickUnit(DateAxis.DEFAULT_DATE_TICK_UNIT,false,false);\n  setAutoRangeMinimumSize(DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS);\n  setRange(DEFAULT_DATE_RANGE,false,false);\n  this.dateFormatOverride\u003dnull;\n  this.timeZone\u003dzone;\n  this.locale\u003dlocale;\n  this.timeline\u003dDEFAULT_TIMELINE;\n}",
    "begin_line": 382,
    "end_line": 392,
    "comment": "/** \n * Creates a date axis. A timeline is specified for the axis. This allows special transformations to occur between a domain of values and the values included in the axis.\n * @see org.jfree.chart.axis.SegmentedTimeline\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param zone  the time zone.\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getTimeZone#403",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getTimeZone()",
    "snippet": "public TimeZone getTimeZone(){\n  return this.timeZone;\n}",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Returns the time zone for the axis.\n * @return The time zone (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.4\n * @see #setTimeZone(TimeZone)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setTimeZone#417",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setTimeZone(java.util.TimeZone)",
    "snippet": "public void setTimeZone(TimeZone zone){\n  if (zone \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027zone\u0027 argument.\");\n  }\n  if (!this.timeZone.equals(zone)) {\n    this.timeZone\u003dzone;\n    setStandardTickUnits(createStandardDateTickUnits(zone,this.locale));\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 417,
    "end_line": 427,
    "comment": "/** \n * Sets the time zone for the axis and sends an  {@link AxisChangeEvent} toall registered listeners.\n * @param zone  the time zone (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.4\n * @see #getTimeZone()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getTimeline#434",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getTimeline()",
    "snippet": "public Timeline getTimeline(){\n  return this.timeline;\n}",
    "begin_line": 434,
    "end_line": 436,
    "comment": "/** \n * Returns the underlying timeline used by this axis.\n * @return The timeline.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setTimeline#446",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setTimeline(org.jfree.chart.axis.Timeline)",
    "snippet": "public void setTimeline(Timeline timeline){\n  if (this.timeline !\u003d timeline) {\n    this.timeline\u003dtimeline;\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 446,
    "end_line": 451,
    "comment": "/** \n * Sets the underlying timeline to use for this axis. \u003cP\u003e If the timeline is changed, an  {@link AxisChangeEvent} is sent to allregistered listeners.\n * @param timeline  the timeline.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getTickUnit#466",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getTickUnit()",
    "snippet": "public DateTickUnit getTickUnit(){\n  return this.tickUnit;\n}",
    "begin_line": 466,
    "end_line": 468,
    "comment": "/** \n * Returns the tick unit for the axis. \u003cp\u003e Note: if the \u003ccode\u003eautoTickUnitSelection\u003c/code\u003e flag is \u003ccode\u003etrue\u003c/code\u003e the tick unit may be changed while the axis is being drawn, so in that case the return value from this method may be irrelevant if the method is called before the axis has been drawn.\n * @return The tick unit (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setTickUnit(DateTickUnit)\n * @see ValueAxis#isAutoTickUnitSelection()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setTickUnit#480",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit)",
    "snippet": "public void setTickUnit(DateTickUnit unit){\n  setTickUnit(unit,true,true);\n}",
    "begin_line": 480,
    "end_line": 482,
    "comment": "/** \n * Sets the tick unit for the axis.  The auto-tick-unit-selection flag is set to \u003ccode\u003efalse\u003c/code\u003e, and registered listeners are notified that the axis has been changed.\n * @param unit  the tick unit.\n * @see #getTickUnit()\n * @see #setTickUnit(DateTickUnit,boolean,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setTickUnit#493",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit, boolean, boolean)",
    "snippet": "public void setTickUnit(DateTickUnit unit,boolean notify,boolean turnOffAutoSelection){\n  this.tickUnit\u003dunit;\n  if (turnOffAutoSelection) {\n    setAutoTickUnitSelection(false,false);\n  }\n  if (notify) {\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 493,
    "end_line": 504,
    "comment": "/** \n * Sets the tick unit attribute.\n * @param unit  the new tick unit.\n * @param notify  notify registered listeners?\n * @param turnOffAutoSelection  turn off auto selection?\n * @see #getTickUnit()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getDateFormatOverride#512",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getDateFormatOverride()",
    "snippet": "public DateFormat getDateFormatOverride(){\n  return this.dateFormatOverride;\n}",
    "begin_line": 512,
    "end_line": 514,
    "comment": "/** \n * Returns the date format override.  If this is non-null, then it will be used to format the dates on the axis.\n * @return The formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setDateFormatOverride#522",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setDateFormatOverride(java.text.DateFormat)",
    "snippet": "public void setDateFormatOverride(DateFormat formatter){\n  this.dateFormatOverride\u003dformatter;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 522,
    "end_line": 525,
    "comment": "/** \n * Sets the date format override.  If this is non-null, then it will be used to format the dates on the axis.\n * @param formatter  the date formatter (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setRange#534",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setRange(org.jfree.data.Range)",
    "snippet": "public void setRange(Range range){\n  setRange(range,true,true);\n}",
    "begin_line": 534,
    "end_line": 536,
    "comment": "/** \n * Sets the upper and lower bounds for the axis and sends an {@link AxisChangeEvent} to all registered listeners.  As a side-effect,the auto-range flag is set to false.\n * @param range  the new range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setRange#549",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setRange(org.jfree.data.Range, boolean, boolean)",
    "snippet": "public void setRange(Range range,boolean turnOffAutoRange,boolean notify){\n  if (range \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027range\u0027 argument.\");\n  }\n  if (!(range instanceof DateRange)) {\n    range\u003dnew DateRange(range);\n  }\n  super.setRange(range,turnOffAutoRange,notify);\n}",
    "begin_line": 549,
    "end_line": 560,
    "comment": "/** \n * Sets the range for the axis, if requested, sends an {@link AxisChangeEvent} to all registered listeners.  As a side-effect,the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e (optional).\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param turnOffAutoRange  a flag that controls whether or not the autorange is turned off.\n * @param notify  a flag that controls whether or not listeners arenotified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setRange#569",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setRange(java.util.Date, java.util.Date)",
    "snippet": "public void setRange(Date lower,Date upper){\n  if (lower.getTime() \u003e\u003d upper.getTime()) {\n    throw new IllegalArgumentException(\"Requires \u0027lower\u0027 \u003c \u0027upper\u0027.\");\n  }\n  setRange(new DateRange(lower,upper));\n}",
    "begin_line": 569,
    "end_line": 574,
    "comment": "/** \n * Sets the axis range and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param lower  the lower bound for the axis.\n * @param upper  the upper bound for the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setRange#583",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setRange(double, double)",
    "snippet": "public void setRange(double lower,double upper){\n  if (lower \u003e\u003d upper) {\n    throw new IllegalArgumentException(\"Requires \u0027lower\u0027 \u003c \u0027upper\u0027.\");\n  }\n  setRange(new DateRange(lower,upper));\n}",
    "begin_line": 583,
    "end_line": 588,
    "comment": "/** \n * Sets the axis range and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param lower  the lower bound for the axis.\n * @param upper  the upper bound for the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getMinimumDate#598",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getMinimumDate()",
    "snippet": "public Date getMinimumDate(){\n  Date result\u003dnull;\n  Range range\u003dgetRange();\n  if (range instanceof DateRange) {\n    DateRange r\u003d(DateRange)range;\n    result\u003dr.getLowerDate();\n  }\n else {\n    result\u003dnew Date((long)range.getLowerBound());\n  }\n  return result;\n}",
    "begin_line": 598,
    "end_line": 609,
    "comment": "/** \n * Returns the earliest date visible on the axis.\n * @return The date.\n * @see #setMinimumDate(Date)\n * @see #getMaximumDate()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setMinimumDate#623",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setMinimumDate(java.util.Date)",
    "snippet": "public void setMinimumDate(Date date){\n  if (date \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027date\u0027 argument.\");\n  }\n  Date maxDate\u003dgetMaximumDate();\n  long maxMillis\u003dmaxDate.getTime();\n  long newMinMillis\u003ddate.getTime();\n  if (maxMillis \u003c\u003d newMinMillis) {\n    Date oldMin\u003dgetMinimumDate();\n    long length\u003dmaxMillis - oldMin.getTime();\n    maxDate\u003dnew Date(newMinMillis + length);\n  }\n  setRange(new DateRange(date,maxDate),true,false);\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 623,
    "end_line": 638,
    "comment": "/** \n * Sets the minimum date visible on the axis and sends an {@link AxisChangeEvent} to all registered listeners.  If\u003ccode\u003edate\u003c/code\u003e is on or after the current maximum date for the axis, the maximum date will be shifted to preserve the current length of the axis.\n * @param date  the date (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getMinimumDate()\n * @see #setMaximumDate(Date)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getMaximumDate#648",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getMaximumDate()",
    "snippet": "public Date getMaximumDate(){\n  Date result\u003dnull;\n  Range range\u003dgetRange();\n  if (range instanceof DateRange) {\n    DateRange r\u003d(DateRange)range;\n    result\u003dr.getUpperDate();\n  }\n else {\n    result\u003dnew Date((long)range.getUpperBound());\n  }\n  return result;\n}",
    "begin_line": 648,
    "end_line": 659,
    "comment": "/** \n * Returns the latest date visible on the axis.\n * @return The date.\n * @see #setMaximumDate(Date)\n * @see #getMinimumDate()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setMaximumDate#673",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setMaximumDate(java.util.Date)",
    "snippet": "public void setMaximumDate(Date maximumDate){\n  if (maximumDate \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027maximumDate\u0027 argument.\");\n  }\n  Date minDate\u003dgetMinimumDate();\n  long minMillis\u003dminDate.getTime();\n  long newMaxMillis\u003dmaximumDate.getTime();\n  if (minMillis \u003e\u003d newMaxMillis) {\n    Date oldMax\u003dgetMaximumDate();\n    long length\u003doldMax.getTime() - minMillis;\n    minDate\u003dnew Date(newMaxMillis - length);\n  }\n  setRange(new DateRange(minDate,maximumDate),true,false);\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 673,
    "end_line": 688,
    "comment": "/** \n * Sets the maximum date visible on the axis and sends an {@link AxisChangeEvent} to all registered listeners.  If\u003ccode\u003emaximumDate\u003c/code\u003e is on or before the current minimum date for the axis, the minimum date will be shifted to preserve the current length of the axis.\n * @param maximumDate  the date (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getMinimumDate()\n * @see #setMinimumDate(Date)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.getTickMarkPosition#695",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.getTickMarkPosition()",
    "snippet": "public DateTickMarkPosition getTickMarkPosition(){\n  return this.tickMarkPosition;\n}",
    "begin_line": 695,
    "end_line": 697,
    "comment": "/** \n * Returns the tick mark position (start, middle or end of the time period).\n * @return The position (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.setTickMarkPosition#705",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)",
    "snippet": "public void setTickMarkPosition(DateTickMarkPosition position){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  this.tickMarkPosition\u003dposition;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 705,
    "end_line": 711,
    "comment": "/** \n * Sets the tick mark position (start, middle or end of the time period) and sends an  {@link AxisChangeEvent} to all registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.configure#717",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.configure()",
    "snippet": "public void configure(){\n  if (isAutoRange()) {\n    autoAdjustRange();\n  }\n}",
    "begin_line": 717,
    "end_line": 721,
    "comment": "/** \n * Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets the maximum and minimum values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.isHiddenValue#731",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.isHiddenValue(long)",
    "snippet": "public boolean isHiddenValue(long millis){\n  return (!this.timeline.containsDomainValue(new Date(millis)));\n}",
    "begin_line": 731,
    "end_line": 733,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the axis hides this value, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param millis  the data value.\n * @return A value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.valueToJava2D#746",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){\n  value\u003dthis.timeline.toTimelineValue((long)value);\n  DateRange range\u003d(DateRange)getRange();\n  double axisMin\u003dthis.timeline.toTimelineValue(range.getLowerMillis());\n  double axisMax\u003dthis.timeline.toTimelineValue(range.getUpperMillis());\n  double result\u003d0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    double minX\u003darea.getX();\n    double maxX\u003darea.getMaxX();\n    if (isInverted()) {\n      result\u003dmaxX + ((value - axisMin) / (axisMax - axisMin)) * (minX - maxX);\n    }\n else {\n      result\u003dminX + ((value - axisMin) / (axisMax - axisMin)) * (maxX - minX);\n    }\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    double minY\u003darea.getMinY();\n    double maxY\u003darea.getMaxY();\n    if (isInverted()) {\n      result\u003dminY + (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));\n    }\n else {\n      result\u003dmaxY - (((value - axisMin) / (axisMax - axisMin)) * (maxY - minY));\n    }\n  }\n  return result;\n}",
    "begin_line": 746,
    "end_line": 781,
    "comment": "/** \n * Translates the data value to the display coordinates (Java 2D User Space) of the chart.\n * @param value  the date to be plotted.\n * @param area  the rectangle (in Java2D space) where the data is to beplotted.\n * @param edge  the axis location.\n * @return The coordinate corresponding to the supplied data value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.dateToJava2D#794",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.dateToJava2D(java.util.Date, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double dateToJava2D(Date date,Rectangle2D area,RectangleEdge edge){\n  double value\u003ddate.getTime();\n  return valueToJava2D(value,area,edge);\n}",
    "begin_line": 794,
    "end_line": 798,
    "comment": "/** \n * Translates a date to Java2D coordinates, based on the range displayed by this axis for the specified data area.\n * @param date  the date.\n * @param area  the rectangle (in Java2D space) where the data is to beplotted.\n * @param edge  the axis location.\n * @return The coordinate corresponding to the supplied date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.java2DToValue#812",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){\n  DateRange range\u003d(DateRange)getRange();\n  double axisMin\u003dthis.timeline.toTimelineValue(range.getLowerMillis());\n  double axisMax\u003dthis.timeline.toTimelineValue(range.getUpperMillis());\n  double min\u003d0.0;\n  double max\u003d0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    min\u003darea.getX();\n    max\u003darea.getMaxX();\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    min\u003darea.getMaxY();\n    max\u003darea.getY();\n  }\n  double result;\n  if (isInverted()) {\n    result\u003daxisMax - ((java2DValue - min) / (max - min) * (axisMax - axisMin));\n  }\n else {\n    result\u003daxisMin + ((java2DValue - min) / (max - min) * (axisMax - axisMin));\n  }\n  return this.timeline.toMillisecond((long)result);\n}",
    "begin_line": 812,
    "end_line": 841,
    "comment": "/** \n * Translates a Java2D coordinate into the corresponding data value.  To perform this translation, you need to know the area used for plotting data, and which edge the axis is located on.\n * @param java2DValue  the coordinate in Java2D space.\n * @param area  the rectangle (in Java2D space) where the data is to beplotted.\n * @param edge  the axis location.\n * @return A data value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.calculateLowestVisibleTickValue#850",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)",
    "snippet": "public Date calculateLowestVisibleTickValue(DateTickUnit unit){\n  return nextStandardDate(getMinimumDate(),unit);\n}",
    "begin_line": 850,
    "end_line": 852,
    "comment": "/** \n * Calculates the value of the lowest visible tick on the axis.\n * @param unit  date unit to use.\n * @return The value of the lowest visible tick on the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.calculateHighestVisibleTickValue#861",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.calculateHighestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)",
    "snippet": "public Date calculateHighestVisibleTickValue(DateTickUnit unit){\n  return previousStandardDate(getMaximumDate(),unit);\n}",
    "begin_line": 861,
    "end_line": 863,
    "comment": "/** \n * Calculates the value of the highest visible tick on the axis.\n * @param unit  date unit to use.\n * @return The value of the highest visible tick on the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.previousStandardDate#873",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.previousStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
    "snippet": "protected Date previousStandardDate(Date date,DateTickUnit unit){\n  int milliseconds;\n  int seconds;\n  int minutes;\n  int hours;\n  int days;\n  int months;\n  int years;\n  Calendar calendar\u003dCalendar.getInstance(this.timeZone,this.locale);\n  calendar.setTime(date);\n  int count\u003dunit.getMultiple();\n  int current\u003dcalendar.get(unit.getCalendarField());\n  int value\u003dcount * (current / count);\n  DateTickUnitType t\u003dunit.getUnitType();\n  if (t.equals(DateTickUnitType.MILLISECOND)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    months\u003dcalendar.get(Calendar.MONTH);\n    days\u003dcalendar.get(Calendar.DATE);\n    hours\u003dcalendar.get(Calendar.HOUR_OF_DAY);\n    minutes\u003dcalendar.get(Calendar.MINUTE);\n    seconds\u003dcalendar.get(Calendar.SECOND);\n    calendar.set(years,months,days,hours,minutes,seconds);\n    calendar.set(Calendar.MILLISECOND,value);\n    Date mm\u003dcalendar.getTime();\n    if (mm.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.MILLISECOND,value - 1);\n      mm\u003dcalendar.getTime();\n    }\n    return mm;\n  }\n else   if (t.equals(DateTickUnitType.SECOND)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    months\u003dcalendar.get(Calendar.MONTH);\n    days\u003dcalendar.get(Calendar.DATE);\n    hours\u003dcalendar.get(Calendar.HOUR_OF_DAY);\n    minutes\u003dcalendar.get(Calendar.MINUTE);\n    if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.START) {\n      milliseconds\u003d0;\n    }\n else     if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.MIDDLE) {\n      milliseconds\u003d500;\n    }\n else {\n      milliseconds\u003d999;\n    }\n    calendar.set(Calendar.MILLISECOND,milliseconds);\n    calendar.set(years,months,days,hours,minutes,value);\n    Date dd\u003dcalendar.getTime();\n    if (dd.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.SECOND,value - 1);\n      dd\u003dcalendar.getTime();\n    }\n    return dd;\n  }\n else   if (t.equals(DateTickUnitType.MINUTE)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    months\u003dcalendar.get(Calendar.MONTH);\n    days\u003dcalendar.get(Calendar.DATE);\n    hours\u003dcalendar.get(Calendar.HOUR_OF_DAY);\n    if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.START) {\n      seconds\u003d0;\n    }\n else     if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.MIDDLE) {\n      seconds\u003d30;\n    }\n else {\n      seconds\u003d59;\n    }\n    calendar.clear(Calendar.MILLISECOND);\n    calendar.set(years,months,days,hours,value,seconds);\n    Date d0\u003dcalendar.getTime();\n    if (d0.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.MINUTE,value - 1);\n      d0\u003dcalendar.getTime();\n    }\n    return d0;\n  }\n else   if (t.equals(DateTickUnitType.HOUR)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    months\u003dcalendar.get(Calendar.MONTH);\n    days\u003dcalendar.get(Calendar.DATE);\n    if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.START) {\n      minutes\u003d0;\n      seconds\u003d0;\n    }\n else     if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.MIDDLE) {\n      minutes\u003d30;\n      seconds\u003d0;\n    }\n else {\n      minutes\u003d59;\n      seconds\u003d59;\n    }\n    calendar.clear(Calendar.MILLISECOND);\n    calendar.set(years,months,days,value,minutes,seconds);\n    Date d1\u003dcalendar.getTime();\n    if (d1.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.HOUR_OF_DAY,value - 1);\n      d1\u003dcalendar.getTime();\n    }\n    return d1;\n  }\n else   if (t.equals(DateTickUnitType.DAY)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    months\u003dcalendar.get(Calendar.MONTH);\n    if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.START) {\n      hours\u003d0;\n      minutes\u003d0;\n      seconds\u003d0;\n    }\n else     if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.MIDDLE) {\n      hours\u003d12;\n      minutes\u003d0;\n      seconds\u003d0;\n    }\n else {\n      hours\u003d23;\n      minutes\u003d59;\n      seconds\u003d59;\n    }\n    calendar.clear(Calendar.MILLISECOND);\n    calendar.set(years,months,value,hours,0,0);\n    Date d2\u003dcalendar.getTime();\n    if (d2.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.DATE,value - 1);\n      d2\u003dcalendar.getTime();\n    }\n    return d2;\n  }\n else   if (t.equals(DateTickUnitType.MONTH)) {\n    years\u003dcalendar.get(Calendar.YEAR);\n    calendar.clear(Calendar.MILLISECOND);\n    calendar.set(years,value,1,0,0,0);\n    Month month\u003dnew Month(calendar.getTime(),this.timeZone,this.locale);\n    Date standardDate\u003dcalculateDateForPosition(month,this.tickMarkPosition);\n    long millis\u003dstandardDate.getTime();\n    if (millis \u003e\u003d date.getTime()) {\n      month\u003d(Month)month.previous();\n      month.peg(Calendar.getInstance(this.timeZone));\n      standardDate\u003dcalculateDateForPosition(month,this.tickMarkPosition);\n    }\n    return standardDate;\n  }\n else   if (t.equals(DateTickUnitType.YEAR)) {\n    if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.START) {\n      months\u003d0;\n      days\u003d1;\n    }\n else     if (this.tickMarkPosition \u003d\u003d DateTickMarkPosition.MIDDLE) {\n      months\u003d6;\n      days\u003d1;\n    }\n else {\n      months\u003d11;\n      days\u003d31;\n    }\n    calendar.clear(Calendar.MILLISECOND);\n    calendar.set(value,months,days,0,0,0);\n    Date d3\u003dcalendar.getTime();\n    if (d3.getTime() \u003e\u003d date.getTime()) {\n      calendar.set(Calendar.YEAR,value - 1);\n      d3\u003dcalendar.getTime();\n    }\n    return d3;\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 873,
    "end_line": 1052,
    "comment": "/** \n * Returns the previous \"standard\" date, for a given date and tick unit.\n * @param date  the reference date.\n * @param unit  the tick unit.\n * @return The previous \"standard\" date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.calculateDateForPosition#1063",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.calculateDateForPosition(org.jfree.data.time.RegularTimePeriod, org.jfree.chart.axis.DateTickMarkPosition)",
    "snippet": "private Date calculateDateForPosition(RegularTimePeriod period,DateTickMarkPosition position){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  Date result\u003dnull;\n  if (position \u003d\u003d DateTickMarkPosition.START) {\n    result\u003dnew Date(period.getFirstMillisecond());\n  }\n else   if (position \u003d\u003d DateTickMarkPosition.MIDDLE) {\n    result\u003dnew Date(period.getMiddleMillisecond());\n  }\n else   if (position \u003d\u003d DateTickMarkPosition.END) {\n    result\u003dnew Date(period.getLastMillisecond());\n  }\n  return result;\n}",
    "begin_line": 1063,
    "end_line": 1081,
    "comment": "/** \n * Returns a  {@link java.util.Date} corresponding to the specified positionwithin a  {@link RegularTimePeriod}.\n * @param period  the period.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.nextStandardDate#1092",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.nextStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
    "snippet": "protected Date nextStandardDate(Date date,DateTickUnit unit){\n  Date previous\u003dpreviousStandardDate(date,unit);\n  Calendar calendar\u003dCalendar.getInstance(this.timeZone,this.locale);\n  calendar.setTime(previous);\n  calendar.add(unit.getCalendarField(),unit.getMultiple());\n  return calendar.getTime();\n}",
    "begin_line": 1092,
    "end_line": 1098,
    "comment": "/** \n * Returns the first \"standard\" date (based on the specified field and units).\n * @param date  the reference date.\n * @param unit  the date tick unit.\n * @return The next \"standard\" date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.createStandardDateTickUnits#1109",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.createStandardDateTickUnits()",
    "snippet": "public static TickUnitSource createStandardDateTickUnits(){\n  return createStandardDateTickUnits(TimeZone.getDefault(),Locale.getDefault());\n}",
    "begin_line": 1109,
    "end_line": 1112,
    "comment": "/** \n * Returns a collection of standard date tick units that uses the default time zone.  This collection will be used by default, but you are free to create your own collection if you want to (see the {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inheritedfrom the  {@link ValueAxis} class).\n * @return A collection of standard date tick units.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.createStandardDateTickUnits#1129",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(java.util.TimeZone)",
    "snippet": "public static TickUnitSource createStandardDateTickUnits(TimeZone zone){\n  return createStandardDateTickUnits(zone,Locale.getDefault());\n}",
    "begin_line": 1129,
    "end_line": 1131,
    "comment": "/** \n * Returns a collection of standard date tick units.  This collection will be used by default, but you are free to create your own collection if you want to (see the {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inheritedfrom the  {@link ValueAxis} class).\n * @param zone  the time zone (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A collection of standard date tick units.\n * @deprecated Since 1.0.11, use {@link #createStandardDateTickUnits(TimeZone,Locale)} to explicitly set the locale as well as thetime zone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.createStandardDateTickUnits#1147",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(java.util.TimeZone, java.util.Locale)",
    "snippet": "public static TickUnitSource createStandardDateTickUnits(TimeZone zone,Locale locale){\n  if (zone \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027zone\u0027 argument.\");\n  }\n  if (locale \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027locale\u0027 argument.\");\n  }\n  TickUnits units\u003dnew TickUnits();\n  DateFormat f1\u003dnew SimpleDateFormat(\"HH:mm:ss.SSS\",locale);\n  DateFormat f2\u003dnew SimpleDateFormat(\"HH:mm:ss\",locale);\n  DateFormat f3\u003dnew SimpleDateFormat(\"HH:mm\",locale);\n  DateFormat f4\u003dnew SimpleDateFormat(\"d-MMM, HH:mm\",locale);\n  DateFormat f5\u003dnew SimpleDateFormat(\"d-MMM\",locale);\n  DateFormat f6\u003dnew SimpleDateFormat(\"MMM-yyyy\",locale);\n  DateFormat f7\u003dnew SimpleDateFormat(\"yyyy\",locale);\n  f1.setTimeZone(zone);\n  f2.setTimeZone(zone);\n  f3.setTimeZone(zone);\n  f4.setTimeZone(zone);\n  f5.setTimeZone(zone);\n  f6.setTimeZone(zone);\n  f7.setTimeZone(zone);\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,1,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,5,DateTickUnitType.MILLISECOND,1,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,10,DateTickUnitType.MILLISECOND,1,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,25,DateTickUnitType.MILLISECOND,5,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,50,DateTickUnitType.MILLISECOND,10,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,100,DateTickUnitType.MILLISECOND,10,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,250,DateTickUnitType.MILLISECOND,10,f1));\n  units.add(new DateTickUnit(DateTickUnitType.MILLISECOND,500,DateTickUnitType.MILLISECOND,50,f1));\n  units.add(new DateTickUnit(DateTickUnitType.SECOND,1,DateTickUnitType.MILLISECOND,50,f2));\n  units.add(new DateTickUnit(DateTickUnitType.SECOND,5,DateTickUnitType.SECOND,1,f2));\n  units.add(new DateTickUnit(DateTickUnitType.SECOND,10,DateTickUnitType.SECOND,1,f2));\n  units.add(new DateTickUnit(DateTickUnitType.SECOND,30,DateTickUnitType.SECOND,5,f2));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,1,DateTickUnitType.SECOND,5,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,2,DateTickUnitType.SECOND,10,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,5,DateTickUnitType.MINUTE,1,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,10,DateTickUnitType.MINUTE,1,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,15,DateTickUnitType.MINUTE,5,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,20,DateTickUnitType.MINUTE,5,f3));\n  units.add(new DateTickUnit(DateTickUnitType.MINUTE,30,DateTickUnitType.MINUTE,5,f3));\n  units.add(new DateTickUnit(DateTickUnitType.HOUR,1,DateTickUnitType.MINUTE,5,f3));\n  units.add(new DateTickUnit(DateTickUnitType.HOUR,2,DateTickUnitType.MINUTE,10,f3));\n  units.add(new DateTickUnit(DateTickUnitType.HOUR,4,DateTickUnitType.MINUTE,30,f3));\n  units.add(new DateTickUnit(DateTickUnitType.HOUR,6,DateTickUnitType.HOUR,1,f3));\n  units.add(new DateTickUnit(DateTickUnitType.HOUR,12,DateTickUnitType.HOUR,1,f4));\n  units.add(new DateTickUnit(DateTickUnitType.DAY,1,DateTickUnitType.HOUR,1,f5));\n  units.add(new DateTickUnit(DateTickUnitType.DAY,2,DateTickUnitType.HOUR,1,f5));\n  units.add(new DateTickUnit(DateTickUnitType.DAY,7,DateTickUnitType.DAY,1,f5));\n  units.add(new DateTickUnit(DateTickUnitType.DAY,15,DateTickUnitType.DAY,1,f5));\n  units.add(new DateTickUnit(DateTickUnitType.MONTH,1,DateTickUnitType.DAY,1,f6));\n  units.add(new DateTickUnit(DateTickUnitType.MONTH,2,DateTickUnitType.DAY,1,f6));\n  units.add(new DateTickUnit(DateTickUnitType.MONTH,3,DateTickUnitType.MONTH,1,f6));\n  units.add(new DateTickUnit(DateTickUnitType.MONTH,4,DateTickUnitType.MONTH,1,f6));\n  units.add(new DateTickUnit(DateTickUnitType.MONTH,6,DateTickUnitType.MONTH,1,f6));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,1,DateTickUnitType.MONTH,1,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,2,DateTickUnitType.MONTH,3,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,5,DateTickUnitType.YEAR,1,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,10,DateTickUnitType.YEAR,1,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,25,DateTickUnitType.YEAR,5,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,50,DateTickUnitType.YEAR,10,f7));\n  units.add(new DateTickUnit(DateTickUnitType.YEAR,100,DateTickUnitType.YEAR,20,f7));\n  return units;\n}",
    "begin_line": 1147,
    "end_line": 1270,
    "comment": "/** \n * Returns a collection of standard date tick units.  This collection will be used by default, but you are free to create your own collection if you want to (see the {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inheritedfrom the  {@link ValueAxis} class).\n * @param zone  the time zone (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A collection of standard date tick units.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.autoAdjustRange#1275",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.autoAdjustRange()",
    "snippet": "protected void autoAdjustRange(){\n  Plot plot\u003dgetPlot();\n  if (plot \u003d\u003d null) {\n    return;\n  }\n  if (plot instanceof ValueAxisPlot) {\n    ValueAxisPlot vap\u003d(ValueAxisPlot)plot;\n    Range r\u003dvap.getDataRange(this);\n    if (r \u003d\u003d null) {\n      if (this.timeline instanceof SegmentedTimeline) {\n        r\u003dnew DateRange(((SegmentedTimeline)this.timeline).getStartTime(),((SegmentedTimeline)this.timeline).getStartTime() + 1);\n      }\n else {\n        r\u003dnew DateRange();\n      }\n    }\n    long upper\u003dthis.timeline.toTimelineValue((long)r.getUpperBound());\n    long lower;\n    long fixedAutoRange\u003d(long)getFixedAutoRange();\n    if (fixedAutoRange \u003e 0.0) {\n      lower\u003dupper - fixedAutoRange;\n    }\n else {\n      lower\u003dthis.timeline.toTimelineValue((long)r.getLowerBound());\n      double range\u003dupper - lower;\n      long minRange\u003d(long)getAutoRangeMinimumSize();\n      if (range \u003c minRange) {\n        long expand\u003d(long)(minRange - range) / 2;\n        upper\u003dupper + expand;\n        lower\u003dlower - expand;\n      }\n      upper\u003dupper + (long)(range * getUpperMargin());\n      lower\u003dlower - (long)(range * getLowerMargin());\n    }\n    upper\u003dthis.timeline.toMillisecond(upper);\n    lower\u003dthis.timeline.toMillisecond(lower);\n    DateRange dr\u003dnew DateRange(new Date(lower),new Date(upper));\n    setRange(dr,false,false);\n  }\n}",
    "begin_line": 1275,
    "end_line": 1326,
    "comment": "/** \n * Rescales the axis to ensure that all data is visible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.selectAutoTickUnit#1337",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    selectHorizontalAutoTickUnit(g2,dataArea,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    selectVerticalAutoTickUnit(g2,dataArea,edge);\n  }\n}",
    "begin_line": 1337,
    "end_line": 1348,
    "comment": "/** \n * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as possible (selected from an array of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area defined by the axes.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.selectHorizontalAutoTickUnit#1359",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.selectHorizontalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  long shift\u003d0;\n  if (this.timeline instanceof SegmentedTimeline) {\n    shift\u003d((SegmentedTimeline)this.timeline).getStartTime();\n  }\n  double zero\u003dvalueToJava2D(shift + 0.0,dataArea,edge);\n  double tickLabelWidth\u003destimateMaximumTickLabelWidth(g2,getTickUnit());\n  TickUnitSource tickUnits\u003dgetStandardTickUnits();\n  TickUnit unit1\u003dtickUnits.getCeilingTickUnit(getTickUnit());\n  double x1\u003dvalueToJava2D(shift + unit1.getSize(),dataArea,edge);\n  double unit1Width\u003dMath.abs(x1 - zero);\n  double guess\u003d(tickLabelWidth / unit1Width) * unit1.getSize();\n  DateTickUnit unit2\u003d(DateTickUnit)tickUnits.getCeilingTickUnit(guess);\n  double x2\u003dvalueToJava2D(shift + unit2.getSize(),dataArea,edge);\n  double unit2Width\u003dMath.abs(x2 - zero);\n  tickLabelWidth\u003destimateMaximumTickLabelWidth(g2,unit2);\n  if (tickLabelWidth \u003e unit2Width) {\n    unit2\u003d(DateTickUnit)tickUnits.getLargerTickUnit(unit2);\n  }\n  setTickUnit(unit2,false,false);\n}",
    "begin_line": 1359,
    "end_line": 1386,
    "comment": "/** \n * Selects an appropriate tick size for the axis.  The strategy is to display as many ticks as possible (selected from a collection of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area defined by the axes.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.selectVerticalAutoTickUnit#1397",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.selectVerticalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  TickUnitSource tickUnits\u003dgetStandardTickUnits();\n  double zero\u003dvalueToJava2D(0.0,dataArea,edge);\n  double estimate1\u003dgetRange().getLength() / 10.0;\n  DateTickUnit candidate1\u003d(DateTickUnit)tickUnits.getCeilingTickUnit(estimate1);\n  double labelHeight1\u003destimateMaximumTickLabelHeight(g2,candidate1);\n  double y1\u003dvalueToJava2D(candidate1.getSize(),dataArea,edge);\n  double candidate1UnitHeight\u003dMath.abs(y1 - zero);\n  double estimate2\u003d(labelHeight1 / candidate1UnitHeight) * candidate1.getSize();\n  DateTickUnit candidate2\u003d(DateTickUnit)tickUnits.getCeilingTickUnit(estimate2);\n  double labelHeight2\u003destimateMaximumTickLabelHeight(g2,candidate2);\n  double y2\u003dvalueToJava2D(candidate2.getSize(),dataArea,edge);\n  double unit2Height\u003dMath.abs(y2 - zero);\n  DateTickUnit finalUnit;\n  if (labelHeight2 \u003c unit2Height) {\n    finalUnit\u003dcandidate2;\n  }\n else {\n    finalUnit\u003d(DateTickUnit)tickUnits.getLargerTickUnit(candidate2);\n  }\n  setTickUnit(finalUnit,false,false);\n}",
    "begin_line": 1397,
    "end_line": 1432,
    "comment": "/** \n * Selects an appropriate tick size for the axis.  The strategy is to display as many ticks as possible (selected from a collection of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.estimateMaximumTickLabelWidth#1447",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.estimateMaximumTickLabelWidth(java.awt.Graphics2D, org.jfree.chart.axis.DateTickUnit)",
    "snippet": "private double estimateMaximumTickLabelWidth(Graphics2D g2,DateTickUnit unit){\n  RectangleInsets tickLabelInsets\u003dgetTickLabelInsets();\n  double result\u003dtickLabelInsets.getLeft() + tickLabelInsets.getRight();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  FontRenderContext frc\u003dg2.getFontRenderContext();\n  LineMetrics lm\u003dtickLabelFont.getLineMetrics(\"ABCxyz\",frc);\n  if (isVerticalTickLabels()) {\n    result+\u003dlm.getHeight();\n  }\n else {\n    DateRange range\u003d(DateRange)getRange();\n    Date lower\u003drange.getLowerDate();\n    Date upper\u003drange.getUpperDate();\n    String lowerStr\u003dnull;\n    String upperStr\u003dnull;\n    DateFormat formatter\u003dgetDateFormatOverride();\n    if (formatter !\u003d null) {\n      lowerStr\u003dformatter.format(lower);\n      upperStr\u003dformatter.format(upper);\n    }\n else {\n      lowerStr\u003dunit.dateToString(lower);\n      upperStr\u003dunit.dateToString(upper);\n    }\n    FontMetrics fm\u003dg2.getFontMetrics(tickLabelFont);\n    double w1\u003dfm.stringWidth(lowerStr);\n    double w2\u003dfm.stringWidth(upperStr);\n    result+\u003dMath.max(w1,w2);\n  }\n  return result;\n}",
    "begin_line": 1447,
    "end_line": 1485,
    "comment": "/** \n * Estimates the maximum width of the tick labels, assuming the specified tick unit is used. \u003cP\u003e Rather than computing the string bounds of every tick on the axis, we just look at two values: the lower bound and the upper bound for the axis.  These two values will usually be representative.\n * @param g2  the graphics device.\n * @param unit  the tick unit to use for calculation.\n * @return The estimated maximum width of the tick labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.estimateMaximumTickLabelHeight#1500",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.estimateMaximumTickLabelHeight(java.awt.Graphics2D, org.jfree.chart.axis.DateTickUnit)",
    "snippet": "private double estimateMaximumTickLabelHeight(Graphics2D g2,DateTickUnit unit){\n  RectangleInsets tickLabelInsets\u003dgetTickLabelInsets();\n  double result\u003dtickLabelInsets.getTop() + tickLabelInsets.getBottom();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  FontRenderContext frc\u003dg2.getFontRenderContext();\n  LineMetrics lm\u003dtickLabelFont.getLineMetrics(\"ABCxyz\",frc);\n  if (!isVerticalTickLabels()) {\n    result+\u003dlm.getHeight();\n  }\n else {\n    DateRange range\u003d(DateRange)getRange();\n    Date lower\u003drange.getLowerDate();\n    Date upper\u003drange.getUpperDate();\n    String lowerStr\u003dnull;\n    String upperStr\u003dnull;\n    DateFormat formatter\u003dgetDateFormatOverride();\n    if (formatter !\u003d null) {\n      lowerStr\u003dformatter.format(lower);\n      upperStr\u003dformatter.format(upper);\n    }\n else {\n      lowerStr\u003dunit.dateToString(lower);\n      upperStr\u003dunit.dateToString(upper);\n    }\n    FontMetrics fm\u003dg2.getFontMetrics(tickLabelFont);\n    double w1\u003dfm.stringWidth(lowerStr);\n    double w2\u003dfm.stringWidth(upperStr);\n    result+\u003dMath.max(w1,w2);\n  }\n  return result;\n}",
    "begin_line": 1500,
    "end_line": 1538,
    "comment": "/** \n * Estimates the maximum width of the tick labels, assuming the specified tick unit is used. \u003cP\u003e Rather than computing the string bounds of every tick on the axis, we just look at two values: the lower bound and the upper bound for the axis.  These two values will usually be representative.\n * @param g2  the graphics device.\n * @param unit  the tick unit to use for calculation.\n * @return The estimated maximum width of the tick labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.refreshTicks#1551",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnull;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    result\u003drefreshTicksHorizontal(g2,dataArea,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    result\u003drefreshTicksVertical(g2,dataArea,edge);\n  }\n  return result;\n}",
    "begin_line": 1551,
    "end_line": 1565,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param state  the axis state.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.correctTickDateForPosition#1576",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.correctTickDateForPosition(java.util.Date, org.jfree.chart.axis.DateTickUnit, org.jfree.chart.axis.DateTickMarkPosition)",
    "snippet": "private Date correctTickDateForPosition(Date time,DateTickUnit unit,DateTickMarkPosition position){\n  Date result\u003dtime;\n  DateTickUnitType t\u003dunit.getUnitType();\n  if (t.equals(DateTickUnitType.MONTH)) {\n    result\u003dcalculateDateForPosition(new Month(time,this.timeZone,this.locale),position);\n  }\n else   if (t.equals(DateTickUnitType.YEAR)) {\n    result\u003dcalculateDateForPosition(new Year(time,this.timeZone,this.locale),position);\n  }\n  return result;\n}",
    "begin_line": 1576,
    "end_line": 1589,
    "comment": "/** \n * Corrects the given tick date for the position setting.\n * @param time  the tick date/time.\n * @param unit  the tick unit.\n * @param position  the tick position.\n * @return The adjusted time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.refreshTicksHorizontal#1600",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnew java.util.ArrayList();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  if (isAutoTickUnitSelection()) {\n    selectAutoTickUnit(g2,dataArea,edge);\n  }\n  DateTickUnit unit\u003dgetTickUnit();\n  Date tickDate\u003dcalculateLowestVisibleTickValue(unit);\n  Date upperDate\u003dgetMaximumDate();\n  while (tickDate.before(upperDate)) {\n    tickDate\u003dcorrectTickDateForPosition(tickDate,unit,this.tickMarkPosition);\n    long lowestTickTime\u003dtickDate.getTime();\n    long distance\u003dunit.addToDate(tickDate,this.timeZone).getTime() - lowestTickTime;\n    int minorTickSpaces\u003dgetMinorTickCount();\n    if (minorTickSpaces \u003c\u003d 0) {\n      minorTickSpaces\u003dunit.getMinorTickCount();\n    }\n    for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n      long minorTickTime\u003dlowestTickTime - distance * minorTick / minorTickSpaces;\n      if (minorTickTime \u003e 0 \u0026\u0026 getRange().contains(minorTickTime) \u0026\u0026 (!isHiddenValue(minorTickTime))) {\n        result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n      }\n    }\n    if (!isHiddenValue(tickDate.getTime())) {\n      String tickLabel;\n      DateFormat formatter\u003dgetDateFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(tickDate);\n      }\n else {\n        tickLabel\u003dthis.tickUnit.dateToString(tickDate);\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        anchor\u003dTextAnchor.CENTER_RIGHT;\n        rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          angle\u003dMath.PI / 2.0;\n        }\n else {\n          angle\u003d-Math.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          anchor\u003dTextAnchor.BOTTOM_CENTER;\n          rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n        }\n else {\n          anchor\u003dTextAnchor.TOP_CENTER;\n          rotationAnchor\u003dTextAnchor.TOP_CENTER;\n        }\n      }\n      Tick tick\u003dnew DateTick(tickDate,tickLabel,anchor,rotationAnchor,angle);\n      result.add(tick);\n      long currentTickTime\u003dtickDate.getTime();\n      tickDate\u003dunit.addToDate(tickDate,this.timeZone);\n      long nextTickTime\u003dtickDate.getTime();\n      for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n        long minorTickTime\u003dcurrentTickTime + (nextTickTime - currentTickTime) * minorTick / minorTickSpaces;\n        if (getRange().contains(minorTickTime) \u0026\u0026 (!isHiddenValue(minorTickTime))) {\n          result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n        }\n      }\n    }\n else {\n      tickDate\u003dunit.rollDate(tickDate,this.timeZone);\n      continue;\n    }\n  }\n  return result;\n}",
    "begin_line": 1600,
    "end_line": 1703,
    "comment": "/** \n * Recalculates the ticks for the date axis.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the data is to be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.refreshTicksVertical#1714",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnew java.util.ArrayList();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  if (isAutoTickUnitSelection()) {\n    selectAutoTickUnit(g2,dataArea,edge);\n  }\n  DateTickUnit unit\u003dgetTickUnit();\n  Date tickDate\u003dcalculateLowestVisibleTickValue(unit);\n  Date upperDate\u003dgetMaximumDate();\n  while (tickDate.before(upperDate)) {\n    tickDate\u003dcorrectTickDateForPosition(tickDate,unit,this.tickMarkPosition);\n    long lowestTickTime\u003dtickDate.getTime();\n    long distance\u003dunit.addToDate(tickDate,this.timeZone).getTime() - lowestTickTime;\n    int minorTickSpaces\u003dgetMinorTickCount();\n    if (minorTickSpaces \u003c\u003d 0) {\n      minorTickSpaces\u003dunit.getMinorTickCount();\n    }\n    for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n      long minorTickTime\u003dlowestTickTime - distance * minorTick / minorTickSpaces;\n      if (minorTickTime \u003e 0 \u0026\u0026 getRange().contains(minorTickTime) \u0026\u0026 (!isHiddenValue(minorTickTime))) {\n        result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n      }\n    }\n    if (!isHiddenValue(tickDate.getTime())) {\n      String tickLabel;\n      DateFormat formatter\u003dgetDateFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(tickDate);\n      }\n else {\n        tickLabel\u003dthis.tickUnit.dateToString(tickDate);\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        anchor\u003dTextAnchor.BOTTOM_CENTER;\n        rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          angle\u003d-Math.PI / 2.0;\n        }\n else {\n          angle\u003dMath.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          anchor\u003dTextAnchor.CENTER_RIGHT;\n          rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        }\n else {\n          anchor\u003dTextAnchor.CENTER_LEFT;\n          rotationAnchor\u003dTextAnchor.CENTER_LEFT;\n        }\n      }\n      Tick tick\u003dnew DateTick(tickDate,tickLabel,anchor,rotationAnchor,angle);\n      result.add(tick);\n      long currentTickTime\u003dtickDate.getTime();\n      tickDate\u003dunit.addToDate(tickDate,this.timeZone);\n      long nextTickTime\u003dtickDate.getTime();\n      for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n        long minorTickTime\u003dcurrentTickTime + (nextTickTime - currentTickTime) * minorTick / minorTickSpaces;\n        if (getRange().contains(minorTickTime) \u0026\u0026 (!isHiddenValue(minorTickTime))) {\n          result.add(new DateTick(TickType.MINOR,new Date(minorTickTime),\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n        }\n      }\n    }\n else {\n      tickDate\u003dunit.rollDate(tickDate,this.timeZone);\n    }\n  }\n  return result;\n}",
    "begin_line": 1714,
    "end_line": 1811,
    "comment": "/** \n * Recalculates the ticks for the date axis.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.draw#1829",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){\n  if (!isVisible()) {\n    AxisState state\u003dnew AxisState(cursor);\n    List ticks\u003drefreshTicks(g2,state,dataArea,edge);\n    state.setTicks(ticks);\n    return state;\n  }\n  AxisState state\u003ddrawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge,plotState);\n  state\u003ddrawLabel(getLabel(),g2,plotArea,dataArea,edge,state,plotState);\n  createAndAddEntity(cursor,state,dataArea,edge,plotState);\n  return state;\n}",
    "begin_line": 1829,
    "end_line": 1854,
    "comment": "/** \n * Draws the axis on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param cursor  the cursor location.\n * @param plotArea  the area within which the axes and data should bedrawn (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the area within which the data should be drawn(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param edge  the location of the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The axis state (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.zoomRange#1862",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.zoomRange(double, double)",
    "snippet": "public void zoomRange(double lowerPercent,double upperPercent){\n  double start\u003dthis.timeline.toTimelineValue((long)getRange().getLowerBound());\n  double length\u003d(this.timeline.toTimelineValue((long)getRange().getUpperBound()) - this.timeline.toTimelineValue((long)getRange().getLowerBound()));\n  Range adjusted\u003dnull;\n  if (isInverted()) {\n    adjusted\u003dnew DateRange(this.timeline.toMillisecond((long)(start + (length * (1 - upperPercent)))),this.timeline.toMillisecond((long)(start + (length * (1 - lowerPercent)))));\n  }\n else {\n    adjusted\u003dnew DateRange(this.timeline.toMillisecond((long)(start + length * lowerPercent)),this.timeline.toMillisecond((long)(start + length * upperPercent)));\n  }\n  setRange(adjusted);\n}",
    "begin_line": 1862,
    "end_line": 1884,
    "comment": "/** \n * Zooms in on the current range.\n * @param lowerPercent  the new lower bound.\n * @param upperPercent  the new upper bound.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.equals#1893",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DateAxis)) {\n    return false;\n  }\n  DateAxis that\u003d(DateAxis)obj;\n  if (!ObjectUtilities.equal(this.tickUnit,that.tickUnit)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.dateFormatOverride,that.dateFormatOverride)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.tickMarkPosition,that.tickMarkPosition)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.timeline,that.timeline)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1893,
    "end_line": 1916,
    "comment": "/** \n * Tests this axis for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.hashCode#1923",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.hashCode()",
    "snippet": "public int hashCode(){\n  if (getLabel() !\u003d null) {\n    return getLabel().hashCode();\n  }\n else {\n    return 0;\n  }\n}",
    "begin_line": 1923,
    "end_line": 1930,
    "comment": "/** \n * Returns a hash code for this object.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultTimeline.clone#1940",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateAxis.java",
    "class_name": "org.jfree.chart.axis.DateAxis",
    "signature": "org.jfree.chart.axis.DateAxis.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DateAxis clone\u003d(DateAxis)super.clone();\n  if (this.dateFormatOverride !\u003d null) {\n    clone.dateFormatOverride\u003d(DateFormat)this.dateFormatOverride.clone();\n  }\n  return clone;\n}",
    "begin_line": 1940,
    "end_line": 1949,
    "comment": "/** \n * Returns a clone of the object.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the axis doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickMarkPosition.DateTickMarkPosition#75",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.DateTickMarkPosition(java.lang.String)",
    "snippet": "private DateTickMarkPosition(String name){\n  this.name\u003dname;\n}",
    "begin_line": 75,
    "end_line": 77,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickMarkPosition.toString#84",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickMarkPosition.equals#96",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof DateTickMarkPosition)) {\n    return false;\n  }\n  DateTickMarkPosition position\u003d(DateTickMarkPosition)obj;\n  if (!this.name.equals(position.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 96,
    "end_line": 110,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickMarkPosition.readResolve#119",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickMarkPosition.java",
    "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
    "signature": "org.jfree.chart.axis.DateTickMarkPosition.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(DateTickMarkPosition.START)) {\n    return DateTickMarkPosition.START;\n  }\n else   if (this.equals(DateTickMarkPosition.MIDDLE)) {\n    return DateTickMarkPosition.MIDDLE;\n  }\n else   if (this.equals(DateTickMarkPosition.END)) {\n    return DateTickMarkPosition.END;\n  }\n  return null;\n}",
    "begin_line": 119,
    "end_line": 130,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.DateTickUnit#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(org.jfree.chart.axis.DateTickUnitType, int)",
    "snippet": "public DateTickUnit(DateTickUnitType unitType,int multiple){\n  this(unitType,multiple,DateFormat.getDateInstance(DateFormat.SHORT));\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Creates a new date tick unit.\n * @param unitType  the unit type (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param multiple  the multiple (of the unit type, must be \u003e 0).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.DateTickUnit#120",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(org.jfree.chart.axis.DateTickUnitType, int, java.text.DateFormat)",
    "snippet": "public DateTickUnit(DateTickUnitType unitType,int multiple,DateFormat formatter){\n  this(unitType,multiple,unitType,multiple,formatter);\n}",
    "begin_line": 120,
    "end_line": 123,
    "comment": "/** \n * Creates a new date tick unit.\n * @param unitType  the unit type (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param multiple  the multiple (of the unit type, must be \u003e 0).\n * @param formatter  the date formatter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.DateTickUnit#136",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(org.jfree.chart.axis.DateTickUnitType, int, org.jfree.chart.axis.DateTickUnitType, int, java.text.DateFormat)",
    "snippet": "public DateTickUnit(DateTickUnitType unitType,int multiple,DateTickUnitType rollUnitType,int rollMultiple,DateFormat formatter){\n  super(DateTickUnit.getMillisecondCount(unitType,multiple));\n  if (formatter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027formatter\u0027 argument.\");\n  }\n  if (multiple \u003c\u003d 0) {\n    throw new IllegalArgumentException(\"Requires \u0027multiple\u0027 \u003e 0.\");\n  }\n  if (rollMultiple \u003c\u003d 0) {\n    throw new IllegalArgumentException(\"Requires \u0027rollMultiple\u0027 \u003e 0.\");\n  }\n  this.unitType\u003dunitType;\n  this.count\u003dmultiple;\n  this.rollUnitType\u003drollUnitType;\n  this.rollCount\u003drollMultiple;\n  this.formatter\u003dformatter;\n}",
    "begin_line": 136,
    "end_line": 154,
    "comment": "/** \n * Creates a new unit.\n * @param unitType  the unit.\n * @param multiple  the multiple.\n * @param rollUnitType  the roll unit.\n * @param rollMultiple  the roll multiple.\n * @param formatter  the date formatter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getUnitType#163",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getUnitType()",
    "snippet": "public DateTickUnitType getUnitType(){\n  return this.unitType;\n}",
    "begin_line": 163,
    "end_line": 165,
    "comment": "/** \n * Returns the unit type.\n * @return The unit type (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getMultiple#172",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getMultiple()",
    "snippet": "public int getMultiple(){\n  return this.count;\n}",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * Returns the unit multiple.\n * @return The unit multiple (always \u003e 0).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getRollUnitType#183",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getRollUnitType()",
    "snippet": "public DateTickUnitType getRollUnitType(){\n  return this.rollUnitType;\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "/** \n * Returns the roll unit type.\n * @return The roll unit type (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getRollMultiple#194",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getRollMultiple()",
    "snippet": "public int getRollMultiple(){\n  return this.rollCount;\n}",
    "begin_line": 194,
    "end_line": 196,
    "comment": "/** \n * Returns the roll unit multiple.\n * @return The roll unit multiple.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.valueToString#205",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.valueToString(double)",
    "snippet": "public String valueToString(double milliseconds){\n  return this.formatter.format(new Date((long)milliseconds));\n}",
    "begin_line": 205,
    "end_line": 207,
    "comment": "/** \n * Formats a value.\n * @param milliseconds  date in milliseconds since 01-01-1970.\n * @return The formatted date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.dateToString#216",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.dateToString(java.util.Date)",
    "snippet": "public String dateToString(Date date){\n  return this.formatter.format(date);\n}",
    "begin_line": 216,
    "end_line": 218,
    "comment": "/** \n * Formats a date using the tick unit\u0027s formatter.\n * @param date  the date.\n * @return The formatted date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.addToDate#230",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date, java.util.TimeZone)",
    "snippet": "public Date addToDate(Date base,TimeZone zone){\n  Calendar calendar\u003dCalendar.getInstance(zone);\n  calendar.setTime(base);\n  calendar.add(this.unitType.getCalendarField(),this.count);\n  return calendar.getTime();\n}",
    "begin_line": 230,
    "end_line": 239,
    "comment": "/** \n * Calculates a new date by adding this unit to the base date.\n * @param base  the base date.\n * @param zone  the time zone for the date calculation.\n * @return A new date one unit after the base date.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.rollDate#251",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.rollDate(java.util.Date)",
    "snippet": "public Date rollDate(Date base){\n  return rollDate(base,TimeZone.getDefault());\n}",
    "begin_line": 251,
    "end_line": 253,
    "comment": "/** \n * Rolls the date forward by the amount specified by the roll unit and count.\n * @param base  the base date.\n * @return The rolled date.\n * @see #rollDate(Date,TimeZone)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.rollDate#266",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.rollDate(java.util.Date, java.util.TimeZone)",
    "snippet": "public Date rollDate(Date base,TimeZone zone){\n  Calendar calendar\u003dCalendar.getInstance(zone);\n  calendar.setTime(base);\n  calendar.add(this.rollUnitType.getCalendarField(),this.rollCount);\n  return calendar.getTime();\n}",
    "begin_line": 266,
    "end_line": 275,
    "comment": "/** \n * Rolls the date forward by the amount specified by the roll unit and count.\n * @param base  the base date.\n * @param zone  the time zone.\n * @return The rolled date.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getCalendarField#283",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getCalendarField()",
    "snippet": "public int getCalendarField(){\n  return this.unitType.getCalendarField();\n}",
    "begin_line": 283,
    "end_line": 285,
    "comment": "/** \n * Returns a field code that can be used with the \u003ccode\u003eCalendar\u003c/code\u003e class.\n * @return The field code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.getMillisecondCount#301",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.getMillisecondCount(org.jfree.chart.axis.DateTickUnitType, int)",
    "snippet": "private static long getMillisecondCount(DateTickUnitType unit,int count){\n  if (unit.equals(DateTickUnitType.YEAR)) {\n    return (365L * 24L * 60L* 60L* 1000L) * count;\n  }\n else   if (unit.equals(DateTickUnitType.MONTH)) {\n    return (31L * 24L * 60L* 60L* 1000L) * count;\n  }\n else   if (unit.equals(DateTickUnitType.DAY)) {\n    return (24L * 60L * 60L* 1000L) * count;\n  }\n else   if (unit.equals(DateTickUnitType.HOUR)) {\n    return (60L * 60L * 1000L) * count;\n  }\n else   if (unit.equals(DateTickUnitType.MINUTE)) {\n    return (60L * 1000L) * count;\n  }\n else   if (unit.equals(DateTickUnitType.SECOND)) {\n    return 1000L * count;\n  }\n else   if (unit.equals(DateTickUnitType.MILLISECOND)) {\n    return count;\n  }\n else {\n    throw new IllegalArgumentException(\"The \u0027unit\u0027 argument has a \" + \"value that is not recognised.\");\n  }\n}",
    "begin_line": 301,
    "end_line": 329,
    "comment": "/** \n * Returns the (approximate) number of milliseconds for the given unit and unit count. \u003cP\u003e This value is an approximation some of the time (e.g. months are assumed to have 31 days) but this shouldn\u0027t matter.\n * @param unit  the unit.\n * @param count  the unit count.\n * @return The number of milliseconds.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.notNull#339",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.notNull(java.text.DateFormat)",
    "snippet": "private static DateFormat notNull(DateFormat formatter){\n  if (formatter \u003d\u003d null) {\n    return DateFormat.getDateInstance(DateFormat.SHORT);\n  }\n else {\n    return formatter;\n  }\n}",
    "begin_line": 339,
    "end_line": 346,
    "comment": "/** \n * A utility method to put a default in place if a null formatter is supplied.\n * @param formatter  the formatter (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The formatter if it is not null, otherwise a default.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.equals#355",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DateTickUnit)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  DateTickUnit that\u003d(DateTickUnit)obj;\n  if (!(this.unitType.equals(that.unitType))) {\n    return false;\n  }\n  if (this.count !\u003d that.count) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.formatter,that.formatter)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 355,
    "end_line": 376,
    "comment": "/** \n * Tests this unit for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.hashCode#383",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d19;\n  result\u003d37 * result + this.unitType.hashCode();\n  result\u003d37 * result + this.count;\n  result\u003d37 * result + this.formatter.hashCode();\n  return result;\n}",
    "begin_line": 383,
    "end_line": 389,
    "comment": "/** \n * Returns a hash code for this object.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnit.toString#397",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnit.java",
    "class_name": "org.jfree.chart.axis.DateTickUnit",
    "signature": "org.jfree.chart.axis.DateTickUnit.toString()",
    "snippet": "public String toString(){\n  return \"DateTickUnit[\" + this.unitType.toString() + \", \"+ this.count+ \"]\";\n}",
    "begin_line": 397,
    "end_line": 400,
    "comment": "/** \n * Returns a string representation of this instance, primarily used for debugging purposes.\n * @return A string representation of this instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnitType.DateTickUnitType#97",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "signature": "org.jfree.chart.axis.DateTickUnitType.DateTickUnitType(java.lang.String, int)",
    "snippet": "private DateTickUnitType(String name,int calendarField){\n  this.name\u003dname;\n  this.calendarField\u003dcalendarField;\n}",
    "begin_line": 97,
    "end_line": 100,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n * @param calendarField  the calendar field.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnitType.getCalendarField#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "signature": "org.jfree.chart.axis.DateTickUnitType.getCalendarField()",
    "snippet": "public int getCalendarField(){\n  return this.calendarField;\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Returns the calendar field.\n * @return The calendar field.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnitType.toString#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "signature": "org.jfree.chart.axis.DateTickUnitType.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnitType.equals#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "signature": "org.jfree.chart.axis.DateTickUnitType.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof DateTickUnitType)) {\n    return false;\n  }\n  DateTickUnitType t\u003d(DateTickUnitType)obj;\n  if (!this.name.equals(t.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 128,
    "end_line": 140,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateTickUnitType.readResolve#149",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/DateTickUnitType.java",
    "class_name": "org.jfree.chart.axis.DateTickUnitType",
    "signature": "org.jfree.chart.axis.DateTickUnitType.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(DateTickUnitType.YEAR)) {\n    return DateTickUnitType.YEAR;\n  }\n else   if (this.equals(DateTickUnitType.MONTH)) {\n    return DateTickUnitType.MONTH;\n  }\n else   if (this.equals(DateTickUnitType.DAY)) {\n    return DateTickUnitType.DAY;\n  }\n else   if (this.equals(DateTickUnitType.HOUR)) {\n    return DateTickUnitType.HOUR;\n  }\n else   if (this.equals(DateTickUnitType.MINUTE)) {\n    return DateTickUnitType.MINUTE;\n  }\n else   if (this.equals(DateTickUnitType.SECOND)) {\n    return DateTickUnitType.SECOND;\n  }\n else   if (this.equals(DateTickUnitType.MILLISECOND)) {\n    return DateTickUnitType.MILLISECOND;\n  }\n  return null;\n}",
    "begin_line": 149,
    "end_line": 172,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.NumberAxis#191",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis()",
    "snippet": "public NumberAxis(){\n  this(null);\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.NumberAxis#200",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis(java.lang.String)",
    "snippet": "public NumberAxis(String label){\n  super(label,NumberAxis.createStandardTickUnits());\n  this.rangeType\u003dRangeType.FULL;\n  this.autoRangeIncludesZero\u003dDEFAULT_AUTO_RANGE_INCLUDES_ZERO;\n  this.autoRangeStickyZero\u003dDEFAULT_AUTO_RANGE_STICKY_ZERO;\n  this.tickUnit\u003dDEFAULT_TICK_UNIT;\n  this.numberFormatOverride\u003dnull;\n  this.markerBand\u003dnull;\n}",
    "begin_line": 200,
    "end_line": 208,
    "comment": "/** \n * Constructs a number axis, using default values where necessary.\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getRangeType#217",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getRangeType()",
    "snippet": "public RangeType getRangeType(){\n  return this.rangeType;\n}",
    "begin_line": 217,
    "end_line": 219,
    "comment": "/** \n * Returns the axis range type.\n * @return The axis range type (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeType(RangeType)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setRangeType#228",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setRangeType(org.jfree.data.RangeType)",
    "snippet": "public void setRangeType(RangeType rangeType){\n  if (rangeType \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rangeType\u0027 argument.\");\n  }\n  this.rangeType\u003drangeType;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 228,
    "end_line": 234,
    "comment": "/** \n * Sets the axis range type.\n * @param rangeType  the range type (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeType()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getAutoRangeIncludesZero#242",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero()",
    "snippet": "public boolean getAutoRangeIncludesZero(){\n  return this.autoRangeIncludesZero;\n}",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Returns the flag that indicates whether or not the automatic axis range (if indeed it is determined automatically) is forced to include zero.\n * @return The flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setAutoRangeIncludesZero#259",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setAutoRangeIncludesZero(boolean)",
    "snippet": "public void setAutoRangeIncludesZero(boolean flag){\n  if (this.autoRangeIncludesZero !\u003d flag) {\n    this.autoRangeIncludesZero\u003dflag;\n    if (isAutoRange()) {\n      autoAdjustRange();\n    }\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 259,
    "end_line": 267,
    "comment": "/** \n * Sets the flag that indicates whether or not the axis range, if automatically calculated, is forced to include zero. \u003cp\u003e If the flag is changed to \u003ccode\u003etrue\u003c/code\u003e, the axis range is recalculated. \u003cp\u003e Any change to the flag will trigger an  {@link AxisChangeEvent}.\n * @param flag  the new value of the flag.\n * @see #getAutoRangeIncludesZero()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getAutoRangeStickyZero#277",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero()",
    "snippet": "public boolean getAutoRangeStickyZero(){\n  return this.autoRangeStickyZero;\n}",
    "begin_line": 277,
    "end_line": 279,
    "comment": "/** \n * Returns a flag that affects the auto-range when zero falls outside the data range but inside the margins defined for the axis.\n * @return The flag.\n * @see #setAutoRangeStickyZero(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setAutoRangeStickyZero#289",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setAutoRangeStickyZero(boolean)",
    "snippet": "public void setAutoRangeStickyZero(boolean flag){\n  if (this.autoRangeStickyZero !\u003d flag) {\n    this.autoRangeStickyZero\u003dflag;\n    if (isAutoRange()) {\n      autoAdjustRange();\n    }\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 289,
    "end_line": 297,
    "comment": "/** \n * Sets a flag that affects the auto-range when zero falls outside the data range but inside the margins defined for the axis.\n * @param flag  the new flag.\n * @see #getAutoRangeStickyZero()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getTickUnit#312",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getTickUnit()",
    "snippet": "public NumberTickUnit getTickUnit(){\n  return this.tickUnit;\n}",
    "begin_line": 312,
    "end_line": 314,
    "comment": "/** \n * Returns the tick unit for the axis. \u003cp\u003e Note: if the \u003ccode\u003eautoTickUnitSelection\u003c/code\u003e flag is \u003ccode\u003etrue\u003c/code\u003e the tick unit may be changed while the axis is being drawn, so in that case the return value from this method may be irrelevant if the method is called before the axis has been drawn.\n * @return The tick unit for the axis.\n * @see #setTickUnit(NumberTickUnit)\n * @see ValueAxis#isAutoTickUnitSelection()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setTickUnit#328",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setTickUnit(org.jfree.chart.axis.NumberTickUnit)",
    "snippet": "public void setTickUnit(NumberTickUnit unit){\n  setTickUnit(unit,true,true);\n}",
    "begin_line": 328,
    "end_line": 331,
    "comment": "/** \n * Sets the tick unit for the axis and sends an  {@link AxisChangeEvent} toall registered listeners.  A side effect of calling this method is that the \"auto-select\" feature for tick units is switched off (you can restore it using the  {@link ValueAxis#setAutoTickUnitSelection(boolean)}method).\n * @param unit  the new tick unit (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getTickUnit()\n * @see #setTickUnit(NumberTickUnit,boolean,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setTickUnit#344",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setTickUnit(org.jfree.chart.axis.NumberTickUnit, boolean, boolean)",
    "snippet": "public void setTickUnit(NumberTickUnit unit,boolean notify,boolean turnOffAutoSelect){\n  if (unit \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027unit\u0027 argument.\");\n  }\n  this.tickUnit\u003dunit;\n  if (turnOffAutoSelect) {\n    setAutoTickUnitSelection(false,false);\n  }\n  if (notify) {\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 344,
    "end_line": 358,
    "comment": "/** \n * Sets the tick unit for the axis and, if requested, sends an {@link AxisChangeEvent} to all registered listeners.  In addition, anoption is provided to turn off the \"auto-select\" feature for tick units (you can restore it using the {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).\n * @param unit  the new tick unit (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @param turnOffAutoSelect  turn off the auto-tick selection?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getNumberFormatOverride#368",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getNumberFormatOverride()",
    "snippet": "public NumberFormat getNumberFormatOverride(){\n  return this.numberFormatOverride;\n}",
    "begin_line": 368,
    "end_line": 370,
    "comment": "/** \n * Returns the number format override.  If this is non-null, then it will be used to format the numbers on the axis.\n * @return The number formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setNumberFormatOverride(NumberFormat)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setNumberFormatOverride#380",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setNumberFormatOverride(java.text.NumberFormat)",
    "snippet": "public void setNumberFormatOverride(NumberFormat formatter){\n  this.numberFormatOverride\u003dformatter;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 380,
    "end_line": 383,
    "comment": "/** \n * Sets the number format override.  If this is non-null, then it will be used to format the numbers on the axis.\n * @param formatter  the number formatter (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getNumberFormatOverride()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.getMarkerBand#392",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.getMarkerBand()",
    "snippet": "public MarkerAxisBand getMarkerBand(){\n  return this.markerBand;\n}",
    "begin_line": 392,
    "end_line": 394,
    "comment": "/** \n * Returns the (optional) marker band for the axis.\n * @return The marker band (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setMarkerBand(MarkerAxisBand)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.setMarkerBand#406",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.setMarkerBand(org.jfree.chart.axis.MarkerAxisBand)",
    "snippet": "public void setMarkerBand(MarkerAxisBand band){\n  this.markerBand\u003dband;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 406,
    "end_line": 409,
    "comment": "/** \n * Sets the marker band for the axis. \u003cP\u003e The marker band is optional, leave it set to \u003ccode\u003enull\u003c/code\u003e if you don\u0027t require it.\n * @param band the new band (\u003ccode\u003enull\u003ccode\u003e permitted).\n * @see #getMarkerBand()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.configure#415",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.configure()",
    "snippet": "public void configure(){\n  if (isAutoRange()) {\n    autoAdjustRange();\n  }\n}",
    "begin_line": 415,
    "end_line": 419,
    "comment": "/** \n * Configures the axis to work with the specified plot.  If the axis has auto-scaling, then sets the maximum and minimum values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.autoAdjustRange#424",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.autoAdjustRange()",
    "snippet": "protected void autoAdjustRange(){\n  Plot plot\u003dgetPlot();\n  if (plot \u003d\u003d null) {\n    return;\n  }\n  if (plot instanceof ValueAxisPlot) {\n    ValueAxisPlot vap\u003d(ValueAxisPlot)plot;\n    Range r\u003dvap.getDataRange(this);\n    if (r \u003d\u003d null) {\n      r\u003dgetDefaultAutoRange();\n    }\n    double upper\u003dr.getUpperBound();\n    double lower\u003dr.getLowerBound();\n    if (this.rangeType \u003d\u003d RangeType.POSITIVE) {\n      lower\u003dMath.max(0.0,lower);\n      upper\u003dMath.max(0.0,upper);\n    }\n else     if (this.rangeType \u003d\u003d RangeType.NEGATIVE) {\n      lower\u003dMath.min(0.0,lower);\n      upper\u003dMath.min(0.0,upper);\n    }\n    if (getAutoRangeIncludesZero()) {\n      lower\u003dMath.min(lower,0.0);\n      upper\u003dMath.max(upper,0.0);\n    }\n    double range\u003dupper - lower;\n    double fixedAutoRange\u003dgetFixedAutoRange();\n    if (fixedAutoRange \u003e 0.0) {\n      lower\u003dupper - fixedAutoRange;\n    }\n else {\n      double minRange\u003dgetAutoRangeMinimumSize();\n      if (range \u003c minRange) {\n        double expand\u003d(minRange - range) / 2;\n        upper\u003dupper + expand;\n        lower\u003dlower - expand;\n        if (lower \u003d\u003d upper) {\n          double adjust\u003dMath.abs(lower) / 10.0;\n          lower\u003dlower - adjust;\n          upper\u003dupper + adjust;\n        }\n        if (this.rangeType \u003d\u003d RangeType.POSITIVE) {\n          if (lower \u003c 0.0) {\n            upper\u003dupper - lower;\n            lower\u003d0.0;\n          }\n        }\n else         if (this.rangeType \u003d\u003d RangeType.NEGATIVE) {\n          if (upper \u003e 0.0) {\n            lower\u003dlower - upper;\n            upper\u003d0.0;\n          }\n        }\n      }\n      if (getAutoRangeStickyZero()) {\n        if (upper \u003c\u003d 0.0) {\n          upper\u003dMath.min(0.0,upper + getUpperMargin() * range);\n        }\n else {\n          upper\u003dupper + getUpperMargin() * range;\n        }\n        if (lower \u003e\u003d 0.0) {\n          lower\u003dMath.max(0.0,lower - getLowerMargin() * range);\n        }\n else {\n          lower\u003dlower - getLowerMargin() * range;\n        }\n      }\n else {\n        upper\u003dupper + getUpperMargin() * range;\n        lower\u003dlower - getLowerMargin() * range;\n      }\n    }\n    setRange(new Range(lower,upper),false,false);\n  }\n}",
    "begin_line": 424,
    "end_line": 510,
    "comment": "/** \n * Rescales the axis to ensure that all data is visible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.valueToJava2D#526",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge){\n  Range range\u003dgetRange();\n  double axisMin\u003drange.getLowerBound();\n  double axisMax\u003drange.getUpperBound();\n  double min\u003d0.0;\n  double max\u003d0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    min\u003darea.getX();\n    max\u003darea.getMaxX();\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    max\u003darea.getMinY();\n    min\u003darea.getMaxY();\n  }\n  if (isInverted()) {\n    return max - ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n  }\n else {\n    return min + ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n  }\n}",
    "begin_line": 526,
    "end_line": 552,
    "comment": "/** \n * Converts a data value to a coordinate in Java2D space, assuming that the axis runs along one edge of the specified dataArea. \u003cp\u003e Note that it is possible for the coordinate to fall outside the plotArea.\n * @param value  the data value.\n * @param area  the area for plotting the data.\n * @param edge  the axis location.\n * @return The Java2D coordinate.\n * @see #java2DToValue(double,Rectangle2D,RectangleEdge)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.java2DToValue#566",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){\n  Range range\u003dgetRange();\n  double axisMin\u003drange.getLowerBound();\n  double axisMax\u003drange.getUpperBound();\n  double min\u003d0.0;\n  double max\u003d0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    min\u003darea.getX();\n    max\u003darea.getMaxX();\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    min\u003darea.getMaxY();\n    max\u003darea.getY();\n  }\n  if (isInverted()) {\n    return axisMax - (java2DValue - min) / (max - min) * (axisMax - axisMin);\n  }\n else {\n    return axisMin + (java2DValue - min) / (max - min) * (axisMax - axisMin);\n  }\n}",
    "begin_line": 566,
    "end_line": 592,
    "comment": "/** \n * Converts a coordinate in Java2D space to the corresponding data value, assuming that the axis runs along one edge of the specified dataArea.\n * @param java2DValue  the coordinate in Java2D space.\n * @param area  the area in which the data is plotted.\n * @param edge  the location.\n * @return The data value.\n * @see #valueToJava2D(double,Rectangle2D,RectangleEdge)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.calculateLowestVisibleTickValue#601",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.calculateLowestVisibleTickValue()",
    "snippet": "protected double calculateLowestVisibleTickValue(){\n  double unit\u003dgetTickUnit().getSize();\n  double index\u003dMath.ceil(getRange().getLowerBound() / unit);\n  return index * unit;\n}",
    "begin_line": 601,
    "end_line": 607,
    "comment": "/** \n * Calculates the value of the lowest visible tick on the axis.\n * @return The value of the lowest visible tick on the axis.\n * @see #calculateHighestVisibleTickValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.calculateHighestVisibleTickValue#616",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.calculateHighestVisibleTickValue()",
    "snippet": "protected double calculateHighestVisibleTickValue(){\n  double unit\u003dgetTickUnit().getSize();\n  double index\u003dMath.floor(getRange().getUpperBound() / unit);\n  return index * unit;\n}",
    "begin_line": 616,
    "end_line": 622,
    "comment": "/** \n * Calculates the value of the highest visible tick on the axis.\n * @return The value of the highest visible tick on the axis.\n * @see #calculateLowestVisibleTickValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.calculateVisibleTickCount#629",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.calculateVisibleTickCount()",
    "snippet": "protected int calculateVisibleTickCount(){\n  double unit\u003dgetTickUnit().getSize();\n  Range range\u003dgetRange();\n  return (int)(Math.floor(range.getUpperBound() / unit) - Math.ceil(range.getLowerBound() / unit) + 1);\n}",
    "begin_line": 629,
    "end_line": 636,
    "comment": "/** \n * Calculates the number of visible ticks.\n * @return The number of visible ticks on the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.draw#654",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){\n  AxisState state\u003dnull;\n  if (!isVisible()) {\n    state\u003dnew AxisState(cursor);\n    List ticks\u003drefreshTicks(g2,state,dataArea,edge);\n    state.setTicks(ticks);\n    return state;\n  }\n  state\u003ddrawTickMarksAndLabels(g2,cursor,plotArea,dataArea,edge,plotState);\n  state\u003ddrawLabel(getLabel(),g2,plotArea,dataArea,edge,state,plotState);\n  createAndAddEntity(cursor,state,dataArea,edge,plotState);\n  return state;\n}",
    "begin_line": 654,
    "end_line": 687,
    "comment": "/** \n * Draws the axis on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param cursor  the cursor location.\n * @param plotArea  the area within which the axes and data should be drawn(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the area within which the data should be drawn(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param edge  the location of the axis (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The axis state (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.createStandardTickUnits#701",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits()",
    "snippet": "public static TickUnitSource createStandardTickUnits(){\n  TickUnits units\u003dnew TickUnits();\n  DecimalFormat df0\u003dnew DecimalFormat(\"0.00000000\");\n  DecimalFormat df1\u003dnew DecimalFormat(\"0.0000000\");\n  DecimalFormat df2\u003dnew DecimalFormat(\"0.000000\");\n  DecimalFormat df3\u003dnew DecimalFormat(\"0.00000\");\n  DecimalFormat df4\u003dnew DecimalFormat(\"0.0000\");\n  DecimalFormat df5\u003dnew DecimalFormat(\"0.000\");\n  DecimalFormat df6\u003dnew DecimalFormat(\"0.00\");\n  DecimalFormat df7\u003dnew DecimalFormat(\"0.0\");\n  DecimalFormat df8\u003dnew DecimalFormat(\"#,##0\");\n  DecimalFormat df9\u003dnew DecimalFormat(\"#,###,##0\");\n  DecimalFormat df10\u003dnew DecimalFormat(\"#,###,###,##0\");\n  units.add(new NumberTickUnit(0.0000001,df1,2));\n  units.add(new NumberTickUnit(0.000001,df2,2));\n  units.add(new NumberTickUnit(0.00001,df3,2));\n  units.add(new NumberTickUnit(0.0001,df4,2));\n  units.add(new NumberTickUnit(0.001,df5,2));\n  units.add(new NumberTickUnit(0.01,df6,2));\n  units.add(new NumberTickUnit(0.1,df7,2));\n  units.add(new NumberTickUnit(1,df8,2));\n  units.add(new NumberTickUnit(10,df8,2));\n  units.add(new NumberTickUnit(100,df8,2));\n  units.add(new NumberTickUnit(1000,df8,2));\n  units.add(new NumberTickUnit(10000,df8,2));\n  units.add(new NumberTickUnit(100000,df8,2));\n  units.add(new NumberTickUnit(1000000,df9,2));\n  units.add(new NumberTickUnit(10000000,df9,2));\n  units.add(new NumberTickUnit(100000000,df9,2));\n  units.add(new NumberTickUnit(1000000000,df10,2));\n  units.add(new NumberTickUnit(10000000000.0,df10,2));\n  units.add(new NumberTickUnit(100000000000.0,df10,2));\n  units.add(new NumberTickUnit(0.00000025,df0,5));\n  units.add(new NumberTickUnit(0.0000025,df1,5));\n  units.add(new NumberTickUnit(0.000025,df2,5));\n  units.add(new NumberTickUnit(0.00025,df3,5));\n  units.add(new NumberTickUnit(0.0025,df4,5));\n  units.add(new NumberTickUnit(0.025,df5,5));\n  units.add(new NumberTickUnit(0.25,df6,5));\n  units.add(new NumberTickUnit(2.5,df7,5));\n  units.add(new NumberTickUnit(25,df8,5));\n  units.add(new NumberTickUnit(250,df8,5));\n  units.add(new NumberTickUnit(2500,df8,5));\n  units.add(new NumberTickUnit(25000,df8,5));\n  units.add(new NumberTickUnit(250000,df8,5));\n  units.add(new NumberTickUnit(2500000,df9,5));\n  units.add(new NumberTickUnit(25000000,df9,5));\n  units.add(new NumberTickUnit(250000000,df9,5));\n  units.add(new NumberTickUnit(2500000000.0,df10,5));\n  units.add(new NumberTickUnit(25000000000.0,df10,5));\n  units.add(new NumberTickUnit(250000000000.0,df10,5));\n  units.add(new NumberTickUnit(0.0000005,df1,5));\n  units.add(new NumberTickUnit(0.000005,df2,5));\n  units.add(new NumberTickUnit(0.00005,df3,5));\n  units.add(new NumberTickUnit(0.0005,df4,5));\n  units.add(new NumberTickUnit(0.005,df5,5));\n  units.add(new NumberTickUnit(0.05,df6,5));\n  units.add(new NumberTickUnit(0.5,df7,5));\n  units.add(new NumberTickUnit(5L,df8,5));\n  units.add(new NumberTickUnit(50L,df8,5));\n  units.add(new NumberTickUnit(500L,df8,5));\n  units.add(new NumberTickUnit(5000L,df8,5));\n  units.add(new NumberTickUnit(50000L,df8,5));\n  units.add(new NumberTickUnit(500000L,df8,5));\n  units.add(new NumberTickUnit(5000000L,df9,5));\n  units.add(new NumberTickUnit(50000000L,df9,5));\n  units.add(new NumberTickUnit(500000000L,df9,5));\n  units.add(new NumberTickUnit(5000000000L,df10,5));\n  units.add(new NumberTickUnit(50000000000L,df10,5));\n  units.add(new NumberTickUnit(500000000000L,df10,5));\n  return units;\n}",
    "begin_line": 701,
    "end_line": 780,
    "comment": "/** \n * Creates the standard tick units. \u003cP\u003e If you don\u0027t like these defaults, create your own instance of TickUnits and then pass it to the setStandardTickUnits() method in the NumberAxis class.\n * @return The standard tick units.\n * @see #setStandardTickUnits(TickUnitSource)\n * @see #createIntegerTickUnits()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.createIntegerTickUnits#790",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.createIntegerTickUnits()",
    "snippet": "public static TickUnitSource createIntegerTickUnits(){\n  TickUnits units\u003dnew TickUnits();\n  DecimalFormat df0\u003dnew DecimalFormat(\"0\");\n  DecimalFormat df1\u003dnew DecimalFormat(\"#,##0\");\n  units.add(new NumberTickUnit(1,df0,2));\n  units.add(new NumberTickUnit(2,df0,2));\n  units.add(new NumberTickUnit(5,df0,5));\n  units.add(new NumberTickUnit(10,df0,2));\n  units.add(new NumberTickUnit(20,df0,2));\n  units.add(new NumberTickUnit(50,df0,5));\n  units.add(new NumberTickUnit(100,df0,2));\n  units.add(new NumberTickUnit(200,df0,2));\n  units.add(new NumberTickUnit(500,df0,5));\n  units.add(new NumberTickUnit(1000,df1,2));\n  units.add(new NumberTickUnit(2000,df1,2));\n  units.add(new NumberTickUnit(5000,df1,5));\n  units.add(new NumberTickUnit(10000,df1,2));\n  units.add(new NumberTickUnit(20000,df1,2));\n  units.add(new NumberTickUnit(50000,df1,5));\n  units.add(new NumberTickUnit(100000,df1,2));\n  units.add(new NumberTickUnit(200000,df1,2));\n  units.add(new NumberTickUnit(500000,df1,5));\n  units.add(new NumberTickUnit(1000000,df1,2));\n  units.add(new NumberTickUnit(2000000,df1,2));\n  units.add(new NumberTickUnit(5000000,df1,5));\n  units.add(new NumberTickUnit(10000000,df1,2));\n  units.add(new NumberTickUnit(20000000,df1,2));\n  units.add(new NumberTickUnit(50000000,df1,5));\n  units.add(new NumberTickUnit(100000000,df1,2));\n  units.add(new NumberTickUnit(200000000,df1,2));\n  units.add(new NumberTickUnit(500000000,df1,5));\n  units.add(new NumberTickUnit(1000000000,df1,2));\n  units.add(new NumberTickUnit(2000000000,df1,2));\n  units.add(new NumberTickUnit(5000000000.0,df1,5));\n  units.add(new NumberTickUnit(10000000000.0,df1,2));\n  return units;\n}",
    "begin_line": 790,
    "end_line": 826,
    "comment": "/** \n * Returns a collection of tick units for integer values.\n * @return A collection of tick units for integer values.\n * @see #setStandardTickUnits(TickUnitSource)\n * @see #createStandardTickUnits()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.createStandardTickUnits#843",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits(java.util.Locale)",
    "snippet": "public static TickUnitSource createStandardTickUnits(Locale locale){\n  TickUnits units\u003dnew TickUnits();\n  NumberFormat numberFormat\u003dNumberFormat.getNumberInstance(locale);\n  units.add(new NumberTickUnit(0.0000001,numberFormat,2));\n  units.add(new NumberTickUnit(0.000001,numberFormat,2));\n  units.add(new NumberTickUnit(0.00001,numberFormat,2));\n  units.add(new NumberTickUnit(0.0001,numberFormat,2));\n  units.add(new NumberTickUnit(0.001,numberFormat,2));\n  units.add(new NumberTickUnit(0.01,numberFormat,2));\n  units.add(new NumberTickUnit(0.1,numberFormat,2));\n  units.add(new NumberTickUnit(1,numberFormat,2));\n  units.add(new NumberTickUnit(10,numberFormat,2));\n  units.add(new NumberTickUnit(100,numberFormat,2));\n  units.add(new NumberTickUnit(1000,numberFormat,2));\n  units.add(new NumberTickUnit(10000,numberFormat,2));\n  units.add(new NumberTickUnit(100000,numberFormat,2));\n  units.add(new NumberTickUnit(1000000,numberFormat,2));\n  units.add(new NumberTickUnit(10000000,numberFormat,2));\n  units.add(new NumberTickUnit(100000000,numberFormat,2));\n  units.add(new NumberTickUnit(1000000000,numberFormat,2));\n  units.add(new NumberTickUnit(10000000000.0,numberFormat,2));\n  units.add(new NumberTickUnit(0.00000025,numberFormat,5));\n  units.add(new NumberTickUnit(0.0000025,numberFormat,5));\n  units.add(new NumberTickUnit(0.000025,numberFormat,5));\n  units.add(new NumberTickUnit(0.00025,numberFormat,5));\n  units.add(new NumberTickUnit(0.0025,numberFormat,5));\n  units.add(new NumberTickUnit(0.025,numberFormat,5));\n  units.add(new NumberTickUnit(0.25,numberFormat,5));\n  units.add(new NumberTickUnit(2.5,numberFormat,5));\n  units.add(new NumberTickUnit(25,numberFormat,5));\n  units.add(new NumberTickUnit(250,numberFormat,5));\n  units.add(new NumberTickUnit(2500,numberFormat,5));\n  units.add(new NumberTickUnit(25000,numberFormat,5));\n  units.add(new NumberTickUnit(250000,numberFormat,5));\n  units.add(new NumberTickUnit(2500000,numberFormat,5));\n  units.add(new NumberTickUnit(25000000,numberFormat,5));\n  units.add(new NumberTickUnit(250000000,numberFormat,5));\n  units.add(new NumberTickUnit(2500000000.0,numberFormat,5));\n  units.add(new NumberTickUnit(25000000000.0,numberFormat,5));\n  units.add(new NumberTickUnit(0.0000005,numberFormat,5));\n  units.add(new NumberTickUnit(0.000005,numberFormat,5));\n  units.add(new NumberTickUnit(0.00005,numberFormat,5));\n  units.add(new NumberTickUnit(0.0005,numberFormat,5));\n  units.add(new NumberTickUnit(0.005,numberFormat,5));\n  units.add(new NumberTickUnit(0.05,numberFormat,5));\n  units.add(new NumberTickUnit(0.5,numberFormat,5));\n  units.add(new NumberTickUnit(5L,numberFormat,5));\n  units.add(new NumberTickUnit(50L,numberFormat,5));\n  units.add(new NumberTickUnit(500L,numberFormat,5));\n  units.add(new NumberTickUnit(5000L,numberFormat,5));\n  units.add(new NumberTickUnit(50000L,numberFormat,5));\n  units.add(new NumberTickUnit(500000L,numberFormat,5));\n  units.add(new NumberTickUnit(5000000L,numberFormat,5));\n  units.add(new NumberTickUnit(50000000L,numberFormat,5));\n  units.add(new NumberTickUnit(500000000L,numberFormat,5));\n  units.add(new NumberTickUnit(5000000000L,numberFormat,5));\n  units.add(new NumberTickUnit(50000000000L,numberFormat,5));\n  return units;\n}",
    "begin_line": 843,
    "end_line": 908,
    "comment": "/** \n * Creates a collection of standard tick units.  The supplied locale is used to create the number formatter (a localised instance of \u003ccode\u003eNumberFormat\u003c/code\u003e). \u003cP\u003e If you don\u0027t like these defaults, create your own instance of {@link TickUnits} and then pass it to the\u003ccode\u003esetStandardTickUnits()\u003c/code\u003e method.\n * @param locale  the locale.\n * @return A tick unit collection.\n * @see #setStandardTickUnits(TickUnitSource)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.createIntegerTickUnits#920",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(java.util.Locale)",
    "snippet": "public static TickUnitSource createIntegerTickUnits(Locale locale){\n  TickUnits units\u003dnew TickUnits();\n  NumberFormat numberFormat\u003dNumberFormat.getNumberInstance(locale);\n  units.add(new NumberTickUnit(1,numberFormat,2));\n  units.add(new NumberTickUnit(2,numberFormat,2));\n  units.add(new NumberTickUnit(5,numberFormat,5));\n  units.add(new NumberTickUnit(10,numberFormat,2));\n  units.add(new NumberTickUnit(20,numberFormat,2));\n  units.add(new NumberTickUnit(50,numberFormat,5));\n  units.add(new NumberTickUnit(100,numberFormat,2));\n  units.add(new NumberTickUnit(200,numberFormat,2));\n  units.add(new NumberTickUnit(500,numberFormat,5));\n  units.add(new NumberTickUnit(1000,numberFormat,2));\n  units.add(new NumberTickUnit(2000,numberFormat,2));\n  units.add(new NumberTickUnit(5000,numberFormat,5));\n  units.add(new NumberTickUnit(10000,numberFormat,2));\n  units.add(new NumberTickUnit(20000,numberFormat,2));\n  units.add(new NumberTickUnit(50000,numberFormat,5));\n  units.add(new NumberTickUnit(100000,numberFormat,2));\n  units.add(new NumberTickUnit(200000,numberFormat,2));\n  units.add(new NumberTickUnit(500000,numberFormat,5));\n  units.add(new NumberTickUnit(1000000,numberFormat,2));\n  units.add(new NumberTickUnit(2000000,numberFormat,2));\n  units.add(new NumberTickUnit(5000000,numberFormat,5));\n  units.add(new NumberTickUnit(10000000,numberFormat,2));\n  units.add(new NumberTickUnit(20000000,numberFormat,2));\n  units.add(new NumberTickUnit(50000000,numberFormat,5));\n  units.add(new NumberTickUnit(100000000,numberFormat,2));\n  units.add(new NumberTickUnit(200000000,numberFormat,2));\n  units.add(new NumberTickUnit(500000000,numberFormat,5));\n  units.add(new NumberTickUnit(1000000000,numberFormat,2));\n  units.add(new NumberTickUnit(2000000000,numberFormat,2));\n  units.add(new NumberTickUnit(5000000000.0,numberFormat,5));\n  units.add(new NumberTickUnit(10000000000.0,numberFormat,2));\n  return units;\n}",
    "begin_line": 920,
    "end_line": 955,
    "comment": "/** \n * Returns a collection of tick units for integer values. Uses a given Locale to create the DecimalFormats.\n * @param locale the locale to use to represent Numbers.\n * @return A collection of tick units for integer values.\n * @see #setStandardTickUnits(TickUnitSource)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.estimateMaximumTickLabelHeight#964",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelHeight(java.awt.Graphics2D)",
    "snippet": "protected double estimateMaximumTickLabelHeight(Graphics2D g2){\n  RectangleInsets tickLabelInsets\u003dgetTickLabelInsets();\n  double result\u003dtickLabelInsets.getTop() + tickLabelInsets.getBottom();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  FontRenderContext frc\u003dg2.getFontRenderContext();\n  result+\u003dtickLabelFont.getLineMetrics(\"123\",frc).getHeight();\n  return result;\n}",
    "begin_line": 964,
    "end_line": 974,
    "comment": "/** \n * Estimates the maximum tick label height.\n * @param g2  the graphics device.\n * @return The maximum height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.estimateMaximumTickLabelWidth#989",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelWidth(java.awt.Graphics2D, org.jfree.chart.axis.TickUnit)",
    "snippet": "protected double estimateMaximumTickLabelWidth(Graphics2D g2,TickUnit unit){\n  RectangleInsets tickLabelInsets\u003dgetTickLabelInsets();\n  double result\u003dtickLabelInsets.getLeft() + tickLabelInsets.getRight();\n  if (isVerticalTickLabels()) {\n    FontRenderContext frc\u003dg2.getFontRenderContext();\n    LineMetrics lm\u003dgetTickLabelFont().getLineMetrics(\"0\",frc);\n    result+\u003dlm.getHeight();\n  }\n else {\n    FontMetrics fm\u003dg2.getFontMetrics(getTickLabelFont());\n    Range range\u003dgetRange();\n    double lower\u003drange.getLowerBound();\n    double upper\u003drange.getUpperBound();\n    String lowerStr\u003d\"\";\n    String upperStr\u003d\"\";\n    NumberFormat formatter\u003dgetNumberFormatOverride();\n    if (formatter !\u003d null) {\n      lowerStr\u003dformatter.format(lower);\n      upperStr\u003dformatter.format(upper);\n    }\n else {\n      lowerStr\u003dunit.valueToString(lower);\n      upperStr\u003dunit.valueToString(upper);\n    }\n    double w1\u003dfm.stringWidth(lowerStr);\n    double w2\u003dfm.stringWidth(upperStr);\n    result+\u003dMath.max(w1,w2);\n  }\n  return result;\n}",
    "begin_line": 989,
    "end_line": 1026,
    "comment": "/** \n * Estimates the maximum width of the tick labels, assuming the specified tick unit is used. \u003cP\u003e Rather than computing the string bounds of every tick on the axis, we just look at two values: the lower bound and the upper bound for the axis.  These two values will usually be representative.\n * @param g2  the graphics device.\n * @param unit  the tick unit to use for calculation.\n * @return The estimated maximum width of the tick labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.selectAutoTickUnit#1037",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    selectHorizontalAutoTickUnit(g2,dataArea,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    selectVerticalAutoTickUnit(g2,dataArea,edge);\n  }\n}",
    "begin_line": 1037,
    "end_line": 1048,
    "comment": "/** \n * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as possible (selected from an array of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area defined by the axes.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.selectHorizontalAutoTickUnit#1059",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.selectHorizontalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectHorizontalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  double tickLabelWidth\u003destimateMaximumTickLabelWidth(g2,getTickUnit());\n  TickUnitSource tickUnits\u003dgetStandardTickUnits();\n  TickUnit unit1\u003dtickUnits.getCeilingTickUnit(getTickUnit());\n  double unit1Width\u003dlengthToJava2D(unit1.getSize(),dataArea,edge);\n  double guess\u003d(tickLabelWidth / unit1Width) * unit1.getSize();\n  NumberTickUnit unit2\u003d(NumberTickUnit)tickUnits.getCeilingTickUnit(guess);\n  double unit2Width\u003dlengthToJava2D(unit2.getSize(),dataArea,edge);\n  tickLabelWidth\u003destimateMaximumTickLabelWidth(g2,unit2);\n  if (tickLabelWidth \u003e unit2Width) {\n    unit2\u003d(NumberTickUnit)tickUnits.getLargerTickUnit(unit2);\n  }\n  setTickUnit(unit2,false,false);\n}",
    "begin_line": 1059,
    "end_line": 1085,
    "comment": "/** \n * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as possible (selected from an array of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area defined by the axes.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.selectVerticalAutoTickUnit#1096",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.selectVerticalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectVerticalAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  double tickLabelHeight\u003destimateMaximumTickLabelHeight(g2);\n  TickUnitSource tickUnits\u003dgetStandardTickUnits();\n  TickUnit unit1\u003dtickUnits.getCeilingTickUnit(getTickUnit());\n  double unitHeight\u003dlengthToJava2D(unit1.getSize(),dataArea,edge);\n  double guess\u003d(tickLabelHeight / unitHeight) * unit1.getSize();\n  NumberTickUnit unit2\u003d(NumberTickUnit)tickUnits.getCeilingTickUnit(guess);\n  double unit2Height\u003dlengthToJava2D(unit2.getSize(),dataArea,edge);\n  tickLabelHeight\u003destimateMaximumTickLabelHeight(g2);\n  if (tickLabelHeight \u003e unit2Height) {\n    unit2\u003d(NumberTickUnit)tickUnits.getLargerTickUnit(unit2);\n  }\n  setTickUnit(unit2,false,false);\n}",
    "begin_line": 1096,
    "end_line": 1121,
    "comment": "/** \n * Selects an appropriate tick value for the axis.  The strategy is to display as many ticks as possible (selected from an array of \u0027standard\u0027 tick units) without the labels overlapping.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the axis location.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.refreshTicks#1135",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnew java.util.ArrayList();\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    result\u003drefreshTicksHorizontal(g2,dataArea,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    result\u003drefreshTicksVertical(g2,dataArea,edge);\n  }\n  return result;\n}",
    "begin_line": 1135,
    "end_line": 1149,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param state  the axis state.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.refreshTicksHorizontal#1161",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnew java.util.ArrayList();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  if (isAutoTickUnitSelection()) {\n    selectAutoTickUnit(g2,dataArea,edge);\n  }\n  TickUnit tu\u003dgetTickUnit();\n  double size\u003dtu.getSize();\n  int count\u003dcalculateVisibleTickCount();\n  double lowestTickValue\u003dcalculateLowestVisibleTickValue();\n  if (count \u003c\u003d ValueAxis.MAXIMUM_TICK_COUNT) {\n    int minorTickSpaces\u003dgetMinorTickCount();\n    if (minorTickSpaces \u003c\u003d 0) {\n      minorTickSpaces\u003dtu.getMinorTickCount();\n    }\n    for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n      double minorTickValue\u003dlowestTickValue - size * minorTick / minorTickSpaces;\n      if (getRange().contains(minorTickValue)) {\n        result.add(new NumberTick(TickType.MINOR,minorTickValue,\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n      }\n    }\n    for (int i\u003d0; i \u003c count; i++) {\n      double currentTickValue\u003dlowestTickValue + (i * size);\n      String tickLabel;\n      NumberFormat formatter\u003dgetNumberFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(currentTickValue);\n      }\n else {\n        tickLabel\u003dgetTickUnit().valueToString(currentTickValue);\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        anchor\u003dTextAnchor.CENTER_RIGHT;\n        rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          angle\u003dMath.PI / 2.0;\n        }\n else {\n          angle\u003d-Math.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          anchor\u003dTextAnchor.BOTTOM_CENTER;\n          rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n        }\n else {\n          anchor\u003dTextAnchor.TOP_CENTER;\n          rotationAnchor\u003dTextAnchor.TOP_CENTER;\n        }\n      }\n      Tick tick\u003dnew NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);\n      result.add(tick);\n      double nextTickValue\u003dlowestTickValue + ((i + 1) * size);\n      for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n        double minorTickValue\u003dcurrentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces;\n        if (getRange().contains(minorTickValue)) {\n          result.add(new NumberTick(TickType.MINOR,minorTickValue,\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 1161,
    "end_line": 1245,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param dataArea  the area in which the data should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.refreshTicksVertical#1257",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List result\u003dnew java.util.ArrayList();\n  result.clear();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  if (isAutoTickUnitSelection()) {\n    selectAutoTickUnit(g2,dataArea,edge);\n  }\n  TickUnit tu\u003dgetTickUnit();\n  double size\u003dtu.getSize();\n  int count\u003dcalculateVisibleTickCount();\n  double lowestTickValue\u003dcalculateLowestVisibleTickValue();\n  if (count \u003c\u003d ValueAxis.MAXIMUM_TICK_COUNT) {\n    int minorTickSpaces\u003dgetMinorTickCount();\n    if (minorTickSpaces \u003c\u003d 0) {\n      minorTickSpaces\u003dtu.getMinorTickCount();\n    }\n    for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n      double minorTickValue\u003dlowestTickValue - size * minorTick / minorTickSpaces;\n      if (getRange().contains(minorTickValue)) {\n        result.add(new NumberTick(TickType.MINOR,minorTickValue,\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n      }\n    }\n    for (int i\u003d0; i \u003c count; i++) {\n      double currentTickValue\u003dlowestTickValue + (i * size);\n      String tickLabel;\n      NumberFormat formatter\u003dgetNumberFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(currentTickValue);\n      }\n else {\n        tickLabel\u003dgetTickUnit().valueToString(currentTickValue);\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          anchor\u003dTextAnchor.BOTTOM_CENTER;\n          rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n          angle\u003d-Math.PI / 2.0;\n        }\n else {\n          anchor\u003dTextAnchor.BOTTOM_CENTER;\n          rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n          angle\u003dMath.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          anchor\u003dTextAnchor.CENTER_RIGHT;\n          rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        }\n else {\n          anchor\u003dTextAnchor.CENTER_LEFT;\n          rotationAnchor\u003dTextAnchor.CENTER_LEFT;\n        }\n      }\n      Tick tick\u003dnew NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);\n      result.add(tick);\n      double nextTickValue\u003dlowestTickValue + ((i + 1) * size);\n      for (int minorTick\u003d1; minorTick \u003c minorTickSpaces; minorTick++) {\n        double minorTickValue\u003dcurrentTickValue + (nextTickValue - currentTickValue) * minorTick / minorTickSpaces;\n        if (getRange().contains(minorTickValue)) {\n          result.add(new NumberTick(TickType.MINOR,minorTickValue,\"\",TextAnchor.TOP_CENTER,TextAnchor.CENTER,0.0));\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 1257,
    "end_line": 1346,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.clone#1356",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  NumberAxis clone\u003d(NumberAxis)super.clone();\n  if (this.numberFormatOverride !\u003d null) {\n    clone.numberFormatOverride\u003d(NumberFormat)this.numberFormatOverride.clone();\n  }\n  return clone;\n}",
    "begin_line": 1356,
    "end_line": 1363,
    "comment": "/** \n * Returns a clone of the axis.\n * @return A clone\n * @throws CloneNotSupportedException if some component of the axis doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.equals#1372",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof NumberAxis)) {\n    return false;\n  }\n  NumberAxis that\u003d(NumberAxis)obj;\n  if (this.autoRangeIncludesZero !\u003d that.autoRangeIncludesZero) {\n    return false;\n  }\n  if (this.autoRangeStickyZero !\u003d that.autoRangeStickyZero) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.tickUnit,that.tickUnit)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.numberFormatOverride,that.numberFormatOverride)) {\n    return false;\n  }\n  if (!this.rangeType.equals(that.rangeType)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1372,
    "end_line": 1397,
    "comment": "/** \n * Tests the axis for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberAxis.hashCode#1404",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberAxis.java",
    "class_name": "org.jfree.chart.axis.NumberAxis",
    "signature": "org.jfree.chart.axis.NumberAxis.hashCode()",
    "snippet": "public int hashCode(){\n  if (getLabel() !\u003d null) {\n    return getLabel().hashCode();\n  }\n else {\n    return 0;\n  }\n}",
    "begin_line": 1404,
    "end_line": 1411,
    "comment": "/** \n * Returns a hash code for this object.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.NumberTickUnit#70",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double)",
    "snippet": "public NumberTickUnit(double size){\n  this(size,NumberFormat.getNumberInstance());\n}",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Creates a new number tick unit.\n * @param size  the size of the tick unit.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.NumberTickUnit#81",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat)",
    "snippet": "public NumberTickUnit(double size,NumberFormat formatter){\n  super(size);\n  if (formatter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027formatter\u0027 argument.\");\n  }\n  this.formatter\u003dformatter;\n}",
    "begin_line": 81,
    "end_line": 87,
    "comment": "/** \n * Creates a new number tick unit.\n * @param size  the size of the tick unit.\n * @param formatter  a number formatter for the tick unit (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.NumberTickUnit#99",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat, int)",
    "snippet": "public NumberTickUnit(double size,NumberFormat formatter,int minorTickCount){\n  super(size,minorTickCount);\n  if (formatter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027formatter\u0027 argument.\");\n  }\n  this.formatter\u003dformatter;\n}",
    "begin_line": 99,
    "end_line": 106,
    "comment": "/** \n * Creates a new number tick unit.\n * @param size  the size of the tick unit.\n * @param formatter  a number formatter for the tick unit (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param minorTickCount  the number of minor ticks.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.valueToString#115",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.valueToString(double)",
    "snippet": "public String valueToString(double value){\n  return this.formatter.format(value);\n}",
    "begin_line": 115,
    "end_line": 117,
    "comment": "/** \n * Converts a value to a string.\n * @param value  the value.\n * @return The formatted string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.equals#126",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof NumberTickUnit)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  NumberTickUnit that\u003d(NumberTickUnit)obj;\n  if (!this.formatter.equals(that.formatter)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 126,
    "end_line": 141,
    "comment": "/** \n * Tests this formatter for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.toString#148",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.toString()",
    "snippet": "public String toString(){\n  return \"[size\u003d\" + this.valueToString(this.getSize()) + \"]\";\n}",
    "begin_line": 148,
    "end_line": 150,
    "comment": "/** \n * Returns a string representing this unit.\n * @return A string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "NumberTickUnit.hashCode#157",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/NumberTickUnit.java",
    "class_name": "org.jfree.chart.axis.NumberTickUnit",
    "signature": "org.jfree.chart.axis.NumberTickUnit.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003dsuper.hashCode();\n  result\u003d29 * result + (this.formatter !\u003d null ? this.formatter.hashCode() : 0);\n  return result;\n}",
    "begin_line": 157,
    "end_line": 162,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.SymbolAxis#156",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.SymbolAxis(java.lang.String, java.lang.String[])",
    "snippet": "public SymbolAxis(String label,String[] sv){\n  super(label);\n  this.symbols\u003dArrays.asList(sv);\n  this.gridBandsVisible\u003dtrue;\n  this.gridBandPaint\u003dDEFAULT_GRID_BAND_PAINT;\n  this.gridBandAlternatePaint\u003dDEFAULT_GRID_BAND_ALTERNATE_PAINT;\n  setAutoTickUnitSelection(false,false);\n  setAutoRangeStickyZero(false);\n}",
    "begin_line": 156,
    "end_line": 165,
    "comment": "/** \n * Constructs a symbol axis, using default attribute values where necessary.\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param sv  the list of symbols to display instead of the numericvalues.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.getSymbols#172",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.getSymbols()",
    "snippet": "public String[] getSymbols(){\n  String[] result\u003dnew String[this.symbols.size()];\n  result\u003d(String[])this.symbols.toArray(result);\n  return result;\n}",
    "begin_line": 172,
    "end_line": 176,
    "comment": "/** \n * Returns an array of the symbols for the axis.\n * @return The symbols.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.isGridBandsVisible#187",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.isGridBandsVisible()",
    "snippet": "public boolean isGridBandsVisible(){\n  return this.gridBandsVisible;\n}",
    "begin_line": 187,
    "end_line": 189,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the grid bands are showing, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the grid bands are showing, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @see #setGridBandsVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.setGridBandsVisible#199",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.setGridBandsVisible(boolean)",
    "snippet": "public void setGridBandsVisible(boolean flag){\n  if (this.gridBandsVisible !\u003d flag) {\n    this.gridBandsVisible\u003dflag;\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 199,
    "end_line": 204,
    "comment": "/** \n * Sets the visibility of the grid bands and notifies registered listeners that the axis has been modified.\n * @param flag  the new setting.\n * @see #isGridBandsVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.getGridBandPaint#214",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.getGridBandPaint()",
    "snippet": "public Paint getGridBandPaint(){\n  return this.gridBandPaint;\n}",
    "begin_line": 214,
    "end_line": 216,
    "comment": "/** \n * Returns the paint used to color the grid bands.\n * @return The grid band paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGridBandPaint(Paint)\n * @see #isGridBandsVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.setGridBandPaint#226",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.setGridBandPaint(java.awt.Paint)",
    "snippet": "public void setGridBandPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.gridBandPaint\u003dpaint;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 226,
    "end_line": 232,
    "comment": "/** \n * Sets the grid band paint and sends an  {@link AxisChangeEvent} toall registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGridBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.getGridBandAlternatePaint#244",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.getGridBandAlternatePaint()",
    "snippet": "public Paint getGridBandAlternatePaint(){\n  return this.gridBandAlternatePaint;\n}",
    "begin_line": 244,
    "end_line": 246,
    "comment": "/** \n * Returns the paint used for alternate grid bands.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGridBandAlternatePaint(Paint)\n * @see #getGridBandPaint()\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.setGridBandAlternatePaint#259",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.setGridBandAlternatePaint(java.awt.Paint)",
    "snippet": "public void setGridBandAlternatePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.gridBandAlternatePaint\u003dpaint;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 259,
    "end_line": 265,
    "comment": "/** \n * Sets the paint used for alternate grid bands and sends a {@link AxisChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGridBandAlternatePaint()\n * @see #setGridBandPaint(Paint)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.selectAutoTickUnit#274",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void selectAutoTickUnit(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  throw new UnsupportedOperationException();\n}",
    "begin_line": 274,
    "end_line": 277,
    "comment": "/** \n * This operation is not supported by this axis.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot and axes should be drawn.\n * @param edge  the edge along which the axis is drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.draw#295",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){\n  AxisState info\u003dnew AxisState(cursor);\n  if (isVisible()) {\n    info\u003dsuper.draw(g2,cursor,plotArea,dataArea,edge,plotState);\n  }\n  if (this.gridBandsVisible) {\n    drawGridBands(g2,plotArea,dataArea,edge,info.getTicks());\n  }\n  return info;\n}",
    "begin_line": 295,
    "end_line": 311,
    "comment": "/** \n * Draws the axis on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param cursor  the cursor location.\n * @param plotArea  the area within which the plot and axes should be drawn(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the area within which the data should be drawn(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param edge  the axis location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The axis state (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.drawGridBands#325",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.drawGridBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, java.util.List)",
    "snippet": "protected void drawGridBands(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,List ticks){\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(dataArea);\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    drawGridBandsHorizontal(g2,plotArea,dataArea,true,ticks);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    drawGridBandsVertical(g2,plotArea,dataArea,true,ticks);\n  }\n  g2.setClip(savedClip);\n}",
    "begin_line": 325,
    "end_line": 341,
    "comment": "/** \n * Draws the grid bands.  Alternate bands are colored using \u003cCODE\u003egridBandPaint\u003cCODE\u003e (\u003cCODE\u003eDEFAULT_GRID_BAND_PAINT\u003c/CODE\u003e by default).\n * @param g2  the graphics device.\n * @param plotArea  the area within which the chart should be drawn.\n * @param dataArea  the area within which the plot should be drawn (asubset of the drawArea).\n * @param edge  the axis location.\n * @param ticks  the ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.drawGridBandsHorizontal#357",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.drawGridBandsHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, boolean, java.util.List)",
    "snippet": "protected void drawGridBandsHorizontal(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,boolean firstGridBandIsDark,List ticks){\n  boolean currentGridBandIsDark\u003dfirstGridBandIsDark;\n  double yy\u003ddataArea.getY();\n  double xx1, xx2;\n  double outlineStrokeWidth;\n  if (getPlot().getOutlineStroke() !\u003d null) {\n    outlineStrokeWidth\u003d((BasicStroke)getPlot().getOutlineStroke()).getLineWidth();\n  }\n else {\n    outlineStrokeWidth\u003d1d;\n  }\n  Iterator iterator\u003dticks.iterator();\n  ValueTick tick;\n  Rectangle2D band;\n  while (iterator.hasNext()) {\n    tick\u003d(ValueTick)iterator.next();\n    xx1\u003dvalueToJava2D(tick.getValue() - 0.5d,dataArea,RectangleEdge.BOTTOM);\n    xx2\u003dvalueToJava2D(tick.getValue() + 0.5d,dataArea,RectangleEdge.BOTTOM);\n    if (currentGridBandIsDark) {\n      g2.setPaint(this.gridBandPaint);\n    }\n else {\n      g2.setPaint(this.gridBandAlternatePaint);\n    }\n    band\u003dnew Rectangle2D.Double(xx1,yy + outlineStrokeWidth,xx2 - xx1,dataArea.getMaxY() - yy - outlineStrokeWidth);\n    g2.fill(band);\n    currentGridBandIsDark\u003d!currentGridBandIsDark;\n  }\n  g2.setPaintMode();\n}",
    "begin_line": 357,
    "end_line": 398,
    "comment": "/** \n * Draws the grid bands for the axis when it is at the top or bottom of the plot.\n * @param g2  the graphics device.\n * @param plotArea  the area within which the chart should be drawn.\n * @param dataArea  the area within which the plot should be drawn(a subset of the drawArea).\n * @param firstGridBandIsDark  True: the first grid band takes thecolor of \u003cCODE\u003egridBandPaint\u003cCODE\u003e. False: the second grid band takes the color of \u003cCODE\u003egridBandPaint\u003cCODE\u003e.\n * @param ticks  the ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.drawGridBandsVertical#414",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.drawGridBandsVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, boolean, java.util.List)",
    "snippet": "protected void drawGridBandsVertical(Graphics2D g2,Rectangle2D drawArea,Rectangle2D plotArea,boolean firstGridBandIsDark,List ticks){\n  boolean currentGridBandIsDark\u003dfirstGridBandIsDark;\n  double xx\u003dplotArea.getX();\n  double yy1, yy2;\n  double outlineStrokeWidth;\n  Stroke outlineStroke\u003dgetPlot().getOutlineStroke();\n  if (outlineStroke !\u003d null \u0026\u0026 outlineStroke instanceof BasicStroke) {\n    outlineStrokeWidth\u003d((BasicStroke)outlineStroke).getLineWidth();\n  }\n else {\n    outlineStrokeWidth\u003d1d;\n  }\n  Iterator iterator\u003dticks.iterator();\n  ValueTick tick;\n  Rectangle2D band;\n  while (iterator.hasNext()) {\n    tick\u003d(ValueTick)iterator.next();\n    yy1\u003dvalueToJava2D(tick.getValue() + 0.5d,plotArea,RectangleEdge.LEFT);\n    yy2\u003dvalueToJava2D(tick.getValue() - 0.5d,plotArea,RectangleEdge.LEFT);\n    if (currentGridBandIsDark) {\n      g2.setPaint(this.gridBandPaint);\n    }\n else {\n      g2.setPaint(this.gridBandAlternatePaint);\n    }\n    band\u003dnew Rectangle2D.Double(xx + outlineStrokeWidth,yy1,plotArea.getMaxX() - xx - outlineStrokeWidth,yy2 - yy1);\n    g2.fill(band);\n    currentGridBandIsDark\u003d!currentGridBandIsDark;\n  }\n  g2.setPaintMode();\n}",
    "begin_line": 414,
    "end_line": 455,
    "comment": "/** \n * Draws the grid bands for the axis when it is at the top or bottom of the plot.\n * @param g2  the graphics device.\n * @param drawArea  the area within which the chart should be drawn.\n * @param plotArea  the area within which the plot should be drawn (asubset of the drawArea).\n * @param firstGridBandIsDark  True: the first grid band takes thecolor of \u003cCODE\u003egridBandPaint\u003cCODE\u003e. False: the second grid band takes the color of \u003cCODE\u003egridBandPaint\u003cCODE\u003e.\n * @param ticks  a list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.autoAdjustRange#460",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.autoAdjustRange()",
    "snippet": "protected void autoAdjustRange(){\n  Plot plot\u003dgetPlot();\n  if (plot \u003d\u003d null) {\n    return;\n  }\n  if (plot instanceof ValueAxisPlot) {\n    double upper\u003dthis.symbols.size() - 1;\n    double lower\u003d0;\n    double range\u003dupper - lower;\n    double minRange\u003dgetAutoRangeMinimumSize();\n    if (range \u003c minRange) {\n      upper\u003d(upper + lower + minRange) / 2;\n      lower\u003d(upper + lower - minRange) / 2;\n    }\n    double upperMargin\u003d0.5;\n    double lowerMargin\u003d0.5;\n    if (getAutoRangeIncludesZero()) {\n      if (getAutoRangeStickyZero()) {\n        if (upper \u003c\u003d 0.0) {\n          upper\u003d0.0;\n        }\n else {\n          upper\u003dupper + upperMargin;\n        }\n        if (lower \u003e\u003d 0.0) {\n          lower\u003d0.0;\n        }\n else {\n          lower\u003dlower - lowerMargin;\n        }\n      }\n else {\n        upper\u003dMath.max(0.0,upper + upperMargin);\n        lower\u003dMath.min(0.0,lower - lowerMargin);\n      }\n    }\n else {\n      if (getAutoRangeStickyZero()) {\n        if (upper \u003c\u003d 0.0) {\n          upper\u003dMath.min(0.0,upper + upperMargin);\n        }\n else {\n          upper\u003dupper + upperMargin * range;\n        }\n        if (lower \u003e\u003d 0.0) {\n          lower\u003dMath.max(0.0,lower - lowerMargin);\n        }\n else {\n          lower\u003dlower - lowerMargin;\n        }\n      }\n else {\n        upper\u003dupper + upperMargin;\n        lower\u003dlower - lowerMargin;\n      }\n    }\n    setRange(new Range(lower,upper),false,false);\n  }\n}",
    "begin_line": 460,
    "end_line": 530,
    "comment": "/** \n * Rescales the axis to ensure that all data is visible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.refreshTicks#543",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){\n  List ticks\u003dnull;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    ticks\u003drefreshTicksHorizontal(g2,dataArea,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    ticks\u003drefreshTicksVertical(g2,dataArea,edge);\n  }\n  return ticks;\n}",
    "begin_line": 543,
    "end_line": 555,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param state  the axis state.\n * @param dataArea  the area in which the data should be drawn.\n * @param edge  the location of the axis.\n * @return A list of ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.refreshTicksHorizontal#567",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List ticks\u003dnew java.util.ArrayList();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  double size\u003dgetTickUnit().getSize();\n  int count\u003dcalculateVisibleTickCount();\n  double lowestTickValue\u003dcalculateLowestVisibleTickValue();\n  double previousDrawnTickLabelPos\u003d0.0;\n  double previousDrawnTickLabelLength\u003d0.0;\n  if (count \u003c\u003d ValueAxis.MAXIMUM_TICK_COUNT) {\n    for (int i\u003d0; i \u003c count; i++) {\n      double currentTickValue\u003dlowestTickValue + (i * size);\n      double xx\u003dvalueToJava2D(currentTickValue,dataArea,edge);\n      String tickLabel;\n      NumberFormat formatter\u003dgetNumberFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(currentTickValue);\n      }\n else {\n        tickLabel\u003dvalueToString(currentTickValue);\n      }\n      Rectangle2D bounds\u003dTextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());\n      double tickLabelLength\u003disVerticalTickLabels() ? bounds.getHeight() : bounds.getWidth();\n      boolean tickLabelsOverlapping\u003dfalse;\n      if (i \u003e 0) {\n        double avgTickLabelLength\u003d(previousDrawnTickLabelLength + tickLabelLength) / 2.0;\n        if (Math.abs(xx - previousDrawnTickLabelPos) \u003c avgTickLabelLength) {\n          tickLabelsOverlapping\u003dtrue;\n        }\n      }\n      if (tickLabelsOverlapping) {\n        tickLabel\u003d\"\";\n      }\n else {\n        previousDrawnTickLabelPos\u003dxx;\n        previousDrawnTickLabelLength\u003dtickLabelLength;\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        anchor\u003dTextAnchor.CENTER_RIGHT;\n        rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          angle\u003dMath.PI / 2.0;\n        }\n else {\n          angle\u003d-Math.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.TOP) {\n          anchor\u003dTextAnchor.BOTTOM_CENTER;\n          rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n        }\n else {\n          anchor\u003dTextAnchor.TOP_CENTER;\n          rotationAnchor\u003dTextAnchor.TOP_CENTER;\n        }\n      }\n      Tick tick\u003dnew NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);\n      ticks.add(tick);\n    }\n  }\n  return ticks;\n}",
    "begin_line": 567,
    "end_line": 649,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param dataArea  the area in which the data should be drawn.\n * @param edge  the location of the axis.\n * @return The ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.refreshTicksVertical#661",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected List refreshTicksVertical(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){\n  List ticks\u003dnew java.util.ArrayList();\n  Font tickLabelFont\u003dgetTickLabelFont();\n  g2.setFont(tickLabelFont);\n  double size\u003dgetTickUnit().getSize();\n  int count\u003dcalculateVisibleTickCount();\n  double lowestTickValue\u003dcalculateLowestVisibleTickValue();\n  double previousDrawnTickLabelPos\u003d0.0;\n  double previousDrawnTickLabelLength\u003d0.0;\n  if (count \u003c\u003d ValueAxis.MAXIMUM_TICK_COUNT) {\n    for (int i\u003d0; i \u003c count; i++) {\n      double currentTickValue\u003dlowestTickValue + (i * size);\n      double yy\u003dvalueToJava2D(currentTickValue,dataArea,edge);\n      String tickLabel;\n      NumberFormat formatter\u003dgetNumberFormatOverride();\n      if (formatter !\u003d null) {\n        tickLabel\u003dformatter.format(currentTickValue);\n      }\n else {\n        tickLabel\u003dvalueToString(currentTickValue);\n      }\n      Rectangle2D bounds\u003dTextUtilities.getTextBounds(tickLabel,g2,g2.getFontMetrics());\n      double tickLabelLength\u003disVerticalTickLabels() ? bounds.getWidth() : bounds.getHeight();\n      boolean tickLabelsOverlapping\u003dfalse;\n      if (i \u003e 0) {\n        double avgTickLabelLength\u003d(previousDrawnTickLabelLength + tickLabelLength) / 2.0;\n        if (Math.abs(yy - previousDrawnTickLabelPos) \u003c avgTickLabelLength) {\n          tickLabelsOverlapping\u003dtrue;\n        }\n      }\n      if (tickLabelsOverlapping) {\n        tickLabel\u003d\"\";\n      }\n else {\n        previousDrawnTickLabelPos\u003dyy;\n        previousDrawnTickLabelLength\u003dtickLabelLength;\n      }\n      TextAnchor anchor\u003dnull;\n      TextAnchor rotationAnchor\u003dnull;\n      double angle\u003d0.0;\n      if (isVerticalTickLabels()) {\n        anchor\u003dTextAnchor.BOTTOM_CENTER;\n        rotationAnchor\u003dTextAnchor.BOTTOM_CENTER;\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          angle\u003d-Math.PI / 2.0;\n        }\n else {\n          angle\u003dMath.PI / 2.0;\n        }\n      }\n else {\n        if (edge \u003d\u003d RectangleEdge.LEFT) {\n          anchor\u003dTextAnchor.CENTER_RIGHT;\n          rotationAnchor\u003dTextAnchor.CENTER_RIGHT;\n        }\n else {\n          anchor\u003dTextAnchor.CENTER_LEFT;\n          rotationAnchor\u003dTextAnchor.CENTER_LEFT;\n        }\n      }\n      Tick tick\u003dnew NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);\n      ticks.add(tick);\n    }\n  }\n  return ticks;\n}",
    "begin_line": 661,
    "end_line": 743,
    "comment": "/** \n * Calculates the positions of the tick labels for the axis, storing the results in the tick label list (ready for drawing).\n * @param g2  the graphics device.\n * @param dataArea  the area in which the plot should be drawn.\n * @param edge  the location of the axis.\n * @return The ticks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.valueToString#752",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.valueToString(double)",
    "snippet": "public String valueToString(double value){\n  String strToReturn;\n  try {\n    strToReturn\u003d(String)this.symbols.get((int)value);\n  }\n catch (  IndexOutOfBoundsException ex) {\n    strToReturn\u003d\"\";\n  }\n  return strToReturn;\n}",
    "begin_line": 752,
    "end_line": 761,
    "comment": "/** \n * Converts a value to a string, using the list of symbols.\n * @param value  value to convert.\n * @return The symbol.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.equals#770",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof SymbolAxis)) {\n    return false;\n  }\n  SymbolAxis that\u003d(SymbolAxis)obj;\n  if (!this.symbols.equals(that.symbols)) {\n    return false;\n  }\n  if (this.gridBandsVisible !\u003d that.gridBandsVisible) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.gridBandPaint,that.gridBandPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.gridBandAlternatePaint,that.gridBandAlternatePaint)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 770,
    "end_line": 792,
    "comment": "/** \n * Tests this axis for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.writeObject#801",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.gridBandPaint,stream);\n  SerialUtilities.writePaint(this.gridBandAlternatePaint,stream);\n}",
    "begin_line": 801,
    "end_line": 805,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SymbolAxis.readObject#815",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/SymbolAxis.java",
    "class_name": "org.jfree.chart.axis.SymbolAxis",
    "signature": "org.jfree.chart.axis.SymbolAxis.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.gridBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.gridBandAlternatePaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 815,
    "end_line": 820,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.TickUnit#83",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double)",
    "snippet": "public TickUnit(double size){\n  this.size\u003dsize;\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Constructs a new tick unit.\n * @param size  the tick unit size.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.TickUnit#95",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double, int)",
    "snippet": "public TickUnit(double size,int minorTickCount){\n  this.size\u003dsize;\n  this.minorTickCount\u003dminorTickCount;\n}",
    "begin_line": 95,
    "end_line": 98,
    "comment": "/** \n * Constructs a new tick unit.\n * @param size  the tick unit size.\n * @param minorTickCount  the minor tick count.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.getSize#105",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.getSize()",
    "snippet": "public double getSize(){\n  return this.size;\n}",
    "begin_line": 105,
    "end_line": 107,
    "comment": "/** \n * Returns the size of the tick unit.\n * @return The size of the tick unit.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.getMinorTickCount#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.getMinorTickCount()",
    "snippet": "public int getMinorTickCount(){\n  return this.minorTickCount;\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Returns the minor tick count.\n * @return The minor tick count.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.valueToString#129",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.valueToString(double)",
    "snippet": "public String valueToString(double value){\n  return String.valueOf(value);\n}",
    "begin_line": 129,
    "end_line": 131,
    "comment": "/** \n * Converts the supplied value to a string. \u003cP\u003e Subclasses may implement special formatting by overriding this method.\n * @param value  the data value.\n * @return Value as string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.compareTo#142",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.compareTo(java.lang.Object)",
    "snippet": "public int compareTo(Object object){\n  if (object instanceof TickUnit) {\n    TickUnit other\u003d(TickUnit)object;\n    if (this.size \u003e other.getSize()) {\n      return 1;\n    }\n else     if (this.size \u003c other.getSize()) {\n      return -1;\n    }\n else {\n      return 0;\n    }\n  }\n else {\n    return -1;\n  }\n}",
    "begin_line": 142,
    "end_line": 160,
    "comment": "/** \n * Compares this tick unit to an arbitrary object.\n * @param object  the object to compare against.\n * @return \u003ccode\u003e1\u003c/code\u003e if the size of the other object is less than this,\u003ccode\u003e0\u003c/code\u003e if both have the same size and \u003ccode\u003e-1\u003c/code\u003e this size is less than the others.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.equals#169",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof TickUnit)) {\n    return false;\n  }\n  TickUnit that\u003d(TickUnit)obj;\n  if (this.size !\u003d that.size) {\n    return false;\n  }\n  if (this.minorTickCount !\u003d that.minorTickCount) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 169,
    "end_line": 184,
    "comment": "/** \n * Tests this unit for equality with another object.\n * @param obj  the object.\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnit.hashCode#191",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnit.java",
    "class_name": "org.jfree.chart.axis.TickUnit",
    "signature": "org.jfree.chart.axis.TickUnit.hashCode()",
    "snippet": "public int hashCode(){\n  long temp\u003dthis.size !\u003d +0.0d ? Double.doubleToLongBits(this.size) : 0L;\n  return (int)(temp ^ (temp \u003e\u003e\u003e 32));\n}",
    "begin_line": 191,
    "end_line": 195,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.TickUnits#79",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.TickUnits()",
    "snippet": "public TickUnits(){\n  this.tickUnits\u003dnew ArrayList();\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Constructs a new collection of tick units.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.add#89",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.add(org.jfree.chart.axis.TickUnit)",
    "snippet": "public void add(TickUnit unit){\n  if (unit \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027unit\u0027 argument.\");\n  }\n  this.tickUnits.add(unit);\n  Collections.sort(this.tickUnits);\n}",
    "begin_line": 89,
    "end_line": 95,
    "comment": "/** \n * Adds a tick unit to the collection.  The tick units are maintained in ascending order.\n * @param unit  the tick unit to add (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.size#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.size()",
    "snippet": "public int size(){\n  return this.tickUnits.size();\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Returns the number of tick units in this collection. \u003cP\u003e This method is required for the XML writer.\n * @return The number of units in this collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.get#117",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.get(int)",
    "snippet": "public TickUnit get(int pos){\n  return (TickUnit)this.tickUnits.get(pos);\n}",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Returns the tickunit on the given position. \u003cP\u003e This method is required for the XML writer.\n * @param pos the position in the list.\n * @return The tickunit.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.getLargerTickUnit#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.getLargerTickUnit(org.jfree.chart.axis.TickUnit)",
    "snippet": "public TickUnit getLargerTickUnit(TickUnit unit){\n  int index\u003dCollections.binarySearch(this.tickUnits,unit);\n  if (index \u003e\u003d 0) {\n    index\u003dindex + 1;\n  }\n else {\n    index\u003d-index;\n  }\n  return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size() - 1));\n}",
    "begin_line": 128,
    "end_line": 141,
    "comment": "/** \n * Returns a tick unit that is larger than the supplied unit.\n * @param unit   the unit.\n * @return A tick unit that is larger than the supplied unit.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.getCeilingTickUnit#151",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(org.jfree.chart.axis.TickUnit)",
    "snippet": "public TickUnit getCeilingTickUnit(TickUnit unit){\n  int index\u003dCollections.binarySearch(this.tickUnits,unit);\n  if (index \u003e\u003d 0) {\n    return (TickUnit)this.tickUnits.get(index);\n  }\n else {\n    index\u003d-(index + 1);\n    return (TickUnit)this.tickUnits.get(Math.min(index,this.tickUnits.size() - 1));\n  }\n}",
    "begin_line": 151,
    "end_line": 163,
    "comment": "/** \n * Returns the tick unit in the collection that is greater than or equal to (in size) the specified unit.\n * @param unit  the unit.\n * @return A unit from the collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.getCeilingTickUnit#173",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(double)",
    "snippet": "public TickUnit getCeilingTickUnit(double size){\n  return getCeilingTickUnit(new NumberTickUnit(size,NumberFormat.getInstance()));\n}",
    "begin_line": 173,
    "end_line": 176,
    "comment": "/** \n * Returns the tick unit in the collection that is greater than or equal to the specified size.\n * @param size  the size.\n * @return A unit from the collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.clone#186",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  TickUnits clone\u003d(TickUnits)super.clone();\n  clone.tickUnits\u003dnew java.util.ArrayList(this.tickUnits);\n  return clone;\n}",
    "begin_line": 186,
    "end_line": 190,
    "comment": "/** \n * Returns a clone of the collection.\n * @return A clone.\n * @throws CloneNotSupportedException if an item in the collection does notsupport cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TickUnits.equals#199",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/TickUnits.java",
    "class_name": "org.jfree.chart.axis.TickUnits",
    "signature": "org.jfree.chart.axis.TickUnits.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof TickUnits)) {\n    return false;\n  }\n  TickUnits that\u003d(TickUnits)obj;\n  return that.tickUnits.equals(this.tickUnits);\n}",
    "begin_line": 199,
    "end_line": 208,
    "comment": "/** \n * Tests an object for equality with this instance.\n * @param obj  the object to test (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.ValueAxis#275",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.ValueAxis(java.lang.String, org.jfree.chart.axis.TickUnitSource)",
    "snippet": "protected ValueAxis(String label,TickUnitSource standardTickUnits){\n  super(label);\n  this.positiveArrowVisible\u003dfalse;\n  this.negativeArrowVisible\u003dfalse;\n  this.range\u003dDEFAULT_RANGE;\n  this.autoRange\u003dDEFAULT_AUTO_RANGE;\n  this.defaultAutoRange\u003dDEFAULT_RANGE;\n  this.inverted\u003dDEFAULT_INVERTED;\n  this.autoRangeMinimumSize\u003dDEFAULT_AUTO_RANGE_MINIMUM_SIZE;\n  this.lowerMargin\u003dDEFAULT_LOWER_MARGIN;\n  this.upperMargin\u003dDEFAULT_UPPER_MARGIN;\n  this.fixedAutoRange\u003d0.0;\n  this.autoTickUnitSelection\u003dDEFAULT_AUTO_TICK_UNIT_SELECTION;\n  this.standardTickUnits\u003dstandardTickUnits;\n  Polygon p1\u003dnew Polygon();\n  p1.addPoint(0,0);\n  p1.addPoint(-2,2);\n  p1.addPoint(2,2);\n  this.upArrow\u003dp1;\n  Polygon p2\u003dnew Polygon();\n  p2.addPoint(0,0);\n  p2.addPoint(-2,-2);\n  p2.addPoint(2,-2);\n  this.downArrow\u003dp2;\n  Polygon p3\u003dnew Polygon();\n  p3.addPoint(0,0);\n  p3.addPoint(-2,-2);\n  p3.addPoint(-2,2);\n  this.rightArrow\u003dp3;\n  Polygon p4\u003dnew Polygon();\n  p4.addPoint(0,0);\n  p4.addPoint(2,-2);\n  p4.addPoint(2,2);\n  this.leftArrow\u003dp4;\n  this.verticalTickLabels\u003dfalse;\n  this.minorTickCount\u003d0;\n}",
    "begin_line": 275,
    "end_line": 328,
    "comment": "/** \n * Constructs a value axis.\n * @param label  the axis label (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param standardTickUnits  the source for standard tick units(\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isVerticalTickLabels#338",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isVerticalTickLabels()",
    "snippet": "public boolean isVerticalTickLabels(){\n  return this.verticalTickLabels;\n}",
    "begin_line": 338,
    "end_line": 340,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the tick labels should be rotated (to vertical), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @see #setVerticalTickLabels(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setVerticalTickLabels#352",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setVerticalTickLabels(boolean)",
    "snippet": "public void setVerticalTickLabels(boolean flag){\n  if (this.verticalTickLabels !\u003d flag) {\n    this.verticalTickLabels\u003dflag;\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 352,
    "end_line": 357,
    "comment": "/** \n * Sets the flag that controls whether the tick labels are displayed vertically (that is, rotated 90 degrees from horizontal).  If the flag is changed, an  {@link AxisChangeEvent} is sent to all registeredlisteners.\n * @param flag  the flag.\n * @see #isVerticalTickLabels()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isPositiveArrowVisible#367",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isPositiveArrowVisible()",
    "snippet": "public boolean isPositiveArrowVisible(){\n  return this.positiveArrowVisible;\n}",
    "begin_line": 367,
    "end_line": 369,
    "comment": "/** \n * Returns a flag that controls whether or not the axis line has an arrow drawn that points in the positive direction for the axis.\n * @return A boolean.\n * @see #setPositiveArrowVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setPositiveArrowVisible#380",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setPositiveArrowVisible(boolean)",
    "snippet": "public void setPositiveArrowVisible(boolean visible){\n  this.positiveArrowVisible\u003dvisible;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 380,
    "end_line": 383,
    "comment": "/** \n * Sets a flag that controls whether or not the axis lines has an arrow drawn that points in the positive direction for the axis, and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @see #isPositiveArrowVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isNegativeArrowVisible#393",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isNegativeArrowVisible()",
    "snippet": "public boolean isNegativeArrowVisible(){\n  return this.negativeArrowVisible;\n}",
    "begin_line": 393,
    "end_line": 395,
    "comment": "/** \n * Returns a flag that controls whether or not the axis line has an arrow drawn that points in the negative direction for the axis.\n * @return A boolean.\n * @see #setNegativeArrowVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setNegativeArrowVisible#406",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setNegativeArrowVisible(boolean)",
    "snippet": "public void setNegativeArrowVisible(boolean visible){\n  this.negativeArrowVisible\u003dvisible;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 406,
    "end_line": 409,
    "comment": "/** \n * Sets a flag that controls whether or not the axis lines has an arrow drawn that points in the negative direction for the axis, and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @see #setNegativeArrowVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getUpArrow#419",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getUpArrow()",
    "snippet": "public Shape getUpArrow(){\n  return this.upArrow;\n}",
    "begin_line": 419,
    "end_line": 421,
    "comment": "/** \n * Returns a shape that can be displayed as an arrow pointing upwards at the end of an axis line.\n * @return A shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setUpArrow(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setUpArrow#432",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setUpArrow(java.awt.Shape)",
    "snippet": "public void setUpArrow(Shape arrow){\n  if (arrow \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrow\u0027 argument.\");\n  }\n  this.upArrow\u003darrow;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 432,
    "end_line": 438,
    "comment": "/** \n * Sets the shape that can be displayed as an arrow pointing upwards at the end of an axis line and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param arrow  the arrow shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getUpArrow()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getDownArrow#448",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getDownArrow()",
    "snippet": "public Shape getDownArrow(){\n  return this.downArrow;\n}",
    "begin_line": 448,
    "end_line": 450,
    "comment": "/** \n * Returns a shape that can be displayed as an arrow pointing downwards at the end of an axis line.\n * @return A shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDownArrow(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setDownArrow#461",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setDownArrow(java.awt.Shape)",
    "snippet": "public void setDownArrow(Shape arrow){\n  if (arrow \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrow\u0027 argument.\");\n  }\n  this.downArrow\u003darrow;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 461,
    "end_line": 467,
    "comment": "/** \n * Sets the shape that can be displayed as an arrow pointing downwards at the end of an axis line and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param arrow  the arrow shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDownArrow()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getLeftArrow#477",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getLeftArrow()",
    "snippet": "public Shape getLeftArrow(){\n  return this.leftArrow;\n}",
    "begin_line": 477,
    "end_line": 479,
    "comment": "/** \n * Returns a shape that can be displayed as an arrow pointing left at the end of an axis line.\n * @return A shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLeftArrow(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setLeftArrow#490",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setLeftArrow(java.awt.Shape)",
    "snippet": "public void setLeftArrow(Shape arrow){\n  if (arrow \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrow\u0027 argument.\");\n  }\n  this.leftArrow\u003darrow;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 490,
    "end_line": 496,
    "comment": "/** \n * Sets the shape that can be displayed as an arrow pointing left at the end of an axis line and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param arrow  the arrow shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLeftArrow()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getRightArrow#506",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getRightArrow()",
    "snippet": "public Shape getRightArrow(){\n  return this.rightArrow;\n}",
    "begin_line": 506,
    "end_line": 508,
    "comment": "/** \n * Returns a shape that can be displayed as an arrow pointing right at the end of an axis line.\n * @return A shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRightArrow(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRightArrow#519",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRightArrow(java.awt.Shape)",
    "snippet": "public void setRightArrow(Shape arrow){\n  if (arrow \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrow\u0027 argument.\");\n  }\n  this.rightArrow\u003darrow;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 519,
    "end_line": 525,
    "comment": "/** \n * Sets the shape that can be displayed as an arrow pointing rightwards at the end of an axis line and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param arrow  the arrow shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRightArrow()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.drawAxisLine#535",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected void drawAxisLine(Graphics2D g2,double cursor,Rectangle2D dataArea,RectangleEdge edge){\n  Line2D axisLine\u003dnull;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    axisLine\u003dnew Line2D.Double(dataArea.getX(),cursor,dataArea.getMaxX(),cursor);\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    axisLine\u003dnew Line2D.Double(dataArea.getX(),cursor,dataArea.getMaxX(),cursor);\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    axisLine\u003dnew Line2D.Double(cursor,dataArea.getY(),cursor,dataArea.getMaxY());\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    axisLine\u003dnew Line2D.Double(cursor,dataArea.getY(),cursor,dataArea.getMaxY());\n  }\n  g2.setPaint(getAxisLinePaint());\n  g2.setStroke(getAxisLineStroke());\n  g2.draw(axisLine);\n  boolean drawUpOrRight\u003dfalse;\n  boolean drawDownOrLeft\u003dfalse;\n  if (this.positiveArrowVisible) {\n    if (this.inverted) {\n      drawDownOrLeft\u003dtrue;\n    }\n else {\n      drawUpOrRight\u003dtrue;\n    }\n  }\n  if (this.negativeArrowVisible) {\n    if (this.inverted) {\n      drawUpOrRight\u003dtrue;\n    }\n else {\n      drawDownOrLeft\u003dtrue;\n    }\n  }\n  if (drawUpOrRight) {\n    double x\u003d0.0;\n    double y\u003d0.0;\n    Shape arrow\u003dnull;\n    if (edge \u003d\u003d RectangleEdge.TOP || edge \u003d\u003d RectangleEdge.BOTTOM) {\n      x\u003ddataArea.getMaxX();\n      y\u003dcursor;\n      arrow\u003dthis.rightArrow;\n    }\n else     if (edge \u003d\u003d RectangleEdge.LEFT || edge \u003d\u003d RectangleEdge.RIGHT) {\n      x\u003dcursor;\n      y\u003ddataArea.getMinY();\n      arrow\u003dthis.upArrow;\n    }\n    AffineTransform transformer\u003dnew AffineTransform();\n    transformer.setToTranslation(x,y);\n    Shape shape\u003dtransformer.createTransformedShape(arrow);\n    g2.fill(shape);\n    g2.draw(shape);\n  }\n  if (drawDownOrLeft) {\n    double x\u003d0.0;\n    double y\u003d0.0;\n    Shape arrow\u003dnull;\n    if (edge \u003d\u003d RectangleEdge.TOP || edge \u003d\u003d RectangleEdge.BOTTOM) {\n      x\u003ddataArea.getMinX();\n      y\u003dcursor;\n      arrow\u003dthis.leftArrow;\n    }\n else     if (edge \u003d\u003d RectangleEdge.LEFT || edge \u003d\u003d RectangleEdge.RIGHT) {\n      x\u003dcursor;\n      y\u003ddataArea.getMaxY();\n      arrow\u003dthis.downArrow;\n    }\n    AffineTransform transformer\u003dnew AffineTransform();\n    transformer.setToTranslation(x,y);\n    Shape shape\u003dtransformer.createTransformedShape(arrow);\n    g2.fill(shape);\n    g2.draw(shape);\n  }\n}",
    "begin_line": 535,
    "end_line": 624,
    "comment": "/** \n * Draws an axis line at the current cursor position and edge.\n * @param g2  the graphics device.\n * @param cursor  the cursor position.\n * @param dataArea  the data area.\n * @param edge  the edge.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.calculateAnchorPoint#636",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.calculateAnchorPoint(org.jfree.chart.axis.ValueTick, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected float[] calculateAnchorPoint(ValueTick tick,double cursor,Rectangle2D dataArea,RectangleEdge edge){\n  RectangleInsets insets\u003dgetTickLabelInsets();\n  float[] result\u003dnew float[2];\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    result[0]\u003d(float)valueToJava2D(tick.getValue(),dataArea,edge);\n    result[1]\u003d(float)(cursor - insets.getBottom() - 2.0);\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    result[0]\u003d(float)valueToJava2D(tick.getValue(),dataArea,edge);\n    result[1]\u003d(float)(cursor + insets.getTop() + 2.0);\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    result[0]\u003d(float)(cursor - insets.getLeft() - 2.0);\n    result[1]\u003d(float)valueToJava2D(tick.getValue(),dataArea,edge);\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    result[0]\u003d(float)(cursor + insets.getRight() + 2.0);\n    result[1]\u003d(float)valueToJava2D(tick.getValue(),dataArea,edge);\n  }\n  return result;\n}",
    "begin_line": 636,
    "end_line": 660,
    "comment": "/** \n * Calculates the anchor point for a tick label.\n * @param tick  the tick.\n * @param cursor  the cursor.\n * @param dataArea  the data area.\n * @param edge  the edge on which the axis is drawn.\n * @return The x and y coordinates of the anchor point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.drawTickMarksAndLabels#674",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.drawTickMarksAndLabels(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "protected AxisState drawTickMarksAndLabels(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo info){\n  AxisState state\u003dnew AxisState(cursor);\n  if (isAxisLineVisible()) {\n    drawAxisLine(g2,cursor,dataArea,edge);\n  }\n  List ticks\u003drefreshTicks(g2,state,dataArea,edge);\n  state.setTicks(ticks);\n  g2.setFont(getTickLabelFont());\n  Iterator iterator\u003dticks.iterator();\n  while (iterator.hasNext()) {\n    ValueTick tick\u003d(ValueTick)iterator.next();\n    if (isTickLabelsVisible()) {\n      g2.setPaint(getTickLabelPaint());\n      float[] anchorPoint\u003dcalculateAnchorPoint(tick,cursor,dataArea,edge);\n      TextUtilities.drawRotatedString(tick.getText(),g2,anchorPoint[0],anchorPoint[1],tick.getTextAnchor(),tick.getAngle(),tick.getRotationAnchor());\n    }\n    if ((isTickMarksVisible() \u0026\u0026 tick.getTickType().equals(TickType.MAJOR)) || (isMinorTickMarksVisible() \u0026\u0026 tick.getTickType().equals(TickType.MINOR))) {\n      double ol\u003d(tick.getTickType().equals(TickType.MINOR)) ? getMinorTickMarkOutsideLength() : getTickMarkOutsideLength();\n      double il\u003d(tick.getTickType().equals(TickType.MINOR)) ? getMinorTickMarkInsideLength() : getTickMarkInsideLength();\n      float xx\u003d(float)valueToJava2D(tick.getValue(),dataArea,edge);\n      Line2D mark\u003dnull;\n      g2.setStroke(getTickMarkStroke());\n      g2.setPaint(getTickMarkPaint());\n      if (edge \u003d\u003d RectangleEdge.LEFT) {\n        mark\u003dnew Line2D.Double(cursor - ol,xx,cursor + il,xx);\n      }\n else       if (edge \u003d\u003d RectangleEdge.RIGHT) {\n        mark\u003dnew Line2D.Double(cursor + ol,xx,cursor - il,xx);\n      }\n else       if (edge \u003d\u003d RectangleEdge.TOP) {\n        mark\u003dnew Line2D.Double(xx,cursor - ol,xx,cursor + il);\n      }\n else       if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n        mark\u003dnew Line2D.Double(xx,cursor + ol,xx,cursor - il);\n      }\n      g2.draw(mark);\n    }\n  }\n  double used\u003d0.0;\n  if (isTickLabelsVisible()) {\n    if (edge \u003d\u003d RectangleEdge.LEFT) {\n      used+\u003dfindMaximumTickLabelWidth(ticks,g2,plotArea,isVerticalTickLabels());\n      state.cursorLeft(used);\n    }\n else     if (edge \u003d\u003d RectangleEdge.RIGHT) {\n      used\u003dfindMaximumTickLabelWidth(ticks,g2,plotArea,isVerticalTickLabels());\n      state.cursorRight(used);\n    }\n else     if (edge \u003d\u003d RectangleEdge.TOP) {\n      used\u003dfindMaximumTickLabelHeight(ticks,g2,plotArea,isVerticalTickLabels());\n      state.cursorUp(used);\n    }\n else     if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n      used\u003dfindMaximumTickLabelHeight(ticks,g2,plotArea,isVerticalTickLabels());\n      state.cursorDown(used);\n    }\n  }\n  return state;\n}",
    "begin_line": 674,
    "end_line": 757,
    "comment": "/** \n * Draws the axis line, tick marks and tick mark labels.\n * @param g2  the graphics device.\n * @param cursor  the cursor.\n * @param plotArea  the plot area.\n * @param dataArea  the data area.\n * @param edge  the edge that the axis is aligned with.\n * @param info  the plot rendering info.\n * @return The width or height used to draw the axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.reserveSpace#771",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
    "snippet": "public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (!isVisible()) {\n    return space;\n  }\n  double dimension\u003dgetFixedDimension();\n  if (dimension \u003e 0.0) {\n    space.ensureAtLeast(dimension,edge);\n  }\n  double tickLabelHeight\u003d0.0;\n  double tickLabelWidth\u003d0.0;\n  if (isTickLabelsVisible()) {\n    g2.setFont(getTickLabelFont());\n    List ticks\u003drefreshTicks(g2,new AxisState(),plotArea,edge);\n    if (RectangleEdge.isTopOrBottom(edge)) {\n      tickLabelHeight\u003dfindMaximumTickLabelHeight(ticks,g2,plotArea,isVerticalTickLabels());\n    }\n else     if (RectangleEdge.isLeftOrRight(edge)) {\n      tickLabelWidth\u003dfindMaximumTickLabelWidth(ticks,g2,plotArea,isVerticalTickLabels());\n    }\n  }\n  Rectangle2D labelEnclosure\u003dgetLabelEnclosure(g2,edge);\n  double labelHeight\u003d0.0;\n  double labelWidth\u003d0.0;\n  if (RectangleEdge.isTopOrBottom(edge)) {\n    labelHeight\u003dlabelEnclosure.getHeight();\n    space.add(labelHeight + tickLabelHeight,edge);\n  }\n else   if (RectangleEdge.isLeftOrRight(edge)) {\n    labelWidth\u003dlabelEnclosure.getWidth();\n    space.add(labelWidth + tickLabelWidth,edge);\n  }\n  return space;\n}",
    "begin_line": 771,
    "end_line": 822,
    "comment": "/** \n * Returns the space required to draw the axis.\n * @param g2  the graphics device.\n * @param plot  the plot that the axis belongs to.\n * @param plotArea  the area within which the plot should be drawn.\n * @param edge  the axis location.\n * @param space  the space already reserved (for other axes).\n * @return The space required to draw the axis (including pre-reservedspace).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.findMaximumTickLabelHeight#835",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelHeight(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
    "snippet": "protected double findMaximumTickLabelHeight(List ticks,Graphics2D g2,Rectangle2D drawArea,boolean vertical){\n  RectangleInsets insets\u003dgetTickLabelInsets();\n  Font font\u003dgetTickLabelFont();\n  double maxHeight\u003d0.0;\n  if (vertical) {\n    FontMetrics fm\u003dg2.getFontMetrics(font);\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      Tick tick\u003d(Tick)iterator.next();\n      Rectangle2D labelBounds\u003dTextUtilities.getTextBounds(tick.getText(),g2,fm);\n      if (labelBounds.getWidth() + insets.getTop() + insets.getBottom() \u003e maxHeight) {\n        maxHeight\u003dlabelBounds.getWidth() + insets.getTop() + insets.getBottom();\n      }\n    }\n  }\n else {\n    LineMetrics metrics\u003dfont.getLineMetrics(\"ABCxyz\",g2.getFontRenderContext());\n    maxHeight\u003dmetrics.getHeight() + insets.getTop() + insets.getBottom();\n  }\n  return maxHeight;\n}",
    "begin_line": 835,
    "end_line": 865,
    "comment": "/** \n * A utility method for determining the height of the tallest tick label.\n * @param ticks  the ticks.\n * @param g2  the graphics device.\n * @param drawArea  the area within which the plot and axes should be drawn.\n * @param vertical  a flag that indicates whether or not the tick labelsare \u0027vertical\u0027.\n * @return The height of the tallest tick label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.findMaximumTickLabelWidth#878",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelWidth(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
    "snippet": "protected double findMaximumTickLabelWidth(List ticks,Graphics2D g2,Rectangle2D drawArea,boolean vertical){\n  RectangleInsets insets\u003dgetTickLabelInsets();\n  Font font\u003dgetTickLabelFont();\n  double maxWidth\u003d0.0;\n  if (!vertical) {\n    FontMetrics fm\u003dg2.getFontMetrics(font);\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      Tick tick\u003d(Tick)iterator.next();\n      Rectangle2D labelBounds\u003dTextUtilities.getTextBounds(tick.getText(),g2,fm);\n      if (labelBounds.getWidth() + insets.getLeft() + insets.getRight() \u003e maxWidth) {\n        maxWidth\u003dlabelBounds.getWidth() + insets.getLeft() + insets.getRight();\n      }\n    }\n  }\n else {\n    LineMetrics metrics\u003dfont.getLineMetrics(\"ABCxyz\",g2.getFontRenderContext());\n    maxWidth\u003dmetrics.getHeight() + insets.getTop() + insets.getBottom();\n  }\n  return maxWidth;\n}",
    "begin_line": 878,
    "end_line": 908,
    "comment": "/** \n * A utility method for determining the width of the widest tick label.\n * @param ticks  the ticks.\n * @param g2  the graphics device.\n * @param drawArea  the area within which the plot and axes should be drawn.\n * @param vertical  a flag that indicates whether or not the tick labelsare \u0027vertical\u0027.\n * @return The width of the tallest tick label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isInverted#921",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isInverted()",
    "snippet": "public boolean isInverted(){\n  return this.inverted;\n}",
    "begin_line": 921,
    "end_line": 923,
    "comment": "/** \n * Returns a flag that controls the direction of values on the axis. \u003cP\u003e For a regular axis, values increase from left to right (for a horizontal axis) and bottom to top (for a vertical axis).  When the axis is \u0027inverted\u0027, the values increase in the opposite direction.\n * @return The flag.\n * @see #setInverted(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setInverted#933",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setInverted(boolean)",
    "snippet": "public void setInverted(boolean flag){\n  if (this.inverted !\u003d flag) {\n    this.inverted\u003dflag;\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 933,
    "end_line": 940,
    "comment": "/** \n * Sets a flag that controls the direction of values on the axis, and notifies registered listeners that the axis has changed.\n * @param flag  the flag.\n * @see #isInverted()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isAutoRange#950",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isAutoRange()",
    "snippet": "public boolean isAutoRange(){\n  return this.autoRange;\n}",
    "begin_line": 950,
    "end_line": 952,
    "comment": "/** \n * Returns the flag that controls whether or not the axis range is automatically adjusted to fit the data values.\n * @return The flag.\n * @see #setAutoRange(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoRange#963",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoRange(boolean)",
    "snippet": "public void setAutoRange(boolean auto){\n  setAutoRange(auto,true);\n}",
    "begin_line": 963,
    "end_line": 965,
    "comment": "/** \n * Sets a flag that determines whether or not the axis range is automatically adjusted to fit the data, and notifies registered listeners that the axis has been modified.\n * @param auto  the new value of the flag.\n * @see #isAutoRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoRange#976",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoRange(boolean, boolean)",
    "snippet": "protected void setAutoRange(boolean auto,boolean notify){\n  if (this.autoRange !\u003d auto) {\n    this.autoRange\u003dauto;\n    if (this.autoRange) {\n      autoAdjustRange();\n    }\n    if (notify) {\n      notifyListeners(new AxisChangeEvent(this));\n    }\n  }\n}",
    "begin_line": 976,
    "end_line": 986,
    "comment": "/** \n * Sets the auto range attribute.  If the \u003ccode\u003enotify\u003c/code\u003e flag is set, an  {@link AxisChangeEvent} is sent to registered listeners.\n * @param auto  the flag.\n * @param notify  notify listeners?\n * @see #isAutoRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getAutoRangeMinimumSize#996",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize()",
    "snippet": "public double getAutoRangeMinimumSize(){\n  return this.autoRangeMinimumSize;\n}",
    "begin_line": 996,
    "end_line": 998,
    "comment": "/** \n * Returns the minimum size allowed for the axis range when it is automatically calculated.\n * @return The minimum range.\n * @see #setAutoRangeMinimumSize(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoRangeMinimumSize#1008",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double)",
    "snippet": "public void setAutoRangeMinimumSize(double size){\n  setAutoRangeMinimumSize(size,true);\n}",
    "begin_line": 1008,
    "end_line": 1010,
    "comment": "/** \n * Sets the auto range minimum size and sends an  {@link AxisChangeEvent}to all registered listeners.\n * @param size  the size.\n * @see #getAutoRangeMinimumSize()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoRangeMinimumSize#1022",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double, boolean)",
    "snippet": "public void setAutoRangeMinimumSize(double size,boolean notify){\n  if (size \u003c\u003d 0.0) {\n    throw new IllegalArgumentException(\"NumberAxis.setAutoRangeMinimumSize(double): must be \u003e 0.0.\");\n  }\n  if (this.autoRangeMinimumSize !\u003d size) {\n    this.autoRangeMinimumSize\u003dsize;\n    if (this.autoRange) {\n      autoAdjustRange();\n    }\n    if (notify) {\n      notifyListeners(new AxisChangeEvent(this));\n    }\n  }\n}",
    "begin_line": 1022,
    "end_line": 1037,
    "comment": "/** \n * Sets the minimum size allowed for the axis range when it is automatically calculated. \u003cp\u003e If requested, an  {@link AxisChangeEvent} is forwarded to all registeredlisteners.\n * @param size  the new minimum.\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getDefaultAutoRange#1048",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getDefaultAutoRange()",
    "snippet": "public Range getDefaultAutoRange(){\n  return this.defaultAutoRange;\n}",
    "begin_line": 1048,
    "end_line": 1050,
    "comment": "/** \n * Returns the default auto range.\n * @return The default auto range (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDefaultAutoRange(Range)\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setDefaultAutoRange#1062",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setDefaultAutoRange(org.jfree.data.Range)",
    "snippet": "public void setDefaultAutoRange(Range range){\n  if (range \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027range\u0027 argument.\");\n  }\n  this.defaultAutoRange\u003drange;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1062,
    "end_line": 1068,
    "comment": "/** \n * Sets the default auto range and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDefaultAutoRange()\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getLowerMargin#1080",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getLowerMargin()",
    "snippet": "public double getLowerMargin(){\n  return this.lowerMargin;\n}",
    "begin_line": 1080,
    "end_line": 1082,
    "comment": "/** \n * Returns the lower margin for the axis, expressed as a percentage of the axis range.  This controls the space added to the lower end of the axis when the axis range is automatically calculated (it is ignored when the axis range is set explicitly). The default value is 0.05 (five percent).\n * @return The lower margin.\n * @see #setLowerMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setLowerMargin#1095",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setLowerMargin(double)",
    "snippet": "public void setLowerMargin(double margin){\n  this.lowerMargin\u003dmargin;\n  if (isAutoRange()) {\n    autoAdjustRange();\n  }\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1095,
    "end_line": 1101,
    "comment": "/** \n * Sets the lower margin for the axis (as a percentage of the axis range) and sends an  {@link AxisChangeEvent} to all registered listeners.  Thismargin is added only when the axis range is auto-calculated - if you set the axis range manually, the margin is ignored.\n * @param margin  the margin percentage (for example, 0.05 is five percent).\n * @see #getLowerMargin()\n * @see #setUpperMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getUpperMargin#1113",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getUpperMargin()",
    "snippet": "public double getUpperMargin(){\n  return this.upperMargin;\n}",
    "begin_line": 1113,
    "end_line": 1115,
    "comment": "/** \n * Returns the upper margin for the axis, expressed as a percentage of the axis range.  This controls the space added to the lower end of the axis when the axis range is automatically calculated (it is ignored when the axis range is set explicitly). The default value is 0.05 (five percent).\n * @return The upper margin.\n * @see #setUpperMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setUpperMargin#1128",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setUpperMargin(double)",
    "snippet": "public void setUpperMargin(double margin){\n  this.upperMargin\u003dmargin;\n  if (isAutoRange()) {\n    autoAdjustRange();\n  }\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1128,
    "end_line": 1134,
    "comment": "/** \n * Sets the upper margin for the axis (as a percentage of the axis range) and sends an  {@link AxisChangeEvent} to all registered listeners.  Thismargin is added only when the axis range is auto-calculated - if you set the axis range manually, the margin is ignored.\n * @param margin  the margin percentage (for example, 0.05 is five percent).\n * @see #getLowerMargin()\n * @see #setLowerMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getFixedAutoRange#1143",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getFixedAutoRange()",
    "snippet": "public double getFixedAutoRange(){\n  return this.fixedAutoRange;\n}",
    "begin_line": 1143,
    "end_line": 1145,
    "comment": "/** \n * Returns the fixed auto range.\n * @return The length.\n * @see #setFixedAutoRange(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setFixedAutoRange#1154",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setFixedAutoRange(double)",
    "snippet": "public void setFixedAutoRange(double length){\n  this.fixedAutoRange\u003dlength;\n  if (isAutoRange()) {\n    autoAdjustRange();\n  }\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1154,
    "end_line": 1160,
    "comment": "/** \n * Sets the fixed auto range for the axis.\n * @param length  the range length.\n * @see #getFixedAutoRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getLowerBound#1169",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getLowerBound()",
    "snippet": "public double getLowerBound(){\n  return this.range.getLowerBound();\n}",
    "begin_line": 1169,
    "end_line": 1171,
    "comment": "/** \n * Returns the lower bound of the axis range.\n * @return The lower bound.\n * @see #setLowerBound(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setLowerBound#1181",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setLowerBound(double)",
    "snippet": "public void setLowerBound(double min){\n  if (this.range.getUpperBound() \u003e min) {\n    setRange(new Range(min,this.range.getUpperBound()));\n  }\n else {\n    setRange(new Range(min,min + 1.0));\n  }\n}",
    "begin_line": 1181,
    "end_line": 1188,
    "comment": "/** \n * Sets the lower bound for the axis range.  An  {@link AxisChangeEvent} issent to all registered listeners.\n * @param min  the new minimum.\n * @see #getLowerBound()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getUpperBound#1197",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getUpperBound()",
    "snippet": "public double getUpperBound(){\n  return this.range.getUpperBound();\n}",
    "begin_line": 1197,
    "end_line": 1199,
    "comment": "/** \n * Returns the upper bound for the axis range.\n * @return The upper bound.\n * @see #setUpperBound(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setUpperBound#1209",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setUpperBound(double)",
    "snippet": "public void setUpperBound(double max){\n  if (this.range.getLowerBound() \u003c max) {\n    setRange(new Range(this.range.getLowerBound(),max));\n  }\n else {\n    setRange(max - 1.0,max);\n  }\n}",
    "begin_line": 1209,
    "end_line": 1216,
    "comment": "/** \n * Sets the upper bound for the axis range, and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param max  the new maximum.\n * @see #getUpperBound()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getRange#1225",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getRange()",
    "snippet": "public Range getRange(){\n  return this.range;\n}",
    "begin_line": 1225,
    "end_line": 1227,
    "comment": "/** \n * Returns the range for the axis.\n * @return The axis range (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRange(Range)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRange#1238",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range)",
    "snippet": "public void setRange(Range range){\n  setRange(range,true,true);\n}",
    "begin_line": 1238,
    "end_line": 1241,
    "comment": "/** \n * Sets the range attribute and sends an  {@link AxisChangeEvent} to allregistered listeners.  As a side-effect, the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e.\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRange#1256",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range, boolean, boolean)",
    "snippet": "public void setRange(Range range,boolean turnOffAutoRange,boolean notify){\n  if (range \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027range\u0027 argument.\");\n  }\n  if (turnOffAutoRange) {\n    this.autoRange\u003dfalse;\n  }\n  this.range\u003drange;\n  if (notify) {\n    notifyListeners(new AxisChangeEvent(this));\n  }\n}",
    "begin_line": 1256,
    "end_line": 1268,
    "comment": "/** \n * Sets the range for the axis, if requested, sends an {@link AxisChangeEvent} to all registered listeners.  As a side-effect,the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e (optional).\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param turnOffAutoRange  a flag that controls whether or not the autorange is turned off.\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRange#1281",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRange(double, double)",
    "snippet": "public void setRange(double lower,double upper){\n  setRange(new Range(lower,upper));\n}",
    "begin_line": 1281,
    "end_line": 1283,
    "comment": "/** \n * Sets the axis range and sends an  {@link AxisChangeEvent} to allregistered listeners.  As a side-effect, the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e.\n * @param lower  the lower axis limit.\n * @param upper  the upper axis limit.\n * @see #getRange()\n * @see #setRange(Range)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRangeWithMargins#1292",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRangeWithMargins(org.jfree.data.Range)",
    "snippet": "public void setRangeWithMargins(Range range){\n  setRangeWithMargins(range,true,true);\n}",
    "begin_line": 1292,
    "end_line": 1294,
    "comment": "/** \n * Sets the range for the axis (after first adding the current margins to the specified range) and sends an  {@link AxisChangeEvent} to allregistered listeners.\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRangeWithMargins#1309",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRangeWithMargins(org.jfree.data.Range, boolean, boolean)",
    "snippet": "public void setRangeWithMargins(Range range,boolean turnOffAutoRange,boolean notify){\n  if (range \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027range\u0027 argument.\");\n  }\n  setRange(Range.expand(range,getLowerMargin(),getUpperMargin()),turnOffAutoRange,notify);\n}",
    "begin_line": 1309,
    "end_line": 1316,
    "comment": "/** \n * Sets the range for the axis after first adding the current margins to the range and, if requested, sends an  {@link AxisChangeEvent} to allregistered listeners.  As a side-effect, the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e (optional).\n * @param range  the range (excluding margins, \u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param turnOffAutoRange  a flag that controls whether or not the autorange is turned off.\n * @param notify  a flag that controls whether or not listeners arenotified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRangeWithMargins#1326",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRangeWithMargins(double, double)",
    "snippet": "public void setRangeWithMargins(double lower,double upper){\n  setRangeWithMargins(new Range(lower,upper));\n}",
    "begin_line": 1326,
    "end_line": 1328,
    "comment": "/** \n * Sets the axis range (after first adding the current margins to the range) and sends an  {@link AxisChangeEvent} to all registered listeners.As a side-effect, the auto-range flag is set to \u003ccode\u003efalse\u003c/code\u003e.\n * @param lower  the lower axis limit.\n * @param upper  the upper axis limit.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setRangeAboutValue#1337",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setRangeAboutValue(double, double)",
    "snippet": "public void setRangeAboutValue(double value,double length){\n  setRange(new Range(value - length / 2,value + length / 2));\n}",
    "begin_line": 1337,
    "end_line": 1339,
    "comment": "/** \n * Sets the axis range, where the new range is \u0027size\u0027 in length, and centered on \u0027value\u0027.\n * @param value  the central value.\n * @param length  the range length.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.isAutoTickUnitSelection#1350",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.isAutoTickUnitSelection()",
    "snippet": "public boolean isAutoTickUnitSelection(){\n  return this.autoTickUnitSelection;\n}",
    "begin_line": 1350,
    "end_line": 1352,
    "comment": "/** \n * Returns a flag indicating whether or not the tick unit is automatically selected from a range of standard tick units.\n * @return A flag indicating whether or not the tick unit is automaticallyselected.\n * @see #setAutoTickUnitSelection(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoTickUnitSelection#1363",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoTickUnitSelection(boolean)",
    "snippet": "public void setAutoTickUnitSelection(boolean flag){\n  setAutoTickUnitSelection(flag,true);\n}",
    "begin_line": 1363,
    "end_line": 1365,
    "comment": "/** \n * Sets a flag indicating whether or not the tick unit is automatically selected from a range of standard tick units.  If the flag is changed, registered listeners are notified that the chart has changed.\n * @param flag  the new value of the flag.\n * @see #isAutoTickUnitSelection()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoTickUnitSelection#1376",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoTickUnitSelection(boolean, boolean)",
    "snippet": "public void setAutoTickUnitSelection(boolean flag,boolean notify){\n  if (this.autoTickUnitSelection !\u003d flag) {\n    this.autoTickUnitSelection\u003dflag;\n    if (notify) {\n      notifyListeners(new AxisChangeEvent(this));\n    }\n  }\n}",
    "begin_line": 1376,
    "end_line": 1384,
    "comment": "/** \n * Sets a flag indicating whether or not the tick unit is automatically selected from a range of standard tick units.\n * @param flag  the new value of the flag.\n * @param notify  notify listeners?\n * @see #isAutoTickUnitSelection()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getStandardTickUnits#1393",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getStandardTickUnits()",
    "snippet": "public TickUnitSource getStandardTickUnits(){\n  return this.standardTickUnits;\n}",
    "begin_line": 1393,
    "end_line": 1395,
    "comment": "/** \n * Returns the source for obtaining standard tick units for the axis.\n * @return The source (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setStandardTickUnits(TickUnitSource)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setStandardTickUnits#1409",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setStandardTickUnits(org.jfree.chart.axis.TickUnitSource)",
    "snippet": "public void setStandardTickUnits(TickUnitSource source){\n  this.standardTickUnits\u003dsource;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1409,
    "end_line": 1412,
    "comment": "/** \n * Sets the source for obtaining standard tick units for the axis and sends an  {@link AxisChangeEvent} to all registered listeners.  The axis willtry to select the smallest tick unit from the source that does not cause the tick labels to overlap (see also the {@link #setAutoTickUnitSelection(boolean)} method.\n * @param source  the source for standard tick units (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @see #getStandardTickUnits()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getMinorTickCount#1423",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getMinorTickCount()",
    "snippet": "public int getMinorTickCount(){\n  return this.minorTickCount;\n}",
    "begin_line": 1423,
    "end_line": 1425,
    "comment": "/** \n * Returns the number of minor tick marks to display.\n * @return The number of minor tick marks to display.\n * @see #setMinorTickCount(int)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setMinorTickCount#1437",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setMinorTickCount(int)",
    "snippet": "public void setMinorTickCount(int count){\n  this.minorTickCount\u003dcount;\n  notifyListeners(new AxisChangeEvent(this));\n}",
    "begin_line": 1437,
    "end_line": 1440,
    "comment": "/** \n * Sets the number of minor tick marks to display, and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param count  the count.\n * @see #getMinorTickCount()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.valueToJava2D#1456",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public abstract double valueToJava2D(double value,Rectangle2D area,RectangleEdge edge);",
    "begin_line": 1456,
    "end_line": 1457,
    "comment": "/** \n * Converts a data value to a coordinate in Java2D space, assuming that the axis runs along one edge of the specified dataArea. \u003cp\u003e Note that it is possible for the coordinate to fall outside the area.\n * @param value  the data value.\n * @param area  the area for plotting the data.\n * @param edge  the edge along which the axis lies.\n * @return The Java2D coordinate.\n * @see #java2DToValue(double,Rectangle2D,RectangleEdge)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.lengthToJava2D#1469",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.lengthToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public double lengthToJava2D(double length,Rectangle2D area,RectangleEdge edge){\n  double zero\u003dvalueToJava2D(0.0,area,edge);\n  double l\u003dvalueToJava2D(length,area,edge);\n  return Math.abs(l - zero);\n}",
    "begin_line": 1469,
    "end_line": 1474,
    "comment": "/** \n * Converts a length in data coordinates into the corresponding length in Java2D coordinates.\n * @param length  the length.\n * @param area  the plot area.\n * @param edge  the edge along which the axis lies.\n * @return The length in Java2D coordinates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.java2DToValue#1488",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public abstract double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge);",
    "begin_line": 1488,
    "end_line": 1490,
    "comment": "/** \n * Converts a coordinate in Java2D space to the corresponding data value, assuming that the axis runs along one edge of the specified dataArea.\n * @param java2DValue  the coordinate in Java2D space.\n * @param area  the area in which the data is plotted.\n * @param edge  the edge along which the axis lies.\n * @return The data value.\n * @see #valueToJava2D(double,Rectangle2D,RectangleEdge)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.autoAdjustRange#1498",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.autoAdjustRange()",
    "snippet": "protected abstract void autoAdjustRange();",
    "begin_line": 1498,
    "end_line": 1498,
    "comment": "/** \n * Automatically sets the axis range to fit the range of values in the dataset.  Sometimes this can depend on the renderer used as well (for example, the renderer may \"stack\" values, requiring an axis range greater than otherwise necessary).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.centerRange#1506",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.centerRange(double)",
    "snippet": "public void centerRange(double value){\n  double central\u003dthis.range.getCentralValue();\n  Range adjusted\u003dnew Range(this.range.getLowerBound() + value - central,this.range.getUpperBound() + value - central);\n  setRange(adjusted);\n}",
    "begin_line": 1506,
    "end_line": 1513,
    "comment": "/** \n * Centers the axis range about the specified value and sends an {@link AxisChangeEvent} to all registered listeners.\n * @param value  the center value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.resizeRange#1527",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.resizeRange(double)",
    "snippet": "public void resizeRange(double percent){\n  resizeRange(percent,this.range.getCentralValue());\n}",
    "begin_line": 1527,
    "end_line": 1529,
    "comment": "/** \n * Increases or decreases the axis range by the specified percentage about the central value and sends an  {@link AxisChangeEvent} to all registeredlisteners. \u003cP\u003e To double the length of the axis range, use 200% (2.0). To halve the length of the axis range, use 50% (0.5).\n * @param percent  the resize factor.\n * @see #resizeRange(double,double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.resizeRange#1544",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.resizeRange(double, double)",
    "snippet": "public void resizeRange(double percent,double anchorValue){\n  if (percent \u003e 0.0) {\n    double halfLength\u003dthis.range.getLength() * percent / 2;\n    Range adjusted\u003dnew Range(anchorValue - halfLength,anchorValue + halfLength);\n    setRange(adjusted);\n  }\n else {\n    setAutoRange(true);\n  }\n}",
    "begin_line": 1544,
    "end_line": 1554,
    "comment": "/** \n * Increases or decreases the axis range by the specified percentage about the specified anchor value and sends an  {@link AxisChangeEvent} to allregistered listeners. \u003cP\u003e To double the length of the axis range, use 200% (2.0). To halve the length of the axis range, use 50% (0.5).\n * @param percent  the resize factor.\n * @param anchorValue  the new central value after the resize.\n * @see #resizeRange(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.resizeRange2#1571",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.resizeRange2(double, double)",
    "snippet": "public void resizeRange2(double percent,double anchorValue){\n  if (percent \u003e 0.0) {\n    double left\u003danchorValue - getLowerBound();\n    double right\u003dgetUpperBound() - anchorValue;\n    Range adjusted\u003dnew Range(anchorValue - left * percent,anchorValue + right * percent);\n    setRange(adjusted);\n  }\n else {\n    setAutoRange(true);\n  }\n}",
    "begin_line": 1571,
    "end_line": 1582,
    "comment": "/** \n * Increases or decreases the axis range by the specified percentage about the specified anchor value and sends an  {@link AxisChangeEvent} to allregistered listeners. \u003cP\u003e To double the length of the axis range, use 200% (2.0). To halve the length of the axis range, use 50% (0.5).\n * @param percent  the resize factor.\n * @param anchorValue  the new central value after the resize.\n * @see #resizeRange(double)\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.zoomRange#1590",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.zoomRange(double, double)",
    "snippet": "public void zoomRange(double lowerPercent,double upperPercent){\n  double start\u003dthis.range.getLowerBound();\n  double length\u003dthis.range.getLength();\n  Range adjusted\u003dnull;\n  if (isInverted()) {\n    adjusted\u003dnew Range(start + (length * (1 - upperPercent)),start + (length * (1 - lowerPercent)));\n  }\n else {\n    adjusted\u003dnew Range(start + length * lowerPercent,start + length * upperPercent);\n  }\n  setRange(adjusted);\n}",
    "begin_line": 1590,
    "end_line": 1603,
    "comment": "/** \n * Zooms in on the current range.\n * @param lowerPercent  the new lower bound.\n * @param upperPercent  the new upper bound.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.pan#1612",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.pan(double)",
    "snippet": "public void pan(double percent){\n  Range range\u003dgetRange();\n  double length\u003drange.getLength();\n  double adj\u003dlength * percent;\n  double lower\u003drange.getLowerBound() + adj;\n  double upper\u003drange.getUpperBound() + adj;\n  setRange(lower,upper);\n}",
    "begin_line": 1612,
    "end_line": 1619,
    "comment": "/** \n * Slides the axis range by the specified percentage.\n * @param percent  the percentage.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.getAutoTickIndex#1628",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.getAutoTickIndex()",
    "snippet": "protected int getAutoTickIndex(){\n  return this.autoTickIndex;\n}",
    "begin_line": 1628,
    "end_line": 1630,
    "comment": "/** \n * Returns the auto tick index.\n * @return The auto tick index.\n * @see #setAutoTickIndex(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.setAutoTickIndex#1639",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.setAutoTickIndex(int)",
    "snippet": "protected void setAutoTickIndex(int index){\n  this.autoTickIndex\u003dindex;\n}",
    "begin_line": 1639,
    "end_line": 1641,
    "comment": "/** \n * Sets the auto tick index.\n * @param index  the new value.\n * @see #getAutoTickIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.equals#1650",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ValueAxis)) {\n    return false;\n  }\n  ValueAxis that\u003d(ValueAxis)obj;\n  if (this.positiveArrowVisible !\u003d that.positiveArrowVisible) {\n    return false;\n  }\n  if (this.negativeArrowVisible !\u003d that.negativeArrowVisible) {\n    return false;\n  }\n  if (this.inverted !\u003d that.inverted) {\n    return false;\n  }\n  if (!this.autoRange \u0026\u0026 !ObjectUtilities.equal(this.range,that.range)) {\n    return false;\n  }\n  if (this.autoRange !\u003d that.autoRange) {\n    return false;\n  }\n  if (this.autoRangeMinimumSize !\u003d that.autoRangeMinimumSize) {\n    return false;\n  }\n  if (!this.defaultAutoRange.equals(that.defaultAutoRange)) {\n    return false;\n  }\n  if (this.upperMargin !\u003d that.upperMargin) {\n    return false;\n  }\n  if (this.lowerMargin !\u003d that.lowerMargin) {\n    return false;\n  }\n  if (this.fixedAutoRange !\u003d that.fixedAutoRange) {\n    return false;\n  }\n  if (this.autoTickUnitSelection !\u003d that.autoTickUnitSelection) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.standardTickUnits,that.standardTickUnits)) {\n    return false;\n  }\n  if (this.verticalTickLabels !\u003d that.verticalTickLabels) {\n    return false;\n  }\n  if (this.minorTickCount !\u003d that.minorTickCount) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1650,
    "end_line": 1703,
    "comment": "/** \n * Tests the axis for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.clone#1713",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  ValueAxis clone\u003d(ValueAxis)super.clone();\n  return clone;\n}",
    "begin_line": 1713,
    "end_line": 1716,
    "comment": "/** \n * Returns a clone of the object.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the axis doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.writeObject#1725",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeShape(this.upArrow,stream);\n  SerialUtilities.writeShape(this.downArrow,stream);\n  SerialUtilities.writeShape(this.leftArrow,stream);\n  SerialUtilities.writeShape(this.rightArrow,stream);\n}",
    "begin_line": 1725,
    "end_line": 1731,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ValueAxis.readObject#1741",
    "is_bug": true,
    "src_path": "org/jfree/chart/axis/ValueAxis.java",
    "class_name": "org.jfree.chart.axis.ValueAxis",
    "signature": "org.jfree.chart.axis.ValueAxis.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.upArrow\u003dSerialUtilities.readShape(stream);\n  this.downArrow\u003dSerialUtilities.readShape(stream);\n  this.leftArrow\u003dSerialUtilities.readShape(stream);\n  this.rightArrow\u003dSerialUtilities.readShape(stream);\n}",
    "begin_line": 1741,
    "end_line": 1749,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.AbstractBlock#109",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
    "snippet": "protected AbstractBlock(){\n  this.id\u003dnull;\n  this.width\u003d0.0;\n  this.height\u003d0.0;\n  this.bounds\u003dnew Rectangle2D.Float();\n  this.margin\u003dRectangleInsets.ZERO_INSETS;\n  this.frame\u003dBlockBorder.NONE;\n  this.padding\u003dRectangleInsets.ZERO_INSETS;\n}",
    "begin_line": 109,
    "end_line": 117,
    "comment": "/** \n * Creates a new block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getID#126",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getID()",
    "snippet": "public String getID(){\n  return this.id;\n}",
    "begin_line": 126,
    "end_line": 128,
    "comment": "/** \n * Returns the id.\n * @return The id (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setID(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setID#137",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setID(java.lang.String)",
    "snippet": "public void setID(String id){\n  this.id\u003did;\n}",
    "begin_line": 137,
    "end_line": 139,
    "comment": "/** \n * Sets the id for the block.\n * @param id  the id (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getID()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getWidth#150",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getWidth()",
    "snippet": "public double getWidth(){\n  return this.width;\n}",
    "begin_line": 150,
    "end_line": 152,
    "comment": "/** \n * Returns the natural width of the block, if this is known in advance. The actual width of the block may be overridden if layout constraints make this necessary.\n * @return The width.\n * @see #setWidth(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setWidth#161",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setWidth(double)",
    "snippet": "public void setWidth(double width){\n  this.width\u003dwidth;\n}",
    "begin_line": 161,
    "end_line": 163,
    "comment": "/** \n * Sets the natural width of the block, if this is known in advance.\n * @param width  the width (in Java2D units)\n * @see #getWidth()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getHeight#174",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getHeight()",
    "snippet": "public double getHeight(){\n  return this.height;\n}",
    "begin_line": 174,
    "end_line": 176,
    "comment": "/** \n * Returns the natural height of the block, if this is known in advance. The actual height of the block may be overridden if layout constraints make this necessary.\n * @return The height.\n * @see #setHeight(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setHeight#185",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setHeight(double)",
    "snippet": "public void setHeight(double height){\n  this.height\u003dheight;\n}",
    "begin_line": 185,
    "end_line": 187,
    "comment": "/** \n * Sets the natural width of the block, if this is known in advance.\n * @param height  the width (in Java2D units)\n * @see #getHeight()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getMargin#196",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getMargin()",
    "snippet": "public RectangleInsets getMargin(){\n  return this.margin;\n}",
    "begin_line": 196,
    "end_line": 198,
    "comment": "/** \n * Returns the margin.\n * @return The margin (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #getMargin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setMargin#208",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setMargin(RectangleInsets margin){\n  if (margin \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027margin\u0027 argument.\");\n  }\n  this.margin\u003dmargin;\n}",
    "begin_line": 208,
    "end_line": 213,
    "comment": "/** \n * Sets the margin (use  {@link RectangleInsets#ZERO_INSETS} for nopadding).\n * @param margin  the margin (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getMargin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setMargin#225",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setMargin(double, double, double, double)",
    "snippet": "public void setMargin(double top,double left,double bottom,double right){\n  setMargin(new RectangleInsets(top,left,bottom,right));\n}",
    "begin_line": 225,
    "end_line": 228,
    "comment": "/** \n * Sets the margin.\n * @param top  the top margin.\n * @param left  the left margin.\n * @param bottom  the bottom margin.\n * @param right  the right margin.\n * @see #getMargin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getFrame#238",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getFrame()",
    "snippet": "public BlockFrame getFrame(){\n  return this.frame;\n}",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * Returns the current frame (border).\n * @return The frame.\n * @since 1.0.5\n * @see #setFrame(BlockFrame)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setFrame#250",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
    "snippet": "public void setFrame(BlockFrame frame){\n  if (frame \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027frame\u0027 argument.\");\n  }\n  this.frame\u003dframe;\n}",
    "begin_line": 250,
    "end_line": 255,
    "comment": "/** \n * Sets the frame (or border).\n * @param frame  the frame (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n * @see #getFrame()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getPadding#264",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getPadding()",
    "snippet": "public RectangleInsets getPadding(){\n  return this.padding;\n}",
    "begin_line": 264,
    "end_line": 266,
    "comment": "/** \n * Returns the padding.\n * @return The padding (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPadding(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setPadding#276",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setPadding(RectangleInsets padding){\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027padding\u0027 argument.\");\n  }\n  this.padding\u003dpadding;\n}",
    "begin_line": 276,
    "end_line": 281,
    "comment": "/** \n * Sets the padding (use  {@link RectangleInsets#ZERO_INSETS} for nopadding).\n * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPadding()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setPadding#291",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setPadding(double, double, double, double)",
    "snippet": "public void setPadding(double top,double left,double bottom,double right){\n  setPadding(new RectangleInsets(top,left,bottom,right));\n}",
    "begin_line": 291,
    "end_line": 294,
    "comment": "/** \n * Sets the padding.\n * @param top  the top padding.\n * @param left  the left padding.\n * @param bottom  the bottom padding.\n * @param right  the right padding.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getContentXOffset#303",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getContentXOffset()",
    "snippet": "public double getContentXOffset(){\n  return this.margin.getLeft() + this.frame.getInsets().getLeft() + this.padding.getLeft();\n}",
    "begin_line": 303,
    "end_line": 306,
    "comment": "/** \n * Returns the x-offset for the content within the block.\n * @return The x-offset.\n * @see #getContentYOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getContentYOffset#315",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getContentYOffset()",
    "snippet": "public double getContentYOffset(){\n  return this.margin.getTop() + this.frame.getInsets().getTop() + this.padding.getTop();\n}",
    "begin_line": 315,
    "end_line": 318,
    "comment": "/** \n * Returns the y-offset for the content within the block.\n * @return The y-offset.\n * @see #getContentXOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.arrange#328",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.arrange(java.awt.Graphics2D)",
    "snippet": "public Size2D arrange(Graphics2D g2){\n  return arrange(g2,RectangleConstraint.NONE);\n}",
    "begin_line": 328,
    "end_line": 330,
    "comment": "/** \n * Arranges the contents of the block, with no constraints, and returns the block size.\n * @param g2  the graphics device.\n * @return The block size (in Java2D units, never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.arrange#341",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){\n  Size2D base\u003dnew Size2D(getWidth(),getHeight());\n  return constraint.calculateConstrainedSize(base);\n}",
    "begin_line": 341,
    "end_line": 344,
    "comment": "/** \n * Arranges the contents of the block, within the given constraints, and returns the block size.\n * @param g2  the graphics device.\n * @param constraint  the constraint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The block size (in Java2D units, never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.getBounds#353",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.getBounds()",
    "snippet": "public Rectangle2D getBounds(){\n  return this.bounds;\n}",
    "begin_line": 353,
    "end_line": 355,
    "comment": "/** \n * Returns the current bounds of the block.\n * @return The bounds.\n * @see #setBounds(Rectangle2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.setBounds#364",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D)",
    "snippet": "public void setBounds(Rectangle2D bounds){\n  if (bounds \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027bounds\u0027 argument.\");\n  }\n  this.bounds\u003dbounds;\n}",
    "begin_line": 364,
    "end_line": 369,
    "comment": "/** \n * Sets the bounds of the block.\n * @param bounds  the bounds (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBounds()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimToContentWidth#382",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(double)",
    "snippet": "protected double trimToContentWidth(double fixedWidth){\n  double result\u003dthis.margin.trimWidth(fixedWidth);\n  result\u003dthis.frame.getInsets().trimWidth(result);\n  result\u003dthis.padding.trimWidth(result);\n  return Math.max(result,0.0);\n}",
    "begin_line": 382,
    "end_line": 387,
    "comment": "/** \n * Calculate the width available for content after subtracting the margin, border and padding space from the specified fixed width.\n * @param fixedWidth  the fixed width.\n * @return The available space.\n * @see #trimToContentHeight(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimToContentHeight#400",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(double)",
    "snippet": "protected double trimToContentHeight(double fixedHeight){\n  double result\u003dthis.margin.trimHeight(fixedHeight);\n  result\u003dthis.frame.getInsets().trimHeight(result);\n  result\u003dthis.padding.trimHeight(result);\n  return Math.max(result,0.0);\n}",
    "begin_line": 400,
    "end_line": 405,
    "comment": "/** \n * Calculate the height available for content after subtracting the margin, border and padding space from the specified fixed height.\n * @param fixedHeight  the fixed height.\n * @return The available space.\n * @see #trimToContentWidth(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.toContentConstraint#415",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected RectangleConstraint toContentConstraint(RectangleConstraint c){\n  if (c \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027c\u0027 argument.\");\n  }\n  if (c.equals(RectangleConstraint.NONE)) {\n    return c;\n  }\n  double w\u003dc.getWidth();\n  Range wr\u003dc.getWidthRange();\n  double h\u003dc.getHeight();\n  Range hr\u003dc.getHeightRange();\n  double ww\u003dtrimToContentWidth(w);\n  double hh\u003dtrimToContentHeight(h);\n  Range wwr\u003dtrimToContentWidth(wr);\n  Range hhr\u003dtrimToContentHeight(hr);\n  return new RectangleConstraint(ww,wwr,c.getWidthConstraintType(),hh,hhr,c.getHeightConstraintType());\n}",
    "begin_line": 415,
    "end_line": 434,
    "comment": "/** \n * Returns a constraint for the content of this block that will result in the bounds of the block matching the specified constraint.\n * @param c  the outer constraint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The content constraint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimToContentWidth#436",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range)",
    "snippet": "private Range trimToContentWidth(Range r){\n  if (r \u003d\u003d null) {\n    return null;\n  }\n  double lowerBound\u003d0.0;\n  double upperBound\u003dDouble.POSITIVE_INFINITY;\n  if (r.getLowerBound() \u003e 0.0) {\n    lowerBound\u003dtrimToContentWidth(r.getLowerBound());\n  }\n  if (r.getUpperBound() \u003c Double.POSITIVE_INFINITY) {\n    upperBound\u003dtrimToContentWidth(r.getUpperBound());\n  }\n  return new Range(lowerBound,upperBound);\n}",
    "begin_line": 436,
    "end_line": 449,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimToContentHeight#451",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range)",
    "snippet": "private Range trimToContentHeight(Range r){\n  if (r \u003d\u003d null) {\n    return null;\n  }\n  double lowerBound\u003d0.0;\n  double upperBound\u003dDouble.POSITIVE_INFINITY;\n  if (r.getLowerBound() \u003e 0.0) {\n    lowerBound\u003dtrimToContentHeight(r.getLowerBound());\n  }\n  if (r.getUpperBound() \u003c Double.POSITIVE_INFINITY) {\n    upperBound\u003dtrimToContentHeight(r.getUpperBound());\n  }\n  return new Range(lowerBound,upperBound);\n}",
    "begin_line": 451,
    "end_line": 464,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.calculateTotalWidth#473",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double)",
    "snippet": "protected double calculateTotalWidth(double contentWidth){\n  double result\u003dcontentWidth;\n  result\u003dthis.padding.extendWidth(result);\n  result\u003dthis.frame.getInsets().extendWidth(result);\n  result\u003dthis.margin.extendWidth(result);\n  return result;\n}",
    "begin_line": 473,
    "end_line": 479,
    "comment": "/** \n * Adds the margin, border and padding to the specified content width.\n * @param contentWidth  the content width.\n * @return The adjusted width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.calculateTotalHeight#488",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double)",
    "snippet": "protected double calculateTotalHeight(double contentHeight){\n  double result\u003dcontentHeight;\n  result\u003dthis.padding.extendHeight(result);\n  result\u003dthis.frame.getInsets().extendHeight(result);\n  result\u003dthis.margin.extendHeight(result);\n  return result;\n}",
    "begin_line": 488,
    "end_line": 494,
    "comment": "/** \n * Adds the margin, border and padding to the specified content height.\n * @param contentHeight  the content height.\n * @return The adjusted height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimMargin#504",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D)",
    "snippet": "protected Rectangle2D trimMargin(Rectangle2D area){\n  this.margin.trim(area);\n  return area;\n}",
    "begin_line": 504,
    "end_line": 508,
    "comment": "/** \n * Reduces the specified area by the amount of space consumed by the margin.\n * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The trimmed area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimBorder#518",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D)",
    "snippet": "protected Rectangle2D trimBorder(Rectangle2D area){\n  this.frame.getInsets().trim(area);\n  return area;\n}",
    "begin_line": 518,
    "end_line": 522,
    "comment": "/** \n * Reduces the specified area by the amount of space consumed by the border.\n * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The trimmed area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.trimPadding#532",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D)",
    "snippet": "protected Rectangle2D trimPadding(Rectangle2D area){\n  this.padding.trim(area);\n  return area;\n}",
    "begin_line": 532,
    "end_line": 536,
    "comment": "/** \n * Reduces the specified area by the amount of space consumed by the padding.\n * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The trimmed area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.drawBorder#544",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawBorder(Graphics2D g2,Rectangle2D area){\n  this.frame.draw(g2,area);\n}",
    "begin_line": 544,
    "end_line": 546,
    "comment": "/** \n * Draws the border around the perimeter of the specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.equals#555",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractBlock)) {\n    return false;\n  }\n  AbstractBlock that\u003d(AbstractBlock)obj;\n  if (!ObjectUtilities.equal(this.id,that.id)) {\n    return false;\n  }\n  if (!this.frame.equals(that.frame)) {\n    return false;\n  }\n  if (!this.bounds.equals(that.bounds)) {\n    return false;\n  }\n  if (!this.margin.equals(that.margin)) {\n    return false;\n  }\n  if (!this.padding.equals(that.padding)) {\n    return false;\n  }\n  if (this.height !\u003d that.height) {\n    return false;\n  }\n  if (this.width !\u003d that.width) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 555,
    "end_line": 585,
    "comment": "/** \n * Tests this block for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.clone#595",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractBlock clone\u003d(AbstractBlock)super.clone();\n  clone.bounds\u003d(Rectangle2D)ShapeUtilities.clone(this.bounds);\n  if (this.frame instanceof PublicCloneable) {\n    PublicCloneable pc\u003d(PublicCloneable)this.frame;\n    clone.frame\u003d(BlockFrame)pc.clone();\n  }\n  return clone;\n}",
    "begin_line": 595,
    "end_line": 603,
    "comment": "/** \n * Returns a clone of this block.\n * @return A clone.\n * @throws CloneNotSupportedException if there is a problem creating theclone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.writeObject#612",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeShape(this.bounds,stream);\n}",
    "begin_line": 612,
    "end_line": 615,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractBlock.readObject#625",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/AbstractBlock.java",
    "class_name": "org.jfree.chart.block.AbstractBlock",
    "signature": "org.jfree.chart.block.AbstractBlock.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.bounds\u003d(Rectangle2D)SerialUtilities.readShape(stream);\n}",
    "begin_line": 625,
    "end_line": 629,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.BlockBorder#83",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.BlockBorder()",
    "snippet": "public BlockBorder(){\n  this(Color.black);\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Creates a default border.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.BlockBorder#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(java.awt.Paint)",
    "snippet": "public BlockBorder(Paint paint){\n  this(new RectangleInsets(1,1,1,1),paint);\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Creates a new border with the specified color.\n * @param paint  the color (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.BlockBorder#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(double, double, double, double)",
    "snippet": "public BlockBorder(double top,double left,double bottom,double right){\n  this(new RectangleInsets(top,left,bottom,right),Color.black);\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Creates a new border with the specified line widths (in black).\n * @param top  the width of the top border.\n * @param left  the width of the left border.\n * @param bottom  the width of the bottom border.\n * @param right  the width of the right border.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.BlockBorder#117",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(double, double, double, double, java.awt.Paint)",
    "snippet": "public BlockBorder(double top,double left,double bottom,double right,Paint paint){\n  this(new RectangleInsets(top,left,bottom,right),paint);\n}",
    "begin_line": 117,
    "end_line": 120,
    "comment": "/** \n * Creates a new border with the specified line widths (in black).\n * @param top  the width of the top border.\n * @param left  the width of the left border.\n * @param bottom  the width of the bottom border.\n * @param right  the width of the right border.\n * @param paint  the border paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.BlockBorder#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
    "snippet": "public BlockBorder(RectangleInsets insets,Paint paint){\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.insets\u003dinsets;\n  this.paint\u003dpaint;\n}",
    "begin_line": 128,
    "end_line": 137,
    "comment": "/** \n * Creates a new border.\n * @param insets  the border insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.getInsets#144",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.getInsets()",
    "snippet": "public RectangleInsets getInsets(){\n  return this.insets;\n}",
    "begin_line": 144,
    "end_line": 146,
    "comment": "/** \n * Returns the space reserved for the border.\n * @return The space (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.getPaint#153",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.getPaint()",
    "snippet": "public Paint getPaint(){\n  return this.paint;\n}",
    "begin_line": 153,
    "end_line": 155,
    "comment": "/** \n * Returns the paint used to draw the border.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.draw#163",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  double t\u003dthis.insets.calculateTopInset(area.getHeight());\n  double b\u003dthis.insets.calculateBottomInset(area.getHeight());\n  double l\u003dthis.insets.calculateLeftInset(area.getWidth());\n  double r\u003dthis.insets.calculateRightInset(area.getWidth());\n  double x\u003darea.getX();\n  double y\u003darea.getY();\n  double w\u003darea.getWidth();\n  double h\u003darea.getHeight();\n  g2.setPaint(this.paint);\n  Rectangle2D rect\u003dnew Rectangle2D.Double();\n  if (t \u003e 0.0) {\n    rect.setRect(x,y,w,t);\n    g2.fill(rect);\n  }\n  if (b \u003e 0.0) {\n    rect.setRect(x,y + h - b,w,b);\n    g2.fill(rect);\n  }\n  if (l \u003e 0.0) {\n    rect.setRect(x,y,l,h);\n    g2.fill(rect);\n  }\n  if (r \u003e 0.0) {\n    rect.setRect(x + w - r,y,r,h);\n    g2.fill(rect);\n  }\n}",
    "begin_line": 163,
    "end_line": 192,
    "comment": "/** \n * Draws the border by filling in the reserved space.\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.equals#201",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof BlockBorder)) {\n    return false;\n  }\n  BlockBorder that\u003d(BlockBorder)obj;\n  if (!this.insets.equals(that.insets)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.paint,that.paint)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 201,
    "end_line": 216,
    "comment": "/** \n * Tests this border for equality with an arbitrary instance.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.writeObject#225",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.paint,stream);\n}",
    "begin_line": 225,
    "end_line": 228,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockBorder.readObject#238",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockBorder.java",
    "class_name": "org.jfree.chart.block.BlockBorder",
    "signature": "org.jfree.chart.block.BlockBorder.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.paint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 238,
    "end_line": 242,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.BlockContainer#83",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.BlockContainer()",
    "snippet": "public BlockContainer(){\n  this(new BorderArrangement());\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Creates a new instance with default settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.BlockContainer#93",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
    "snippet": "public BlockContainer(Arrangement arrangement){\n  if (arrangement \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrangement\u0027 argument.\");\n  }\n  this.arrangement\u003darrangement;\n  this.blocks\u003dnew ArrayList();\n}",
    "begin_line": 93,
    "end_line": 99,
    "comment": "/** \n * Creates a new instance with the specified arrangement.\n * @param arrangement  the arrangement manager (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.getArrangement#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.getArrangement()",
    "snippet": "public Arrangement getArrangement(){\n  return this.arrangement;\n}",
    "begin_line": 106,
    "end_line": 108,
    "comment": "/** \n * Returns the arrangement (layout) manager for the container.\n * @return The arrangement manager (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.setArrangement#115",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement)",
    "snippet": "public void setArrangement(Arrangement arrangement){\n  if (arrangement \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027arrangement\u0027 argument.\");\n  }\n  this.arrangement\u003darrangement;\n}",
    "begin_line": 115,
    "end_line": 120,
    "comment": "/** \n * Sets the arrangement (layout) manager.\n * @param arrangement  the arrangement (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.isEmpty#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.isEmpty()",
    "snippet": "public boolean isEmpty(){\n  return this.blocks.isEmpty();\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if there are no blocks in the container, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.getBlocks#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.getBlocks()",
    "snippet": "public List getBlocks(){\n  return Collections.unmodifiableList(this.blocks);\n}",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Returns an unmodifiable list of the  {@link Block} objects managed bythis arrangement.\n * @return A list of blocks.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.add#147",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block)",
    "snippet": "public void add(Block block){\n  add(block,null);\n}",
    "begin_line": 147,
    "end_line": 149,
    "comment": "/** \n * Adds a block to the container.\n * @param block  the block (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.add#157",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object)",
    "snippet": "public void add(Block block,Object key){\n  this.blocks.add(block);\n  this.arrangement.add(block,key);\n}",
    "begin_line": 157,
    "end_line": 160,
    "comment": "/** \n * Adds a block to the container.\n * @param block  the block (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.clear#165",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.clear()",
    "snippet": "public void clear(){\n  this.blocks.clear();\n  this.arrangement.clear();\n}",
    "begin_line": 165,
    "end_line": 168,
    "comment": "/** \n * Clears all the blocks from the container.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.arrange#179",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){\n  return this.arrangement.arrange(this,g2,constraint);\n}",
    "begin_line": 179,
    "end_line": 181,
    "comment": "/** \n * Arranges the contents of the block, within the given constraints, and returns the block size.\n * @param g2  the graphics device.\n * @param constraint  the constraint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The block size (in Java2D units, never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.draw#189",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  draw(g2,area,null);\n}",
    "begin_line": 189,
    "end_line": 191,
    "comment": "/** \n * Draws the container and all the blocks within it.\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.draw#203",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
    "snippet": "public Object draw(Graphics2D g2,Rectangle2D area,Object params){\n  EntityBlockParams ebp\u003dnull;\n  StandardEntityCollection sec\u003dnull;\n  if (params instanceof EntityBlockParams) {\n    ebp\u003d(EntityBlockParams)params;\n    if (ebp.getGenerateEntities()) {\n      sec\u003dnew StandardEntityCollection();\n    }\n  }\n  Rectangle2D contentArea\u003d(Rectangle2D)area.clone();\n  contentArea\u003dtrimMargin(contentArea);\n  drawBorder(g2,contentArea);\n  contentArea\u003dtrimBorder(contentArea);\n  contentArea\u003dtrimPadding(contentArea);\n  Iterator iterator\u003dthis.blocks.iterator();\n  while (iterator.hasNext()) {\n    Block block\u003d(Block)iterator.next();\n    Rectangle2D bounds\u003dblock.getBounds();\n    Rectangle2D drawArea\u003dnew Rectangle2D.Double(bounds.getX() + area.getX(),bounds.getY() + area.getY(),bounds.getWidth(),bounds.getHeight());\n    Object r\u003dblock.draw(g2,drawArea,params);\n    if (sec !\u003d null) {\n      if (r instanceof EntityBlockResult) {\n        EntityBlockResult ebr\u003d(EntityBlockResult)r;\n        EntityCollection ec\u003debr.getEntityCollection();\n        sec.addAll(ec);\n      }\n    }\n  }\n  BlockResult result\u003dnull;\n  if (sec !\u003d null) {\n    result\u003dnew BlockResult();\n    result.setEntityCollection(sec);\n  }\n  return result;\n}",
    "begin_line": 203,
    "end_line": 240,
    "comment": "/** \n * Draws the block within the specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n * @param params  passed on to blocks within the container(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return An instance of {@link EntityBlockResult}, or \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.equals#249",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof BlockContainer)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  BlockContainer that\u003d(BlockContainer)obj;\n  if (!this.arrangement.equals(that.arrangement)) {\n    return false;\n  }\n  if (!this.blocks.equals(that.blocks)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 249,
    "end_line": 267,
    "comment": "/** \n * Tests this container for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BlockContainer.clone#276",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/BlockContainer.java",
    "class_name": "org.jfree.chart.block.BlockContainer",
    "signature": "org.jfree.chart.block.BlockContainer.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  BlockContainer clone\u003d(BlockContainer)super.clone();\n  return clone;\n}",
    "begin_line": 276,
    "end_line": 280,
    "comment": "/** \n * Returns a clone of the container.\n * @return A clone.\n * @throws CloneNotSupportedException if there is a problem cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.ColumnArrangement#78",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
    "snippet": "public ColumnArrangement(){\n}",
    "begin_line": 78,
    "end_line": 79,
    "comment": "/** \n * Creates a new instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.ColumnArrangement#89",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
    "snippet": "public ColumnArrangement(HorizontalAlignment hAlign,VerticalAlignment vAlign,double hGap,double vGap){\n  this.horizontalAlignment\u003dhAlign;\n  this.verticalAlignment\u003dvAlign;\n  this.horizontalGap\u003dhGap;\n  this.verticalGap\u003dvGap;\n}",
    "begin_line": 89,
    "end_line": 96,
    "comment": "/** \n * Creates a new instance.\n * @param hAlign  the horizontal alignment (currently ignored).\n * @param vAlign  the vertical alignment (currently ignored).\n * @param hGap  the horizontal gap.\n * @param vGap  the vertical gap.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.add#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
    "snippet": "public void add(Block block,Object key){\n}",
    "begin_line": 106,
    "end_line": 109,
    "comment": "/** \n * Adds a block to be managed by this instance.  This method is usually called by the  {@link BlockContainer}, you shouldn\u0027t need to call it directly.\n * @param block  the block.\n * @param key  a key that controls the position of the block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrange#123",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  LengthConstraintType w\u003dconstraint.getWidthConstraintType();\n  LengthConstraintType h\u003dconstraint.getHeightConstraintType();\n  if (w \u003d\u003d LengthConstraintType.NONE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      return arrangeNN(container,g2);\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.FIXED) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      return arrangeFF(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.RANGE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      return arrangeRF(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      return arrangeRR(container,g2,constraint);\n    }\n  }\n  return new Size2D();\n}",
    "begin_line": 123,
    "end_line": 163,
    "comment": "/** \n * Calculates and sets the bounds of all the items in the specified container, subject to the given constraint.  The \u003ccode\u003eGraphics2D\u003c/code\u003e can be used by some items (particularly items containing text) to calculate sizing parameters.\n * @param container  the container whose items are being arranged.\n * @param g2  the graphics device.\n * @param constraint  the size constraint.\n * @return The size of the container after arrangement of the contents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrangeFF#177",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrangeFF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  return arrangeNF(container,g2,constraint);\n}",
    "begin_line": 177,
    "end_line": 181,
    "comment": "/** \n * Calculates and sets the bounds of all the items in the specified container, subject to the given constraint.  The \u003ccode\u003eGraphics2D\u003c/code\u003e can be used by some items (particularly items containing text) to calculate sizing parameters.\n * @param container  the container whose items are being arranged.\n * @param g2  the graphics device.\n * @param constraint  the size constraint.\n * @return The container size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrangeNF#195",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrangeNF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeNF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  List blocks\u003dcontainer.getBlocks();\n  double height\u003dconstraint.getHeight();\n  if (height \u003c\u003d 0.0) {\n    height\u003dDouble.POSITIVE_INFINITY;\n  }\n  double x\u003d0.0;\n  double y\u003d0.0;\n  double maxWidth\u003d0.0;\n  List itemsInColumn\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c blocks.size(); i++) {\n    Block block\u003d(Block)blocks.get(i);\n    Size2D size\u003dblock.arrange(g2,RectangleConstraint.NONE);\n    if (y + size.height \u003c\u003d height) {\n      itemsInColumn.add(block);\n      block.setBounds(new Rectangle2D.Double(x,y,size.width,size.height));\n      y\u003dy + size.height + this.verticalGap;\n      maxWidth\u003dMath.max(maxWidth,size.width);\n    }\n else {\n      if (itemsInColumn.isEmpty()) {\n        block.setBounds(new Rectangle2D.Double(x,y,size.width,Math.min(size.height,height - y)));\n        y\u003d0.0;\n        x\u003dx + size.width + this.horizontalGap;\n      }\n else {\n        itemsInColumn.clear();\n        x\u003dx + maxWidth + this.horizontalGap;\n        y\u003d0.0;\n        maxWidth\u003dsize.width;\n        block.setBounds(new Rectangle2D.Double(x,y,size.width,Math.min(size.height,height)));\n        y\u003dsize.height + this.verticalGap;\n        itemsInColumn.add(block);\n      }\n    }\n  }\n  return new Size2D(x + maxWidth,constraint.getHeight());\n}",
    "begin_line": 195,
    "end_line": 248,
    "comment": "/** \n * Calculates and sets the bounds of all the items in the specified container, subject to the given constraint.  The \u003ccode\u003eGraphics2D\u003c/code\u003e can be used by some items (particularly items containing text) to calculate sizing parameters.\n * @param container  the container whose items are being arranged.\n * @param constraint  the size constraint.\n * @param g2  the graphics device.\n * @return The container size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrangeRR#260",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s1\u003darrangeNN(container,g2);\n  if (constraint.getHeightRange().contains(s1.height)) {\n    return s1;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedHeight(constraint.getHeightRange().getUpperBound());\n    return arrangeRF(container,g2,c);\n  }\n}",
    "begin_line": 260,
    "end_line": 275,
    "comment": "/** \n * Arranges a container with range constraints for both the horizontal and vertical.\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n * @return The size of the container.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrangeRF#287",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrangeRF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s\u003darrangeNF(container,g2,constraint);\n  if (constraint.getWidthRange().contains(s.width)) {\n    return s;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));\n    return arrangeFF(container,g2,c);\n  }\n}",
    "begin_line": 287,
    "end_line": 300,
    "comment": "/** \n * Arranges the blocks in the container using a fixed height and a range for the width.\n * @param container  the container.\n * @param g2  the graphics device.\n * @param constraint  the constraint.\n * @return The size of the container after arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.arrangeNN#311",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
    "snippet": "protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){\n  double y\u003d0.0;\n  double height\u003d0.0;\n  double maxWidth\u003d0.0;\n  List blocks\u003dcontainer.getBlocks();\n  int blockCount\u003dblocks.size();\n  if (blockCount \u003e 0) {\n    Size2D[] sizes\u003dnew Size2D[blocks.size()];\n    for (int i\u003d0; i \u003c blocks.size(); i++) {\n      Block block\u003d(Block)blocks.get(i);\n      sizes[i]\u003dblock.arrange(g2,RectangleConstraint.NONE);\n      height\u003dheight + sizes[i].getHeight();\n      maxWidth\u003dMath.max(sizes[i].width,maxWidth);\n      block.setBounds(new Rectangle2D.Double(0.0,y,sizes[i].width,sizes[i].height));\n      y\u003dy + sizes[i].height + this.verticalGap;\n    }\n    if (blockCount \u003e 1) {\n      height\u003dheight + this.verticalGap * (blockCount - 1);\n    }\n    if (this.horizontalAlignment !\u003d HorizontalAlignment.LEFT) {\n      for (int i\u003d0; i \u003c blocks.size(); i++) {\n        if (this.horizontalAlignment \u003d\u003d HorizontalAlignment.CENTER) {\n        }\n else         if (this.horizontalAlignment \u003d\u003d HorizontalAlignment.RIGHT) {\n        }\n      }\n    }\n  }\n  return new Size2D(maxWidth,height);\n}",
    "begin_line": 311,
    "end_line": 349,
    "comment": "/** \n * Arranges the blocks without any constraints.  This puts all blocks into a single column.\n * @param container  the container.\n * @param g2  the graphics device.\n * @return The size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.clear#354",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.clear()",
    "snippet": "public void clear(){\n}",
    "begin_line": 354,
    "end_line": 356,
    "comment": "/** \n * Clears any cached information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ColumnArrangement.equals#365",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/ColumnArrangement.java",
    "class_name": "org.jfree.chart.block.ColumnArrangement",
    "signature": "org.jfree.chart.block.ColumnArrangement.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ColumnArrangement)) {\n    return false;\n  }\n  ColumnArrangement that\u003d(ColumnArrangement)obj;\n  if (this.horizontalAlignment !\u003d that.horizontalAlignment) {\n    return false;\n  }\n  if (this.verticalAlignment !\u003d that.verticalAlignment) {\n    return false;\n  }\n  if (this.horizontalGap !\u003d that.horizontalGap) {\n    return false;\n  }\n  if (this.verticalGap !\u003d that.verticalGap) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 365,
    "end_line": 386,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.FlowArrangement#79",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
    "snippet": "public FlowArrangement(){\n  this(HorizontalAlignment.CENTER,VerticalAlignment.CENTER,2.0,2.0);\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Creates a new instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.FlowArrangement#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
    "snippet": "public FlowArrangement(HorizontalAlignment hAlign,VerticalAlignment vAlign,double hGap,double vGap){\n  this.horizontalAlignment\u003dhAlign;\n  this.verticalAlignment\u003dvAlign;\n  this.horizontalGap\u003dhGap;\n  this.verticalGap\u003dvGap;\n}",
    "begin_line": 91,
    "end_line": 97,
    "comment": "/** \n * Creates a new instance.\n * @param hAlign  the horizontal alignment (currently ignored).\n * @param vAlign  the vertical alignment (currently ignored).\n * @param hGap  the horizontal gap.\n * @param vGap  the vertical gap.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.add#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
    "snippet": "public void add(Block block,Object key){\n}",
    "begin_line": 107,
    "end_line": 110,
    "comment": "/** \n * Adds a block to be managed by this instance.  This method is usually called by the  {@link BlockContainer}, you shouldn\u0027t need to call it directly.\n * @param block  the block.\n * @param key  a key that controls the position of the block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrange#124",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  LengthConstraintType w\u003dconstraint.getWidthConstraintType();\n  LengthConstraintType h\u003dconstraint.getHeightConstraintType();\n  if (w \u003d\u003d LengthConstraintType.NONE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      return arrangeNN(container,g2);\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      return arrangeNF(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      throw new RuntimeException(\"Not implemented.\");\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.FIXED) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      return arrangeFN(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      return arrangeFF(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      return arrangeFR(container,g2,constraint);\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.RANGE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      return arrangeRN(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      return arrangeRF(container,g2,constraint);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      return arrangeRR(container,g2,constraint);\n    }\n  }\n  throw new RuntimeException(\"Unrecognised constraint type.\");\n}",
    "begin_line": 124,
    "end_line": 164,
    "comment": "/** \n * Calculates and sets the bounds of all the items in the specified container, subject to the given constraint.  The \u003ccode\u003eGraphics2D\u003c/code\u003e can be used by some items (particularly items containing text) to calculate sizing parameters.\n * @param container  the container whose items are being arranged.\n * @param constraint  the size constraint.\n * @param g2  the graphics device.\n * @return The size of the container after arrangement of the contents.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeFN#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeFN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeFN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  List blocks\u003dcontainer.getBlocks();\n  double width\u003dconstraint.getWidth();\n  double x\u003d0.0;\n  double y\u003d0.0;\n  double maxHeight\u003d0.0;\n  List itemsInRow\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c blocks.size(); i++) {\n    Block block\u003d(Block)blocks.get(i);\n    Size2D size\u003dblock.arrange(g2,RectangleConstraint.NONE);\n    if (x + size.width \u003c\u003d width) {\n      itemsInRow.add(block);\n      block.setBounds(new Rectangle2D.Double(x,y,size.width,size.height));\n      x\u003dx + size.width + this.horizontalGap;\n      maxHeight\u003dMath.max(maxHeight,size.height);\n    }\n else {\n      if (itemsInRow.isEmpty()) {\n        block.setBounds(new Rectangle2D.Double(x,y,Math.min(size.width,width - x),size.height));\n        x\u003d0.0;\n        y\u003dy + size.height + this.verticalGap;\n      }\n else {\n        itemsInRow.clear();\n        x\u003d0.0;\n        y\u003dy + maxHeight + this.verticalGap;\n        maxHeight\u003dsize.height;\n        block.setBounds(new Rectangle2D.Double(x,y,Math.min(size.width,width),size.height));\n        x\u003dsize.width + this.horizontalGap;\n        itemsInRow.add(block);\n      }\n    }\n  }\n  return new Size2D(constraint.getWidth(),y + maxHeight);\n}",
    "begin_line": 176,
    "end_line": 225,
    "comment": "/** \n * Arranges the blocks in the container with a fixed width and no height constraint.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeFR#237",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeFR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeFR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s\u003darrangeFN(container,g2,constraint);\n  if (constraint.getHeightRange().contains(s.height)) {\n    return s;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedHeight(constraint.getHeightRange().constrain(s.getHeight()));\n    return arrangeFF(container,g2,c);\n  }\n}",
    "begin_line": 237,
    "end_line": 250,
    "comment": "/** \n * Arranges the blocks in the container with a fixed width and a range constraint on the height.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size following the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeFF#262",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeFF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeFF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  return arrangeFN(container,g2,constraint);\n}",
    "begin_line": 262,
    "end_line": 267,
    "comment": "/** \n * Arranges the blocks in the container with the overall height and width specified as fixed constraints.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size following the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeRR#279",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeRR(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s1\u003darrangeNN(container,g2);\n  if (constraint.getWidthRange().contains(s1.width)) {\n    return s1;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedWidth(constraint.getWidthRange().getUpperBound());\n    return arrangeFR(container,g2,c);\n  }\n}",
    "begin_line": 279,
    "end_line": 294,
    "comment": "/** \n * Arranges the blocks with the overall width and height to fit within specified ranges.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeRF#306",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeRF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeRF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s\u003darrangeNF(container,g2,constraint);\n  if (constraint.getWidthRange().contains(s.width)) {\n    return s;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedWidth(constraint.getWidthRange().constrain(s.getWidth()));\n    return arrangeFF(container,g2,c);\n  }\n}",
    "begin_line": 306,
    "end_line": 319,
    "comment": "/** \n * Arranges the blocks in the container with a range constraint on the width and a fixed height.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size following the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeRN#331",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeRN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeRN(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  Size2D s1\u003darrangeNN(container,g2);\n  if (constraint.getWidthRange().contains(s1.width)) {\n    return s1;\n  }\n else {\n    RectangleConstraint c\u003dconstraint.toFixedWidth(constraint.getWidthRange().getUpperBound());\n    return arrangeFN(container,g2,c);\n  }\n}",
    "begin_line": 331,
    "end_line": 345,
    "comment": "/** \n * Arranges the block with a range constraint on the width, and no constraint on the height.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size following the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeNN#356",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
    "snippet": "protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){\n  double x\u003d0.0;\n  double width\u003d0.0;\n  double maxHeight\u003d0.0;\n  List blocks\u003dcontainer.getBlocks();\n  int blockCount\u003dblocks.size();\n  if (blockCount \u003e 0) {\n    Size2D[] sizes\u003dnew Size2D[blocks.size()];\n    for (int i\u003d0; i \u003c blocks.size(); i++) {\n      Block block\u003d(Block)blocks.get(i);\n      sizes[i]\u003dblock.arrange(g2,RectangleConstraint.NONE);\n      width\u003dwidth + sizes[i].getWidth();\n      maxHeight\u003dMath.max(sizes[i].height,maxHeight);\n      block.setBounds(new Rectangle2D.Double(x,0.0,sizes[i].width,sizes[i].height));\n      x\u003dx + sizes[i].width + this.horizontalGap;\n    }\n    if (blockCount \u003e 1) {\n      width\u003dwidth + this.horizontalGap * (blockCount - 1);\n    }\n    if (this.verticalAlignment !\u003d VerticalAlignment.TOP) {\n      for (int i\u003d0; i \u003c blocks.size(); i++) {\n        if (this.verticalAlignment \u003d\u003d VerticalAlignment.CENTER) {\n        }\n else         if (this.verticalAlignment \u003d\u003d VerticalAlignment.BOTTOM) {\n        }\n      }\n    }\n  }\n  return new Size2D(width,maxHeight);\n}",
    "begin_line": 356,
    "end_line": 393,
    "comment": "/** \n * Arranges the blocks without any constraints.  This puts all blocks into a single row.\n * @param container  the container.\n * @param g2  the graphics device.\n * @return The size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.arrangeNF#405",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.arrangeNF(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "protected Size2D arrangeNF(BlockContainer container,Graphics2D g2,RectangleConstraint constraint){\n  return arrangeNN(container,g2);\n}",
    "begin_line": 405,
    "end_line": 409,
    "comment": "/** \n * Arranges the blocks with no width constraint and a fixed height constraint.  This puts all blocks into a single row.\n * @param container  the container.\n * @param constraint  the constraint.\n * @param g2  the graphics device.\n * @return The size after the arrangement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.clear#414",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.clear()",
    "snippet": "public void clear(){\n}",
    "begin_line": 414,
    "end_line": 416,
    "comment": "/** \n * Clears any cached information.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "FlowArrangement.equals#425",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/FlowArrangement.java",
    "class_name": "org.jfree.chart.block.FlowArrangement",
    "signature": "org.jfree.chart.block.FlowArrangement.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof FlowArrangement)) {\n    return false;\n  }\n  FlowArrangement that\u003d(FlowArrangement)obj;\n  if (this.horizontalAlignment !\u003d that.horizontalAlignment) {\n    return false;\n  }\n  if (this.verticalAlignment !\u003d that.verticalAlignment) {\n    return false;\n  }\n  if (this.horizontalGap !\u003d that.horizontalGap) {\n    return false;\n  }\n  if (this.verticalGap !\u003d that.verticalGap) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 425,
    "end_line": 446,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.LineBorder#84",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
    "snippet": "public LineBorder(){\n  this(Color.black,new BasicStroke(1.0f),new RectangleInsets(1.0,1.0,1.0,1.0));\n}",
    "begin_line": 84,
    "end_line": 87,
    "comment": "/** \n * Creates a default border.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.LineBorder#96",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
    "snippet": "public LineBorder(Paint paint,Stroke stroke,RectangleInsets insets){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  this.paint\u003dpaint;\n  this.stroke\u003dstroke;\n  this.insets\u003dinsets;\n}",
    "begin_line": 96,
    "end_line": 109,
    "comment": "/** \n * Creates a new border with the specified color.\n * @param paint  the color (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the border stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param insets  the insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.getPaint#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.getPaint()",
    "snippet": "public Paint getPaint(){\n  return this.paint;\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Returns the paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.getInsets#125",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.getInsets()",
    "snippet": "public RectangleInsets getInsets(){\n  return this.insets;\n}",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Returns the insets.\n * @return The insets (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.getStroke#134",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.getStroke()",
    "snippet": "public Stroke getStroke(){\n  return this.stroke;\n}",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * Returns the stroke.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.draw#144",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  double w\u003darea.getWidth();\n  double h\u003darea.getHeight();\n  if (w \u003c\u003d 0.0 || h \u003c\u003d 0.0) {\n    return;\n  }\n  double t\u003dthis.insets.calculateTopInset(h);\n  double b\u003dthis.insets.calculateBottomInset(h);\n  double l\u003dthis.insets.calculateLeftInset(w);\n  double r\u003dthis.insets.calculateRightInset(w);\n  double x\u003darea.getX();\n  double y\u003darea.getY();\n  double x0\u003dx + l / 2.0;\n  double x1\u003dx + w - r / 2.0;\n  double y0\u003dy + h - b / 2.0;\n  double y1\u003dy + t / 2.0;\n  g2.setPaint(getPaint());\n  g2.setStroke(getStroke());\n  Line2D line\u003dnew Line2D.Double();\n  if (t \u003e 0.0) {\n    line.setLine(x0,y1,x1,y1);\n    g2.draw(line);\n  }\n  if (b \u003e 0.0) {\n    line.setLine(x0,y0,x1,y0);\n    g2.draw(line);\n  }\n  if (l \u003e 0.0) {\n    line.setLine(x0,y0,x0,y1);\n    g2.draw(line);\n  }\n  if (r \u003e 0.0) {\n    line.setLine(x1,y0,x1,y1);\n    g2.draw(line);\n  }\n}",
    "begin_line": 144,
    "end_line": 180,
    "comment": "/** \n * Draws the border by filling in the reserved space (in black).\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.equals#189",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof LineBorder)) {\n    return false;\n  }\n  LineBorder that\u003d(LineBorder)obj;\n  if (!PaintUtilities.equal(this.paint,that.paint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {\n    return false;\n  }\n  if (!this.insets.equals(that.insets)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 189,
    "end_line": 207,
    "comment": "/** \n * Tests this border for equality with an arbitrary instance.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.writeObject#216",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.paint,stream);\n  SerialUtilities.writeStroke(this.stroke,stream);\n}",
    "begin_line": 216,
    "end_line": 220,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LineBorder.readObject#230",
    "is_bug": true,
    "src_path": "org/jfree/chart/block/LineBorder.java",
    "class_name": "org.jfree.chart.block.LineBorder",
    "signature": "org.jfree.chart.block.LineBorder.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.paint\u003dSerialUtilities.readPaint(stream);\n  this.stroke\u003dSerialUtilities.readStroke(stream);\n}",
    "begin_line": 230,
    "end_line": 235,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisChangeEvent.AxisChangeEvent#60",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/AxisChangeEvent.java",
    "class_name": "org.jfree.chart.event.AxisChangeEvent",
    "signature": "org.jfree.chart.event.AxisChangeEvent.AxisChangeEvent(org.jfree.chart.axis.Axis)",
    "snippet": "public AxisChangeEvent(Axis axis){\n  super(axis);\n  this.axis\u003daxis;\n}",
    "begin_line": 60,
    "end_line": 63,
    "comment": "/** \n * Creates a new AxisChangeEvent.\n * @param axis  the axis that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AxisChangeEvent.getAxis#70",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/AxisChangeEvent.java",
    "class_name": "org.jfree.chart.event.AxisChangeEvent",
    "signature": "org.jfree.chart.event.AxisChangeEvent.getAxis()",
    "snippet": "public Axis getAxis(){\n  return this.axis;\n}",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Returns the axis that generated the event.\n * @return The axis that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#68",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
    "snippet": "public ChartChangeEvent(Object source){\n  this(source,null,ChartChangeEventType.GENERAL);\n}",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title,an axis etc.)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#79",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart)",
    "snippet": "public ChartChangeEvent(Object source,JFreeChart chart){\n  this(source,chart,ChartChangeEventType.GENERAL);\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title, anaxis etc.)\n * @param chart  the chart that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.ChartChangeEvent#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
    "snippet": "public ChartChangeEvent(Object source,JFreeChart chart,ChartChangeEventType type){\n  super(source);\n  this.chart\u003dchart;\n  this.type\u003dtype;\n}",
    "begin_line": 91,
    "end_line": 96,
    "comment": "/** \n * Creates a new chart change event.\n * @param source  the source of the event (could be the chart, a title, anaxis etc.)\n * @param chart  the chart that generated the event.\n * @param type  the type of event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.getChart#103",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.getChart()",
    "snippet": "public JFreeChart getChart(){\n  return this.chart;\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Returns the chart that generated the change event.\n * @return The chart that generated the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.setChart#112",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.setChart(org.jfree.chart.JFreeChart)",
    "snippet": "public void setChart(JFreeChart chart){\n  this.chart\u003dchart;\n}",
    "begin_line": 112,
    "end_line": 114,
    "comment": "/** \n * Sets the chart that generated the change event.\n * @param chart  the chart that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.getType#121",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.getType()",
    "snippet": "public ChartChangeEventType getType(){\n  return this.type;\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "/** \n * Returns the event type.\n * @return The event type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEvent.setType#130",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEvent.java",
    "class_name": "org.jfree.chart.event.ChartChangeEvent",
    "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
    "snippet": "public void setType(ChartChangeEventType type){\n  this.type\u003dtype;\n}",
    "begin_line": 130,
    "end_line": 132,
    "comment": "/** \n * Sets the event type.\n * @param type  the event type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.ChartChangeEventType#74",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
    "snippet": "private ChartChangeEventType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.toString#83",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.equals#95",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof ChartChangeEventType)) {\n    return false;\n  }\n  ChartChangeEventType that\u003d(ChartChangeEventType)obj;\n  if (!this.name.equals(that.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 95,
    "end_line": 107,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.hashCode#114",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 114,
    "end_line": 116,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ChartChangeEventType.readResolve#125",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/ChartChangeEventType.java",
    "class_name": "org.jfree.chart.event.ChartChangeEventType",
    "signature": "org.jfree.chart.event.ChartChangeEventType.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(ChartChangeEventType.GENERAL)) {\n    return ChartChangeEventType.GENERAL;\n  }\n else   if (this.equals(ChartChangeEventType.NEW_DATASET)) {\n    return ChartChangeEventType.NEW_DATASET;\n  }\n else   if (this.equals(ChartChangeEventType.DATASET_UPDATED)) {\n    return ChartChangeEventType.DATASET_UPDATED;\n  }\n  return null;\n}",
    "begin_line": 125,
    "end_line": 136,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotChangeEvent.PlotChangeEvent#63",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/PlotChangeEvent.java",
    "class_name": "org.jfree.chart.event.PlotChangeEvent",
    "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
    "snippet": "public PlotChangeEvent(Plot plot){\n  super(plot);\n  this.plot\u003dplot;\n}",
    "begin_line": 63,
    "end_line": 66,
    "comment": "/** \n * Creates a new PlotChangeEvent.\n * @param plot  the plot that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotChangeEvent.getPlot#73",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/PlotChangeEvent.java",
    "class_name": "org.jfree.chart.event.PlotChangeEvent",
    "signature": "org.jfree.chart.event.PlotChangeEvent.getPlot()",
    "snippet": "public Plot getPlot(){\n  return this.plot;\n}",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Returns the plot that generated the event.\n * @return The plot that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RendererChangeEvent.RendererChangeEvent#69",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object)",
    "snippet": "public RendererChangeEvent(Object renderer){\n  this(renderer,false);\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Creates a new event.\n * @param renderer  the renderer that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RendererChangeEvent.RendererChangeEvent#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object, boolean)",
    "snippet": "public RendererChangeEvent(Object renderer,boolean seriesVisibilityChanged){\n  super(renderer);\n  this.renderer\u003drenderer;\n  this.seriesVisibilityChanged\u003dseriesVisibilityChanged;\n}",
    "begin_line": 80,
    "end_line": 85,
    "comment": "/** \n * Creates a new event.\n * @param renderer  the renderer that generated the event.\n * @param seriesVisibilityChanged  a flag that indicates whether or notthe event relates to a change in the series visibility flags.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RendererChangeEvent.getRenderer#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "signature": "org.jfree.chart.event.RendererChangeEvent.getRenderer()",
    "snippet": "public Object getRenderer(){\n  return this.renderer;\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns the renderer that generated the event.\n * @return The renderer that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RendererChangeEvent.getSeriesVisibilityChanged#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/RendererChangeEvent.java",
    "class_name": "org.jfree.chart.event.RendererChangeEvent",
    "signature": "org.jfree.chart.event.RendererChangeEvent.getSeriesVisibilityChanged()",
    "snippet": "public boolean getSeriesVisibilityChanged(){\n  return this.seriesVisibilityChanged;\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Returns the flag that indicates whether or not the event relates to a change in series visibility.\n * @return A boolean.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TitleChangeEvent.TitleChangeEvent#63",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/TitleChangeEvent.java",
    "class_name": "org.jfree.chart.event.TitleChangeEvent",
    "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
    "snippet": "public TitleChangeEvent(Title title){\n  super(title);\n  this.title\u003dtitle;\n}",
    "begin_line": 63,
    "end_line": 66,
    "comment": "/** \n * Default constructor.\n * @param title  the chart title that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TitleChangeEvent.getTitle#73",
    "is_bug": true,
    "src_path": "org/jfree/chart/event/TitleChangeEvent.java",
    "class_name": "org.jfree.chart.event.TitleChangeEvent",
    "signature": "org.jfree.chart.event.TitleChangeEvent.getTitle()",
    "snippet": "public Title getTitle(){\n  return this.title;\n}",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Returns the title that generated the event.\n * @return The title that generated the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator#82",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.AbstractPieItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
    "snippet": "protected AbstractPieItemLabelGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){\n  if (labelFormat \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027labelFormat\u0027 argument.\");\n  }\n  if (numberFormat \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027numberFormat\u0027 argument.\");\n  }\n  if (percentFormat \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027percentFormat\u0027 argument.\");\n  }\n  this.labelFormat\u003dlabelFormat;\n  this.numberFormat\u003dnumberFormat;\n  this.percentFormat\u003dpercentFormat;\n}",
    "begin_line": 82,
    "end_line": 100,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param labelFormat  the label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param numberFormat  the format object for the values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param percentFormat  the format object for the percentages(\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.getLabelFormat#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.getLabelFormat()",
    "snippet": "public String getLabelFormat(){\n  return this.labelFormat;\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Returns the label format string.\n * @return The label format string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.getNumberFormat#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.getNumberFormat()",
    "snippet": "public NumberFormat getNumberFormat(){\n  return this.numberFormat;\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Returns the number formatter.\n * @return The formatter (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.getPercentFormat#125",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.getPercentFormat()",
    "snippet": "public NumberFormat getPercentFormat(){\n  return this.percentFormat;\n}",
    "begin_line": 125,
    "end_line": 127,
    "comment": "/** \n * Returns the percent formatter.\n * @return The formatter (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.createItemArray#145",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.createItemArray(org.jfree.data.general.PieDataset, java.lang.Comparable)",
    "snippet": "protected Object[] createItemArray(PieDataset dataset,Comparable key){\n  Object[] result\u003dnew Object[4];\n  double total\u003dDatasetUtilities.calculatePieDatasetTotal(dataset);\n  result[0]\u003dkey.toString();\n  Number value\u003ddataset.getValue(key);\n  if (value !\u003d null) {\n    result[1]\u003dthis.numberFormat.format(value);\n  }\n else {\n    result[1]\u003d\"null\";\n  }\n  double percent\u003d0.0;\n  if (value !\u003d null) {\n    double v\u003dvalue.doubleValue();\n    if (v \u003e 0.0) {\n      percent\u003dv / total;\n    }\n  }\n  result[2]\u003dthis.percentFormat.format(percent);\n  result[3]\u003dthis.numberFormat.format(total);\n  return result;\n}",
    "begin_line": 145,
    "end_line": 166,
    "comment": "/** \n * Creates the array of items that can be passed to the {@link MessageFormat} class for creating labels.  The returned arraycontains four values: \u003cul\u003e \u003cli\u003eresult[0] \u003d the section key converted to a \u003ccode\u003eString\u003c/code\u003e;\u003c/li\u003e \u003cli\u003eresult[1] \u003d the formatted data value;\u003c/li\u003e \u003cli\u003eresult[2] \u003d the formatted percentage (of the total);\u003c/li\u003e \u003cli\u003eresult[3] \u003d the formatted total value.\u003c/li\u003e \u003c/ul\u003e\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The items (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.generateSectionLabel#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable)",
    "snippet": "protected String generateSectionLabel(PieDataset dataset,Comparable key){\n  String result\u003dnull;\n  if (dataset !\u003d null) {\n    Object[] items\u003dcreateItemArray(dataset,key);\n    result\u003dMessageFormat.format(this.labelFormat,items);\n  }\n  return result;\n}",
    "begin_line": 176,
    "end_line": 183,
    "comment": "/** \n * Generates a label for a pie section.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the section key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The label (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.equals#192",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractPieItemLabelGenerator)) {\n    return false;\n  }\n  AbstractPieItemLabelGenerator that\u003d(AbstractPieItemLabelGenerator)obj;\n  if (!this.labelFormat.equals(that.labelFormat)) {\n    return false;\n  }\n  if (!this.numberFormat.equals(that.numberFormat)) {\n    return false;\n  }\n  if (!this.percentFormat.equals(that.percentFormat)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 192,
    "end_line": 213,
    "comment": "/** \n * Tests the generator for equality with an arbitrary object.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.hashCode#220",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  result\u003dHashUtilities.hashCode(result,this.labelFormat);\n  result\u003dHashUtilities.hashCode(result,this.numberFormat);\n  result\u003dHashUtilities.hashCode(result,this.percentFormat);\n  return result;\n}",
    "begin_line": 220,
    "end_line": 226,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieItemLabelGenerator.clone#235",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractPieItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractPieItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractPieItemLabelGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractPieItemLabelGenerator clone\u003d(AbstractPieItemLabelGenerator)super.clone();\n  if (this.numberFormat !\u003d null) {\n    clone.numberFormat\u003d(NumberFormat)this.numberFormat.clone();\n  }\n  if (this.percentFormat !\u003d null) {\n    clone.percentFormat\u003d(NumberFormat)this.percentFormat.clone();\n  }\n  return clone;\n}",
    "begin_line": 235,
    "end_line": 245,
    "comment": "/** \n * Returns an independent copy of the generator.\n * @return A clone.\n * @throws CloneNotSupportedException  should not happen.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#96",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator()",
    "snippet": "protected AbstractXYItemLabelGenerator(){\n  this(\"{2}\",NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());\n}",
    "begin_line": 96,
    "end_line": 99,
    "comment": "/** \n * Creates an item label generator using default number formatters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#111",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
    "snippet": "protected AbstractXYItemLabelGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){\n  if (formatString \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027formatString\u0027 argument.\");\n  }\n  if (xFormat \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027xFormat\u0027 argument.\");\n  }\n  if (yFormat \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027yFormat\u0027 argument.\");\n  }\n  this.formatString\u003dformatString;\n  this.xFormat\u003dxFormat;\n  this.yFormat\u003dyFormat;\n}",
    "begin_line": 111,
    "end_line": 128,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#140",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator(java.lang.String, java.text.DateFormat, java.text.NumberFormat)",
    "snippet": "protected AbstractXYItemLabelGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){\n  this(formatString,NumberFormat.getInstance(),yFormat);\n  this.xDateFormat\u003dxFormat;\n}",
    "begin_line": 140,
    "end_line": 147,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#163",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.DateFormat)",
    "snippet": "protected AbstractXYItemLabelGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){\n  this(formatString,xFormat,NumberFormat.getInstance());\n  this.yDateFormat\u003dyFormat;\n}",
    "begin_line": 163,
    "end_line": 168,
    "comment": "/** \n * Creates an item label generator using the specified formatters (a number formatter for the x-values and a date formatter for the y-values).\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator#180",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.AbstractXYItemLabelGenerator(java.lang.String, java.text.DateFormat, java.text.DateFormat)",
    "snippet": "protected AbstractXYItemLabelGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){\n  this(formatString,NumberFormat.getInstance(),NumberFormat.getInstance());\n  this.xDateFormat\u003dxFormat;\n  this.yDateFormat\u003dyFormat;\n}",
    "begin_line": 180,
    "end_line": 189,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getFormatString#197",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getFormatString()",
    "snippet": "public String getFormatString(){\n  return this.formatString;\n}",
    "begin_line": 197,
    "end_line": 199,
    "comment": "/** \n * Returns the format string (this controls the overall structure of the label).\n * @return The format string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getXFormat#206",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXFormat()",
    "snippet": "public NumberFormat getXFormat(){\n  return this.xFormat;\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Returns the number formatter for the x-values.\n * @return The number formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getXDateFormat#215",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXDateFormat()",
    "snippet": "public DateFormat getXDateFormat(){\n  return this.xDateFormat;\n}",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Returns the date formatter for the x-values.\n * @return The date formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getYFormat#224",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYFormat()",
    "snippet": "public NumberFormat getYFormat(){\n  return this.yFormat;\n}",
    "begin_line": 224,
    "end_line": 226,
    "comment": "/** \n * Returns the number formatter for the y-values.\n * @return The number formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getYDateFormat#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYDateFormat()",
    "snippet": "public DateFormat getYDateFormat(){\n  return this.yDateFormat;\n}",
    "begin_line": 233,
    "end_line": 235,
    "comment": "/** \n * Returns the date formatter for the y-values.\n * @return The date formatter (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.generateLabelString#246",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.generateLabelString(org.jfree.data.xy.XYDataset, int, int)",
    "snippet": "public String generateLabelString(XYDataset dataset,int series,int item){\n  String result\u003dnull;\n  Object[] items\u003dcreateItemArray(dataset,series,item);\n  result\u003dMessageFormat.format(this.formatString,items);\n  return result;\n}",
    "begin_line": 246,
    "end_line": 251,
    "comment": "/** \n * Generates a label string for an item in the dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The label (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.getNullYString#260",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.getNullYString()",
    "snippet": "public String getNullYString(){\n  return this.nullYString;\n}",
    "begin_line": 260,
    "end_line": 262,
    "comment": "/** \n * Returns the string representing a null value.\n * @return The string representing a null value.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.createItemArray#275",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.createItemArray(org.jfree.data.xy.XYDataset, int, int)",
    "snippet": "protected Object[] createItemArray(XYDataset dataset,int series,int item){\n  Object[] result\u003dnew Object[3];\n  result[0]\u003ddataset.getSeriesKey(series).toString();\n  double x\u003ddataset.getXValue(series,item);\n  if (this.xDateFormat !\u003d null) {\n    result[1]\u003dthis.xDateFormat.format(new Date((long)x));\n  }\n else {\n    result[1]\u003dthis.xFormat.format(x);\n  }\n  double y\u003ddataset.getYValue(series,item);\n  if (Double.isNaN(y) \u0026\u0026 dataset.getY(series,item) \u003d\u003d null) {\n    result[2]\u003dthis.nullYString;\n  }\n else {\n    if (this.yDateFormat !\u003d null) {\n      result[2]\u003dthis.yDateFormat.format(new Date((long)y));\n    }\n else {\n      result[2]\u003dthis.yFormat.format(y);\n    }\n  }\n  return result;\n}",
    "begin_line": 275,
    "end_line": 301,
    "comment": "/** \n * Creates the array of items that can be passed to the {@link MessageFormat} class for creating labels.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return An array of three items from the dataset formatted as\u003ccode\u003eString\u003c/code\u003e objects (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.equals#310",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractXYItemLabelGenerator)) {\n    return false;\n  }\n  AbstractXYItemLabelGenerator that\u003d(AbstractXYItemLabelGenerator)obj;\n  if (!this.formatString.equals(that.formatString)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.xFormat,that.xFormat)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.xDateFormat,that.xDateFormat)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.yFormat,that.yFormat)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.yDateFormat,that.yDateFormat)) {\n    return false;\n  }\n  if (!this.nullYString.equals(that.nullYString)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 310,
    "end_line": 337,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.hashCode#344",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  result\u003dHashUtilities.hashCode(result,this.formatString);\n  result\u003dHashUtilities.hashCode(result,this.xFormat);\n  result\u003dHashUtilities.hashCode(result,this.xDateFormat);\n  result\u003dHashUtilities.hashCode(result,this.yFormat);\n  result\u003dHashUtilities.hashCode(result,this.yDateFormat);\n  return result;\n}",
    "begin_line": 344,
    "end_line": 352,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemLabelGenerator.clone#361",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/AbstractXYItemLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.AbstractXYItemLabelGenerator",
    "signature": "org.jfree.chart.labels.AbstractXYItemLabelGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractXYItemLabelGenerator clone\u003d(AbstractXYItemLabelGenerator)super.clone();\n  if (this.xFormat !\u003d null) {\n    clone.xFormat\u003d(NumberFormat)this.xFormat.clone();\n  }\n  if (this.yFormat !\u003d null) {\n    clone.yFormat\u003d(NumberFormat)this.yFormat.clone();\n  }\n  if (this.xDateFormat !\u003d null) {\n    clone.xDateFormat\u003d(DateFormat)this.xDateFormat.clone();\n  }\n  if (this.yDateFormat !\u003d null) {\n    clone.yDateFormat\u003d(DateFormat)this.yDateFormat.clone();\n  }\n  return clone;\n}",
    "begin_line": 361,
    "end_line": 377,
    "comment": "/** \n * Returns an independent copy of the generator.\n * @return A clone.\n * @throws CloneNotSupportedException if cloning is not supported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelAnchor.ItemLabelAnchor#167",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
    "snippet": "private ItemLabelAnchor(String name){\n  this.name\u003dname;\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelAnchor.toString#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelAnchor.equals#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object o){\n  if (this \u003d\u003d o) {\n    return true;\n  }\n  if (!(o instanceof ItemLabelAnchor)) {\n    return false;\n  }\n  ItemLabelAnchor order\u003d(ItemLabelAnchor)o;\n  if (!this.name.equals(order.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 188,
    "end_line": 204,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param o  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelAnchor.readResolve#213",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelAnchor.java",
    "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
    "signature": "org.jfree.chart.labels.ItemLabelAnchor.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  ItemLabelAnchor result\u003dnull;\n  if (this.equals(ItemLabelAnchor.CENTER)) {\n    result\u003dItemLabelAnchor.CENTER;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE1)) {\n    result\u003dItemLabelAnchor.INSIDE1;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE2)) {\n    result\u003dItemLabelAnchor.INSIDE2;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE3)) {\n    result\u003dItemLabelAnchor.INSIDE3;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE4)) {\n    result\u003dItemLabelAnchor.INSIDE4;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE5)) {\n    result\u003dItemLabelAnchor.INSIDE5;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE6)) {\n    result\u003dItemLabelAnchor.INSIDE6;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE7)) {\n    result\u003dItemLabelAnchor.INSIDE7;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE8)) {\n    result\u003dItemLabelAnchor.INSIDE8;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE9)) {\n    result\u003dItemLabelAnchor.INSIDE9;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE10)) {\n    result\u003dItemLabelAnchor.INSIDE10;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE11)) {\n    result\u003dItemLabelAnchor.INSIDE11;\n  }\n else   if (this.equals(ItemLabelAnchor.INSIDE12)) {\n    result\u003dItemLabelAnchor.INSIDE12;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE1)) {\n    result\u003dItemLabelAnchor.OUTSIDE1;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE2)) {\n    result\u003dItemLabelAnchor.OUTSIDE2;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE3)) {\n    result\u003dItemLabelAnchor.OUTSIDE3;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE4)) {\n    result\u003dItemLabelAnchor.OUTSIDE4;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE5)) {\n    result\u003dItemLabelAnchor.OUTSIDE5;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE6)) {\n    result\u003dItemLabelAnchor.OUTSIDE6;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE7)) {\n    result\u003dItemLabelAnchor.OUTSIDE7;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE8)) {\n    result\u003dItemLabelAnchor.OUTSIDE8;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE9)) {\n    result\u003dItemLabelAnchor.OUTSIDE9;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE10)) {\n    result\u003dItemLabelAnchor.OUTSIDE10;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE11)) {\n    result\u003dItemLabelAnchor.OUTSIDE11;\n  }\n else   if (this.equals(ItemLabelAnchor.OUTSIDE12)) {\n    result\u003dItemLabelAnchor.OUTSIDE12;\n  }\n  return result;\n}",
    "begin_line": 213,
    "end_line": 291,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.ItemLabelPosition#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition()",
    "snippet": "public ItemLabelPosition(){\n  this(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER,TextAnchor.CENTER,0.0);\n}",
    "begin_line": 76,
    "end_line": 79,
    "comment": "/** \n * Creates a new position record with default settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.ItemLabelPosition#88",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
    "snippet": "public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,TextAnchor textAnchor){\n  this(itemLabelAnchor,textAnchor,TextAnchor.CENTER,0.0);\n}",
    "begin_line": 88,
    "end_line": 91,
    "comment": "/** \n * Creates a new position record (with zero rotation).\n * @param itemLabelAnchor  the item label anchor (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param textAnchor  the text anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.ItemLabelPosition#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
    "snippet": "public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,TextAnchor textAnchor,TextAnchor rotationAnchor,double angle){\n  if (itemLabelAnchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027itemLabelAnchor\u0027 argument.\");\n  }\n  if (textAnchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027textAnchor\u0027 argument.\");\n  }\n  if (rotationAnchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rotationAnchor\u0027 argument.\");\n  }\n  this.itemLabelAnchor\u003ditemLabelAnchor;\n  this.textAnchor\u003dtextAnchor;\n  this.rotationAnchor\u003drotationAnchor;\n  this.angle\u003dangle;\n}",
    "begin_line": 106,
    "end_line": 128,
    "comment": "/** \n * Creates a new position record.  The item label anchor is a point relative to the data item (dot, bar or other visual item) on a chart. The item label is aligned by aligning the text anchor with the item label anchor.\n * @param itemLabelAnchor  the item label anchor (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param textAnchor  the text anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param rotationAnchor  the rotation anchor (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param angle  the rotation angle (in radians).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.getItemLabelAnchor#135",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.getItemLabelAnchor()",
    "snippet": "public ItemLabelAnchor getItemLabelAnchor(){\n  return this.itemLabelAnchor;\n}",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * Returns the item label anchor.\n * @return The item label anchor (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.getTextAnchor#144",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.getTextAnchor()",
    "snippet": "public TextAnchor getTextAnchor(){\n  return this.textAnchor;\n}",
    "begin_line": 144,
    "end_line": 146,
    "comment": "/** \n * Returns the text anchor.\n * @return The text anchor (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.getRotationAnchor#153",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.getRotationAnchor()",
    "snippet": "public TextAnchor getRotationAnchor(){\n  return this.rotationAnchor;\n}",
    "begin_line": 153,
    "end_line": 155,
    "comment": "/** \n * Returns the rotation anchor point.\n * @return The rotation anchor point (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.getAngle#162",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.getAngle()",
    "snippet": "public double getAngle(){\n  return this.angle;\n}",
    "begin_line": 162,
    "end_line": 164,
    "comment": "/** \n * Returns the angle of rotation for the label.\n * @return The angle (in radians).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ItemLabelPosition.equals#173",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/ItemLabelPosition.java",
    "class_name": "org.jfree.chart.labels.ItemLabelPosition",
    "signature": "org.jfree.chart.labels.ItemLabelPosition.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ItemLabelPosition)) {\n    return false;\n  }\n  ItemLabelPosition that\u003d(ItemLabelPosition)obj;\n  if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {\n    return false;\n  }\n  if (!this.textAnchor.equals(that.textAnchor)) {\n    return false;\n  }\n  if (!this.rotationAnchor.equals(that.rotationAnchor)) {\n    return false;\n  }\n  if (this.angle !\u003d that.angle) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 173,
    "end_line": 194,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator()",
    "snippet": "public StandardPieSectionLabelGenerator(){\n  this(DEFAULT_SECTION_LABEL_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance());\n}",
    "begin_line": 92,
    "end_line": 95,
    "comment": "/** \n * Creates a new section label generator using {@link #DEFAULT_SECTION_LABEL_FORMAT} as the label format string, andplatform default number and percentage formatters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.util.Locale)",
    "snippet": "public StandardPieSectionLabelGenerator(Locale locale){\n  this(DEFAULT_SECTION_LABEL_FORMAT,locale);\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Creates a new instance for the specified locale.\n * @param locale  the local (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#114",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String)",
    "snippet": "public StandardPieSectionLabelGenerator(String labelFormat){\n  this(labelFormat,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance());\n}",
    "begin_line": 114,
    "end_line": 117,
    "comment": "/** \n * Creates a new section label generator using the specified label format string, and platform default number and percentage formatters.\n * @param labelFormat  the label format (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#127",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.util.Locale)",
    "snippet": "public StandardPieSectionLabelGenerator(String labelFormat,Locale locale){\n  this(labelFormat,NumberFormat.getNumberInstance(locale),NumberFormat.getPercentInstance(locale));\n}",
    "begin_line": 127,
    "end_line": 130,
    "comment": "/** \n * Creates a new instance for the specified locale.\n * @param labelFormat  the label format (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param locale  the local (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator#142",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.StandardPieSectionLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
    "snippet": "public StandardPieSectionLabelGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){\n  super(labelFormat,numberFormat,percentFormat);\n  this.attributedLabels\u003dnew ObjectList();\n}",
    "begin_line": 142,
    "end_line": 146,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param labelFormat  the label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param numberFormat  the format object for the values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param percentFormat  the format object for the percentages(\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.getAttributedLabel#156",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.getAttributedLabel(int)",
    "snippet": "public AttributedString getAttributedLabel(int section){\n  return (AttributedString)this.attributedLabels.get(section);\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Returns the attributed label for a section, or \u003ccode\u003enull\u003c/code\u003e if none is defined.\n * @param section  the section index.\n * @return The attributed label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.setAttributedLabel#166",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.setAttributedLabel(int, java.text.AttributedString)",
    "snippet": "public void setAttributedLabel(int section,AttributedString label){\n  this.attributedLabels.set(section,label);\n}",
    "begin_line": 166,
    "end_line": 168,
    "comment": "/** \n * Sets the attributed label for a section.\n * @param section  the section index.\n * @param label  the label (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.generateSectionLabel#178",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable)",
    "snippet": "public String generateSectionLabel(PieDataset dataset,Comparable key){\n  return super.generateSectionLabel(dataset,key);\n}",
    "begin_line": 178,
    "end_line": 180,
    "comment": "/** \n * Generates a label for a pie section.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the section key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The label (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.generateAttributedSectionLabel#209",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.generateAttributedSectionLabel(org.jfree.data.general.PieDataset, java.lang.Comparable)",
    "snippet": "public AttributedString generateAttributedSectionLabel(PieDataset dataset,Comparable key){\n  return getAttributedLabel(dataset.getIndex(key));\n}",
    "begin_line": 209,
    "end_line": 212,
    "comment": "/** \n * Generates an attributed label for the specified series, or \u003ccode\u003enull\u003c/code\u003e if no attributed label is available (in which case, the string returned by {@link #generateSectionLabel(PieDataset,Comparable)} willprovide the fallback).  Only certain attributes are recognised by the code that ultimately displays the labels: \u003cul\u003e \u003cli\u003e {@link TextAttribute#FONT}: will set the font;\u003c/li\u003e \u003cli\u003e {@link TextAttribute#POSTURE}: a value of {@link TextAttribute#POSTURE_OBLIQUE} will add {@link Font#ITALIC} tothe current font;\u003c/li\u003e \u003cli\u003e {@link TextAttribute#WEIGHT}: a value of {@link TextAttribute#WEIGHT_BOLD} will add {@link Font#BOLD} to thecurrent font;\u003c/li\u003e \u003cli\u003e {@link TextAttribute#FOREGROUND}: this will set the  {@link Paint}for the current\u003c/li\u003e \u003cli\u003e {@link TextAttribute#SUPERSCRIPT}: the values {@link TextAttribute#SUPERSCRIPT_SUB} and{@link TextAttribute#SUPERSCRIPT_SUPER} are recognised.\u003c/li\u003e\u003c/ul\u003e\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the key.\n * @return An attributed label (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.equals#221",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StandardPieSectionLabelGenerator)) {\n    return false;\n  }\n  StandardPieSectionLabelGenerator that\u003d(StandardPieSectionLabelGenerator)obj;\n  if (!this.attributedLabels.equals(that.attributedLabels)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 221,
    "end_line": 237,
    "comment": "/** \n * Tests the generator for equality with an arbitrary object.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieSectionLabelGenerator.clone#246",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieSectionLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieSectionLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardPieSectionLabelGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 246,
    "end_line": 248,
    "comment": "/** \n * Returns an independent copy of the generator.\n * @return A clone.\n * @throws CloneNotSupportedException  should not happen.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#90",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator()",
    "snippet": "public StandardPieToolTipGenerator(){\n  this(DEFAULT_TOOLTIP_FORMAT);\n}",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Creates an item label generator using default number formatters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#102",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.util.Locale)",
    "snippet": "public StandardPieToolTipGenerator(Locale locale){\n  this(DEFAULT_TOOLTIP_FORMAT,locale);\n}",
    "begin_line": 102,
    "end_line": 104,
    "comment": "/** \n * Creates a pie tool tip generator for the specified locale, using the default format string.\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#111",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String)",
    "snippet": "public StandardPieToolTipGenerator(String labelFormat){\n  this(labelFormat,Locale.getDefault());\n}",
    "begin_line": 111,
    "end_line": 113,
    "comment": "/** \n * Creates a pie tool tip generator for the default locale.\n * @param labelFormat  the label format (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#123",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.util.Locale)",
    "snippet": "public StandardPieToolTipGenerator(String labelFormat,Locale locale){\n  this(labelFormat,NumberFormat.getNumberInstance(locale),NumberFormat.getPercentInstance(locale));\n}",
    "begin_line": 123,
    "end_line": 126,
    "comment": "/** \n * Creates a pie tool tip generator for the specified locale.\n * @param labelFormat  the label format (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param locale  the locale (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.StandardPieToolTipGenerator#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.StandardPieToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
    "snippet": "public StandardPieToolTipGenerator(String labelFormat,NumberFormat numberFormat,NumberFormat percentFormat){\n  super(labelFormat,numberFormat,percentFormat);\n}",
    "begin_line": 138,
    "end_line": 141,
    "comment": "/** \n * Creates an item label generator using the specified number formatters.\n * @param labelFormat  the label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param numberFormat  the format object for the values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param percentFormat  the format object for the percentages(\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.generateToolTip#151",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.generateToolTip(org.jfree.data.general.PieDataset, java.lang.Comparable)",
    "snippet": "public String generateToolTip(PieDataset dataset,Comparable key){\n  return generateSectionLabel(dataset,key);\n}",
    "begin_line": 151,
    "end_line": 153,
    "comment": "/** \n * Generates a tool tip text item for one section in a pie chart.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the section key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The tool tip text (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardPieToolTipGenerator.clone#162",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardPieToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardPieToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardPieToolTipGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 162,
    "end_line": 164,
    "comment": "/** \n * Returns an independent copy of the generator.\n * @return A clone.\n * @throws CloneNotSupportedException  should not happen.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator#77",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator()",
    "snippet": "public StandardXYSeriesLabelGenerator(){\n  this(DEFAULT_LABEL_FORMAT);\n}",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Creates a default series label generator (uses {@link #DEFAULT_LABEL_FORMAT}).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator#86",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.StandardXYSeriesLabelGenerator(java.lang.String)",
    "snippet": "public StandardXYSeriesLabelGenerator(String format){\n  if (format \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027format\u0027 argument.\");\n  }\n  this.formatPattern\u003dformat;\n}",
    "begin_line": 86,
    "end_line": 91,
    "comment": "/** \n * Creates a new series label generator.\n * @param format  the format pattern (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.generateLabel#102",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.generateLabel(org.jfree.data.xy.XYDataset, int)",
    "snippet": "public String generateLabel(XYDataset dataset,int series){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  String label\u003dMessageFormat.format(this.formatPattern,createItemArray(dataset,series));\n  return label;\n}",
    "begin_line": 102,
    "end_line": 110,
    "comment": "/** \n * Generates a label for the specified series.  This label will be used for the chart legend.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param series  the series.\n * @return A series label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.createItemArray#121",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.createItemArray(org.jfree.data.xy.XYDataset, int)",
    "snippet": "protected Object[] createItemArray(XYDataset dataset,int series){\n  Object[] result\u003dnew Object[1];\n  result[0]\u003ddataset.getSeriesKey(series).toString();\n  return result;\n}",
    "begin_line": 121,
    "end_line": 125,
    "comment": "/** \n * Creates the array of items that can be passed to the {@link MessageFormat} class for creating labels.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param series  the series (zero-based index).\n * @return The items (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.clone#136",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Returns an independent copy of the generator.  This is unnecessary, because instances are immutable anyway, but we retain this behaviour for backwards compatibility.\n * @return A clone.\n * @throws CloneNotSupportedException if cloning is not supported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.equals#147",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StandardXYSeriesLabelGenerator)) {\n    return false;\n  }\n  StandardXYSeriesLabelGenerator that\u003d(StandardXYSeriesLabelGenerator)obj;\n  if (!this.formatPattern.equals(that.formatPattern)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 147,
    "end_line": 160,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYSeriesLabelGenerator.hashCode#167",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYSeriesLabelGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator",
    "signature": "org.jfree.chart.labels.StandardXYSeriesLabelGenerator.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  result\u003dHashUtilities.hashCode(result,this.formatPattern);\n  return result;\n}",
    "begin_line": 167,
    "end_line": 171,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.getTimeSeriesInstance#73",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.getTimeSeriesInstance()",
    "snippet": "public static StandardXYToolTipGenerator getTimeSeriesInstance(){\n  return new StandardXYToolTipGenerator(DEFAULT_TOOL_TIP_FORMAT,DateFormat.getInstance(),NumberFormat.getInstance());\n}",
    "begin_line": 73,
    "end_line": 76,
    "comment": "/** \n * Returns a tool tip generator that formats the x-values as dates and the y-values as numbers.\n * @return A tool tip generator (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#81",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator()",
    "snippet": "public StandardXYToolTipGenerator(){\n  this(DEFAULT_TOOL_TIP_FORMAT,NumberFormat.getNumberInstance(),NumberFormat.getNumberInstance());\n}",
    "begin_line": 81,
    "end_line": 84,
    "comment": "/** \n * Creates a tool tip generator using default number formatters.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#96",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
    "snippet": "public StandardXYToolTipGenerator(String formatString,NumberFormat xFormat,NumberFormat yFormat){\n  super(formatString,xFormat,yFormat);\n}",
    "begin_line": 96,
    "end_line": 101,
    "comment": "/** \n * Creates a tool tip generator using the specified number formatters.\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#113",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator(java.lang.String, java.text.DateFormat, java.text.NumberFormat)",
    "snippet": "public StandardXYToolTipGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){\n  super(formatString,xFormat,yFormat);\n}",
    "begin_line": 113,
    "end_line": 118,
    "comment": "/** \n * Creates a tool tip generator using the specified number formatters.\n * @param formatString  the label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#134",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator(java.lang.String, java.text.NumberFormat, java.text.DateFormat)",
    "snippet": "public StandardXYToolTipGenerator(String formatString,NumberFormat xFormat,DateFormat yFormat){\n  super(formatString,xFormat,yFormat);\n}",
    "begin_line": 134,
    "end_line": 138,
    "comment": "/** \n * Creates a tool tip generator using the specified formatters (a number formatter for the x-values and a date formatter for the y-values).\n * @param formatString  the item label format string (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.StandardXYToolTipGenerator#149",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.StandardXYToolTipGenerator(java.lang.String, java.text.DateFormat, java.text.DateFormat)",
    "snippet": "public StandardXYToolTipGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){\n  super(formatString,xFormat,yFormat);\n}",
    "begin_line": 149,
    "end_line": 154,
    "comment": "/** \n * Creates a tool tip generator using the specified date formatters.\n * @param formatString  the label format string (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param xFormat  the format object for the x values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param yFormat  the format object for the y values (\u003ccode\u003enull\u003c/code\u003enot permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.generateToolTip#165",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.generateToolTip(org.jfree.data.xy.XYDataset, int, int)",
    "snippet": "public String generateToolTip(XYDataset dataset,int series,int item){\n  return generateLabelString(dataset,series,item);\n}",
    "begin_line": 165,
    "end_line": 167,
    "comment": "/** \n * Generates the tool tip text for an item in a dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The tooltip text (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.equals#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StandardXYToolTipGenerator)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 176,
    "end_line": 184,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYToolTipGenerator.clone#193",
    "is_bug": true,
    "src_path": "org/jfree/chart/labels/StandardXYToolTipGenerator.java",
    "class_name": "org.jfree.chart.labels.StandardXYToolTipGenerator",
    "signature": "org.jfree.chart.labels.StandardXYToolTipGenerator.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 193,
    "end_line": 195,
    "comment": "/** \n * Returns an independent copy of the generator.\n * @return A clone.\n * @throws CloneNotSupportedException if cloning is not supported.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.AbstractPieLabelDistributor#60",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.AbstractPieLabelDistributor()",
    "snippet": "public AbstractPieLabelDistributor(){\n  this.labels\u003dnew java.util.ArrayList();\n}",
    "begin_line": 60,
    "end_line": 62,
    "comment": "/** \n * Creates a new instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.getPieLabelRecord#71",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.getPieLabelRecord(int)",
    "snippet": "public PieLabelRecord getPieLabelRecord(int index){\n  return (PieLabelRecord)this.labels.get(index);\n}",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Returns a label record from the list.\n * @param index  the index.\n * @return The label record.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.addPieLabelRecord#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.addPieLabelRecord(org.jfree.chart.plot.PieLabelRecord)",
    "snippet": "public void addPieLabelRecord(PieLabelRecord record){\n  if (record \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027record\u0027 argument.\");\n  }\n  this.labels.add(record);\n}",
    "begin_line": 80,
    "end_line": 85,
    "comment": "/** \n * Adds a label record.\n * @param record  the label record (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.getItemCount#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.getItemCount()",
    "snippet": "public int getItemCount(){\n  return this.labels.size();\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns the number of items in the list.\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.clear#99",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.clear()",
    "snippet": "public void clear(){\n  this.labels.clear();\n}",
    "begin_line": 99,
    "end_line": 101,
    "comment": "/** \n * Clears the list of labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractPieLabelDistributor.distributeLabels#110",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/AbstractPieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.AbstractPieLabelDistributor",
    "signature": "org.jfree.chart.plot.AbstractPieLabelDistributor.distributeLabels(double, double)",
    "snippet": "public abstract void distributeLabels(double minY,double height);",
    "begin_line": 110,
    "end_line": 110,
    "comment": "/** \n * Called by the  {@link PiePlot} class.  Implementations should distributethe labels in this.labels then return.\n * @param minY  the y-coordinate for the top of the label area.\n * @param height  the height of the label area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.DatasetRenderingOrder#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
    "snippet": "private DatasetRenderingOrder(String name){\n  this.name\u003dname;\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.toString#89",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 89,
    "end_line": 91,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.equals#101",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof DatasetRenderingOrder)) {\n    return false;\n  }\n  DatasetRenderingOrder order\u003d(DatasetRenderingOrder)obj;\n  if (!this.name.equals(order.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 101,
    "end_line": 113,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.hashCode#120",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetRenderingOrder.readResolve#131",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DatasetRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
    "signature": "org.jfree.chart.plot.DatasetRenderingOrder.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(DatasetRenderingOrder.FORWARD)) {\n    return DatasetRenderingOrder.FORWARD;\n  }\n else   if (this.equals(DatasetRenderingOrder.REVERSE)) {\n    return DatasetRenderingOrder.REVERSE;\n  }\n  return null;\n}",
    "begin_line": 131,
    "end_line": 139,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
    "snippet": "public DefaultDrawingSupplier(){\n  this(DEFAULT_PAINT_SEQUENCE,DEFAULT_FILL_PAINT_SEQUENCE,DEFAULT_OUTLINE_PAINT_SEQUENCE,DEFAULT_STROKE_SEQUENCE,DEFAULT_OUTLINE_STROKE_SEQUENCE,DEFAULT_SHAPE_SEQUENCE);\n}",
    "begin_line": 148,
    "end_line": 156,
    "comment": "/** \n * Creates a new supplier, with default sequences for fill paint, outline paint, stroke and shapes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#167",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
    "snippet": "public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){\n  this.paintSequence\u003dpaintSequence;\n  this.fillPaintSequence\u003dDEFAULT_FILL_PAINT_SEQUENCE;\n  this.outlinePaintSequence\u003doutlinePaintSequence;\n  this.strokeSequence\u003dstrokeSequence;\n  this.outlineStrokeSequence\u003doutlineStrokeSequence;\n  this.shapeSequence\u003dshapeSequence;\n}",
    "begin_line": 167,
    "end_line": 180,
    "comment": "/** \n * Creates a new supplier.\n * @param paintSequence  the fill paint sequence.\n * @param outlinePaintSequence  the outline paint sequence.\n * @param strokeSequence  the stroke sequence.\n * @param outlineStrokeSequence  the outline stroke sequence.\n * @param shapeSequence  the shape sequence.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
    "snippet": "public DefaultDrawingSupplier(Paint[] paintSequence,Paint[] fillPaintSequence,Paint[] outlinePaintSequence,Stroke[] strokeSequence,Stroke[] outlineStrokeSequence,Shape[] shapeSequence){\n  this.paintSequence\u003dpaintSequence;\n  this.fillPaintSequence\u003dfillPaintSequence;\n  this.outlinePaintSequence\u003doutlinePaintSequence;\n  this.strokeSequence\u003dstrokeSequence;\n  this.outlineStrokeSequence\u003doutlineStrokeSequence;\n  this.shapeSequence\u003dshapeSequence;\n}",
    "begin_line": 194,
    "end_line": 205,
    "comment": "/** \n * Creates a new supplier.\n * @param paintSequence  the paint sequence.\n * @param fillPaintSequence  the fill paint sequence.\n * @param outlinePaintSequence  the outline paint sequence.\n * @param strokeSequence  the stroke sequence.\n * @param outlineStrokeSequence  the outline stroke sequence.\n * @param shapeSequence  the shape sequence.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextPaint#212",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint()",
    "snippet": "public Paint getNextPaint(){\n  Paint result\u003dthis.paintSequence[this.paintIndex % this.paintSequence.length];\n  this.paintIndex++;\n  return result;\n}",
    "begin_line": 212,
    "end_line": 217,
    "comment": "/** \n * Returns the next paint in the sequence.\n * @return The paint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextOutlinePaint#224",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlinePaint()",
    "snippet": "public Paint getNextOutlinePaint(){\n  Paint result\u003dthis.outlinePaintSequence[this.outlinePaintIndex % this.outlinePaintSequence.length];\n  this.outlinePaintIndex++;\n  return result;\n}",
    "begin_line": 224,
    "end_line": 229,
    "comment": "/** \n * Returns the next outline paint in the sequence.\n * @return The paint.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextFillPaint#238",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextFillPaint()",
    "snippet": "public Paint getNextFillPaint(){\n  Paint result\u003dthis.fillPaintSequence[this.fillPaintIndex % this.fillPaintSequence.length];\n  this.fillPaintIndex++;\n  return result;\n}",
    "begin_line": 238,
    "end_line": 243,
    "comment": "/** \n * Returns the next fill paint in the sequence.\n * @return The paint.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextStroke#250",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextStroke()",
    "snippet": "public Stroke getNextStroke(){\n  Stroke result\u003dthis.strokeSequence[this.strokeIndex % this.strokeSequence.length];\n  this.strokeIndex++;\n  return result;\n}",
    "begin_line": 250,
    "end_line": 255,
    "comment": "/** \n * Returns the next stroke in the sequence.\n * @return The stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextOutlineStroke#262",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlineStroke()",
    "snippet": "public Stroke getNextOutlineStroke(){\n  Stroke result\u003dthis.outlineStrokeSequence[this.outlineStrokeIndex % this.outlineStrokeSequence.length];\n  this.outlineStrokeIndex++;\n  return result;\n}",
    "begin_line": 262,
    "end_line": 267,
    "comment": "/** \n * Returns the next outline stroke in the sequence.\n * @return The stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.getNextShape#274",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextShape()",
    "snippet": "public Shape getNextShape(){\n  Shape result\u003dthis.shapeSequence[this.shapeIndex % this.shapeSequence.length];\n  this.shapeIndex++;\n  return result;\n}",
    "begin_line": 274,
    "end_line": 279,
    "comment": "/** \n * Returns the next shape in the sequence.\n * @return The shape.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
    "snippet": "public static Shape[] createStandardSeriesShapes(){\n  Shape[] result\u003dnew Shape[10];\n  double size\u003d6.0;\n  double delta\u003dsize / 2.0;\n  int[] xpoints\u003dnull;\n  int[] ypoints\u003dnull;\n  result[0]\u003dnew Rectangle2D.Double(-delta,-delta,size,size);\n  result[1]\u003dnew Ellipse2D.Double(-delta,-delta,size,size);\n  xpoints\u003dintArray(0.0,delta,-delta);\n  ypoints\u003dintArray(-delta,delta,delta);\n  result[2]\u003dnew Polygon(xpoints,ypoints,3);\n  xpoints\u003dintArray(0.0,delta,0.0,-delta);\n  ypoints\u003dintArray(-delta,0.0,delta,0.0);\n  result[3]\u003dnew Polygon(xpoints,ypoints,4);\n  result[4]\u003dnew Rectangle2D.Double(-delta,-delta / 2,size,size / 2);\n  xpoints\u003dintArray(-delta,+delta,0.0);\n  ypoints\u003dintArray(-delta,-delta,delta);\n  result[5]\u003dnew Polygon(xpoints,ypoints,3);\n  result[6]\u003dnew Ellipse2D.Double(-delta,-delta / 2,size,size / 2);\n  xpoints\u003dintArray(-delta,delta,-delta);\n  ypoints\u003dintArray(-delta,0.0,delta);\n  result[7]\u003dnew Polygon(xpoints,ypoints,3);\n  result[8]\u003dnew Rectangle2D.Double(-delta / 2,-delta,size / 2,size);\n  xpoints\u003dintArray(-delta,delta,delta);\n  ypoints\u003dintArray(0.0,-delta,+delta);\n  result[9]\u003dnew Polygon(xpoints,ypoints,3);\n  return result;\n}",
    "begin_line": 287,
    "end_line": 337,
    "comment": "/** \n * Creates an array of standard shapes to display for the items in series on charts.\n * @return The array of shapes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.equals#346",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DefaultDrawingSupplier)) {\n    return false;\n  }\n  DefaultDrawingSupplier that\u003d(DefaultDrawingSupplier)obj;\n  if (!Arrays.equals(this.paintSequence,that.paintSequence)) {\n    return false;\n  }\n  if (this.paintIndex !\u003d that.paintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlinePaintSequence,that.outlinePaintSequence)) {\n    return false;\n  }\n  if (this.outlinePaintIndex !\u003d that.outlinePaintIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.strokeSequence,that.strokeSequence)) {\n    return false;\n  }\n  if (this.strokeIndex !\u003d that.strokeIndex) {\n    return false;\n  }\n  if (!Arrays.equals(this.outlineStrokeSequence,that.outlineStrokeSequence)) {\n    return false;\n  }\n  if (this.outlineStrokeIndex !\u003d that.outlineStrokeIndex) {\n    return false;\n  }\n  if (!equalShapes(this.shapeSequence,that.shapeSequence)) {\n    return false;\n  }\n  if (this.shapeIndex !\u003d that.shapeIndex) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 346,
    "end_line": 392,
    "comment": "/** \n * Tests this object for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.equalShapes#402",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equalShapes(java.awt.Shape[], java.awt.Shape[])",
    "snippet": "private boolean equalShapes(Shape[] s1,Shape[] s2){\n  if (s1 \u003d\u003d null) {\n    return s2 \u003d\u003d null;\n  }\n  if (s2 \u003d\u003d null) {\n    return false;\n  }\n  if (s1.length !\u003d s2.length) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c s1.length; i++) {\n    if (!ShapeUtilities.equal(s1[i],s2[i])) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 402,
    "end_line": 418,
    "comment": "/** \n * A utility method for testing the equality of two arrays of shapes.\n * @param s1  the first array (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param s2  the second array (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.writeObject#427",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int paintCount\u003dthis.paintSequence.length;\n  stream.writeInt(paintCount);\n  for (int i\u003d0; i \u003c paintCount; i++) {\n    SerialUtilities.writePaint(this.paintSequence[i],stream);\n  }\n  int outlinePaintCount\u003dthis.outlinePaintSequence.length;\n  stream.writeInt(outlinePaintCount);\n  for (int i\u003d0; i \u003c outlinePaintCount; i++) {\n    SerialUtilities.writePaint(this.outlinePaintSequence[i],stream);\n  }\n  int strokeCount\u003dthis.strokeSequence.length;\n  stream.writeInt(strokeCount);\n  for (int i\u003d0; i \u003c strokeCount; i++) {\n    SerialUtilities.writeStroke(this.strokeSequence[i],stream);\n  }\n  int outlineStrokeCount\u003dthis.outlineStrokeSequence.length;\n  stream.writeInt(outlineStrokeCount);\n  for (int i\u003d0; i \u003c outlineStrokeCount; i++) {\n    SerialUtilities.writeStroke(this.outlineStrokeSequence[i],stream);\n  }\n  int shapeCount\u003dthis.shapeSequence.length;\n  stream.writeInt(shapeCount);\n  for (int i\u003d0; i \u003c shapeCount; i++) {\n    SerialUtilities.writeShape(this.shapeSequence[i],stream);\n  }\n}",
    "begin_line": 427,
    "end_line": 460,
    "comment": "/** \n * Handles serialization.\n * @param stream  the output stream.\n * @throws IOException if there is an I/O problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.readObject#470",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  int paintCount\u003dstream.readInt();\n  this.paintSequence\u003dnew Paint[paintCount];\n  for (int i\u003d0; i \u003c paintCount; i++) {\n    this.paintSequence[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  int outlinePaintCount\u003dstream.readInt();\n  this.outlinePaintSequence\u003dnew Paint[outlinePaintCount];\n  for (int i\u003d0; i \u003c outlinePaintCount; i++) {\n    this.outlinePaintSequence[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  int strokeCount\u003dstream.readInt();\n  this.strokeSequence\u003dnew Stroke[strokeCount];\n  for (int i\u003d0; i \u003c strokeCount; i++) {\n    this.strokeSequence[i]\u003dSerialUtilities.readStroke(stream);\n  }\n  int outlineStrokeCount\u003dstream.readInt();\n  this.outlineStrokeSequence\u003dnew Stroke[outlineStrokeCount];\n  for (int i\u003d0; i \u003c outlineStrokeCount; i++) {\n    this.outlineStrokeSequence[i]\u003dSerialUtilities.readStroke(stream);\n  }\n  int shapeCount\u003dstream.readInt();\n  this.shapeSequence\u003dnew Shape[shapeCount];\n  for (int i\u003d0; i \u003c shapeCount; i++) {\n    this.shapeSequence[i]\u003dSerialUtilities.readShape(stream);\n  }\n}",
    "begin_line": 470,
    "end_line": 504,
    "comment": "/** \n * Restores a serialized object.\n * @param stream  the input stream.\n * @throws IOException if there is an I/O problem.\n * @throws ClassNotFoundException if there is a problem loading a class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.intArray#516",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
    "snippet": "private static int[] intArray(double a,double b,double c){\n  return new int[]{(int)a,(int)b,(int)c};\n}",
    "begin_line": 516,
    "end_line": 518,
    "comment": "/** \n * Helper method to avoid lots of explicit casts in getShape().  Returns an array containing the provided doubles cast to ints.\n * @param a  x\n * @param b  y\n * @param c  z\n * @return int[3] with converted params.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.intArray#531",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
    "snippet": "private static int[] intArray(double a,double b,double c,double d){\n  return new int[]{(int)a,(int)b,(int)c,(int)d};\n}",
    "begin_line": 531,
    "end_line": 533,
    "comment": "/** \n * Helper method to avoid lots of explicit casts in getShape().  Returns an array containing the provided doubles cast to ints.\n * @param a  x\n * @param b  y\n * @param c  z\n * @param d  t\n * @return int[4] with converted params.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultDrawingSupplier.clone#543",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/DefaultDrawingSupplier.java",
    "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
    "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DefaultDrawingSupplier clone\u003d(DefaultDrawingSupplier)super.clone();\n  return clone;\n}",
    "begin_line": 543,
    "end_line": 546,
    "comment": "/** \n * Returns a clone.\n * @return A clone.\n * @throws CloneNotSupportedException if a component of the supplier doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.PieLabelDistributor#62",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.PieLabelDistributor(int)",
    "snippet": "public PieLabelDistributor(int labelCount){\n  super();\n}",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * Creates a new distributor.\n * @param labelCount  the number of labels (ignored).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.distributeLabels#72",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.distributeLabels(double, double)",
    "snippet": "public void distributeLabels(double minY,double height){\n  sort();\n  if (isOverlap()) {\n    adjustDownwards(minY,height);\n  }\n  if (isOverlap()) {\n    adjustUpwards(minY,height);\n  }\n  if (isOverlap()) {\n    spreadEvenly(minY,height);\n  }\n}",
    "begin_line": 72,
    "end_line": 89,
    "comment": "/** \n * Distributes the labels.\n * @param minY  the minimum y-coordinate in Java2D-space.\n * @param height  the available height (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.isOverlap#97",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.isOverlap()",
    "snippet": "private boolean isOverlap(){\n  double y\u003d0.0;\n  for (int i\u003d0; i \u003c this.labels.size(); i++) {\n    PieLabelRecord plr\u003dgetPieLabelRecord(i);\n    if (y \u003e plr.getLowerY()) {\n      return true;\n    }\n    y\u003dplr.getUpperY();\n  }\n  return false;\n}",
    "begin_line": 97,
    "end_line": 107,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if there are overlapping labels in the list, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.adjustInwards#113",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.adjustInwards()",
    "snippet": "protected void adjustInwards(){\n  int lower\u003d0;\n  int upper\u003dthis.labels.size() - 1;\n  while (upper \u003e lower) {\n    if (lower \u003c upper - 1) {\n      PieLabelRecord r0\u003dgetPieLabelRecord(lower);\n      PieLabelRecord r1\u003dgetPieLabelRecord(lower + 1);\n      if (r1.getLowerY() \u003c r0.getUpperY()) {\n        double adjust\u003dr0.getUpperY() - r1.getLowerY() + this.minGap;\n        r1.setAllocatedY(r1.getAllocatedY() + adjust);\n      }\n    }\n    PieLabelRecord r2\u003dgetPieLabelRecord(upper - 1);\n    PieLabelRecord r3\u003dgetPieLabelRecord(upper);\n    if (r2.getUpperY() \u003e r3.getLowerY()) {\n      double adjust\u003d(r2.getUpperY() - r3.getLowerY()) + this.minGap;\n      r3.setAllocatedY(r3.getAllocatedY() + adjust);\n    }\n    lower++;\n    upper--;\n  }\n}",
    "begin_line": 113,
    "end_line": 135,
    "comment": "/** \n * Adjusts the y-coordinate for the labels in towards the center in an attempt to fix overlapping.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.adjustDownwards#144",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.adjustDownwards(double, double)",
    "snippet": "protected void adjustDownwards(double minY,double height){\n  for (int i\u003d0; i \u003c this.labels.size() - 1; i++) {\n    PieLabelRecord record0\u003dgetPieLabelRecord(i);\n    PieLabelRecord record1\u003dgetPieLabelRecord(i + 1);\n    if (record1.getLowerY() \u003c record0.getUpperY()) {\n      record1.setAllocatedY(Math.min(minY + height - record1.getLabelHeight() / 2.0,record0.getUpperY() + this.minGap + record1.getLabelHeight() / 2.0));\n    }\n  }\n}",
    "begin_line": 144,
    "end_line": 155,
    "comment": "/** \n * Any labels that are overlapping are moved down in an attempt to eliminate the overlaps.\n * @param minY  the minimum y value (in Java2D coordinate space).\n * @param height  the height available for all labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.adjustUpwards#164",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.adjustUpwards(double, double)",
    "snippet": "protected void adjustUpwards(double minY,double height){\n  for (int i\u003dthis.labels.size() - 1; i \u003e 0; i--) {\n    PieLabelRecord record0\u003dgetPieLabelRecord(i);\n    PieLabelRecord record1\u003dgetPieLabelRecord(i - 1);\n    if (record1.getUpperY() \u003e record0.getLowerY()) {\n      record1.setAllocatedY(Math.max(minY + record1.getLabelHeight() / 2.0,record0.getLowerY() - this.minGap - record1.getLabelHeight() / 2.0));\n    }\n  }\n}",
    "begin_line": 164,
    "end_line": 174,
    "comment": "/** \n * Any labels that are overlapping are moved up in an attempt to eliminate the overlaps.\n * @param minY  the minimum y value (in Java2D coordinate space).\n * @param height  the height available for all labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.spreadEvenly#183",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.spreadEvenly(double, double)",
    "snippet": "protected void spreadEvenly(double minY,double height){\n  double y\u003dminY;\n  double sumOfLabelHeights\u003d0.0;\n  for (int i\u003d0; i \u003c this.labels.size(); i++) {\n    sumOfLabelHeights+\u003dgetPieLabelRecord(i).getLabelHeight();\n  }\n  double gap\u003dheight - sumOfLabelHeights;\n  if (this.labels.size() \u003e 1) {\n    gap\u003dgap / (this.labels.size() - 1);\n  }\n  for (int i\u003d0; i \u003c this.labels.size(); i++) {\n    PieLabelRecord record\u003dgetPieLabelRecord(i);\n    y\u003dy + record.getLabelHeight() / 2.0;\n    record.setAllocatedY(y);\n    y\u003dy + record.getLabelHeight() / 2.0 + gap;\n  }\n}",
    "begin_line": 183,
    "end_line": 199,
    "comment": "/** \n * Labels are spaced evenly in the available space in an attempt to eliminate the overlaps.\n * @param minY  the minimum y value (in Java2D coordinate space).\n * @param height  the height available for all labels.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.sort#204",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.sort()",
    "snippet": "public void sort(){\n  Collections.sort(this.labels);\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "/** \n * Sorts the label records into ascending order by y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelDistributor.toString#214",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelDistributor.java",
    "class_name": "org.jfree.chart.plot.PieLabelDistributor",
    "signature": "org.jfree.chart.plot.PieLabelDistributor.toString()",
    "snippet": "public String toString(){\n  StringBuffer result\u003dnew StringBuffer();\n  for (int i\u003d0; i \u003c this.labels.size(); i++) {\n    result.append(getPieLabelRecord(i).toString()).append(\"\\n\");\n  }\n  return result.toString();\n}",
    "begin_line": 214,
    "end_line": 220,
    "comment": "/** \n * Returns a string containing a description of the object for debugging purposes.\n * @return A string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelLinkStyle.PieLabelLinkStyle#74",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.PieLabelLinkStyle(java.lang.String)",
    "snippet": "private PieLabelLinkStyle(String name){\n  this.name\u003dname;\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelLinkStyle.toString#83",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelLinkStyle.equals#95",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof PieLabelLinkStyle)) {\n    return false;\n  }\n  PieLabelLinkStyle style\u003d(PieLabelLinkStyle)obj;\n  if (!this.name.equals(style.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 95,
    "end_line": 107,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelLinkStyle.hashCode#114",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 114,
    "end_line": 116,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PieLabelLinkStyle.readResolve#125",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PieLabelLinkStyle.java",
    "class_name": "org.jfree.chart.plot.PieLabelLinkStyle",
    "signature": "org.jfree.chart.plot.PieLabelLinkStyle.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  Object result\u003dnull;\n  if (this.equals(PieLabelLinkStyle.STANDARD)) {\n    result\u003dPieLabelLinkStyle.STANDARD;\n  }\n else   if (this.equals(PieLabelLinkStyle.QUAD_CURVE)) {\n    result\u003dPieLabelLinkStyle.QUAD_CURVE;\n  }\n else   if (this.equals(PieLabelLinkStyle.CUBIC_CURVE)) {\n    result\u003dPieLabelLinkStyle.CUBIC_CURVE;\n  }\n  return result;\n}",
    "begin_line": 125,
    "end_line": 137,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.PiePlot#529",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.PiePlot()",
    "snippet": "public PiePlot(){\n  this(null);\n}",
    "begin_line": 529,
    "end_line": 531,
    "comment": "/** \n * Creates a new plot.  The dataset is initially set to \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.PiePlot#538",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.PiePlot(org.jfree.data.general.PieDataset)",
    "snippet": "public PiePlot(PieDataset dataset){\n  super();\n  this.dataset\u003ddataset;\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  this.pieIndex\u003d0;\n  this.interiorGap\u003dDEFAULT_INTERIOR_GAP;\n  this.circular\u003dtrue;\n  this.startAngle\u003dDEFAULT_START_ANGLE;\n  this.direction\u003dRotation.CLOCKWISE;\n  this.minimumArcAngleToDraw\u003dDEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;\n  this.sectionPaintMap\u003dnew PaintMap();\n  this.baseSectionPaint\u003dColor.gray;\n  this.autoPopulateSectionPaint\u003dtrue;\n  this.sectionOutlinesVisible\u003dtrue;\n  this.sectionOutlinePaintMap\u003dnew PaintMap();\n  this.baseSectionOutlinePaint\u003dDEFAULT_OUTLINE_PAINT;\n  this.autoPopulateSectionOutlinePaint\u003dfalse;\n  this.sectionOutlineStrokeMap\u003dnew StrokeMap();\n  this.baseSectionOutlineStroke\u003dDEFAULT_OUTLINE_STROKE;\n  this.autoPopulateSectionOutlineStroke\u003dfalse;\n  this.explodePercentages\u003dnew TreeMap();\n  this.labelGenerator\u003dnew StandardPieSectionLabelGenerator();\n  this.labelFont\u003dDEFAULT_LABEL_FONT;\n  this.labelPaint\u003dDEFAULT_LABEL_PAINT;\n  this.labelBackgroundPaint\u003dDEFAULT_LABEL_BACKGROUND_PAINT;\n  this.labelOutlinePaint\u003dDEFAULT_LABEL_OUTLINE_PAINT;\n  this.labelOutlineStroke\u003dDEFAULT_LABEL_OUTLINE_STROKE;\n  this.labelShadowPaint\u003dDEFAULT_LABEL_SHADOW_PAINT;\n  this.labelLinksVisible\u003dtrue;\n  this.labelDistributor\u003dnew PieLabelDistributor(0);\n  this.simpleLabels\u003dfalse;\n  this.simpleLabelOffset\u003dnew RectangleInsets(UnitType.RELATIVE,0.18,0.18,0.18,0.18);\n  this.labelPadding\u003dnew RectangleInsets(2,2,2,2);\n  this.toolTipGenerator\u003dnull;\n  this.urlGenerator\u003dnull;\n  this.legendLabelGenerator\u003dnew StandardPieSectionLabelGenerator();\n  this.legendLabelToolTipGenerator\u003dnull;\n  this.legendLabelURLGenerator\u003dnull;\n  this.legendItemShape\u003dPlot.DEFAULT_LEGEND_ITEM_CIRCLE;\n  this.ignoreNullValues\u003dfalse;\n  this.ignoreZeroValues\u003dfalse;\n}",
    "begin_line": 538,
    "end_line": 591,
    "comment": "/** \n * Creates a plot that will draw a pie chart for the specified dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getDataset#600",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getDataset()",
    "snippet": "public PieDataset getDataset(){\n  return this.dataset;\n}",
    "begin_line": 600,
    "end_line": 602,
    "comment": "/** \n * Returns the dataset.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDataset(PieDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setDataset#611",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setDataset(org.jfree.data.general.PieDataset)",
    "snippet": "public void setDataset(PieDataset dataset){\n  PieDataset existing\u003dthis.dataset;\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.dataset\u003ddataset;\n  if (dataset !\u003d null) {\n    setDatasetGroup(dataset.getGroup());\n    dataset.addChangeListener(this);\n  }\n  DatasetChangeEvent event\u003dnew DatasetChangeEvent(this,dataset);\n  datasetChanged(event);\n}",
    "begin_line": 611,
    "end_line": 629,
    "comment": "/** \n * Sets the dataset and sends a  {@link DatasetChangeEvent} to \u0027this\u0027.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getPieIndex#639",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getPieIndex()",
    "snippet": "public int getPieIndex(){\n  return this.pieIndex;\n}",
    "begin_line": 639,
    "end_line": 641,
    "comment": "/** \n * Returns the pie index (this is used by the  {@link MultiplePiePlot} classto track subplots).\n * @return The pie index.\n * @see #setPieIndex(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setPieIndex#651",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setPieIndex(int)",
    "snippet": "public void setPieIndex(int index){\n  this.pieIndex\u003dindex;\n}",
    "begin_line": 651,
    "end_line": 653,
    "comment": "/** \n * Sets the pie index (this is used by the  {@link MultiplePiePlot} class totrack subplots).\n * @param index  the index.\n * @see #getPieIndex()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getStartAngle#663",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getStartAngle()",
    "snippet": "public double getStartAngle(){\n  return this.startAngle;\n}",
    "begin_line": 663,
    "end_line": 665,
    "comment": "/** \n * Returns the start angle for the first pie section.  This is measured in degrees starting from 3 o\u0027clock and measuring anti-clockwise.\n * @return The start angle.\n * @see #setStartAngle(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setStartAngle#677",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setStartAngle(double)",
    "snippet": "public void setStartAngle(double angle){\n  this.startAngle\u003dangle;\n  fireChangeEvent();\n}",
    "begin_line": 677,
    "end_line": 680,
    "comment": "/** \n * Sets the starting angle and sends a  {@link PlotChangeEvent} to allregistered listeners.  The initial default value is 90 degrees, which corresponds to 12 o\u0027clock.  A value of zero corresponds to 3 o\u0027clock... this is the encoding used by Java\u0027s Arc2D class.\n * @param angle  the angle (in degrees).\n * @see #getStartAngle()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getDirection#690",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getDirection()",
    "snippet": "public Rotation getDirection(){\n  return this.direction;\n}",
    "begin_line": 690,
    "end_line": 692,
    "comment": "/** \n * Returns the direction in which the pie sections are drawn (clockwise or anti-clockwise).\n * @return The direction (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDirection(Rotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setDirection#702",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setDirection(org.jfree.chart.util.Rotation)",
    "snippet": "public void setDirection(Rotation direction){\n  if (direction \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027direction\u0027 argument.\");\n  }\n  this.direction\u003ddirection;\n  fireChangeEvent();\n}",
    "begin_line": 702,
    "end_line": 709,
    "comment": "/** \n * Sets the direction in which the pie sections are drawn and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param direction  the direction (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDirection()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getInteriorGap#719",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getInteriorGap()",
    "snippet": "public double getInteriorGap(){\n  return this.interiorGap;\n}",
    "begin_line": 719,
    "end_line": 721,
    "comment": "/** \n * Returns the interior gap, measured as a percentage of the available drawing space.\n * @return The gap (as a percentage of the available drawing space).\n * @see #setInteriorGap(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setInteriorGap#733",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setInteriorGap(double)",
    "snippet": "public void setInteriorGap(double percent){\n  if ((percent \u003c 0.0) || (percent \u003e MAX_INTERIOR_GAP)) {\n    throw new IllegalArgumentException(\"Invalid \u0027percent\u0027 (\" + percent + \") argument.\");\n  }\n  if (this.interiorGap !\u003d percent) {\n    this.interiorGap\u003dpercent;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 733,
    "end_line": 745,
    "comment": "/** \n * Sets the interior gap and sends a  {@link PlotChangeEvent} to allregistered listeners.  This controls the space between the edges of the pie plot and the plot area itself (the region where the section labels appear).\n * @param percent  the gap (as a percentage of the available drawing space).\n * @see #getInteriorGap()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.isCircular#755",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.isCircular()",
    "snippet": "public boolean isCircular(){\n  return this.circular;\n}",
    "begin_line": 755,
    "end_line": 757,
    "comment": "/** \n * Returns a flag indicating whether the pie chart is circular, or stretched into an elliptical shape.\n * @return A flag indicating whether the pie chart is circular.\n * @see #setCircular(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setCircular#767",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setCircular(boolean)",
    "snippet": "public void setCircular(boolean flag){\n  setCircular(flag,true);\n}",
    "begin_line": 767,
    "end_line": 769,
    "comment": "/** \n * A flag indicating whether the pie chart is circular, or stretched into an elliptical shape.\n * @param flag  the new value.\n * @see #isCircular()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setCircular#780",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean)",
    "snippet": "public void setCircular(boolean circular,boolean notify){\n  this.circular\u003dcircular;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 780,
    "end_line": 785,
    "comment": "/** \n * Sets the circular attribute and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param circular  the new value of the flag.\n * @param notify  notify listeners?\n * @see #isCircular()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getIgnoreNullValues#795",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getIgnoreNullValues()",
    "snippet": "public boolean getIgnoreNullValues(){\n  return this.ignoreNullValues;\n}",
    "begin_line": 795,
    "end_line": 797,
    "comment": "/** \n * Returns the flag that controls whether \u003ccode\u003enull\u003c/code\u003e values in the dataset are ignored.\n * @return A boolean.\n * @see #setIgnoreNullValues(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setIgnoreNullValues#810",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setIgnoreNullValues(boolean)",
    "snippet": "public void setIgnoreNullValues(boolean flag){\n  this.ignoreNullValues\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 810,
    "end_line": 813,
    "comment": "/** \n * Sets a flag that controls whether \u003ccode\u003enull\u003c/code\u003e values are ignored, and sends a  {@link PlotChangeEvent} to all registered listeners.  Atpresent, this only affects whether or not the key is presented in the legend.\n * @param flag  the flag.\n * @see #getIgnoreNullValues()\n * @see #setIgnoreZeroValues(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getIgnoreZeroValues#823",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getIgnoreZeroValues()",
    "snippet": "public boolean getIgnoreZeroValues(){\n  return this.ignoreZeroValues;\n}",
    "begin_line": 823,
    "end_line": 825,
    "comment": "/** \n * Returns the flag that controls whether zero values in the dataset are ignored.\n * @return A boolean.\n * @see #setIgnoreZeroValues(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setIgnoreZeroValues#838",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setIgnoreZeroValues(boolean)",
    "snippet": "public void setIgnoreZeroValues(boolean flag){\n  this.ignoreZeroValues\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 838,
    "end_line": 841,
    "comment": "/** \n * Sets a flag that controls whether zero values are ignored, and sends a  {@link PlotChangeEvent} to all registered listeners.  Thisonly affects whether or not a label appears for the non-visible pie section.\n * @param flag  the flag.\n * @see #getIgnoreZeroValues()\n * @see #setIgnoreNullValues(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionPaint#857",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable)",
    "snippet": "protected Paint lookupSectionPaint(Comparable key){\n  return lookupSectionPaint(key,getAutoPopulateSectionPaint());\n}",
    "begin_line": 857,
    "end_line": 859,
    "comment": "/** \n * Returns the paint for the specified section.  This is equivalent to \u003ccode\u003elookupSectionPaint(section, getAutoPopulateSectionPaint())\u003c/code\u003e.\n * @param key  the section key.\n * @return The paint for the specified section.\n * @since 1.0.3\n * @see #lookupSectionPaint(Comparable,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionPaint#882",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionPaint(java.lang.Comparable, boolean)",
    "snippet": "protected Paint lookupSectionPaint(Comparable key,boolean autoPopulate){\n  Paint result\u003dnull;\n  result\u003dthis.sectionPaintMap.getPaint(key);\n  if (result !\u003d null) {\n    return result;\n  }\n  if (autoPopulate) {\n    DrawingSupplier ds\u003dgetDrawingSupplier();\n    if (ds !\u003d null) {\n      result\u003dds.getNextPaint();\n      this.sectionPaintMap.put(key,result);\n    }\n else {\n      result\u003dthis.baseSectionPaint;\n    }\n  }\n else {\n    result\u003dthis.baseSectionPaint;\n  }\n  return result;\n}",
    "begin_line": 882,
    "end_line": 906,
    "comment": "/** \n * Returns the paint for the specified section.  The lookup involves these steps: \u003cul\u003e \u003cli\u003eif  {@link #getSectionPaint(Comparable)} is non-\u003ccode\u003enull\u003c/code\u003ereturn it;\u003c/li\u003e \u003cli\u003eif  {@link #getSectionPaint(Comparable)} is \u003ccode\u003enull\u003c/code\u003e but\u003ccode\u003eautoPopulate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch a new paint from the drawing supplier ( {@link #getDrawingSupplier()}); \u003cli\u003eif all else fails, return  {@link #getBaseSectionPaint()}. \u003c/ul\u003e\n * @param key  the section key.\n * @param autoPopulate  a flag that controls whether the drawing supplieris used to auto-populate the section paint settings.\n * @return The paint.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSectionKey#922",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSectionKey(int)",
    "snippet": "protected Comparable getSectionKey(int section){\n  Comparable key\u003dnull;\n  if (this.dataset !\u003d null) {\n    if (section \u003e\u003d 0 \u0026\u0026 section \u003c this.dataset.getItemCount()) {\n      key\u003dthis.dataset.getKey(section);\n    }\n  }\n  if (key \u003d\u003d null) {\n    key\u003dnew Integer(section);\n  }\n  return key;\n}",
    "begin_line": 922,
    "end_line": 933,
    "comment": "/** \n * Returns a key for the specified section.  If there is no such section in the dataset, we generate a key.  This is to provide some backward compatibility for the (now deprecated) methods that get/set attributes based on section indices.  The preferred way of doing this now is to link the attributes directly to the section key (there are new methods for this, starting from version 1.0.3).\n * @param section  the section index.\n * @return The key.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSectionPaint#951",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSectionPaint(java.lang.Comparable)",
    "snippet": "public Paint getSectionPaint(Comparable key){\n  return this.sectionPaintMap.getPaint(key);\n}",
    "begin_line": 951,
    "end_line": 954,
    "comment": "/** \n * Returns the paint associated with the specified key, or \u003ccode\u003enull\u003c/code\u003e if there is no paint associated with the key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The paint associated with the specified key, or\u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #setSectionPaint(Comparable,Paint)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSectionPaint#970",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSectionPaint(java.lang.Comparable, java.awt.Paint)",
    "snippet": "public void setSectionPaint(Comparable key,Paint paint){\n  this.sectionPaintMap.put(key,paint);\n  fireChangeEvent();\n}",
    "begin_line": 970,
    "end_line": 974,
    "comment": "/** \n * Sets the paint associated with the specified key, and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the paint.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getSectionPaint(Comparable)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.clearSectionPaints#988",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.clearSectionPaints(boolean)",
    "snippet": "public void clearSectionPaints(boolean notify){\n  this.sectionPaintMap.clear();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 988,
    "end_line": 993,
    "comment": "/** \n * Clears the section paint settings for this plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.  Be aware thatif the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set, the section paints may be repopulated using the same colours as before.\n * @param notify  notify listeners?\n * @since 1.0.11\n * @see #autoPopulateSectionPaint\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getBaseSectionPaint#1003",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionPaint()",
    "snippet": "public Paint getBaseSectionPaint(){\n  return this.baseSectionPaint;\n}",
    "begin_line": 1003,
    "end_line": 1005,
    "comment": "/** \n * Returns the base section paint.  This is used when no other paint is defined, which is rare.  The default value is \u003ccode\u003eColor.gray\u003c/code\u003e.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseSectionPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setBaseSectionPaint#1015",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionPaint(java.awt.Paint)",
    "snippet": "public void setBaseSectionPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baseSectionPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1015,
    "end_line": 1021,
    "comment": "/** \n * Sets the base section paint and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseSectionPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getAutoPopulateSectionPaint#1031",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionPaint()",
    "snippet": "public boolean getAutoPopulateSectionPaint(){\n  return this.autoPopulateSectionPaint;\n}",
    "begin_line": 1031,
    "end_line": 1033,
    "comment": "/** \n * Returns the flag that controls whether or not the section paint is auto-populated by the  {@link #lookupSectionPaint(Comparable)} method.\n * @return A boolean.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setAutoPopulateSectionPaint#1044",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionPaint(boolean)",
    "snippet": "public void setAutoPopulateSectionPaint(boolean auto){\n  this.autoPopulateSectionPaint\u003dauto;\n  fireChangeEvent();\n}",
    "begin_line": 1044,
    "end_line": 1047,
    "comment": "/** \n * Sets the flag that controls whether or not the section paint is auto-populated by the  {@link #lookupSectionPaint(Comparable)} method,and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param auto  auto-populate?\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSectionOutlinesVisible#1060",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlinesVisible()",
    "snippet": "public boolean getSectionOutlinesVisible(){\n  return this.sectionOutlinesVisible;\n}",
    "begin_line": 1060,
    "end_line": 1062,
    "comment": "/** \n * Returns the flag that controls whether or not the outline is drawn for each pie section.\n * @return The flag that controls whether or not the outline is drawn foreach pie section.\n * @see #setSectionOutlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSectionOutlinesVisible#1073",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlinesVisible(boolean)",
    "snippet": "public void setSectionOutlinesVisible(boolean visible){\n  this.sectionOutlinesVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 1073,
    "end_line": 1076,
    "comment": "/** \n * Sets the flag that controls whether or not the outline is drawn for each pie section, and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param visible  the flag.\n * @see #getSectionOutlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionOutlinePaint#1091",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable)",
    "snippet": "protected Paint lookupSectionOutlinePaint(Comparable key){\n  return lookupSectionOutlinePaint(key,getAutoPopulateSectionOutlinePaint());\n}",
    "begin_line": 1091,
    "end_line": 1094,
    "comment": "/** \n * Returns the outline paint for the specified section.  This is equivalent to \u003ccode\u003elookupSectionPaint(section, getAutoPopulateSectionOutlinePaint())\u003c/code\u003e.\n * @param key  the section key.\n * @return The paint for the specified section.\n * @since 1.0.3\n * @see #lookupSectionOutlinePaint(Comparable,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionOutlinePaint#1117",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlinePaint(java.lang.Comparable, boolean)",
    "snippet": "protected Paint lookupSectionOutlinePaint(Comparable key,boolean autoPopulate){\n  Paint result\u003dnull;\n  result\u003dthis.sectionOutlinePaintMap.getPaint(key);\n  if (result !\u003d null) {\n    return result;\n  }\n  if (autoPopulate) {\n    DrawingSupplier ds\u003dgetDrawingSupplier();\n    if (ds !\u003d null) {\n      result\u003dds.getNextOutlinePaint();\n      this.sectionOutlinePaintMap.put(key,result);\n    }\n else {\n      result\u003dthis.baseSectionOutlinePaint;\n    }\n  }\n else {\n    result\u003dthis.baseSectionOutlinePaint;\n  }\n  return result;\n}",
    "begin_line": 1117,
    "end_line": 1143,
    "comment": "/** \n * Returns the outline paint for the specified section.  The lookup involves these steps: \u003cul\u003e \u003cli\u003eif  {@link #getSectionOutlinePaint(Comparable)} isnon-\u003ccode\u003enull\u003c/code\u003e return it;\u003c/li\u003e \u003cli\u003eif  {@link #getSectionOutlinePaint(Comparable)} is\u003ccode\u003enull\u003c/code\u003e but \u003ccode\u003eautoPopulate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch a new outline paint from the drawing supplier ( {@link #getDrawingSupplier()}); \u003cli\u003eif all else fails, return  {@link #getBaseSectionOutlinePaint()}. \u003c/ul\u003e\n * @param key  the section key.\n * @param autoPopulate  a flag that controls whether the drawing supplieris used to auto-populate the section outline paint settings.\n * @return The paint.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSectionOutlinePaint#1161",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlinePaint(java.lang.Comparable)",
    "snippet": "public Paint getSectionOutlinePaint(Comparable key){\n  return this.sectionOutlinePaintMap.getPaint(key);\n}",
    "begin_line": 1161,
    "end_line": 1164,
    "comment": "/** \n * Returns the outline paint associated with the specified key, or \u003ccode\u003enull\u003c/code\u003e if there is no paint associated with the key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The paint associated with the specified key, or\u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #setSectionOutlinePaint(Comparable,Paint)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSectionOutlinePaint#1180",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlinePaint(java.lang.Comparable, java.awt.Paint)",
    "snippet": "public void setSectionOutlinePaint(Comparable key,Paint paint){\n  this.sectionOutlinePaintMap.put(key,paint);\n  fireChangeEvent();\n}",
    "begin_line": 1180,
    "end_line": 1184,
    "comment": "/** \n * Sets the outline paint associated with the specified key, and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the paint.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getSectionOutlinePaint(Comparable)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.clearSectionOutlinePaints#1198",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.clearSectionOutlinePaints(boolean)",
    "snippet": "public void clearSectionOutlinePaints(boolean notify){\n  this.sectionOutlinePaintMap.clear();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1198,
    "end_line": 1203,
    "comment": "/** \n * Clears the section outline paint settings for this plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.Be aware that if the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set, the section paints may be repopulated using the same colours as before.\n * @param notify  notify listeners?\n * @since 1.0.11\n * @see #autoPopulateSectionOutlinePaint\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getBaseSectionOutlinePaint#1213",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionOutlinePaint()",
    "snippet": "public Paint getBaseSectionOutlinePaint(){\n  return this.baseSectionOutlinePaint;\n}",
    "begin_line": 1213,
    "end_line": 1215,
    "comment": "/** \n * Returns the base section paint.  This is used when no other paint is available.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseSectionOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setBaseSectionOutlinePaint#1224",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionOutlinePaint(java.awt.Paint)",
    "snippet": "public void setBaseSectionOutlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baseSectionOutlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1224,
    "end_line": 1230,
    "comment": "/** \n * Sets the base section paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseSectionOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getAutoPopulateSectionOutlinePaint#1241",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlinePaint()",
    "snippet": "public boolean getAutoPopulateSectionOutlinePaint(){\n  return this.autoPopulateSectionOutlinePaint;\n}",
    "begin_line": 1241,
    "end_line": 1243,
    "comment": "/** \n * Returns the flag that controls whether or not the section outline paint is auto-populated by the  {@link #lookupSectionOutlinePaint(Comparable)}method.\n * @return A boolean.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setAutoPopulateSectionOutlinePaint#1254",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlinePaint(boolean)",
    "snippet": "public void setAutoPopulateSectionOutlinePaint(boolean auto){\n  this.autoPopulateSectionOutlinePaint\u003dauto;\n  fireChangeEvent();\n}",
    "begin_line": 1254,
    "end_line": 1257,
    "comment": "/** \n * Sets the flag that controls whether or not the section outline paint is auto-populated by the  {@link #lookupSectionOutlinePaint(Comparable)}method, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param auto  auto-populate?\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionOutlineStroke#1274",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable)",
    "snippet": "protected Stroke lookupSectionOutlineStroke(Comparable key){\n  return lookupSectionOutlineStroke(key,getAutoPopulateSectionOutlineStroke());\n}",
    "begin_line": 1274,
    "end_line": 1277,
    "comment": "/** \n * Returns the outline stroke for the specified section.  This is equivalent to \u003ccode\u003elookupSectionOutlineStroke(section, getAutoPopulateSectionOutlineStroke())\u003c/code\u003e.\n * @param key  the section key.\n * @return The stroke for the specified section.\n * @since 1.0.3\n * @see #lookupSectionOutlineStroke(Comparable,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.lookupSectionOutlineStroke#1300",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.lookupSectionOutlineStroke(java.lang.Comparable, boolean)",
    "snippet": "protected Stroke lookupSectionOutlineStroke(Comparable key,boolean autoPopulate){\n  Stroke result\u003dnull;\n  result\u003dthis.sectionOutlineStrokeMap.getStroke(key);\n  if (result !\u003d null) {\n    return result;\n  }\n  if (autoPopulate) {\n    DrawingSupplier ds\u003dgetDrawingSupplier();\n    if (ds !\u003d null) {\n      result\u003dds.getNextOutlineStroke();\n      this.sectionOutlineStrokeMap.put(key,result);\n    }\n else {\n      result\u003dthis.baseSectionOutlineStroke;\n    }\n  }\n else {\n    result\u003dthis.baseSectionOutlineStroke;\n  }\n  return result;\n}",
    "begin_line": 1300,
    "end_line": 1326,
    "comment": "/** \n * Returns the outline stroke for the specified section.  The lookup involves these steps: \u003cul\u003e \u003cli\u003eif  {@link #getSectionOutlineStroke(Comparable)} isnon-\u003ccode\u003enull\u003c/code\u003e return it;\u003c/li\u003e \u003cli\u003eif  {@link #getSectionOutlineStroke(Comparable)} is\u003ccode\u003enull\u003c/code\u003e but \u003ccode\u003eautoPopulate\u003c/code\u003e is \u003ccode\u003etrue\u003c/code\u003e, attempt to fetch a new outline stroke from the drawing supplier ( {@link #getDrawingSupplier()}); \u003cli\u003eif all else fails, return  {@link #getBaseSectionOutlineStroke()}. \u003c/ul\u003e\n * @param key  the section key.\n * @param autoPopulate  a flag that controls whether the drawing supplieris used to auto-populate the section outline stroke settings.\n * @return The stroke.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSectionOutlineStroke#1344",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSectionOutlineStroke(java.lang.Comparable)",
    "snippet": "public Stroke getSectionOutlineStroke(Comparable key){\n  return this.sectionOutlineStrokeMap.getStroke(key);\n}",
    "begin_line": 1344,
    "end_line": 1347,
    "comment": "/** \n * Returns the outline stroke associated with the specified key, or \u003ccode\u003enull\u003c/code\u003e if there is no stroke associated with the key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The stroke associated with the specified key, or\u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #setSectionOutlineStroke(Comparable,Stroke)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSectionOutlineStroke#1363",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSectionOutlineStroke(java.lang.Comparable, java.awt.Stroke)",
    "snippet": "public void setSectionOutlineStroke(Comparable key,Stroke stroke){\n  this.sectionOutlineStrokeMap.put(key,stroke);\n  fireChangeEvent();\n}",
    "begin_line": 1363,
    "end_line": 1367,
    "comment": "/** \n * Sets the outline stroke associated with the specified key, and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getSectionOutlineStroke(Comparable)\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.clearSectionOutlineStrokes#1381",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.clearSectionOutlineStrokes(boolean)",
    "snippet": "public void clearSectionOutlineStrokes(boolean notify){\n  this.sectionOutlineStrokeMap.clear();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1381,
    "end_line": 1386,
    "comment": "/** \n * Clears the section outline stroke settings for this plot and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.Be aware that if the \u003ccode\u003eautoPopulateSectionPaint\u003c/code\u003e flag is set, the section paints may be repopulated using the same colours as before.\n * @param notify  notify listeners?\n * @since 1.0.11\n * @see #autoPopulateSectionOutlineStroke\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getBaseSectionOutlineStroke#1396",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getBaseSectionOutlineStroke()",
    "snippet": "public Stroke getBaseSectionOutlineStroke(){\n  return this.baseSectionOutlineStroke;\n}",
    "begin_line": 1396,
    "end_line": 1398,
    "comment": "/** \n * Returns the base section stroke.  This is used when no other stroke is available.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseSectionOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setBaseSectionOutlineStroke#1407",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setBaseSectionOutlineStroke(java.awt.Stroke)",
    "snippet": "public void setBaseSectionOutlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.baseSectionOutlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1407,
    "end_line": 1413,
    "comment": "/** \n * Sets the base section stroke.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseSectionOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getAutoPopulateSectionOutlineStroke#1424",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getAutoPopulateSectionOutlineStroke()",
    "snippet": "public boolean getAutoPopulateSectionOutlineStroke(){\n  return this.autoPopulateSectionOutlineStroke;\n}",
    "begin_line": 1424,
    "end_line": 1426,
    "comment": "/** \n * Returns the flag that controls whether or not the section outline stroke is auto-populated by the  {@link #lookupSectionOutlinePaint(Comparable)}method.\n * @return A boolean.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setAutoPopulateSectionOutlineStroke#1437",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlineStroke(boolean)",
    "snippet": "public void setAutoPopulateSectionOutlineStroke(boolean auto){\n  this.autoPopulateSectionOutlineStroke\u003dauto;\n  fireChangeEvent();\n}",
    "begin_line": 1437,
    "end_line": 1440,
    "comment": "/** \n * Sets the flag that controls whether or not the section outline stroke is auto-populated by the  {@link #lookupSectionOutlineStroke(Comparable)}method, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param auto  auto-populate?\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getShadowPaint#1449",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getShadowPaint()",
    "snippet": "public Paint getShadowPaint(){\n  return this.shadowPaint;\n}",
    "begin_line": 1449,
    "end_line": 1451,
    "comment": "/** \n * Returns the shadow paint.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setShadowPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setShadowPaint#1461",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setShadowPaint(java.awt.Paint)",
    "snippet": "public void setShadowPaint(Paint paint){\n  this.shadowPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1461,
    "end_line": 1464,
    "comment": "/** \n * Sets the shadow paint and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getShadowPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getShadowXOffset#1473",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getShadowXOffset()",
    "snippet": "public double getShadowXOffset(){\n  return this.shadowXOffset;\n}",
    "begin_line": 1473,
    "end_line": 1475,
    "comment": "/** \n * Returns the x-offset for the shadow effect.\n * @return The offset (in Java2D units).\n * @see #setShadowXOffset(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setShadowXOffset#1485",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setShadowXOffset(double)",
    "snippet": "public void setShadowXOffset(double offset){\n  this.shadowXOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 1485,
    "end_line": 1488,
    "comment": "/** \n * Sets the x-offset for the shadow effect and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (in Java2D units).\n * @see #getShadowXOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getShadowYOffset#1497",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getShadowYOffset()",
    "snippet": "public double getShadowYOffset(){\n  return this.shadowYOffset;\n}",
    "begin_line": 1497,
    "end_line": 1499,
    "comment": "/** \n * Returns the y-offset for the shadow effect.\n * @return The offset (in Java2D units).\n * @see #setShadowYOffset(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setShadowYOffset#1509",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setShadowYOffset(double)",
    "snippet": "public void setShadowYOffset(double offset){\n  this.shadowYOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 1509,
    "end_line": 1512,
    "comment": "/** \n * Sets the y-offset for the shadow effect and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (in Java2D units).\n * @see #getShadowYOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getExplodePercent#1530",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getExplodePercent(java.lang.Comparable)",
    "snippet": "public double getExplodePercent(Comparable key){\n  double result\u003d0.0;\n  if (this.explodePercentages !\u003d null) {\n    Number percent\u003d(Number)this.explodePercentages.get(key);\n    if (percent !\u003d null) {\n      result\u003dpercent.doubleValue();\n    }\n  }\n  return result;\n}",
    "begin_line": 1530,
    "end_line": 1539,
    "comment": "/** \n * Returns the amount that the section with the specified key should be exploded.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The amount that the section with the specified key should beexploded.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @since 1.0.3\n * @see #setExplodePercent(Comparable,double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setExplodePercent#1552",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setExplodePercent(java.lang.Comparable, double)",
    "snippet": "public void setExplodePercent(Comparable key,double percent){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  if (this.explodePercentages \u003d\u003d null) {\n    this.explodePercentages\u003dnew TreeMap();\n  }\n  this.explodePercentages.put(key,new Double(percent));\n  fireChangeEvent();\n}",
    "begin_line": 1552,
    "end_line": 1561,
    "comment": "/** \n * Sets the amount that a pie section should be exploded and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param key  the section key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param percent  the explode percentage (0.30 \u003d 30 percent).\n * @since 1.0.3\n * @see #getExplodePercent(Comparable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getMaximumExplodePercent#1568",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getMaximumExplodePercent()",
    "snippet": "public double getMaximumExplodePercent(){\n  if (this.dataset \u003d\u003d null) {\n    return 0.0;\n  }\n  double result\u003d0.0;\n  Iterator iterator\u003dthis.dataset.getKeys().iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    Number explode\u003d(Number)this.explodePercentages.get(key);\n    if (explode !\u003d null) {\n      result\u003dMath.max(result,explode.doubleValue());\n    }\n  }\n  return result;\n}",
    "begin_line": 1568,
    "end_line": 1582,
    "comment": "/** \n * Returns the maximum explode percent.\n * @return The percent.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelGenerator#1591",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelGenerator()",
    "snippet": "public PieSectionLabelGenerator getLabelGenerator(){\n  return this.labelGenerator;\n}",
    "begin_line": 1591,
    "end_line": 1593,
    "comment": "/** \n * Returns the section label generator.\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelGenerator(PieSectionLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelGenerator#1603",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
    "snippet": "public void setLabelGenerator(PieSectionLabelGenerator generator){\n  this.labelGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 1603,
    "end_line": 1606,
    "comment": "/** \n * Sets the section label generator and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelGap#1616",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelGap()",
    "snippet": "public double getLabelGap(){\n  return this.labelGap;\n}",
    "begin_line": 1616,
    "end_line": 1618,
    "comment": "/** \n * Returns the gap between the edge of the pie and the labels, expressed as a percentage of the plot width.\n * @return The gap (a percentage, where 0.05 \u003d five percent).\n * @see #setLabelGap(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelGap#1629",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelGap(double)",
    "snippet": "public void setLabelGap(double gap){\n  this.labelGap\u003dgap;\n  fireChangeEvent();\n}",
    "begin_line": 1629,
    "end_line": 1632,
    "comment": "/** \n * Sets the gap between the edge of the pie and the labels (expressed as a percentage of the plot width) and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param gap  the gap (a percentage, where 0.05 \u003d five percent).\n * @see #getLabelGap()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getMaximumLabelWidth#1641",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getMaximumLabelWidth()",
    "snippet": "public double getMaximumLabelWidth(){\n  return this.maximumLabelWidth;\n}",
    "begin_line": 1641,
    "end_line": 1643,
    "comment": "/** \n * Returns the maximum label width as a percentage of the plot width.\n * @return The width (a percentage, where 0.20 \u003d 20 percent).\n * @see #setMaximumLabelWidth(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setMaximumLabelWidth#1653",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setMaximumLabelWidth(double)",
    "snippet": "public void setMaximumLabelWidth(double width){\n  this.maximumLabelWidth\u003dwidth;\n  fireChangeEvent();\n}",
    "begin_line": 1653,
    "end_line": 1656,
    "comment": "/** \n * Sets the maximum label width as a percentage of the plot width and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param width  the width (a percentage, where 0.20 \u003d 20 percent).\n * @see #getMaximumLabelWidth()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinksVisible#1666",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinksVisible()",
    "snippet": "public boolean getLabelLinksVisible(){\n  return this.labelLinksVisible;\n}",
    "begin_line": 1666,
    "end_line": 1668,
    "comment": "/** \n * Returns the flag that controls whether or not label linking lines are visible.\n * @return A boolean.\n * @see #setLabelLinksVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelLinksVisible#1681",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelLinksVisible(boolean)",
    "snippet": "public void setLabelLinksVisible(boolean visible){\n  this.labelLinksVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 1681,
    "end_line": 1684,
    "comment": "/** \n * Sets the flag that controls whether or not label linking lines are visible and sends a  {@link PlotChangeEvent} to all registered listeners.Please take care when hiding the linking lines - depending on the data values, the labels can be displayed some distance away from the corresponding pie section.\n * @param visible  the flag.\n * @see #getLabelLinksVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinkStyle#1695",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkStyle()",
    "snippet": "public PieLabelLinkStyle getLabelLinkStyle(){\n  return this.labelLinkStyle;\n}",
    "begin_line": 1695,
    "end_line": 1697,
    "comment": "/** \n * Returns the label link style.\n * @return The label link style (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelLinkStyle(PieLabelLinkStyle)\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelLinkStyle#1709",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)",
    "snippet": "public void setLabelLinkStyle(PieLabelLinkStyle style){\n  if (style \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027style\u0027 argument.\");\n  }\n  this.labelLinkStyle\u003dstyle;\n  fireChangeEvent();\n}",
    "begin_line": 1709,
    "end_line": 1715,
    "comment": "/** \n * Sets the label link style and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param style  the new style (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelLinkStyle()\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinkMargin#1725",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkMargin()",
    "snippet": "public double getLabelLinkMargin(){\n  return this.labelLinkMargin;\n}",
    "begin_line": 1725,
    "end_line": 1727,
    "comment": "/** \n * Returns the margin (expressed as a percentage of the width or height) between the edge of the pie and the link point.\n * @return The link margin (as a percentage, where 0.05 is five percent).\n * @see #setLabelLinkMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelLinkMargin#1737",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkMargin(double)",
    "snippet": "public void setLabelLinkMargin(double margin){\n  this.labelLinkMargin\u003dmargin;\n  fireChangeEvent();\n}",
    "begin_line": 1737,
    "end_line": 1740,
    "comment": "/** \n * Sets the link margin and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param margin  the margin.\n * @see #getLabelLinkMargin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinkPaint#1750",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkPaint()",
    "snippet": "public Paint getLabelLinkPaint(){\n  return this.labelLinkPaint;\n}",
    "begin_line": 1750,
    "end_line": 1752,
    "comment": "/** \n * Returns the paint used for the lines that connect pie sections to their corresponding labels.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelLinkPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelLinkPaint#1763",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkPaint(java.awt.Paint)",
    "snippet": "public void setLabelLinkPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.labelLinkPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1763,
    "end_line": 1769,
    "comment": "/** \n * Sets the paint used for the lines that connect pie sections to their corresponding labels, and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelLinkPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinkStroke#1778",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkStroke()",
    "snippet": "public Stroke getLabelLinkStroke(){\n  return this.labelLinkStroke;\n}",
    "begin_line": 1778,
    "end_line": 1780,
    "comment": "/** \n * Returns the stroke used for the label linking lines.\n * @return The stroke.\n * @see #setLabelLinkStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelLinkStroke#1790",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelLinkStroke(java.awt.Stroke)",
    "snippet": "public void setLabelLinkStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.labelLinkStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1790,
    "end_line": 1796,
    "comment": "/** \n * Sets the link stroke and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param stroke  the stroke.\n * @see #getLabelLinkStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelLinkDepth#1809",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelLinkDepth()",
    "snippet": "protected double getLabelLinkDepth(){\n  return 0.1;\n}",
    "begin_line": 1809,
    "end_line": 1811,
    "comment": "/** \n * Returns the distance that the end of the label link is embedded into the plot, expressed as a percentage of the plot\u0027s radius. \u003cbr\u003e\u003cbr\u003e This method is overridden in the  {@link RingPlot} class to resolvebug 2121818.\n * @return \u003ccode\u003e0.10\u003c/code\u003e.\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelFont#1820",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelFont()",
    "snippet": "public Font getLabelFont(){\n  return this.labelFont;\n}",
    "begin_line": 1820,
    "end_line": 1822,
    "comment": "/** \n * Returns the section label font.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelFont#1832",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelFont(java.awt.Font)",
    "snippet": "public void setLabelFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.labelFont\u003dfont;\n  fireChangeEvent();\n}",
    "begin_line": 1832,
    "end_line": 1838,
    "comment": "/** \n * Sets the section label font and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelPaint#1847",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelPaint()",
    "snippet": "public Paint getLabelPaint(){\n  return this.labelPaint;\n}",
    "begin_line": 1847,
    "end_line": 1849,
    "comment": "/** \n * Returns the section label paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelPaint#1859",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelPaint(java.awt.Paint)",
    "snippet": "public void setLabelPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.labelPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1859,
    "end_line": 1865,
    "comment": "/** \n * Sets the section label paint and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelBackgroundPaint#1874",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelBackgroundPaint()",
    "snippet": "public Paint getLabelBackgroundPaint(){\n  return this.labelBackgroundPaint;\n}",
    "begin_line": 1874,
    "end_line": 1876,
    "comment": "/** \n * Returns the section label background paint.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelBackgroundPaint#1886",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setLabelBackgroundPaint(Paint paint){\n  this.labelBackgroundPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1886,
    "end_line": 1889,
    "comment": "/** \n * Sets the section label background paint and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelOutlinePaint#1898",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelOutlinePaint()",
    "snippet": "public Paint getLabelOutlinePaint(){\n  return this.labelOutlinePaint;\n}",
    "begin_line": 1898,
    "end_line": 1900,
    "comment": "/** \n * Returns the section label outline paint.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelOutlinePaint#1910",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelOutlinePaint(java.awt.Paint)",
    "snippet": "public void setLabelOutlinePaint(Paint paint){\n  this.labelOutlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1910,
    "end_line": 1913,
    "comment": "/** \n * Sets the section label outline paint and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelOutlineStroke#1922",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelOutlineStroke()",
    "snippet": "public Stroke getLabelOutlineStroke(){\n  return this.labelOutlineStroke;\n}",
    "begin_line": 1922,
    "end_line": 1924,
    "comment": "/** \n * Returns the section label outline stroke.\n * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelOutlineStroke#1934",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelOutlineStroke(java.awt.Stroke)",
    "snippet": "public void setLabelOutlineStroke(Stroke stroke){\n  this.labelOutlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1934,
    "end_line": 1937,
    "comment": "/** \n * Sets the section label outline stroke and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelShadowPaint#1946",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelShadowPaint()",
    "snippet": "public Paint getLabelShadowPaint(){\n  return this.labelShadowPaint;\n}",
    "begin_line": 1946,
    "end_line": 1948,
    "comment": "/** \n * Returns the section label shadow paint.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLabelShadowPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelShadowPaint#1958",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelShadowPaint(java.awt.Paint)",
    "snippet": "public void setLabelShadowPaint(Paint paint){\n  this.labelShadowPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1958,
    "end_line": 1961,
    "comment": "/** \n * Sets the section label shadow paint and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLabelShadowPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelPadding#1972",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelPadding()",
    "snippet": "public RectangleInsets getLabelPadding(){\n  return this.labelPadding;\n}",
    "begin_line": 1972,
    "end_line": 1974,
    "comment": "/** \n * Returns the label padding.\n * @return The label padding (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.7\n * @see #setLabelPadding(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelPadding#1986",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelPadding(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setLabelPadding(RectangleInsets padding){\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027padding\u0027 argument.\");\n  }\n  this.labelPadding\u003dpadding;\n  fireChangeEvent();\n}",
    "begin_line": 1986,
    "end_line": 1992,
    "comment": "/** \n * Sets the padding between each label and its outline and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n * @see #getLabelPadding()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSimpleLabels#2002",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSimpleLabels()",
    "snippet": "public boolean getSimpleLabels(){\n  return this.simpleLabels;\n}",
    "begin_line": 2002,
    "end_line": 2004,
    "comment": "/** \n * Returns the flag that controls whether simple or extended labels are displayed on the plot.\n * @return A boolean.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSimpleLabels#2015",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSimpleLabels(boolean)",
    "snippet": "public void setSimpleLabels(boolean simple){\n  this.simpleLabels\u003dsimple;\n  fireChangeEvent();\n}",
    "begin_line": 2015,
    "end_line": 2018,
    "comment": "/** \n * Sets the flag that controls whether simple or extended labels are displayed on the plot, and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param simple  the new flag value.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getSimpleLabelOffset#2029",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getSimpleLabelOffset()",
    "snippet": "public RectangleInsets getSimpleLabelOffset(){\n  return this.simpleLabelOffset;\n}",
    "begin_line": 2029,
    "end_line": 2031,
    "comment": "/** \n * Returns the offset used for the simple labels, if they are displayed.\n * @return The offset (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.7\n * @see #setSimpleLabelOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setSimpleLabelOffset#2043",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setSimpleLabelOffset(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setSimpleLabelOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.simpleLabelOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 2043,
    "end_line": 2049,
    "comment": "/** \n * Sets the offset for the simple labels and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.7\n * @see #getSimpleLabelOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLabelDistributor#2059",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLabelDistributor()",
    "snippet": "public AbstractPieLabelDistributor getLabelDistributor(){\n  return this.labelDistributor;\n}",
    "begin_line": 2059,
    "end_line": 2061,
    "comment": "/** \n * Returns the object responsible for the vertical layout of the pie section labels.\n * @return The label distributor (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLabelDistributor#2071",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLabelDistributor(org.jfree.chart.plot.AbstractPieLabelDistributor)",
    "snippet": "public void setLabelDistributor(AbstractPieLabelDistributor distributor){\n  if (distributor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027distributor\u0027 argument.\");\n  }\n  this.labelDistributor\u003ddistributor;\n  fireChangeEvent();\n}",
    "begin_line": 2071,
    "end_line": 2077,
    "comment": "/** \n * Sets the label distributor and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param distributor  the distributor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getToolTipGenerator#2088",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getToolTipGenerator()",
    "snippet": "public PieToolTipGenerator getToolTipGenerator(){\n  return this.toolTipGenerator;\n}",
    "begin_line": 2088,
    "end_line": 2090,
    "comment": "/** \n * Returns the tool tip generator, an object that is responsible for generating the text items used for tool tips by the plot.  If the generator is \u003ccode\u003enull\u003c/code\u003e, no tool tips will be created.\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setToolTipGenerator(PieToolTipGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setToolTipGenerator#2101",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setToolTipGenerator(org.jfree.chart.labels.PieToolTipGenerator)",
    "snippet": "public void setToolTipGenerator(PieToolTipGenerator generator){\n  this.toolTipGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 2101,
    "end_line": 2104,
    "comment": "/** \n * Sets the tool tip generator and sends a  {@link PlotChangeEvent} to allregistered listeners.  Set the generator to \u003ccode\u003enull\u003c/code\u003e if you don\u0027t want any tool tips.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getToolTipGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getURLGenerator#2113",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getURLGenerator()",
    "snippet": "public PieURLGenerator getURLGenerator(){\n  return this.urlGenerator;\n}",
    "begin_line": 2113,
    "end_line": 2115,
    "comment": "/** \n * Returns the URL generator.\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setURLGenerator(PieURLGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setURLGenerator#2125",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setURLGenerator(org.jfree.chart.urls.PieURLGenerator)",
    "snippet": "public void setURLGenerator(PieURLGenerator generator){\n  this.urlGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 2125,
    "end_line": 2128,
    "comment": "/** \n * Sets the URL generator and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getURLGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getMinimumArcAngleToDraw#2138",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getMinimumArcAngleToDraw()",
    "snippet": "public double getMinimumArcAngleToDraw(){\n  return this.minimumArcAngleToDraw;\n}",
    "begin_line": 2138,
    "end_line": 2140,
    "comment": "/** \n * Returns the minimum arc angle that will be drawn.  Pie sections for an angle smaller than this are not drawn, to avoid a JDK bug.\n * @return The minimum angle.\n * @see #setMinimumArcAngleToDraw(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setMinimumArcAngleToDraw#2160",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setMinimumArcAngleToDraw(double)",
    "snippet": "public void setMinimumArcAngleToDraw(double angle){\n  this.minimumArcAngleToDraw\u003dangle;\n}",
    "begin_line": 2160,
    "end_line": 2162,
    "comment": "/** \n * Sets the minimum arc angle that will be drawn.  Pie sections for an angle smaller than this are not drawn, to avoid a JDK bug.  See this link for details: \u003cbr\u003e\u003cbr\u003e \u003ca href\u003d\"http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707\"\u003e http://www.jfree.org/phpBB2/viewtopic.php?t\u003d2707\u003c/a\u003e \u003cbr\u003e\u003cbr\u003e ...and this bug report in the Java Bug Parade: \u003cbr\u003e\u003cbr\u003e \u003ca href\u003d \"http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\"\u003e http://developer.java.sun.com/developer/bugParade/bugs/4836495.html\u003c/a\u003e\n * @param angle  the minimum angle.\n * @see #getMinimumArcAngleToDraw()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLegendItemShape#2171",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLegendItemShape()",
    "snippet": "public Shape getLegendItemShape(){\n  return this.legendItemShape;\n}",
    "begin_line": 2171,
    "end_line": 2173,
    "comment": "/** \n * Returns the shape used for legend items.\n * @return The shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendItemShape(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLegendItemShape#2183",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLegendItemShape(java.awt.Shape)",
    "snippet": "public void setLegendItemShape(Shape shape){\n  if (shape \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027shape\u0027 argument.\");\n  }\n  this.legendItemShape\u003dshape;\n  fireChangeEvent();\n}",
    "begin_line": 2183,
    "end_line": 2189,
    "comment": "/** \n * Sets the shape used for legend items and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendItemShape()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLegendLabelGenerator#2198",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelGenerator()",
    "snippet": "public PieSectionLabelGenerator getLegendLabelGenerator(){\n  return this.legendLabelGenerator;\n}",
    "begin_line": 2198,
    "end_line": 2200,
    "comment": "/** \n * Returns the legend label generator.\n * @return The legend label generator (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendLabelGenerator(PieSectionLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLegendLabelGenerator#2210",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
    "snippet": "public void setLegendLabelGenerator(PieSectionLabelGenerator generator){\n  if (generator \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027generator\u0027 argument.\");\n  }\n  this.legendLabelGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 2210,
    "end_line": 2216,
    "comment": "/** \n * Sets the legend label generator and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendLabelGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLegendLabelToolTipGenerator#2225",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelToolTipGenerator()",
    "snippet": "public PieSectionLabelGenerator getLegendLabelToolTipGenerator(){\n  return this.legendLabelToolTipGenerator;\n}",
    "begin_line": 2225,
    "end_line": 2227,
    "comment": "/** \n * Returns the legend label tool tip generator.\n * @return The legend label tool tip generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendLabelToolTipGenerator(PieSectionLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLegendLabelToolTipGenerator#2237",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)",
    "snippet": "public void setLegendLabelToolTipGenerator(PieSectionLabelGenerator generator){\n  this.legendLabelToolTipGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 2237,
    "end_line": 2241,
    "comment": "/** \n * Sets the legend label tool tip generator and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLegendLabelToolTipGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLegendLabelURLGenerator#2252",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLegendLabelURLGenerator()",
    "snippet": "public PieURLGenerator getLegendLabelURLGenerator(){\n  return this.legendLabelURLGenerator;\n}",
    "begin_line": 2252,
    "end_line": 2254,
    "comment": "/** \n * Returns the legend label URL generator.\n * @return The legend label URL generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendLabelURLGenerator(PieURLGenerator)\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.setLegendLabelURLGenerator#2266",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)",
    "snippet": "public void setLegendLabelURLGenerator(PieURLGenerator generator){\n  this.legendLabelURLGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 2266,
    "end_line": 2269,
    "comment": "/** \n * Sets the legend label URL generator and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLegendLabelURLGenerator()\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.initialise#2286",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlot, java.lang.Integer, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public PiePlotState initialise(Graphics2D g2,Rectangle2D plotArea,PiePlot plot,Integer index,PlotRenderingInfo info){\n  PiePlotState state\u003dnew PiePlotState(info);\n  state.setPassesRequired(2);\n  if (this.dataset !\u003d null) {\n    state.setTotal(DatasetUtilities.calculatePieDatasetTotal(plot.getDataset()));\n  }\n  state.setLatestAngle(plot.getStartAngle());\n  return state;\n}",
    "begin_line": 2286,
    "end_line": 2298,
    "comment": "/** \n * Initialises the drawing procedure.  This method will be called before the first item is rendered, giving the plot an opportunity to initialise any state information it wants to maintain.\n * @param g2  the graphics device.\n * @param plotArea  the plot area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plot  the plot.\n * @param index  the secondary index (\u003ccode\u003enull\u003c/code\u003e for primaryrenderer).\n * @param info  collects chart rendering information for return to caller.\n * @return A state object (maintains state information relevant to onechart drawing).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.draw#2311",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){\n  RectangleInsets insets\u003dgetInsets();\n  insets.trim(area);\n  if (info !\u003d null) {\n    info.setPlotArea(area);\n    info.setDataArea(area);\n  }\n  drawBackground(g2,area);\n  drawOutline(g2,area);\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(area);\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));\n  if (!DatasetUtilities.isEmptyOrNull(this.dataset)) {\n    drawPie(g2,area,info);\n  }\n else {\n    drawNoDataMessage(g2,area);\n  }\n  g2.setClip(savedClip);\n  g2.setComposite(originalComposite);\n  drawOutline(g2,area);\n}",
    "begin_line": 2311,
    "end_line": 2345,
    "comment": "/** \n * Draws the plot on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param parentState  the state from the parent plot, if there is one.\n * @param info  collects info about the drawing(\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawPie#2354",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawPie(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "protected void drawPie(Graphics2D g2,Rectangle2D plotArea,PlotRenderingInfo info){\n  PiePlotState state\u003dinitialise(g2,plotArea,this,null,info);\n  double labelReserve\u003d0.0;\n  if (this.labelGenerator !\u003d null \u0026\u0026 !this.simpleLabels) {\n    labelReserve\u003dthis.labelGap + this.maximumLabelWidth;\n  }\n  double gapHorizontal\u003dplotArea.getWidth() * (this.interiorGap + labelReserve) * 2.0;\n  double gapVertical\u003dplotArea.getHeight() * this.interiorGap * 2.0;\n  if (DEBUG_DRAW_INTERIOR) {\n    double hGap\u003dplotArea.getWidth() * this.interiorGap;\n    double vGap\u003dplotArea.getHeight() * this.interiorGap;\n    double igx1\u003dplotArea.getX() + hGap;\n    double igx2\u003dplotArea.getMaxX() - hGap;\n    double igy1\u003dplotArea.getY() + vGap;\n    double igy2\u003dplotArea.getMaxY() - vGap;\n    g2.setPaint(Color.gray);\n    g2.draw(new Rectangle2D.Double(igx1,igy1,igx2 - igx1,igy2 - igy1));\n  }\n  double linkX\u003dplotArea.getX() + gapHorizontal / 2;\n  double linkY\u003dplotArea.getY() + gapVertical / 2;\n  double linkW\u003dplotArea.getWidth() - gapHorizontal;\n  double linkH\u003dplotArea.getHeight() - gapVertical;\n  if (this.circular) {\n    double min\u003dMath.min(linkW,linkH) / 2;\n    linkX\u003d(linkX + linkX + linkW) / 2 - min;\n    linkY\u003d(linkY + linkY + linkH) / 2 - min;\n    linkW\u003d2 * min;\n    linkH\u003d2 * min;\n  }\n  Rectangle2D linkArea\u003dnew Rectangle2D.Double(linkX,linkY,linkW,linkH);\n  state.setLinkArea(linkArea);\n  if (DEBUG_DRAW_LINK_AREA) {\n    g2.setPaint(Color.blue);\n    g2.draw(linkArea);\n    g2.setPaint(Color.yellow);\n    g2.draw(new Ellipse2D.Double(linkArea.getX(),linkArea.getY(),linkArea.getWidth(),linkArea.getHeight()));\n  }\n  double lm\u003d0.0;\n  if (!this.simpleLabels) {\n    lm\u003dthis.labelLinkMargin;\n  }\n  double hh\u003dlinkArea.getWidth() * lm * 2.0;\n  double vv\u003dlinkArea.getHeight() * lm * 2.0;\n  Rectangle2D explodeArea\u003dnew Rectangle2D.Double(linkX + hh / 2.0,linkY + vv / 2.0,linkW - hh,linkH - vv);\n  state.setExplodedPieArea(explodeArea);\n  double maximumExplodePercent\u003dgetMaximumExplodePercent();\n  double percent\u003dmaximumExplodePercent / (1.0 + maximumExplodePercent);\n  double h1\u003dexplodeArea.getWidth() * percent;\n  double v1\u003dexplodeArea.getHeight() * percent;\n  Rectangle2D pieArea\u003dnew Rectangle2D.Double(explodeArea.getX() + h1 / 2.0,explodeArea.getY() + v1 / 2.0,explodeArea.getWidth() - h1,explodeArea.getHeight() - v1);\n  if (DEBUG_DRAW_PIE_AREA) {\n    g2.setPaint(Color.green);\n    g2.draw(pieArea);\n  }\n  state.setPieArea(pieArea);\n  state.setPieCenterX(pieArea.getCenterX());\n  state.setPieCenterY(pieArea.getCenterY());\n  state.setPieWRadius(pieArea.getWidth() / 2.0);\n  state.setPieHRadius(pieArea.getHeight() / 2.0);\n  if ((this.dataset !\u003d null) \u0026\u0026 (this.dataset.getKeys().size() \u003e 0)) {\n    List keys\u003dthis.dataset.getKeys();\n    double totalValue\u003dDatasetUtilities.calculatePieDatasetTotal(this.dataset);\n    int passesRequired\u003dstate.getPassesRequired();\n    for (int pass\u003d0; pass \u003c passesRequired; pass++) {\n      double runningTotal\u003d0.0;\n      for (int section\u003d0; section \u003c keys.size(); section++) {\n        Number n\u003dthis.dataset.getValue(section);\n        if (n !\u003d null) {\n          double value\u003dn.doubleValue();\n          if (value \u003e 0.0) {\n            runningTotal+\u003dvalue;\n            drawItem(g2,section,explodeArea,state,pass);\n          }\n        }\n      }\n    }\n    if (this.simpleLabels) {\n      drawSimpleLabels(g2,keys,totalValue,plotArea,linkArea,state);\n    }\n else {\n      drawLabels(g2,keys,totalValue,plotArea,linkArea,state);\n    }\n  }\n else {\n    drawNoDataMessage(g2,plotArea);\n  }\n}",
    "begin_line": 2354,
    "end_line": 2479,
    "comment": "/** \n * Draws the pie.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param info  chart rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawItem#2490",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawItem(java.awt.Graphics2D, int, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState, int)",
    "snippet": "protected void drawItem(Graphics2D g2,int section,Rectangle2D dataArea,PiePlotState state,int currentPass){\n  Number n\u003dthis.dataset.getValue(section);\n  if (n \u003d\u003d null) {\n    return;\n  }\n  double value\u003dn.doubleValue();\n  double angle1\u003d0.0;\n  double angle2\u003d0.0;\n  if (this.direction \u003d\u003d Rotation.CLOCKWISE) {\n    angle1\u003dstate.getLatestAngle();\n    angle2\u003dangle1 - value / state.getTotal() * 360.0;\n  }\n else   if (this.direction \u003d\u003d Rotation.ANTICLOCKWISE) {\n    angle1\u003dstate.getLatestAngle();\n    angle2\u003dangle1 + value / state.getTotal() * 360.0;\n  }\n else {\n    throw new IllegalStateException(\"Rotation type not recognised.\");\n  }\n  double angle\u003d(angle2 - angle1);\n  if (Math.abs(angle) \u003e getMinimumArcAngleToDraw()) {\n    double ep\u003d0.0;\n    double mep\u003dgetMaximumExplodePercent();\n    if (mep \u003e 0.0) {\n      ep\u003dgetExplodePercent(getSectionKey(section)) / mep;\n    }\n    Rectangle2D arcBounds\u003dgetArcBounds(state.getPieArea(),state.getExplodedPieArea(),angle1,angle,ep);\n    Arc2D.Double arc\u003dnew Arc2D.Double(arcBounds,angle1,angle,Arc2D.PIE);\n    if (currentPass \u003d\u003d 0) {\n      if (this.shadowPaint !\u003d null) {\n        Shape shadowArc\u003dShapeUtilities.createTranslatedShape(arc,(float)this.shadowXOffset,(float)this.shadowYOffset);\n        g2.setPaint(this.shadowPaint);\n        g2.fill(shadowArc);\n      }\n    }\n else     if (currentPass \u003d\u003d 1) {\n      Comparable key\u003dgetSectionKey(section);\n      Paint paint\u003dlookupSectionPaint(key);\n      g2.setPaint(paint);\n      g2.fill(arc);\n      Paint outlinePaint\u003dlookupSectionOutlinePaint(key);\n      Stroke outlineStroke\u003dlookupSectionOutlineStroke(key);\n      if (this.sectionOutlinesVisible) {\n        g2.setPaint(outlinePaint);\n        g2.setStroke(outlineStroke);\n        g2.draw(arc);\n      }\n      if (state.getInfo() !\u003d null) {\n        EntityCollection entities\u003dstate.getEntityCollection();\n        if (entities !\u003d null) {\n          String tip\u003dnull;\n          if (this.toolTipGenerator !\u003d null) {\n            tip\u003dthis.toolTipGenerator.generateToolTip(this.dataset,key);\n          }\n          String url\u003dnull;\n          if (this.urlGenerator !\u003d null) {\n            url\u003dthis.urlGenerator.generateURL(this.dataset,key,this.pieIndex);\n          }\n          PieSectionEntity entity\u003dnew PieSectionEntity(arc,this.dataset,this.pieIndex,section,key,tip,url);\n          entities.add(entity);\n        }\n      }\n    }\n  }\n  state.setLatestAngle(angle2);\n}",
    "begin_line": 2490,
    "end_line": 2572,
    "comment": "/** \n * Draws a single data item.\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param section  the section index.\n * @param dataArea  the data plot area.\n * @param state  state information for one chart.\n * @param currentPass  the current pass index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawSimpleLabels#2586",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawSimpleLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)",
    "snippet": "protected void drawSimpleLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D pieArea,PiePlotState state){\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));\n  RectangleInsets labelInsets\u003dnew RectangleInsets(UnitType.RELATIVE,0.18,0.18,0.18,0.18);\n  Rectangle2D labelsArea\u003dlabelInsets.createInsetRectangle(pieArea);\n  double runningTotal\u003d0.0;\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    boolean include\u003dtrue;\n    double v\u003d0.0;\n    Number n\u003dgetDataset().getValue(key);\n    if (n \u003d\u003d null) {\n      include\u003d!getIgnoreNullValues();\n    }\n else {\n      v\u003dn.doubleValue();\n      include\u003dgetIgnoreZeroValues() ? v \u003e 0.0 : v \u003e\u003d 0.0;\n    }\n    if (include) {\n      runningTotal\u003drunningTotal + v;\n      double mid\u003dgetStartAngle() + (getDirection().getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);\n      Arc2D arc\u003dnew Arc2D.Double(labelsArea,getStartAngle(),mid - getStartAngle(),Arc2D.OPEN);\n      int x\u003d(int)arc.getEndPoint().getX();\n      int y\u003d(int)arc.getEndPoint().getY();\n      PieSectionLabelGenerator labelGenerator\u003dgetLabelGenerator();\n      if (labelGenerator \u003d\u003d null) {\n        continue;\n      }\n      String label\u003dlabelGenerator.generateSectionLabel(this.dataset,key);\n      if (label \u003d\u003d null) {\n        continue;\n      }\n      g2.setFont(this.labelFont);\n      FontMetrics fm\u003dg2.getFontMetrics();\n      Rectangle2D bounds\u003dTextUtilities.getTextBounds(label,g2,fm);\n      Rectangle2D out\u003dthis.labelPadding.createOutsetRectangle(bounds);\n      Shape bg\u003dShapeUtilities.createTranslatedShape(out,x - bounds.getCenterX(),y - bounds.getCenterY());\n      if (this.labelShadowPaint !\u003d null) {\n        Shape shadow\u003dShapeUtilities.createTranslatedShape(bg,this.shadowXOffset,this.shadowYOffset);\n        g2.setPaint(this.labelShadowPaint);\n        g2.fill(shadow);\n      }\n      if (this.labelBackgroundPaint !\u003d null) {\n        g2.setPaint(this.labelBackgroundPaint);\n        g2.fill(bg);\n      }\n      if (this.labelOutlinePaint !\u003d null \u0026\u0026 this.labelOutlineStroke !\u003d null) {\n        g2.setPaint(this.labelOutlinePaint);\n        g2.setStroke(this.labelOutlineStroke);\n        g2.draw(bg);\n      }\n      g2.setPaint(this.labelPaint);\n      g2.setFont(this.labelFont);\n      TextUtilities.drawAlignedString(getLabelGenerator().generateSectionLabel(getDataset(),key),g2,x,y,TextAnchor.CENTER);\n    }\n  }\n  g2.setComposite(originalComposite);\n}",
    "begin_line": 2586,
    "end_line": 2668,
    "comment": "/** \n * Draws the pie section labels in the simple form.\n * @param g2  the graphics device.\n * @param keys  the section keys.\n * @param totalValue  the total value for all sections in the pie.\n * @param plotArea  the plot area.\n * @param pieArea  the area containing the pie.\n * @param state  the plot state.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawLabels#2680",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawLabels(java.awt.Graphics2D, java.util.List, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PiePlotState)",
    "snippet": "protected void drawLabels(Graphics2D g2,List keys,double totalValue,Rectangle2D plotArea,Rectangle2D linkArea,PiePlotState state){\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,1.0f));\n  DefaultKeyedValues leftKeys\u003dnew DefaultKeyedValues();\n  DefaultKeyedValues rightKeys\u003dnew DefaultKeyedValues();\n  double runningTotal\u003d0.0;\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    boolean include\u003dtrue;\n    double v\u003d0.0;\n    Number n\u003dthis.dataset.getValue(key);\n    if (n \u003d\u003d null) {\n      include\u003d!this.ignoreNullValues;\n    }\n else {\n      v\u003dn.doubleValue();\n      include\u003dthis.ignoreZeroValues ? v \u003e 0.0 : v \u003e\u003d 0.0;\n    }\n    if (include) {\n      runningTotal\u003drunningTotal + v;\n      double mid\u003dthis.startAngle + (this.direction.getFactor() * ((runningTotal - v / 2.0) * 360) / totalValue);\n      if (Math.cos(Math.toRadians(mid)) \u003c 0.0) {\n        leftKeys.addValue(key,new Double(mid));\n      }\n else {\n        rightKeys.addValue(key,new Double(mid));\n      }\n    }\n  }\n  g2.setFont(getLabelFont());\n  double marginX\u003dplotArea.getX() + this.interiorGap * plotArea.getWidth();\n  double gap\u003dplotArea.getWidth() * this.labelGap;\n  double ww\u003dlinkArea.getX() - gap - marginX;\n  float labelWidth\u003d(float)this.labelPadding.trimWidth(ww);\n  if (this.labelGenerator !\u003d null) {\n    drawLeftLabels(leftKeys,g2,plotArea,linkArea,labelWidth,state);\n    drawRightLabels(rightKeys,g2,plotArea,linkArea,labelWidth,state);\n  }\n  g2.setComposite(originalComposite);\n}",
    "begin_line": 2680,
    "end_line": 2741,
    "comment": "/** \n * Draws the labels for the pie sections.\n * @param g2  the graphics device.\n * @param keys  the keys.\n * @param totalValue  the total value.\n * @param plotArea  the plot area.\n * @param linkArea  the link area.\n * @param state  the state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawLeftLabels#2755",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawLeftLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)",
    "snippet": "protected void drawLeftLabels(KeyedValues leftKeys,Graphics2D g2,Rectangle2D plotArea,Rectangle2D linkArea,float maxLabelWidth,PiePlotState state){\n  this.labelDistributor.clear();\n  double lGap\u003dplotArea.getWidth() * this.labelGap;\n  double verticalLinkRadius\u003dstate.getLinkArea().getHeight() / 2.0;\n  for (int i\u003d0; i \u003c leftKeys.getItemCount(); i++) {\n    String label\u003dthis.labelGenerator.generateSectionLabel(this.dataset,leftKeys.getKey(i));\n    if (label !\u003d null) {\n      TextBlock block\u003dTextUtilities.createTextBlock(label,this.labelFont,this.labelPaint,maxLabelWidth,new G2TextMeasurer(g2));\n      TextBox labelBox\u003dnew TextBox(block);\n      labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n      labelBox.setOutlinePaint(this.labelOutlinePaint);\n      labelBox.setOutlineStroke(this.labelOutlineStroke);\n      labelBox.setShadowPaint(this.labelShadowPaint);\n      labelBox.setInteriorGap(this.labelPadding);\n      double theta\u003dMath.toRadians(leftKeys.getValue(i).doubleValue());\n      double baseY\u003dstate.getPieCenterY() - Math.sin(theta) * verticalLinkRadius;\n      double hh\u003dlabelBox.getHeight(g2);\n      this.labelDistributor.addPieLabelRecord(new PieLabelRecord(leftKeys.getKey(i),theta,baseY,labelBox,hh,lGap / 2.0 + lGap / 2.0 * -Math.cos(theta),1.0 - getLabelLinkDepth() + getExplodePercent(leftKeys.getKey(i))));\n    }\n  }\n  double hh\u003dplotArea.getHeight();\n  double gap\u003dhh * getInteriorGap();\n  this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,hh - 2 * gap);\n  for (int i\u003d0; i \u003c this.labelDistributor.getItemCount(); i++) {\n    drawLeftLabel(g2,state,this.labelDistributor.getPieLabelRecord(i));\n  }\n}",
    "begin_line": 2755,
    "end_line": 2796,
    "comment": "/** \n * Draws the left labels.\n * @param leftKeys  a collection of keys and angles (to the middle of thesection, in degrees) for the sections on the left side of the plot.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param linkArea  the link area.\n * @param maxLabelWidth  the maximum label width.\n * @param state  the state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawRightLabels#2808",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawRightLabels(org.jfree.data.KeyedValues, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, float, org.jfree.chart.plot.PiePlotState)",
    "snippet": "protected void drawRightLabels(KeyedValues keys,Graphics2D g2,Rectangle2D plotArea,Rectangle2D linkArea,float maxLabelWidth,PiePlotState state){\n  this.labelDistributor.clear();\n  double lGap\u003dplotArea.getWidth() * this.labelGap;\n  double verticalLinkRadius\u003dstate.getLinkArea().getHeight() / 2.0;\n  for (int i\u003d0; i \u003c keys.getItemCount(); i++) {\n    String label\u003dthis.labelGenerator.generateSectionLabel(this.dataset,keys.getKey(i));\n    if (label !\u003d null) {\n      TextBlock block\u003dTextUtilities.createTextBlock(label,this.labelFont,this.labelPaint,maxLabelWidth,new G2TextMeasurer(g2));\n      TextBox labelBox\u003dnew TextBox(block);\n      labelBox.setBackgroundPaint(this.labelBackgroundPaint);\n      labelBox.setOutlinePaint(this.labelOutlinePaint);\n      labelBox.setOutlineStroke(this.labelOutlineStroke);\n      labelBox.setShadowPaint(this.labelShadowPaint);\n      labelBox.setInteriorGap(this.labelPadding);\n      double theta\u003dMath.toRadians(keys.getValue(i).doubleValue());\n      double baseY\u003dstate.getPieCenterY() - Math.sin(theta) * verticalLinkRadius;\n      double hh\u003dlabelBox.getHeight(g2);\n      this.labelDistributor.addPieLabelRecord(new PieLabelRecord(keys.getKey(i),theta,baseY,labelBox,hh,lGap / 2.0 + lGap / 2.0 * Math.cos(theta),1.0 - getLabelLinkDepth() + getExplodePercent(keys.getKey(i))));\n    }\n  }\n  double hh\u003dplotArea.getHeight();\n  double gap\u003dhh * getInteriorGap();\n  this.labelDistributor.distributeLabels(plotArea.getMinY() + gap,hh - 2 * gap);\n  for (int i\u003d0; i \u003c this.labelDistributor.getItemCount(); i++) {\n    drawRightLabel(g2,state,this.labelDistributor.getPieLabelRecord(i));\n  }\n}",
    "begin_line": 2808,
    "end_line": 2851,
    "comment": "/** \n * Draws the right labels.\n * @param keys  the keys.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param linkArea  the link area.\n * @param maxLabelWidth  the maximum label width.\n * @param state  the state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getLegendItems#2858",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getLegendItems()",
    "snippet": "public LegendItemCollection getLegendItems(){\n  LegendItemCollection result\u003dnew LegendItemCollection();\n  if (this.dataset \u003d\u003d null) {\n    return result;\n  }\n  List keys\u003dthis.dataset.getKeys();\n  int section\u003d0;\n  Shape shape\u003dgetLegendItemShape();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    Number n\u003dthis.dataset.getValue(key);\n    boolean include\u003dtrue;\n    if (n \u003d\u003d null) {\n      include\u003d!this.ignoreNullValues;\n    }\n else {\n      double v\u003dn.doubleValue();\n      if (v \u003d\u003d 0.0) {\n        include\u003d!this.ignoreZeroValues;\n      }\n else {\n        include\u003dv \u003e 0.0;\n      }\n    }\n    if (include) {\n      String label\u003dthis.legendLabelGenerator.generateSectionLabel(this.dataset,key);\n      if (label !\u003d null) {\n        String description\u003dlabel;\n        String toolTipText\u003dnull;\n        if (this.legendLabelToolTipGenerator !\u003d null) {\n          toolTipText\u003dthis.legendLabelToolTipGenerator.generateSectionLabel(this.dataset,key);\n        }\n        String urlText\u003dnull;\n        if (this.legendLabelURLGenerator !\u003d null) {\n          urlText\u003dthis.legendLabelURLGenerator.generateURL(this.dataset,key,this.pieIndex);\n        }\n        Paint paint\u003dlookupSectionPaint(key);\n        Paint outlinePaint\u003dlookupSectionOutlinePaint(key);\n        Stroke outlineStroke\u003dlookupSectionOutlineStroke(key);\n        LegendItem item\u003dnew LegendItem(label,description,toolTipText,urlText,true,shape,true,paint,true,outlinePaint,outlineStroke,false,new Line2D.Float(),new BasicStroke(),Color.black);\n        item.setDataset(getDataset());\n        item.setSeriesIndex(this.dataset.getIndex(key));\n        item.setSeriesKey(key);\n        result.add(item);\n      }\n      section++;\n    }\n else {\n      section++;\n    }\n  }\n  return result;\n}",
    "begin_line": 2858,
    "end_line": 2919,
    "comment": "/** \n * Returns a collection of legend items for the pie chart.\n * @return The legend items (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getPlotType#2926",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getPlotType()",
    "snippet": "public String getPlotType(){\n  return localizationResources.getString(\"Pie_Plot\");\n}",
    "begin_line": 2926,
    "end_line": 2928,
    "comment": "/** \n * Returns a short string describing the type of plot.\n * @return The plot type.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.getArcBounds#2944",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.getArcBounds(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, double, double, double)",
    "snippet": "protected Rectangle2D getArcBounds(Rectangle2D unexploded,Rectangle2D exploded,double angle,double extent,double explodePercent){\n  if (explodePercent \u003d\u003d 0.0) {\n    return unexploded;\n  }\n else {\n    Arc2D arc1\u003dnew Arc2D.Double(unexploded,angle,extent / 2,Arc2D.OPEN);\n    Point2D point1\u003darc1.getEndPoint();\n    Arc2D.Double arc2\u003dnew Arc2D.Double(exploded,angle,extent / 2,Arc2D.OPEN);\n    Point2D point2\u003darc2.getEndPoint();\n    double deltaX\u003d(point1.getX() - point2.getX()) * explodePercent;\n    double deltaY\u003d(point1.getY() - point2.getY()) * explodePercent;\n    return new Rectangle2D.Double(unexploded.getX() - deltaX,unexploded.getY() - deltaY,unexploded.getWidth(),unexploded.getHeight());\n  }\n}",
    "begin_line": 2944,
    "end_line": 2965,
    "comment": "/** \n * Returns a rectangle that can be used to create a pie section (taking into account the amount by which the pie section is \u0027exploded\u0027).\n * @param unexploded  the area inside which the unexploded pie sections aredrawn.\n * @param exploded  the area inside which the exploded pie sections aredrawn.\n * @param angle  the start angle.\n * @param extent  the extent of the arc.\n * @param explodePercent  the amount by which the pie section is exploded.\n * @return A rectangle that can be used to create a pie section.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawLeftLabel#2974",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawLeftLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)",
    "snippet": "protected void drawLeftLabel(Graphics2D g2,PiePlotState state,PieLabelRecord record){\n  double anchorX\u003dstate.getLinkArea().getMinX();\n  double targetX\u003danchorX - record.getGap();\n  double targetY\u003drecord.getAllocatedY();\n  if (this.labelLinksVisible) {\n    double theta\u003drecord.getAngle();\n    double linkX\u003dstate.getPieCenterX() + Math.cos(theta) * state.getPieWRadius() * record.getLinkPercent();\n    double linkY\u003dstate.getPieCenterY() - Math.sin(theta) * state.getPieHRadius() * record.getLinkPercent();\n    double elbowX\u003dstate.getPieCenterX() + Math.cos(theta) * state.getLinkArea().getWidth() / 2.0;\n    double elbowY\u003dstate.getPieCenterY() - Math.sin(theta) * state.getLinkArea().getHeight() / 2.0;\n    double anchorY\u003delbowY;\n    g2.setPaint(this.labelLinkPaint);\n    g2.setStroke(this.labelLinkStroke);\n    PieLabelLinkStyle style\u003dgetLabelLinkStyle();\n    if (style.equals(PieLabelLinkStyle.STANDARD)) {\n      g2.draw(new Line2D.Double(linkX,linkY,elbowX,elbowY));\n      g2.draw(new Line2D.Double(anchorX,anchorY,elbowX,elbowY));\n      g2.draw(new Line2D.Double(anchorX,anchorY,targetX,targetY));\n    }\n else     if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {\n      QuadCurve2D q\u003dnew QuadCurve2D.Float();\n      q.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY);\n      g2.draw(q);\n      g2.draw(new Line2D.Double(elbowX,elbowY,linkX,linkY));\n    }\n else     if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {\n      CubicCurve2D c\u003dnew CubicCurve2D.Float();\n      c.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY,linkX,linkY);\n      g2.draw(c);\n    }\n  }\n  TextBox tb\u003drecord.getLabel();\n  tb.draw(g2,(float)targetX,(float)targetY,RectangleAnchor.RIGHT);\n}",
    "begin_line": 2974,
    "end_line": 3016,
    "comment": "/** \n * Draws a section label on the left side of the pie chart.\n * @param g2  the graphics device.\n * @param state  the state.\n * @param record  the label record.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.drawRightLabel#3025",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.drawRightLabel(java.awt.Graphics2D, org.jfree.chart.plot.PiePlotState, org.jfree.chart.plot.PieLabelRecord)",
    "snippet": "protected void drawRightLabel(Graphics2D g2,PiePlotState state,PieLabelRecord record){\n  double anchorX\u003dstate.getLinkArea().getMaxX();\n  double targetX\u003danchorX + record.getGap();\n  double targetY\u003drecord.getAllocatedY();\n  if (this.labelLinksVisible) {\n    double theta\u003drecord.getAngle();\n    double linkX\u003dstate.getPieCenterX() + Math.cos(theta) * state.getPieWRadius() * record.getLinkPercent();\n    double linkY\u003dstate.getPieCenterY() - Math.sin(theta) * state.getPieHRadius() * record.getLinkPercent();\n    double elbowX\u003dstate.getPieCenterX() + Math.cos(theta) * state.getLinkArea().getWidth() / 2.0;\n    double elbowY\u003dstate.getPieCenterY() - Math.sin(theta) * state.getLinkArea().getHeight() / 2.0;\n    double anchorY\u003delbowY;\n    g2.setPaint(this.labelLinkPaint);\n    g2.setStroke(this.labelLinkStroke);\n    PieLabelLinkStyle style\u003dgetLabelLinkStyle();\n    if (style.equals(PieLabelLinkStyle.STANDARD)) {\n      g2.draw(new Line2D.Double(linkX,linkY,elbowX,elbowY));\n      g2.draw(new Line2D.Double(anchorX,anchorY,elbowX,elbowY));\n      g2.draw(new Line2D.Double(anchorX,anchorY,targetX,targetY));\n    }\n else     if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {\n      QuadCurve2D q\u003dnew QuadCurve2D.Float();\n      q.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY);\n      g2.draw(q);\n      g2.draw(new Line2D.Double(elbowX,elbowY,linkX,linkY));\n    }\n else     if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {\n      CubicCurve2D c\u003dnew CubicCurve2D.Float();\n      c.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY,linkX,linkY);\n      g2.draw(c);\n    }\n  }\n  TextBox tb\u003drecord.getLabel();\n  tb.draw(g2,(float)targetX,(float)targetY,RectangleAnchor.LEFT);\n}",
    "begin_line": 3025,
    "end_line": 3068,
    "comment": "/** \n * Draws a section label on the right side of the pie chart.\n * @param g2  the graphics device.\n * @param state  the state.\n * @param record  the label record.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.equals#3078",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof PiePlot)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  PiePlot that\u003d(PiePlot)obj;\n  if (this.pieIndex !\u003d that.pieIndex) {\n    return false;\n  }\n  if (this.interiorGap !\u003d that.interiorGap) {\n    return false;\n  }\n  if (this.circular !\u003d that.circular) {\n    return false;\n  }\n  if (this.startAngle !\u003d that.startAngle) {\n    return false;\n  }\n  if (this.direction !\u003d that.direction) {\n    return false;\n  }\n  if (this.ignoreZeroValues !\u003d that.ignoreZeroValues) {\n    return false;\n  }\n  if (this.ignoreNullValues !\u003d that.ignoreNullValues) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.sectionPaintMap,that.sectionPaintMap)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseSectionPaint,that.baseSectionPaint)) {\n    return false;\n  }\n  if (this.sectionOutlinesVisible !\u003d that.sectionOutlinesVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.sectionOutlinePaintMap,that.sectionOutlinePaintMap)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseSectionOutlinePaint,that.baseSectionOutlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.sectionOutlineStrokeMap,that.sectionOutlineStrokeMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseSectionOutlineStroke,that.baseSectionOutlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {\n    return false;\n  }\n  if (!(this.shadowXOffset \u003d\u003d that.shadowXOffset)) {\n    return false;\n  }\n  if (!(this.shadowYOffset \u003d\u003d that.shadowYOffset)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.explodePercentages,that.explodePercentages)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelGenerator,that.labelGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelFont,that.labelFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelPaint,that.labelPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelBackgroundPaint,that.labelBackgroundPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelOutlinePaint,that.labelOutlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelOutlineStroke,that.labelOutlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelShadowPaint,that.labelShadowPaint)) {\n    return false;\n  }\n  if (this.simpleLabels !\u003d that.simpleLabels) {\n    return false;\n  }\n  if (!this.simpleLabelOffset.equals(that.simpleLabelOffset)) {\n    return false;\n  }\n  if (!this.labelPadding.equals(that.labelPadding)) {\n    return false;\n  }\n  if (!(this.maximumLabelWidth \u003d\u003d that.maximumLabelWidth)) {\n    return false;\n  }\n  if (!(this.labelGap \u003d\u003d that.labelGap)) {\n    return false;\n  }\n  if (!(this.labelLinkMargin \u003d\u003d that.labelLinkMargin)) {\n    return false;\n  }\n  if (this.labelLinksVisible !\u003d that.labelLinksVisible) {\n    return false;\n  }\n  if (!this.labelLinkStyle.equals(that.labelLinkStyle)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.labelLinkPaint,that.labelLinkPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.labelLinkStroke,that.labelLinkStroke)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.toolTipGenerator,that.toolTipGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.urlGenerator,that.urlGenerator)) {\n    return false;\n  }\n  if (!(this.minimumArcAngleToDraw \u003d\u003d that.minimumArcAngleToDraw)) {\n    return false;\n  }\n  if (!ShapeUtilities.equal(this.legendItemShape,that.legendItemShape)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendLabelGenerator,that.legendLabelGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendLabelToolTipGenerator,that.legendLabelToolTipGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendLabelURLGenerator,that.legendLabelURLGenerator)) {\n    return false;\n  }\n  if (this.autoPopulateSectionPaint !\u003d that.autoPopulateSectionPaint) {\n    return false;\n  }\n  if (this.autoPopulateSectionOutlinePaint !\u003d that.autoPopulateSectionOutlinePaint) {\n    return false;\n  }\n  if (this.autoPopulateSectionOutlineStroke !\u003d that.autoPopulateSectionOutlineStroke) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 3078,
    "end_line": 3247,
    "comment": "/** \n * Tests this plot for equality with an arbitrary object.  Note that the plot\u0027s dataset is NOT included in the test for equality.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.clone#3257",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  PiePlot clone\u003d(PiePlot)super.clone();\n  if (clone.dataset !\u003d null) {\n    clone.dataset.addChangeListener(clone);\n  }\n  if (this.urlGenerator instanceof PublicCloneable) {\n    clone.urlGenerator\u003d(PieURLGenerator)ObjectUtilities.clone(this.urlGenerator);\n  }\n  clone.legendItemShape\u003dShapeUtilities.clone(this.legendItemShape);\n  if (this.legendLabelGenerator !\u003d null) {\n    clone.legendLabelGenerator\u003d(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelGenerator);\n  }\n  if (this.legendLabelToolTipGenerator !\u003d null) {\n    clone.legendLabelToolTipGenerator\u003d(PieSectionLabelGenerator)ObjectUtilities.clone(this.legendLabelToolTipGenerator);\n  }\n  if (this.legendLabelURLGenerator instanceof PublicCloneable) {\n    clone.legendLabelURLGenerator\u003d(PieURLGenerator)ObjectUtilities.clone(this.legendLabelURLGenerator);\n  }\n  return clone;\n}",
    "begin_line": 3257,
    "end_line": 3280,
    "comment": "/** \n * Returns a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the plot doesnot support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.writeObject#3289",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.baseSectionPaint,stream);\n  SerialUtilities.writePaint(this.baseSectionOutlinePaint,stream);\n  SerialUtilities.writeStroke(this.baseSectionOutlineStroke,stream);\n  SerialUtilities.writePaint(this.shadowPaint,stream);\n  SerialUtilities.writePaint(this.labelPaint,stream);\n  SerialUtilities.writePaint(this.labelBackgroundPaint,stream);\n  SerialUtilities.writePaint(this.labelOutlinePaint,stream);\n  SerialUtilities.writeStroke(this.labelOutlineStroke,stream);\n  SerialUtilities.writePaint(this.labelShadowPaint,stream);\n  SerialUtilities.writePaint(this.labelLinkPaint,stream);\n  SerialUtilities.writeStroke(this.labelLinkStroke,stream);\n  SerialUtilities.writeShape(this.legendItemShape,stream);\n}",
    "begin_line": 3289,
    "end_line": 3303,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PiePlot.readObject#3313",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PiePlot.java",
    "class_name": "org.jfree.chart.plot.PiePlot",
    "signature": "org.jfree.chart.plot.PiePlot.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.baseSectionPaint\u003dSerialUtilities.readPaint(stream);\n  this.baseSectionOutlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.baseSectionOutlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.shadowPaint\u003dSerialUtilities.readPaint(stream);\n  this.labelPaint\u003dSerialUtilities.readPaint(stream);\n  this.labelBackgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.labelOutlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.labelOutlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.labelShadowPaint\u003dSerialUtilities.readPaint(stream);\n  this.labelLinkPaint\u003dSerialUtilities.readPaint(stream);\n  this.labelLinkStroke\u003dSerialUtilities.readStroke(stream);\n  this.legendItemShape\u003dSerialUtilities.readShape(stream);\n}",
    "begin_line": 3313,
    "end_line": 3328,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.Plot#299",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.Plot()",
    "snippet": "protected Plot(){\n  this.parent\u003dnull;\n  this.insets\u003dDEFAULT_INSETS;\n  this.backgroundPaint\u003dDEFAULT_BACKGROUND_PAINT;\n  this.backgroundAlpha\u003dDEFAULT_BACKGROUND_ALPHA;\n  this.backgroundImage\u003dnull;\n  this.outlineVisible\u003dtrue;\n  this.outlineStroke\u003dDEFAULT_OUTLINE_STROKE;\n  this.outlinePaint\u003dDEFAULT_OUTLINE_PAINT;\n  this.foregroundAlpha\u003dDEFAULT_FOREGROUND_ALPHA;\n  this.noDataMessage\u003dnull;\n  this.noDataMessageFont\u003dnew Font(\"Tahoma\",Font.PLAIN,12);\n  this.noDataMessagePaint\u003dColor.black;\n  this.drawingSupplier\u003dnew DefaultDrawingSupplier();\n  this.notify\u003dtrue;\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 299,
    "end_line": 320,
    "comment": "/** \n * Creates a new plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getDatasetGroup#329",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getDatasetGroup()",
    "snippet": "public DatasetGroup getDatasetGroup(){\n  return this.datasetGroup;\n}",
    "begin_line": 329,
    "end_line": 331,
    "comment": "/** \n * Returns the dataset group for the plot (not currently used).\n * @return The dataset group.\n * @see #setDatasetGroup(DatasetGroup)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setDatasetGroup#340",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setDatasetGroup(org.jfree.data.general.DatasetGroup)",
    "snippet": "protected void setDatasetGroup(DatasetGroup group){\n  this.datasetGroup\u003dgroup;\n}",
    "begin_line": 340,
    "end_line": 342,
    "comment": "/** \n * Sets the dataset group (not currently used).\n * @param group  the dataset group (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDatasetGroup()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessage#354",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessage()",
    "snippet": "public String getNoDataMessage(){\n  return this.noDataMessage;\n}",
    "begin_line": 354,
    "end_line": 356,
    "comment": "/** \n * Returns the string that is displayed when the dataset is empty or \u003ccode\u003enull\u003c/code\u003e.\n * @return The \u0027no data\u0027 message (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setNoDataMessage(String)\n * @see #getNoDataMessageFont()\n * @see #getNoDataMessagePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessage#367",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessage(java.lang.String)",
    "snippet": "public void setNoDataMessage(String message){\n  this.noDataMessage\u003dmessage;\n  fireChangeEvent();\n}",
    "begin_line": 367,
    "end_line": 370,
    "comment": "/** \n * Sets the message that is displayed when the dataset is empty or \u003ccode\u003enull\u003c/code\u003e, and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param message  the message (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessageFont#380",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessageFont()",
    "snippet": "public Font getNoDataMessageFont(){\n  return this.noDataMessageFont;\n}",
    "begin_line": 380,
    "end_line": 382,
    "comment": "/** \n * Returns the font used to display the \u0027no data\u0027 message.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setNoDataMessageFont(Font)\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessageFont#392",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessageFont(java.awt.Font)",
    "snippet": "public void setNoDataMessageFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.noDataMessageFont\u003dfont;\n  fireChangeEvent();\n}",
    "begin_line": 392,
    "end_line": 398,
    "comment": "/** \n * Sets the font used to display the \u0027no data\u0027 message and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getNoDataMessageFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getNoDataMessagePaint#408",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getNoDataMessagePaint()",
    "snippet": "public Paint getNoDataMessagePaint(){\n  return this.noDataMessagePaint;\n}",
    "begin_line": 408,
    "end_line": 410,
    "comment": "/** \n * Returns the paint used to display the \u0027no data\u0027 message.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setNoDataMessagePaint(Paint)\n * @see #getNoDataMessage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNoDataMessagePaint#420",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNoDataMessagePaint(java.awt.Paint)",
    "snippet": "public void setNoDataMessagePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.noDataMessagePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 420,
    "end_line": 426,
    "comment": "/** \n * Sets the paint used to display the \u0027no data\u0027 message and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getNoDataMessagePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getPlotType#437",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getPlotType()",
    "snippet": "public abstract String getPlotType();",
    "begin_line": 437,
    "end_line": 437,
    "comment": "/** \n * Returns a short string describing the plot type. \u003cP\u003e Note: this gets used in the chart property editing user interface, but there needs to be a better mechanism for identifying the plot type.\n * @return A short string describing the plot type (never\u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getParent#448",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getParent()",
    "snippet": "public Plot getParent(){\n  return this.parent;\n}",
    "begin_line": 448,
    "end_line": 450,
    "comment": "/** \n * Returns the parent plot (or \u003ccode\u003enull\u003c/code\u003e if this plot is not part of a combined plot).\n * @return The parent plot.\n * @see #setParent(Plot)\n * @see #getRootPlot()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setParent#460",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setParent(org.jfree.chart.plot.Plot)",
    "snippet": "public void setParent(Plot parent){\n  this.parent\u003dparent;\n}",
    "begin_line": 460,
    "end_line": 462,
    "comment": "/** \n * Sets the parent plot.  This method is intended for internal use, you shouldn\u0027t need to call it directly.\n * @param parent  the parent plot (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRootPlot#471",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRootPlot()",
    "snippet": "public Plot getRootPlot(){\n  Plot p\u003dgetParent();\n  if (p \u003d\u003d null) {\n    return this;\n  }\n else {\n    return p.getRootPlot();\n  }\n}",
    "begin_line": 471,
    "end_line": 481,
    "comment": "/** \n * Returns the root plot.\n * @return The root plot.\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.isSubplot#493",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.isSubplot()",
    "snippet": "public boolean isSubplot(){\n  return (getParent() !\u003d null);\n}",
    "begin_line": 493,
    "end_line": 495,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this plot is part of a combined plot structure (that is,  {@link #getParent()} returns a non-\u003ccode\u003enull\u003c/code\u003evalue), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this plot is part of a combined plotstructure.\n * @see #getParent()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getInsets#504",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getInsets()",
    "snippet": "public RectangleInsets getInsets(){\n  return this.insets;\n}",
    "begin_line": 504,
    "end_line": 506,
    "comment": "/** \n * Returns the insets for the plot area.\n * @return The insets (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setInsets#517",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setInsets(RectangleInsets insets){\n  setInsets(insets,true);\n}",
    "begin_line": 517,
    "end_line": 519,
    "comment": "/** \n * Sets the insets for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param insets  the new insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getInsets()\n * @see #setInsets(RectangleInsets,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setInsets#532",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setInsets(org.jfree.chart.util.RectangleInsets, boolean)",
    "snippet": "public void setInsets(RectangleInsets insets,boolean notify){\n  if (insets \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027insets\u0027 argument.\");\n  }\n  if (!this.insets.equals(insets)) {\n    this.insets\u003dinsets;\n    if (notify) {\n      fireChangeEvent();\n    }\n  }\n}",
    "begin_line": 532,
    "end_line": 543,
    "comment": "/** \n * Sets the insets for the plot and, if requested,  and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param insets  the new insets (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether the registered listeners arenotified.\n * @see #getInsets()\n * @see #setInsets(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundPaint#552",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundPaint()",
    "snippet": "public Paint getBackgroundPaint(){\n  return this.backgroundPaint;\n}",
    "begin_line": 552,
    "end_line": 554,
    "comment": "/** \n * Returns the background color of the plot area.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundPaint#564",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setBackgroundPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    if (this.backgroundPaint !\u003d null) {\n      this.backgroundPaint\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.backgroundPaint !\u003d null) {\n      if (this.backgroundPaint.equals(paint)) {\n        return;\n      }\n    }\n    this.backgroundPaint\u003dpaint;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 564,
    "end_line": 582,
    "comment": "/** \n * Sets the background color of the plot area and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundAlpha#591",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundAlpha()",
    "snippet": "public float getBackgroundAlpha(){\n  return this.backgroundAlpha;\n}",
    "begin_line": 591,
    "end_line": 593,
    "comment": "/** \n * Returns the alpha transparency of the plot area background.\n * @return The alpha transparency.\n * @see #setBackgroundAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundAlpha#603",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundAlpha(float)",
    "snippet": "public void setBackgroundAlpha(float alpha){\n  if (this.backgroundAlpha !\u003d alpha) {\n    this.backgroundAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 603,
    "end_line": 608,
    "comment": "/** \n * Sets the alpha transparency of the plot area background, and notifies registered listeners that the plot has been modified.\n * @param alpha the new alpha value (in the range 0.0f to 1.0f).\n * @see #getBackgroundAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getDrawingSupplier#617",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getDrawingSupplier()",
    "snippet": "public DrawingSupplier getDrawingSupplier(){\n  DrawingSupplier result\u003dnull;\n  Plot p\u003dgetParent();\n  if (p !\u003d null) {\n    result\u003dp.getDrawingSupplier();\n  }\n else {\n    result\u003dthis.drawingSupplier;\n  }\n  return result;\n}",
    "begin_line": 617,
    "end_line": 627,
    "comment": "/** \n * Returns the drawing supplier for the plot.\n * @return The drawing supplier (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDrawingSupplier(DrawingSupplier)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setDrawingSupplier#641",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)",
    "snippet": "public void setDrawingSupplier(DrawingSupplier supplier){\n  this.drawingSupplier\u003dsupplier;\n  fireChangeEvent();\n}",
    "begin_line": 641,
    "end_line": 644,
    "comment": "/** \n * Sets the drawing supplier for the plot and sends a {@link PlotChangeEvent} to all registered listeners.  The drawingsupplier is responsible for supplying a limitless (possibly repeating) sequence of \u003ccode\u003ePaint\u003c/code\u003e, \u003ccode\u003eStroke\u003c/code\u003e and \u003ccode\u003eShape\u003c/code\u003e objects that the plot\u0027s renderer(s) can use to populate its (their) tables.\n * @param supplier  the new supplier.\n * @see #getDrawingSupplier()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setDrawingSupplier#661",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier, boolean)",
    "snippet": "public void setDrawingSupplier(DrawingSupplier supplier,boolean notify){\n  this.drawingSupplier\u003dsupplier;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 661,
    "end_line": 666,
    "comment": "/** \n * Sets the drawing supplier for the plot and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.  The drawingsupplier is responsible for supplying a limitless (possibly repeating) sequence of \u003ccode\u003ePaint\u003c/code\u003e, \u003ccode\u003eStroke\u003c/code\u003e and \u003ccode\u003eShape\u003c/code\u003e objects that the plot\u0027s renderer(s) can use to populate its (their) tables.\n * @param supplier  the new supplier.\n * @param notify  notify listeners?\n * @see #getDrawingSupplier()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImage#676",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImage()",
    "snippet": "public Image getBackgroundImage(){\n  return this.backgroundImage;\n}",
    "begin_line": 676,
    "end_line": 678,
    "comment": "/** \n * Returns the background image that is used to fill the plot\u0027s background area.\n * @return The image (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBackgroundImage(Image)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImage#688",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImage(java.awt.Image)",
    "snippet": "public void setBackgroundImage(Image image){\n  this.backgroundImage\u003dimage;\n  fireChangeEvent();\n}",
    "begin_line": 688,
    "end_line": 691,
    "comment": "/** \n * Sets the background image for the plot and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param image  the image (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBackgroundImage()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImageAlignment#701",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImageAlignment()",
    "snippet": "public int getBackgroundImageAlignment(){\n  return this.backgroundImageAlignment;\n}",
    "begin_line": 701,
    "end_line": 703,
    "comment": "/** \n * Returns the background image alignment. Alignment constants are defined in the  {@link Align} class.\n * @return The alignment.\n * @see #setBackgroundImageAlignment(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImageAlignment#714",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImageAlignment(int)",
    "snippet": "public void setBackgroundImageAlignment(int alignment){\n  if (this.backgroundImageAlignment !\u003d alignment) {\n    this.backgroundImageAlignment\u003dalignment;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 714,
    "end_line": 719,
    "comment": "/** \n * Sets the alignment for the background image and sends a {@link PlotChangeEvent} to all registered listeners.  Alignment optionsare defined by the  {@link Align} class.\n * @param alignment  the alignment.\n * @see #getBackgroundImageAlignment()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getBackgroundImageAlpha#730",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getBackgroundImageAlpha()",
    "snippet": "public float getBackgroundImageAlpha(){\n  return this.backgroundImageAlpha;\n}",
    "begin_line": 730,
    "end_line": 732,
    "comment": "/** \n * Returns the alpha transparency used to draw the background image.  This is a value in the range 0.0f to 1.0f, where 0.0f is fully transparent and 1.0f is fully opaque.\n * @return The alpha transparency.\n * @see #setBackgroundImageAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setBackgroundImageAlpha#745",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setBackgroundImageAlpha(float)",
    "snippet": "public void setBackgroundImageAlpha(float alpha){\n  if (alpha \u003c 0.0f || alpha \u003e 1.0f)   throw new IllegalArgumentException(\"The \u0027alpha\u0027 value must be in the range 0.0f to 1.0f.\");\n  if (this.backgroundImageAlpha !\u003d alpha) {\n    this.backgroundImageAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 745,
    "end_line": 753,
    "comment": "/** \n * Sets the alpha transparency used when drawing the background image.\n * @param alpha  the alpha transparency (in the range 0.0f to 1.0f, where0.0f is fully transparent, and 1.0f is fully opaque).\n * @throws IllegalArgumentException if \u003ccode\u003ealpha\u003c/code\u003e is not withinthe specified range.\n * @see #getBackgroundImageAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.isOutlineVisible#768",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.isOutlineVisible()",
    "snippet": "public boolean isOutlineVisible(){\n  return this.outlineVisible;\n}",
    "begin_line": 768,
    "end_line": 770,
    "comment": "/** \n * Returns the flag that controls whether or not the plot outline is drawn.  The default value is \u003ccode\u003etrue\u003c/code\u003e.  Note that for historical reasons, the plot\u0027s outline paint and stroke can take on \u003ccode\u003enull\u003c/code\u003e values, in which case the outline will not be drawn even if this flag is set to \u003ccode\u003etrue\u003c/code\u003e.\n * @return The outline visibility flag.\n * @since 1.0.6\n * @see #setOutlineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlineVisible#782",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlineVisible(boolean)",
    "snippet": "public void setOutlineVisible(boolean visible){\n  this.outlineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 782,
    "end_line": 785,
    "comment": "/** \n * Sets the flag that controls whether or not the plot\u0027s outline is drawn, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param visible  the new flag value.\n * @since 1.0.6\n * @see #isOutlineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getOutlineStroke#794",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getOutlineStroke()",
    "snippet": "public Stroke getOutlineStroke(){\n  return this.outlineStroke;\n}",
    "begin_line": 794,
    "end_line": 796,
    "comment": "/** \n * Returns the stroke used to outline the plot area.\n * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlineStroke#807",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlineStroke(java.awt.Stroke)",
    "snippet": "public void setOutlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    if (this.outlineStroke !\u003d null) {\n      this.outlineStroke\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.outlineStroke !\u003d null) {\n      if (this.outlineStroke.equals(stroke)) {\n        return;\n      }\n    }\n    this.outlineStroke\u003dstroke;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 807,
    "end_line": 823,
    "comment": "/** \n * Sets the stroke used to outline the plot area and sends a {@link PlotChangeEvent} to all registered listeners. If you set thisattribute to \u003ccode\u003enull\u003c/code\u003e, no outline will be drawn.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getOutlinePaint#832",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getOutlinePaint()",
    "snippet": "public Paint getOutlinePaint(){\n  return this.outlinePaint;\n}",
    "begin_line": 832,
    "end_line": 834,
    "comment": "/** \n * Returns the color used to draw the outline of the plot area.\n * @return The color (possibly \u003ccode\u003enull\u003ccode\u003e).\n * @see #setOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setOutlinePaint#845",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setOutlinePaint(java.awt.Paint)",
    "snippet": "public void setOutlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    if (this.outlinePaint !\u003d null) {\n      this.outlinePaint\u003dnull;\n      fireChangeEvent();\n    }\n  }\n else {\n    if (this.outlinePaint !\u003d null) {\n      if (this.outlinePaint.equals(paint)) {\n        return;\n      }\n    }\n    this.outlinePaint\u003dpaint;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 845,
    "end_line": 861,
    "comment": "/** \n * Sets the paint used to draw the outline of the plot area and sends a {@link PlotChangeEvent} to all registered listeners.  If you set thisattribute to \u003ccode\u003enull\u003c/code\u003e, no outline will be drawn.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getForegroundAlpha#870",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getForegroundAlpha()",
    "snippet": "public float getForegroundAlpha(){\n  return this.foregroundAlpha;\n}",
    "begin_line": 870,
    "end_line": 872,
    "comment": "/** \n * Returns the alpha-transparency for the plot foreground.\n * @return The alpha-transparency.\n * @see #setForegroundAlpha(float)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setForegroundAlpha#882",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setForegroundAlpha(float)",
    "snippet": "public void setForegroundAlpha(float alpha){\n  if (this.foregroundAlpha !\u003d alpha) {\n    this.foregroundAlpha\u003dalpha;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 882,
    "end_line": 887,
    "comment": "/** \n * Sets the alpha-transparency for the plot and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param alpha  the new alpha transparency.\n * @see #getForegroundAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getLegendItems#896",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getLegendItems()",
    "snippet": "public LegendItemCollection getLegendItems(){\n  return null;\n}",
    "begin_line": 896,
    "end_line": 898,
    "comment": "/** \n * Returns the legend items for the plot.  By default, this method returns \u003ccode\u003enull\u003c/code\u003e.  Subclasses should override to return a {@link LegendItemCollection}.\n * @return The legend items for the plot (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.isNotify#910",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.isNotify()",
    "snippet": "public boolean isNotify(){\n  return this.notify;\n}",
    "begin_line": 910,
    "end_line": 912,
    "comment": "/** \n * Returns a flag that controls whether or not change events are sent to registered listeners.\n * @return A boolean.\n * @see #setNotify(boolean)\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.setNotify#924",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.setNotify(boolean)",
    "snippet": "public void setNotify(boolean notify){\n  this.notify\u003dnotify;\n  if (notify) {\n    notifyListeners(new PlotChangeEvent(this));\n  }\n}",
    "begin_line": 924,
    "end_line": 930,
    "comment": "/** \n * Sets a flag that controls whether or not listeners receive {@link PlotChangeEvent} notifications.\n * @param notify  a boolean.\n * @see #isNotify()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.addChangeListener#939",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
    "snippet": "public void addChangeListener(PlotChangeListener listener){\n  this.listenerList.add(PlotChangeListener.class,listener);\n}",
    "begin_line": 939,
    "end_line": 941,
    "comment": "/** \n * Registers an object for notification of changes to the plot.\n * @param listener  the object to be registered.\n * @see #removeChangeListener(PlotChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.removeChangeListener#950",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.removeChangeListener(org.jfree.chart.event.PlotChangeListener)",
    "snippet": "public void removeChangeListener(PlotChangeListener listener){\n  this.listenerList.remove(PlotChangeListener.class,listener);\n}",
    "begin_line": 950,
    "end_line": 952,
    "comment": "/** \n * Unregisters an object for notification of changes to the plot.\n * @param listener  the object to be unregistered.\n * @see #addChangeListener(PlotChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.notifyListeners#959",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
    "snippet": "public void notifyListeners(PlotChangeEvent event){\n  if (!this.notify) {\n    return;\n  }\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d PlotChangeListener.class) {\n      ((PlotChangeListener)listeners[i + 1]).plotChanged(event);\n    }\n  }\n}",
    "begin_line": 959,
    "end_line": 971,
    "comment": "/** \n * Notifies all registered listeners that the plot has been modified.\n * @param event  information about the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fireChangeEvent#978",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fireChangeEvent()",
    "snippet": "protected void fireChangeEvent(){\n  notifyListeners(new PlotChangeEvent(this));\n}",
    "begin_line": 978,
    "end_line": 980,
    "comment": "/** \n * Sends a  {@link PlotChangeEvent} to all registered listeners.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.draw#996",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public abstract void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info);",
    "begin_line": 996,
    "end_line": 1000,
    "comment": "/** \n * Draws the plot within the specified area.  The anchor is a point on the chart that is specified externally (for instance, it may be the last point of the last mouse click performed by the user) - plots can use or ignore this value as they see fit. \u003cbr\u003e\u003cbr\u003e Subclasses need to provide an implementation of this method, obviously.\n * @param g2  the graphics device.\n * @param area  the plot area.\n * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param parentState  the parent state (if any).\n * @param info  carries back plot rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawBackground#1012",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area);\n  drawBackgroundImage(g2,area);\n}",
    "begin_line": 1012,
    "end_line": 1017,
    "comment": "/** \n * Draws the plot background (the background color and/or image). \u003cP\u003e This method will be called during the chart drawing process and is declared public so that it can be accessed by the renderers used by certain subclasses.  You shouldn\u0027t need to call this method directly.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fillBackground#1029",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void fillBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area,PlotOrientation.VERTICAL);\n}",
    "begin_line": 1029,
    "end_line": 1031,
    "comment": "/** \n * Fills the specified area with the background paint.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #getBackgroundPaint()\n * @see #getBackgroundAlpha()\n * @see #fillBackground(Graphics2D,Rectangle2D,PlotOrientation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.fillBackground#1045",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "protected void fillBackground(Graphics2D g2,Rectangle2D area,PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  if (this.backgroundPaint \u003d\u003d null) {\n    return;\n  }\n  Paint p\u003dthis.backgroundPaint;\n  if (p instanceof GradientPaint) {\n    GradientPaint gp\u003d(GradientPaint)p;\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      p\u003dnew GradientPaint((float)area.getCenterX(),(float)area.getMaxY(),gp.getColor1(),(float)area.getCenterX(),(float)area.getMinY(),gp.getColor2());\n    }\n else     if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      p\u003dnew GradientPaint((float)area.getMinX(),(float)area.getCenterY(),gp.getColor1(),(float)area.getMaxX(),(float)area.getCenterY(),gp.getColor2());\n    }\n  }\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundAlpha));\n  g2.setPaint(p);\n  g2.fill(area);\n  g2.setComposite(originalComposite);\n}",
    "begin_line": 1045,
    "end_line": 1075,
    "comment": "/** \n * Fills the specified area with the background paint.  If the background paint is an instance of \u003ccode\u003eGradientPaint\u003c/code\u003e, the gradient will run in the direction suggested by the plot\u0027s orientation.\n * @param g2  the graphics target.\n * @param area  the plot area.\n * @param orientation  the plot orientation (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawBackgroundImage#1088",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawBackgroundImage(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawBackgroundImage(Graphics2D g2,Rectangle2D area){\n  if (this.backgroundImage !\u003d null) {\n    Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,this.backgroundImageAlpha));\n    Rectangle2D dest\u003dnew Rectangle2D.Double(0.0,0.0,this.backgroundImage.getWidth(null),this.backgroundImage.getHeight(null));\n    Align.align(dest,area,this.backgroundImageAlignment);\n    g2.drawImage(this.backgroundImage,(int)dest.getX(),(int)dest.getY(),(int)dest.getWidth() + 1,(int)dest.getHeight() + 1,null);\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 1088,
    "end_line": 1102,
    "comment": "/** \n * Draws the background image (if there is one) aligned within the specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #getBackgroundImage()\n * @see #getBackgroundImageAlignment()\n * @see #getBackgroundImageAlpha()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawOutline#1113",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawOutline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawOutline(Graphics2D g2,Rectangle2D area){\n  if (!this.outlineVisible) {\n    return;\n  }\n  if ((this.outlineStroke !\u003d null) \u0026\u0026 (this.outlinePaint !\u003d null)) {\n    g2.setStroke(this.outlineStroke);\n    g2.setPaint(this.outlinePaint);\n    g2.draw(area);\n  }\n}",
    "begin_line": 1113,
    "end_line": 1122,
    "comment": "/** \n * Draws the plot outline.  This method will be called during the chart drawing process and is declared public so that it can be accessed by the renderers used by certain subclasses. You shouldn\u0027t need to call this method directly.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.drawNoDataMessage#1130",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.drawNoDataMessage(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawNoDataMessage(Graphics2D g2,Rectangle2D area){\n  Shape savedClip\u003dg2.getClip();\n  g2.clip(area);\n  String message\u003dthis.noDataMessage;\n  if (message !\u003d null) {\n    g2.setFont(this.noDataMessageFont);\n    g2.setPaint(this.noDataMessagePaint);\n    TextBlock block\u003dTextUtilities.createTextBlock(this.noDataMessage,this.noDataMessageFont,this.noDataMessagePaint,0.9f * (float)area.getWidth(),new G2TextMeasurer(g2));\n    block.draw(g2,(float)area.getCenterX(),(float)area.getCenterY(),TextBlockAnchor.CENTER);\n  }\n  g2.setClip(savedClip);\n}",
    "begin_line": 1130,
    "end_line": 1145,
    "comment": "/** \n * Draws a message to state that there is no data to plot.\n * @param g2  the graphics device.\n * @param area  the area within which the plot should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.createAndAddEntity#1161",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.createAndAddEntity(java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo, java.lang.String, java.lang.String)",
    "snippet": "protected void createAndAddEntity(Rectangle2D dataArea,PlotRenderingInfo plotState,String toolTip,String urlText){\n  if (plotState !\u003d null \u0026\u0026 plotState.getOwner() !\u003d null) {\n    EntityCollection e\u003dplotState.getOwner().getEntityCollection();\n    if (e !\u003d null) {\n      e.add(new PlotEntity(dataArea,this,toolTip,urlText));\n    }\n  }\n}",
    "begin_line": 1161,
    "end_line": 1169,
    "comment": "/** \n * Creates a plot entity that contains a reference to the plot and the data area as shape.\n * @param dataArea  the data area used as hot spot for the entity.\n * @param plotState  the plot rendering info containing a reference to theEntityCollection.\n * @param toolTip  the tool tip (defined in the respective Plotsubclass) (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param urlText  the url (defined in the respective Plot subclass)(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.handleClick#1181",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.handleClick(int, int, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void handleClick(int x,int y,PlotRenderingInfo info){\n}",
    "begin_line": 1181,
    "end_line": 1183,
    "comment": "/** \n * Handles a \u0027click\u0027 on the plot.  Since the plot does not maintain any information about where it has been drawn, the plot rendering info is supplied as an argument so that the plot dimensions can be determined.\n * @param x  the x coordinate (in Java2D space).\n * @param y  the y coordinate (in Java2D space).\n * @param info  an object containing information about the dimensions ofthe plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.zoom#1191",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.zoom(double)",
    "snippet": "public void zoom(double percent){\n}",
    "begin_line": 1191,
    "end_line": 1193,
    "comment": "/** \n * Performs a zoom on the plot.  Subclasses should override if zooming is appropriate for the type of plot.\n * @param percent  the zoom percentage.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.axisChanged#1200",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.axisChanged(org.jfree.chart.event.AxisChangeEvent)",
    "snippet": "public void axisChanged(AxisChangeEvent event){\n  fireChangeEvent();\n}",
    "begin_line": 1200,
    "end_line": 1202,
    "comment": "/** \n * Receives notification of a change to one of the plot\u0027s axes.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.datasetChanged#1212",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
    "snippet": "public void datasetChanged(DatasetChangeEvent event){\n  PlotChangeEvent newEvent\u003dnew PlotChangeEvent(this);\n  newEvent.setType(ChartChangeEventType.DATASET_UPDATED);\n  notifyListeners(newEvent);\n}",
    "begin_line": 1212,
    "end_line": 1216,
    "comment": "/** \n * Receives notification of a change to the plot\u0027s dataset. \u003cP\u003e The plot reacts by passing on a plot change event to all registered listeners.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.markerChanged#1226",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.markerChanged(org.jfree.chart.event.MarkerChangeEvent)",
    "snippet": "public void markerChanged(MarkerChangeEvent event){\n  fireChangeEvent();\n}",
    "begin_line": 1226,
    "end_line": 1228,
    "comment": "/** \n * Receives notification of a change to a marker that is assigned to the plot.\n * @param event  the event.\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRectX#1240",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRectX(double, double, double, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected double getRectX(double x,double w1,double w2,RectangleEdge edge){\n  double result\u003dx;\n  if (edge \u003d\u003d RectangleEdge.LEFT) {\n    result\u003dresult + w1;\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    result\u003dresult + w2;\n  }\n  return result;\n}",
    "begin_line": 1240,
    "end_line": 1252,
    "comment": "/** \n * Adjusts the supplied x-value.\n * @param x  the x-value.\n * @param w1  width 1.\n * @param w2  width 2.\n * @param edge  the edge (left or right).\n * @return The adjusted x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.getRectY#1264",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.getRectY(double, double, double, org.jfree.chart.util.RectangleEdge)",
    "snippet": "protected double getRectY(double y,double h1,double h2,RectangleEdge edge){\n  double result\u003dy;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    result\u003dresult + h1;\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    result\u003dresult + h2;\n  }\n  return result;\n}",
    "begin_line": 1264,
    "end_line": 1276,
    "comment": "/** \n * Adjusts the supplied y-value.\n * @param y  the x-value.\n * @param h1  height 1.\n * @param h2  height 2.\n * @param edge  the edge (top or bottom).\n * @return The adjusted y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.equals#1285",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Plot)) {\n    return false;\n  }\n  Plot that\u003d(Plot)obj;\n  if (!ObjectUtilities.equal(this.noDataMessage,that.noDataMessage)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.noDataMessageFont,that.noDataMessageFont)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.noDataMessagePaint,that.noDataMessagePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.insets,that.insets)) {\n    return false;\n  }\n  if (this.outlineVisible !\u003d that.outlineVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.outlineStroke,that.outlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundImage,that.backgroundImage)) {\n    return false;\n  }\n  if (this.backgroundImageAlignment !\u003d that.backgroundImageAlignment) {\n    return false;\n  }\n  if (this.backgroundImageAlpha !\u003d that.backgroundImageAlpha) {\n    return false;\n  }\n  if (this.foregroundAlpha !\u003d that.foregroundAlpha) {\n    return false;\n  }\n  if (this.backgroundAlpha !\u003d that.backgroundAlpha) {\n    return false;\n  }\n  if (!this.drawingSupplier.equals(that.drawingSupplier)) {\n    return false;\n  }\n  if (this.notify !\u003d that.notify) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1285,
    "end_line": 1343,
    "comment": "/** \n * Tests this plot for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.clone#1353",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Plot clone\u003d(Plot)super.clone();\n  if (this.datasetGroup !\u003d null) {\n    clone.datasetGroup\u003d(DatasetGroup)ObjectUtilities.clone(this.datasetGroup);\n  }\n  clone.drawingSupplier\u003d(DrawingSupplier)ObjectUtilities.clone(this.drawingSupplier);\n  clone.listenerList\u003dnew EventListenerList();\n  return clone;\n}",
    "begin_line": 1353,
    "end_line": 1367,
    "comment": "/** \n * Creates a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the plot does notsupport cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.writeObject#1376",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.noDataMessagePaint,stream);\n  SerialUtilities.writeStroke(this.outlineStroke,stream);\n  SerialUtilities.writePaint(this.outlinePaint,stream);\n  SerialUtilities.writePaint(this.backgroundPaint,stream);\n}",
    "begin_line": 1376,
    "end_line": 1383,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.readObject#1393",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.noDataMessagePaint\u003dSerialUtilities.readPaint(stream);\n  this.outlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.outlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.backgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 1393,
    "end_line": 1404,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.resolveDomainAxisLocation#1414",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "public static RectangleEdge resolveDomainAxisLocation(AxisLocation location,PlotOrientation orientation){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  RectangleEdge result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n  }\n  if (result \u003d\u003d null) {\n    throw new IllegalStateException(\"resolveDomainAxisLocation()\");\n  }\n  return result;\n}",
    "begin_line": 1414,
    "end_line": 1464,
    "comment": "/** \n * Resolves a domain axis location for a given plot orientation.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Plot.resolveRangeAxisLocation#1474",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/Plot.java",
    "class_name": "org.jfree.chart.plot.Plot",
    "signature": "org.jfree.chart.plot.Plot.resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "public static RectangleEdge resolveRangeAxisLocation(AxisLocation location,PlotOrientation orientation){\n  if (location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 argument.\");\n  }\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  RectangleEdge result\u003dnull;\n  if (location \u003d\u003d AxisLocation.TOP_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.TOP_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.TOP;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_RIGHT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.RIGHT;\n    }\n  }\n else   if (location \u003d\u003d AxisLocation.BOTTOM_OR_LEFT) {\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      result\u003dRectangleEdge.BOTTOM;\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      result\u003dRectangleEdge.LEFT;\n    }\n  }\n  if (result \u003d\u003d null) {\n    throw new IllegalStateException(\"resolveRangeAxisLocation()\");\n  }\n  return result;\n}",
    "begin_line": 1474,
    "end_line": 1525,
    "comment": "/** \n * Resolves a range axis location for a given plot orientation.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The edge (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.PlotOrientation#72",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
    "snippet": "private PlotOrientation(String name){\n  this.name\u003dname;\n}",
    "begin_line": 72,
    "end_line": 74,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.toString#81",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 81,
    "end_line": 83,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.equals#93",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof PlotOrientation)) {\n    return false;\n  }\n  PlotOrientation orientation\u003d(PlotOrientation)obj;\n  if (!this.name.equals(orientation.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 93,
    "end_line": 105,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.hashCode#112",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 112,
    "end_line": 114,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PlotOrientation.readResolve#123",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/PlotOrientation.java",
    "class_name": "org.jfree.chart.plot.PlotOrientation",
    "signature": "org.jfree.chart.plot.PlotOrientation.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  Object result\u003dnull;\n  if (this.equals(PlotOrientation.HORIZONTAL)) {\n    result\u003dPlotOrientation.HORIZONTAL;\n  }\n else   if (this.equals(PlotOrientation.VERTICAL)) {\n    result\u003dPlotOrientation.VERTICAL;\n  }\n  return result;\n}",
    "begin_line": 123,
    "end_line": 132,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.SeriesRenderingOrder#78",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.SeriesRenderingOrder(java.lang.String)",
    "snippet": "private SeriesRenderingOrder(String name){\n  this.name\u003dname;\n}",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.toString#87",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 87,
    "end_line": 89,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.equals#99",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof SeriesRenderingOrder)) {\n    return false;\n  }\n  SeriesRenderingOrder order\u003d(SeriesRenderingOrder)obj;\n  if (!this.name.equals(order.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 99,
    "end_line": 111,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.hashCode#118",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesRenderingOrder.readResolve#129",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/SeriesRenderingOrder.java",
    "class_name": "org.jfree.chart.plot.SeriesRenderingOrder",
    "signature": "org.jfree.chart.plot.SeriesRenderingOrder.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(SeriesRenderingOrder.FORWARD)) {\n    return SeriesRenderingOrder.FORWARD;\n  }\n else   if (this.equals(SeriesRenderingOrder.REVERSE)) {\n    return SeriesRenderingOrder.REVERSE;\n  }\n  return null;\n}",
    "begin_line": 129,
    "end_line": 137,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.XYPlot#601",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.XYPlot()",
    "snippet": "public XYPlot(){\n  this(null,null,null,null);\n}",
    "begin_line": 601,
    "end_line": 603,
    "comment": "/** \n * Creates a new \u003ccode\u003eXYPlot\u003c/code\u003e instance with no dataset, no axes and no renderer.  You should specify these items before using the plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.XYPlot#616",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.XYPlot(org.jfree.data.xy.XYDataset, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.xy.XYItemRenderer)",
    "snippet": "public XYPlot(XYDataset dataset,ValueAxis domainAxis,ValueAxis rangeAxis,XYItemRenderer renderer){\n  super();\n  this.orientation\u003dPlotOrientation.VERTICAL;\n  this.weight\u003d1;\n  this.axisOffset\u003dnew RectangleInsets(4.0,4.0,4.0,4.0);\n  this.domainAxes\u003dnew ObjectList();\n  this.domainAxisLocations\u003dnew ObjectList();\n  this.foregroundDomainMarkers\u003dnew HashMap();\n  this.backgroundDomainMarkers\u003dnew HashMap();\n  this.rangeAxes\u003dnew ObjectList();\n  this.rangeAxisLocations\u003dnew ObjectList();\n  this.foregroundRangeMarkers\u003dnew HashMap();\n  this.backgroundRangeMarkers\u003dnew HashMap();\n  this.datasets\u003dnew ObjectList();\n  this.renderers\u003dnew ObjectList();\n  this.datasetToDomainAxesMap\u003dnew TreeMap();\n  this.datasetToRangeAxesMap\u003dnew TreeMap();\n  this.annotations\u003dnew java.util.ArrayList();\n  this.datasets.set(0,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  this.renderers.set(0,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  this.domainAxes.set(0,domainAxis);\n  this.mapDatasetToDomainAxis(0,0);\n  if (domainAxis !\u003d null) {\n    domainAxis.setPlot(this);\n    domainAxis.addChangeListener(this);\n  }\n  this.domainAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);\n  this.rangeAxes.set(0,rangeAxis);\n  this.mapDatasetToRangeAxis(0,0);\n  if (rangeAxis !\u003d null) {\n    rangeAxis.setPlot(this);\n    rangeAxis.addChangeListener(this);\n  }\n  this.rangeAxisLocations.set(0,AxisLocation.BOTTOM_OR_LEFT);\n  configureDomainAxes();\n  configureRangeAxes();\n  this.domainGridlinesVisible\u003dtrue;\n  this.domainGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.domainGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.domainMinorGridlinesVisible\u003dfalse;\n  this.domainMinorGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.domainMinorGridlinePaint\u003dColor.white;\n  this.domainZeroBaselineVisible\u003dfalse;\n  this.domainZeroBaselinePaint\u003dColor.black;\n  this.domainZeroBaselineStroke\u003dnew BasicStroke(0.5f);\n  this.rangeGridlinesVisible\u003dtrue;\n  this.rangeGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.rangeGridlinePaint\u003dDEFAULT_GRIDLINE_PAINT;\n  this.rangeMinorGridlinesVisible\u003dfalse;\n  this.rangeMinorGridlineStroke\u003dDEFAULT_GRIDLINE_STROKE;\n  this.rangeMinorGridlinePaint\u003dColor.white;\n  this.rangeZeroBaselineVisible\u003dfalse;\n  this.rangeZeroBaselinePaint\u003dColor.black;\n  this.rangeZeroBaselineStroke\u003dnew BasicStroke(0.5f);\n  this.domainCrosshairVisible\u003dfalse;\n  this.domainCrosshairValue\u003d0.0;\n  this.domainCrosshairStroke\u003dDEFAULT_CROSSHAIR_STROKE;\n  this.domainCrosshairPaint\u003dDEFAULT_CROSSHAIR_PAINT;\n  this.rangeCrosshairVisible\u003dfalse;\n  this.rangeCrosshairValue\u003d0.0;\n  this.rangeCrosshairStroke\u003dDEFAULT_CROSSHAIR_STROKE;\n  this.rangeCrosshairPaint\u003dDEFAULT_CROSSHAIR_PAINT;\n}",
    "begin_line": 616,
    "end_line": 710,
    "comment": "/** \n * Creates a new plot with the specified dataset, axes and renderer.  Any of the arguments can be \u003ccode\u003enull\u003c/code\u003e, but in that case you should take care to specify the value before using the plot (otherwise a \u003ccode\u003eNullPointerException\u003c/code\u003e may be thrown).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param domainAxis  the domain axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param rangeAxis  the range axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getPlotType#717",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getPlotType()",
    "snippet": "public String getPlotType(){\n  return localizationResources.getString(\"XY_Plot\");\n}",
    "begin_line": 717,
    "end_line": 719,
    "comment": "/** \n * Returns the plot type as a string.\n * @return A short string describing the type of plot.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getOrientation#728",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getOrientation()",
    "snippet": "public PlotOrientation getOrientation(){\n  return this.orientation;\n}",
    "begin_line": 728,
    "end_line": 730,
    "comment": "/** \n * Returns the orientation of the plot.\n * @return The orientation (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setOrientation(PlotOrientation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setOrientation#740",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)",
    "snippet": "public void setOrientation(PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  if (orientation !\u003d this.orientation) {\n    this.orientation\u003dorientation;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 740,
    "end_line": 748,
    "comment": "/** \n * Sets the orientation for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param orientation  the orientation (\u003ccode\u003enull\u003c/code\u003e not allowed).\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getAxisOffset#757",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getAxisOffset()",
    "snippet": "public RectangleInsets getAxisOffset(){\n  return this.axisOffset;\n}",
    "begin_line": 757,
    "end_line": 759,
    "comment": "/** \n * Returns the axis offset.\n * @return The axis offset (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setAxisOffset(RectangleInsets)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setAxisOffset#769",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setAxisOffset(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setAxisOffset(RectangleInsets offset){\n  if (offset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027offset\u0027 argument.\");\n  }\n  this.axisOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 769,
    "end_line": 775,
    "comment": "/** \n * Sets the axis offsets (gap between the data area and the axes) and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param offset  the offset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAxisOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxis#787",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxis()",
    "snippet": "public ValueAxis getDomainAxis(){\n  return getDomainAxis(0);\n}",
    "begin_line": 787,
    "end_line": 789,
    "comment": "/** \n * Returns the domain axis with index 0.  If the domain axis for this plot is \u003ccode\u003enull\u003c/code\u003e, then the method will return the parent plot\u0027s domain axis (if there is a parent plot).\n * @return The domain axis (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDomainAxis(int)\n * @see #setDomainAxis(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxis#800",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxis(int)",
    "snippet": "public ValueAxis getDomainAxis(int index){\n  ValueAxis result\u003dnull;\n  if (index \u003c this.domainAxes.size()) {\n    result\u003d(ValueAxis)this.domainAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot xy\u003d(XYPlot)parent;\n      result\u003dxy.getDomainAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 800,
    "end_line": 813,
    "comment": "/** \n * Returns the domain axis with the specified index, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setDomainAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#824",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis(org.jfree.chart.axis.ValueAxis)",
    "snippet": "public void setDomainAxis(ValueAxis axis){\n  setDomainAxis(0,axis);\n}",
    "begin_line": 824,
    "end_line": 826,
    "comment": "/** \n * Sets the domain axis for the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axis  the new axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis()\n * @see #setDomainAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#838",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis(int, org.jfree.chart.axis.ValueAxis)",
    "snippet": "public void setDomainAxis(int index,ValueAxis axis){\n  setDomainAxis(index,axis,true);\n}",
    "begin_line": 838,
    "end_line": 840,
    "comment": "/** \n * Sets a domain axis and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainAxis(int)\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxis#852",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxis(int, org.jfree.chart.axis.ValueAxis, boolean)",
    "snippet": "public void setDomainAxis(int index,ValueAxis axis,boolean notify){\n  ValueAxis existing\u003dgetDomainAxis(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.domainAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 852,
    "end_line": 868,
    "comment": "/** \n * Sets a domain axis and, if requested, sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param index  the axis index.\n * @param axis  the axis.\n * @param notify  notify listeners?\n * @see #getDomainAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxes#878",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxes(org.jfree.chart.axis.ValueAxis[])",
    "snippet": "public void setDomainAxes(ValueAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setDomainAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 878,
    "end_line": 883,
    "comment": "/** \n * Sets the domain axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setRangeAxes(ValueAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisLocation#892",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisLocation()",
    "snippet": "public AxisLocation getDomainAxisLocation(){\n  return (AxisLocation)this.domainAxisLocations.get(0);\n}",
    "begin_line": 892,
    "end_line": 894,
    "comment": "/** \n * Returns the location of the primary domain axis.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainAxisLocation(AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#904",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)",
    "snippet": "public void setDomainAxisLocation(AxisLocation location){\n  setDomainAxisLocation(0,location,true);\n}",
    "begin_line": 904,
    "end_line": 907,
    "comment": "/** \n * Sets the location of the primary domain axis and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#918",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
    "snippet": "public void setDomainAxisLocation(AxisLocation location,boolean notify){\n  setDomainAxisLocation(0,location,notify);\n}",
    "begin_line": 918,
    "end_line": 921,
    "comment": "/** \n * Sets the location of the domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getDomainAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisEdge#932",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisEdge()",
    "snippet": "public RectangleEdge getDomainAxisEdge(){\n  return Plot.resolveDomainAxisLocation(getDomainAxisLocation(),this.orientation);\n}",
    "begin_line": 932,
    "end_line": 935,
    "comment": "/** \n * Returns the edge for the primary domain axis (taking into account the plot\u0027s orientation).\n * @return The edge.\n * @see #getDomainAxisLocation()\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisCount#944",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisCount()",
    "snippet": "public int getDomainAxisCount(){\n  return this.domainAxes.size();\n}",
    "begin_line": 944,
    "end_line": 946,
    "comment": "/** \n * Returns the number of domain axes.\n * @return The axis count.\n * @see #getRangeAxisCount()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainAxes#954",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainAxes()",
    "snippet": "public void clearDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.domainAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 954,
    "end_line": 963,
    "comment": "/** \n * Clears the domain axes from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @see #clearRangeAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.configureDomainAxes#968",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.configureDomainAxes()",
    "snippet": "public void configureDomainAxes(){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 968,
    "end_line": 975,
    "comment": "/** \n * Configures the domain axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisLocation#988",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisLocation(int)",
    "snippet": "public AxisLocation getDomainAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.domainAxisLocations.size()) {\n    result\u003d(AxisLocation)this.domainAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getDomainAxisLocation());\n  }\n  return result;\n}",
    "begin_line": 988,
    "end_line": 997,
    "comment": "/** \n * Returns the location for a domain axis.  If this hasn\u0027t been set explicitly, the method returns the location that is opposite to the primary domain axis location.\n * @param index  the axis index.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#1009",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location){\n  setDomainAxisLocation(index,location,true);\n}",
    "begin_line": 1009,
    "end_line": 1012,
    "comment": "/** \n * Sets the location for a domain axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted for index0).\n * @see #getDomainAxisLocation(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainAxisLocation#1028",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
    "snippet": "public void setDomainAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.domainAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1028,
    "end_line": 1039,
    "comment": "/** \n * Sets the axis location for a domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted forindex 0).\n * @param notify  notify listeners?\n * @since 1.0.5\n * @see #getDomainAxisLocation(int)\n * @see #setRangeAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisEdge#1050",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisEdge(int)",
    "snippet": "public RectangleEdge getDomainAxisEdge(int index){\n  AxisLocation location\u003dgetDomainAxisLocation(index);\n  RectangleEdge result\u003dPlot.resolveDomainAxisLocation(location,this.orientation);\n  if (result \u003d\u003d null) {\n    result\u003dRectangleEdge.opposite(getDomainAxisEdge());\n  }\n  return result;\n}",
    "begin_line": 1050,
    "end_line": 1058,
    "comment": "/** \n * Returns the edge for a domain axis.\n * @param index  the axis index.\n * @return The edge.\n * @see #getRangeAxisEdge(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxis#1070",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxis()",
    "snippet": "public ValueAxis getRangeAxis(){\n  return getRangeAxis(0);\n}",
    "begin_line": 1070,
    "end_line": 1072,
    "comment": "/** \n * Returns the range axis for the plot.  If the range axis for this plot is \u003ccode\u003enull\u003c/code\u003e, then the method will return the parent plot\u0027s range axis (if there is a parent plot).\n * @return The range axis.\n * @see #getRangeAxis(int)\n * @see #setRangeAxis(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#1083",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis(org.jfree.chart.axis.ValueAxis)",
    "snippet": "public void setRangeAxis(ValueAxis axis){\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  ValueAxis existing\u003dgetRangeAxis();\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.rangeAxes.set(0,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1083,
    "end_line": 1102,
    "comment": "/** \n * Sets the range axis for the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxis()\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisLocation#1111",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisLocation()",
    "snippet": "public AxisLocation getRangeAxisLocation(){\n  return (AxisLocation)this.rangeAxisLocations.get(0);\n}",
    "begin_line": 1111,
    "end_line": 1113,
    "comment": "/** \n * Returns the location of the primary range axis.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeAxisLocation(AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1123",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)",
    "snippet": "public void setRangeAxisLocation(AxisLocation location){\n  setRangeAxisLocation(0,location,true);\n}",
    "begin_line": 1123,
    "end_line": 1126,
    "comment": "/** \n * Sets the location of the primary range axis and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1137",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
    "snippet": "public void setRangeAxisLocation(AxisLocation location,boolean notify){\n  setRangeAxisLocation(0,location,notify);\n}",
    "begin_line": 1137,
    "end_line": 1140,
    "comment": "/** \n * Sets the location of the primary range axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getRangeAxisLocation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisEdge#1150",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisEdge()",
    "snippet": "public RectangleEdge getRangeAxisEdge(){\n  return Plot.resolveRangeAxisLocation(getRangeAxisLocation(),this.orientation);\n}",
    "begin_line": 1150,
    "end_line": 1153,
    "comment": "/** \n * Returns the edge for the primary range axis.\n * @return The range axis edge.\n * @see #getRangeAxisLocation()\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxis#1164",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxis(int)",
    "snippet": "public ValueAxis getRangeAxis(int index){\n  ValueAxis result\u003dnull;\n  if (index \u003c this.rangeAxes.size()) {\n    result\u003d(ValueAxis)this.rangeAxes.get(index);\n  }\n  if (result \u003d\u003d null) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot xy\u003d(XYPlot)parent;\n      result\u003dxy.getRangeAxis(index);\n    }\n  }\n  return result;\n}",
    "begin_line": 1164,
    "end_line": 1177,
    "comment": "/** \n * Returns a range axis.\n * @param index  the axis index.\n * @return The axis (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setRangeAxis(int,ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#1188",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis){\n  setRangeAxis(index,axis,true);\n}",
    "begin_line": 1188,
    "end_line": 1190,
    "comment": "/** \n * Sets a range axis and sends a  {@link PlotChangeEvent} to all registeredlisteners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxis#1202",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis, boolean)",
    "snippet": "public void setRangeAxis(int index,ValueAxis axis,boolean notify){\n  ValueAxis existing\u003dgetRangeAxis(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  if (axis !\u003d null) {\n    axis.setPlot(this);\n  }\n  this.rangeAxes.set(index,axis);\n  if (axis !\u003d null) {\n    axis.configure();\n    axis.addChangeListener(this);\n  }\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1202,
    "end_line": 1218,
    "comment": "/** \n * Sets a range axis and, if requested, sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param index  the axis index.\n * @param axis  the axis (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getRangeAxis(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxes#1228",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxes(org.jfree.chart.axis.ValueAxis[])",
    "snippet": "public void setRangeAxes(ValueAxis[] axes){\n  for (int i\u003d0; i \u003c axes.length; i++) {\n    setRangeAxis(i,axes[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1228,
    "end_line": 1233,
    "comment": "/** \n * Sets the range axes for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param axes  the axes (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #setDomainAxes(ValueAxis[])\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisCount#1242",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisCount()",
    "snippet": "public int getRangeAxisCount(){\n  return this.rangeAxes.size();\n}",
    "begin_line": 1242,
    "end_line": 1244,
    "comment": "/** \n * Returns the number of range axes.\n * @return The axis count.\n * @see #getDomainAxisCount()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeAxes#1252",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeAxes()",
    "snippet": "public void clearRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.removeChangeListener(this);\n    }\n  }\n  this.rangeAxes.clear();\n  fireChangeEvent();\n}",
    "begin_line": 1252,
    "end_line": 1261,
    "comment": "/** \n * Clears the range axes from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @see #clearDomainAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.configureRangeAxes#1268",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.configureRangeAxes()",
    "snippet": "public void configureRangeAxes(){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.configure();\n    }\n  }\n}",
    "begin_line": 1268,
    "end_line": 1275,
    "comment": "/** \n * Configures the range axes.\n * @see #configureDomainAxes()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisLocation#1288",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisLocation(int)",
    "snippet": "public AxisLocation getRangeAxisLocation(int index){\n  AxisLocation result\u003dnull;\n  if (index \u003c this.rangeAxisLocations.size()) {\n    result\u003d(AxisLocation)this.rangeAxisLocations.get(index);\n  }\n  if (result \u003d\u003d null) {\n    result\u003dAxisLocation.getOpposite(getRangeAxisLocation());\n  }\n  return result;\n}",
    "begin_line": 1288,
    "end_line": 1297,
    "comment": "/** \n * Returns the location for a range axis.  If this hasn\u0027t been set explicitly, the method returns the location that is opposite to the primary range axis location.\n * @param index  the axis index.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeAxisLocation(int,AxisLocation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1308",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location){\n  setRangeAxisLocation(index,location,true);\n}",
    "begin_line": 1308,
    "end_line": 1311,
    "comment": "/** \n * Sets the location for a range axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeAxisLocation(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeAxisLocation#1327",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
    "snippet": "public void setRangeAxisLocation(int index,AxisLocation location,boolean notify){\n  if (index \u003d\u003d 0 \u0026\u0026 location \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027location\u0027 for index 0 not permitted.\");\n  }\n  this.rangeAxisLocations.set(index,location);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1327,
    "end_line": 1338,
    "comment": "/** \n * Sets the axis location for a domain axis and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the axis index.\n * @param location  the location (\u003ccode\u003enull\u003c/code\u003e not permitted forindex 0).\n * @param notify  notify listeners?\n * @since 1.0.5\n * @see #getRangeAxisLocation(int)\n * @see #setDomainAxisLocation(int,AxisLocation,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisEdge#1350",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisEdge(int)",
    "snippet": "public RectangleEdge getRangeAxisEdge(int index){\n  AxisLocation location\u003dgetRangeAxisLocation(index);\n  RectangleEdge result\u003dPlot.resolveRangeAxisLocation(location,this.orientation);\n  if (result \u003d\u003d null) {\n    result\u003dRectangleEdge.opposite(getRangeAxisEdge());\n  }\n  return result;\n}",
    "begin_line": 1350,
    "end_line": 1358,
    "comment": "/** \n * Returns the edge for a range axis.\n * @param index  the axis index.\n * @return The edge.\n * @see #getRangeAxisLocation(int)\n * @see #getOrientation()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataset#1368",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataset()",
    "snippet": "public XYDataset getDataset(){\n  return getDataset(0);\n}",
    "begin_line": 1368,
    "end_line": 1370,
    "comment": "/** \n * Returns the primary dataset for the plot.\n * @return The primary dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDataset(int)\n * @see #setDataset(XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataset#1381",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataset(int)",
    "snippet": "public XYDataset getDataset(int index){\n  XYDataset result\u003dnull;\n  if (this.datasets.size() \u003e index) {\n    result\u003d(XYDataset)this.datasets.get(index);\n  }\n  return result;\n}",
    "begin_line": 1381,
    "end_line": 1387,
    "comment": "/** \n * Returns a dataset.\n * @param index  the dataset index.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDataset(int,XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDataset#1398",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)",
    "snippet": "public void setDataset(XYDataset dataset){\n  setDataset(0,dataset);\n}",
    "begin_line": 1398,
    "end_line": 1400,
    "comment": "/** \n * Sets the primary dataset for the plot, replacing the existing dataset if there is one.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset()\n * @see #setDataset(int,XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDataset#1410",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDataset(int, org.jfree.data.xy.XYDataset)",
    "snippet": "public void setDataset(int index,XYDataset dataset){\n  XYDataset existing\u003dgetDataset(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.datasets.set(index,dataset);\n  if (dataset !\u003d null) {\n    dataset.addChangeListener(this);\n  }\n  DatasetChangeEvent event\u003dnew DatasetChangeEvent(this,dataset);\n  datasetChanged(event);\n}",
    "begin_line": 1410,
    "end_line": 1423,
    "comment": "/** \n * Sets a dataset for the plot.\n * @param index  the dataset index.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDataset(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetCount#1430",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetCount()",
    "snippet": "public int getDatasetCount(){\n  return this.datasets.size();\n}",
    "begin_line": 1430,
    "end_line": 1432,
    "comment": "/** \n * Returns the number of datasets.\n * @return The number of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.indexOf#1442",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.indexOf(org.jfree.data.xy.XYDataset)",
    "snippet": "public int indexOf(XYDataset dataset){\n  int result\u003d-1;\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    if (dataset \u003d\u003d this.datasets.get(i)) {\n      result\u003di;\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 1442,
    "end_line": 1451,
    "comment": "/** \n * Returns the index of the specified dataset, or \u003ccode\u003e-1\u003c/code\u003e if the dataset does not belong to the plot.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToDomainAxis#1462",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxis(int, int)",
    "snippet": "public void mapDatasetToDomainAxis(int index,int axisIndex){\n  List axisIndices\u003dnew java.util.ArrayList(1);\n  axisIndices.add(new Integer(axisIndex));\n  mapDatasetToDomainAxes(index,axisIndices);\n}",
    "begin_line": 1462,
    "end_line": 1466,
    "comment": "/** \n * Maps a dataset to a particular domain axis.  All data will be plotted against axis zero by default, no mapping is required for this case.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index.\n * @see #mapDatasetToRangeAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToDomainAxes#1478",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToDomainAxes(int, java.util.List)",
    "snippet": "public void mapDatasetToDomainAxes(int index,List axisIndices){\n  if (index \u003c 0) {\n    throw new IllegalArgumentException(\"Requires \u0027index\u0027 \u003e\u003d 0.\");\n  }\n  checkAxisIndices(axisIndices);\n  Integer key\u003dnew Integer(index);\n  this.datasetToDomainAxesMap.put(key,new ArrayList(axisIndices));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1478,
    "end_line": 1487,
    "comment": "/** \n * Maps the specified dataset to the axes in the list.  Note that the conversion of data values into Java2D space is always performed using the first axis in the list.\n * @param index  the dataset index (zero-based).\n * @param axisIndices  the axis indices (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToRangeAxis#1498",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxis(int, int)",
    "snippet": "public void mapDatasetToRangeAxis(int index,int axisIndex){\n  List axisIndices\u003dnew java.util.ArrayList(1);\n  axisIndices.add(new Integer(axisIndex));\n  mapDatasetToRangeAxes(index,axisIndices);\n}",
    "begin_line": 1498,
    "end_line": 1502,
    "comment": "/** \n * Maps a dataset to a particular range axis.  All data will be plotted against axis zero by default, no mapping is required for this case.\n * @param index  the dataset index (zero-based).\n * @param axisIndex  the axis index.\n * @see #mapDatasetToDomainAxis(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.mapDatasetToRangeAxes#1514",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.mapDatasetToRangeAxes(int, java.util.List)",
    "snippet": "public void mapDatasetToRangeAxes(int index,List axisIndices){\n  if (index \u003c 0) {\n    throw new IllegalArgumentException(\"Requires \u0027index\u0027 \u003e\u003d 0.\");\n  }\n  checkAxisIndices(axisIndices);\n  Integer key\u003dnew Integer(index);\n  this.datasetToRangeAxesMap.put(key,new ArrayList(axisIndices));\n  datasetChanged(new DatasetChangeEvent(this,getDataset(index)));\n}",
    "begin_line": 1514,
    "end_line": 1523,
    "comment": "/** \n * Maps the specified dataset to the axes in the list.  Note that the conversion of data values into Java2D space is always performed using the first axis in the list.\n * @param index  the dataset index (zero-based).\n * @param axisIndices  the axis indices (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.checkAxisIndices#1532",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.checkAxisIndices(java.util.List)",
    "snippet": "private void checkAxisIndices(List indices){\n  if (indices \u003d\u003d null) {\n    return;\n  }\n  int count\u003dindices.size();\n  if (count \u003d\u003d 0) {\n    throw new IllegalArgumentException(\"Empty list not permitted.\");\n  }\n  HashSet set\u003dnew HashSet();\n  for (int i\u003d0; i \u003c count; i++) {\n    Object item\u003dindices.get(i);\n    if (!(item instanceof Integer)) {\n      throw new IllegalArgumentException(\"Indices must be Integer instances.\");\n    }\n    if (set.contains(item)) {\n      throw new IllegalArgumentException(\"Indices must be unique.\");\n    }\n    set.add(item);\n  }\n}",
    "begin_line": 1532,
    "end_line": 1555,
    "comment": "/** \n * This method is used to perform argument checking on the list of axis indices passed to mapDatasetToDomainAxes() and mapDatasetToRangeAxes().\n * @param indices  the list of indices (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRendererCount#1564",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRendererCount()",
    "snippet": "public int getRendererCount(){\n  return this.renderers.size();\n}",
    "begin_line": 1564,
    "end_line": 1566,
    "comment": "/** \n * Returns the number of renderer slots for this plot.\n * @return The number of renderer slots.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRenderer#1575",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRenderer()",
    "snippet": "public XYItemRenderer getRenderer(){\n  return getRenderer(0);\n}",
    "begin_line": 1575,
    "end_line": 1577,
    "comment": "/** \n * Returns the renderer for the primary dataset.\n * @return The item renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderer(XYItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRenderer#1588",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRenderer(int)",
    "snippet": "public XYItemRenderer getRenderer(int index){\n  XYItemRenderer result\u003dnull;\n  if (this.renderers.size() \u003e index) {\n    result\u003d(XYItemRenderer)this.renderers.get(index);\n  }\n  return result;\n}",
    "begin_line": 1588,
    "end_line": 1595,
    "comment": "/** \n * Returns the renderer for a dataset, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the renderer index.\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRenderer(int,XYItemRenderer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1606",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)",
    "snippet": "public void setRenderer(XYItemRenderer renderer){\n  setRenderer(0,renderer);\n}",
    "begin_line": 1606,
    "end_line": 1608,
    "comment": "/** \n * Sets the renderer for the primary dataset and sends a {@link PlotChangeEvent} to all registered listeners.  If the rendereris set to \u003ccode\u003enull\u003c/code\u003e, no data will be displayed.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRenderer()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1619",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)",
    "snippet": "public void setRenderer(int index,XYItemRenderer renderer){\n  setRenderer(index,renderer,true);\n}",
    "begin_line": 1619,
    "end_line": 1621,
    "comment": "/** \n * Sets a renderer and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the index.\n * @param renderer  the renderer.\n * @see #getRenderer(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderer#1633",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer, boolean)",
    "snippet": "public void setRenderer(int index,XYItemRenderer renderer,boolean notify){\n  XYItemRenderer existing\u003dgetRenderer(index);\n  if (existing !\u003d null) {\n    existing.removeChangeListener(this);\n  }\n  this.renderers.set(index,renderer);\n  if (renderer !\u003d null) {\n    renderer.setPlot(this);\n    renderer.addChangeListener(this);\n  }\n  configureDomainAxes();\n  configureRangeAxes();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1633,
    "end_line": 1649,
    "comment": "/** \n * Sets a renderer and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param index  the index.\n * @param renderer  the renderer.\n * @param notify  notify listeners?\n * @see #getRenderer(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRenderers#1657",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRenderers(org.jfree.chart.renderer.xy.XYItemRenderer[])",
    "snippet": "public void setRenderers(XYItemRenderer[] renderers){\n  for (int i\u003d0; i \u003c renderers.length; i++) {\n    setRenderer(i,renderers[i],false);\n  }\n  fireChangeEvent();\n}",
    "begin_line": 1657,
    "end_line": 1662,
    "comment": "/** \n * Sets the renderers for this plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param renderers  the renderers (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetRenderingOrder#1671",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetRenderingOrder()",
    "snippet": "public DatasetRenderingOrder getDatasetRenderingOrder(){\n  return this.datasetRenderingOrder;\n}",
    "begin_line": 1671,
    "end_line": 1673,
    "comment": "/** \n * Returns the dataset rendering order.\n * @return The order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDatasetRenderingOrder(DatasetRenderingOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDatasetRenderingOrder#1685",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)",
    "snippet": "public void setDatasetRenderingOrder(DatasetRenderingOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.datasetRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1685,
    "end_line": 1691,
    "comment": "/** \n * Sets the rendering order and sends a  {@link PlotChangeEvent} to allregistered listeners.  By default, the plot renders the primary dataset last (so that the primary dataset overlays the secondary datasets). You can reverse this if you want to.\n * @param order  the rendering order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDatasetRenderingOrder()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getSeriesRenderingOrder#1700",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getSeriesRenderingOrder()",
    "snippet": "public SeriesRenderingOrder getSeriesRenderingOrder(){\n  return this.seriesRenderingOrder;\n}",
    "begin_line": 1700,
    "end_line": 1702,
    "comment": "/** \n * Returns the series rendering order.\n * @return the order (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesRenderingOrder(SeriesRenderingOrder)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setSeriesRenderingOrder#1714",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setSeriesRenderingOrder(org.jfree.chart.plot.SeriesRenderingOrder)",
    "snippet": "public void setSeriesRenderingOrder(SeriesRenderingOrder order){\n  if (order \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027order\u0027 argument.\");\n  }\n  this.seriesRenderingOrder\u003dorder;\n  fireChangeEvent();\n}",
    "begin_line": 1714,
    "end_line": 1720,
    "comment": "/** \n * Sets the series order and sends a  {@link PlotChangeEvent} to allregistered listeners.  By default, the plot renders the primary series last (so that the primary series appears to be on top). You can reverse this if you want to.\n * @param order  the rendering order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getSeriesRenderingOrder()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getIndexOf#1730",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getIndexOf(org.jfree.chart.renderer.xy.XYItemRenderer)",
    "snippet": "public int getIndexOf(XYItemRenderer renderer){\n  return this.renderers.indexOf(renderer);\n}",
    "begin_line": 1730,
    "end_line": 1732,
    "comment": "/** \n * Returns the index of the specified renderer, or \u003ccode\u003e-1\u003c/code\u003e if the renderer is not assigned to this plot.\n * @param renderer  the renderer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRendererForDataset#1743",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRendererForDataset(org.jfree.data.xy.XYDataset)",
    "snippet": "public XYItemRenderer getRendererForDataset(XYDataset dataset){\n  XYItemRenderer result\u003dnull;\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    if (this.datasets.get(i) \u003d\u003d dataset) {\n      result\u003d(XYItemRenderer)this.renderers.get(i);\n      if (result \u003d\u003d null) {\n        result\u003dgetRenderer();\n      }\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 1743,
    "end_line": 1755,
    "comment": "/** \n * Returns the renderer for the specified dataset.  The code first determines the index of the dataset, then checks if there is a renderer with the same index (if not, the method returns renderer(0).\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The renderer (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getWeight#1765",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getWeight()",
    "snippet": "public int getWeight(){\n  return this.weight;\n}",
    "begin_line": 1765,
    "end_line": 1767,
    "comment": "/** \n * Returns the weight for this plot when it is used as a subplot within a combined plot.\n * @return The weight.\n * @see #setWeight(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setWeight#1777",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setWeight(int)",
    "snippet": "public void setWeight(int weight){\n  this.weight\u003dweight;\n  fireChangeEvent();\n}",
    "begin_line": 1777,
    "end_line": 1780,
    "comment": "/** \n * Sets the weight for the plot and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param weight  the weight.\n * @see #getWeight()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainGridlinesVisible#1790",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainGridlinesVisible()",
    "snippet": "public boolean isDomainGridlinesVisible(){\n  return this.domainGridlinesVisible;\n}",
    "begin_line": 1790,
    "end_line": 1792,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the domain gridlines are visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @see #setDomainGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlinesVisible#1805",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlinesVisible(boolean)",
    "snippet": "public void setDomainGridlinesVisible(boolean visible){\n  if (this.domainGridlinesVisible !\u003d visible) {\n    this.domainGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1805,
    "end_line": 1810,
    "comment": "/** \n * Sets the flag that controls whether or not the domain grid-lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isDomainGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainMinorGridlinesVisible#1822",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainMinorGridlinesVisible()",
    "snippet": "public boolean isDomainMinorGridlinesVisible(){\n  return this.domainMinorGridlinesVisible;\n}",
    "begin_line": 1822,
    "end_line": 1824,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the domain minor gridlines are visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n * @see #setDomainMinorGridlinesVisible(boolean)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainMinorGridlinesVisible#1839",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainMinorGridlinesVisible(boolean)",
    "snippet": "public void setDomainMinorGridlinesVisible(boolean visible){\n  if (this.domainMinorGridlinesVisible !\u003d visible) {\n    this.domainMinorGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1839,
    "end_line": 1844,
    "comment": "/** \n * Sets the flag that controls whether or not the domain minor grid-lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isDomainMinorGridlinesVisible()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainGridlineStroke#1854",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainGridlineStroke()",
    "snippet": "public Stroke getDomainGridlineStroke(){\n  return this.domainGridlineStroke;\n}",
    "begin_line": 1854,
    "end_line": 1856,
    "comment": "/** \n * Returns the stroke for the grid-lines (if any) plotted against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlineStroke#1869",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlineStroke(java.awt.Stroke)",
    "snippet": "public void setDomainGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1869,
    "end_line": 1875,
    "comment": "/** \n * Sets the stroke for the grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003estroke\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMinorGridlineStroke#1888",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMinorGridlineStroke()",
    "snippet": "public Stroke getDomainMinorGridlineStroke(){\n  return this.domainMinorGridlineStroke;\n}",
    "begin_line": 1888,
    "end_line": 1890,
    "comment": "/** \n * Returns the stroke for the minor grid-lines (if any) plotted against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainMinorGridlineStroke(Stroke)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainMinorGridlineStroke#1905",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainMinorGridlineStroke(java.awt.Stroke)",
    "snippet": "public void setDomainMinorGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainMinorGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 1905,
    "end_line": 1911,
    "comment": "/** \n * Sets the stroke for the minor grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003estroke\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainMinorGridlineStroke()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainGridlinePaint#1921",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainGridlinePaint()",
    "snippet": "public Paint getDomainGridlinePaint(){\n  return this.domainGridlinePaint;\n}",
    "begin_line": 1921,
    "end_line": 1923,
    "comment": "/** \n * Returns the paint for the grid lines (if any) plotted against the domain axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainGridlinePaint#1936",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainGridlinePaint(java.awt.Paint)",
    "snippet": "public void setDomainGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1936,
    "end_line": 1942,
    "comment": "/** \n * Sets the paint for the grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003epaint\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMinorGridlinePaint#1954",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMinorGridlinePaint()",
    "snippet": "public Paint getDomainMinorGridlinePaint(){\n  return this.domainMinorGridlinePaint;\n}",
    "begin_line": 1954,
    "end_line": 1956,
    "comment": "/** \n * Returns the paint for the minor grid lines (if any) plotted against the domain axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainMinorGridlinePaint(Paint)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainMinorGridlinePaint#1971",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainMinorGridlinePaint(java.awt.Paint)",
    "snippet": "public void setDomainMinorGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainMinorGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 1971,
    "end_line": 1977,
    "comment": "/** \n * Sets the paint for the minor grid lines plotted against the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003epaint\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @see #getDomainMinorGridlinePaint()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeGridlinesVisible#1987",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeGridlinesVisible()",
    "snippet": "public boolean isRangeGridlinesVisible(){\n  return this.rangeGridlinesVisible;\n}",
    "begin_line": 1987,
    "end_line": 1989,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range axis grid is visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return A boolean.\n * @see #setRangeGridlinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlinesVisible#2002",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlinesVisible(boolean)",
    "snippet": "public void setRangeGridlinesVisible(boolean visible){\n  if (this.rangeGridlinesVisible !\u003d visible) {\n    this.rangeGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2002,
    "end_line": 2007,
    "comment": "/** \n * Sets the flag that controls whether or not the range axis grid lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isRangeGridlinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeGridlineStroke#2017",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeGridlineStroke()",
    "snippet": "public Stroke getRangeGridlineStroke(){\n  return this.rangeGridlineStroke;\n}",
    "begin_line": 2017,
    "end_line": 2019,
    "comment": "/** \n * Returns the stroke for the grid lines (if any) plotted against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlineStroke#2029",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlineStroke(java.awt.Stroke)",
    "snippet": "public void setRangeGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 2029,
    "end_line": 2035,
    "comment": "/** \n * Sets the stroke for the grid lines plotted against the range axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeGridlinePaint#2045",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeGridlinePaint()",
    "snippet": "public Paint getRangeGridlinePaint(){\n  return this.rangeGridlinePaint;\n}",
    "begin_line": 2045,
    "end_line": 2047,
    "comment": "/** \n * Returns the paint for the grid lines (if any) plotted against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeGridlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeGridlinePaint#2057",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeGridlinePaint(java.awt.Paint)",
    "snippet": "public void setRangeGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2057,
    "end_line": 2063,
    "comment": "/** \n * Sets the paint for the grid lines plotted against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeGridlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeMinorGridlinesVisible#2075",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeMinorGridlinesVisible()",
    "snippet": "public boolean isRangeMinorGridlinesVisible(){\n  return this.rangeMinorGridlinesVisible;\n}",
    "begin_line": 2075,
    "end_line": 2077,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range axis minor grid is visible, and \u003ccode\u003efalse\u003ccode\u003e otherwise.\n * @return A boolean.\n * @see #setRangeMinorGridlinesVisible(boolean)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeMinorGridlinesVisible#2092",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeMinorGridlinesVisible(boolean)",
    "snippet": "public void setRangeMinorGridlinesVisible(boolean visible){\n  if (this.rangeMinorGridlinesVisible !\u003d visible) {\n    this.rangeMinorGridlinesVisible\u003dvisible;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2092,
    "end_line": 2097,
    "comment": "/** \n * Sets the flag that controls whether or not the range axis minor grid lines are visible. \u003cp\u003e If the flag value is changed, a  {@link PlotChangeEvent} is sent to allregistered listeners.\n * @param visible  the new value of the flag.\n * @see #isRangeMinorGridlinesVisible()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMinorGridlineStroke#2109",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMinorGridlineStroke()",
    "snippet": "public Stroke getRangeMinorGridlineStroke(){\n  return this.rangeMinorGridlineStroke;\n}",
    "begin_line": 2109,
    "end_line": 2111,
    "comment": "/** \n * Returns the stroke for the minor grid lines (if any) plotted against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeMinorGridlineStroke(Stroke)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeMinorGridlineStroke#2123",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeMinorGridlineStroke(java.awt.Stroke)",
    "snippet": "public void setRangeMinorGridlineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeMinorGridlineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 2123,
    "end_line": 2129,
    "comment": "/** \n * Sets the stroke for the minor grid lines plotted against the range axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeMinorGridlineStroke()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMinorGridlinePaint#2141",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMinorGridlinePaint()",
    "snippet": "public Paint getRangeMinorGridlinePaint(){\n  return this.rangeMinorGridlinePaint;\n}",
    "begin_line": 2141,
    "end_line": 2143,
    "comment": "/** \n * Returns the paint for the minor grid lines (if any) plotted against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeMinorGridlinePaint(Paint)\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeMinorGridlinePaint#2155",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeMinorGridlinePaint(java.awt.Paint)",
    "snippet": "public void setRangeMinorGridlinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeMinorGridlinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2155,
    "end_line": 2161,
    "comment": "/** \n * Sets the paint for the minor grid lines plotted against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeMinorGridlinePaint()\n * @since 1.0.12\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainZeroBaselineVisible#2173",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainZeroBaselineVisible()",
    "snippet": "public boolean isDomainZeroBaselineVisible(){\n  return this.domainZeroBaselineVisible;\n}",
    "begin_line": 2173,
    "end_line": 2175,
    "comment": "/** \n * Returns a flag that controls whether or not a zero baseline is displayed for the domain axis.\n * @return A boolean.\n * @since 1.0.5\n * @see #setDomainZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselineVisible#2188",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselineVisible(boolean)",
    "snippet": "public void setDomainZeroBaselineVisible(boolean visible){\n  this.domainZeroBaselineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 2188,
    "end_line": 2191,
    "comment": "/** \n * Sets the flag that controls whether or not the zero baseline is displayed for the domain axis, and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param visible  the flag.\n * @since 1.0.5\n * @see #isDomainZeroBaselineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainZeroBaselineStroke#2202",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainZeroBaselineStroke()",
    "snippet": "public Stroke getDomainZeroBaselineStroke(){\n  return this.domainZeroBaselineStroke;\n}",
    "begin_line": 2202,
    "end_line": 2204,
    "comment": "/** \n * Returns the stroke used for the zero baseline against the domain axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.5\n * @see #setDomainZeroBaselineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselineStroke#2216",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselineStroke(java.awt.Stroke)",
    "snippet": "public void setDomainZeroBaselineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainZeroBaselineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 2216,
    "end_line": 2222,
    "comment": "/** \n * Sets the stroke for the zero baseline for the domain axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n * @see #getRangeZeroBaselineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainZeroBaselinePaint#2234",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainZeroBaselinePaint()",
    "snippet": "public Paint getDomainZeroBaselinePaint(){\n  return this.domainZeroBaselinePaint;\n}",
    "begin_line": 2234,
    "end_line": 2236,
    "comment": "/** \n * Returns the paint for the zero baseline (if any) plotted against the domain axis.\n * @since 1.0.5\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainZeroBaselinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainZeroBaselinePaint#2248",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainZeroBaselinePaint(java.awt.Paint)",
    "snippet": "public void setDomainZeroBaselinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainZeroBaselinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2248,
    "end_line": 2254,
    "comment": "/** \n * Sets the paint for the zero baseline plotted against the domain axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n * @see #getDomainZeroBaselinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeZeroBaselineVisible#2264",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeZeroBaselineVisible()",
    "snippet": "public boolean isRangeZeroBaselineVisible(){\n  return this.rangeZeroBaselineVisible;\n}",
    "begin_line": 2264,
    "end_line": 2266,
    "comment": "/** \n * Returns a flag that controls whether or not a zero baseline is displayed for the range axis.\n * @return A boolean.\n * @see #setRangeZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselineVisible#2277",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselineVisible(boolean)",
    "snippet": "public void setRangeZeroBaselineVisible(boolean visible){\n  this.rangeZeroBaselineVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 2277,
    "end_line": 2280,
    "comment": "/** \n * Sets the flag that controls whether or not the zero baseline is displayed for the range axis, and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param visible  the flag.\n * @see #isRangeZeroBaselineVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeZeroBaselineStroke#2289",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeZeroBaselineStroke()",
    "snippet": "public Stroke getRangeZeroBaselineStroke(){\n  return this.rangeZeroBaselineStroke;\n}",
    "begin_line": 2289,
    "end_line": 2291,
    "comment": "/** \n * Returns the stroke used for the zero baseline against the range axis.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeZeroBaselineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselineStroke#2301",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselineStroke(java.awt.Stroke)",
    "snippet": "public void setRangeZeroBaselineStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeZeroBaselineStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 2301,
    "end_line": 2307,
    "comment": "/** \n * Sets the stroke for the zero baseline for the range axis, and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeZeroBaselineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeZeroBaselinePaint#2317",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeZeroBaselinePaint()",
    "snippet": "public Paint getRangeZeroBaselinePaint(){\n  return this.rangeZeroBaselinePaint;\n}",
    "begin_line": 2317,
    "end_line": 2319,
    "comment": "/** \n * Returns the paint for the zero baseline (if any) plotted against the range axis.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeZeroBaselinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeZeroBaselinePaint#2329",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeZeroBaselinePaint(java.awt.Paint)",
    "snippet": "public void setRangeZeroBaselinePaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeZeroBaselinePaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2329,
    "end_line": 2335,
    "comment": "/** \n * Sets the paint for the zero baseline plotted against the range axis and sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeZeroBaselinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainTickBandPaint#2345",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainTickBandPaint()",
    "snippet": "public Paint getDomainTickBandPaint(){\n  return this.domainTickBandPaint;\n}",
    "begin_line": 2345,
    "end_line": 2347,
    "comment": "/** \n * Returns the paint used for the domain tick bands.  If this is \u003ccode\u003enull\u003c/code\u003e, no tick bands will be drawn.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainTickBandPaint#2356",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainTickBandPaint(java.awt.Paint)",
    "snippet": "public void setDomainTickBandPaint(Paint paint){\n  this.domainTickBandPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2356,
    "end_line": 2359,
    "comment": "/** \n * Sets the paint for the domain tick bands.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainTickBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeTickBandPaint#2369",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeTickBandPaint()",
    "snippet": "public Paint getRangeTickBandPaint(){\n  return this.rangeTickBandPaint;\n}",
    "begin_line": 2369,
    "end_line": 2371,
    "comment": "/** \n * Returns the paint used for the range tick bands.  If this is \u003ccode\u003enull\u003c/code\u003e, no tick bands will be drawn.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeTickBandPaint#2380",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeTickBandPaint(java.awt.Paint)",
    "snippet": "public void setRangeTickBandPaint(Paint paint){\n  this.rangeTickBandPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2380,
    "end_line": 2383,
    "comment": "/** \n * Sets the paint for the range tick bands.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeTickBandPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getQuadrantOrigin#2393",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getQuadrantOrigin()",
    "snippet": "public Point2D getQuadrantOrigin(){\n  return this.quadrantOrigin;\n}",
    "begin_line": 2393,
    "end_line": 2395,
    "comment": "/** \n * Returns the origin for the quadrants that can be displayed on the plot. This defaults to (0, 0).\n * @return The origin point (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setQuadrantOrigin(Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setQuadrantOrigin#2405",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setQuadrantOrigin(java.awt.geom.Point2D)",
    "snippet": "public void setQuadrantOrigin(Point2D origin){\n  if (origin \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027origin\u0027 argument.\");\n  }\n  this.quadrantOrigin\u003dorigin;\n  fireChangeEvent();\n}",
    "begin_line": 2405,
    "end_line": 2411,
    "comment": "/** \n * Sets the quadrant origin and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param origin  the origin (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getQuadrantOrigin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getQuadrantPaint#2422",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getQuadrantPaint(int)",
    "snippet": "public Paint getQuadrantPaint(int index){\n  if (index \u003c 0 || index \u003e 3) {\n    throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\");\n  }\n  return this.quadrantPaint[index];\n}",
    "begin_line": 2422,
    "end_line": 2428,
    "comment": "/** \n * Returns the paint used for the specified quadrant.\n * @param index  the quadrant index (0-3).\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setQuadrantPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setQuadrantPaint#2439",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setQuadrantPaint(int, java.awt.Paint)",
    "snippet": "public void setQuadrantPaint(int index,Paint paint){\n  if (index \u003c 0 || index \u003e 3) {\n    throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\");\n  }\n  this.quadrantPaint[index]\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2439,
    "end_line": 2446,
    "comment": "/** \n * Sets the paint used for the specified quadrant and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the quadrant index (0-3).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getQuadrantPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2460",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker(org.jfree.chart.plot.Marker)",
    "snippet": "public void addDomainMarker(Marker marker){\n  addDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2460,
    "end_line": 2463,
    "comment": "/** \n * Adds a marker for the domain axis and sends a  {@link PlotChangeEvent}to all registered listeners. \u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #addDomainMarker(Marker,Layer)\n * @see #clearDomainMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2477",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public void addDomainMarker(Marker marker,Layer layer){\n  addDomainMarker(0,marker,layer);\n}",
    "begin_line": 2477,
    "end_line": 2479,
    "comment": "/** \n * Adds a marker for the domain axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background).\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainMarkers#2487",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainMarkers()",
    "snippet": "public void clearDomainMarkers(){\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.backgroundDomainMarkers.clear();\n  }\n  if (this.foregroundDomainMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundDomainMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearDomainMarkers(key.intValue());\n    }\n    this.foregroundDomainMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2487,
    "end_line": 2507,
    "comment": "/** \n * Clears all the (foreground and background) domain markers and sends a {@link PlotChangeEvent} to all registered listeners.\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearDomainMarkers#2517",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearDomainMarkers(int)",
    "snippet": "public void clearDomainMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundDomainMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundDomainMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2517,
    "end_line": 2544,
    "comment": "/** \n * Clears the (foreground and background) domain markers for a particular renderer.\n * @param index  the renderer index.\n * @see #clearRangeMarkers(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2561",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public void addDomainMarker(int index,Marker marker,Layer layer){\n  addDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 2561,
    "end_line": 2563,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the domain axis (that the renderer is mapped to), however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @see #clearDomainMarkers(int)\n * @see #addRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addDomainMarker#2580",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
    "snippet": "public void addDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 not permitted.\");\n  }\n  if (layer \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027layer\u0027 not permitted.\");\n  }\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundDomainMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundDomainMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2580,
    "end_line": 2611,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the domain axis (that the renderer is mapped to), however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2624",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(org.jfree.chart.plot.Marker)",
    "snippet": "public boolean removeDomainMarker(Marker marker){\n  return removeDomainMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2624,
    "end_line": 2626,
    "comment": "/** \n * Removes a marker for the domain axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param marker  the marker.\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2640",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public boolean removeDomainMarker(Marker marker,Layer layer){\n  return removeDomainMarker(0,marker,layer);\n}",
    "begin_line": 2640,
    "end_line": 2642,
    "comment": "/** \n * Removes a marker for the domain axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2657",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer){\n  return removeDomainMarker(index,marker,layer,true);\n}",
    "begin_line": 2657,
    "end_line": 2659,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeDomainMarker#2675",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
    "snippet": "public boolean removeDomainMarker(int index,Marker marker,Layer layer,boolean notify){\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundDomainMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundDomainMarkers.get(new Integer(index));\n  }\n  if (markers \u003d\u003d null) {\n    return false;\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2675,
    "end_line": 2694,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and, if requested, sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2707",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker(org.jfree.chart.plot.Marker)",
    "snippet": "public void addRangeMarker(Marker marker){\n  addRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2707,
    "end_line": 2709,
    "comment": "/** \n * Adds a marker for the range axis and sends a  {@link PlotChangeEvent} toall registered listeners. \u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #addRangeMarker(Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2723",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public void addRangeMarker(Marker marker,Layer layer){\n  addRangeMarker(0,marker,layer);\n}",
    "begin_line": 2723,
    "end_line": 2725,
    "comment": "/** \n * Adds a marker for the range axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param marker  the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (foreground or background).\n * @see #addRangeMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeMarkers#2733",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeMarkers()",
    "snippet": "public void clearRangeMarkers(){\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.backgroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.backgroundRangeMarkers.clear();\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Set keys\u003dthis.foregroundRangeMarkers.keySet();\n    Iterator iterator\u003dkeys.iterator();\n    while (iterator.hasNext()) {\n      Integer key\u003d(Integer)iterator.next();\n      clearRangeMarkers(key.intValue());\n    }\n    this.foregroundRangeMarkers.clear();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2733,
    "end_line": 2753,
    "comment": "/** \n * Clears all the range markers and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @see #clearRangeMarkers()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2769",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer){\n  addRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2769,
    "end_line": 2771,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @see #clearRangeMarkers(int)\n * @see #addDomainMarker(int,Marker,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addRangeMarker#2787",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
    "snippet": "public void addRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  Collection markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(Collection)this.foregroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.foregroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    markers\u003d(Collection)this.backgroundRangeMarkers.get(new Integer(index));\n    if (markers \u003d\u003d null) {\n      markers\u003dnew java.util.ArrayList();\n      this.backgroundRangeMarkers.put(new Integer(index),markers);\n    }\n    markers.add(marker);\n  }\n  marker.addChangeListener(this);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2787,
    "end_line": 2812,
    "comment": "/** \n * Adds a marker for a specific dataset/renderer and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\u003cP\u003e Typically a marker will be drawn by the renderer as a line perpendicular to the range axis, however this is entirely up to the renderer.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearRangeMarkers#2820",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearRangeMarkers(int)",
    "snippet": "public void clearRangeMarkers(int index){\n  Integer key\u003dnew Integer(index);\n  if (this.backgroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.backgroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  if (this.foregroundRangeMarkers !\u003d null) {\n    Collection markers\u003d(Collection)this.foregroundRangeMarkers.get(key);\n    if (markers !\u003d null) {\n      Iterator iterator\u003dmarkers.iterator();\n      while (iterator.hasNext()) {\n        Marker m\u003d(Marker)iterator.next();\n        m.removeChangeListener(this);\n      }\n      markers.clear();\n    }\n  }\n  fireChangeEvent();\n}",
    "begin_line": 2820,
    "end_line": 2847,
    "comment": "/** \n * Clears the (foreground and background) range markers for a particular renderer.\n * @param index  the renderer index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2860",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(org.jfree.chart.plot.Marker)",
    "snippet": "public boolean removeRangeMarker(Marker marker){\n  return removeRangeMarker(marker,Layer.FOREGROUND);\n}",
    "begin_line": 2860,
    "end_line": 2862,
    "comment": "/** \n * Removes a marker for the range axis and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param marker the marker.\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2876",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public boolean removeRangeMarker(Marker marker,Layer layer){\n  return removeRangeMarker(0,marker,layer);\n}",
    "begin_line": 2876,
    "end_line": 2878,
    "comment": "/** \n * Removes a marker for the range axis in the specified layer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param marker the marker (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2893",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer){\n  return removeRangeMarker(index,marker,layer,true);\n}",
    "begin_line": 2893,
    "end_line": 2895,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index the dataset/renderer index.\n * @param marker the marker.\n * @param layer the layer (foreground or background).\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeRangeMarker#2911",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer, boolean)",
    "snippet": "public boolean removeRangeMarker(int index,Marker marker,Layer layer,boolean notify){\n  if (marker \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027marker\u0027 argument.\");\n  }\n  ArrayList markers;\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    markers\u003d(ArrayList)this.foregroundRangeMarkers.get(new Integer(index));\n  }\n else {\n    markers\u003d(ArrayList)this.backgroundRangeMarkers.get(new Integer(index));\n  }\n  if (markers \u003d\u003d null) {\n    return false;\n  }\n  boolean removed\u003dmarkers.remove(marker);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2911,
    "end_line": 2933,
    "comment": "/** \n * Removes a marker for a specific dataset/renderer and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param index  the dataset/renderer index.\n * @param marker  the marker.\n * @param layer  the layer (foreground or background).\n * @param notify  notify listeners?\n * @return A boolean indicating whether or not the marker was actuallyremoved.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addAnnotation#2944",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addAnnotation(org.jfree.chart.annotations.XYAnnotation)",
    "snippet": "public void addAnnotation(XYAnnotation annotation){\n  addAnnotation(annotation,true);\n}",
    "begin_line": 2944,
    "end_line": 2946,
    "comment": "/** \n * Adds an annotation to the plot and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getAnnotations()\n * @see #removeAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.addAnnotation#2957",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.addAnnotation(org.jfree.chart.annotations.XYAnnotation, boolean)",
    "snippet": "public void addAnnotation(XYAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  this.annotations.add(annotation);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2957,
    "end_line": 2965,
    "comment": "/** \n * Adds an annotation to the plot and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeAnnotation#2978",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeAnnotation(org.jfree.chart.annotations.XYAnnotation)",
    "snippet": "public boolean removeAnnotation(XYAnnotation annotation){\n  return removeAnnotation(annotation,true);\n}",
    "begin_line": 2978,
    "end_line": 2980,
    "comment": "/** \n * Removes an annotation from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A boolean (indicates whether or not the annotation was removed).\n * @see #addAnnotation(XYAnnotation)\n * @see #getAnnotations()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.removeAnnotation#2993",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.removeAnnotation(org.jfree.chart.annotations.XYAnnotation, boolean)",
    "snippet": "public boolean removeAnnotation(XYAnnotation annotation,boolean notify){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  boolean removed\u003dthis.annotations.remove(annotation);\n  if (removed \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n  return removed;\n}",
    "begin_line": 2993,
    "end_line": 3002,
    "comment": "/** \n * Removes an annotation from the plot and sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @return A boolean (indicates whether or not the annotation was removed).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getAnnotations#3013",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getAnnotations()",
    "snippet": "public List getAnnotations(){\n  return new ArrayList(this.annotations);\n}",
    "begin_line": 3013,
    "end_line": 3015,
    "comment": "/** \n * Returns the list of annotations.\n * @return The list of annotations.\n * @since 1.0.1\n * @see #addAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearAnnotations#3023",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearAnnotations()",
    "snippet": "public void clearAnnotations(){\n  this.annotations.clear();\n  fireChangeEvent();\n}",
    "begin_line": 3023,
    "end_line": 3026,
    "comment": "/** \n * Clears all the annotations and sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @see #addAnnotation(XYAnnotation)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateAxisSpace#3036",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){\n  AxisSpace space\u003dnew AxisSpace();\n  space\u003dcalculateRangeAxisSpace(g2,plotArea,space);\n  Rectangle2D revPlotArea\u003dspace.shrink(plotArea,null);\n  space\u003dcalculateDomainAxisSpace(g2,revPlotArea,space);\n  return space;\n}",
    "begin_line": 3036,
    "end_line": 3043,
    "comment": "/** \n * Calculates the space required for all the axes in the plot.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateDomainAxisSpace#3054",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateDomainAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
    "snippet": "protected AxisSpace calculateDomainAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n  }\n else {\n    for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n      Axis axis\u003d(Axis)this.domainAxes.get(i);\n      if (axis !\u003d null) {\n        RectangleEdge edge\u003dgetDomainAxisEdge(i);\n        space\u003daxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 3054,
    "end_line": 3090,
    "comment": "/** \n * Calculates the space required for the domain axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.calculateRangeAxisSpace#3101",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.calculateRangeAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
    "snippet": "protected AxisSpace calculateRangeAxisSpace(Graphics2D g2,Rectangle2D plotArea,AxisSpace space){\n  if (space \u003d\u003d null) {\n    space\u003dnew AxisSpace();\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),RectangleEdge.TOP);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(),RectangleEdge.BOTTOM);\n    }\n else     if (this.orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(),RectangleEdge.LEFT);\n      space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(),RectangleEdge.RIGHT);\n    }\n  }\n else {\n    for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n      Axis axis\u003d(Axis)this.rangeAxes.get(i);\n      if (axis !\u003d null) {\n        RectangleEdge edge\u003dgetRangeAxisEdge(i);\n        space\u003daxis.reserveSpace(g2,this,plotArea,edge,space);\n      }\n    }\n  }\n  return space;\n}",
    "begin_line": 3101,
    "end_line": 3136,
    "comment": "/** \n * Calculates the space required for the range axis/axes.\n * @param g2  the graphics device.\n * @param plotArea  the plot area.\n * @param space  a carrier for the result (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The required space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.draw#3150",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){\n  boolean b1\u003d(area.getWidth() \u003c\u003d MINIMUM_WIDTH_TO_DRAW);\n  boolean b2\u003d(area.getHeight() \u003c\u003d MINIMUM_HEIGHT_TO_DRAW);\n  if (b1 || b2) {\n    return;\n  }\n  if (info !\u003d null) {\n    info.setPlotArea(area);\n  }\n  RectangleInsets insets\u003dgetInsets();\n  insets.trim(area);\n  AxisSpace space\u003dcalculateAxisSpace(g2,area);\n  Rectangle2D dataArea\u003dspace.shrink(area,null);\n  this.axisOffset.trim(dataArea);\n  createAndAddEntity((Rectangle2D)dataArea.clone(),info,null,null);\n  if (info !\u003d null) {\n    info.setDataArea(dataArea);\n  }\n  drawBackground(g2,dataArea);\n  Map axisStateMap\u003ddrawAxes(g2,area,dataArea,info);\n  PlotOrientation orient\u003dgetOrientation();\n  if (anchor !\u003d null \u0026\u0026 !dataArea.contains(anchor)) {\n    anchor\u003dnull;\n  }\n  CrosshairState crosshairState\u003dnew CrosshairState();\n  crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY);\n  crosshairState.setAnchor(anchor);\n  crosshairState.setAnchorX(Double.NaN);\n  crosshairState.setAnchorY(Double.NaN);\n  if (anchor !\u003d null) {\n    ValueAxis domainAxis\u003dgetDomainAxis();\n    if (domainAxis !\u003d null) {\n      double x;\n      if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n        x\u003ddomainAxis.java2DToValue(anchor.getX(),dataArea,getDomainAxisEdge());\n      }\n else {\n        x\u003ddomainAxis.java2DToValue(anchor.getY(),dataArea,getDomainAxisEdge());\n      }\n      crosshairState.setAnchorX(x);\n    }\n    ValueAxis rangeAxis\u003dgetRangeAxis();\n    if (rangeAxis !\u003d null) {\n      double y;\n      if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n        y\u003drangeAxis.java2DToValue(anchor.getY(),dataArea,getRangeAxisEdge());\n      }\n else {\n        y\u003drangeAxis.java2DToValue(anchor.getX(),dataArea,getRangeAxisEdge());\n      }\n      crosshairState.setAnchorY(y);\n    }\n  }\n  crosshairState.setCrosshairX(getDomainCrosshairValue());\n  crosshairState.setCrosshairY(getRangeCrosshairValue());\n  Shape originalClip\u003dg2.getClip();\n  Composite originalComposite\u003dg2.getComposite();\n  g2.clip(dataArea);\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));\n  AxisState domainAxisState\u003d(AxisState)axisStateMap.get(getDomainAxis());\n  if (domainAxisState \u003d\u003d null) {\n    if (parentState !\u003d null) {\n      domainAxisState\u003d(AxisState)parentState.getSharedAxisStates().get(getDomainAxis());\n    }\n  }\n  AxisState rangeAxisState\u003d(AxisState)axisStateMap.get(getRangeAxis());\n  if (rangeAxisState \u003d\u003d null) {\n    if (parentState !\u003d null) {\n      rangeAxisState\u003d(AxisState)parentState.getSharedAxisStates().get(getRangeAxis());\n    }\n  }\n  if (domainAxisState !\u003d null) {\n    drawDomainTickBands(g2,dataArea,domainAxisState.getTicks());\n  }\n  if (rangeAxisState !\u003d null) {\n    drawRangeTickBands(g2,dataArea,rangeAxisState.getTicks());\n  }\n  if (domainAxisState !\u003d null) {\n    drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());\n    drawZeroDomainBaseline(g2,dataArea);\n  }\n  if (rangeAxisState !\u003d null) {\n    drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());\n    drawZeroRangeBaseline(g2,dataArea);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.BACKGROUND);\n  }\n  boolean foundData\u003dfalse;\n  DatasetRenderingOrder order\u003dgetDatasetRenderingOrder();\n  if (order \u003d\u003d DatasetRenderingOrder.FORWARD) {\n    int rendererCount\u003dthis.renderers.size();\n    for (int i\u003d0; i \u003c rendererCount; i++) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);\n      }\n    }\n    for (int i\u003d0; i \u003c getDatasetCount(); i++) {\n      foundData\u003drender(g2,dataArea,i,info,crosshairState) || foundData;\n    }\n    for (int i\u003d0; i \u003c rendererCount; i++) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);\n      }\n    }\n  }\n else   if (order \u003d\u003d DatasetRenderingOrder.REVERSE) {\n    int rendererCount\u003dthis.renderers.size();\n    for (int i\u003drendererCount - 1; i \u003e\u003d 0; i--) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (i \u003e\u003d getDatasetCount()) {\n        continue;\n      }\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.BACKGROUND,info);\n      }\n    }\n    for (int i\u003dgetDatasetCount() - 1; i \u003e\u003d 0; i--) {\n      foundData\u003drender(g2,dataArea,i,info,crosshairState) || foundData;\n    }\n    for (int i\u003drendererCount - 1; i \u003e\u003d 0; i--) {\n      XYItemRenderer r\u003dgetRenderer(i);\n      if (i \u003e\u003d getDatasetCount()) {\n        continue;\n      }\n      if (r !\u003d null) {\n        ValueAxis domainAxis\u003dgetDomainAxisForDataset(i);\n        ValueAxis rangeAxis\u003dgetRangeAxisForDataset(i);\n        r.drawAnnotations(g2,dataArea,domainAxis,rangeAxis,Layer.FOREGROUND,info);\n      }\n    }\n  }\n  int xAxisIndex\u003dcrosshairState.getDomainAxisIndex();\n  ValueAxis xAxis\u003dgetDomainAxis(xAxisIndex);\n  RectangleEdge xAxisEdge\u003dgetDomainAxisEdge(xAxisIndex);\n  if (!this.domainCrosshairLockedOnData \u0026\u0026 anchor !\u003d null) {\n    double xx;\n    if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n      xx\u003dxAxis.java2DToValue(anchor.getX(),dataArea,xAxisEdge);\n    }\n else {\n      xx\u003dxAxis.java2DToValue(anchor.getY(),dataArea,xAxisEdge);\n    }\n    crosshairState.setCrosshairX(xx);\n  }\n  setDomainCrosshairValue(crosshairState.getCrosshairX(),false);\n  if (isDomainCrosshairVisible()) {\n    double x\u003dgetDomainCrosshairValue();\n    Paint paint\u003dgetDomainCrosshairPaint();\n    Stroke stroke\u003dgetDomainCrosshairStroke();\n    drawDomainCrosshair(g2,dataArea,orient,x,xAxis,stroke,paint);\n  }\n  int yAxisIndex\u003dcrosshairState.getRangeAxisIndex();\n  ValueAxis yAxis\u003dgetRangeAxis(yAxisIndex);\n  RectangleEdge yAxisEdge\u003dgetRangeAxisEdge(yAxisIndex);\n  if (!this.rangeCrosshairLockedOnData \u0026\u0026 anchor !\u003d null) {\n    double yy;\n    if (orient \u003d\u003d PlotOrientation.VERTICAL) {\n      yy\u003dyAxis.java2DToValue(anchor.getY(),dataArea,yAxisEdge);\n    }\n else {\n      yy\u003dyAxis.java2DToValue(anchor.getX(),dataArea,yAxisEdge);\n    }\n    crosshairState.setCrosshairY(yy);\n  }\n  setRangeCrosshairValue(crosshairState.getCrosshairY(),false);\n  if (isRangeCrosshairVisible()) {\n    double y\u003dgetRangeCrosshairValue();\n    Paint paint\u003dgetRangeCrosshairPaint();\n    Stroke stroke\u003dgetRangeCrosshairStroke();\n    drawRangeCrosshair(g2,dataArea,orient,y,yAxis,stroke,paint);\n  }\n  if (!foundData) {\n    drawNoDataMessage(g2,dataArea);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawDomainMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    drawRangeMarkers(g2,dataArea,i,Layer.FOREGROUND);\n  }\n  drawAnnotations(g2,dataArea,info);\n  g2.setClip(originalClip);\n  g2.setComposite(originalComposite);\n  drawOutline(g2,dataArea);\n}",
    "begin_line": 3150,
    "end_line": 3403,
    "comment": "/** \n * Draws the plot within the specified area on a graphics device.\n * @param g2  the graphics device.\n * @param area  the plot area (in Java2D space).\n * @param anchor  an anchor point in Java2D space (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param parentState  the state from the parent plot, if there is one(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param info  collects chart drawing information (\u003ccode\u003enull\u003c/code\u003epermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawBackground#3411",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawBackground(Graphics2D g2,Rectangle2D area){\n  fillBackground(g2,area,this.orientation);\n  drawQuadrants(g2,area);\n  drawBackgroundImage(g2,area);\n}",
    "begin_line": 3411,
    "end_line": 3415,
    "comment": "/** \n * Draws the background for the plot.\n * @param g2  the graphics device.\n * @param area  the area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawQuadrants#3426",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawQuadrants(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawQuadrants(Graphics2D g2,Rectangle2D area){\n  boolean somethingToDraw\u003dfalse;\n  ValueAxis xAxis\u003dgetDomainAxis();\n  if (xAxis \u003d\u003d null) {\n    return;\n  }\n  double x\u003dxAxis.getRange().constrain(this.quadrantOrigin.getX());\n  double xx\u003dxAxis.valueToJava2D(x,area,getDomainAxisEdge());\n  ValueAxis yAxis\u003dgetRangeAxis();\n  if (yAxis \u003d\u003d null) {\n    return;\n  }\n  double y\u003dyAxis.getRange().constrain(this.quadrantOrigin.getY());\n  double yy\u003dyAxis.valueToJava2D(y,area,getRangeAxisEdge());\n  double xmin\u003dxAxis.getLowerBound();\n  double xxmin\u003dxAxis.valueToJava2D(xmin,area,getDomainAxisEdge());\n  double xmax\u003dxAxis.getUpperBound();\n  double xxmax\u003dxAxis.valueToJava2D(xmax,area,getDomainAxisEdge());\n  double ymin\u003dyAxis.getLowerBound();\n  double yymin\u003dyAxis.valueToJava2D(ymin,area,getRangeAxisEdge());\n  double ymax\u003dyAxis.getUpperBound();\n  double yymax\u003dyAxis.valueToJava2D(ymax,area,getRangeAxisEdge());\n  Rectangle2D[] r\u003dnew Rectangle2D[]{null,null,null,null};\n  if (this.quadrantPaint[0] !\u003d null) {\n    if (x \u003e xmin \u0026\u0026 y \u003c ymax) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[0]\u003dnew Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmin,xx),Math.abs(yy - yymax),Math.abs(xx - xxmin));\n      }\n else {\n        r[0]\u003dnew Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymax,yy),Math.abs(xx - xxmin),Math.abs(yy - yymax));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[1] !\u003d null) {\n    if (x \u003c xmax \u0026\u0026 y \u003c ymax) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[1]\u003dnew Rectangle2D.Double(Math.min(yymax,yy),Math.min(xxmax,xx),Math.abs(yy - yymax),Math.abs(xx - xxmax));\n      }\n else {\n        r[1]\u003dnew Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymax,yy),Math.abs(xx - xxmax),Math.abs(yy - yymax));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[2] !\u003d null) {\n    if (x \u003e xmin \u0026\u0026 y \u003e ymin) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[2]\u003dnew Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmin,xx),Math.abs(yy - yymin),Math.abs(xx - xxmin));\n      }\n else {\n        r[2]\u003dnew Rectangle2D.Double(Math.min(xxmin,xx),Math.min(yymin,yy),Math.abs(xx - xxmin),Math.abs(yy - yymin));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (this.quadrantPaint[3] !\u003d null) {\n    if (x \u003c xmax \u0026\u0026 y \u003e ymin) {\n      if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        r[3]\u003dnew Rectangle2D.Double(Math.min(yymin,yy),Math.min(xxmax,xx),Math.abs(yy - yymin),Math.abs(xx - xxmax));\n      }\n else {\n        r[3]\u003dnew Rectangle2D.Double(Math.min(xx,xxmax),Math.min(yymin,yy),Math.abs(xx - xxmax),Math.abs(yy - yymin));\n      }\n      somethingToDraw\u003dtrue;\n    }\n  }\n  if (somethingToDraw) {\n    Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getBackgroundAlpha()));\n    for (int i\u003d0; i \u003c 4; i++) {\n      if (this.quadrantPaint[i] !\u003d null \u0026\u0026 r[i] !\u003d null) {\n        g2.setPaint(this.quadrantPaint[i]);\n        g2.fill(r[i]);\n      }\n    }\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 3426,
    "end_line": 3531,
    "comment": "/** \n * Draws the quadrants.\n * @param g2  the graphics device.\n * @param area  the area.\n * @see #setQuadrantOrigin(Point2D)\n * @see #setQuadrantPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainTickBands#3542",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainTickBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)",
    "snippet": "public void drawDomainTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  Paint bandPaint\u003dgetDomainTickBandPaint();\n  if (bandPaint !\u003d null) {\n    boolean fillBand\u003dfalse;\n    ValueAxis xAxis\u003dgetDomainAxis();\n    double previous\u003dxAxis.getLowerBound();\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      double current\u003dtick.getValue();\n      if (fillBand) {\n        getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,current);\n      }\n      previous\u003dcurrent;\n      fillBand\u003d!fillBand;\n    }\n    double end\u003dxAxis.getUpperBound();\n    if (fillBand) {\n      getRenderer().fillDomainGridBand(g2,this,xAxis,dataArea,previous,end);\n    }\n  }\n}",
    "begin_line": 3542,
    "end_line": 3566,
    "comment": "/** \n * Draws the domain tick bands, if any.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #setDomainTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeTickBands#3577",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeTickBands(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)",
    "snippet": "public void drawRangeTickBands(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  Paint bandPaint\u003dgetRangeTickBandPaint();\n  if (bandPaint !\u003d null) {\n    boolean fillBand\u003dfalse;\n    ValueAxis axis\u003dgetRangeAxis();\n    double previous\u003daxis.getLowerBound();\n    Iterator iterator\u003dticks.iterator();\n    while (iterator.hasNext()) {\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      double current\u003dtick.getValue();\n      if (fillBand) {\n        getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,current);\n      }\n      previous\u003dcurrent;\n      fillBand\u003d!fillBand;\n    }\n    double end\u003daxis.getUpperBound();\n    if (fillBand) {\n      getRenderer().fillRangeGridBand(g2,this,axis,dataArea,previous,end);\n    }\n  }\n}",
    "begin_line": 3577,
    "end_line": 3601,
    "comment": "/** \n * Draws the range tick bands, if any.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #setRangeTickBandPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawAxes#3614",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawAxes(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "protected Map drawAxes(Graphics2D g2,Rectangle2D plotArea,Rectangle2D dataArea,PlotRenderingInfo plotState){\n  AxisCollection axisCollection\u003dnew AxisCollection();\n  for (int index\u003d0; index \u003c this.domainAxes.size(); index++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(index);\n    if (axis !\u003d null) {\n      axisCollection.add(axis,getDomainAxisEdge(index));\n    }\n  }\n  for (int index\u003d0; index \u003c this.rangeAxes.size(); index++) {\n    ValueAxis yAxis\u003d(ValueAxis)this.rangeAxes.get(index);\n    if (yAxis !\u003d null) {\n      axisCollection.add(yAxis,getRangeAxisEdge(index));\n    }\n  }\n  Map axisStateMap\u003dnew HashMap();\n  double cursor\u003ddataArea.getMinY() - this.axisOffset.calculateTopOutset(dataArea.getHeight());\n  Iterator iterator\u003daxisCollection.getAxesAtTop().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.TOP,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n  iterator\u003daxisCollection.getAxesAtBottom().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.BOTTOM,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtLeft().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.LEFT,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  cursor\u003ddataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n  iterator\u003daxisCollection.getAxesAtRight().iterator();\n  while (iterator.hasNext()) {\n    ValueAxis axis\u003d(ValueAxis)iterator.next();\n    AxisState info\u003daxis.draw(g2,cursor,plotArea,dataArea,RectangleEdge.RIGHT,plotState);\n    cursor\u003dinfo.getCursor();\n    axisStateMap.put(axis,info);\n  }\n  return axisStateMap;\n}",
    "begin_line": 3614,
    "end_line": 3688,
    "comment": "/** \n * A utility method for drawing the axes.\n * @param g2  the graphics device (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotArea  the plot area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the data area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param plotState  collects information about the plot (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A map containing the state for each axis drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.render#3706",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.render(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.plot.PlotRenderingInfo, org.jfree.chart.plot.CrosshairState)",
    "snippet": "public boolean render(Graphics2D g2,Rectangle2D dataArea,int index,PlotRenderingInfo info,CrosshairState crosshairState){\n  boolean foundData\u003dfalse;\n  XYDataset dataset\u003dgetDataset(index);\n  if (!DatasetUtilities.isEmptyOrNull(dataset)) {\n    foundData\u003dtrue;\n    ValueAxis xAxis\u003dgetDomainAxisForDataset(index);\n    ValueAxis yAxis\u003dgetRangeAxisForDataset(index);\n    if (xAxis \u003d\u003d null || yAxis \u003d\u003d null) {\n      return foundData;\n    }\n    XYItemRenderer renderer\u003dgetRenderer(index);\n    if (renderer \u003d\u003d null) {\n      renderer\u003dgetRenderer();\n      if (renderer \u003d\u003d null) {\n        return foundData;\n      }\n    }\n    XYItemRendererState state\u003drenderer.initialise(g2,dataArea,this,dataset,info);\n    XYDatasetSelectionState selectionState\u003dstate.getSelectionState();\n    int passCount\u003drenderer.getPassCount();\n    SeriesRenderingOrder seriesOrder\u003dgetSeriesRenderingOrder();\n    if (seriesOrder \u003d\u003d SeriesRenderingOrder.REVERSE) {\n      for (int pass\u003d0; pass \u003c passCount; pass++) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int series\u003dseriesCount - 1; series \u003e\u003d 0; series--) {\n          int firstItem\u003d0;\n          int lastItem\u003ddataset.getItemCount(series) - 1;\n          if (lastItem \u003d\u003d -1) {\n            continue;\n          }\n          if (state.getProcessVisibleItemsOnly()) {\n            int[] itemBounds\u003dRendererUtilities.findLiveItems(dataset,series,xAxis.getLowerBound(),xAxis.getUpperBound());\n            firstItem\u003dMath.max(itemBounds[0] - 1,0);\n            lastItem\u003dMath.min(itemBounds[1] + 1,lastItem);\n          }\n          state.startSeriesPass(dataset,series,firstItem,lastItem,pass,passCount);\n          for (int item\u003dfirstItem; item \u003c\u003d lastItem; item++) {\n            boolean selected\u003dfalse;\n            if (selectionState !\u003d null) {\n              selected\u003dselectionState.isSelected(series,item);\n            }\n            renderer.drawItem(g2,state,dataArea,this,xAxis,yAxis,dataset,series,item,selected,pass);\n          }\n          state.endSeriesPass(dataset,series,firstItem,lastItem,pass,passCount);\n        }\n      }\n    }\n else {\n      for (int pass\u003d0; pass \u003c passCount; pass++) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int series\u003d0; series \u003c seriesCount; series++) {\n          int firstItem\u003d0;\n          int lastItem\u003ddataset.getItemCount(series) - 1;\n          if (state.getProcessVisibleItemsOnly()) {\n            int[] itemBounds\u003dRendererUtilities.findLiveItems(dataset,series,xAxis.getLowerBound(),xAxis.getUpperBound());\n            firstItem\u003dMath.max(itemBounds[0] - 1,0);\n            lastItem\u003dMath.min(itemBounds[1] + 1,lastItem);\n          }\n          state.startSeriesPass(dataset,series,firstItem,lastItem,pass,passCount);\n          for (int item\u003dfirstItem; item \u003c\u003d lastItem; item++) {\n            boolean selected\u003dfalse;\n            if (selectionState !\u003d null) {\n              selected\u003dselectionState.isSelected(series,item);\n            }\n            renderer.drawItem(g2,state,dataArea,this,xAxis,yAxis,dataset,series,item,selected,pass);\n          }\n          state.endSeriesPass(dataset,series,firstItem,lastItem,pass,passCount);\n        }\n      }\n    }\n  }\n  return foundData;\n}",
    "begin_line": 3706,
    "end_line": 3799,
    "comment": "/** \n * Draws a representation of the data within the dataArea region, using the current renderer. \u003cP\u003e The \u003ccode\u003einfo\u003c/code\u003e and \u003ccode\u003ecrosshairState\u003c/code\u003e arguments may be \u003ccode\u003enull\u003c/code\u003e.\n * @param g2  the graphics device.\n * @param dataArea  the region in which the data is to be drawn.\n * @param index  the dataset index.\n * @param info  an optional object for collection dimension information.\n * @param crosshairState  collects crosshair information(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A flag that indicates whether any data was actually rendered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisForDataset#3808",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisForDataset(int)",
    "snippet": "public ValueAxis getDomainAxisForDataset(int index){\n  int upper\u003dMath.max(getDatasetCount(),getRendererCount());\n  if (index \u003c 0 || index \u003e\u003d upper) {\n    throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\");\n  }\n  ValueAxis valueAxis\u003dnull;\n  List axisIndices\u003d(List)this.datasetToDomainAxesMap.get(new Integer(index));\n  if (axisIndices !\u003d null) {\n    Integer axisIndex\u003d(Integer)axisIndices.get(0);\n    valueAxis\u003dgetDomainAxis(axisIndex.intValue());\n  }\n else {\n    valueAxis\u003dgetDomainAxis(0);\n  }\n  return valueAxis;\n}",
    "begin_line": 3808,
    "end_line": 3826,
    "comment": "/** \n * Returns the domain axis for a dataset.\n * @param index  the dataset index.\n * @return The axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisForDataset#3835",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisForDataset(int)",
    "snippet": "public ValueAxis getRangeAxisForDataset(int index){\n  int upper\u003dMath.max(getDatasetCount(),getRendererCount());\n  if (index \u003c 0 || index \u003e\u003d upper) {\n    throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\");\n  }\n  ValueAxis valueAxis\u003dnull;\n  List axisIndices\u003d(List)this.datasetToRangeAxesMap.get(new Integer(index));\n  if (axisIndices !\u003d null) {\n    Integer axisIndex\u003d(Integer)axisIndices.get(0);\n    valueAxis\u003dgetRangeAxis(axisIndex.intValue());\n  }\n else {\n    valueAxis\u003dgetRangeAxis(0);\n  }\n  return valueAxis;\n}",
    "begin_line": 3835,
    "end_line": 3853,
    "comment": "/** \n * Returns the range axis for a dataset.\n * @param index  the dataset index.\n * @return The axis.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainGridlines#3864",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)",
    "snippet": "protected void drawDomainGridlines(Graphics2D g2,Rectangle2D dataArea,List ticks){\n  if (getRenderer() \u003d\u003d null) {\n    return;\n  }\n  if (isDomainGridlinesVisible() || isDomainMinorGridlinesVisible()) {\n    Stroke gridStroke\u003dnull;\n    Paint gridPaint\u003dnull;\n    Iterator iterator\u003dticks.iterator();\n    boolean paintLine\u003dfalse;\n    while (iterator.hasNext()) {\n      paintLine\u003dfalse;\n      ValueTick tick\u003d(ValueTick)iterator.next();\n      if ((tick.getTickType() \u003d\u003d TickType.MINOR) \u0026\u0026 isDomainMinorGridlinesVisible()) {\n        gridStroke\u003dgetDomainMinorGridlineStroke();\n        gridPaint\u003dgetDomainMinorGridlinePaint();\n        paintLine\u003dtrue;\n      }\n else       if ((tick.getTickType() \u003d\u003d TickType.MAJOR) \u0026\u0026 isDomainGridlinesVisible()) {\n        gridStroke\u003dgetDomainGridlineStroke();\n        gridPaint\u003dgetDomainGridlinePaint();\n        paintLine\u003dtrue;\n      }\n      XYItemRenderer r\u003dgetRenderer();\n      if ((r instanceof AbstractXYItemRenderer) \u0026\u0026 paintLine) {\n        ((AbstractXYItemRenderer)r).drawDomainLine(g2,this,getDomainAxis(),dataArea,tick.getValue(),gridPaint,gridStroke);\n      }\n    }\n  }\n}",
    "begin_line": 3864,
    "end_line": 3901,
    "comment": "/** \n * Draws the gridlines for the plot, if they are visible.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param ticks  the ticks.\n * @see #drawRangeGridlines(Graphics2D,Rectangle2D,List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeGridlines#3913",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeGridlines(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.util.List)",
    "snippet": "protected void drawRangeGridlines(Graphics2D g2,Rectangle2D area,List ticks){\n  if (getRenderer() \u003d\u003d null) {\n    return;\n  }\n  if (isRangeGridlinesVisible() || isRangeMinorGridlinesVisible()) {\n    Stroke gridStroke\u003dnull;\n    Paint gridPaint\u003dnull;\n    ValueAxis axis\u003dgetRangeAxis();\n    if (axis !\u003d null) {\n      Iterator iterator\u003dticks.iterator();\n      boolean paintLine\u003dfalse;\n      while (iterator.hasNext()) {\n        paintLine\u003dfalse;\n        ValueTick tick\u003d(ValueTick)iterator.next();\n        if ((tick.getTickType() \u003d\u003d TickType.MINOR) \u0026\u0026 isRangeMinorGridlinesVisible()) {\n          gridStroke\u003dgetRangeMinorGridlineStroke();\n          gridPaint\u003dgetRangeMinorGridlinePaint();\n          paintLine\u003dtrue;\n        }\n else         if ((tick.getTickType() \u003d\u003d TickType.MAJOR) \u0026\u0026 isRangeGridlinesVisible()) {\n          gridStroke\u003dgetRangeGridlineStroke();\n          gridPaint\u003dgetRangeGridlinePaint();\n          paintLine\u003dtrue;\n        }\n        if ((tick.getValue() !\u003d 0.0 || !isRangeZeroBaselineVisible()) \u0026\u0026 paintLine) {\n          getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,tick.getValue(),gridPaint,gridStroke);\n        }\n      }\n    }\n  }\n}",
    "begin_line": 3913,
    "end_line": 3952,
    "comment": "/** \n * Draws the gridlines for the plot\u0027s primary range axis, if they are visible.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @param ticks  the ticks.\n * @see #drawDomainGridlines(Graphics2D,Rectangle2D,List)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawZeroDomainBaseline#3964",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawZeroDomainBaseline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawZeroDomainBaseline(Graphics2D g2,Rectangle2D area){\n  if (isDomainZeroBaselineVisible()) {\n    XYItemRenderer r\u003dgetRenderer();\n    r.drawDomainLine(g2,this,getDomainAxis(),area,0.0,this.domainZeroBaselinePaint,this.domainZeroBaselineStroke);\n  }\n}",
    "begin_line": 3964,
    "end_line": 3971,
    "comment": "/** \n * Draws a base line across the chart at value zero on the domain axis.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @see #setDomainZeroBaselineVisible(boolean)\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawZeroRangeBaseline#3981",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawZeroRangeBaseline(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawZeroRangeBaseline(Graphics2D g2,Rectangle2D area){\n  if (isRangeZeroBaselineVisible()) {\n    getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,0.0,this.rangeZeroBaselinePaint,this.rangeZeroBaselineStroke);\n  }\n}",
    "begin_line": 3981,
    "end_line": 3986,
    "comment": "/** \n * Draws a base line across the chart at value zero on the range axis.\n * @param g2  the graphics device.\n * @param area  the data area.\n * @see #setRangeZeroBaselineVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawAnnotations#3995",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawAnnotations(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info){\n  Iterator iterator\u003dthis.annotations.iterator();\n  while (iterator.hasNext()) {\n    XYAnnotation annotation\u003d(XYAnnotation)iterator.next();\n    ValueAxis xAxis\u003dgetDomainAxis();\n    ValueAxis yAxis\u003dgetRangeAxis();\n    annotation.draw(g2,this,dataArea,xAxis,yAxis,0,info);\n  }\n}",
    "begin_line": 3995,
    "end_line": 4007,
    "comment": "/** \n * Draws the annotations for the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param info  the chart rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainMarkers#4018",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.util.Layer)",
    "snippet": "protected void drawDomainMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  XYItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  if (index \u003e\u003d getDatasetCount()) {\n    return;\n  }\n  Collection markers\u003dgetDomainMarkers(index,layer);\n  ValueAxis axis\u003dgetDomainAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker\u003d(Marker)iterator.next();\n      r.drawDomainMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 4018,
    "end_line": 4040,
    "comment": "/** \n * Draws the domain markers (if any) for an axis and layer.  This method is typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeMarkers#4051",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeMarkers(java.awt.Graphics2D, java.awt.geom.Rectangle2D, int, org.jfree.chart.util.Layer)",
    "snippet": "protected void drawRangeMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){\n  XYItemRenderer r\u003dgetRenderer(index);\n  if (r \u003d\u003d null) {\n    return;\n  }\n  if (index \u003e\u003d getDatasetCount()) {\n    return;\n  }\n  Collection markers\u003dgetRangeMarkers(index,layer);\n  ValueAxis axis\u003dgetRangeAxisForDataset(index);\n  if (markers !\u003d null \u0026\u0026 axis !\u003d null) {\n    Iterator iterator\u003dmarkers.iterator();\n    while (iterator.hasNext()) {\n      Marker marker\u003d(Marker)iterator.next();\n      r.drawRangeMarker(g2,this,axis,marker,dataArea);\n    }\n  }\n}",
    "begin_line": 4051,
    "end_line": 4072,
    "comment": "/** \n * Draws the range markers (if any) for a renderer and layer.  This method is typically called from within the draw() method.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param index  the renderer index.\n * @param layer  the layer (foreground or background).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMarkers#4083",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMarkers(org.jfree.chart.util.Layer)",
    "snippet": "public Collection getDomainMarkers(Layer layer){\n  return getDomainMarkers(0,layer);\n}",
    "begin_line": 4083,
    "end_line": 4085,
    "comment": "/** \n * Returns the list of domain markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of domain markers.\n * @see #getRangeMarkers(Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMarkers#4096",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMarkers(org.jfree.chart.util.Layer)",
    "snippet": "public Collection getRangeMarkers(Layer layer){\n  return getRangeMarkers(0,layer);\n}",
    "begin_line": 4096,
    "end_line": 4098,
    "comment": "/** \n * Returns the list of range markers (read only) for the specified layer.\n * @param layer  the layer (foreground or background).\n * @return The list of range markers.\n * @see #getDomainMarkers(Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainMarkers#4111",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainMarkers(int, org.jfree.chart.util.Layer)",
    "snippet": "public Collection getDomainMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundDomainMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundDomainMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 4111,
    "end_line": 4124,
    "comment": "/** \n * Returns a collection of domain markers for a particular renderer and layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getRangeMarkers(int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeMarkers#4137",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeMarkers(int, org.jfree.chart.util.Layer)",
    "snippet": "public Collection getRangeMarkers(int index,Layer layer){\n  Collection result\u003dnull;\n  Integer key\u003dnew Integer(index);\n  if (layer \u003d\u003d Layer.FOREGROUND) {\n    result\u003d(Collection)this.foregroundRangeMarkers.get(key);\n  }\n else   if (layer \u003d\u003d Layer.BACKGROUND) {\n    result\u003d(Collection)this.backgroundRangeMarkers.get(key);\n  }\n  if (result !\u003d null) {\n    result\u003dCollections.unmodifiableCollection(result);\n  }\n  return result;\n}",
    "begin_line": 4137,
    "end_line": 4150,
    "comment": "/** \n * Returns a collection of range markers for a particular renderer and layer.\n * @param index  the renderer index.\n * @param layer  the layer.\n * @return A collection of markers (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getDomainMarkers(int,Layer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawHorizontalLine#4162",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawHorizontalLine(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double, java.awt.Stroke, java.awt.Paint)",
    "snippet": "protected void drawHorizontalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){\n  ValueAxis axis\u003dgetRangeAxis();\n  if (getOrientation() \u003d\u003d PlotOrientation.HORIZONTAL) {\n    axis\u003dgetDomainAxis();\n  }\n  if (axis.getRange().contains(value)) {\n    double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n    Line2D line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 4162,
    "end_line": 4179,
    "comment": "/** \n * Utility method for drawing a horizontal line across the data area of the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param value  the coordinate, where to draw the line.\n * @param stroke  the stroke to use.\n * @param paint  the paint to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawDomainCrosshair#4194",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawDomainCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, double, org.jfree.chart.axis.ValueAxis, java.awt.Stroke, java.awt.Paint)",
    "snippet": "protected void drawDomainCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){\n  if (axis.getRange().contains(value)) {\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n      line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    }\n else {\n      double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n      line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    }\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 4194,
    "end_line": 4217,
    "comment": "/** \n * Draws a domain crosshair.\n * @param g2  the graphics target.\n * @param dataArea  the data area.\n * @param orientation  the plot orientation.\n * @param value  the crosshair value.\n * @param axis  the axis against which the value is measured.\n * @param stroke  the stroke used to draw the crosshair line.\n * @param paint  the paint used to draw the crosshair line.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawVerticalLine#4228",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawVerticalLine(java.awt.Graphics2D, java.awt.geom.Rectangle2D, double, java.awt.Stroke, java.awt.Paint)",
    "snippet": "protected void drawVerticalLine(Graphics2D g2,Rectangle2D dataArea,double value,Stroke stroke,Paint paint){\n  ValueAxis axis\u003dgetDomainAxis();\n  if (getOrientation() \u003d\u003d PlotOrientation.HORIZONTAL) {\n    axis\u003dgetRangeAxis();\n  }\n  if (axis.getRange().contains(value)) {\n    double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n    Line2D line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 4228,
    "end_line": 4245,
    "comment": "/** \n * Utility method for drawing a vertical line on the data area of the plot.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param value  the coordinate, where to draw the line.\n * @param stroke  the stroke to use.\n * @param paint  the paint to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.drawRangeCrosshair#4260",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.drawRangeCrosshair(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation, double, org.jfree.chart.axis.ValueAxis, java.awt.Stroke, java.awt.Paint)",
    "snippet": "protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){\n  if (axis.getRange().contains(value)) {\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      double xx\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);\n      line\u003dnew Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());\n    }\n else {\n      double yy\u003daxis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);\n      line\u003dnew Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);\n    }\n    g2.setStroke(stroke);\n    g2.setPaint(paint);\n    g2.draw(line);\n  }\n}",
    "begin_line": 4260,
    "end_line": 4283,
    "comment": "/** \n * Draws a range crosshair.\n * @param g2  the graphics target.\n * @param dataArea  the data area.\n * @param orientation  the plot orientation.\n * @param value  the crosshair value.\n * @param axis  the axis against which the value is measured.\n * @param stroke  the stroke used to draw the crosshair line.\n * @param paint  the paint used to draw the crosshair line.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.handleClick#4292",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.handleClick(int, int, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void handleClick(int x,int y,PlotRenderingInfo info){\n  Rectangle2D dataArea\u003dinfo.getDataArea();\n  if (dataArea.contains(x,y)) {\n    ValueAxis xaxis\u003dgetDomainAxis();\n    if (xaxis !\u003d null) {\n      double hvalue\u003dxaxis.java2DToValue(x,info.getDataArea(),getDomainAxisEdge());\n      setDomainCrosshairValue(hvalue);\n    }\n    ValueAxis yaxis\u003dgetRangeAxis();\n    if (yaxis !\u003d null) {\n      double vvalue\u003dyaxis.java2DToValue(y,info.getDataArea(),getRangeAxisEdge());\n      setRangeCrosshairValue(vvalue);\n    }\n  }\n}",
    "begin_line": 4292,
    "end_line": 4312,
    "comment": "/** \n * Handles a \u0027click\u0027 on the plot by updating the anchor values.\n * @param x  the x-coordinate, where the click occurred, in Java2D space.\n * @param y  the y-coordinate, where the click occurred, in Java2D space.\n * @param info  object containing information about the plot dimensions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetsMappedToDomainAxis#4322",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToDomainAxis(java.lang.Integer)",
    "snippet": "private List getDatasetsMappedToDomainAxis(Integer axisIndex){\n  if (axisIndex \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axisIndex\u0027 argument.\");\n  }\n  List result\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    List mappedAxes\u003d(List)this.datasetToDomainAxesMap.get(new Integer(i));\n    if (mappedAxes \u003d\u003d null) {\n      if (axisIndex.equals(ZERO)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n else {\n      if (mappedAxes.contains(axisIndex)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 4322,
    "end_line": 4342,
    "comment": "/** \n * A utility method that returns a list of datasets that are mapped to a particular axis.\n * @param axisIndex  the axis index (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A list of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDatasetsMappedToRangeAxis#4352",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDatasetsMappedToRangeAxis(java.lang.Integer)",
    "snippet": "private List getDatasetsMappedToRangeAxis(Integer axisIndex){\n  if (axisIndex \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027axisIndex\u0027 argument.\");\n  }\n  List result\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.datasets.size(); i++) {\n    List mappedAxes\u003d(List)this.datasetToRangeAxesMap.get(new Integer(i));\n    if (mappedAxes \u003d\u003d null) {\n      if (axisIndex.equals(ZERO)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n else {\n      if (mappedAxes.contains(axisIndex)) {\n        result.add(this.datasets.get(i));\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 4352,
    "end_line": 4372,
    "comment": "/** \n * A utility method that returns a list of datasets that are mapped to a particular axis.\n * @param axisIndex  the axis index (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A list of datasets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainAxisIndex#4383",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainAxisIndex(org.jfree.chart.axis.ValueAxis)",
    "snippet": "public int getDomainAxisIndex(ValueAxis axis){\n  int result\u003dthis.domainAxes.indexOf(axis);\n  if (result \u003c 0) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot p\u003d(XYPlot)parent;\n      result\u003dp.getDomainAxisIndex(axis);\n    }\n  }\n  return result;\n}",
    "begin_line": 4383,
    "end_line": 4394,
    "comment": "/** \n * Returns the index of the given domain axis.\n * @param axis  the axis.\n * @return The axis index.\n * @see #getRangeAxisIndex(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeAxisIndex#4405",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)",
    "snippet": "public int getRangeAxisIndex(ValueAxis axis){\n  int result\u003dthis.rangeAxes.indexOf(axis);\n  if (result \u003c 0) {\n    Plot parent\u003dgetParent();\n    if (parent instanceof XYPlot) {\n      XYPlot p\u003d(XYPlot)parent;\n      result\u003dp.getRangeAxisIndex(axis);\n    }\n  }\n  return result;\n}",
    "begin_line": 4405,
    "end_line": 4416,
    "comment": "/** \n * Returns the index of the given range axis.\n * @param axis  the axis.\n * @return The axis index.\n * @see #getDomainAxisIndex(ValueAxis)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDataRange#4425",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDataRange(org.jfree.chart.axis.ValueAxis)",
    "snippet": "public Range getDataRange(ValueAxis axis){\n  Range result\u003dnull;\n  List mappedDatasets\u003dnew ArrayList();\n  List includedAnnotations\u003dnew ArrayList();\n  boolean isDomainAxis\u003dtrue;\n  int domainIndex\u003dgetDomainAxisIndex(axis);\n  if (domainIndex \u003e\u003d 0) {\n    isDomainAxis\u003dtrue;\n    mappedDatasets.addAll(getDatasetsMappedToDomainAxis(new Integer(domainIndex)));\n    if (domainIndex \u003d\u003d 0) {\n      Iterator iterator\u003dthis.annotations.iterator();\n      while (iterator.hasNext()) {\n        XYAnnotation annotation\u003d(XYAnnotation)iterator.next();\n        if (annotation instanceof XYAnnotationBoundsInfo) {\n          includedAnnotations.add(annotation);\n        }\n      }\n    }\n  }\n  int rangeIndex\u003dgetRangeAxisIndex(axis);\n  if (rangeIndex \u003e\u003d 0) {\n    isDomainAxis\u003dfalse;\n    mappedDatasets.addAll(getDatasetsMappedToRangeAxis(new Integer(rangeIndex)));\n    if (rangeIndex \u003d\u003d 0) {\n      Iterator iterator\u003dthis.annotations.iterator();\n      while (iterator.hasNext()) {\n        XYAnnotation annotation\u003d(XYAnnotation)iterator.next();\n        if (annotation instanceof XYAnnotationBoundsInfo) {\n          includedAnnotations.add(annotation);\n        }\n      }\n    }\n  }\n  Iterator iterator\u003dmappedDatasets.iterator();\n  while (iterator.hasNext()) {\n    XYDataset d\u003d(XYDataset)iterator.next();\n    if (d !\u003d null) {\n      XYItemRenderer r\u003dgetRendererForDataset(d);\n      if (isDomainAxis) {\n        if (r !\u003d null) {\n          result\u003dRange.combine(result,r.findDomainBounds(d));\n        }\n else {\n          result\u003dRange.combine(result,DatasetUtilities.findDomainBounds(d));\n        }\n      }\n else {\n        if (r !\u003d null) {\n          result\u003dRange.combine(result,r.findRangeBounds(d));\n        }\n else {\n          result\u003dRange.combine(result,DatasetUtilities.findRangeBounds(d));\n        }\n      }\n      Collection c\u003dr.getAnnotations();\n      Iterator i\u003dc.iterator();\n      while (i.hasNext()) {\n        XYAnnotation a\u003d(XYAnnotation)i.next();\n        if (a instanceof XYAnnotationBoundsInfo) {\n          includedAnnotations.add(a);\n        }\n      }\n    }\n  }\n  Iterator it\u003dincludedAnnotations.iterator();\n  while (it.hasNext()) {\n    XYAnnotationBoundsInfo xyabi\u003d(XYAnnotationBoundsInfo)it.next();\n    if (xyabi.getIncludeInDataBounds()) {\n      if (isDomainAxis) {\n        result\u003dRange.combine(result,xyabi.getXRange());\n      }\n else {\n        result\u003dRange.combine(result,xyabi.getYRange());\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 4425,
    "end_line": 4519,
    "comment": "/** \n * Returns the range for the specified axis.\n * @param axis  the axis.\n * @return The range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.datasetChanged#4528",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
    "snippet": "public void datasetChanged(DatasetChangeEvent event){\n  configureDomainAxes();\n  configureRangeAxes();\n  if (getParent() !\u003d null) {\n    getParent().datasetChanged(event);\n  }\n else {\n    PlotChangeEvent e\u003dnew PlotChangeEvent(this);\n    e.setType(ChartChangeEventType.DATASET_UPDATED);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 4528,
    "end_line": 4539,
    "comment": "/** \n * Receives notification of a change to the plot\u0027s dataset. \u003cP\u003e The axis ranges are updated if necessary.\n * @param event  information about the event (not used here).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.rendererChanged#4546",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.rendererChanged(org.jfree.chart.event.RendererChangeEvent)",
    "snippet": "public void rendererChanged(RendererChangeEvent event){\n  if (event.getSeriesVisibilityChanged()) {\n    configureDomainAxes();\n    configureRangeAxes();\n  }\n  fireChangeEvent();\n}",
    "begin_line": 4546,
    "end_line": 4554,
    "comment": "/** \n * Receives notification of a renderer change event.\n * @param event  the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainCrosshairVisible#4563",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainCrosshairVisible()",
    "snippet": "public boolean isDomainCrosshairVisible(){\n  return this.domainCrosshairVisible;\n}",
    "begin_line": 4563,
    "end_line": 4565,
    "comment": "/** \n * Returns a flag indicating whether or not the domain crosshair is visible.\n * @return The flag.\n * @see #setDomainCrosshairVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairVisible#4576",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairVisible(boolean)",
    "snippet": "public void setDomainCrosshairVisible(boolean flag){\n  if (this.domainCrosshairVisible !\u003d flag) {\n    this.domainCrosshairVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4576,
    "end_line": 4581,
    "comment": "/** \n * Sets the flag indicating whether or not the domain crosshair is visible and, if the flag changes, sends a  {@link PlotChangeEvent} to allregistered listeners.\n * @param flag  the new value of the flag.\n * @see #isDomainCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainCrosshairLockedOnData#4591",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainCrosshairLockedOnData()",
    "snippet": "public boolean isDomainCrosshairLockedOnData(){\n  return this.domainCrosshairLockedOnData;\n}",
    "begin_line": 4591,
    "end_line": 4593,
    "comment": "/** \n * Returns a flag indicating whether or not the crosshair should \"lock-on\" to actual data values.\n * @return The flag.\n * @see #setDomainCrosshairLockedOnData(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairLockedOnData#4604",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairLockedOnData(boolean)",
    "snippet": "public void setDomainCrosshairLockedOnData(boolean flag){\n  if (this.domainCrosshairLockedOnData !\u003d flag) {\n    this.domainCrosshairLockedOnData\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4604,
    "end_line": 4609,
    "comment": "/** \n * Sets the flag indicating whether or not the domain crosshair should \"lock-on\" to actual data values.  If the flag value changes, this method sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isDomainCrosshairLockedOnData()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairValue#4618",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairValue()",
    "snippet": "public double getDomainCrosshairValue(){\n  return this.domainCrosshairValue;\n}",
    "begin_line": 4618,
    "end_line": 4620,
    "comment": "/** \n * Returns the domain crosshair value.\n * @return The value.\n * @see #setDomainCrosshairValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairValue#4630",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairValue(double)",
    "snippet": "public void setDomainCrosshairValue(double value){\n  setDomainCrosshairValue(value,true);\n}",
    "begin_line": 4630,
    "end_line": 4632,
    "comment": "/** \n * Sets the domain crosshair value and sends a  {@link PlotChangeEvent} toall registered listeners (provided that the domain crosshair is visible).\n * @param value  the value.\n * @see #getDomainCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairValue#4644",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairValue(double, boolean)",
    "snippet": "public void setDomainCrosshairValue(double value,boolean notify){\n  this.domainCrosshairValue\u003dvalue;\n  if (isDomainCrosshairVisible() \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4644,
    "end_line": 4649,
    "comment": "/** \n * Sets the domain crosshair value and, if requested, sends a {@link PlotChangeEvent} to all registered listeners (provided that thedomain crosshair is visible).\n * @param value  the new value.\n * @param notify  notify listeners?\n * @see #getDomainCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairStroke#4660",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairStroke()",
    "snippet": "public Stroke getDomainCrosshairStroke(){\n  return this.domainCrosshairStroke;\n}",
    "begin_line": 4660,
    "end_line": 4662,
    "comment": "/** \n * Returns the  {@link Stroke} used to draw the crosshair (if visible).\n * @return The crosshair stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainCrosshairStroke(Stroke)\n * @see #isDomainCrosshairVisible()\n * @see #getDomainCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairStroke#4673",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairStroke(java.awt.Stroke)",
    "snippet": "public void setDomainCrosshairStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.domainCrosshairStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 4673,
    "end_line": 4679,
    "comment": "/** \n * Sets the Stroke used to draw the crosshairs (if visible) and notifies registered listeners that the axis has been modified.\n * @param stroke  the new crosshair stroke (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @see #getDomainCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getDomainCrosshairPaint#4690",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getDomainCrosshairPaint()",
    "snippet": "public Paint getDomainCrosshairPaint(){\n  return this.domainCrosshairPaint;\n}",
    "begin_line": 4690,
    "end_line": 4692,
    "comment": "/** \n * Returns the domain crosshair paint.\n * @return The crosshair paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainCrosshairPaint(Paint)\n * @see #isDomainCrosshairVisible()\n * @see #getDomainCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainCrosshairPaint#4702",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainCrosshairPaint(java.awt.Paint)",
    "snippet": "public void setDomainCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.domainCrosshairPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 4702,
    "end_line": 4708,
    "comment": "/** \n * Sets the paint used to draw the crosshairs (if visible) and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint the new crosshair paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getDomainCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeCrosshairVisible#4718",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeCrosshairVisible()",
    "snippet": "public boolean isRangeCrosshairVisible(){\n  return this.rangeCrosshairVisible;\n}",
    "begin_line": 4718,
    "end_line": 4720,
    "comment": "/** \n * Returns a flag indicating whether or not the range crosshair is visible.\n * @return The flag.\n * @see #setRangeCrosshairVisible(boolean)\n * @see #isDomainCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairVisible#4731",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairVisible(boolean)",
    "snippet": "public void setRangeCrosshairVisible(boolean flag){\n  if (this.rangeCrosshairVisible !\u003d flag) {\n    this.rangeCrosshairVisible\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4731,
    "end_line": 4736,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair is visible. If the flag value changes, this method sends a  {@link PlotChangeEvent}to all registered listeners.\n * @param flag  the new value of the flag.\n * @see #isRangeCrosshairVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeCrosshairLockedOnData#4746",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeCrosshairLockedOnData()",
    "snippet": "public boolean isRangeCrosshairLockedOnData(){\n  return this.rangeCrosshairLockedOnData;\n}",
    "begin_line": 4746,
    "end_line": 4748,
    "comment": "/** \n * Returns a flag indicating whether or not the crosshair should \"lock-on\" to actual data values.\n * @return The flag.\n * @see #setRangeCrosshairLockedOnData(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairLockedOnData#4759",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairLockedOnData(boolean)",
    "snippet": "public void setRangeCrosshairLockedOnData(boolean flag){\n  if (this.rangeCrosshairLockedOnData !\u003d flag) {\n    this.rangeCrosshairLockedOnData\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4759,
    "end_line": 4764,
    "comment": "/** \n * Sets the flag indicating whether or not the range crosshair should \"lock-on\" to actual data values.  If the flag value changes, this method sends a  {@link PlotChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #isRangeCrosshairLockedOnData()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairValue#4773",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairValue()",
    "snippet": "public double getRangeCrosshairValue(){\n  return this.rangeCrosshairValue;\n}",
    "begin_line": 4773,
    "end_line": 4775,
    "comment": "/** \n * Returns the range crosshair value.\n * @return The value.\n * @see #setRangeCrosshairValue(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairValue#4787",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairValue(double)",
    "snippet": "public void setRangeCrosshairValue(double value){\n  setRangeCrosshairValue(value,true);\n}",
    "begin_line": 4787,
    "end_line": 4789,
    "comment": "/** \n * Sets the range crosshair value. \u003cP\u003e Registered listeners are notified that the plot has been modified, but only if the crosshair is visible.\n * @param value  the new value.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairValue#4801",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairValue(double, boolean)",
    "snippet": "public void setRangeCrosshairValue(double value,boolean notify){\n  this.rangeCrosshairValue\u003dvalue;\n  if (isRangeCrosshairVisible() \u0026\u0026 notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4801,
    "end_line": 4806,
    "comment": "/** \n * Sets the range crosshair value and sends a  {@link PlotChangeEvent} toall registered listeners, but only if the crosshair is visible.\n * @param value  the new value.\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getRangeCrosshairValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairStroke#4817",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairStroke()",
    "snippet": "public Stroke getRangeCrosshairStroke(){\n  return this.rangeCrosshairStroke;\n}",
    "begin_line": 4817,
    "end_line": 4819,
    "comment": "/** \n * Returns the stroke used to draw the crosshair (if visible).\n * @return The crosshair stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairStroke(Stroke)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairStroke#4830",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairStroke(java.awt.Stroke)",
    "snippet": "public void setRangeCrosshairStroke(Stroke stroke){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.rangeCrosshairStroke\u003dstroke;\n  fireChangeEvent();\n}",
    "begin_line": 4830,
    "end_line": 4836,
    "comment": "/** \n * Sets the stroke used to draw the crosshairs (if visible) and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param stroke  the new crosshair stroke (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getRangeCrosshairPaint#4847",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getRangeCrosshairPaint()",
    "snippet": "public Paint getRangeCrosshairPaint(){\n  return this.rangeCrosshairPaint;\n}",
    "begin_line": 4847,
    "end_line": 4849,
    "comment": "/** \n * Returns the range crosshair paint.\n * @return The crosshair paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeCrosshairPaint(Paint)\n * @see #isRangeCrosshairVisible()\n * @see #getRangeCrosshairStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangeCrosshairPaint#4859",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangeCrosshairPaint(java.awt.Paint)",
    "snippet": "public void setRangeCrosshairPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.rangeCrosshairPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 4859,
    "end_line": 4865,
    "comment": "/** \n * Sets the paint used to color the crosshairs (if visible) and sends a {@link PlotChangeEvent} to all registered listeners.\n * @param paint the new crosshair paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getRangeCrosshairPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedDomainAxisSpace#4874",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedDomainAxisSpace()",
    "snippet": "public AxisSpace getFixedDomainAxisSpace(){\n  return this.fixedDomainAxisSpace;\n}",
    "begin_line": 4874,
    "end_line": 4876,
    "comment": "/** \n * Returns the fixed domain axis space.\n * @return The fixed domain axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedDomainAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedDomainAxisSpace#4886",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space){\n  setFixedDomainAxisSpace(space,true);\n}",
    "begin_line": 4886,
    "end_line": 4888,
    "comment": "/** \n * Sets the fixed domain axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedDomainAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedDomainAxisSpace#4901",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)",
    "snippet": "public void setFixedDomainAxisSpace(AxisSpace space,boolean notify){\n  this.fixedDomainAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4901,
    "end_line": 4906,
    "comment": "/** \n * Sets the fixed domain axis space and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedDomainAxisSpace()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedRangeAxisSpace#4915",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedRangeAxisSpace()",
    "snippet": "public AxisSpace getFixedRangeAxisSpace(){\n  return this.fixedRangeAxisSpace;\n}",
    "begin_line": 4915,
    "end_line": 4917,
    "comment": "/** \n * Returns the fixed range axis space.\n * @return The fixed range axis space (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedRangeAxisSpace(AxisSpace)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedRangeAxisSpace#4927",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space){\n  setFixedRangeAxisSpace(space,true);\n}",
    "begin_line": 4927,
    "end_line": 4929,
    "comment": "/** \n * Sets the fixed range axis space and sends a  {@link PlotChangeEvent} toall registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedRangeAxisSpace()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedRangeAxisSpace#4942",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace, boolean)",
    "snippet": "public void setFixedRangeAxisSpace(AxisSpace space,boolean notify){\n  this.fixedRangeAxisSpace\u003dspace;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 4942,
    "end_line": 4947,
    "comment": "/** \n * Sets the fixed range axis space and, if requested, sends a {@link PlotChangeEvent} to all registered listeners.\n * @param space  the space (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getFixedRangeAxisSpace()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainPannable#4957",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainPannable()",
    "snippet": "public boolean isDomainPannable(){\n  return this.domainPannable;\n}",
    "begin_line": 4957,
    "end_line": 4959,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if panning is enabled for the domain axes, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setDomainPannable#4969",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setDomainPannable(boolean)",
    "snippet": "public void setDomainPannable(boolean pannable){\n  this.domainPannable\u003dpannable;\n}",
    "begin_line": 4969,
    "end_line": 4971,
    "comment": "/** \n * Sets the flag that enables or disables panning of the plot along the domain axes.\n * @param pannable  the new flag value.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangePannable#4981",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangePannable()",
    "snippet": "public boolean isRangePannable(){\n  return this.rangePannable;\n}",
    "begin_line": 4981,
    "end_line": 4983,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if panning is enabled for the range axes, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setRangePannable#4993",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setRangePannable(boolean)",
    "snippet": "public void setRangePannable(boolean pannable){\n  this.rangePannable\u003dpannable;\n}",
    "begin_line": 4993,
    "end_line": 4995,
    "comment": "/** \n * Sets the flag that enables or disables panning of the plot along the range axes.\n * @param pannable  the new flag value.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.panDomainAxes#5006",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.panDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void panDomainAxes(double percent,PlotRenderingInfo info,Point2D source){\n  if (!isDomainPannable()) {\n    return;\n  }\n  int domainAxisCount\u003dgetDomainAxisCount();\n  for (int i\u003d0; i \u003c domainAxisCount; i++) {\n    ValueAxis axis\u003dgetDomainAxis(i);\n    if (axis \u003d\u003d null) {\n      continue;\n    }\n    if (axis.isInverted()) {\n      percent\u003d-percent;\n    }\n    axis.pan(percent);\n  }\n}",
    "begin_line": 5006,
    "end_line": 5022,
    "comment": "/** \n * Pans the domain axes by the specified percentage.\n * @param percent  the distance to pan (as a percentage of the axis length).\n * @param info the plot info\n * @param source the source point where the pan action started.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.panRangeAxes#5033",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.panRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void panRangeAxes(double percent,PlotRenderingInfo info,Point2D source){\n  if (!isRangePannable()) {\n    return;\n  }\n  int rangeAxisCount\u003dgetRangeAxisCount();\n  for (int i\u003d0; i \u003c rangeAxisCount; i++) {\n    ValueAxis axis\u003dgetRangeAxis(i);\n    if (axis \u003d\u003d null) {\n      continue;\n    }\n    if (axis.isInverted()) {\n      percent\u003d-percent;\n    }\n    axis.pan(percent);\n  }\n}",
    "begin_line": 5033,
    "end_line": 5049,
    "comment": "/** \n * Pans the range axes by the specified percentage.\n * @param percent  the distance to pan (as a percentage of the axis length).\n * @param info the plot info\n * @param source the source point where the pan action started.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#5060",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source){\n  zoomDomainAxes(factor,info,source,false);\n}",
    "begin_line": 5060,
    "end_line": 5064,
    "comment": "/** \n * Multiplies the range on the domain axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point (in Java2D space).\n * @see #zoomRangeAxes(double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#5078",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)",
    "snippet": "public void zoomDomainAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis domainAxis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (domainAxis !\u003d null) {\n      if (useAnchor) {\n        double sourceX\u003dsource.getX();\n        if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n          sourceX\u003dsource.getY();\n        }\n        double anchorX\u003ddomainAxis.java2DToValue(sourceX,info.getDataArea(),getDomainAxisEdge());\n        domainAxis.resizeRange2(factor,anchorX);\n      }\n else {\n        domainAxis.resizeRange(factor);\n      }\n    }\n  }\n}",
    "begin_line": 5078,
    "end_line": 5101,
    "comment": "/** \n * Multiplies the range on the domain axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point (in Java2D space).\n * @param useAnchor  use source point as zoom anchor?\n * @see #zoomRangeAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomDomainAxes#5117",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomDomainAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis domainAxis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (domainAxis !\u003d null) {\n      domainAxis.zoomRange(lowerPercent,upperPercent);\n    }\n  }\n}",
    "begin_line": 5117,
    "end_line": 5125,
    "comment": "/** \n * Zooms in on the domain axis/axes.  The new lower and upper bounds are specified as percentages of the current axis range, where 0 percent is the current lower bound and 100 percent is the current upper bound.\n * @param lowerPercent  a percentage that determines the new lower boundfor the axis (e.g. 0.20 is twenty percent).\n * @param upperPercent  a percentage that determines the new upper boundfor the axis (e.g. 0.80 is eighty percent).\n * @param info  the plot rendering info.\n * @param source  the source point (ignored).\n * @see #zoomRangeAxes(double,double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#5136",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source){\n  zoomRangeAxes(factor,info,source,false);\n}",
    "begin_line": 5136,
    "end_line": 5140,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @see #zoomDomainAxes(double,PlotRenderingInfo,Point2D,boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#5155",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes(double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D, boolean)",
    "snippet": "public void zoomRangeAxes(double factor,PlotRenderingInfo info,Point2D source,boolean useAnchor){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      if (useAnchor) {\n        double sourceY\u003dsource.getY();\n        if (this.orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n          sourceY\u003dsource.getX();\n        }\n        double anchorY\u003drangeAxis.java2DToValue(sourceY,info.getDataArea(),getRangeAxisEdge());\n        rangeAxis.resizeRange2(factor,anchorY);\n      }\n else {\n        rangeAxis.resizeRange(factor);\n      }\n    }\n  }\n}",
    "begin_line": 5155,
    "end_line": 5178,
    "comment": "/** \n * Multiplies the range on the range axis/axes by the specified factor.\n * @param factor  the zoom factor.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @param useAnchor  a flag that controls whether or not the source pointis used for the zoom anchor.\n * @see #zoomDomainAxes(double,PlotRenderingInfo,Point2D,boolean)\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.zoomRangeAxes#5190",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.zoomRangeAxes(double, double, org.jfree.chart.plot.PlotRenderingInfo, java.awt.geom.Point2D)",
    "snippet": "public void zoomRangeAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis rangeAxis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (rangeAxis !\u003d null) {\n      rangeAxis.zoomRange(lowerPercent,upperPercent);\n    }\n  }\n}",
    "begin_line": 5190,
    "end_line": 5198,
    "comment": "/** \n * Zooms in on the range axes.\n * @param lowerPercent  the lower bound.\n * @param upperPercent  the upper bound.\n * @param info  the plot rendering info.\n * @param source  the source point.\n * @see #zoomDomainAxes(double,double,PlotRenderingInfo,Point2D)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isDomainZoomable#5208",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isDomainZoomable()",
    "snippet": "public boolean isDomainZoomable(){\n  return true;\n}",
    "begin_line": 5208,
    "end_line": 5210,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e, indicating that the domain axis/axes for this plot are zoomable.\n * @return A boolean.\n * @see #isRangeZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.isRangeZoomable#5220",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.isRangeZoomable()",
    "snippet": "public boolean isRangeZoomable(){\n  return true;\n}",
    "begin_line": 5220,
    "end_line": 5222,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e, indicating that the range axis/axes for this plot are zoomable.\n * @return A boolean.\n * @see #isDomainZoomable()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getSeriesCount#5230",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getSeriesCount()",
    "snippet": "public int getSeriesCount(){\n  int result\u003d0;\n  XYDataset dataset\u003dgetDataset();\n  if (dataset !\u003d null) {\n    result\u003ddataset.getSeriesCount();\n  }\n  return result;\n}",
    "begin_line": 5230,
    "end_line": 5237,
    "comment": "/** \n * Returns the number of series in the primary dataset for this plot.  If the dataset is \u003ccode\u003enull\u003c/code\u003e, the method returns 0.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getFixedLegendItems#5246",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getFixedLegendItems()",
    "snippet": "public LegendItemCollection getFixedLegendItems(){\n  return this.fixedLegendItems;\n}",
    "begin_line": 5246,
    "end_line": 5248,
    "comment": "/** \n * Returns the fixed legend items, if any.\n * @return The legend items (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFixedLegendItems(LegendItemCollection)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.setFixedLegendItems#5259",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)",
    "snippet": "public void setFixedLegendItems(LegendItemCollection items){\n  this.fixedLegendItems\u003ditems;\n  fireChangeEvent();\n}",
    "begin_line": 5259,
    "end_line": 5262,
    "comment": "/** \n * Sets the fixed legend items for the plot.  Leave this set to \u003ccode\u003enull\u003c/code\u003e if you prefer the legend items to be created automatically.\n * @param items  the legend items (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getFixedLegendItems()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.getLegendItems#5271",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.getLegendItems()",
    "snippet": "public LegendItemCollection getLegendItems(){\n  if (this.fixedLegendItems !\u003d null) {\n    return this.fixedLegendItems;\n  }\n  LegendItemCollection result\u003dnew LegendItemCollection();\n  int count\u003dthis.datasets.size();\n  for (int datasetIndex\u003d0; datasetIndex \u003c count; datasetIndex++) {\n    XYDataset dataset\u003dgetDataset(datasetIndex);\n    if (dataset !\u003d null) {\n      XYItemRenderer renderer\u003dgetRenderer(datasetIndex);\n      if (renderer \u003d\u003d null) {\n        renderer\u003dgetRenderer(0);\n      }\n      if (renderer !\u003d null) {\n        int seriesCount\u003ddataset.getSeriesCount();\n        for (int i\u003d0; i \u003c seriesCount; i++) {\n          if (renderer.isSeriesVisible(i) \u0026\u0026 renderer.isSeriesVisibleInLegend(i)) {\n            LegendItem item\u003drenderer.getLegendItem(datasetIndex,i);\n            if (item !\u003d null) {\n              result.add(item);\n            }\n          }\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 5271,
    "end_line": 5300,
    "comment": "/** \n * Returns the legend items for the plot.  Each legend item is generated by the plot\u0027s renderer, since the renderer is responsible for the visual representation of the data.\n * @return The legend items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.equals#5309",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYPlot)) {\n    return false;\n  }\n  XYPlot that\u003d(XYPlot)obj;\n  if (this.weight !\u003d that.weight) {\n    return false;\n  }\n  if (this.orientation !\u003d that.orientation) {\n    return false;\n  }\n  if (!this.domainAxes.equals(that.domainAxes)) {\n    return false;\n  }\n  if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n    return false;\n  }\n  if (this.rangeCrosshairLockedOnData !\u003d that.rangeCrosshairLockedOnData) {\n    return false;\n  }\n  if (this.domainGridlinesVisible !\u003d that.domainGridlinesVisible) {\n    return false;\n  }\n  if (this.rangeGridlinesVisible !\u003d that.rangeGridlinesVisible) {\n    return false;\n  }\n  if (this.domainMinorGridlinesVisible !\u003d that.domainMinorGridlinesVisible) {\n    return false;\n  }\n  if (this.rangeMinorGridlinesVisible !\u003d that.rangeMinorGridlinesVisible) {\n    return false;\n  }\n  if (this.domainZeroBaselineVisible !\u003d that.domainZeroBaselineVisible) {\n    return false;\n  }\n  if (this.rangeZeroBaselineVisible !\u003d that.rangeZeroBaselineVisible) {\n    return false;\n  }\n  if (this.domainCrosshairVisible !\u003d that.domainCrosshairVisible) {\n    return false;\n  }\n  if (this.domainCrosshairValue !\u003d that.domainCrosshairValue) {\n    return false;\n  }\n  if (this.domainCrosshairLockedOnData !\u003d that.domainCrosshairLockedOnData) {\n    return false;\n  }\n  if (this.rangeCrosshairVisible !\u003d that.rangeCrosshairVisible) {\n    return false;\n  }\n  if (this.rangeCrosshairValue !\u003d that.rangeCrosshairValue) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.axisOffset,that.axisOffset)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.renderers,that.renderers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeAxes,that.rangeAxes)) {\n    return false;\n  }\n  if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToDomainAxesMap,that.datasetToDomainAxesMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.datasetToRangeAxesMap,that.datasetToRangeAxesMap)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainGridlineStroke,that.domainGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainGridlinePaint,that.domainGridlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeGridlineStroke,that.rangeGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeGridlinePaint,that.rangeGridlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainMinorGridlineStroke,that.domainMinorGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainMinorGridlinePaint,that.domainMinorGridlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeMinorGridlineStroke,that.rangeMinorGridlineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeMinorGridlinePaint,that.rangeMinorGridlinePaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainZeroBaselinePaint,that.domainZeroBaselinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,that.domainZeroBaselineStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeZeroBaselinePaint,that.rangeZeroBaselinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke,that.rangeZeroBaselineStroke)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.domainCrosshairStroke,that.domainCrosshairStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainCrosshairPaint,that.domainCrosshairPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.rangeCrosshairStroke,that.rangeCrosshairStroke)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeCrosshairPaint,that.rangeCrosshairPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundDomainMarkers,that.foregroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundDomainMarkers,that.backgroundDomainMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.foregroundRangeMarkers,that.foregroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.backgroundRangeMarkers,that.backgroundRangeMarkers)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.annotations,that.annotations)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.fixedLegendItems,that.fixedLegendItems)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.domainTickBandPaint,that.domainTickBandPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.rangeTickBandPaint,that.rangeTickBandPaint)) {\n    return false;\n  }\n  if (!this.quadrantOrigin.equals(that.quadrantOrigin)) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c 4; i++) {\n    if (!PaintUtilities.equal(this.quadrantPaint[i],that.quadrantPaint[i])) {\n      return false;\n    }\n  }\n  return super.equals(obj);\n}",
    "begin_line": 5309,
    "end_line": 5510,
    "comment": "/** \n * Tests this plot for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clone#5520",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYPlot clone\u003d(XYPlot)super.clone();\n  clone.domainAxes\u003d(ObjectList)ObjectUtilities.clone(this.domainAxes);\n  for (int i\u003d0; i \u003c this.domainAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      ValueAxis clonedAxis\u003d(ValueAxis)axis.clone();\n      clone.domainAxes.set(i,clonedAxis);\n      clonedAxis.setPlot(clone);\n      clonedAxis.addChangeListener(clone);\n    }\n  }\n  clone.domainAxisLocations\u003d(ObjectList)this.domainAxisLocations.clone();\n  clone.rangeAxes\u003d(ObjectList)ObjectUtilities.clone(this.rangeAxes);\n  for (int i\u003d0; i \u003c this.rangeAxes.size(); i++) {\n    ValueAxis axis\u003d(ValueAxis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      ValueAxis clonedAxis\u003d(ValueAxis)axis.clone();\n      clone.rangeAxes.set(i,clonedAxis);\n      clonedAxis.setPlot(clone);\n      clonedAxis.addChangeListener(clone);\n    }\n  }\n  clone.rangeAxisLocations\u003d(ObjectList)ObjectUtilities.clone(this.rangeAxisLocations);\n  clone.datasets\u003d(ObjectList)ObjectUtilities.clone(this.datasets);\n  for (int i\u003d0; i \u003c clone.datasets.size(); ++i) {\n    XYDataset d\u003dgetDataset(i);\n    if (d !\u003d null) {\n      d.addChangeListener(clone);\n    }\n  }\n  clone.datasetToDomainAxesMap\u003dnew TreeMap();\n  clone.datasetToDomainAxesMap.putAll(this.datasetToDomainAxesMap);\n  clone.datasetToRangeAxesMap\u003dnew TreeMap();\n  clone.datasetToRangeAxesMap.putAll(this.datasetToRangeAxesMap);\n  clone.renderers\u003d(ObjectList)ObjectUtilities.clone(this.renderers);\n  for (int i\u003d0; i \u003c this.renderers.size(); i++) {\n    XYItemRenderer renderer2\u003d(XYItemRenderer)this.renderers.get(i);\n    if (renderer2 instanceof PublicCloneable) {\n      PublicCloneable pc\u003d(PublicCloneable)renderer2;\n      clone.renderers.set(i,pc.clone());\n    }\n  }\n  clone.foregroundDomainMarkers\u003d(Map)ObjectUtilities.clone(this.foregroundDomainMarkers);\n  clone.backgroundDomainMarkers\u003d(Map)ObjectUtilities.clone(this.backgroundDomainMarkers);\n  clone.foregroundRangeMarkers\u003d(Map)ObjectUtilities.clone(this.foregroundRangeMarkers);\n  clone.backgroundRangeMarkers\u003d(Map)ObjectUtilities.clone(this.backgroundRangeMarkers);\n  clone.annotations\u003d(List)ObjectUtilities.deepClone(this.annotations);\n  if (this.fixedDomainAxisSpace !\u003d null) {\n    clone.fixedDomainAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedDomainAxisSpace);\n  }\n  if (this.fixedRangeAxisSpace !\u003d null) {\n    clone.fixedRangeAxisSpace\u003d(AxisSpace)ObjectUtilities.clone(this.fixedRangeAxisSpace);\n  }\n  if (this.fixedLegendItems !\u003d null) {\n    clone.fixedLegendItems\u003d(LegendItemCollection)this.fixedLegendItems.clone();\n  }\n  clone.quadrantOrigin\u003d(Point2D)ObjectUtilities.clone(this.quadrantOrigin);\n  clone.quadrantPaint\u003d(Paint[])this.quadrantPaint.clone();\n  return clone;\n}",
    "begin_line": 5520,
    "end_line": 5597,
    "comment": "/** \n * Returns a clone of the plot.\n * @return A clone.\n * @throws CloneNotSupportedException  this can occur if some component ofthe plot cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.writeObject#5606",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeStroke(this.domainGridlineStroke,stream);\n  SerialUtilities.writePaint(this.domainGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeGridlineStroke,stream);\n  SerialUtilities.writePaint(this.rangeGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.domainMinorGridlineStroke,stream);\n  SerialUtilities.writePaint(this.domainMinorGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeMinorGridlineStroke,stream);\n  SerialUtilities.writePaint(this.rangeMinorGridlinePaint,stream);\n  SerialUtilities.writeStroke(this.rangeZeroBaselineStroke,stream);\n  SerialUtilities.writePaint(this.rangeZeroBaselinePaint,stream);\n  SerialUtilities.writeStroke(this.domainCrosshairStroke,stream);\n  SerialUtilities.writePaint(this.domainCrosshairPaint,stream);\n  SerialUtilities.writeStroke(this.rangeCrosshairStroke,stream);\n  SerialUtilities.writePaint(this.rangeCrosshairPaint,stream);\n  SerialUtilities.writePaint(this.domainTickBandPaint,stream);\n  SerialUtilities.writePaint(this.rangeTickBandPaint,stream);\n  SerialUtilities.writePoint2D(this.quadrantOrigin,stream);\n  for (int i\u003d0; i \u003c 4; i++) {\n    SerialUtilities.writePaint(this.quadrantPaint[i],stream);\n  }\n  SerialUtilities.writeStroke(this.domainZeroBaselineStroke,stream);\n  SerialUtilities.writePaint(this.domainZeroBaselinePaint,stream);\n}",
    "begin_line": 5606,
    "end_line": 5630,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.readObject#5640",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.domainGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.domainMinorGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainMinorGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeMinorGridlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeMinorGridlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeZeroBaselineStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeZeroBaselinePaint\u003dSerialUtilities.readPaint(stream);\n  this.domainCrosshairStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainCrosshairPaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeCrosshairStroke\u003dSerialUtilities.readStroke(stream);\n  this.rangeCrosshairPaint\u003dSerialUtilities.readPaint(stream);\n  this.domainTickBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.rangeTickBandPaint\u003dSerialUtilities.readPaint(stream);\n  this.quadrantOrigin\u003dSerialUtilities.readPoint2D(stream);\n  this.quadrantPaint\u003dnew Paint[4];\n  for (int i\u003d0; i \u003c 4; i++) {\n    this.quadrantPaint[i]\u003dSerialUtilities.readPaint(stream);\n  }\n  this.domainZeroBaselineStroke\u003dSerialUtilities.readStroke(stream);\n  this.domainZeroBaselinePaint\u003dSerialUtilities.readPaint(stream);\n  int domainAxisCount\u003dthis.domainAxes.size();\n  for (int i\u003d0; i \u003c domainAxisCount; i++) {\n    Axis axis\u003d(Axis)this.domainAxes.get(i);\n    if (axis !\u003d null) {\n      axis.setPlot(this);\n      axis.addChangeListener(this);\n    }\n  }\n  int rangeAxisCount\u003dthis.rangeAxes.size();\n  for (int i\u003d0; i \u003c rangeAxisCount; i++) {\n    Axis axis\u003d(Axis)this.rangeAxes.get(i);\n    if (axis !\u003d null) {\n      axis.setPlot(this);\n      axis.addChangeListener(this);\n    }\n  }\n  int datasetCount\u003dthis.datasets.size();\n  for (int i\u003d0; i \u003c datasetCount; i++) {\n    Dataset dataset\u003d(Dataset)this.datasets.get(i);\n    if (dataset !\u003d null) {\n      dataset.addChangeListener(this);\n    }\n  }\n  int rendererCount\u003dthis.renderers.size();\n  for (int i\u003d0; i \u003c rendererCount; i++) {\n    XYItemRenderer renderer\u003d(XYItemRenderer)this.renderers.get(i);\n    if (renderer !\u003d null) {\n      renderer.addChangeListener(this);\n    }\n  }\n}",
    "begin_line": 5640,
    "end_line": 5702,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.canSelectByPoint#5713",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.canSelectByPoint()",
    "snippet": "public boolean canSelectByPoint(){\n  return false;\n}",
    "begin_line": 5713,
    "end_line": 5715,
    "comment": "/** \n * Returns \u003ccode\u003efalse\u003c/code\u003e to indicate that this plot does not support selection of data items at a point (only because it hasn\u0027t been implemented yet).\n * @return A boolean.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.canSelectByRegion#5725",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.canSelectByRegion()",
    "snippet": "public boolean canSelectByRegion(){\n  return true;\n}",
    "begin_line": 5725,
    "end_line": 5727,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e to indicate that this plot supports selection of data items by region.\n * @return A boolean.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.select#5734",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.select(double, double, java.awt.geom.Rectangle2D, org.jfree.chart.RenderingSource)",
    "snippet": "public void select(double x,double y,Rectangle2D dataArea,RenderingSource source){\n}",
    "begin_line": 5734,
    "end_line": 5737,
    "comment": "/** \n * Selects a single point - NOT YET IMPLEMENTED.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.select#5748",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.select(java.awt.geom.GeneralPath, java.awt.geom.Rectangle2D, org.jfree.chart.RenderingSource)",
    "snippet": "public void select(GeneralPath region,Rectangle2D dataArea,RenderingSource source){\n  int datasetCount\u003dthis.datasets.size();\n  for (int d\u003d0; d \u003c datasetCount; d++) {\n    XYDataset dataset\u003d(XYDataset)this.datasets.get(d);\n    if (dataset \u003d\u003d null) {\n      continue;\n    }\n    XYDatasetSelectionState state\u003dfindSelectionStateForDataset(dataset,source);\n    if (state \u003d\u003d null) {\n      continue;\n    }\n    GeneralPath path\u003dconvertToDataSpace(region,dataArea,dataset);\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      int itemCount\u003ddataset.getItemCount(s);\n      for (int i\u003d0; i \u003c itemCount; i++) {\n        double x\u003ddataset.getXValue(s,i);\n        double y\u003ddataset.getYValue(s,i);\n        if (path.contains(x,y)) {\n          state.setSelected(s,i,true);\n        }\n      }\n    }\n  }\n}",
    "begin_line": 5748,
    "end_line": 5781,
    "comment": "/** \n * Selects the data items within the specified region.\n * @param region  the region (in Java2D coordinates).\n * @param dataArea  the data area.\n * @param source  the rendering source.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.findSelectionStateForDataset#5793",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.findSelectionStateForDataset(org.jfree.data.xy.XYDataset, java.lang.Object)",
    "snippet": "private XYDatasetSelectionState findSelectionStateForDataset(XYDataset dataset,Object source){\n  if (dataset instanceof SelectableXYDataset) {\n    SelectableXYDataset sd\u003d(SelectableXYDataset)dataset;\n    XYDatasetSelectionState s\u003dsd.getSelectionState();\n    return s;\n  }\n  throw new RuntimeException();\n}",
    "begin_line": 5793,
    "end_line": 5802,
    "comment": "/** \n * Returns the selection state for the specified dataset.  This could be \u003ccode\u003enull\u003c/code\u003e if the dataset hasn\u0027t been set up to support selections.\n * @param dataset  the dataset.\n * @param source  the selection source.\n * @return The selection state (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.convertToDataSpace#5814",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.convertToDataSpace(java.awt.geom.GeneralPath, java.awt.geom.Rectangle2D, org.jfree.data.xy.XYDataset)",
    "snippet": "private GeneralPath convertToDataSpace(GeneralPath path,Rectangle2D dataArea,XYDataset dataset){\n  GeneralPath result\u003dnew GeneralPath(path.getWindingRule());\n  int datasetIndex\u003dindexOf(dataset);\n  ValueAxis xAxis\u003dgetDomainAxisForDataset(datasetIndex);\n  ValueAxis yAxis\u003dgetRangeAxisForDataset(datasetIndex);\n  RectangleEdge xAxisEdge\u003dgetDomainAxisEdge();\n  RectangleEdge yAxisEdge\u003dgetRangeAxisEdge();\n  double[] coords\u003dnew double[6];\n  PathIterator iterator\u003dpath.getPathIterator(null);\n  while (!iterator.isDone()) {\n    int segType\u003diterator.currentSegment(coords);\n    double xx\u003dxAxis.java2DToValue(coords[0],dataArea,xAxisEdge);\n    double yy\u003dyAxis.java2DToValue(coords[1],dataArea,yAxisEdge);\n    if (segType \u003d\u003d PathIterator.SEG_MOVETO) {\n      result.moveTo((float)xx,(float)yy);\n    }\n else     if (segType \u003d\u003d PathIterator.SEG_LINETO) {\n      result.lineTo((float)xx,(float)yy);\n    }\n else     if (segType \u003d\u003d PathIterator.SEG_CLOSE) {\n      result.closePath();\n    }\n    iterator.next();\n  }\n  return result;\n}",
    "begin_line": 5814,
    "end_line": 5840,
    "comment": "/** \n * Converts a path from Java2D space to data space.\n * @param path  the path (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param dataArea  the data area.\n * @param dataset  the dataset which can be used to find the appropriateaxes.\n * @return A path in data space.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYPlot.clearSelection#5847",
    "is_bug": true,
    "src_path": "org/jfree/chart/plot/XYPlot.java",
    "class_name": "org.jfree.chart.plot.XYPlot",
    "signature": "org.jfree.chart.plot.XYPlot.clearSelection()",
    "snippet": "public void clearSelection(){\n  int datasetCount\u003dthis.datasets.size();\n  for (int d\u003d0; d \u003c datasetCount; d++) {\n    XYDataset dataset\u003d(XYDataset)this.datasets.get(d);\n    if (dataset instanceof AbstractXYDataset) {\n      AbstractXYDataset axyd\u003d(AbstractXYDataset)dataset;\n      if (axyd.getSelectionState() !\u003d null) {\n        XYDatasetSelectionState selState\u003daxyd.getSelectionState();\n        selState.clearSelection();\n      }\n    }\n  }\n}",
    "begin_line": 5847,
    "end_line": 5862,
    "comment": "/** \n * Clears the selection.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.AbstractRenderer#391",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
    "snippet": "public AbstractRenderer(){\n  this.seriesVisibleList\u003dnew BooleanList();\n  this.baseSeriesVisible\u003dtrue;\n  this.seriesVisibleInLegendList\u003dnew BooleanList();\n  this.baseSeriesVisibleInLegend\u003dtrue;\n  this.paintList\u003dnew PaintList();\n  this.basePaint\u003dDEFAULT_PAINT;\n  this.autoPopulateSeriesPaint\u003dtrue;\n  this.fillPaintList\u003dnew PaintList();\n  this.baseFillPaint\u003dColor.white;\n  this.autoPopulateSeriesFillPaint\u003dfalse;\n  this.outlinePaintList\u003dnew PaintList();\n  this.baseOutlinePaint\u003dDEFAULT_OUTLINE_PAINT;\n  this.autoPopulateSeriesOutlinePaint\u003dfalse;\n  this.strokeList\u003dnew StrokeList();\n  this.baseStroke\u003dDEFAULT_STROKE;\n  this.autoPopulateSeriesStroke\u003dtrue;\n  this.outlineStrokeList\u003dnew StrokeList();\n  this.baseOutlineStroke\u003dDEFAULT_OUTLINE_STROKE;\n  this.autoPopulateSeriesOutlineStroke\u003dfalse;\n  this.shapeList\u003dnew ShapeList();\n  this.baseShape\u003dDEFAULT_SHAPE;\n  this.autoPopulateSeriesShape\u003dtrue;\n  this.itemLabelsVisibleList\u003dnew BooleanList();\n  this.baseItemLabelsVisible\u003dfalse;\n  this.itemLabelFontList\u003dnew ObjectList();\n  this.baseItemLabelFont\u003dnew Font(\"Tahoma\",Font.PLAIN,10);\n  this.itemLabelPaintList\u003dnew PaintList();\n  this.baseItemLabelPaint\u003dColor.black;\n  this.positiveItemLabelPositionList\u003dnew ObjectList();\n  this.basePositiveItemLabelPosition\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BOTTOM_CENTER);\n  this.negativeItemLabelPositionList\u003dnew ObjectList();\n  this.baseNegativeItemLabelPosition\u003dnew ItemLabelPosition(ItemLabelAnchor.OUTSIDE6,TextAnchor.TOP_CENTER);\n  this.createEntitiesList\u003dnew BooleanList();\n  this.baseCreateEntities\u003dtrue;\n  this.defaultEntityRadius\u003d3;\n  this.legendShapeList\u003dnew ShapeList();\n  this.baseLegendShape\u003dnull;\n  this.treatLegendShapeAsLine\u003dfalse;\n  this.legendTextFont\u003dnew ObjectList();\n  this.baseLegendTextFont\u003dnull;\n  this.legendTextPaint\u003dnew PaintList();\n  this.baseLegendTextPaint\u003dnull;\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 391,
    "end_line": 458,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getDrawingSupplier#465",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getDrawingSupplier()",
    "snippet": "public abstract DrawingSupplier getDrawingSupplier();",
    "begin_line": 465,
    "end_line": 465,
    "comment": "/** \n * Returns the drawing supplier from the plot.\n * @return The drawing supplier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemVisible#478",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemVisible(int, int)",
    "snippet": "public boolean getItemVisible(int series,int item){\n  return isSeriesVisible(series);\n}",
    "begin_line": 478,
    "end_line": 480,
    "comment": "/** \n * Returns a boolean that indicates whether or not the specified item should be drawn (this is typically used to hide an entire series).\n * @param series  the series index.\n * @param item  the item index.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.isSeriesVisible#490",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible(int)",
    "snippet": "public boolean isSeriesVisible(int series){\n  boolean result\u003dthis.baseSeriesVisible;\n  Boolean b\u003dthis.seriesVisibleList.getBoolean(series);\n  if (b !\u003d null) {\n    result\u003db.booleanValue();\n  }\n  return result;\n}",
    "begin_line": 490,
    "end_line": 497,
    "comment": "/** \n * Returns a boolean that indicates whether or not the specified series should be drawn.\n * @param series  the series index.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesVisible#508",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesVisible(int)",
    "snippet": "public Boolean getSeriesVisible(int series){\n  return this.seriesVisibleList.getBoolean(series);\n}",
    "begin_line": 508,
    "end_line": 510,
    "comment": "/** \n * Returns the flag that controls whether a series is visible.\n * @param series  the series index (zero-based).\n * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesVisible(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesVisible#521",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)",
    "snippet": "public void setSeriesVisible(int series,Boolean visible){\n  setSeriesVisible(series,visible,true);\n}",
    "begin_line": 521,
    "end_line": 523,
    "comment": "/** \n * Sets the flag that controls whether a series is visible and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesVisible#536",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean, boolean)",
    "snippet": "public void setSeriesVisible(int series,Boolean visible,boolean notify){\n  this.seriesVisibleList.setBoolean(series,visible);\n  if (notify) {\n    RendererChangeEvent e\u003dnew RendererChangeEvent(this,true);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 536,
    "end_line": 546,
    "comment": "/** \n * Sets the flag that controls whether a series is visible and, if requested, sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index.\n * @param visible  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseSeriesVisible#555",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseSeriesVisible()",
    "snippet": "public boolean getBaseSeriesVisible(){\n  return this.baseSeriesVisible;\n}",
    "begin_line": 555,
    "end_line": 557,
    "comment": "/** \n * Returns the base visibility for all series.\n * @return The base visibility.\n * @see #setBaseSeriesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseSeriesVisible#567",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisible(boolean)",
    "snippet": "public void setBaseSeriesVisible(boolean visible){\n  setBaseSeriesVisible(visible,true);\n}",
    "begin_line": 567,
    "end_line": 570,
    "comment": "/** \n * Sets the base visibility and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param visible  the flag.\n * @see #getBaseSeriesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseSeriesVisible#581",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisible(boolean, boolean)",
    "snippet": "public void setBaseSeriesVisible(boolean visible,boolean notify){\n  this.baseSeriesVisible\u003dvisible;\n  if (notify) {\n    RendererChangeEvent e\u003dnew RendererChangeEvent(this,true);\n    notifyListeners(e);\n  }\n}",
    "begin_line": 581,
    "end_line": 591,
    "comment": "/** \n * Sets the base visibility and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param visible  the visibility.\n * @param notify  notify listeners?\n * @see #getBaseSeriesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.isSeriesVisibleInLegend#603",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisibleInLegend(int)",
    "snippet": "public boolean isSeriesVisibleInLegend(int series){\n  boolean result\u003dthis.baseSeriesVisibleInLegend;\n  Boolean b\u003dthis.seriesVisibleInLegendList.getBoolean(series);\n  if (b !\u003d null) {\n    result\u003db.booleanValue();\n  }\n  return result;\n}",
    "begin_line": 603,
    "end_line": 610,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the series should be shown in the legend, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param series  the series index.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesVisibleInLegend#624",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesVisibleInLegend(int)",
    "snippet": "public Boolean getSeriesVisibleInLegend(int series){\n  return this.seriesVisibleInLegendList.getBoolean(series);\n}",
    "begin_line": 624,
    "end_line": 626,
    "comment": "/** \n * Returns the flag that controls whether a series is visible in the legend.  This method returns only the \"per series\" settings - to do a lookup that falls back to the default, you need to use the {@link #isSeriesVisibleInLegend(int)} method.\n * @param series  the series index (zero-based).\n * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesVisibleInLegend(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesVisibleInLegend#637",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(int, java.lang.Boolean)",
    "snippet": "public void setSeriesVisibleInLegend(int series,Boolean visible){\n  setSeriesVisibleInLegend(series,visible,true);\n}",
    "begin_line": 637,
    "end_line": 639,
    "comment": "/** \n * Sets the flag that controls whether a series is visible in the legend and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesVisibleInLegend(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesVisibleInLegend#652",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(int, java.lang.Boolean, boolean)",
    "snippet": "public void setSeriesVisibleInLegend(int series,Boolean visible,boolean notify){\n  this.seriesVisibleInLegendList.setBoolean(series,visible);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 652,
    "end_line": 658,
    "comment": "/** \n * Sets the flag that controls whether a series is visible in the legend and, if requested, sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index.\n * @param visible  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesVisibleInLegend(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseSeriesVisibleInLegend#667",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseSeriesVisibleInLegend()",
    "snippet": "public boolean getBaseSeriesVisibleInLegend(){\n  return this.baseSeriesVisibleInLegend;\n}",
    "begin_line": 667,
    "end_line": 669,
    "comment": "/** \n * Returns the base visibility in the legend for all series.\n * @return The base visibility.\n * @see #setBaseSeriesVisibleInLegend(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseSeriesVisibleInLegend#679",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisibleInLegend(boolean)",
    "snippet": "public void setBaseSeriesVisibleInLegend(boolean visible){\n  setBaseSeriesVisibleInLegend(visible,true);\n}",
    "begin_line": 679,
    "end_line": 682,
    "comment": "/** \n * Sets the base visibility in the legend and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @see #getBaseSeriesVisibleInLegend()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseSeriesVisibleInLegend#693",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisibleInLegend(boolean, boolean)",
    "snippet": "public void setBaseSeriesVisibleInLegend(boolean visible,boolean notify){\n  this.baseSeriesVisibleInLegend\u003dvisible;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 693,
    "end_line": 698,
    "comment": "/** \n * Sets the base visibility in the legend and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param visible  the visibility.\n * @param notify  notify listeners?\n * @see #getBaseSeriesVisibleInLegend()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemPaint#716",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemPaint(int, int, boolean)",
    "snippet": "public Paint getItemPaint(int row,int column,boolean selected){\n  return lookupSeriesPaint(row);\n}",
    "begin_line": 716,
    "end_line": 718,
    "comment": "/** \n * Returns the paint used to fill data items as they are drawn.  The default implementation passes control to the {@link #lookupSeriesPaint(int)}  method. You can override this methodif you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesPaint#729",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesPaint(int)",
    "snippet": "public Paint lookupSeriesPaint(int series){\n  Paint seriesPaint\u003dgetSeriesPaint(series);\n  if (seriesPaint \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesPaint) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      seriesPaint\u003dsupplier.getNextPaint();\n      setSeriesPaint(series,seriesPaint,false);\n    }\n  }\n  if (seriesPaint \u003d\u003d null) {\n    seriesPaint\u003dthis.basePaint;\n  }\n  return seriesPaint;\n}",
    "begin_line": 729,
    "end_line": 745,
    "comment": "/** \n * Returns the paint used to fill an item drawn by the renderer.\n * @param series  the series index (zero-based).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesPaint#756",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesPaint(int)",
    "snippet": "public Paint getSeriesPaint(int series){\n  return this.paintList.getPaint(series);\n}",
    "begin_line": 756,
    "end_line": 758,
    "comment": "/** \n * Returns the paint used to fill an item drawn by the renderer.\n * @param series  the series index (zero-based).\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesPaint#769",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesPaint(int, java.awt.Paint)",
    "snippet": "public void setSeriesPaint(int series,Paint paint){\n  setSeriesPaint(series,paint,true);\n}",
    "begin_line": 769,
    "end_line": 771,
    "comment": "/** \n * Sets the paint used for a series and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param series  the series index (zero-based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesPaint#783",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesPaint(int, java.awt.Paint, boolean)",
    "snippet": "public void setSeriesPaint(int series,Paint paint,boolean notify){\n  this.paintList.setPaint(series,paint);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 783,
    "end_line": 788,
    "comment": "/** \n * Sets the paint used for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.clearSeriesPaints#798",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.clearSeriesPaints(boolean)",
    "snippet": "public void clearSeriesPaints(boolean notify){\n  this.paintList.clear();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 798,
    "end_line": 803,
    "comment": "/** \n * Clears the series paint settings for this renderer and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param notify  notify listeners?\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBasePaint#812",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBasePaint()",
    "snippet": "public Paint getBasePaint(){\n  return this.basePaint;\n}",
    "begin_line": 812,
    "end_line": 814,
    "comment": "/** \n * Returns the base paint.\n * @return The base paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBasePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBasePaint#824",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePaint(java.awt.Paint)",
    "snippet": "public void setBasePaint(Paint paint){\n  setBasePaint(paint,true);\n}",
    "begin_line": 824,
    "end_line": 827,
    "comment": "/** \n * Sets the base paint and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBasePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBasePaint#838",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePaint(java.awt.Paint, boolean)",
    "snippet": "public void setBasePaint(Paint paint,boolean notify){\n  this.basePaint\u003dpaint;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 838,
    "end_line": 843,
    "comment": "/** \n * Sets the base paint and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getBasePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesPaint#855",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesPaint()",
    "snippet": "public boolean getAutoPopulateSeriesPaint(){\n  return this.autoPopulateSeriesPaint;\n}",
    "begin_line": 855,
    "end_line": 857,
    "comment": "/** \n * Returns the flag that controls whether or not the series paint list is automatically populated when  {@link #lookupSeriesPaint(int)} is called.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesPaint(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesPaint#869",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesPaint(boolean)",
    "snippet": "public void setAutoPopulateSeriesPaint(boolean auto){\n  this.autoPopulateSeriesPaint\u003dauto;\n}",
    "begin_line": 869,
    "end_line": 871,
    "comment": "/** \n * Sets the flag that controls whether or not the series paint list is automatically populated when  {@link #lookupSeriesPaint(int)} is called.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemFillPaint#889",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemFillPaint(int, int, boolean)",
    "snippet": "public Paint getItemFillPaint(int row,int column,boolean selected){\n  return lookupSeriesFillPaint(row);\n}",
    "begin_line": 889,
    "end_line": 891,
    "comment": "/** \n * Returns the paint used to fill data items as they are drawn.  The default implementation passes control to the {@link #lookupSeriesFillPaint(int)} method - you can override thismethod if you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesFillPaint#902",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesFillPaint(int)",
    "snippet": "public Paint lookupSeriesFillPaint(int series){\n  Paint seriesFillPaint\u003dgetSeriesFillPaint(series);\n  if (seriesFillPaint \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesFillPaint) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      seriesFillPaint\u003dsupplier.getNextFillPaint();\n      setSeriesFillPaint(series,seriesFillPaint,false);\n    }\n  }\n  if (seriesFillPaint \u003d\u003d null) {\n    seriesFillPaint\u003dthis.baseFillPaint;\n  }\n  return seriesFillPaint;\n}",
    "begin_line": 902,
    "end_line": 918,
    "comment": "/** \n * Returns the paint used to fill an item drawn by the renderer.\n * @param series  the series (zero-based index).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesFillPaint#929",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesFillPaint(int)",
    "snippet": "public Paint getSeriesFillPaint(int series){\n  return this.fillPaintList.getPaint(series);\n}",
    "begin_line": 929,
    "end_line": 931,
    "comment": "/** \n * Returns the paint used to fill an item drawn by the renderer.\n * @param series  the series (zero-based index).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesFillPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesFillPaint#942",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint(int, java.awt.Paint)",
    "snippet": "public void setSeriesFillPaint(int series,Paint paint){\n  setSeriesFillPaint(series,paint,true);\n}",
    "begin_line": 942,
    "end_line": 944,
    "comment": "/** \n * Sets the paint used for a series fill and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesFillPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesFillPaint#956",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint(int, java.awt.Paint, boolean)",
    "snippet": "public void setSeriesFillPaint(int series,Paint paint,boolean notify){\n  this.fillPaintList.setPaint(series,paint);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 956,
    "end_line": 961,
    "comment": "/** \n * Sets the paint used to fill a series and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesFillPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseFillPaint#970",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseFillPaint()",
    "snippet": "public Paint getBaseFillPaint(){\n  return this.baseFillPaint;\n}",
    "begin_line": 970,
    "end_line": 972,
    "comment": "/** \n * Returns the base fill paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseFillPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseFillPaint#982",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseFillPaint(java.awt.Paint)",
    "snippet": "public void setBaseFillPaint(Paint paint){\n  setBaseFillPaint(paint,true);\n}",
    "begin_line": 982,
    "end_line": 985,
    "comment": "/** \n * Sets the base fill paint and sends a  {@link RendererChangeEvent} toall registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseFillPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseFillPaint#996",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseFillPaint(java.awt.Paint, boolean)",
    "snippet": "public void setBaseFillPaint(Paint paint,boolean notify){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baseFillPaint\u003dpaint;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 996,
    "end_line": 1004,
    "comment": "/** \n * Sets the base fill paint and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getBaseFillPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesFillPaint#1017",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesFillPaint()",
    "snippet": "public boolean getAutoPopulateSeriesFillPaint(){\n  return this.autoPopulateSeriesFillPaint;\n}",
    "begin_line": 1017,
    "end_line": 1019,
    "comment": "/** \n * Returns the flag that controls whether or not the series fill paint list is automatically populated when  {@link #lookupSeriesFillPaint(int)} iscalled.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesFillPaint(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesFillPaint#1032",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesFillPaint(boolean)",
    "snippet": "public void setAutoPopulateSeriesFillPaint(boolean auto){\n  this.autoPopulateSeriesFillPaint\u003dauto;\n}",
    "begin_line": 1032,
    "end_line": 1034,
    "comment": "/** \n * Sets the flag that controls whether or not the series fill paint list is automatically populated when  {@link #lookupSeriesFillPaint(int)} iscalled.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesFillPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemOutlinePaint#1052",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemOutlinePaint(int, int, boolean)",
    "snippet": "public Paint getItemOutlinePaint(int row,int column,boolean selected){\n  return lookupSeriesOutlinePaint(row);\n}",
    "begin_line": 1052,
    "end_line": 1054,
    "comment": "/** \n * Returns the paint used to outline data items as they are drawn.  The default implementation passes control to the {@link #lookupSeriesOutlinePaint(int)} method.  You can override thismethod if you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesOutlinePaint#1065",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlinePaint(int)",
    "snippet": "public Paint lookupSeriesOutlinePaint(int series){\n  Paint seriesOutlinePaint\u003dgetSeriesOutlinePaint(series);\n  if (seriesOutlinePaint \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesOutlinePaint) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      seriesOutlinePaint\u003dsupplier.getNextOutlinePaint();\n      setSeriesOutlinePaint(series,seriesOutlinePaint,false);\n    }\n  }\n  if (seriesOutlinePaint \u003d\u003d null) {\n    seriesOutlinePaint\u003dthis.baseOutlinePaint;\n  }\n  return seriesOutlinePaint;\n}",
    "begin_line": 1065,
    "end_line": 1081,
    "comment": "/** \n * Returns the paint used to outline an item drawn by the renderer.\n * @param series  the series (zero-based index).\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesOutlinePaint#1092",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesOutlinePaint(int)",
    "snippet": "public Paint getSeriesOutlinePaint(int series){\n  return this.outlinePaintList.getPaint(series);\n}",
    "begin_line": 1092,
    "end_line": 1094,
    "comment": "/** \n * Returns the paint used to outline an item drawn by the renderer.\n * @param series  the series (zero-based index).\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesOutlinePaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesOutlinePaint#1105",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint(int, java.awt.Paint)",
    "snippet": "public void setSeriesOutlinePaint(int series,Paint paint){\n  setSeriesOutlinePaint(series,paint,true);\n}",
    "begin_line": 1105,
    "end_line": 1107,
    "comment": "/** \n * Sets the paint used for a series outline and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesOutlinePaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesOutlinePaint#1119",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint(int, java.awt.Paint, boolean)",
    "snippet": "public void setSeriesOutlinePaint(int series,Paint paint,boolean notify){\n  this.outlinePaintList.setPaint(series,paint);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1119,
    "end_line": 1124,
    "comment": "/** \n * Sets the paint used to draw the outline for a series and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesOutlinePaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseOutlinePaint#1133",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseOutlinePaint()",
    "snippet": "public Paint getBaseOutlinePaint(){\n  return this.baseOutlinePaint;\n}",
    "begin_line": 1133,
    "end_line": 1135,
    "comment": "/** \n * Returns the base outline paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseOutlinePaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseOutlinePaint#1145",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseOutlinePaint(java.awt.Paint)",
    "snippet": "public void setBaseOutlinePaint(Paint paint){\n  setBaseOutlinePaint(paint,true);\n}",
    "begin_line": 1145,
    "end_line": 1148,
    "comment": "/** \n * Sets the base outline paint and sends a  {@link RendererChangeEvent} toall registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseOutlinePaint#1159",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseOutlinePaint(java.awt.Paint, boolean)",
    "snippet": "public void setBaseOutlinePaint(Paint paint,boolean notify){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baseOutlinePaint\u003dpaint;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1159,
    "end_line": 1167,
    "comment": "/** \n * Sets the base outline paint and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getBaseOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesOutlinePaint#1180",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlinePaint()",
    "snippet": "public boolean getAutoPopulateSeriesOutlinePaint(){\n  return this.autoPopulateSeriesOutlinePaint;\n}",
    "begin_line": 1180,
    "end_line": 1182,
    "comment": "/** \n * Returns the flag that controls whether or not the series outline paint list is automatically populated when {@link #lookupSeriesOutlinePaint(int)} is called.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesOutlinePaint(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesOutlinePaint#1195",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesOutlinePaint(boolean)",
    "snippet": "public void setAutoPopulateSeriesOutlinePaint(boolean auto){\n  this.autoPopulateSeriesOutlinePaint\u003dauto;\n}",
    "begin_line": 1195,
    "end_line": 1197,
    "comment": "/** \n * Sets the flag that controls whether or not the series outline paint list is automatically populated when  {@link #lookupSeriesOutlinePaint(int)}is called.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemStroke#1214",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemStroke(int, int, boolean)",
    "snippet": "public Stroke getItemStroke(int row,int column,boolean selected){\n  return lookupSeriesStroke(row);\n}",
    "begin_line": 1214,
    "end_line": 1216,
    "comment": "/** \n * Returns the stroke used to draw data items. The default implementation passes control to the  {@link #lookupSeriesStroke(int)} method.You can override this method if you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesStroke#1227",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesStroke(int)",
    "snippet": "public Stroke lookupSeriesStroke(int series){\n  Stroke result\u003dgetSeriesStroke(series);\n  if (result \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesStroke) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      result\u003dsupplier.getNextStroke();\n      setSeriesStroke(series,result,false);\n    }\n  }\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseStroke;\n  }\n  return result;\n}",
    "begin_line": 1227,
    "end_line": 1243,
    "comment": "/** \n * Returns the stroke used to draw the items in a series.\n * @param series  the series (zero-based index).\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesStroke#1254",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesStroke(int)",
    "snippet": "public Stroke getSeriesStroke(int series){\n  return this.strokeList.getStroke(series);\n}",
    "begin_line": 1254,
    "end_line": 1256,
    "comment": "/** \n * Returns the stroke used to draw the items in a series.\n * @param series  the series (zero-based index).\n * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesStroke(int,Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesStroke#1267",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke(int, java.awt.Stroke)",
    "snippet": "public void setSeriesStroke(int series,Stroke stroke){\n  setSeriesStroke(series,stroke,true);\n}",
    "begin_line": 1267,
    "end_line": 1269,
    "comment": "/** \n * Sets the stroke used for a series and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param series  the series index (zero-based).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesStroke(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesStroke#1281",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke(int, java.awt.Stroke, boolean)",
    "snippet": "public void setSeriesStroke(int series,Stroke stroke,boolean notify){\n  this.strokeList.setStroke(series,stroke);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1281,
    "end_line": 1286,
    "comment": "/** \n * Sets the stroke for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesStroke(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.clearSeriesStrokes#1296",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.clearSeriesStrokes(boolean)",
    "snippet": "public void clearSeriesStrokes(boolean notify){\n  this.strokeList.clear();\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1296,
    "end_line": 1301,
    "comment": "/** \n * Clears the series stroke settings for this renderer and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param notify  notify listeners?\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseStroke#1310",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseStroke()",
    "snippet": "public Stroke getBaseStroke(){\n  return this.baseStroke;\n}",
    "begin_line": 1310,
    "end_line": 1312,
    "comment": "/** \n * Returns the base stroke.\n * @return The base stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseStroke#1322",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseStroke(java.awt.Stroke)",
    "snippet": "public void setBaseStroke(Stroke stroke){\n  setBaseStroke(stroke,true);\n}",
    "begin_line": 1322,
    "end_line": 1325,
    "comment": "/** \n * Sets the base stroke and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseStroke#1336",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseStroke(java.awt.Stroke, boolean)",
    "snippet": "public void setBaseStroke(Stroke stroke,boolean notify){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.baseStroke\u003dstroke;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1336,
    "end_line": 1344,
    "comment": "/** \n * Sets the base stroke and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getBaseStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesStroke#1356",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesStroke()",
    "snippet": "public boolean getAutoPopulateSeriesStroke(){\n  return this.autoPopulateSeriesStroke;\n}",
    "begin_line": 1356,
    "end_line": 1358,
    "comment": "/** \n * Returns the flag that controls whether or not the series stroke list is automatically populated when  {@link #lookupSeriesStroke(int)} is called.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesStroke(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesStroke#1370",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesStroke(boolean)",
    "snippet": "public void setAutoPopulateSeriesStroke(boolean auto){\n  this.autoPopulateSeriesStroke\u003dauto;\n}",
    "begin_line": 1370,
    "end_line": 1372,
    "comment": "/** \n * Sets the flag that controls whether or not the series stroke list is automatically populated when  {@link #lookupSeriesStroke(int)} is called.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemOutlineStroke#1390",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemOutlineStroke(int, int, boolean)",
    "snippet": "public Stroke getItemOutlineStroke(int row,int column,boolean selected){\n  return lookupSeriesOutlineStroke(row);\n}",
    "begin_line": 1390,
    "end_line": 1392,
    "comment": "/** \n * Returns the stroke used to outline data items.  The default implementation passes control to the {@link #lookupSeriesOutlineStroke(int)} method. You can override thismethod if you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesOutlineStroke#1403",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlineStroke(int)",
    "snippet": "public Stroke lookupSeriesOutlineStroke(int series){\n  Stroke result\u003dgetSeriesOutlineStroke(series);\n  if (result \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesOutlineStroke) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      result\u003dsupplier.getNextOutlineStroke();\n      setSeriesOutlineStroke(series,result,false);\n    }\n  }\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseOutlineStroke;\n  }\n  return result;\n}",
    "begin_line": 1403,
    "end_line": 1419,
    "comment": "/** \n * Returns the stroke used to outline the items in a series.\n * @param series  the series (zero-based index).\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesOutlineStroke#1430",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesOutlineStroke(int)",
    "snippet": "public Stroke getSeriesOutlineStroke(int series){\n  return this.outlineStrokeList.getStroke(series);\n}",
    "begin_line": 1430,
    "end_line": 1432,
    "comment": "/** \n * Returns the stroke used to outline the items in a series.\n * @param series  the series (zero-based index).\n * @return The stroke (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesOutlineStroke(int,Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesOutlineStroke#1443",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke(int, java.awt.Stroke)",
    "snippet": "public void setSeriesOutlineStroke(int series,Stroke stroke){\n  setSeriesOutlineStroke(series,stroke,true);\n}",
    "begin_line": 1443,
    "end_line": 1445,
    "comment": "/** \n * Sets the outline stroke used for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesOutlineStroke(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesOutlineStroke#1457",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke(int, java.awt.Stroke, boolean)",
    "snippet": "public void setSeriesOutlineStroke(int series,Stroke stroke,boolean notify){\n  this.outlineStrokeList.setStroke(series,stroke);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1457,
    "end_line": 1463,
    "comment": "/** \n * Sets the outline stroke for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesOutlineStroke(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseOutlineStroke#1472",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseOutlineStroke()",
    "snippet": "public Stroke getBaseOutlineStroke(){\n  return this.baseOutlineStroke;\n}",
    "begin_line": 1472,
    "end_line": 1474,
    "comment": "/** \n * Returns the base outline stroke.\n * @return The stroke (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseOutlineStroke(Stroke)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseOutlineStroke#1484",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseOutlineStroke(java.awt.Stroke)",
    "snippet": "public void setBaseOutlineStroke(Stroke stroke){\n  setBaseOutlineStroke(stroke,true);\n}",
    "begin_line": 1484,
    "end_line": 1486,
    "comment": "/** \n * Sets the base outline stroke and sends a  {@link RendererChangeEvent} toall registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseOutlineStroke#1498",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseOutlineStroke(java.awt.Stroke, boolean)",
    "snippet": "public void setBaseOutlineStroke(Stroke stroke,boolean notify){\n  if (stroke \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027stroke\u0027 argument.\");\n  }\n  this.baseOutlineStroke\u003dstroke;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1498,
    "end_line": 1506,
    "comment": "/** \n * Sets the base outline stroke and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getBaseOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesOutlineStroke#1519",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlineStroke()",
    "snippet": "public boolean getAutoPopulateSeriesOutlineStroke(){\n  return this.autoPopulateSeriesOutlineStroke;\n}",
    "begin_line": 1519,
    "end_line": 1521,
    "comment": "/** \n * Returns the flag that controls whether or not the series outline stroke list is automatically populated when {@link #lookupSeriesOutlineStroke(int)} is called.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesOutlineStroke(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesOutlineStroke#1534",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesOutlineStroke(boolean)",
    "snippet": "public void setAutoPopulateSeriesOutlineStroke(boolean auto){\n  this.autoPopulateSeriesOutlineStroke\u003dauto;\n}",
    "begin_line": 1534,
    "end_line": 1536,
    "comment": "/** \n * Sets the flag that controls whether or not the series outline stroke list is automatically populated when  {@link #lookupSeriesOutlineStroke(int)}is called.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesOutlineStroke()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemShape#1554",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemShape(int, int, boolean)",
    "snippet": "public Shape getItemShape(int row,int column,boolean selected){\n  return lookupSeriesShape(row);\n}",
    "begin_line": 1554,
    "end_line": 1556,
    "comment": "/** \n * Returns a shape used to represent a data item. The default implementation passes control to the  {@link #lookupSeriesShape(int)}method.  You can override this method if you require different behaviour.\n * @param row  the row (or series) index (zero-based).\n * @param column  the column (or category) index (zero-based).\n * @param selected  is the item selected?\n * @return The shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupSeriesShape#1567",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesShape(int)",
    "snippet": "public Shape lookupSeriesShape(int series){\n  Shape result\u003dgetSeriesShape(series);\n  if (result \u003d\u003d null \u0026\u0026 this.autoPopulateSeriesShape) {\n    DrawingSupplier supplier\u003dgetDrawingSupplier();\n    if (supplier !\u003d null) {\n      result\u003dsupplier.getNextShape();\n      setSeriesShape(series,result,false);\n    }\n  }\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseShape;\n  }\n  return result;\n}",
    "begin_line": 1567,
    "end_line": 1583,
    "comment": "/** \n * Returns a shape used to represent the items in a series.\n * @param series  the series (zero-based index).\n * @return The shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesShape#1594",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesShape(int)",
    "snippet": "public Shape getSeriesShape(int series){\n  return this.shapeList.getShape(series);\n}",
    "begin_line": 1594,
    "end_line": 1596,
    "comment": "/** \n * Returns a shape used to represent the items in a series.\n * @param series  the series (zero-based index).\n * @return The shape (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesShape(int,Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesShape#1607",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesShape(int, java.awt.Shape)",
    "snippet": "public void setSeriesShape(int series,Shape shape){\n  setSeriesShape(series,shape,true);\n}",
    "begin_line": 1607,
    "end_line": 1609,
    "comment": "/** \n * Sets the shape used for a series and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param series  the series index (zero-based).\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesShape(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesShape#1621",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesShape(int, java.awt.Shape, boolean)",
    "snippet": "public void setSeriesShape(int series,Shape shape,boolean notify){\n  this.shapeList.setShape(series,shape);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1621,
    "end_line": 1626,
    "comment": "/** \n * Sets the shape for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesShape(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseShape#1635",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseShape()",
    "snippet": "public Shape getBaseShape(){\n  return this.baseShape;\n}",
    "begin_line": 1635,
    "end_line": 1637,
    "comment": "/** \n * Returns the base shape.\n * @return The shape (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseShape(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseShape#1647",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseShape(java.awt.Shape)",
    "snippet": "public void setBaseShape(Shape shape){\n  setBaseShape(shape,true);\n}",
    "begin_line": 1647,
    "end_line": 1650,
    "comment": "/** \n * Sets the base shape and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseShape()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseShape#1661",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseShape(java.awt.Shape, boolean)",
    "snippet": "public void setBaseShape(Shape shape,boolean notify){\n  if (shape \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027shape\u0027 argument.\");\n  }\n  this.baseShape\u003dshape;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1661,
    "end_line": 1669,
    "comment": "/** \n * Sets the base shape and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify listeners?\n * @see #getBaseShape()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getAutoPopulateSeriesShape#1681",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesShape()",
    "snippet": "public boolean getAutoPopulateSeriesShape(){\n  return this.autoPopulateSeriesShape;\n}",
    "begin_line": 1681,
    "end_line": 1683,
    "comment": "/** \n * Returns the flag that controls whether or not the series shape list is automatically populated when  {@link #lookupSeriesShape(int)} is called.\n * @return A boolean.\n * @since 1.0.6\n * @see #setAutoPopulateSeriesShape(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setAutoPopulateSeriesShape#1695",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesShape(boolean)",
    "snippet": "public void setAutoPopulateSeriesShape(boolean auto){\n  this.autoPopulateSeriesShape\u003dauto;\n}",
    "begin_line": 1695,
    "end_line": 1697,
    "comment": "/** \n * Sets the flag that controls whether or not the series shape list is automatically populated when  {@link #lookupSeriesShape(int)} is called.\n * @param auto  the new flag value.\n * @since 1.0.6\n * @see #getAutoPopulateSeriesShape()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.isItemLabelVisible#1713",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.isItemLabelVisible(int, int, boolean)",
    "snippet": "public boolean isItemLabelVisible(int row,int column,boolean selected){\n  return isSeriesItemLabelsVisible(row);\n}",
    "begin_line": 1713,
    "end_line": 1715,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if an item label is visible, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n * @param selected  is the item selected?\n * @return A boolean.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.isSeriesItemLabelsVisible#1725",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesItemLabelsVisible(int)",
    "snippet": "public boolean isSeriesItemLabelsVisible(int series){\n  Boolean b\u003dthis.itemLabelsVisibleList.getBoolean(series);\n  if (b !\u003d null) {\n    return b.booleanValue();\n  }\n  return this.baseItemLabelsVisible;\n}",
    "begin_line": 1725,
    "end_line": 1731,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the item labels for a series are visible, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param series  the series index (zero-based).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesItemLabelsVisible#1745",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesItemLabelsVisible(int)",
    "snippet": "public Boolean getSeriesItemLabelsVisible(int series){\n  return this.itemLabelsVisibleList.getBoolean(series);\n}",
    "begin_line": 1745,
    "end_line": 1747,
    "comment": "/** \n * Returns a flag that controls whether or not item labels are displayed for the data items in the specified series.\n * @param series  the series index.\n * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n * @see #isSeriesItemLabelsVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelsVisible#1756",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible(int, boolean)",
    "snippet": "public void setSeriesItemLabelsVisible(int series,boolean visible){\n  setSeriesItemLabelsVisible(series,Boolean.valueOf(visible));\n}",
    "begin_line": 1756,
    "end_line": 1758,
    "comment": "/** \n * Sets a flag that controls the visibility of the item labels for a series, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelsVisible#1767",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible(int, java.lang.Boolean)",
    "snippet": "public void setSeriesItemLabelsVisible(int series,Boolean visible){\n  setSeriesItemLabelsVisible(series,visible,true);\n}",
    "begin_line": 1767,
    "end_line": 1769,
    "comment": "/** \n * Sets the visibility of the item labels for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelsVisible#1780",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible(int, java.lang.Boolean, boolean)",
    "snippet": "public void setSeriesItemLabelsVisible(int series,Boolean visible,boolean notify){\n  this.itemLabelsVisibleList.setBoolean(series,visible);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1780,
    "end_line": 1786,
    "comment": "/** \n * Sets the visibility of item labels for a series and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the visible flag.\n * @param notify  a flag that controls whether or not listeners arenotified.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseItemLabelsVisible#1796",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseItemLabelsVisible()",
    "snippet": "public boolean getBaseItemLabelsVisible(){\n  return this.baseItemLabelsVisible;\n}",
    "begin_line": 1796,
    "end_line": 1798,
    "comment": "/** \n * Returns the base setting for item label visibility.  A \u003ccode\u003enull\u003c/code\u003e result should be interpreted as equivalent to \u003ccode\u003eBoolean.FALSE\u003c/code\u003e.\n * @return A flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseItemLabelsVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelsVisible#1808",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelsVisible(boolean)",
    "snippet": "public void setBaseItemLabelsVisible(boolean visible){\n  setBaseItemLabelsVisible(visible,true);\n}",
    "begin_line": 1808,
    "end_line": 1810,
    "comment": "/** \n * Sets the base flag that controls whether or not item labels are visible, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @see #getBaseItemLabelsVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelsVisible#1821",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelsVisible(boolean, boolean)",
    "snippet": "public void setBaseItemLabelsVisible(boolean visible,boolean notify){\n  this.baseItemLabelsVisible\u003dvisible;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1821,
    "end_line": 1826,
    "comment": "/** \n * Sets the base visibility for item labels and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param visible  the flag.\n * @param notify  notify listeners?\n * @see #getBaseItemLabelsVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemLabelFont#1841",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont(int, int, boolean)",
    "snippet": "public Font getItemLabelFont(int row,int column,boolean selected){\n  Font result\u003dgetSeriesItemLabelFont(row);\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseItemLabelFont;\n  }\n  return result;\n}",
    "begin_line": 1841,
    "end_line": 1847,
    "comment": "/** \n * Returns the font for an item label.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n * @param selected  is the item selected?\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesItemLabelFont#1858",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesItemLabelFont(int)",
    "snippet": "public Font getSeriesItemLabelFont(int series){\n  return (Font)this.itemLabelFontList.get(series);\n}",
    "begin_line": 1858,
    "end_line": 1860,
    "comment": "/** \n * Returns the font for all the item labels in a series.\n * @param series  the series index (zero-based).\n * @return The font (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesItemLabelFont(int,Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelFont#1871",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont(int, java.awt.Font)",
    "snippet": "public void setSeriesItemLabelFont(int series,Font font){\n  setSeriesItemLabelFont(series,font,true);\n}",
    "begin_line": 1871,
    "end_line": 1873,
    "comment": "/** \n * Sets the item label font for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesItemLabelFont(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelFont#1886",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont(int, java.awt.Font, boolean)",
    "snippet": "public void setSeriesItemLabelFont(int series,Font font,boolean notify){\n  this.itemLabelFontList.set(series,font);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1886,
    "end_line": 1891,
    "comment": "/** \n * Sets the item label font for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getSeriesItemLabelFont(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseItemLabelFont#1901",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseItemLabelFont()",
    "snippet": "public Font getBaseItemLabelFont(){\n  return this.baseItemLabelFont;\n}",
    "begin_line": 1901,
    "end_line": 1903,
    "comment": "/** \n * Returns the base item label font (this is used when no other font setting is available).\n * @return The font (\u003ccode\u003enever\u003c/code\u003e null).\n * @see #setBaseItemLabelFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelFont#1913",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelFont(java.awt.Font)",
    "snippet": "public void setBaseItemLabelFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  setBaseItemLabelFont(font,true);\n}",
    "begin_line": 1913,
    "end_line": 1918,
    "comment": "/** \n * Sets the base item label font and sends a  {@link RendererChangeEvent} toall registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseItemLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelFont#1930",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelFont(java.awt.Font, boolean)",
    "snippet": "public void setBaseItemLabelFont(Font font,boolean notify){\n  this.baseItemLabelFont\u003dfont;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1930,
    "end_line": 1935,
    "comment": "/** \n * Sets the base item label font and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getBaseItemLabelFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemLabelPaint#1950",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemLabelPaint(int, int, boolean)",
    "snippet": "public Paint getItemLabelPaint(int row,int column,boolean selected){\n  Paint result\u003dgetSeriesItemLabelPaint(row);\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseItemLabelPaint;\n  }\n  return result;\n}",
    "begin_line": 1950,
    "end_line": 1956,
    "comment": "/** \n * Returns the paint used to draw an item label.\n * @param row  the row index (zero based).\n * @param column  the column index (zero based).\n * @param selected  is the item selected?\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesItemLabelPaint#1967",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesItemLabelPaint(int)",
    "snippet": "public Paint getSeriesItemLabelPaint(int series){\n  return this.itemLabelPaintList.getPaint(series);\n}",
    "begin_line": 1967,
    "end_line": 1969,
    "comment": "/** \n * Returns the paint used to draw the item labels for a series.\n * @param series  the series index (zero based).\n * @return The paint (possibly \u003ccode\u003enull\u003ccode\u003e).\n * @see #setSeriesItemLabelPaint(int,Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelPaint#1980",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint(int, java.awt.Paint)",
    "snippet": "public void setSeriesItemLabelPaint(int series,Paint paint){\n  setSeriesItemLabelPaint(series,paint,true);\n}",
    "begin_line": 1980,
    "end_line": 1982,
    "comment": "/** \n * Sets the item label paint for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series (zero based index).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesItemLabelPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesItemLabelPaint#1995",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint(int, java.awt.Paint, boolean)",
    "snippet": "public void setSeriesItemLabelPaint(int series,Paint paint,boolean notify){\n  this.itemLabelPaintList.setPaint(series,paint);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 1995,
    "end_line": 2001,
    "comment": "/** \n * Sets the item label paint for a series and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getSeriesItemLabelPaint(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseItemLabelPaint#2010",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseItemLabelPaint()",
    "snippet": "public Paint getBaseItemLabelPaint(){\n  return this.baseItemLabelPaint;\n}",
    "begin_line": 2010,
    "end_line": 2012,
    "comment": "/** \n * Returns the base item label paint.\n * @return The paint (never \u003ccode\u003enull\u003ccode\u003e).\n * @see #setBaseItemLabelPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelPaint#2022",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelPaint(java.awt.Paint)",
    "snippet": "public void setBaseItemLabelPaint(Paint paint){\n  setBaseItemLabelPaint(paint,true);\n}",
    "begin_line": 2022,
    "end_line": 2025,
    "comment": "/** \n * Sets the base item label paint and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseItemLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseItemLabelPaint#2037",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelPaint(java.awt.Paint, boolean)",
    "snippet": "public void setBaseItemLabelPaint(Paint paint,boolean notify){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.baseItemLabelPaint\u003dpaint;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2037,
    "end_line": 2045,
    "comment": "/** \n * Sets the base item label paint and, if requested, sends a {@link RendererChangeEvent} to all registered listeners..\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether or not listeners arenotified.\n * @see #getBaseItemLabelPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getPositiveItemLabelPosition#2060",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getPositiveItemLabelPosition(int, int, boolean)",
    "snippet": "public ItemLabelPosition getPositiveItemLabelPosition(int row,int column,boolean selected){\n  return getSeriesPositiveItemLabelPosition(row);\n}",
    "begin_line": 2060,
    "end_line": 2063,
    "comment": "/** \n * Returns the item label position for positive values.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n * @param selected  is the item selected?\n * @return The item label position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #getNegativeItemLabelPosition(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesPositiveItemLabelPosition#2074",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesPositiveItemLabelPosition(int)",
    "snippet": "public ItemLabelPosition getSeriesPositiveItemLabelPosition(int series){\n  ItemLabelPosition position\u003d(ItemLabelPosition)this.positiveItemLabelPositionList.get(series);\n  if (position \u003d\u003d null) {\n    position\u003dthis.basePositiveItemLabelPosition;\n  }\n  return position;\n}",
    "begin_line": 2074,
    "end_line": 2086,
    "comment": "/** \n * Returns the item label position for all positive values in a series.\n * @param series  the series index (zero-based).\n * @return The item label position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesPositiveItemLabelPosition(int,ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesPositiveItemLabelPosition#2097",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setSeriesPositiveItemLabelPosition(int series,ItemLabelPosition position){\n  setSeriesPositiveItemLabelPosition(series,position,true);\n}",
    "begin_line": 2097,
    "end_line": 2100,
    "comment": "/** \n * Sets the item label position for all positive values in a series and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesPositiveItemLabelPosition(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesPositiveItemLabelPosition#2113",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition, boolean)",
    "snippet": "public void setSeriesPositiveItemLabelPosition(int series,ItemLabelPosition position,boolean notify){\n  this.positiveItemLabelPositionList.set(series,position);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2113,
    "end_line": 2120,
    "comment": "/** \n * Sets the item label position for all positive values in a series and (if requested) sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index (zero-based).\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify registered listeners?\n * @see #getSeriesPositiveItemLabelPosition(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBasePositiveItemLabelPosition#2129",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBasePositiveItemLabelPosition()",
    "snippet": "public ItemLabelPosition getBasePositiveItemLabelPosition(){\n  return this.basePositiveItemLabelPosition;\n}",
    "begin_line": 2129,
    "end_line": 2131,
    "comment": "/** \n * Returns the base positive item label position.\n * @return The position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBasePositiveItemLabelPosition(ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBasePositiveItemLabelPosition#2140",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setBasePositiveItemLabelPosition(ItemLabelPosition position){\n  setBasePositiveItemLabelPosition(position,true);\n}",
    "begin_line": 2140,
    "end_line": 2143,
    "comment": "/** \n * Sets the base positive item label position.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBasePositiveItemLabelPosition()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBasePositiveItemLabelPosition#2154",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)",
    "snippet": "public void setBasePositiveItemLabelPosition(ItemLabelPosition position,boolean notify){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  this.basePositiveItemLabelPosition\u003dposition;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2154,
    "end_line": 2163,
    "comment": "/** \n * Sets the base positive item label position and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify registered listeners?\n * @see #getBasePositiveItemLabelPosition()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getNegativeItemLabelPosition#2182",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getNegativeItemLabelPosition(int, int, boolean)",
    "snippet": "public ItemLabelPosition getNegativeItemLabelPosition(int row,int column,boolean selected){\n  return getSeriesNegativeItemLabelPosition(row);\n}",
    "begin_line": 2182,
    "end_line": 2185,
    "comment": "/** \n * Returns the item label position for negative values.  This method can be overridden to provide customisation of the item label position for individual data items.\n * @param row  the row index (zero-based).\n * @param column  the column (zero-based).\n * @param selected  is the item selected?\n * @return The item label position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #getPositiveItemLabelPosition(int,int,selected)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesNegativeItemLabelPosition#2196",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesNegativeItemLabelPosition(int)",
    "snippet": "public ItemLabelPosition getSeriesNegativeItemLabelPosition(int series){\n  ItemLabelPosition position\u003d(ItemLabelPosition)this.negativeItemLabelPositionList.get(series);\n  if (position \u003d\u003d null) {\n    position\u003dthis.baseNegativeItemLabelPosition;\n  }\n  return position;\n}",
    "begin_line": 2196,
    "end_line": 2206,
    "comment": "/** \n * Returns the item label position for all negative values in a series.\n * @param series  the series index (zero-based).\n * @return The item label position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesNegativeItemLabelPosition(int,ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesNegativeItemLabelPosition#2217",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setSeriesNegativeItemLabelPosition(int series,ItemLabelPosition position){\n  setSeriesNegativeItemLabelPosition(series,position,true);\n}",
    "begin_line": 2217,
    "end_line": 2220,
    "comment": "/** \n * Sets the item label position for negative values in a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesNegativeItemLabelPosition(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesNegativeItemLabelPosition#2233",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition, boolean)",
    "snippet": "public void setSeriesNegativeItemLabelPosition(int series,ItemLabelPosition position,boolean notify){\n  this.negativeItemLabelPositionList.set(series,position);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2233,
    "end_line": 2240,
    "comment": "/** \n * Sets the item label position for negative values in a series and (if requested) sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index (zero-based).\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify registered listeners?\n * @see #getSeriesNegativeItemLabelPosition(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseNegativeItemLabelPosition#2249",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseNegativeItemLabelPosition()",
    "snippet": "public ItemLabelPosition getBaseNegativeItemLabelPosition(){\n  return this.baseNegativeItemLabelPosition;\n}",
    "begin_line": 2249,
    "end_line": 2251,
    "comment": "/** \n * Returns the base item label position for negative values.\n * @return The position (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseNegativeItemLabelPosition(ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseNegativeItemLabelPosition#2261",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setBaseNegativeItemLabelPosition(ItemLabelPosition position){\n  setBaseNegativeItemLabelPosition(position,true);\n}",
    "begin_line": 2261,
    "end_line": 2263,
    "comment": "/** \n * Sets the base item label position for negative values and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBaseNegativeItemLabelPosition()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseNegativeItemLabelPosition#2274",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)",
    "snippet": "public void setBaseNegativeItemLabelPosition(ItemLabelPosition position,boolean notify){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  this.baseNegativeItemLabelPosition\u003dposition;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2274,
    "end_line": 2283,
    "comment": "/** \n * Sets the base negative item label position and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  notify registered listeners?\n * @see #getBaseNegativeItemLabelPosition()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemLabelAnchorOffset#2292",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset()",
    "snippet": "public double getItemLabelAnchorOffset(){\n  return this.itemLabelAnchorOffset;\n}",
    "begin_line": 2292,
    "end_line": 2294,
    "comment": "/** \n * Returns the item label anchor offset.\n * @return The offset.\n * @see #setItemLabelAnchorOffset(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setItemLabelAnchorOffset#2303",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setItemLabelAnchorOffset(double)",
    "snippet": "public void setItemLabelAnchorOffset(double offset){\n  this.itemLabelAnchorOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 2303,
    "end_line": 2306,
    "comment": "/** \n * Sets the item label anchor offset.\n * @param offset  the offset.\n * @see #getItemLabelAnchorOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getItemCreateEntity#2320",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemCreateEntity(int, int, boolean)",
    "snippet": "public boolean getItemCreateEntity(int series,int item,boolean selected){\n  Boolean b\u003dgetSeriesCreateEntities(series);\n  if (b !\u003d null) {\n    return b.booleanValue();\n  }\n else {\n    return this.baseCreateEntities;\n  }\n}",
    "begin_line": 2320,
    "end_line": 2328,
    "comment": "/** \n * Returns a boolean that indicates whether or not the specified item should have a chart entity created for it.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  is the item selected?\n * @return A boolean.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getSeriesCreateEntities#2340",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getSeriesCreateEntities(int)",
    "snippet": "public Boolean getSeriesCreateEntities(int series){\n  return this.createEntitiesList.getBoolean(series);\n}",
    "begin_line": 2340,
    "end_line": 2342,
    "comment": "/** \n * Returns the flag that controls whether entities are created for a series.\n * @param series  the series index (zero-based).\n * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesCreateEntities(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesCreateEntities#2353",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities(int, java.lang.Boolean)",
    "snippet": "public void setSeriesCreateEntities(int series,Boolean create){\n  setSeriesCreateEntities(series,create,true);\n}",
    "begin_line": 2353,
    "end_line": 2355,
    "comment": "/** \n * Sets the flag that controls whether entities are created for a series, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param create  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesCreateEntities(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setSeriesCreateEntities#2368",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities(int, java.lang.Boolean, boolean)",
    "snippet": "public void setSeriesCreateEntities(int series,Boolean create,boolean notify){\n  this.createEntitiesList.setBoolean(series,create);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2368,
    "end_line": 2374,
    "comment": "/** \n * Sets the flag that controls whether entities are created for a series and, if requested, sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index.\n * @param create  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesCreateEntities(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseCreateEntities#2383",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseCreateEntities()",
    "snippet": "public boolean getBaseCreateEntities(){\n  return this.baseCreateEntities;\n}",
    "begin_line": 2383,
    "end_line": 2385,
    "comment": "/** \n * Returns the base visibility for all series.\n * @return The base visibility.\n * @see #setBaseCreateEntities(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseCreateEntities#2396",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseCreateEntities(boolean)",
    "snippet": "public void setBaseCreateEntities(boolean create){\n  setBaseCreateEntities(create,true);\n}",
    "begin_line": 2396,
    "end_line": 2399,
    "comment": "/** \n * Sets the base flag that controls whether entities are created for a series, and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param create  the flag.\n * @see #getBaseCreateEntities()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseCreateEntities#2411",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseCreateEntities(boolean, boolean)",
    "snippet": "public void setBaseCreateEntities(boolean create,boolean notify){\n  this.baseCreateEntities\u003dcreate;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2411,
    "end_line": 2416,
    "comment": "/** \n * Sets the base flag that controls whether entities are created and, if requested, sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param create  the visibility.\n * @param notify  notify listeners?\n * @see #getBaseCreateEntities()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getDefaultEntityRadius#2426",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getDefaultEntityRadius()",
    "snippet": "public int getDefaultEntityRadius(){\n  return this.defaultEntityRadius;\n}",
    "begin_line": 2426,
    "end_line": 2428,
    "comment": "/** \n * Returns the radius of the circle used for the default entity area when no area is specified.\n * @return A radius.\n * @see #setDefaultEntityRadius(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setDefaultEntityRadius#2438",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setDefaultEntityRadius(int)",
    "snippet": "public void setDefaultEntityRadius(int radius){\n  this.defaultEntityRadius\u003dradius;\n}",
    "begin_line": 2438,
    "end_line": 2440,
    "comment": "/** \n * Sets the radius of the circle used for the default entity area when no area is specified.\n * @param radius  the radius.\n * @see #getDefaultEntityRadius()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupLegendShape#2451",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupLegendShape(int)",
    "snippet": "public Shape lookupLegendShape(int series){\n  Shape result\u003dgetLegendShape(series);\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseLegendShape;\n  }\n  if (result \u003d\u003d null) {\n    result\u003dlookupSeriesShape(series);\n  }\n  return result;\n}",
    "begin_line": 2451,
    "end_line": 2460,
    "comment": "/** \n * Performs a lookup for the legend shape.\n * @param series  the series index.\n * @return The shape (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getLegendShape#2474",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getLegendShape(int)",
    "snippet": "public Shape getLegendShape(int series){\n  return this.legendShapeList.getShape(series);\n}",
    "begin_line": 2474,
    "end_line": 2476,
    "comment": "/** \n * Returns the legend shape defined for the specified series (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @param series  the series index.\n * @return The shape (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #lookupLegendShape(int)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setLegendShape#2487",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setLegendShape(int, java.awt.Shape)",
    "snippet": "public void setLegendShape(int series,Shape shape){\n  this.legendShapeList.setShape(series,shape);\n  fireChangeEvent();\n}",
    "begin_line": 2487,
    "end_line": 2490,
    "comment": "/** \n * Sets the shape used for the legend item for the specified series, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseLegendShape#2499",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape()",
    "snippet": "public Shape getBaseLegendShape(){\n  return this.baseLegendShape;\n}",
    "begin_line": 2499,
    "end_line": 2501,
    "comment": "/** \n * Returns the default legend shape, which may be \u003ccode\u003enull\u003c/code\u003e.\n * @return The default legend shape.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseLegendShape#2511",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape(java.awt.Shape)",
    "snippet": "public void setBaseLegendShape(Shape shape){\n  this.baseLegendShape\u003dshape;\n  fireChangeEvent();\n}",
    "begin_line": 2511,
    "end_line": 2514,
    "comment": "/** \n * Sets the default legend shape and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param shape  the shape (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getTreatLegendShapeAsLine#2524",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getTreatLegendShapeAsLine()",
    "snippet": "protected boolean getTreatLegendShapeAsLine(){\n  return this.treatLegendShapeAsLine;\n}",
    "begin_line": 2524,
    "end_line": 2526,
    "comment": "/** \n * Returns the flag that controls whether or not the legend shape is treated as a line when creating legend items.\n * @return A boolean.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setTreatLegendShapeAsLine#2536",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setTreatLegendShapeAsLine(boolean)",
    "snippet": "protected void setTreatLegendShapeAsLine(boolean treatAsLine){\n  if (this.treatLegendShapeAsLine !\u003d treatAsLine) {\n    this.treatLegendShapeAsLine\u003dtreatAsLine;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 2536,
    "end_line": 2541,
    "comment": "/** \n * Sets the flag that controls whether or not the legend shape is treated as a line when creating legend items.\n * @param treatAsLine  the new flag value.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupLegendTextFont#2552",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupLegendTextFont(int)",
    "snippet": "public Font lookupLegendTextFont(int series){\n  Font result\u003dgetLegendTextFont(series);\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseLegendTextFont;\n  }\n  return result;\n}",
    "begin_line": 2552,
    "end_line": 2558,
    "comment": "/** \n * Performs a lookup for the legend text font.\n * @param series  the series index.\n * @return The font (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getLegendTextFont#2572",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getLegendTextFont(int)",
    "snippet": "public Font getLegendTextFont(int series){\n  return (Font)this.legendTextFont.get(series);\n}",
    "begin_line": 2572,
    "end_line": 2574,
    "comment": "/** \n * Returns the legend text font defined for the specified series (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @param series  the series index.\n * @return The font (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #lookupLegendTextFont(int)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setLegendTextFont#2585",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setLegendTextFont(int, java.awt.Font)",
    "snippet": "public void setLegendTextFont(int series,Font font){\n  this.legendTextFont.set(series,font);\n  fireChangeEvent();\n}",
    "begin_line": 2585,
    "end_line": 2588,
    "comment": "/** \n * Sets the font used for the legend text for the specified series, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseLegendTextFont#2597",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseLegendTextFont()",
    "snippet": "public Font getBaseLegendTextFont(){\n  return this.baseLegendTextFont;\n}",
    "begin_line": 2597,
    "end_line": 2599,
    "comment": "/** \n * Returns the default legend text font, which may be \u003ccode\u003enull\u003c/code\u003e.\n * @return The default legend text font.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseLegendTextFont#2609",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextFont(java.awt.Font)",
    "snippet": "public void setBaseLegendTextFont(Font font){\n  this.baseLegendTextFont\u003dfont;\n  fireChangeEvent();\n}",
    "begin_line": 2609,
    "end_line": 2612,
    "comment": "/** \n * Sets the default legend text font and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.lookupLegendTextPaint#2623",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupLegendTextPaint(int)",
    "snippet": "public Paint lookupLegendTextPaint(int series){\n  Paint result\u003dgetLegendTextPaint(series);\n  if (result \u003d\u003d null) {\n    result\u003dthis.baseLegendTextPaint;\n  }\n  return result;\n}",
    "begin_line": 2623,
    "end_line": 2629,
    "comment": "/** \n * Performs a lookup for the legend text paint.\n * @param series  the series index.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getLegendTextPaint#2643",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getLegendTextPaint(int)",
    "snippet": "public Paint getLegendTextPaint(int series){\n  return this.legendTextPaint.getPaint(series);\n}",
    "begin_line": 2643,
    "end_line": 2645,
    "comment": "/** \n * Returns the legend text paint defined for the specified series (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @param series  the series index.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #lookupLegendTextPaint(int)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setLegendTextPaint#2656",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setLegendTextPaint(int, java.awt.Paint)",
    "snippet": "public void setLegendTextPaint(int series,Paint paint){\n  this.legendTextPaint.setPaint(series,paint);\n  fireChangeEvent();\n}",
    "begin_line": 2656,
    "end_line": 2659,
    "comment": "/** \n * Sets the paint used for the legend text for the specified series, and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getBaseLegendTextPaint#2668",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getBaseLegendTextPaint()",
    "snippet": "public Paint getBaseLegendTextPaint(){\n  return this.baseLegendTextPaint;\n}",
    "begin_line": 2668,
    "end_line": 2670,
    "comment": "/** \n * Returns the default legend text paint, which may be \u003ccode\u003enull\u003c/code\u003e.\n * @return The default legend text paint.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setBaseLegendTextPaint#2680",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint(java.awt.Paint)",
    "snippet": "public void setBaseLegendTextPaint(Paint paint){\n  this.baseLegendTextPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 2680,
    "end_line": 2683,
    "comment": "/** \n * Sets the default legend text paint and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly#2693",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly()",
    "snippet": "public boolean getDataBoundsIncludesVisibleSeriesOnly(){\n  return this.dataBoundsIncludesVisibleSeriesOnly;\n}",
    "begin_line": 2693,
    "end_line": 2695,
    "comment": "/** \n * Returns the flag that controls whether or not the data bounds reported by this renderer will exclude non-visible series.\n * @return A boolean.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.setDataBoundsIncludesVisibleSeriesOnly#2706",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.setDataBoundsIncludesVisibleSeriesOnly(boolean)",
    "snippet": "public void setDataBoundsIncludesVisibleSeriesOnly(boolean visibleOnly){\n  this.dataBoundsIncludesVisibleSeriesOnly\u003dvisibleOnly;\n  notifyListeners(new RendererChangeEvent(this,true));\n}",
    "begin_line": 2706,
    "end_line": 2709,
    "comment": "/** \n * Sets the flag that controls whether or not the data bounds reported by this renderer will exclude non-visible series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param visibleOnly  include only visible series.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.calculateLabelAnchorPoint#2727",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, double, double, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "protected Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,double x,double y,PlotOrientation orientation){\n  Point2D result\u003dnull;\n  if (anchor \u003d\u003d ItemLabelAnchor.CENTER) {\n    result\u003dnew Point2D.Double(x,y);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE1) {\n    result\u003dnew Point2D.Double(x + OPP * this.itemLabelAnchorOffset,y - ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE2) {\n    result\u003dnew Point2D.Double(x + ADJ * this.itemLabelAnchorOffset,y - OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE3) {\n    result\u003dnew Point2D.Double(x + this.itemLabelAnchorOffset,y);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE4) {\n    result\u003dnew Point2D.Double(x + ADJ * this.itemLabelAnchorOffset,y + OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE5) {\n    result\u003dnew Point2D.Double(x + OPP * this.itemLabelAnchorOffset,y + ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE6) {\n    result\u003dnew Point2D.Double(x,y + this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE7) {\n    result\u003dnew Point2D.Double(x - OPP * this.itemLabelAnchorOffset,y + ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE8) {\n    result\u003dnew Point2D.Double(x - ADJ * this.itemLabelAnchorOffset,y + OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE9) {\n    result\u003dnew Point2D.Double(x - this.itemLabelAnchorOffset,y);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE10) {\n    result\u003dnew Point2D.Double(x - ADJ * this.itemLabelAnchorOffset,y - OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE11) {\n    result\u003dnew Point2D.Double(x - OPP * this.itemLabelAnchorOffset,y - ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE12) {\n    result\u003dnew Point2D.Double(x,y - this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE1) {\n    result\u003dnew Point2D.Double(x + 2.0 * OPP * this.itemLabelAnchorOffset,y - 2.0 * ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE2) {\n    result\u003dnew Point2D.Double(x + 2.0 * ADJ * this.itemLabelAnchorOffset,y - 2.0 * OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE3) {\n    result\u003dnew Point2D.Double(x + 2.0 * this.itemLabelAnchorOffset,y);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE4) {\n    result\u003dnew Point2D.Double(x + 2.0 * ADJ * this.itemLabelAnchorOffset,y + 2.0 * OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE5) {\n    result\u003dnew Point2D.Double(x + 2.0 * OPP * this.itemLabelAnchorOffset,y + 2.0 * ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE6) {\n    result\u003dnew Point2D.Double(x,y + 2.0 * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE7) {\n    result\u003dnew Point2D.Double(x - 2.0 * OPP * this.itemLabelAnchorOffset,y + 2.0 * ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE8) {\n    result\u003dnew Point2D.Double(x - 2.0 * ADJ * this.itemLabelAnchorOffset,y + 2.0 * OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE9) {\n    result\u003dnew Point2D.Double(x - 2.0 * this.itemLabelAnchorOffset,y);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE10) {\n    result\u003dnew Point2D.Double(x - 2.0 * ADJ * this.itemLabelAnchorOffset,y - 2.0 * OPP * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE11) {\n    result\u003dnew Point2D.Double(x - 2.0 * OPP * this.itemLabelAnchorOffset,y - 2.0 * ADJ * this.itemLabelAnchorOffset);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE12) {\n    result\u003dnew Point2D.Double(x,y - 2.0 * this.itemLabelAnchorOffset);\n  }\n  return result;\n}",
    "begin_line": 2727,
    "end_line": 2834,
    "comment": "/** \n * Calculates the item label anchor point.\n * @param anchor  the anchor.\n * @param x  the x coordinate.\n * @param y  the y coordinate.\n * @param orientation  the plot orientation.\n * @return The anchor point (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.addChangeListener#2843",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.addChangeListener(org.jfree.chart.event.RendererChangeListener)",
    "snippet": "public void addChangeListener(RendererChangeListener listener){\n  if (listener \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027listener\u0027 argument.\");\n  }\n  this.listenerList.add(RendererChangeListener.class,listener);\n}",
    "begin_line": 2843,
    "end_line": 2848,
    "comment": "/** \n * Registers an object to receive notification of changes to the renderer.\n * @param listener  the listener (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #removeChangeListener(RendererChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.removeChangeListener#2858",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.removeChangeListener(org.jfree.chart.event.RendererChangeListener)",
    "snippet": "public void removeChangeListener(RendererChangeListener listener){\n  if (listener \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027listener\u0027 argument.\");\n  }\n  this.listenerList.remove(RendererChangeListener.class,listener);\n}",
    "begin_line": 2858,
    "end_line": 2863,
    "comment": "/** \n * Deregisters an object so that it no longer receives notification of changes to the renderer.\n * @param listener  the object (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #addChangeListener(RendererChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.hasListener#2874",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.hasListener(java.util.EventListener)",
    "snippet": "public boolean hasListener(EventListener listener){\n  List list\u003dArrays.asList(this.listenerList.getListenerList());\n  return list.contains(listener);\n}",
    "begin_line": 2874,
    "end_line": 2877,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified object is registered with the dataset as a listener.  Most applications won\u0027t need to call this method, it exists mainly for use by unit testing code.\n * @param listener  the listener.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.fireChangeEvent#2884",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent()",
    "snippet": "protected void fireChangeEvent(){\n  notifyListeners(new RendererChangeEvent(this));\n}",
    "begin_line": 2884,
    "end_line": 2896,
    "comment": "/** \n * Sends a  {@link RendererChangeEvent} to all registered listeners.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.notifyListeners#2903",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.notifyListeners(org.jfree.chart.event.RendererChangeEvent)",
    "snippet": "public void notifyListeners(RendererChangeEvent event){\n  Object[] ls\u003dthis.listenerList.getListenerList();\n  for (int i\u003dls.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (ls[i] \u003d\u003d RendererChangeListener.class) {\n      ((RendererChangeListener)ls[i + 1]).rendererChanged(event);\n    }\n  }\n}",
    "begin_line": 2903,
    "end_line": 2910,
    "comment": "/** \n * Notifies all registered listeners that the renderer has been modified.\n * @param event  information about the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.equals#2919",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractRenderer)) {\n    return false;\n  }\n  AbstractRenderer that\u003d(AbstractRenderer)obj;\n  if (this.dataBoundsIncludesVisibleSeriesOnly !\u003d that.dataBoundsIncludesVisibleSeriesOnly) {\n    return false;\n  }\n  if (this.treatLegendShapeAsLine !\u003d that.treatLegendShapeAsLine) {\n    return false;\n  }\n  if (this.defaultEntityRadius !\u003d that.defaultEntityRadius) {\n    return false;\n  }\n  if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n    return false;\n  }\n  if (this.baseSeriesVisible !\u003d that.baseSeriesVisible) {\n    return false;\n  }\n  if (!this.seriesVisibleInLegendList.equals(that.seriesVisibleInLegendList)) {\n    return false;\n  }\n  if (this.baseSeriesVisibleInLegend !\u003d that.baseSeriesVisibleInLegend) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.paintList,that.paintList)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.basePaint,that.basePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.fillPaintList,that.fillPaintList)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseFillPaint,that.baseFillPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.outlinePaintList,that.outlinePaintList)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseOutlinePaint,that.baseOutlinePaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.strokeList,that.strokeList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseStroke,that.baseStroke)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.outlineStrokeList,that.outlineStrokeList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseOutlineStroke,that.baseOutlineStroke)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.shapeList,that.shapeList)) {\n    return false;\n  }\n  if (!ShapeUtilities.equal(this.baseShape,that.baseShape)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.itemLabelsVisibleList,that.itemLabelsVisibleList)) {\n    return false;\n  }\n  if (this.baseItemLabelsVisible !\u003d that.baseItemLabelsVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.itemLabelFontList,that.itemLabelFontList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseItemLabelFont,that.baseItemLabelFont)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.itemLabelPaintList,that.itemLabelPaintList)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseItemLabelPaint,that.baseItemLabelPaint)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.positiveItemLabelPositionList,that.positiveItemLabelPositionList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.basePositiveItemLabelPosition,that.basePositiveItemLabelPosition)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.negativeItemLabelPositionList,that.negativeItemLabelPositionList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseNegativeItemLabelPosition,that.baseNegativeItemLabelPosition)) {\n    return false;\n  }\n  if (this.itemLabelAnchorOffset !\u003d that.itemLabelAnchorOffset) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.createEntitiesList,that.createEntitiesList)) {\n    return false;\n  }\n  if (this.baseCreateEntities !\u003d that.baseCreateEntities) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendShapeList,that.legendShapeList)) {\n    return false;\n  }\n  if (!ShapeUtilities.equal(this.baseLegendShape,that.baseLegendShape)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendTextFont,that.legendTextFont)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseLegendTextFont,that.baseLegendTextFont)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendTextPaint,that.legendTextPaint)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.baseLegendTextPaint,that.baseLegendTextPaint)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 2919,
    "end_line": 3064,
    "comment": "/** \n * Tests this renderer for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.hashCode#3071",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d193;\n  result\u003dHashUtilities.hashCode(result,this.seriesVisibleList);\n  result\u003dHashUtilities.hashCode(result,this.baseSeriesVisible);\n  result\u003dHashUtilities.hashCode(result,this.seriesVisibleInLegendList);\n  result\u003dHashUtilities.hashCode(result,this.baseSeriesVisibleInLegend);\n  result\u003dHashUtilities.hashCode(result,this.paintList);\n  result\u003dHashUtilities.hashCode(result,this.basePaint);\n  result\u003dHashUtilities.hashCode(result,this.fillPaintList);\n  result\u003dHashUtilities.hashCode(result,this.baseFillPaint);\n  result\u003dHashUtilities.hashCode(result,this.outlinePaintList);\n  result\u003dHashUtilities.hashCode(result,this.baseOutlinePaint);\n  result\u003dHashUtilities.hashCode(result,this.strokeList);\n  result\u003dHashUtilities.hashCode(result,this.baseStroke);\n  result\u003dHashUtilities.hashCode(result,this.outlineStrokeList);\n  result\u003dHashUtilities.hashCode(result,this.baseOutlineStroke);\n  result\u003dHashUtilities.hashCode(result,this.itemLabelsVisibleList);\n  result\u003dHashUtilities.hashCode(result,this.baseItemLabelsVisible);\n  return result;\n}",
    "begin_line": 3071,
    "end_line": 3103,
    "comment": "/** \n * Returns a hashcode for the renderer.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.clone#3113",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.clone()",
    "snippet": "protected Object clone() throws CloneNotSupportedException {\n  AbstractRenderer clone\u003d(AbstractRenderer)super.clone();\n  if (this.seriesVisibleList !\u003d null) {\n    clone.seriesVisibleList\u003d(BooleanList)this.seriesVisibleList.clone();\n  }\n  if (this.seriesVisibleInLegendList !\u003d null) {\n    clone.seriesVisibleInLegendList\u003d(BooleanList)this.seriesVisibleInLegendList.clone();\n  }\n  if (this.paintList !\u003d null) {\n    clone.paintList\u003d(PaintList)this.paintList.clone();\n  }\n  if (this.fillPaintList !\u003d null) {\n    clone.fillPaintList\u003d(PaintList)this.fillPaintList.clone();\n  }\n  if (this.outlinePaintList !\u003d null) {\n    clone.outlinePaintList\u003d(PaintList)this.outlinePaintList.clone();\n  }\n  if (this.strokeList !\u003d null) {\n    clone.strokeList\u003d(StrokeList)this.strokeList.clone();\n  }\n  if (this.outlineStrokeList !\u003d null) {\n    clone.outlineStrokeList\u003d(StrokeList)this.outlineStrokeList.clone();\n  }\n  if (this.shapeList !\u003d null) {\n    clone.shapeList\u003d(ShapeList)this.shapeList.clone();\n  }\n  if (this.baseShape !\u003d null) {\n    clone.baseShape\u003dShapeUtilities.clone(this.baseShape);\n  }\n  if (this.itemLabelsVisibleList !\u003d null) {\n    clone.itemLabelsVisibleList\u003d(BooleanList)this.itemLabelsVisibleList.clone();\n  }\n  if (this.itemLabelFontList !\u003d null) {\n    clone.itemLabelFontList\u003d(ObjectList)this.itemLabelFontList.clone();\n  }\n  if (this.itemLabelPaintList !\u003d null) {\n    clone.itemLabelPaintList\u003d(PaintList)this.itemLabelPaintList.clone();\n  }\n  if (this.positiveItemLabelPositionList !\u003d null) {\n    clone.positiveItemLabelPositionList\u003d(ObjectList)this.positiveItemLabelPositionList.clone();\n  }\n  if (this.negativeItemLabelPositionList !\u003d null) {\n    clone.negativeItemLabelPositionList\u003d(ObjectList)this.negativeItemLabelPositionList.clone();\n  }\n  if (this.createEntitiesList !\u003d null) {\n    clone.createEntitiesList\u003d(BooleanList)this.createEntitiesList.clone();\n  }\n  if (this.legendShapeList !\u003d null) {\n    clone.legendShapeList\u003d(ShapeList)this.legendShapeList.clone();\n  }\n  if (this.legendTextFont !\u003d null) {\n    clone.legendTextFont\u003d(ObjectList)this.legendTextFont.clone();\n  }\n  if (this.legendTextPaint !\u003d null) {\n    clone.legendTextPaint\u003d(PaintList)this.legendTextPaint.clone();\n  }\n  clone.listenerList\u003dnew EventListenerList();\n  clone.event\u003dnull;\n  return clone;\n}",
    "begin_line": 3113,
    "end_line": 3213,
    "comment": "/** \n * Returns an independent copy of the renderer.\n * @return A clone.\n * @throws CloneNotSupportedException if some component of the rendererdoes not support cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.writeObject#3222",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.basePaint,stream);\n  SerialUtilities.writePaint(this.baseFillPaint,stream);\n  SerialUtilities.writePaint(this.baseOutlinePaint,stream);\n  SerialUtilities.writeStroke(this.baseStroke,stream);\n  SerialUtilities.writeStroke(this.baseOutlineStroke,stream);\n  SerialUtilities.writeShape(this.baseShape,stream);\n  SerialUtilities.writePaint(this.baseItemLabelPaint,stream);\n  SerialUtilities.writeShape(this.baseLegendShape,stream);\n  SerialUtilities.writePaint(this.baseLegendTextPaint,stream);\n}",
    "begin_line": 3222,
    "end_line": 3233,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractRenderer.readObject#3243",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/AbstractRenderer.java",
    "class_name": "org.jfree.chart.renderer.AbstractRenderer",
    "signature": "org.jfree.chart.renderer.AbstractRenderer.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.basePaint\u003dSerialUtilities.readPaint(stream);\n  this.baseFillPaint\u003dSerialUtilities.readPaint(stream);\n  this.baseOutlinePaint\u003dSerialUtilities.readPaint(stream);\n  this.baseStroke\u003dSerialUtilities.readStroke(stream);\n  this.baseOutlineStroke\u003dSerialUtilities.readStroke(stream);\n  this.baseShape\u003dSerialUtilities.readShape(stream);\n  this.baseItemLabelPaint\u003dSerialUtilities.readPaint(stream);\n  this.baseLegendShape\u003dSerialUtilities.readShape(stream);\n  this.baseLegendTextPaint\u003dSerialUtilities.readPaint(stream);\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 3243,
    "end_line": 3261,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getDefaultBarPainter#173",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter()",
    "snippet": "public static BarPainter getDefaultBarPainter(){\n  return BarRenderer.defaultBarPainter;\n}",
    "begin_line": 173,
    "end_line": 175,
    "comment": "/** \n * Returns the default bar painter.\n * @return The default bar painter.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setDefaultBarPainter#184",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultBarPainter(org.jfree.chart.renderer.category.BarPainter)",
    "snippet": "public static void setDefaultBarPainter(BarPainter painter){\n  if (painter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027painter\u0027 argument.\");\n  }\n  BarRenderer.defaultBarPainter\u003dpainter;\n}",
    "begin_line": 184,
    "end_line": 189,
    "comment": "/** \n * Sets the default bar painter.\n * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getDefaultShadowsVisible#205",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible()",
    "snippet": "public static boolean getDefaultShadowsVisible(){\n  return BarRenderer.defaultShadowsVisible;\n}",
    "begin_line": 205,
    "end_line": 207,
    "comment": "/** \n * Returns the default value for the \u003ccode\u003eshadowsVisible\u003c/code\u003e flag.\n * @return A boolean.\n * @see #setDefaultShadowsVisible(boolean)\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setDefaultShadowsVisible#218",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setDefaultShadowsVisible(boolean)",
    "snippet": "public static void setDefaultShadowsVisible(boolean visible){\n  BarRenderer.defaultShadowsVisible\u003dvisible;\n}",
    "begin_line": 218,
    "end_line": 220,
    "comment": "/** \n * Sets the default value for the shadows visible flag.\n * @param visible  the new value for the default.\n * @see #getDefaultShadowsVisible()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.BarRenderer#307",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.BarRenderer()",
    "snippet": "public BarRenderer(){\n  super();\n  this.base\u003d0.0;\n  this.includeBaseInRange\u003dtrue;\n  this.itemMargin\u003dDEFAULT_ITEM_MARGIN;\n  this.drawBarOutline\u003dfalse;\n  this.maximumBarWidth\u003d1.0;\n  this.positiveItemLabelPositionFallback\u003dnull;\n  this.negativeItemLabelPositionFallback\u003dnull;\n  this.gradientPaintTransformer\u003dnew StandardGradientPaintTransformer();\n  this.minimumBarLength\u003d0.0;\n  setBaseLegendShape(new Rectangle2D.Double(-4.0,-4.0,8.0,8.0));\n  this.barPainter\u003dgetDefaultBarPainter();\n  this.shadowsVisible\u003dgetDefaultShadowsVisible();\n  this.shadowPaint\u003dColor.gray;\n  this.shadowXOffset\u003d4.0;\n  this.shadowYOffset\u003d4.0;\n}",
    "begin_line": 307,
    "end_line": 325,
    "comment": "/** \n * Creates a new bar renderer with default settings.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getBase#335",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getBase()",
    "snippet": "public double getBase(){\n  return this.base;\n}",
    "begin_line": 335,
    "end_line": 337,
    "comment": "/** \n * Returns the base value for the bars.  The default value is \u003ccode\u003e0.0\u003c/code\u003e.\n * @return The base value for the bars.\n * @see #setBase(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setBase#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setBase(double)",
    "snippet": "public void setBase(double base){\n  this.base\u003dbase;\n  fireChangeEvent();\n}",
    "begin_line": 347,
    "end_line": 350,
    "comment": "/** \n * Sets the base value for the bars and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param base  the new base value.\n * @see #getBase()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getItemMargin#360",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getItemMargin()",
    "snippet": "public double getItemMargin(){\n  return this.itemMargin;\n}",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Returns the item margin as a percentage of the available space for all bars.\n * @return The margin percentage (where 0.10 is ten percent).\n * @see #setItemMargin(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setItemMargin#374",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setItemMargin(double)",
    "snippet": "public void setItemMargin(double percent){\n  this.itemMargin\u003dpercent;\n  fireChangeEvent();\n}",
    "begin_line": 374,
    "end_line": 377,
    "comment": "/** \n * Sets the item margin and sends a  {@link RendererChangeEvent} to allregistered listeners.  The value is expressed as a percentage of the available width for plotting all the bars, with the resulting amount to be distributed between all the bars evenly.\n * @param percent  the margin (where 0.10 is ten percent).\n * @see #getItemMargin()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.isDrawBarOutline#386",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline()",
    "snippet": "public boolean isDrawBarOutline(){\n  return this.drawBarOutline;\n}",
    "begin_line": 386,
    "end_line": 388,
    "comment": "/** \n * Returns a flag that controls whether or not bar outlines are drawn.\n * @return A boolean.\n * @see #setDrawBarOutline(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setDrawBarOutline#398",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setDrawBarOutline(boolean)",
    "snippet": "public void setDrawBarOutline(boolean draw){\n  this.drawBarOutline\u003ddraw;\n  fireChangeEvent();\n}",
    "begin_line": 398,
    "end_line": 401,
    "comment": "/** \n * Sets the flag that controls whether or not bar outlines are drawn and sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param draw  the flag.\n * @see #isDrawBarOutline()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getMaximumBarWidth#411",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getMaximumBarWidth()",
    "snippet": "public double getMaximumBarWidth(){\n  return this.maximumBarWidth;\n}",
    "begin_line": 411,
    "end_line": 413,
    "comment": "/** \n * Returns the maximum bar width, as a percentage of the available drawing space.\n * @return The maximum bar width.\n * @see #setMaximumBarWidth(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setMaximumBarWidth#424",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setMaximumBarWidth(double)",
    "snippet": "public void setMaximumBarWidth(double percent){\n  this.maximumBarWidth\u003dpercent;\n  fireChangeEvent();\n}",
    "begin_line": 424,
    "end_line": 427,
    "comment": "/** \n * Sets the maximum bar width, which is specified as a percentage of the available space for all bars, and sends a  {@link RendererChangeEvent} toall registered listeners.\n * @param percent  the percent (where 0.05 is five percent).\n * @see #getMaximumBarWidth()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getMinimumBarLength#437",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getMinimumBarLength()",
    "snippet": "public double getMinimumBarLength(){\n  return this.minimumBarLength;\n}",
    "begin_line": 437,
    "end_line": 439,
    "comment": "/** \n * Returns the minimum bar length (in Java2D units).  The default value is 0.0.\n * @return The minimum bar length.\n * @see #setMinimumBarLength(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setMinimumBarLength#455",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)",
    "snippet": "public void setMinimumBarLength(double min){\n  if (min \u003c 0.0) {\n    throw new IllegalArgumentException(\"Requires \u0027min\u0027 \u003e\u003d 0.0\");\n  }\n  this.minimumBarLength\u003dmin;\n  fireChangeEvent();\n}",
    "begin_line": 455,
    "end_line": 461,
    "comment": "/** \n * Sets the minimum bar length and sends a  {@link RendererChangeEvent} toall registered listeners.  The minimum bar length is specified in Java2D units, and can be used to prevent bars that represent very small data values from disappearing when drawn on the screen.  Typically you would set this to (say) 0.5 or 1.0 Java 2D units.  Use this attribute with caution, however, because setting it to a non-zero value will artificially increase the length of bars representing small values, which may misrepresent your data.\n * @param min  the minimum bar length (in Java2D units, must be \u003e\u003d 0.0).\n * @see #getMinimumBarLength()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getGradientPaintTransformer#471",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getGradientPaintTransformer()",
    "snippet": "public GradientPaintTransformer getGradientPaintTransformer(){\n  return this.gradientPaintTransformer;\n}",
    "begin_line": 471,
    "end_line": 473,
    "comment": "/** \n * Returns the gradient paint transformer (an object used to transform gradient paint objects to fit each bar).\n * @return A transformer (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setGradientPaintTransformer(GradientPaintTransformer)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setGradientPaintTransformer#483",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
    "snippet": "public void setGradientPaintTransformer(GradientPaintTransformer transformer){\n  this.gradientPaintTransformer\u003dtransformer;\n  fireChangeEvent();\n}",
    "begin_line": 483,
    "end_line": 487,
    "comment": "/** \n * Sets the gradient paint transformer and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param transformer  the transformer (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getGradientPaintTransformer()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getPositiveItemLabelPositionFallback#497",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getPositiveItemLabelPositionFallback()",
    "snippet": "public ItemLabelPosition getPositiveItemLabelPositionFallback(){\n  return this.positiveItemLabelPositionFallback;\n}",
    "begin_line": 497,
    "end_line": 499,
    "comment": "/** \n * Returns the fallback position for positive item labels that don\u0027t fit within a bar.\n * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setPositiveItemLabelPositionFallback#510",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setPositiveItemLabelPositionFallback(ItemLabelPosition position){\n  this.positiveItemLabelPositionFallback\u003dposition;\n  fireChangeEvent();\n}",
    "begin_line": 510,
    "end_line": 514,
    "comment": "/** \n * Sets the fallback position for positive item labels that don\u0027t fit within a bar, and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getPositiveItemLabelPositionFallback()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getNegativeItemLabelPositionFallback#524",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getNegativeItemLabelPositionFallback()",
    "snippet": "public ItemLabelPosition getNegativeItemLabelPositionFallback(){\n  return this.negativeItemLabelPositionFallback;\n}",
    "begin_line": 524,
    "end_line": 526,
    "comment": "/** \n * Returns the fallback position for negative item labels that don\u0027t fit within a bar.\n * @return The fallback position (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setPositiveItemLabelPositionFallback(ItemLabelPosition)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setNegativeItemLabelPositionFallback#537",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
    "snippet": "public void setNegativeItemLabelPositionFallback(ItemLabelPosition position){\n  this.negativeItemLabelPositionFallback\u003dposition;\n  fireChangeEvent();\n}",
    "begin_line": 537,
    "end_line": 541,
    "comment": "/** \n * Sets the fallback position for negative item labels that don\u0027t fit within a bar, and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getNegativeItemLabelPositionFallback()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getIncludeBaseInRange#555",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getIncludeBaseInRange()",
    "snippet": "public boolean getIncludeBaseInRange(){\n  return this.includeBaseInRange;\n}",
    "begin_line": 555,
    "end_line": 557,
    "comment": "/** \n * Returns the flag that controls whether or not the base value for the bars is included in the range calculated by {@link #findRangeBounds(CategoryDataset)}.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the base is included in the range, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @since 1.0.1\n * @see #setIncludeBaseInRange(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setIncludeBaseInRange#571",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)",
    "snippet": "public void setIncludeBaseInRange(boolean include){\n  if (this.includeBaseInRange !\u003d include) {\n    this.includeBaseInRange\u003dinclude;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 571,
    "end_line": 576,
    "comment": "/** \n * Sets the flag that controls whether or not the base value for the bars is included in the range calculated by {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed, a  {@link RendererChangeEvent} is sent to all registered listeners.\n * @param include  the new value for the flag.\n * @since 1.0.1\n * @see #getIncludeBaseInRange()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getBarPainter#587",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getBarPainter()",
    "snippet": "public BarPainter getBarPainter(){\n  return this.barPainter;\n}",
    "begin_line": 587,
    "end_line": 589,
    "comment": "/** \n * Returns the bar painter.\n * @return The bar painter (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBarPainter(BarPainter)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setBarPainter#601",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setBarPainter(org.jfree.chart.renderer.category.BarPainter)",
    "snippet": "public void setBarPainter(BarPainter painter){\n  if (painter \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027painter\u0027 argument.\");\n  }\n  this.barPainter\u003dpainter;\n  fireChangeEvent();\n}",
    "begin_line": 601,
    "end_line": 607,
    "comment": "/** \n * Sets the bar painter for this renderer and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param painter  the painter (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getBarPainter()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getShadowsVisible#617",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowsVisible()",
    "snippet": "public boolean getShadowsVisible(){\n  return this.shadowsVisible;\n}",
    "begin_line": 617,
    "end_line": 619,
    "comment": "/** \n * Returns the flag that controls whether or not shadows are drawn for the bars.\n * @return A boolean.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setShadowVisible#629",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowVisible(boolean)",
    "snippet": "public void setShadowVisible(boolean visible){\n  this.shadowsVisible\u003dvisible;\n  fireChangeEvent();\n}",
    "begin_line": 629,
    "end_line": 632,
    "comment": "/** \n * Sets the flag that controls whether or not shadows are drawn by the renderer.\n * @param visible  the new flag value.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getShadowPaint#643",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowPaint()",
    "snippet": "public Paint getShadowPaint(){\n  return this.shadowPaint;\n}",
    "begin_line": 643,
    "end_line": 645,
    "comment": "/** \n * Returns the shadow paint.\n * @return The shadow paint.\n * @see #setShadowPaint(Paint)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setShadowPaint#657",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowPaint(java.awt.Paint)",
    "snippet": "public void setShadowPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.shadowPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 657,
    "end_line": 663,
    "comment": "/** \n * Sets the shadow paint and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getShadowPaint()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getShadowXOffset#672",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowXOffset()",
    "snippet": "public double getShadowXOffset(){\n  return this.shadowXOffset;\n}",
    "begin_line": 672,
    "end_line": 674,
    "comment": "/** \n * Returns the shadow x-offset.\n * @return The shadow x-offset.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setShadowXOffset#684",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowXOffset(double)",
    "snippet": "public void setShadowXOffset(double offset){\n  this.shadowXOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 684,
    "end_line": 687,
    "comment": "/** \n * Sets the x-offset for the bar shadow and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param offset  the offset.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getShadowYOffset#696",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getShadowYOffset()",
    "snippet": "public double getShadowYOffset(){\n  return this.shadowYOffset;\n}",
    "begin_line": 696,
    "end_line": 698,
    "comment": "/** \n * Returns the shadow y-offset.\n * @return The shadow y-offset.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.setShadowYOffset#708",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.setShadowYOffset(double)",
    "snippet": "public void setShadowYOffset(double offset){\n  this.shadowYOffset\u003doffset;\n  fireChangeEvent();\n}",
    "begin_line": 708,
    "end_line": 711,
    "comment": "/** \n * Sets the y-offset for the bar shadow and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param offset  the offset.\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getLowerClip#719",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getLowerClip()",
    "snippet": "public double getLowerClip(){\n  return this.lowerClip;\n}",
    "begin_line": 719,
    "end_line": 722,
    "comment": "/** \n * Returns the lower clip value.  This value is recalculated in the initialise() method.\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getUpperClip#730",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getUpperClip()",
    "snippet": "public double getUpperClip(){\n  return this.upperClip;\n}",
    "begin_line": 730,
    "end_line": 733,
    "comment": "/** \n * Returns the upper clip value.  This value is recalculated in the initialise() method.\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.initialise#748",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){\n  CategoryItemRendererState state\u003dsuper.initialise(g2,dataArea,plot,rendererIndex,info);\n  ValueAxis rangeAxis\u003dplot.getRangeAxisForDataset(rendererIndex);\n  this.lowerClip\u003drangeAxis.getRange().getLowerBound();\n  this.upperClip\u003drangeAxis.getRange().getUpperBound();\n  calculateBarWidth(plot,dataArea,rendererIndex,state);\n  return state;\n}",
    "begin_line": 748,
    "end_line": 767,
    "comment": "/** \n * Initialises the renderer and returns a state object that will be passed to subsequent calls to the drawItem method.  This method gets called once at the start of the process of drawing a chart.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the data is to be plotted.\n * @param plot  the plot.\n * @param rendererIndex  the renderer index.\n * @param info  collects chart rendering information for return to caller.\n * @return The renderer state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.calculateBarWidth#777",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarWidth(org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, int, org.jfree.chart.renderer.category.CategoryItemRendererState)",
    "snippet": "protected void calculateBarWidth(CategoryPlot plot,Rectangle2D dataArea,int rendererIndex,CategoryItemRendererState state){\n  CategoryAxis domainAxis\u003dgetDomainAxis(plot,rendererIndex);\n  CategoryDataset dataset\u003dplot.getDataset(rendererIndex);\n  if (dataset !\u003d null) {\n    int columns\u003ddataset.getColumnCount();\n    int rows\u003dstate.getVisibleSeriesCount() \u003e\u003d 0 ? state.getVisibleSeriesCount() : dataset.getRowCount();\n    double space\u003d0.0;\n    PlotOrientation orientation\u003dplot.getOrientation();\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      space\u003ddataArea.getHeight();\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      space\u003ddataArea.getWidth();\n    }\n    double maxWidth\u003dspace * getMaximumBarWidth();\n    double categoryMargin\u003d0.0;\n    double currentItemMargin\u003d0.0;\n    if (columns \u003e 1) {\n      categoryMargin\u003ddomainAxis.getCategoryMargin();\n    }\n    if (rows \u003e 1) {\n      currentItemMargin\u003dgetItemMargin();\n    }\n    double used\u003dspace * (1 - domainAxis.getLowerMargin() - domainAxis.getUpperMargin()- categoryMargin- currentItemMargin);\n    if ((rows * columns) \u003e 0) {\n      state.setBarWidth(Math.min(used / (rows * columns),maxWidth));\n    }\n else {\n      state.setBarWidth(Math.min(used,maxWidth));\n    }\n  }\n}",
    "begin_line": 777,
    "end_line": 815,
    "comment": "/** \n * Calculates the bar width and stores it in the renderer state.\n * @param plot  the plot.\n * @param dataArea  the data area.\n * @param rendererIndex  the renderer index.\n * @param state  the renderer state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.calculateBarW0#832",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarW0(org.jfree.chart.plot.CategoryPlot, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.renderer.category.CategoryItemRendererState, int, int)",
    "snippet": "protected double calculateBarW0(CategoryPlot plot,PlotOrientation orientation,Rectangle2D dataArea,CategoryAxis domainAxis,CategoryItemRendererState state,int row,int column){\n  double space\u003d0.0;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    space\u003ddataArea.getHeight();\n  }\n else {\n    space\u003ddataArea.getWidth();\n  }\n  double barW0\u003ddomainAxis.getCategoryStart(column,getColumnCount(),dataArea,plot.getDomainAxisEdge());\n  int seriesCount\u003dstate.getVisibleSeriesCount() \u003e\u003d 0 ? state.getVisibleSeriesCount() : getRowCount();\n  int categoryCount\u003dgetColumnCount();\n  if (seriesCount \u003e 1) {\n    double seriesGap\u003dspace * getItemMargin() / (categoryCount * (seriesCount - 1));\n    double seriesW\u003dcalculateSeriesWidth(space,domainAxis,categoryCount,seriesCount);\n    barW0\u003dbarW0 + row * (seriesW + seriesGap) + (seriesW / 2.0) - (state.getBarWidth() / 2.0);\n  }\n else {\n    barW0\u003ddomainAxis.getCategoryMiddle(column,getColumnCount(),dataArea,plot.getDomainAxisEdge()) - state.getBarWidth() / 2.0;\n  }\n  return barW0;\n}",
    "begin_line": 832,
    "end_line": 866,
    "comment": "/** \n * Calculates the coordinate of the first \"side\" of a bar.  This will be the minimum x-coordinate for a vertical bar, and the minimum y-coordinate for a horizontal bar.\n * @param plot  the plot.\n * @param orientation  the plot orientation.\n * @param dataArea  the data area.\n * @param domainAxis  the domain axis.\n * @param state  the renderer state (has the bar width precalculated).\n * @param row  the row index.\n * @param column  the column index.\n * @return The coordinate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.calculateBarL0L1#876",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateBarL0L1(double)",
    "snippet": "protected double[] calculateBarL0L1(double value){\n  double lclip\u003dgetLowerClip();\n  double uclip\u003dgetUpperClip();\n  double barLow\u003dMath.min(this.base,value);\n  double barHigh\u003dMath.max(this.base,value);\n  if (barHigh \u003c lclip) {\n    return null;\n  }\n  if (barLow \u003e uclip) {\n    return null;\n  }\n  barLow\u003dMath.max(barLow,lclip);\n  barHigh\u003dMath.min(barHigh,uclip);\n  return new double[]{barLow,barHigh};\n}",
    "begin_line": 876,
    "end_line": 890,
    "comment": "/** \n * Calculates the coordinates for the length of a single bar.\n * @param value  the value represented by the bar.\n * @return The coordinates for each end of the bar (or \u003ccode\u003enull\u003c/code\u003e ifthe bar is not visible for the current axis range).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.findRangeBounds#904",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
    "snippet": "public Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    return null;\n  }\n  Range result\u003dsuper.findRangeBounds(dataset,includeInterval);\n  if (result !\u003d null) {\n    if (this.includeBaseInRange) {\n      result\u003dRange.expandToInclude(result,this.base);\n    }\n  }\n  return result;\n}",
    "begin_line": 904,
    "end_line": 916,
    "comment": "/** \n * Returns the range of values the renderer requires to display all the items from the specified dataset.  This takes into account the range of values in the dataset, plus the flag that determines whether or not the base value for the bars should be included in the range.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param includeInterval  include the interval if the dataset has one?\n * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset is\u003ccode\u003enull\u003c/code\u003e or empty).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.getLegendItem#926",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)",
    "snippet": "public LegendItem getLegendItem(int datasetIndex,int series){\n  CategoryPlot cp\u003dgetPlot();\n  if (cp \u003d\u003d null) {\n    return null;\n  }\n  if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n    return null;\n  }\n  CategoryDataset dataset\u003dcp.getDataset(datasetIndex);\n  String label\u003dgetLegendItemLabelGenerator().generateLabel(dataset,series);\n  String description\u003dlabel;\n  String toolTipText\u003dnull;\n  if (getLegendItemToolTipGenerator() !\u003d null) {\n    toolTipText\u003dgetLegendItemToolTipGenerator().generateLabel(dataset,series);\n  }\n  String urlText\u003dnull;\n  if (getLegendItemURLGenerator() !\u003d null) {\n    urlText\u003dgetLegendItemURLGenerator().generateLabel(dataset,series);\n  }\n  Shape shape\u003dlookupLegendShape(series);\n  Paint paint\u003dlookupSeriesPaint(series);\n  Paint outlinePaint\u003dlookupSeriesOutlinePaint(series);\n  Stroke outlineStroke\u003dlookupSeriesOutlineStroke(series);\n  LegendItem result\u003dnew LegendItem(label,description,toolTipText,urlText,true,shape,true,paint,isDrawBarOutline(),outlinePaint,outlineStroke,false,new Line2D.Float(),new BasicStroke(1.0f),Color.black);\n  result.setLabelFont(lookupLegendTextFont(series));\n  Paint labelPaint\u003dlookupLegendTextPaint(series);\n  if (labelPaint !\u003d null) {\n    result.setLabelPaint(labelPaint);\n  }\n  result.setDataset(dataset);\n  result.setDatasetIndex(datasetIndex);\n  result.setSeriesKey(dataset.getRowKey(series));\n  result.setSeriesIndex(series);\n  if (this.gradientPaintTransformer !\u003d null) {\n    result.setFillPaintTransformer(this.gradientPaintTransformer);\n  }\n  return result;\n}",
    "begin_line": 926,
    "end_line": 974,
    "comment": "/** \n * Returns a legend item for a series.\n * @param datasetIndex  the dataset index (zero-based).\n * @param series  the series index (zero-based).\n * @return The legend item (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.drawItem#991",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
    "snippet": "public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,boolean selected,int pass){\n  int visibleRow\u003dstate.getVisibleSeriesIndex(row);\n  if (visibleRow \u003c 0) {\n    return;\n  }\n  Number dataValue\u003ddataset.getValue(row,column);\n  if (dataValue \u003d\u003d null) {\n    return;\n  }\n  final double value\u003ddataValue.doubleValue();\n  PlotOrientation orientation\u003dplot.getOrientation();\n  double barW0\u003dcalculateBarW0(plot,orientation,dataArea,domainAxis,state,visibleRow,column);\n  double[] barL0L1\u003dcalculateBarL0L1(value);\n  if (barL0L1 \u003d\u003d null) {\n    return;\n  }\n  RectangleEdge edge\u003dplot.getRangeAxisEdge();\n  double transL0\u003drangeAxis.valueToJava2D(barL0L1[0],dataArea,edge);\n  double transL1\u003drangeAxis.valueToJava2D(barL0L1[1],dataArea,edge);\n  boolean positive\u003d(value \u003e\u003d this.base);\n  boolean inverted\u003drangeAxis.isInverted();\n  double barL0\u003dMath.min(transL0,transL1);\n  double barLength\u003dMath.abs(transL1 - transL0);\n  double barLengthAdj\u003d0.0;\n  if (barLength \u003e 0.0 \u0026\u0026 barLength \u003c getMinimumBarLength()) {\n    barLengthAdj\u003dgetMinimumBarLength() - barLength;\n  }\n  double barL0Adj\u003d0.0;\n  RectangleEdge barBase;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    if (positive \u0026\u0026 inverted || !positive \u0026\u0026 !inverted) {\n      barL0Adj\u003dbarLengthAdj;\n      barBase\u003dRectangleEdge.RIGHT;\n    }\n else {\n      barBase\u003dRectangleEdge.LEFT;\n    }\n  }\n else {\n    if (positive \u0026\u0026 !inverted || !positive \u0026\u0026 inverted) {\n      barL0Adj\u003dbarLengthAdj;\n      barBase\u003dRectangleEdge.BOTTOM;\n    }\n else {\n      barBase\u003dRectangleEdge.TOP;\n    }\n  }\n  Rectangle2D bar\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    bar\u003dnew Rectangle2D.Double(barL0 - barL0Adj,barW0,barLength + barLengthAdj,state.getBarWidth());\n  }\n else {\n    bar\u003dnew Rectangle2D.Double(barW0,barL0 - barL0Adj,state.getBarWidth(),barLength + barLengthAdj);\n  }\n  if (getShadowsVisible()) {\n    this.barPainter.paintBarShadow(g2,this,row,column,selected,bar,barBase,true);\n  }\n  this.barPainter.paintBar(g2,this,row,column,selected,bar,barBase);\n  CategoryItemLabelGenerator generator\u003dgetItemLabelGenerator(row,column,selected);\n  if (generator !\u003d null \u0026\u0026 isItemLabelVisible(row,column,selected)) {\n    drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(value \u003c 0.0));\n  }\n  int datasetIndex\u003dplot.indexOf(dataset);\n  updateCrosshairValues(state.getCrosshairState(),dataset.getRowKey(row),dataset.getColumnKey(column),value,datasetIndex,barW0,barL0,orientation);\n  EntityCollection entities\u003dstate.getEntityCollection();\n  if (entities !\u003d null) {\n    addEntity(entities,bar,dataset,row,column,selected);\n  }\n}",
    "begin_line": 991,
    "end_line": 1093,
    "comment": "/** \n * Draws the bar for a single (series, category) data item.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the data area.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the dataset.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n * @param selected  is the item selected?\n * @param pass  the pass index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.calculateSeriesWidth#1105",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateSeriesWidth(double, org.jfree.chart.axis.CategoryAxis, int, int)",
    "snippet": "protected double calculateSeriesWidth(double space,CategoryAxis axis,int categories,int series){\n  double factor\u003d1.0 - getItemMargin() - axis.getLowerMargin()- axis.getUpperMargin();\n  if (categories \u003e 1) {\n    factor\u003dfactor - axis.getCategoryMargin();\n  }\n  return (space * factor) / (categories * series);\n}",
    "begin_line": 1105,
    "end_line": 1113,
    "comment": "/** \n * Calculates the available space for each series.\n * @param space  the space along the entire axis (in Java2D units).\n * @param axis  the category axis.\n * @param categories  the number of categories.\n * @param series  the number of series.\n * @return The width of one series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.drawItemLabelForBar#1132",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.drawItemLabelForBar(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.data.category.CategoryDataset, int, int, boolean, org.jfree.chart.labels.CategoryItemLabelGenerator, java.awt.geom.Rectangle2D, boolean)",
    "snippet": "protected void drawItemLabelForBar(Graphics2D g2,CategoryPlot plot,CategoryDataset dataset,int row,int column,boolean selected,CategoryItemLabelGenerator generator,Rectangle2D bar,boolean negative){\n  String label\u003dgenerator.generateLabel(dataset,row,column);\n  if (label \u003d\u003d null) {\n    return;\n  }\n  Font labelFont\u003dgetItemLabelFont(row,column,selected);\n  g2.setFont(labelFont);\n  Paint paint\u003dgetItemLabelPaint(row,column,selected);\n  g2.setPaint(paint);\n  ItemLabelPosition position\u003dnull;\n  if (!negative) {\n    position\u003dgetPositiveItemLabelPosition(row,column,selected);\n  }\n else {\n    position\u003dgetNegativeItemLabelPosition(row,column,selected);\n  }\n  Point2D anchorPoint\u003dcalculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());\n  if (isInternalAnchor(position.getItemLabelAnchor())) {\n    Shape bounds\u003dTextUtilities.calculateRotatedStringBounds(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());\n    if (bounds !\u003d null) {\n      if (!bar.contains(bounds.getBounds2D())) {\n        if (!negative) {\n          position\u003dgetPositiveItemLabelPositionFallback();\n        }\n else {\n          position\u003dgetNegativeItemLabelPositionFallback();\n        }\n        if (position !\u003d null) {\n          anchorPoint\u003dcalculateLabelAnchorPoint(position.getItemLabelAnchor(),bar,plot.getOrientation());\n        }\n      }\n    }\n  }\n  if (position !\u003d null) {\n    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());\n  }\n}",
    "begin_line": 1132,
    "end_line": 1190,
    "comment": "/** \n * Draws an item label.  This method is used for bars instead of {@link #drawItemLabel()} so that the bar can be used to calculate thelabel anchor point.\n * @param g2  the graphics device.\n * @param dataset  the dataset.\n * @param row  the row.\n * @param column  the column.\n * @param selected  is the item selected?\n * @param plot  the plot.\n * @param generator  the label generator.\n * @param bar  the bar.\n * @param negative  a flag indicating a negative value.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.calculateLabelAnchorPoint#1201",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.calculateLabelAnchorPoint(org.jfree.chart.labels.ItemLabelAnchor, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "private Point2D calculateLabelAnchorPoint(ItemLabelAnchor anchor,Rectangle2D bar,PlotOrientation orientation){\n  Point2D result\u003dnull;\n  double offset\u003dgetItemLabelAnchorOffset();\n  double x0\u003dbar.getX() - offset;\n  double x1\u003dbar.getX();\n  double x2\u003dbar.getX() + offset;\n  double x3\u003dbar.getCenterX();\n  double x4\u003dbar.getMaxX() - offset;\n  double x5\u003dbar.getMaxX();\n  double x6\u003dbar.getMaxX() + offset;\n  double y0\u003dbar.getMaxY() + offset;\n  double y1\u003dbar.getMaxY();\n  double y2\u003dbar.getMaxY() - offset;\n  double y3\u003dbar.getCenterY();\n  double y4\u003dbar.getMinY() + offset;\n  double y5\u003dbar.getMinY();\n  double y6\u003dbar.getMinY() - offset;\n  if (anchor \u003d\u003d ItemLabelAnchor.CENTER) {\n    result\u003dnew Point2D.Double(x3,y3);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE1) {\n    result\u003dnew Point2D.Double(x4,y4);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE2) {\n    result\u003dnew Point2D.Double(x4,y4);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE3) {\n    result\u003dnew Point2D.Double(x4,y3);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE4) {\n    result\u003dnew Point2D.Double(x4,y2);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE5) {\n    result\u003dnew Point2D.Double(x4,y2);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE6) {\n    result\u003dnew Point2D.Double(x3,y2);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE7) {\n    result\u003dnew Point2D.Double(x2,y2);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE8) {\n    result\u003dnew Point2D.Double(x2,y2);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE9) {\n    result\u003dnew Point2D.Double(x2,y3);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE10) {\n    result\u003dnew Point2D.Double(x2,y4);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE11) {\n    result\u003dnew Point2D.Double(x2,y4);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.INSIDE12) {\n    result\u003dnew Point2D.Double(x3,y4);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE1) {\n    result\u003dnew Point2D.Double(x5,y6);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE2) {\n    result\u003dnew Point2D.Double(x6,y5);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE3) {\n    result\u003dnew Point2D.Double(x6,y3);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE4) {\n    result\u003dnew Point2D.Double(x6,y1);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE5) {\n    result\u003dnew Point2D.Double(x5,y0);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE6) {\n    result\u003dnew Point2D.Double(x3,y0);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE7) {\n    result\u003dnew Point2D.Double(x1,y0);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE8) {\n    result\u003dnew Point2D.Double(x0,y1);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE9) {\n    result\u003dnew Point2D.Double(x0,y3);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE10) {\n    result\u003dnew Point2D.Double(x0,y5);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE11) {\n    result\u003dnew Point2D.Double(x1,y6);\n  }\n else   if (anchor \u003d\u003d ItemLabelAnchor.OUTSIDE12) {\n    result\u003dnew Point2D.Double(x3,y6);\n  }\n  return result;\n}",
    "begin_line": 1201,
    "end_line": 1301,
    "comment": "/** \n * Calculates the item label anchor point.\n * @param anchor  the anchor.\n * @param bar  the bar.\n * @param orientation  the plot orientation.\n * @return The anchor point.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.isInternalAnchor#1310",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.isInternalAnchor(org.jfree.chart.labels.ItemLabelAnchor)",
    "snippet": "private boolean isInternalAnchor(ItemLabelAnchor anchor){\n  return anchor \u003d\u003d ItemLabelAnchor.CENTER || anchor \u003d\u003d ItemLabelAnchor.INSIDE1 || anchor \u003d\u003d ItemLabelAnchor.INSIDE2 || anchor \u003d\u003d ItemLabelAnchor.INSIDE3 || anchor \u003d\u003d ItemLabelAnchor.INSIDE4 || anchor \u003d\u003d ItemLabelAnchor.INSIDE5 || anchor \u003d\u003d ItemLabelAnchor.INSIDE6 || anchor \u003d\u003d ItemLabelAnchor.INSIDE7 || anchor \u003d\u003d ItemLabelAnchor.INSIDE8 || anchor \u003d\u003d ItemLabelAnchor.INSIDE9 || anchor \u003d\u003d ItemLabelAnchor.INSIDE10 || anchor \u003d\u003d ItemLabelAnchor.INSIDE11 || anchor \u003d\u003d ItemLabelAnchor.INSIDE12;\n}",
    "begin_line": 1310,
    "end_line": 1324,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified anchor point is inside a bar.\n * @param anchor  the anchor point.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.equals#1333",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof BarRenderer)) {\n    return false;\n  }\n  BarRenderer that\u003d(BarRenderer)obj;\n  if (this.base !\u003d that.base) {\n    return false;\n  }\n  if (this.itemMargin !\u003d that.itemMargin) {\n    return false;\n  }\n  if (this.drawBarOutline !\u003d that.drawBarOutline) {\n    return false;\n  }\n  if (this.maximumBarWidth !\u003d that.maximumBarWidth) {\n    return false;\n  }\n  if (this.minimumBarLength !\u003d that.minimumBarLength) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.gradientPaintTransformer,that.gradientPaintTransformer)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback,that.positiveItemLabelPositionFallback)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback,that.negativeItemLabelPositionFallback)) {\n    return false;\n  }\n  if (!this.barPainter.equals(that.barPainter)) {\n    return false;\n  }\n  if (this.shadowsVisible !\u003d that.shadowsVisible) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.shadowPaint,that.shadowPaint)) {\n    return false;\n  }\n  if (this.shadowXOffset !\u003d that.shadowXOffset) {\n    return false;\n  }\n  if (this.shadowYOffset !\u003d that.shadowYOffset) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1333,
    "end_line": 1384,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.writeObject#1393",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.shadowPaint,stream);\n}",
    "begin_line": 1393,
    "end_line": 1396,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer.readObject#1406",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer",
    "signature": "org.jfree.chart.renderer.category.BarRenderer.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.shadowPaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 1406,
    "end_line": 1410,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.BarRenderer3D#178",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.BarRenderer3D()",
    "snippet": "public BarRenderer3D(){\n  this(DEFAULT_X_OFFSET,DEFAULT_Y_OFFSET);\n}",
    "begin_line": 178,
    "end_line": 180,
    "comment": "/** \n * Default constructor, creates a renderer with a default \u00273D effect\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.BarRenderer3D#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.BarRenderer3D(double, double)",
    "snippet": "public BarRenderer3D(double xOffset,double yOffset){\n  super();\n  this.xOffset\u003dxOffset;\n  this.yOffset\u003dyOffset;\n  this.wallPaint\u003dDEFAULT_WALL_PAINT;\n  ItemLabelPosition p1\u003dnew ItemLabelPosition(ItemLabelAnchor.INSIDE12,TextAnchor.TOP_CENTER);\n  setBasePositiveItemLabelPosition(p1);\n  ItemLabelPosition p2\u003dnew ItemLabelPosition(ItemLabelAnchor.INSIDE12,TextAnchor.TOP_CENTER);\n  setBaseNegativeItemLabelPosition(p2);\n}",
    "begin_line": 188,
    "end_line": 202,
    "comment": "/** \n * Constructs a new renderer with the specified \u00273D effect\u0027.\n * @param xOffset  the x-offset for the 3D effect.\n * @param yOffset  the y-offset for the 3D effect.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.getXOffset#211",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getXOffset()",
    "snippet": "public double getXOffset(){\n  return this.xOffset;\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Returns the x-offset for the 3D effect.\n * @return The 3D effect.\n * @see #getYOffset()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.getYOffset#220",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getYOffset()",
    "snippet": "public double getYOffset(){\n  return this.yOffset;\n}",
    "begin_line": 220,
    "end_line": 222,
    "comment": "/** \n * Returns the y-offset for the 3D effect.\n * @return The 3D effect.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.getWallPaint#232",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getWallPaint()",
    "snippet": "public Paint getWallPaint(){\n  return this.wallPaint;\n}",
    "begin_line": 232,
    "end_line": 234,
    "comment": "/** \n * Returns the paint used to highlight the left and bottom wall in the plot background.\n * @return The paint.\n * @see #setWallPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.setWallPaint#245",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.setWallPaint(java.awt.Paint)",
    "snippet": "public void setWallPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.wallPaint\u003dpaint;\n  fireChangeEvent();\n}",
    "begin_line": 245,
    "end_line": 251,
    "comment": "/** \n * Sets the paint used to hightlight the left and bottom walls in the plot background, and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getWallPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.initialise#267",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, int, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public CategoryItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,CategoryPlot plot,int rendererIndex,PlotRenderingInfo info){\n  Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  CategoryItemRendererState state\u003dsuper.initialise(g2,adjusted,plot,rendererIndex,info);\n  return state;\n}",
    "begin_line": 267,
    "end_line": 280,
    "comment": "/** \n * Initialises the renderer and returns a state object that will be passed to subsequent calls to the drawItem method.  This method gets called once at the start of the process of drawing a chart.\n * @param g2  the graphics device.\n * @param dataArea  the area in which the data is to be plotted.\n * @param plot  the plot.\n * @param rendererIndex  the renderer index.\n * @param info  collects chart rendering information for return to caller.\n * @return The renderer state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawBackground#289",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawBackground(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawBackground(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){\n  float x0\u003d(float)dataArea.getX();\n  float x1\u003dx0 + (float)Math.abs(this.xOffset);\n  float x3\u003d(float)dataArea.getMaxX();\n  float x2\u003dx3 - (float)Math.abs(this.xOffset);\n  float y0\u003d(float)dataArea.getMaxY();\n  float y1\u003dy0 - (float)Math.abs(this.yOffset);\n  float y3\u003d(float)dataArea.getMinY();\n  float y2\u003dy3 + (float)Math.abs(this.yOffset);\n  GeneralPath clip\u003dnew GeneralPath();\n  clip.moveTo(x0,y0);\n  clip.lineTo(x0,y2);\n  clip.lineTo(x1,y3);\n  clip.lineTo(x3,y3);\n  clip.lineTo(x3,y1);\n  clip.lineTo(x2,y0);\n  clip.closePath();\n  Composite originalComposite\u003dg2.getComposite();\n  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,plot.getBackgroundAlpha()));\n  Paint backgroundPaint\u003dplot.getBackgroundPaint();\n  if (backgroundPaint !\u003d null) {\n    g2.setPaint(backgroundPaint);\n    g2.fill(clip);\n  }\n  GeneralPath leftWall\u003dnew GeneralPath();\n  leftWall.moveTo(x0,y0);\n  leftWall.lineTo(x0,y2);\n  leftWall.lineTo(x1,y3);\n  leftWall.lineTo(x1,y1);\n  leftWall.closePath();\n  g2.setPaint(getWallPaint());\n  g2.fill(leftWall);\n  GeneralPath bottomWall\u003dnew GeneralPath();\n  bottomWall.moveTo(x0,y0);\n  bottomWall.lineTo(x1,y1);\n  bottomWall.lineTo(x3,y1);\n  bottomWall.lineTo(x2,y0);\n  bottomWall.closePath();\n  g2.setPaint(getWallPaint());\n  g2.fill(bottomWall);\n  g2.setPaint(Color.lightGray);\n  Line2D corner\u003dnew Line2D.Double(x0,y0,x1,y1);\n  g2.draw(corner);\n  corner.setLine(x1,y1,x1,y3);\n  g2.draw(corner);\n  corner.setLine(x1,y1,x3,y1);\n  g2.draw(corner);\n  Image backgroundImage\u003dplot.getBackgroundImage();\n  if (backgroundImage !\u003d null) {\n    Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX() + getXOffset(),dataArea.getY(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n    plot.drawBackgroundImage(g2,adjusted);\n  }\n  g2.setComposite(originalComposite);\n}",
    "begin_line": 289,
    "end_line": 361,
    "comment": "/** \n * Draws the background for the plot.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param dataArea  the area inside the axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawOutline#370",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawOutline(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawOutline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea){\n  float x0\u003d(float)dataArea.getX();\n  float x1\u003dx0 + (float)Math.abs(this.xOffset);\n  float x3\u003d(float)dataArea.getMaxX();\n  float x2\u003dx3 - (float)Math.abs(this.xOffset);\n  float y0\u003d(float)dataArea.getMaxY();\n  float y1\u003dy0 - (float)Math.abs(this.yOffset);\n  float y3\u003d(float)dataArea.getMinY();\n  float y2\u003dy3 + (float)Math.abs(this.yOffset);\n  GeneralPath clip\u003dnew GeneralPath();\n  clip.moveTo(x0,y0);\n  clip.lineTo(x0,y2);\n  clip.lineTo(x1,y3);\n  clip.lineTo(x3,y3);\n  clip.lineTo(x3,y1);\n  clip.lineTo(x2,y0);\n  clip.closePath();\n  Stroke outlineStroke\u003dplot.getOutlineStroke();\n  Paint outlinePaint\u003dplot.getOutlinePaint();\n  if ((outlineStroke !\u003d null) \u0026\u0026 (outlinePaint !\u003d null)) {\n    g2.setStroke(outlineStroke);\n    g2.setPaint(outlinePaint);\n    g2.draw(clip);\n  }\n}",
    "begin_line": 370,
    "end_line": 401,
    "comment": "/** \n * Draws the outline for the plot.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param dataArea  the area inside the axes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawDomainGridline#413",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawDomainGridline(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D, double)",
    "snippet": "public void drawDomainGridline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,double value){\n  Line2D line1\u003dnull;\n  Line2D line2\u003dnull;\n  PlotOrientation orientation\u003dplot.getOrientation();\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    double y0\u003dvalue;\n    double y1\u003dvalue - getYOffset();\n    double x0\u003ddataArea.getMinX();\n    double x1\u003dx0 + getXOffset();\n    double x2\u003ddataArea.getMaxX();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x2,y1);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    double x0\u003dvalue;\n    double x1\u003dvalue + getXOffset();\n    double y0\u003ddataArea.getMaxY();\n    double y1\u003dy0 - getYOffset();\n    double y2\u003ddataArea.getMinY();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x1,y2);\n  }\n  Paint paint\u003dplot.getDomainGridlinePaint();\n  Stroke stroke\u003dplot.getDomainGridlineStroke();\n  g2.setPaint(paint !\u003d null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n  g2.setStroke(stroke !\u003d null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n  g2.draw(line1);\n  g2.draw(line2);\n}",
    "begin_line": 413,
    "end_line": 446,
    "comment": "/** \n * Draws a grid line against the domain axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param dataArea  the area for plotting data (not yet adjusted for any3D effect).\n * @param value  the Java2D value at which the grid line should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawRangeGridline#459",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawRangeGridline(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double)",
    "snippet": "public void drawRangeGridline(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){\n  Range range\u003daxis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  Line2D line1\u003dnull;\n  Line2D line2\u003dnull;\n  PlotOrientation orientation\u003dplot.getOrientation();\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    double x0\u003daxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double x1\u003dx0 + getXOffset();\n    double y0\u003ddataArea.getMaxY();\n    double y1\u003dy0 - getYOffset();\n    double y2\u003ddataArea.getMinY();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x1,y2);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    double y0\u003daxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double y1\u003dy0 - getYOffset();\n    double x0\u003ddataArea.getMinX();\n    double x1\u003dx0 + getXOffset();\n    double x2\u003ddataArea.getMaxX();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x2,y1);\n  }\n  Paint paint\u003dplot.getRangeGridlinePaint();\n  Stroke stroke\u003dplot.getRangeGridlineStroke();\n  g2.setPaint(paint !\u003d null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n  g2.setStroke(stroke !\u003d null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n  g2.draw(line1);\n  g2.draw(line2);\n}",
    "begin_line": 459,
    "end_line": 502,
    "comment": "/** \n * Draws a grid line against the range axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param dataArea  the area for plotting data (not yet adjusted for any3D effect).\n * @param value  the value at which the grid line should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawRangeLine#520",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawRangeLine(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double, java.awt.Paint, java.awt.Stroke)",
    "snippet": "public void drawRangeLine(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){\n  Range range\u003daxis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  Line2D line1\u003dnull;\n  Line2D line2\u003dnull;\n  PlotOrientation orientation\u003dplot.getOrientation();\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    double x0\u003daxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double x1\u003dx0 + getXOffset();\n    double y0\u003ddataArea.getMaxY();\n    double y1\u003dy0 - getYOffset();\n    double y2\u003ddataArea.getMinY();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x1,y2);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    double y0\u003daxis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n    double y1\u003dy0 - getYOffset();\n    double x0\u003ddataArea.getMinX();\n    double x1\u003dx0 + getXOffset();\n    double x2\u003ddataArea.getMaxX();\n    line1\u003dnew Line2D.Double(x0,y0,x1,y1);\n    line2\u003dnew Line2D.Double(x1,y1,x2,y1);\n  }\n  g2.setPaint(paint);\n  g2.setStroke(stroke);\n  g2.draw(line1);\n  g2.draw(line2);\n}",
    "begin_line": 520,
    "end_line": 560,
    "comment": "/** \n * Draws a line perpendicular to the range axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param dataArea  the area for plotting data (not yet adjusted for any 3Deffect).\n * @param value  the value at which the grid line should be drawn.\n * @param paint  the paint.\n * @param stroke  the stroke.\n * @see #drawRangeGridline\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawRangeMarker#571",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawRangeMarker(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.Marker, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawRangeMarker(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Marker marker,Rectangle2D dataArea){\n  Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm\u003d(ValueMarker)marker;\n    double value\u003dvm.getValue();\n    Range range\u003daxis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    GeneralPath path\u003dnull;\n    PlotOrientation orientation\u003dplot.getOrientation();\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      float x\u003d(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n      float y\u003d(float)adjusted.getMaxY();\n      path\u003dnew GeneralPath();\n      path.moveTo(x,y);\n      path.lineTo((float)(x + getXOffset()),y - (float)getYOffset());\n      path.lineTo((float)(x + getXOffset()),(float)(adjusted.getMinY() - getYOffset()));\n      path.lineTo(x,(float)adjusted.getMinY());\n      path.closePath();\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      float y\u003d(float)axis.valueToJava2D(value,adjusted,plot.getRangeAxisEdge());\n      float x\u003d(float)dataArea.getX();\n      path\u003dnew GeneralPath();\n      path.moveTo(x,y);\n      path.lineTo(x + (float)this.xOffset,y - (float)this.yOffset);\n      path.lineTo((float)(adjusted.getMaxX() + this.xOffset),y - (float)this.yOffset);\n      path.lineTo((float)(adjusted.getMaxX()),y);\n      path.closePath();\n    }\n    g2.setPaint(marker.getPaint());\n    g2.fill(path);\n    g2.setPaint(marker.getOutlinePaint());\n    g2.draw(path);\n    String label\u003dmarker.getLabel();\n    RectangleAnchor anchor\u003dmarker.getLabelAnchor();\n    if (label !\u003d null) {\n      Font labelFont\u003dmarker.getLabelFont();\n      g2.setFont(labelFont);\n      g2.setPaint(marker.getLabelPaint());\n      Point2D coordinates\u003dcalculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,path.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);\n      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n  }\n else {\n    super.drawRangeMarker(g2,plot,axis,marker,adjusted);\n  }\n}",
    "begin_line": 571,
    "end_line": 641,
    "comment": "/** \n * Draws a range marker.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param marker  the marker.\n * @param dataArea  the area for plotting data (not including 3D effect).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.drawItem#660",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.category.CategoryItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.CategoryPlot, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.category.CategoryDataset, int, int, boolean, int)",
    "snippet": "public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset dataset,int row,int column,boolean selected,int pass){\n  Number dataValue\u003ddataset.getValue(row,column);\n  if (dataValue \u003d\u003d null) {\n    return;\n  }\n  double value\u003ddataValue.doubleValue();\n  Rectangle2D adjusted\u003dnew Rectangle2D.Double(dataArea.getX(),dataArea.getY() + getYOffset(),dataArea.getWidth() - getXOffset(),dataArea.getHeight() - getYOffset());\n  PlotOrientation orientation\u003dplot.getOrientation();\n  double barW0\u003dcalculateBarW0(plot,orientation,adjusted,domainAxis,state,row,column);\n  double[] barL0L1\u003dcalculateBarL0L1(value);\n  if (barL0L1 \u003d\u003d null) {\n    return;\n  }\n  RectangleEdge edge\u003dplot.getRangeAxisEdge();\n  double transL0\u003drangeAxis.valueToJava2D(barL0L1[0],adjusted,edge);\n  double transL1\u003drangeAxis.valueToJava2D(barL0L1[1],adjusted,edge);\n  double barL0\u003dMath.min(transL0,transL1);\n  double barLength\u003dMath.abs(transL1 - transL0);\n  Rectangle2D bar\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    bar\u003dnew Rectangle2D.Double(barL0,barW0,barLength,state.getBarWidth());\n  }\n else {\n    bar\u003dnew Rectangle2D.Double(barW0,barL0,state.getBarWidth(),barLength);\n  }\n  Paint itemPaint\u003dgetItemPaint(row,column,selected);\n  g2.setPaint(itemPaint);\n  g2.fill(bar);\n  double x0\u003dbar.getMinX();\n  double x1\u003dx0 + getXOffset();\n  double x2\u003dbar.getMaxX();\n  double x3\u003dx2 + getXOffset();\n  double y0\u003dbar.getMinY() - getYOffset();\n  double y1\u003dbar.getMinY();\n  double y2\u003dbar.getMaxY() - getYOffset();\n  double y3\u003dbar.getMaxY();\n  GeneralPath bar3dRight\u003dnull;\n  GeneralPath bar3dTop\u003dnull;\n  if (barLength \u003e 0.0) {\n    bar3dRight\u003dnew GeneralPath();\n    bar3dRight.moveTo((float)x2,(float)y3);\n    bar3dRight.lineTo((float)x2,(float)y1);\n    bar3dRight.lineTo((float)x3,(float)y0);\n    bar3dRight.lineTo((float)x3,(float)y2);\n    bar3dRight.closePath();\n    if (itemPaint instanceof Color) {\n      g2.setPaint(((Color)itemPaint).darker());\n    }\n    g2.fill(bar3dRight);\n  }\n  bar3dTop\u003dnew GeneralPath();\n  bar3dTop.moveTo((float)x0,(float)y1);\n  bar3dTop.lineTo((float)x1,(float)y0);\n  bar3dTop.lineTo((float)x3,(float)y0);\n  bar3dTop.lineTo((float)x2,(float)y1);\n  bar3dTop.closePath();\n  g2.fill(bar3dTop);\n  if (isDrawBarOutline() \u0026\u0026 state.getBarWidth() \u003e BAR_OUTLINE_WIDTH_THRESHOLD) {\n    g2.setStroke(getItemOutlineStroke(row,column,selected));\n    g2.setPaint(getItemOutlinePaint(row,column,selected));\n    g2.draw(bar);\n    if (bar3dRight !\u003d null) {\n      g2.draw(bar3dRight);\n    }\n    if (bar3dTop !\u003d null) {\n      g2.draw(bar3dTop);\n    }\n  }\n  CategoryItemLabelGenerator generator\u003dgetItemLabelGenerator(row,column,selected);\n  if (generator !\u003d null \u0026\u0026 isItemLabelVisible(row,column,selected)) {\n    drawItemLabelForBar(g2,plot,dataset,row,column,selected,generator,bar,(value \u003c 0.0));\n  }\n  EntityCollection entities\u003dstate.getEntityCollection();\n  if (entities !\u003d null) {\n    GeneralPath barOutline\u003dnew GeneralPath();\n    barOutline.moveTo((float)x0,(float)y3);\n    barOutline.lineTo((float)x0,(float)y1);\n    barOutline.lineTo((float)x1,(float)y0);\n    barOutline.lineTo((float)x3,(float)y0);\n    barOutline.lineTo((float)x3,(float)y2);\n    barOutline.lineTo((float)x2,(float)y3);\n    barOutline.closePath();\n    addEntity(entities,barOutline,dataset,row,column,selected);\n  }\n}",
    "begin_line": 660,
    "end_line": 775,
    "comment": "/** \n * Draws a 3D bar to represent one data item.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the area for plotting the data.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the dataset.\n * @param row  the row index (zero-based).\n * @param column  the column index (zero-based).\n * @param selected  is the item selected?\n * @param pass  the pass index.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.equals#784",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof BarRenderer3D)) {\n    return false;\n  }\n  BarRenderer3D that\u003d(BarRenderer3D)obj;\n  if (this.xOffset !\u003d that.xOffset) {\n    return false;\n  }\n  if (this.yOffset !\u003d that.yOffset) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 784,
    "end_line": 802,
    "comment": "/** \n * Tests this renderer for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.writeObject#811",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.wallPaint,stream);\n}",
    "begin_line": 811,
    "end_line": 814,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BarRenderer3D.readObject#824",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/BarRenderer3D.java",
    "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
    "signature": "org.jfree.chart.renderer.category.BarRenderer3D.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.wallPaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 824,
    "end_line": 828,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.GradientBarPainter#77",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.GradientBarPainter()",
    "snippet": "public GradientBarPainter(){\n  this(0.10,0.20,0.80);\n}",
    "begin_line": 77,
    "end_line": 79,
    "comment": "/** \n * Creates a new instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.GradientBarPainter#88",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.GradientBarPainter(double, double, double)",
    "snippet": "public GradientBarPainter(double g1,double g2,double g3){\n  this.g1\u003dg1;\n  this.g2\u003dg2;\n  this.g3\u003dg3;\n}",
    "begin_line": 88,
    "end_line": 92,
    "comment": "/** \n * Creates a new instance.\n * @param g1\n * @param g2\n * @param g3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.paintBar#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.paintBar(java.awt.Graphics2D, org.jfree.chart.renderer.category.BarRenderer, int, int, boolean, java.awt.geom.RectangularShape, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public void paintBar(Graphics2D g2,BarRenderer renderer,int row,int column,boolean selected,RectangularShape bar,RectangleEdge base){\n  Paint itemPaint\u003drenderer.getItemPaint(row,column,selected);\n  Color c0, c1;\n  if (itemPaint instanceof Color) {\n    c0\u003d(Color)itemPaint;\n    c1\u003dc0.brighter();\n  }\n else   if (itemPaint instanceof GradientPaint) {\n    GradientPaint gp\u003d(GradientPaint)itemPaint;\n    c0\u003dgp.getColor1();\n    c1\u003dgp.getColor2();\n  }\n else {\n    c0\u003dColor.blue;\n    c1\u003dColor.blue.brighter();\n  }\n  if (c0.getAlpha() \u003d\u003d 0) {\n    return;\n  }\n  if (base \u003d\u003d RectangleEdge.TOP || base \u003d\u003d RectangleEdge.BOTTOM) {\n    Rectangle2D[] regions\u003dsplitVerticalBar(bar,this.g1,this.g2,this.g3);\n    GradientPaint gp\u003dnew GradientPaint((float)regions[0].getMinX(),0.0f,c0,(float)regions[0].getMaxX(),0.0f,Color.white);\n    g2.setPaint(gp);\n    g2.fill(regions[0]);\n    gp\u003dnew GradientPaint((float)regions[1].getMinX(),0.0f,Color.white,(float)regions[1].getMaxX(),0.0f,c0);\n    g2.setPaint(gp);\n    g2.fill(regions[1]);\n    gp\u003dnew GradientPaint((float)regions[2].getMinX(),0.0f,c0,(float)regions[2].getMaxX(),0.0f,c1);\n    g2.setPaint(gp);\n    g2.fill(regions[2]);\n    gp\u003dnew GradientPaint((float)regions[3].getMinX(),0.0f,c1,(float)regions[3].getMaxX(),0.0f,c0);\n    g2.setPaint(gp);\n    g2.fill(regions[3]);\n  }\n else   if (base \u003d\u003d RectangleEdge.LEFT || base \u003d\u003d RectangleEdge.RIGHT) {\n    Rectangle2D[] regions\u003dsplitHorizontalBar(bar,this.g1,this.g2,this.g3);\n    GradientPaint gp\u003dnew GradientPaint(0.0f,(float)regions[0].getMinY(),c0,0.0f,(float)regions[0].getMaxX(),Color.white);\n    g2.setPaint(gp);\n    g2.fill(regions[0]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[1].getMinY(),Color.white,0.0f,(float)regions[1].getMaxY(),c0);\n    g2.setPaint(gp);\n    g2.fill(regions[1]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[2].getMinY(),c0,0.0f,(float)regions[2].getMaxY(),c1);\n    g2.setPaint(gp);\n    g2.fill(regions[2]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[3].getMinY(),c1,0.0f,(float)regions[3].getMaxY(),c0);\n    g2.setPaint(gp);\n    g2.fill(regions[3]);\n  }\n  if (renderer.isDrawBarOutline()) {\n    Stroke stroke\u003drenderer.getItemOutlineStroke(row,column,selected);\n    Paint paint\u003drenderer.getItemOutlinePaint(row,column,selected);\n    if (stroke !\u003d null \u0026\u0026 paint !\u003d null) {\n      g2.setStroke(stroke);\n      g2.setPaint(paint);\n      g2.draw(bar);\n    }\n  }\n}",
    "begin_line": 106,
    "end_line": 195,
    "comment": "/** \n * Paints a single bar instance.\n * @param g2  the graphics target.\n * @param renderer  the renderer.\n * @param row  the row index.\n * @param column  the column index.\n * @param selected  is the item selected?\n * @param bar  the bar\n * @param base  indicates which side of the rectangle is the base of thebar.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.paintBarShadow#209",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.paintBarShadow(java.awt.Graphics2D, org.jfree.chart.renderer.category.BarRenderer, int, int, boolean, java.awt.geom.RectangularShape, org.jfree.chart.util.RectangleEdge, boolean)",
    "snippet": "public void paintBarShadow(Graphics2D g2,BarRenderer renderer,int row,int column,boolean selected,RectangularShape bar,RectangleEdge base,boolean pegShadow){\n  Paint itemPaint\u003drenderer.getItemPaint(row,column,selected);\n  if (itemPaint instanceof Color) {\n    Color c\u003d(Color)itemPaint;\n    if (c.getAlpha() \u003d\u003d 0) {\n      return;\n    }\n  }\n  RectangularShape shadow\u003dcreateShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);\n  g2.setPaint(renderer.getShadowPaint());\n  g2.fill(shadow);\n}",
    "begin_line": 209,
    "end_line": 228,
    "comment": "/** \n * Paints a single bar instance.\n * @param g2  the graphics target.\n * @param renderer  the renderer.\n * @param row  the row index.\n * @param column  the column index.\n * @param bar  the bar\n * @param base  indicates which side of the rectangle is the base of thebar.\n * @param pegShadow  peg the shadow to the base of the bar?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.createShadow#241",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.createShadow(java.awt.geom.RectangularShape, double, double, org.jfree.chart.util.RectangleEdge, boolean)",
    "snippet": "private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){\n  double x0\u003dbar.getMinX();\n  double x1\u003dbar.getMaxX();\n  double y0\u003dbar.getMinY();\n  double y1\u003dbar.getMaxY();\n  if (base \u003d\u003d RectangleEdge.TOP) {\n    x0+\u003dxOffset;\n    x1+\u003dxOffset;\n    if (!pegShadow) {\n      y0+\u003dyOffset;\n    }\n    y1+\u003dyOffset;\n  }\n else   if (base \u003d\u003d RectangleEdge.BOTTOM) {\n    x0+\u003dxOffset;\n    x1+\u003dxOffset;\n    y0+\u003dyOffset;\n    if (!pegShadow) {\n      y1+\u003dyOffset;\n    }\n  }\n else   if (base \u003d\u003d RectangleEdge.LEFT) {\n    if (!pegShadow) {\n      x0+\u003dxOffset;\n    }\n    x1+\u003dxOffset;\n    y0+\u003dyOffset;\n    y1+\u003dyOffset;\n  }\n else   if (base \u003d\u003d RectangleEdge.RIGHT) {\n    x0+\u003dxOffset;\n    if (!pegShadow) {\n      x1+\u003dxOffset;\n    }\n    y0+\u003dyOffset;\n    y1+\u003dyOffset;\n  }\n  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));\n}",
    "begin_line": 241,
    "end_line": 280,
    "comment": "/** \n * Creates a shadow for the bar.\n * @param bar  the bar shape.\n * @param xOffset  the x-offset for the shadow.\n * @param yOffset  the y-offset for the shadow.\n * @param base  the edge that is the base of the bar.\n * @param pegShadow  peg the shadow to the base?\n * @return A rectangle for the shadow.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.splitVerticalBar#293",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.splitVerticalBar(java.awt.geom.RectangularShape, double, double, double)",
    "snippet": "private Rectangle2D[] splitVerticalBar(RectangularShape bar,double a,double b,double c){\n  Rectangle2D[] result\u003dnew Rectangle2D[4];\n  double x0\u003dbar.getMinX();\n  double x1\u003dMath.rint(x0 + (bar.getWidth() * a));\n  double x2\u003dMath.rint(x0 + (bar.getWidth() * b));\n  double x3\u003dMath.rint(x0 + (bar.getWidth() * c));\n  result[0]\u003dnew Rectangle2D.Double(bar.getMinX(),bar.getMinY(),x1 - x0,bar.getHeight());\n  result[1]\u003dnew Rectangle2D.Double(x1,bar.getMinY(),x2 - x1,bar.getHeight());\n  result[2]\u003dnew Rectangle2D.Double(x2,bar.getMinY(),x3 - x2,bar.getHeight());\n  result[3]\u003dnew Rectangle2D.Double(x3,bar.getMinY(),bar.getMaxX() - x3,bar.getHeight());\n  return result;\n}",
    "begin_line": 293,
    "end_line": 309,
    "comment": "/** \n * Splits a bar into subregions (elsewhere, these subregions will have different gradients applied to them).\n * @param bar  the bar shape.\n * @param a  the first division.\n * @param b  the second division.\n * @param c  the third division.\n * @return An array containing four subregions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.splitHorizontalBar#322",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.splitHorizontalBar(java.awt.geom.RectangularShape, double, double, double)",
    "snippet": "private Rectangle2D[] splitHorizontalBar(RectangularShape bar,double a,double b,double c){\n  Rectangle2D[] result\u003dnew Rectangle2D[4];\n  double y0\u003dbar.getMinY();\n  double y1\u003dMath.rint(y0 + (bar.getHeight() * a));\n  double y2\u003dMath.rint(y0 + (bar.getHeight() * b));\n  double y3\u003dMath.rint(y0 + (bar.getHeight() * c));\n  result[0]\u003dnew Rectangle2D.Double(bar.getMinX(),bar.getMinY(),bar.getWidth(),y1 - y0);\n  result[1]\u003dnew Rectangle2D.Double(bar.getMinX(),y1,bar.getWidth(),y2 - y1);\n  result[2]\u003dnew Rectangle2D.Double(bar.getMinX(),y2,bar.getWidth(),y3 - y2);\n  result[3]\u003dnew Rectangle2D.Double(bar.getMinX(),y3,bar.getWidth(),bar.getMaxY() - y3);\n  return result;\n}",
    "begin_line": 322,
    "end_line": 338,
    "comment": "/** \n * Splits a bar into subregions (elsewhere, these subregions will have different gradients applied to them).\n * @param bar  the bar shape.\n * @param a  the first division.\n * @param b  the second division.\n * @param c  the third division.\n * @return An array containing four subregions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.equals#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof GradientBarPainter)) {\n    return false;\n  }\n  GradientBarPainter that\u003d(GradientBarPainter)obj;\n  if (this.g1 !\u003d that.g1) {\n    return false;\n  }\n  if (this.g2 !\u003d that.g2) {\n    return false;\n  }\n  if (this.g3 !\u003d that.g3) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 347,
    "end_line": 365,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the obj (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientBarPainter.hashCode#372",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/category/GradientBarPainter.java",
    "class_name": "org.jfree.chart.renderer.category.GradientBarPainter",
    "signature": "org.jfree.chart.renderer.category.GradientBarPainter.hashCode()",
    "snippet": "public int hashCode(){\n  int hash\u003d37;\n  hash\u003dHashUtilities.hashCode(hash,this.g1);\n  hash\u003dHashUtilities.hashCode(hash,this.g2);\n  hash\u003dHashUtilities.hashCode(hash,this.g3);\n  return hash;\n}",
    "begin_line": 372,
    "end_line": 378,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.AbstractXYItemRenderer#231",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.AbstractXYItemRenderer()",
    "snippet": "protected AbstractXYItemRenderer(){\n  super();\n  this.itemLabelGeneratorList\u003dnew ObjectList();\n  this.toolTipGeneratorList\u003dnew ObjectList();\n  this.urlGeneratorList\u003dnew ObjectList();\n  this.baseURLGenerator\u003dnull;\n  this.backgroundAnnotations\u003dnew java.util.ArrayList();\n  this.foregroundAnnotations\u003dnew java.util.ArrayList();\n  this.legendItemLabelGenerator\u003dnew StandardXYSeriesLabelGenerator(\"{0}\");\n}",
    "begin_line": 231,
    "end_line": 241,
    "comment": "/** \n * Creates a renderer where the tooltip generator and the URL generator are both \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getPassCount#250",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getPassCount()",
    "snippet": "public int getPassCount(){\n  return 1;\n}",
    "begin_line": 250,
    "end_line": 252,
    "comment": "/** \n * Returns the number of passes through the data that the renderer requires in order to draw the chart.  Most charts will require a single pass, but some require two passes.\n * @return The pass count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getPlot#259",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getPlot()",
    "snippet": "public XYPlot getPlot(){\n  return this.plot;\n}",
    "begin_line": 259,
    "end_line": 261,
    "comment": "/** \n * Returns the plot that the renderer is assigned to.\n * @return The plot (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setPlot#268",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setPlot(org.jfree.chart.plot.XYPlot)",
    "snippet": "public void setPlot(XYPlot plot){\n  this.plot\u003dplot;\n}",
    "begin_line": 268,
    "end_line": 270,
    "comment": "/** \n * Sets the plot that the renderer is assigned to.\n * @param plot  the plot (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.initialise#289",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){\n  XYItemRendererState state\u003dnew XYItemRendererState(info);\n  return state;\n}",
    "begin_line": 289,
    "end_line": 298,
    "comment": "/** \n * Initialises the renderer and returns a state object that should be passed to all subsequent calls to the drawItem() method. \u003cP\u003e This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.\n * @param g2  the graphics device.\n * @param dataArea  the area inside the axes.\n * @param plot  the plot.\n * @param data  the data.\n * @param info  an optional info collection object to return data back tothe caller.\n * @return The renderer state (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getItemLabelGenerator#316",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getItemLabelGenerator(int, int, boolean)",
    "snippet": "public XYItemLabelGenerator getItemLabelGenerator(int series,int item,boolean selected){\n  XYItemLabelGenerator generator\u003d(XYItemLabelGenerator)this.itemLabelGeneratorList.get(series);\n  if (generator \u003d\u003d null) {\n    generator\u003dthis.baseItemLabelGenerator;\n  }\n  return generator;\n}",
    "begin_line": 316,
    "end_line": 324,
    "comment": "/** \n * Returns the label generator for a data item.  This implementation simply passes control to the  {@link #getSeriesItemLabelGenerator(int)} method.If, for some reason, you want a different generator for individual items, you can override this method.\n * @param series  the series index (zero based).\n * @param item  the item index (zero based).\n * @param selected  is the item selected?\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getSeriesItemLabelGenerator#335",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getSeriesItemLabelGenerator(int)",
    "snippet": "public XYItemLabelGenerator getSeriesItemLabelGenerator(int series){\n  return (XYItemLabelGenerator)this.itemLabelGeneratorList.get(series);\n}",
    "begin_line": 335,
    "end_line": 337,
    "comment": "/** \n * Returns the item label generator for a series.\n * @param series  the series index (zero based).\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesItemLabelGenerator(int,XYItemLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesItemLabelGenerator#348",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesItemLabelGenerator(int, org.jfree.chart.labels.XYItemLabelGenerator)",
    "snippet": "public void setSeriesItemLabelGenerator(int series,XYItemLabelGenerator generator){\n  this.itemLabelGeneratorList.set(series,generator);\n  fireChangeEvent();\n}",
    "begin_line": 348,
    "end_line": 352,
    "comment": "/** \n * Sets the item label generator for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesItemLabelGenerator(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesItemLabelGenerator#367",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesItemLabelGenerator(int, org.jfree.chart.labels.XYItemLabelGenerator, boolean)",
    "snippet": "public void setSeriesItemLabelGenerator(int series,XYItemLabelGenerator generator,boolean notify){\n  this.itemLabelGeneratorList.set(series,generator);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 367,
    "end_line": 373,
    "comment": "/** \n * Sets the item label generator for the specified series and, if requested, sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param series  the series index.\n * @param generator  the label generator (\u003ccode\u003enull\u003c/code\u003e permitted);\n * @param notify  notify listeners?\n * @see #getSeriesItemLabelGenerator(int)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getBaseItemLabelGenerator#380",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getBaseItemLabelGenerator()",
    "snippet": "public XYItemLabelGenerator getBaseItemLabelGenerator(){\n  return this.baseItemLabelGenerator;\n}",
    "begin_line": 380,
    "end_line": 382,
    "comment": "/** \n * Returns the base item label generator.\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseItemLabelGenerator#390",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)",
    "snippet": "public void setBaseItemLabelGenerator(XYItemLabelGenerator generator){\n  setBaseItemLabelGenerator(generator,true);\n}",
    "begin_line": 390,
    "end_line": 392,
    "comment": "/** \n * Sets the base item label generator and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseItemLabelGenerator#405",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator, boolean)",
    "snippet": "public void setBaseItemLabelGenerator(XYItemLabelGenerator generator,boolean notify){\n  this.baseItemLabelGenerator\u003dgenerator;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 405,
    "end_line": 411,
    "comment": "/** \n * Sets the default item label generator and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @since 1.2.0\n * @see #getBaseItemLabelGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getToolTipGenerator#428",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int, boolean)",
    "snippet": "public XYToolTipGenerator getToolTipGenerator(int series,int item,boolean selected){\n  XYToolTipGenerator generator\u003d(XYToolTipGenerator)this.toolTipGeneratorList.get(series);\n  if (generator \u003d\u003d null) {\n    generator\u003dthis.baseToolTipGenerator;\n  }\n  return generator;\n}",
    "begin_line": 428,
    "end_line": 436,
    "comment": "/** \n * Returns the tool tip generator for a data item.  If, for some reason, you want a different generator for individual items, you can override this method.\n * @param series  the series index (zero based).\n * @param item  the item index (zero based).\n * @param selected  is the item selected?\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getSeriesToolTipGenerator#447",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getSeriesToolTipGenerator(int)",
    "snippet": "public XYToolTipGenerator getSeriesToolTipGenerator(int series){\n  return (XYToolTipGenerator)this.toolTipGeneratorList.get(series);\n}",
    "begin_line": 447,
    "end_line": 449,
    "comment": "/** \n * Returns the tool tip generator for a series.\n * @param series  the series index (zero based).\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesToolTipGenerator(int,XYToolTipGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesToolTipGenerator#458",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)",
    "snippet": "public void setSeriesToolTipGenerator(int series,XYToolTipGenerator generator){\n  setSeriesToolTipGenerator(series,generator,true);\n}",
    "begin_line": 458,
    "end_line": 461,
    "comment": "/** \n * Sets the tool tip generator for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesToolTipGenerator#473",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator, boolean)",
    "snippet": "public void setSeriesToolTipGenerator(int series,XYToolTipGenerator generator,boolean notify){\n  this.toolTipGeneratorList.set(series,generator);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 473,
    "end_line": 479,
    "comment": "/** \n * Sets the tool tip generator for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero based).\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getBaseToolTipGenerator#488",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getBaseToolTipGenerator()",
    "snippet": "public XYToolTipGenerator getBaseToolTipGenerator(){\n  return this.baseToolTipGenerator;\n}",
    "begin_line": 488,
    "end_line": 490,
    "comment": "/** \n * Returns the base tool tip generator.\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseToolTipGenerator(XYToolTipGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseToolTipGenerator#500",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)",
    "snippet": "public void setBaseToolTipGenerator(XYToolTipGenerator generator){\n  setBaseToolTipGenerator(generator,true);\n}",
    "begin_line": 500,
    "end_line": 502,
    "comment": "/** \n * Sets the base tool tip generator and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBaseToolTipGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseToolTipGenerator#515",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator, boolean)",
    "snippet": "public void setBaseToolTipGenerator(XYToolTipGenerator generator,boolean notify){\n  this.baseToolTipGenerator\u003dgenerator;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 515,
    "end_line": 521,
    "comment": "/** \n * Sets the default tool tip generator and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getBaseToolTipGenerator()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getURLGenerator#536",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getURLGenerator(int, int, boolean)",
    "snippet": "public XYURLGenerator getURLGenerator(int series,int item,boolean selected){\n  XYURLGenerator generator\u003d(XYURLGenerator)this.urlGeneratorList.get(series);\n  if (generator \u003d\u003d null) {\n    generator\u003dthis.baseURLGenerator;\n  }\n  return generator;\n}",
    "begin_line": 536,
    "end_line": 544,
    "comment": "/** \n * Returns the URL generator for the specified item.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  is the item selected?\n * @return The generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getSeriesURLGenerator#557",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getSeriesURLGenerator(int)",
    "snippet": "public XYURLGenerator getSeriesURLGenerator(int series){\n  return (XYURLGenerator)this.urlGeneratorList.get(series);\n}",
    "begin_line": 557,
    "end_line": 559,
    "comment": "/** \n * Returns the URL generator for the specified series, if one is defined.\n * @param series  the series index.\n * @return The URL generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesURLGenerator(int,XYURLGenerator)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesURLGenerator#572",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesURLGenerator(int, org.jfree.chart.urls.XYURLGenerator)",
    "snippet": "public void setSeriesURLGenerator(int series,XYURLGenerator generator){\n  setSeriesURLGenerator(series,generator,true);\n}",
    "begin_line": 572,
    "end_line": 574,
    "comment": "/** \n * Sets the URL generator for the specified series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted)\n * @see #getSeriesURLGenerator(int)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setSeriesURLGenerator#588",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesURLGenerator(int, org.jfree.chart.urls.XYURLGenerator, boolean)",
    "snippet": "public void setSeriesURLGenerator(int series,XYURLGenerator generator,boolean notify){\n  this.toolTipGeneratorList.set(series,generator);\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 588,
    "end_line": 594,
    "comment": "/** \n * Sets the URL generator for the specified series and, if requested, sends a  {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n * @see #getSeriesURLGenerator(int)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getBaseURLGenerator#605",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getBaseURLGenerator()",
    "snippet": "public XYURLGenerator getBaseURLGenerator(){\n  return this.baseURLGenerator;\n}",
    "begin_line": 605,
    "end_line": 607,
    "comment": "/** \n * Returns the default URL generator.\n * @return The default URL generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setBaseURLGenerator(XYURLGenerator)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseURLGenerator#619",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator)",
    "snippet": "public void setBaseURLGenerator(XYURLGenerator generator){\n  setBaseURLGenerator(generator,true);\n}",
    "begin_line": 619,
    "end_line": 621,
    "comment": "/** \n * Sets the default URL generator and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getBaseURLGenerator()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setBaseURLGenerator#634",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.XYURLGenerator, boolean)",
    "snippet": "public void setBaseURLGenerator(XYURLGenerator generator,boolean notify){\n  this.baseURLGenerator\u003dgenerator;\n  if (notify) {\n    fireChangeEvent();\n  }\n}",
    "begin_line": 634,
    "end_line": 639,
    "comment": "/** \n * Sets the default URL generator and, if requested, sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listener?\n * @see #getBaseURLGenerator()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.addAnnotation#650",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation(org.jfree.chart.annotations.XYAnnotation)",
    "snippet": "public void addAnnotation(XYAnnotation annotation){\n  addAnnotation(annotation,Layer.FOREGROUND);\n}",
    "begin_line": 650,
    "end_line": 653,
    "comment": "/** \n * Adds an annotation and sends a  {@link RendererChangeEvent} to allregistered listeners.  The annotation is added to the foreground layer.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.addAnnotation#662",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation(org.jfree.chart.annotations.XYAnnotation, org.jfree.chart.util.Layer)",
    "snippet": "public void addAnnotation(XYAnnotation annotation,Layer layer){\n  if (annotation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027annotation\u0027 argument.\");\n  }\n  if (layer.equals(Layer.FOREGROUND)) {\n    this.foregroundAnnotations.add(annotation);\n    fireChangeEvent();\n  }\n else   if (layer.equals(Layer.BACKGROUND)) {\n    this.backgroundAnnotations.add(annotation);\n    fireChangeEvent();\n  }\n else {\n    throw new RuntimeException(\"Unknown layer.\");\n  }\n}",
    "begin_line": 662,
    "end_line": 678,
    "comment": "/** \n * Adds an annotation to the specified layer and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param annotation  the annotation (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param layer  the layer (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.removeAnnotation#689",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.removeAnnotation(org.jfree.chart.annotations.XYAnnotation)",
    "snippet": "public boolean removeAnnotation(XYAnnotation annotation){\n  boolean removed\u003dthis.foregroundAnnotations.remove(annotation);\n  removed\u003dremoved \u0026 this.backgroundAnnotations.remove(annotation);\n  fireChangeEvent();\n  return removed;\n}",
    "begin_line": 689,
    "end_line": 694,
    "comment": "/** \n * Removes the specified annotation and sends a  {@link RendererChangeEvent}to all registered listeners.\n * @param annotation  the annotation to remove (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @return A boolean to indicate whether or not the annotation wassuccessfully removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.removeAnnotations#700",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.removeAnnotations()",
    "snippet": "public void removeAnnotations(){\n  this.foregroundAnnotations.clear();\n  this.backgroundAnnotations.clear();\n  fireChangeEvent();\n}",
    "begin_line": 700,
    "end_line": 704,
    "comment": "/** \n * Removes all annotations and sends a  {@link RendererChangeEvent}to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getAnnotations#715",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getAnnotations()",
    "snippet": "public Collection getAnnotations(){\n  List result\u003dnew java.util.ArrayList(this.foregroundAnnotations);\n  result.addAll(this.backgroundAnnotations);\n  return result;\n}",
    "begin_line": 715,
    "end_line": 719,
    "comment": "/** \n * Returns a collection of the annotations that are assigned to the renderer.\n * @return A collection of annotations (possibly empty but never\u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getLegendItemLabelGenerator#728",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemLabelGenerator()",
    "snippet": "public XYSeriesLabelGenerator getLegendItemLabelGenerator(){\n  return this.legendItemLabelGenerator;\n}",
    "begin_line": 728,
    "end_line": 730,
    "comment": "/** \n * Returns the legend item label generator.\n * @return The label generator (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendItemLabelGenerator(XYSeriesLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setLegendItemLabelGenerator#740",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)",
    "snippet": "public void setLegendItemLabelGenerator(XYSeriesLabelGenerator generator){\n  if (generator \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027generator\u0027 argument.\");\n  }\n  this.legendItemLabelGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 740,
    "end_line": 746,
    "comment": "/** \n * Sets the legend item label generator and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendItemLabelGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getLegendItemToolTipGenerator#755",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemToolTipGenerator()",
    "snippet": "public XYSeriesLabelGenerator getLegendItemToolTipGenerator(){\n  return this.legendItemToolTipGenerator;\n}",
    "begin_line": 755,
    "end_line": 757,
    "comment": "/** \n * Returns the legend item tool tip generator.\n * @return The tool tip generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendItemToolTipGenerator(XYSeriesLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setLegendItemToolTipGenerator#767",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)",
    "snippet": "public void setLegendItemToolTipGenerator(XYSeriesLabelGenerator generator){\n  this.legendItemToolTipGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 767,
    "end_line": 771,
    "comment": "/** \n * Sets the legend item tool tip generator and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLegendItemToolTipGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getLegendItemURLGenerator#780",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItemURLGenerator()",
    "snippet": "public XYSeriesLabelGenerator getLegendItemURLGenerator(){\n  return this.legendItemURLGenerator;\n}",
    "begin_line": 780,
    "end_line": 782,
    "comment": "/** \n * Returns the legend item URL generator.\n * @return The URL generator (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendItemURLGenerator(XYSeriesLabelGenerator)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.setLegendItemURLGenerator#792",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)",
    "snippet": "public void setLegendItemURLGenerator(XYSeriesLabelGenerator generator){\n  this.legendItemURLGenerator\u003dgenerator;\n  fireChangeEvent();\n}",
    "begin_line": 792,
    "end_line": 795,
    "comment": "/** \n * Sets the legend item URL generator and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param generator  the generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getLegendItemURLGenerator()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.findDomainBounds#808",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public Range findDomainBounds(XYDataset dataset){\n  return findDomainBounds(dataset,false);\n}",
    "begin_line": 808,
    "end_line": 810,
    "comment": "/** \n * Returns the lower and upper bounds (range) of the x-values in the specified dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003eor empty).\n * @see #findRangeBounds(XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.findDomainBounds#824",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "protected Range findDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    return null;\n  }\n  if (getDataBoundsIncludesVisibleSeriesOnly()) {\n    List visibleSeriesKeys\u003dnew ArrayList();\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      if (isSeriesVisible(s)) {\n        visibleSeriesKeys.add(dataset.getSeriesKey(s));\n      }\n    }\n    return DatasetUtilities.findDomainBounds(dataset,visibleSeriesKeys,includeInterval);\n  }\n else {\n    return DatasetUtilities.findDomainBounds(dataset,includeInterval);\n  }\n}",
    "begin_line": 824,
    "end_line": 843,
    "comment": "/** \n * Returns the lower and upper bounds (range) of the x-values in the specified dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param includeInterval  include the interval (if any) for the dataset?\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003eor empty).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.findRangeBounds#856",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public Range findRangeBounds(XYDataset dataset){\n  return findRangeBounds(dataset,false);\n}",
    "begin_line": 856,
    "end_line": 858,
    "comment": "/** \n * Returns the range of values the renderer requires to display all the items from the specified dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003eor empty).\n * @see #findDomainBounds(XYDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.findRangeBounds#872",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findRangeBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "protected Range findRangeBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    return null;\n  }\n  if (getDataBoundsIncludesVisibleSeriesOnly()) {\n    List visibleSeriesKeys\u003dnew ArrayList();\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      if (isSeriesVisible(s)) {\n        visibleSeriesKeys.add(dataset.getSeriesKey(s));\n      }\n    }\n    Range xRange\u003dnull;\n    XYPlot p\u003dgetPlot();\n    if (p !\u003d null) {\n      ValueAxis xAxis\u003dnull;\n      int index\u003dp.getIndexOf(this);\n      if (index \u003e\u003d 0) {\n        xAxis\u003dplot.getDomainAxisForDataset(index);\n      }\n      if (xAxis !\u003d null) {\n        xRange\u003dxAxis.getRange();\n      }\n    }\n    if (xRange \u003d\u003d null) {\n      xRange\u003dnew Range(Double.NEGATIVE_INFINITY,Double.POSITIVE_INFINITY);\n    }\n    return DatasetUtilities.findRangeBounds(dataset,visibleSeriesKeys,xRange,includeInterval);\n  }\n else {\n    return DatasetUtilities.findRangeBounds(dataset,includeInterval);\n  }\n}",
    "begin_line": 872,
    "end_line": 909,
    "comment": "/** \n * Returns the range of values the renderer requires to display all the items from the specified dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param includeInterval  include the interval (if any) for the dataset?\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset is \u003ccode\u003enull\u003c/code\u003eor empty).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getLegendItems#917",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItems()",
    "snippet": "public LegendItemCollection getLegendItems(){\n  if (this.plot \u003d\u003d null) {\n    return new LegendItemCollection();\n  }\n  LegendItemCollection result\u003dnew LegendItemCollection();\n  int index\u003dthis.plot.getIndexOf(this);\n  XYDataset dataset\u003dthis.plot.getDataset(index);\n  if (dataset !\u003d null) {\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int i\u003d0; i \u003c seriesCount; i++) {\n      if (isSeriesVisibleInLegend(i)) {\n        LegendItem item\u003dgetLegendItem(index,i);\n        if (item !\u003d null) {\n          result.add(item);\n        }\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 917,
    "end_line": 937,
    "comment": "/** \n * Returns a (possibly empty) collection of legend items for the series that this renderer is responsible for drawing.\n * @return The legend item collection (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getLegendItem#948",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItem(int, int)",
    "snippet": "public LegendItem getLegendItem(int datasetIndex,int series){\n  XYPlot xyplot\u003dgetPlot();\n  if (xyplot \u003d\u003d null) {\n    return null;\n  }\n  XYDataset dataset\u003dxyplot.getDataset(datasetIndex);\n  if (dataset \u003d\u003d null) {\n    return null;\n  }\n  String label\u003dthis.legendItemLabelGenerator.generateLabel(dataset,series);\n  String description\u003dlabel;\n  String toolTipText\u003dnull;\n  if (getLegendItemToolTipGenerator() !\u003d null) {\n    toolTipText\u003dgetLegendItemToolTipGenerator().generateLabel(dataset,series);\n  }\n  String urlText\u003dnull;\n  if (getLegendItemURLGenerator() !\u003d null) {\n    urlText\u003dgetLegendItemURLGenerator().generateLabel(dataset,series);\n  }\n  Shape shape\u003dlookupLegendShape(series);\n  Paint paint\u003dlookupSeriesPaint(series);\n  LegendItem item\u003dnew LegendItem(label,paint);\n  item.setToolTipText(toolTipText);\n  item.setURLText(urlText);\n  item.setLabelFont(lookupLegendTextFont(series));\n  Paint labelPaint\u003dlookupLegendTextPaint(series);\n  if (labelPaint !\u003d null) {\n    item.setLabelPaint(labelPaint);\n  }\n  item.setSeriesKey(dataset.getSeriesKey(series));\n  item.setSeriesIndex(series);\n  item.setDataset(dataset);\n  item.setDatasetIndex(datasetIndex);\n  if (getTreatLegendShapeAsLine()) {\n    item.setLineVisible(true);\n    item.setLine(shape);\n    item.setLinePaint(paint);\n    item.setShapeVisible(false);\n  }\n else {\n    Paint outlinePaint\u003dlookupSeriesOutlinePaint(series);\n    Stroke outlineStroke\u003dlookupSeriesOutlineStroke(series);\n    item.setOutlinePaint(outlinePaint);\n    item.setOutlineStroke(outlineStroke);\n  }\n  return item;\n}",
    "begin_line": 948,
    "end_line": 998,
    "comment": "/** \n * Returns a default legend item for the specified series.  Subclasses should override this method to generate customised items.\n * @param datasetIndex  the dataset index (zero-based).\n * @param series  the series index (zero-based).\n * @return A legend item for the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.fillDomainGridBand#1011",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.fillDomainGridBand(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double, double)",
    "snippet": "public void fillDomainGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){\n  double x1\u003daxis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());\n  double x2\u003daxis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());\n  Rectangle2D band;\n  if (plot.getOrientation() \u003d\u003d PlotOrientation.VERTICAL) {\n    band\u003dnew Rectangle2D.Double(Math.min(x1,x2),dataArea.getMinY(),Math.abs(x2 - x1),dataArea.getWidth());\n  }\n else {\n    band\u003dnew Rectangle2D.Double(dataArea.getMinX(),Math.min(x1,x2),dataArea.getWidth(),Math.abs(x2 - x1));\n  }\n  Paint paint\u003dplot.getDomainTickBandPaint();\n  if (paint !\u003d null) {\n    g2.setPaint(paint);\n    g2.fill(band);\n  }\n}",
    "begin_line": 1011,
    "end_line": 1034,
    "comment": "/** \n * Fills a band between two values on the axis.  This can be used to color bands between the grid lines.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the domain axis.\n * @param dataArea  the data area.\n * @param start  the start value.\n * @param end  the end value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.fillRangeGridBand#1047",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.fillRangeGridBand(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double, double)",
    "snippet": "public void fillRangeGridBand(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double start,double end){\n  double y1\u003daxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());\n  double y2\u003daxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());\n  Rectangle2D band;\n  if (plot.getOrientation() \u003d\u003d PlotOrientation.VERTICAL) {\n    band\u003dnew Rectangle2D.Double(dataArea.getMinX(),Math.min(y1,y2),dataArea.getWidth(),Math.abs(y2 - y1));\n  }\n else {\n    band\u003dnew Rectangle2D.Double(Math.min(y1,y2),dataArea.getMinY(),Math.abs(y2 - y1),dataArea.getHeight());\n  }\n  Paint paint\u003dplot.getRangeTickBandPaint();\n  if (paint !\u003d null) {\n    g2.setPaint(paint);\n    g2.fill(band);\n  }\n}",
    "begin_line": 1047,
    "end_line": 1069,
    "comment": "/** \n * Fills a band between two values on the range axis.  This can be used to color bands between the grid lines.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the range axis.\n * @param dataArea  the data area.\n * @param start  the start value.\n * @param end  the end value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawDomainGridLine#1081",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawDomainGridLine(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double)",
    "snippet": "public void drawDomainGridLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value){\n  Range range\u003daxis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  double v\u003daxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());\n  Line2D line\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    line\u003dnew Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    line\u003dnew Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n  }\n  Paint paint\u003dplot.getDomainGridlinePaint();\n  Stroke stroke\u003dplot.getDomainGridlineStroke();\n  g2.setPaint(paint !\u003d null ? paint : Plot.DEFAULT_OUTLINE_PAINT);\n  g2.setStroke(stroke !\u003d null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);\n  g2.draw(line);\n}",
    "begin_line": 1081,
    "end_line": 1111,
    "comment": "/** \n * Draws a grid line against the range axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param dataArea  the area for plotting data (not yet adjusted for any3D effect).\n * @param value  the value at which the grid line should be drawn.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawDomainLine#1127",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawDomainLine(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double, java.awt.Paint, java.awt.Stroke)",
    "snippet": "public void drawDomainLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){\n  Range range\u003daxis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  Line2D line\u003dnull;\n  double v\u003daxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    line\u003dnew Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    line\u003dnew Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n  }\n  g2.setPaint(paint);\n  g2.setStroke(stroke);\n  g2.draw(line);\n}",
    "begin_line": 1127,
    "end_line": 1152,
    "comment": "/** \n * Draws a line perpendicular to the domain axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param dataArea  the area for plotting data (not yet adjusted for any 3Deffect).\n * @param value  the value at which the grid line should be drawn.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawRangeLine#1166",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawRangeLine(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D, double, java.awt.Paint, java.awt.Stroke)",
    "snippet": "public void drawRangeLine(Graphics2D g2,XYPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){\n  Range range\u003daxis.getRange();\n  if (!range.contains(value)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  Line2D line\u003dnull;\n  double v\u003daxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    line\u003dnew Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    line\u003dnew Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n  }\n  g2.setPaint(paint);\n  g2.setStroke(stroke);\n  g2.draw(line);\n}",
    "begin_line": 1166,
    "end_line": 1195,
    "comment": "/** \n * Draws a line perpendicular to the range axis.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param axis  the value axis.\n * @param dataArea  the area for plotting data (not yet adjusted for any 3Deffect).\n * @param value  the value at which the grid line should be drawn.\n * @param paint  the paint.\n * @param stroke  the stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawDomainMarker#1206",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawDomainMarker(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.Marker, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawDomainMarker(Graphics2D g2,XYPlot plot,ValueAxis domainAxis,Marker marker,Rectangle2D dataArea){\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm\u003d(ValueMarker)marker;\n    double value\u003dvm.getValue();\n    Range range\u003ddomainAxis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    double v\u003ddomainAxis.valueToJava2D(value,dataArea,plot.getDomainAxisEdge());\n    PlotOrientation orientation\u003dplot.getOrientation();\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      line\u003dnew Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      line\u003dnew Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n    }\n    final Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    g2.setPaint(marker.getPaint());\n    g2.setStroke(marker.getStroke());\n    g2.draw(line);\n    String label\u003dmarker.getLabel();\n    RectangleAnchor anchor\u003dmarker.getLabelAnchor();\n    if (label !\u003d null) {\n      Font labelFont\u003dmarker.getLabelFont();\n      g2.setFont(labelFont);\n      g2.setPaint(marker.getLabelPaint());\n      Point2D coordinates\u003dcalculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);\n      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n else   if (marker instanceof IntervalMarker) {\n    IntervalMarker im\u003d(IntervalMarker)marker;\n    double start\u003dim.getStartValue();\n    double end\u003dim.getEndValue();\n    Range range\u003ddomainAxis.getRange();\n    if (!(range.intersects(start,end))) {\n      return;\n    }\n    double start2d\u003ddomainAxis.valueToJava2D(start,dataArea,plot.getDomainAxisEdge());\n    double end2d\u003ddomainAxis.valueToJava2D(end,dataArea,plot.getDomainAxisEdge());\n    double low\u003dMath.min(start2d,end2d);\n    double high\u003dMath.max(start2d,end2d);\n    PlotOrientation orientation\u003dplot.getOrientation();\n    Rectangle2D rect\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      low\u003dMath.max(low,dataArea.getMinY());\n      high\u003dMath.min(high,dataArea.getMaxY());\n      rect\u003dnew Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      low\u003dMath.max(low,dataArea.getMinX());\n      high\u003dMath.min(high,dataArea.getMaxX());\n      rect\u003dnew Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());\n    }\n    final Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    Paint p\u003dmarker.getPaint();\n    if (p instanceof GradientPaint) {\n      GradientPaint gp\u003d(GradientPaint)p;\n      GradientPaintTransformer t\u003dim.getGradientPaintTransformer();\n      if (t !\u003d null) {\n        gp\u003dt.transform(gp,rect);\n      }\n      g2.setPaint(gp);\n    }\n else {\n      g2.setPaint(p);\n    }\n    g2.fill(rect);\n    if (im.getOutlinePaint() !\u003d null \u0026\u0026 im.getOutlineStroke() !\u003d null) {\n      if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n        Line2D line\u003dnew Line2D.Double();\n        double y0\u003ddataArea.getMinY();\n        double y1\u003ddataArea.getMaxY();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(start2d,y0,start2d,y1);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(end2d,y0,end2d,y1);\n          g2.draw(line);\n        }\n      }\n else {\n        Line2D line\u003dnew Line2D.Double();\n        double x0\u003ddataArea.getMinX();\n        double x1\u003ddataArea.getMaxX();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(x0,start2d,x1,start2d);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(x0,end2d,x1,end2d);\n          g2.draw(line);\n        }\n      }\n    }\n    String label\u003dmarker.getLabel();\n    RectangleAnchor anchor\u003dmarker.getLabelAnchor();\n    if (label !\u003d null) {\n      Font labelFont\u003dmarker.getLabelFont();\n      g2.setFont(labelFont);\n      g2.setPaint(marker.getLabelPaint());\n      Point2D coordinates\u003dcalculateDomainMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);\n      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 1206,
    "end_line": 1361,
    "comment": "/** \n * Draws a vertical line on the chart to represent a \u0027range marker\u0027.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param domainAxis  the domain axis.\n * @param marker  the marker line.\n * @param dataArea  the axis data area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.calculateDomainMarkerTextAnchorPoint#1376",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.calculateDomainMarkerTextAnchorPoint(java.awt.Graphics2D, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleInsets, org.jfree.chart.util.LengthAdjustmentType, org.jfree.chart.util.RectangleAnchor)",
    "snippet": "protected Point2D calculateDomainMarkerTextAnchorPoint(Graphics2D g2,PlotOrientation orientation,Rectangle2D dataArea,Rectangle2D markerArea,RectangleInsets markerOffset,LengthAdjustmentType labelOffsetType,RectangleAnchor anchor){\n  Rectangle2D anchorRect\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    anchorRect\u003dmarkerOffset.createAdjustedRectangle(markerArea,LengthAdjustmentType.CONTRACT,labelOffsetType);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    anchorRect\u003dmarkerOffset.createAdjustedRectangle(markerArea,labelOffsetType,LengthAdjustmentType.CONTRACT);\n  }\n  return RectangleAnchor.coordinates(anchorRect,anchor);\n}",
    "begin_line": 1376,
    "end_line": 1395,
    "comment": "/** \n * Calculates the (x, y) coordinates for drawing a marker label.\n * @param g2  the graphics device.\n * @param orientation  the plot orientation.\n * @param dataArea  the data area.\n * @param markerArea  the rectangle surrounding the marker area.\n * @param markerOffset  the marker label offset.\n * @param labelOffsetType  the label offset type.\n * @param anchor  the label anchor.\n * @return The coordinates for drawing the marker label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawRangeMarker#1406",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawRangeMarker(java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.Marker, java.awt.geom.Rectangle2D)",
    "snippet": "public void drawRangeMarker(Graphics2D g2,XYPlot plot,ValueAxis rangeAxis,Marker marker,Rectangle2D dataArea){\n  if (marker instanceof ValueMarker) {\n    ValueMarker vm\u003d(ValueMarker)marker;\n    double value\u003dvm.getValue();\n    Range range\u003drangeAxis.getRange();\n    if (!range.contains(value)) {\n      return;\n    }\n    double v\u003drangeAxis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());\n    PlotOrientation orientation\u003dplot.getOrientation();\n    Line2D line\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      line\u003dnew Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      line\u003dnew Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);\n    }\n    final Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    g2.setPaint(marker.getPaint());\n    g2.setStroke(marker.getStroke());\n    g2.draw(line);\n    String label\u003dmarker.getLabel();\n    RectangleAnchor anchor\u003dmarker.getLabelAnchor();\n    if (label !\u003d null) {\n      Font labelFont\u003dmarker.getLabelFont();\n      g2.setFont(labelFont);\n      g2.setPaint(marker.getLabelPaint());\n      Point2D coordinates\u003dcalculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,line.getBounds2D(),marker.getLabelOffset(),LengthAdjustmentType.EXPAND,anchor);\n      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n else   if (marker instanceof IntervalMarker) {\n    IntervalMarker im\u003d(IntervalMarker)marker;\n    double start\u003dim.getStartValue();\n    double end\u003dim.getEndValue();\n    Range range\u003drangeAxis.getRange();\n    if (!(range.intersects(start,end))) {\n      return;\n    }\n    double start2d\u003drangeAxis.valueToJava2D(start,dataArea,plot.getRangeAxisEdge());\n    double end2d\u003drangeAxis.valueToJava2D(end,dataArea,plot.getRangeAxisEdge());\n    double low\u003dMath.min(start2d,end2d);\n    double high\u003dMath.max(start2d,end2d);\n    PlotOrientation orientation\u003dplot.getOrientation();\n    Rectangle2D rect\u003dnull;\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      low\u003dMath.max(low,dataArea.getMinX());\n      high\u003dMath.min(high,dataArea.getMaxX());\n      rect\u003dnew Rectangle2D.Double(low,dataArea.getMinY(),high - low,dataArea.getHeight());\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      low\u003dMath.max(low,dataArea.getMinY());\n      high\u003dMath.min(high,dataArea.getMaxY());\n      rect\u003dnew Rectangle2D.Double(dataArea.getMinX(),low,dataArea.getWidth(),high - low);\n    }\n    final Composite originalComposite\u003dg2.getComposite();\n    g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,marker.getAlpha()));\n    Paint p\u003dmarker.getPaint();\n    if (p instanceof GradientPaint) {\n      GradientPaint gp\u003d(GradientPaint)p;\n      GradientPaintTransformer t\u003dim.getGradientPaintTransformer();\n      if (t !\u003d null) {\n        gp\u003dt.transform(gp,rect);\n      }\n      g2.setPaint(gp);\n    }\n else {\n      g2.setPaint(p);\n    }\n    g2.fill(rect);\n    if (im.getOutlinePaint() !\u003d null \u0026\u0026 im.getOutlineStroke() !\u003d null) {\n      if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n        Line2D line\u003dnew Line2D.Double();\n        double x0\u003ddataArea.getMinX();\n        double x1\u003ddataArea.getMaxX();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(x0,start2d,x1,start2d);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(x0,end2d,x1,end2d);\n          g2.draw(line);\n        }\n      }\n else {\n        Line2D line\u003dnew Line2D.Double();\n        double y0\u003ddataArea.getMinY();\n        double y1\u003ddataArea.getMaxY();\n        g2.setPaint(im.getOutlinePaint());\n        g2.setStroke(im.getOutlineStroke());\n        if (range.contains(start)) {\n          line.setLine(start2d,y0,start2d,y1);\n          g2.draw(line);\n        }\n        if (range.contains(end)) {\n          line.setLine(end2d,y0,end2d,y1);\n          g2.draw(line);\n        }\n      }\n    }\n    String label\u003dmarker.getLabel();\n    RectangleAnchor anchor\u003dmarker.getLabelAnchor();\n    if (label !\u003d null) {\n      Font labelFont\u003dmarker.getLabelFont();\n      g2.setFont(labelFont);\n      g2.setPaint(marker.getLabelPaint());\n      Point2D coordinates\u003dcalculateRangeMarkerTextAnchorPoint(g2,orientation,dataArea,rect,marker.getLabelOffset(),marker.getLabelOffsetType(),anchor);\n      TextUtilities.drawAlignedString(label,g2,(float)coordinates.getX(),(float)coordinates.getY(),marker.getLabelTextAnchor());\n    }\n    g2.setComposite(originalComposite);\n  }\n}",
    "begin_line": 1406,
    "end_line": 1558,
    "comment": "/** \n * Draws a horizontal line across the chart to represent a \u0027range marker\u0027.\n * @param g2  the graphics device.\n * @param plot  the plot.\n * @param rangeAxis  the range axis.\n * @param marker  the marker line.\n * @param dataArea  the axis data area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.calculateRangeMarkerTextAnchorPoint#1573",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.calculateRangeMarkerTextAnchorPoint(java.awt.Graphics2D, org.jfree.chart.plot.PlotOrientation, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleInsets, org.jfree.chart.util.LengthAdjustmentType, org.jfree.chart.util.RectangleAnchor)",
    "snippet": "private Point2D calculateRangeMarkerTextAnchorPoint(Graphics2D g2,PlotOrientation orientation,Rectangle2D dataArea,Rectangle2D markerArea,RectangleInsets markerOffset,LengthAdjustmentType labelOffsetForRange,RectangleAnchor anchor){\n  Rectangle2D anchorRect\u003dnull;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    anchorRect\u003dmarkerOffset.createAdjustedRectangle(markerArea,labelOffsetForRange,LengthAdjustmentType.CONTRACT);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    anchorRect\u003dmarkerOffset.createAdjustedRectangle(markerArea,LengthAdjustmentType.CONTRACT,labelOffsetForRange);\n  }\n  return RectangleAnchor.coordinates(anchorRect,anchor);\n}",
    "begin_line": 1573,
    "end_line": 1592,
    "comment": "/** \n * Calculates the (x, y) coordinates for drawing a marker label.\n * @param g2  the graphics device.\n * @param orientation  the plot orientation.\n * @param dataArea  the data area.\n * @param markerArea  the marker area.\n * @param markerOffset  the marker offset.\n * @param labelOffsetForRange  the label offset.\n * @param anchor  the label anchor.\n * @return The coordinates for drawing the marker label.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.clone#1602",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.clone()",
    "snippet": "protected Object clone() throws CloneNotSupportedException {\n  AbstractXYItemRenderer clone\u003d(AbstractXYItemRenderer)super.clone();\n  clone.itemLabelGeneratorList\u003d(ObjectList)this.itemLabelGeneratorList.clone();\n  if (this.baseItemLabelGenerator !\u003d null \u0026\u0026 this.baseItemLabelGenerator instanceof PublicCloneable) {\n    PublicCloneable pc\u003d(PublicCloneable)this.baseItemLabelGenerator;\n    clone.baseItemLabelGenerator\u003d(XYItemLabelGenerator)pc.clone();\n  }\n  clone.toolTipGeneratorList\u003d(ObjectList)this.toolTipGeneratorList.clone();\n  if (this.baseToolTipGenerator !\u003d null \u0026\u0026 this.baseToolTipGenerator instanceof PublicCloneable) {\n    PublicCloneable pc\u003d(PublicCloneable)this.baseToolTipGenerator;\n    clone.baseToolTipGenerator\u003d(XYToolTipGenerator)pc.clone();\n  }\n  if (clone.legendItemLabelGenerator instanceof PublicCloneable) {\n    clone.legendItemLabelGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);\n  }\n  if (clone.legendItemToolTipGenerator instanceof PublicCloneable) {\n    clone.legendItemToolTipGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);\n  }\n  if (clone.legendItemURLGenerator instanceof PublicCloneable) {\n    clone.legendItemURLGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);\n  }\n  clone.foregroundAnnotations\u003d(List)ObjectUtilities.deepClone(this.foregroundAnnotations);\n  clone.backgroundAnnotations\u003d(List)ObjectUtilities.deepClone(this.backgroundAnnotations);\n  if (clone.legendItemLabelGenerator instanceof PublicCloneable) {\n    clone.legendItemLabelGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemLabelGenerator);\n  }\n  if (clone.legendItemToolTipGenerator instanceof PublicCloneable) {\n    clone.legendItemToolTipGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemToolTipGenerator);\n  }\n  if (clone.legendItemURLGenerator instanceof PublicCloneable) {\n    clone.legendItemURLGenerator\u003d(XYSeriesLabelGenerator)ObjectUtilities.clone(this.legendItemURLGenerator);\n  }\n  return clone;\n}",
    "begin_line": 1602,
    "end_line": 1654,
    "comment": "/** \n * Returns a clone of the renderer.\n * @return A clone.\n * @throws CloneNotSupportedException if the renderer does not supportcloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.equals#1663",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractXYItemRenderer)) {\n    return false;\n  }\n  AbstractXYItemRenderer that\u003d(AbstractXYItemRenderer)obj;\n  if (!this.itemLabelGeneratorList.equals(that.itemLabelGeneratorList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseItemLabelGenerator,that.baseItemLabelGenerator)) {\n    return false;\n  }\n  if (!this.toolTipGeneratorList.equals(that.toolTipGeneratorList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseToolTipGenerator,that.baseToolTipGenerator)) {\n    return false;\n  }\n  if (!this.urlGeneratorList.equals(that.urlGeneratorList)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.baseURLGenerator,that.baseURLGenerator)) {\n    return false;\n  }\n  if (!this.foregroundAnnotations.equals(that.foregroundAnnotations)) {\n    return false;\n  }\n  if (!this.backgroundAnnotations.equals(that.backgroundAnnotations)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendItemLabelGenerator,that.legendItemLabelGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,that.legendItemToolTipGenerator)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.legendItemURLGenerator,that.legendItemURLGenerator)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1663,
    "end_line": 1711,
    "comment": "/** \n * Tests this renderer for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.getDrawingSupplier#1718",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getDrawingSupplier()",
    "snippet": "public DrawingSupplier getDrawingSupplier(){\n  DrawingSupplier result\u003dnull;\n  XYPlot p\u003dgetPlot();\n  if (p !\u003d null) {\n    result\u003dp.getDrawingSupplier();\n  }\n  return result;\n}",
    "begin_line": 1718,
    "end_line": 1725,
    "comment": "/** \n * Returns the drawing supplier from the plot.\n * @return The drawing supplier (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.updateCrosshairValues#1745",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.updateCrosshairValues(org.jfree.chart.plot.CrosshairState, double, double, int, int, double, double, org.jfree.chart.plot.PlotOrientation)",
    "snippet": "protected void updateCrosshairValues(CrosshairState crosshairState,double x,double y,int domainAxisIndex,int rangeAxisIndex,double transX,double transY,PlotOrientation orientation){\n  if (orientation \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027orientation\u0027 argument.\");\n  }\n  if (crosshairState !\u003d null) {\n    if (this.plot.isDomainCrosshairLockedOnData()) {\n      if (this.plot.isRangeCrosshairLockedOnData()) {\n        crosshairState.updateCrosshairPoint(x,y,domainAxisIndex,rangeAxisIndex,transX,transY,orientation);\n      }\n else {\n        crosshairState.updateCrosshairX(x,domainAxisIndex);\n      }\n    }\n else {\n      if (this.plot.isRangeCrosshairLockedOnData()) {\n        crosshairState.updateCrosshairY(y,rangeAxisIndex);\n      }\n    }\n  }\n}",
    "begin_line": 1745,
    "end_line": 1774,
    "comment": "/** \n * Considers the current (x, y) coordinate and updates the crosshair point if it meets the criteria (usually means the (x, y) coordinate is the closest to the anchor point so far).\n * @param crosshairState  the crosshair state (\u003ccode\u003enull\u003c/code\u003e permitted,but the method does nothing in that case).\n * @param x  the x-value (in data space).\n * @param y  the y-value (in data space).\n * @param domainAxisIndex  the index of the domain axis for the point.\n * @param rangeAxisIndex  the index of the range axis for the point.\n * @param transX  the x-value translated to Java2D space.\n * @param transY  the y-value translated to Java2D space.\n * @param orientation  the plot orientation (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawItemLabel#1792",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawItemLabel(java.awt.Graphics2D, org.jfree.chart.plot.PlotOrientation, org.jfree.data.xy.XYDataset, int, int, boolean, double, double, boolean)",
    "snippet": "protected void drawItemLabel(Graphics2D g2,PlotOrientation orientation,XYDataset dataset,int series,int item,boolean selected,double x,double y,boolean negative){\n  XYItemLabelGenerator generator\u003dgetItemLabelGenerator(series,item,selected);\n  if (generator !\u003d null) {\n    Font labelFont\u003dgetItemLabelFont(series,item,selected);\n    Paint paint\u003dgetItemLabelPaint(series,item,selected);\n    g2.setFont(labelFont);\n    g2.setPaint(paint);\n    String label\u003dgenerator.generateLabel(dataset,series,item);\n    ItemLabelPosition position\u003dnull;\n    if (!negative) {\n      position\u003dgetPositiveItemLabelPosition(series,item,selected);\n    }\n else {\n      position\u003dgetNegativeItemLabelPosition(series,item,selected);\n    }\n    Point2D anchorPoint\u003dcalculateLabelAnchorPoint(position.getItemLabelAnchor(),x,y,orientation);\n    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());\n  }\n}",
    "begin_line": 1792,
    "end_line": 1825,
    "comment": "/** \n * Draws an item label.\n * @param g2  the graphics device.\n * @param orientation  the orientation.\n * @param dataset  the dataset.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param selected  is the item selected?\n * @param x  the x coordinate (in Java2D space).\n * @param y  the y coordinate (in Java2D space).\n * @param negative  indicates a negative value (which affects the itemlabel position).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.drawAnnotations#1837",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.drawAnnotations(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.util.Layer, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public void drawAnnotations(Graphics2D g2,Rectangle2D dataArea,ValueAxis domainAxis,ValueAxis rangeAxis,Layer layer,PlotRenderingInfo info){\n  Iterator iterator\u003dnull;\n  if (layer.equals(Layer.FOREGROUND)) {\n    iterator\u003dthis.foregroundAnnotations.iterator();\n  }\n else   if (layer.equals(Layer.BACKGROUND)) {\n    iterator\u003dthis.backgroundAnnotations.iterator();\n  }\n else {\n    throw new RuntimeException(\"Unknown layer.\");\n  }\n  while (iterator.hasNext()) {\n    XYAnnotation annotation\u003d(XYAnnotation)iterator.next();\n    annotation.draw(g2,this.plot,dataArea,domainAxis,rangeAxis,0,info);\n  }\n}",
    "begin_line": 1837,
    "end_line": 1861,
    "comment": "/** \n * Draws all the annotations for the specified layer.\n * @param g2  the graphics device.\n * @param dataArea  the data area.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param layer  the layer.\n * @param info  the plot rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYItemRenderer.addEntity#1880",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer",
    "signature": "org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addEntity(org.jfree.chart.entity.EntityCollection, java.awt.Shape, org.jfree.data.xy.XYDataset, int, int, boolean, double, double)",
    "snippet": "protected void addEntity(EntityCollection entities,Shape area,XYDataset dataset,int series,int item,boolean selected,double entityX,double entityY){\n  if (!getItemCreateEntity(series,item,selected)) {\n    return;\n  }\n  Shape hotspot\u003darea;\n  if (hotspot \u003d\u003d null) {\n    double r\u003dgetDefaultEntityRadius();\n    double w\u003dr * 2;\n    if (getPlot().getOrientation() \u003d\u003d PlotOrientation.VERTICAL) {\n      hotspot\u003dnew Ellipse2D.Double(entityX - r,entityY - r,w,w);\n    }\n else {\n      hotspot\u003dnew Ellipse2D.Double(entityY - r,entityX - r,w,w);\n    }\n  }\n  String tip\u003dnull;\n  XYToolTipGenerator generator\u003dgetToolTipGenerator(series,item,selected);\n  if (generator !\u003d null) {\n    tip\u003dgenerator.generateToolTip(dataset,series,item);\n  }\n  String url\u003dnull;\n  XYURLGenerator urlster\u003dgetURLGenerator(series,item,selected);\n  if (urlster !\u003d null) {\n    url\u003durlster.generateURL(dataset,series,item);\n  }\n  XYItemEntity entity\u003dnew XYItemEntity(hotspot,dataset,series,item,tip,url);\n  entities.add(entity);\n}",
    "begin_line": 1880,
    "end_line": 1912,
    "comment": "/** \n * Adds an entity to the collection.\n * @param entities  the entity collection being populated.\n * @param area  the entity area (if \u003ccode\u003enull\u003c/code\u003e a default will beused).\n * @param dataset  the dataset.\n * @param series  the series.\n * @param item  the item.\n * @param selected  is the item selected?\n * @param entityX  the entity\u0027s center x-coordinate in user space (onlyused if \u003ccode\u003earea\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e).\n * @param entityY  the entity\u0027s center y-coordinate in user space (onlyused if \u003ccode\u003earea\u003c/code\u003e is \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.GradientXYBarPainter#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.GradientXYBarPainter()",
    "snippet": "public GradientXYBarPainter(){\n  this(0.10,0.20,0.80);\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Creates a new instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.GradientXYBarPainter#87",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.GradientXYBarPainter(double, double, double)",
    "snippet": "public GradientXYBarPainter(double g1,double g2,double g3){\n  this.g1\u003dg1;\n  this.g2\u003dg2;\n  this.g3\u003dg3;\n}",
    "begin_line": 87,
    "end_line": 91,
    "comment": "/** \n * Creates a new instance.\n * @param g1\n * @param g2\n * @param g3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.paintBar#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.paintBar(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYBarRenderer, int, int, boolean, java.awt.geom.RectangularShape, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public void paintBar(Graphics2D g2,XYBarRenderer renderer,int row,int column,boolean selected,RectangularShape bar,RectangleEdge base){\n  Paint itemPaint\u003drenderer.getItemPaint(row,column,selected);\n  Color c0, c1;\n  if (itemPaint instanceof Color) {\n    c0\u003d(Color)itemPaint;\n    c1\u003dc0.brighter();\n  }\n else   if (itemPaint instanceof GradientPaint) {\n    GradientPaint gp\u003d(GradientPaint)itemPaint;\n    c0\u003dgp.getColor1();\n    c1\u003dgp.getColor2();\n  }\n else {\n    c0\u003dColor.blue;\n    c1\u003dColor.blue.brighter();\n  }\n  if (c0.getAlpha() \u003d\u003d 0) {\n    return;\n  }\n  if (base \u003d\u003d RectangleEdge.TOP || base \u003d\u003d RectangleEdge.BOTTOM) {\n    Rectangle2D[] regions\u003dsplitVerticalBar(bar,this.g1,this.g2,this.g3);\n    GradientPaint gp\u003dnew GradientPaint((float)regions[0].getMinX(),0.0f,c0,(float)regions[0].getMaxX(),0.0f,Color.white);\n    g2.setPaint(gp);\n    g2.fill(regions[0]);\n    gp\u003dnew GradientPaint((float)regions[1].getMinX(),0.0f,Color.white,(float)regions[1].getMaxX(),0.0f,c0);\n    g2.setPaint(gp);\n    g2.fill(regions[1]);\n    gp\u003dnew GradientPaint((float)regions[2].getMinX(),0.0f,c0,(float)regions[2].getMaxX(),0.0f,c1);\n    g2.setPaint(gp);\n    g2.fill(regions[2]);\n    gp\u003dnew GradientPaint((float)regions[3].getMinX(),0.0f,c1,(float)regions[3].getMaxX(),0.0f,c0);\n    g2.setPaint(gp);\n    g2.fill(regions[3]);\n  }\n else   if (base \u003d\u003d RectangleEdge.LEFT || base \u003d\u003d RectangleEdge.RIGHT) {\n    Rectangle2D[] regions\u003dsplitHorizontalBar(bar,this.g1,this.g2,this.g3);\n    GradientPaint gp\u003dnew GradientPaint(0.0f,(float)regions[0].getMinY(),c0,0.0f,(float)regions[0].getMaxX(),Color.white);\n    g2.setPaint(gp);\n    g2.fill(regions[0]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[1].getMinY(),Color.white,0.0f,(float)regions[1].getMaxY(),c0);\n    g2.setPaint(gp);\n    g2.fill(regions[1]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[2].getMinY(),c0,0.0f,(float)regions[2].getMaxY(),c1);\n    g2.setPaint(gp);\n    g2.fill(regions[2]);\n    gp\u003dnew GradientPaint(0.0f,(float)regions[3].getMinY(),c1,0.0f,(float)regions[3].getMaxY(),c0);\n    g2.setPaint(gp);\n    g2.fill(regions[3]);\n  }\n  if (renderer.isDrawBarOutline()) {\n    Stroke stroke\u003drenderer.getItemOutlineStroke(row,column,selected);\n    Paint paint\u003drenderer.getItemOutlinePaint(row,column,selected);\n    if (stroke !\u003d null \u0026\u0026 paint !\u003d null) {\n      g2.setStroke(stroke);\n      g2.setPaint(paint);\n      g2.draw(bar);\n    }\n  }\n}",
    "begin_line": 107,
    "end_line": 195,
    "comment": "/** \n * Paints a single bar instance.\n * @param g2  the graphics target.\n * @param renderer  the renderer.\n * @param row  the row index.\n * @param column  the column index.\n * @param selected  is the data item selected?\n * @param bar  the bar\n * @param base  indicates which side of the rectangle is the base of thebar.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.paintBarShadow#212",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.paintBarShadow(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYBarRenderer, int, int, boolean, java.awt.geom.RectangularShape, org.jfree.chart.util.RectangleEdge, boolean)",
    "snippet": "public void paintBarShadow(Graphics2D g2,XYBarRenderer renderer,int row,int column,boolean selected,RectangularShape bar,RectangleEdge base,boolean pegShadow){\n  Paint itemPaint\u003drenderer.getItemPaint(row,column,selected);\n  if (itemPaint instanceof Color) {\n    Color c\u003d(Color)itemPaint;\n    if (c.getAlpha() \u003d\u003d 0) {\n      return;\n    }\n  }\n  RectangularShape shadow\u003dcreateShadow(bar,renderer.getShadowXOffset(),renderer.getShadowYOffset(),base,pegShadow);\n  g2.setPaint(Color.gray);\n  g2.fill(shadow);\n}",
    "begin_line": 212,
    "end_line": 231,
    "comment": "/** \n * Paints a single bar instance.\n * @param g2  the graphics target.\n * @param renderer  the renderer.\n * @param row  the row index.\n * @param column  the column index.\n * @param selected  is the data item selected?\n * @param bar  the bar\n * @param base  indicates which side of the rectangle is the base of thebar.\n * @param pegShadow  peg the shadow to the base of the bar?\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.createShadow#244",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.createShadow(java.awt.geom.RectangularShape, double, double, org.jfree.chart.util.RectangleEdge, boolean)",
    "snippet": "private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){\n  double x0\u003dbar.getMinX();\n  double x1\u003dbar.getMaxX();\n  double y0\u003dbar.getMinY();\n  double y1\u003dbar.getMaxY();\n  if (base \u003d\u003d RectangleEdge.TOP) {\n    x0+\u003dxOffset;\n    x1+\u003dxOffset;\n    if (!pegShadow) {\n      y0+\u003dyOffset;\n    }\n    y1+\u003dyOffset;\n  }\n else   if (base \u003d\u003d RectangleEdge.BOTTOM) {\n    x0+\u003dxOffset;\n    x1+\u003dxOffset;\n    y0+\u003dyOffset;\n    if (!pegShadow) {\n      y1+\u003dyOffset;\n    }\n  }\n else   if (base \u003d\u003d RectangleEdge.LEFT) {\n    if (!pegShadow) {\n      x0+\u003dxOffset;\n    }\n    x1+\u003dxOffset;\n    y0+\u003dyOffset;\n    y1+\u003dyOffset;\n  }\n else   if (base \u003d\u003d RectangleEdge.RIGHT) {\n    x0+\u003dxOffset;\n    if (!pegShadow) {\n      x1+\u003dxOffset;\n    }\n    y0+\u003dyOffset;\n    y1+\u003dyOffset;\n  }\n  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));\n}",
    "begin_line": 244,
    "end_line": 283,
    "comment": "/** \n * Creates a shadow for the bar.\n * @param bar  the bar shape.\n * @param xOffset  the x-offset for the shadow.\n * @param yOffset  the y-offset for the shadow.\n * @param base  the edge that is the base of the bar.\n * @param pegShadow  peg the shadow to the base?\n * @return A rectangle for the shadow.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.splitVerticalBar#296",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.splitVerticalBar(java.awt.geom.RectangularShape, double, double, double)",
    "snippet": "private Rectangle2D[] splitVerticalBar(RectangularShape bar,double a,double b,double c){\n  Rectangle2D[] result\u003dnew Rectangle2D[4];\n  double x0\u003dbar.getMinX();\n  double x1\u003dMath.rint(x0 + (bar.getWidth() * a));\n  double x2\u003dMath.rint(x0 + (bar.getWidth() * b));\n  double x3\u003dMath.rint(x0 + (bar.getWidth() * c));\n  result[0]\u003dnew Rectangle2D.Double(bar.getMinX(),bar.getMinY(),x1 - x0,bar.getHeight());\n  result[1]\u003dnew Rectangle2D.Double(x1,bar.getMinY(),x2 - x1,bar.getHeight());\n  result[2]\u003dnew Rectangle2D.Double(x2,bar.getMinY(),x3 - x2,bar.getHeight());\n  result[3]\u003dnew Rectangle2D.Double(x3,bar.getMinY(),bar.getMaxX() - x3,bar.getHeight());\n  return result;\n}",
    "begin_line": 296,
    "end_line": 312,
    "comment": "/** \n * Splits a bar into subregions (elsewhere, these subregions will have different gradients applied to them).\n * @param bar  the bar shape.\n * @param a  the first division.\n * @param b  the second division.\n * @param c  the third division.\n * @return An array containing four subregions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.splitHorizontalBar#325",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.splitHorizontalBar(java.awt.geom.RectangularShape, double, double, double)",
    "snippet": "private Rectangle2D[] splitHorizontalBar(RectangularShape bar,double a,double b,double c){\n  Rectangle2D[] result\u003dnew Rectangle2D[4];\n  double y0\u003dbar.getMinY();\n  double y1\u003dMath.rint(y0 + (bar.getHeight() * a));\n  double y2\u003dMath.rint(y0 + (bar.getHeight() * b));\n  double y3\u003dMath.rint(y0 + (bar.getHeight() * c));\n  result[0]\u003dnew Rectangle2D.Double(bar.getMinX(),bar.getMinY(),bar.getWidth(),y1 - y0);\n  result[1]\u003dnew Rectangle2D.Double(bar.getMinX(),y1,bar.getWidth(),y2 - y1);\n  result[2]\u003dnew Rectangle2D.Double(bar.getMinX(),y2,bar.getWidth(),y3 - y2);\n  result[3]\u003dnew Rectangle2D.Double(bar.getMinX(),y3,bar.getWidth(),bar.getMaxY() - y3);\n  return result;\n}",
    "begin_line": 325,
    "end_line": 341,
    "comment": "/** \n * Splits a bar into subregions (elsewhere, these subregions will have different gradients applied to them).\n * @param bar  the bar shape.\n * @param a  the first division.\n * @param b  the second division.\n * @param c  the third division.\n * @return An array containing four subregions.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.equals#350",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof GradientXYBarPainter)) {\n    return false;\n  }\n  GradientXYBarPainter that\u003d(GradientXYBarPainter)obj;\n  if (this.g1 !\u003d that.g1) {\n    return false;\n  }\n  if (this.g2 !\u003d that.g2) {\n    return false;\n  }\n  if (this.g3 !\u003d that.g3) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 350,
    "end_line": 368,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the obj (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "GradientXYBarPainter.hashCode#375",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/GradientXYBarPainter.java",
    "class_name": "org.jfree.chart.renderer.xy.GradientXYBarPainter",
    "signature": "org.jfree.chart.renderer.xy.GradientXYBarPainter.hashCode()",
    "snippet": "public int hashCode(){\n  int hash\u003d37;\n  hash\u003dHashUtilities.hashCode(hash,this.g1);\n  hash\u003dHashUtilities.hashCode(hash,this.g2);\n  hash\u003dHashUtilities.hashCode(hash,this.g3);\n  return hash;\n}",
    "begin_line": 375,
    "end_line": 381,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.XYLineAndShapeRenderer#174",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer()",
    "snippet": "public XYLineAndShapeRenderer(){\n  this(true,true);\n}",
    "begin_line": 174,
    "end_line": 176,
    "comment": "/** \n * Creates a new renderer with both lines and shapes visible.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.XYLineAndShapeRenderer#184",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.XYLineAndShapeRenderer(boolean, boolean)",
    "snippet": "public XYLineAndShapeRenderer(boolean lines,boolean shapes){\n  this.seriesLinesVisible\u003dnew BooleanList();\n  this.baseLinesVisible\u003dlines;\n  this.legendLine\u003dnew Line2D.Double(-7.0,0.0,7.0,0.0);\n  this.seriesShapesVisible\u003dnew BooleanList();\n  this.baseShapesVisible\u003dshapes;\n  this.useFillPaint\u003dfalse;\n  this.seriesShapesFilled\u003dnew BooleanList();\n  this.baseShapesFilled\u003dtrue;\n  this.drawOutlines\u003dtrue;\n  this.useOutlinePaint\u003dfalse;\n  this.drawSeriesLineAsPath\u003dfalse;\n}",
    "begin_line": 184,
    "end_line": 201,
    "comment": "/** \n * Creates a new renderer.\n * @param lines  lines visible?\n * @param shapes  shapes visible?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getDrawSeriesLineAsPath#211",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawSeriesLineAsPath()",
    "snippet": "public boolean getDrawSeriesLineAsPath(){\n  return this.drawSeriesLineAsPath;\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Returns a flag that controls whether or not each series is drawn as a single path.\n * @return A boolean.\n * @see #setDrawSeriesLineAsPath(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setDrawSeriesLineAsPath#224",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)",
    "snippet": "public void setDrawSeriesLineAsPath(boolean flag){\n  if (this.drawSeriesLineAsPath !\u003d flag) {\n    this.drawSeriesLineAsPath\u003dflag;\n    fireChangeEvent();\n  }\n}",
    "begin_line": 224,
    "end_line": 229,
    "comment": "/** \n * Sets the flag that controls whether or not each series is drawn as a single path and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param flag  the flag.\n * @see #getDrawSeriesLineAsPath()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getPassCount#238",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getPassCount()",
    "snippet": "public int getPassCount(){\n  return 2;\n}",
    "begin_line": 238,
    "end_line": 240,
    "comment": "/** \n * Returns the number of passes through the data that the renderer requires in order to draw the chart.  Most charts will require a single pass, but some require two passes.\n * @return The pass count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getItemLineVisible#253",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemLineVisible(int, int)",
    "snippet": "public boolean getItemLineVisible(int series,int item){\n  Boolean flag\u003dgetSeriesLinesVisible(series);\n  if (flag !\u003d null) {\n    return flag.booleanValue();\n  }\n else {\n    return this.baseLinesVisible;\n  }\n}",
    "begin_line": 253,
    "end_line": 261,
    "comment": "/** \n * Returns the flag used to control whether or not the shape for an item is visible.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getSeriesLinesVisible#273",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesLinesVisible(int)",
    "snippet": "public Boolean getSeriesLinesVisible(int series){\n  return this.seriesLinesVisible.getBoolean(series);\n}",
    "begin_line": 273,
    "end_line": 275,
    "comment": "/** \n * Returns the flag used to control whether or not the lines for a series are visible.\n * @param series  the series index (zero-based).\n * @return The flag (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setSeriesLinesVisible(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesLinesVisible#286",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, java.lang.Boolean)",
    "snippet": "public void setSeriesLinesVisible(int series,Boolean flag){\n  this.seriesLinesVisible.setBoolean(series,flag);\n  fireChangeEvent();\n}",
    "begin_line": 286,
    "end_line": 289,
    "comment": "/** \n * Sets the \u0027lines visible\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param flag  the flag (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getSeriesLinesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesLinesVisible#300",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, boolean)",
    "snippet": "public void setSeriesLinesVisible(int series,boolean visible){\n  setSeriesLinesVisible(series,Boolean.valueOf(visible));\n}",
    "begin_line": 300,
    "end_line": 302,
    "comment": "/** \n * Sets the \u0027lines visible\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag.\n * @see #getSeriesLinesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getBaseLinesVisible#311",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseLinesVisible()",
    "snippet": "public boolean getBaseLinesVisible(){\n  return this.baseLinesVisible;\n}",
    "begin_line": 311,
    "end_line": 313,
    "comment": "/** \n * Returns the base \u0027lines visible\u0027 attribute.\n * @return The base flag.\n * @see #setBaseLinesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setBaseLinesVisible#323",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseLinesVisible(boolean)",
    "snippet": "public void setBaseLinesVisible(boolean flag){\n  this.baseLinesVisible\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 323,
    "end_line": 326,
    "comment": "/** \n * Sets the base \u0027lines visible\u0027 flag and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #getBaseLinesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getLegendLine#335",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendLine()",
    "snippet": "public Shape getLegendLine(){\n  return this.legendLine;\n}",
    "begin_line": 335,
    "end_line": 337,
    "comment": "/** \n * Returns the shape used to represent a line in the legend.\n * @return The legend line (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setLegendLine(Shape)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setLegendLine#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine(java.awt.Shape)",
    "snippet": "public void setLegendLine(Shape line){\n  if (line \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027line\u0027 argument.\");\n  }\n  this.legendLine\u003dline;\n  fireChangeEvent();\n}",
    "begin_line": 347,
    "end_line": 353,
    "comment": "/** \n * Sets the shape used as a line in each legend item and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param line  the line (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getLegendLine()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getItemShapeVisible#370",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeVisible(int, int)",
    "snippet": "public boolean getItemShapeVisible(int series,int item){\n  Boolean flag\u003dgetSeriesShapesVisible(series);\n  if (flag !\u003d null) {\n    return flag.booleanValue();\n  }\n else {\n    return this.baseShapesVisible;\n  }\n}",
    "begin_line": 370,
    "end_line": 378,
    "comment": "/** \n * Returns the flag used to control whether or not the shape for an item is visible. \u003cp\u003e The default implementation passes control to the \u003ccode\u003egetSeriesShapesVisible\u003c/code\u003e method. You can override this method if you require different behaviour.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getSeriesShapesVisible#390",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesVisible(int)",
    "snippet": "public Boolean getSeriesShapesVisible(int series){\n  return this.seriesShapesVisible.getBoolean(series);\n}",
    "begin_line": 390,
    "end_line": 392,
    "comment": "/** \n * Returns the flag used to control whether or not the shapes for a series are visible.\n * @param series  the series index (zero-based).\n * @return A boolean.\n * @see #setSeriesShapesVisible(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesShapesVisible#403",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, boolean)",
    "snippet": "public void setSeriesShapesVisible(int series,boolean visible){\n  setSeriesShapesVisible(series,Boolean.valueOf(visible));\n}",
    "begin_line": 403,
    "end_line": 405,
    "comment": "/** \n * Sets the \u0027shapes visible\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param visible  the flag.\n * @see #getSeriesShapesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesShapesVisible#416",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, java.lang.Boolean)",
    "snippet": "public void setSeriesShapesVisible(int series,Boolean flag){\n  this.seriesShapesVisible.setBoolean(series,flag);\n  fireChangeEvent();\n}",
    "begin_line": 416,
    "end_line": 419,
    "comment": "/** \n * Sets the \u0027shapes visible\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param flag  the flag.\n * @see #getSeriesShapesVisible(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getBaseShapesVisible#428",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesVisible()",
    "snippet": "public boolean getBaseShapesVisible(){\n  return this.baseShapesVisible;\n}",
    "begin_line": 428,
    "end_line": 430,
    "comment": "/** \n * Returns the base \u0027shape visible\u0027 attribute.\n * @return The base flag.\n * @see #setBaseShapesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setBaseShapesVisible#440",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)",
    "snippet": "public void setBaseShapesVisible(boolean flag){\n  this.baseShapesVisible\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 440,
    "end_line": 443,
    "comment": "/** \n * Sets the base \u0027shapes visible\u0027 flag and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #getBaseShapesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getItemShapeFilled#460",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getItemShapeFilled(int, int)",
    "snippet": "public boolean getItemShapeFilled(int series,int item){\n  Boolean flag\u003dgetSeriesShapesFilled(series);\n  if (flag !\u003d null) {\n    return flag.booleanValue();\n  }\n else {\n    return this.baseShapesFilled;\n  }\n}",
    "begin_line": 460,
    "end_line": 468,
    "comment": "/** \n * Returns the flag used to control whether or not the shape for an item is filled. \u003cp\u003e The default implementation passes control to the \u003ccode\u003egetSeriesShapesFilled\u003c/code\u003e method. You can override this method if you require different behaviour.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getSeriesShapesFilled#480",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getSeriesShapesFilled(int)",
    "snippet": "public Boolean getSeriesShapesFilled(int series){\n  return this.seriesShapesFilled.getBoolean(series);\n}",
    "begin_line": 480,
    "end_line": 482,
    "comment": "/** \n * Returns the flag used to control whether or not the shapes for a series are filled.\n * @param series  the series index (zero-based).\n * @return A boolean.\n * @see #setSeriesShapesFilled(int,Boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesShapesFilled#493",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, boolean)",
    "snippet": "public void setSeriesShapesFilled(int series,boolean flag){\n  setSeriesShapesFilled(series,Boolean.valueOf(flag));\n}",
    "begin_line": 493,
    "end_line": 495,
    "comment": "/** \n * Sets the \u0027shapes filled\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param flag  the flag.\n * @see #getSeriesShapesFilled(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setSeriesShapesFilled#506",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, java.lang.Boolean)",
    "snippet": "public void setSeriesShapesFilled(int series,Boolean flag){\n  this.seriesShapesFilled.setBoolean(series,flag);\n  fireChangeEvent();\n}",
    "begin_line": 506,
    "end_line": 509,
    "comment": "/** \n * Sets the \u0027shapes filled\u0027 flag for a series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n * @param flag  the flag.\n * @see #getSeriesShapesFilled(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getBaseShapesFilled#518",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getBaseShapesFilled()",
    "snippet": "public boolean getBaseShapesFilled(){\n  return this.baseShapesFilled;\n}",
    "begin_line": 518,
    "end_line": 520,
    "comment": "/** \n * Returns the base \u0027shape filled\u0027 attribute.\n * @return The base flag.\n * @see #setBaseShapesFilled(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setBaseShapesFilled#530",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesFilled(boolean)",
    "snippet": "public void setBaseShapesFilled(boolean flag){\n  this.baseShapesFilled\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 530,
    "end_line": 533,
    "comment": "/** \n * Sets the base \u0027shapes filled\u0027 flag and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param flag  the flag.\n * @see #getBaseShapesFilled()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getDrawOutlines#543",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawOutlines()",
    "snippet": "public boolean getDrawOutlines(){\n  return this.drawOutlines;\n}",
    "begin_line": 543,
    "end_line": 545,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if outlines should be drawn for shapes, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @see #setDrawOutlines(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setDrawOutlines#559",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawOutlines(boolean)",
    "snippet": "public void setDrawOutlines(boolean flag){\n  this.drawOutlines\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 559,
    "end_line": 562,
    "comment": "/** \n * Sets the flag that controls whether outlines are drawn for shapes, and sends a  {@link RendererChangeEvent} to all registeredlisteners. \u003cP\u003e In some cases, shapes look better if they do NOT have an outline, but this flag allows you to set your own preference.\n * @param flag  the flag.\n * @see #getDrawOutlines()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getUseFillPaint#577",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseFillPaint()",
    "snippet": "public boolean getUseFillPaint(){\n  return this.useFillPaint;\n}",
    "begin_line": 577,
    "end_line": 579,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the fill paint setting to fill shapes, and \u003ccode\u003efalse\u003c/code\u003e if it should just use the regular paint. \u003cp\u003e Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the effect of this flag.\n * @return A boolean.\n * @see #setUseFillPaint(boolean)\n * @see #getUseOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setUseFillPaint#590",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseFillPaint(boolean)",
    "snippet": "public void setUseFillPaint(boolean flag){\n  this.useFillPaint\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 590,
    "end_line": 593,
    "comment": "/** \n * Sets the flag that controls whether the fill paint is used to fill shapes, and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param flag  the flag.\n * @see #getUseFillPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.getUseOutlinePaint#605",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getUseOutlinePaint()",
    "snippet": "public boolean getUseOutlinePaint(){\n  return this.useOutlinePaint;\n}",
    "begin_line": 605,
    "end_line": 607,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the renderer should use the outline paint setting to draw shape outlines, and \u003ccode\u003efalse\u003c/code\u003e if it should just use the regular paint.\n * @return A boolean.\n * @see #setUseOutlinePaint(boolean)\n * @see #getUseFillPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYLineAndShapeRenderer.setUseOutlinePaint#621",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseOutlinePaint(boolean)",
    "snippet": "public void setUseOutlinePaint(boolean flag){\n  this.useOutlinePaint\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 621,
    "end_line": 624,
    "comment": "/** \n * Sets the flag that controls whether the outline paint is used to draw shape outlines, and sends a  {@link RendererChangeEvent} to allregistered listeners. \u003cp\u003e Refer to \u003ccode\u003eXYLineAndShapeRendererDemo2.java\u003c/code\u003e to see the effect of this flag.\n * @param flag  the flag.\n * @see #getUseOutlinePaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.State#647",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.State(org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public State(PlotRenderingInfo info){\n  super(info);\n}",
    "begin_line": 647,
    "end_line": 649,
    "comment": "/** \n * Creates a new state instance.\n * @param info  the plot rendering info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.isLastPointGood#657",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLastPointGood()",
    "snippet": "public boolean isLastPointGood(){\n  return this.lastPointGood;\n}",
    "begin_line": 657,
    "end_line": 659,
    "comment": "/** \n * Returns a flag that indicates if the last point drawn (in the current series) was \u0027good\u0027 (non-null).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.setLastPointGood#667",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLastPointGood(boolean)",
    "snippet": "public void setLastPointGood(boolean good){\n  this.lastPointGood\u003dgood;\n}",
    "begin_line": 667,
    "end_line": 669,
    "comment": "/** \n * Sets a flag that indicates if the last point drawn (in the current series) was \u0027good\u0027 (non-null).\n * @param good  the flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.startSeriesPass#682",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.startSeriesPass(org.jfree.data.xy.XYDataset, int, int, int, int, int)",
    "snippet": "public void startSeriesPass(XYDataset dataset,int series,int firstItem,int lastItem,int pass,int passCount){\n  this.seriesPath.reset();\n  this.lastPointGood\u003dfalse;\n  super.startSeriesPass(dataset,series,firstItem,lastItem,pass,passCount);\n}",
    "begin_line": 682,
    "end_line": 688,
    "comment": "/** \n * This method is called by the  {@link XYPlot} at the start of eachseries pass.  We reset the state for the current series.\n * @param dataset  the dataset.\n * @param series  the series index.\n * @param firstItem  the first item index for this pass.\n * @param lastItem  the last item index for this pass.\n * @param pass  the current pass index.\n * @param passCount  the number of passes.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.initialise#708",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){\n  State state\u003dnew State(info);\n  state.seriesPath\u003dnew GeneralPath();\n  return state;\n}",
    "begin_line": 708,
    "end_line": 718,
    "comment": "/** \n * Initialises the renderer. \u003cP\u003e This method will be called before the first item is rendered, giving the renderer an opportunity to initialise any state information it wants to maintain.  The renderer can do nothing if it chooses.\n * @param g2  the graphics device.\n * @param dataArea  the area inside the axes.\n * @param plot  the plot.\n * @param data  the data.\n * @param info  an optional info collection object to return data back tothe caller.\n * @return The renderer state.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.drawItem#738",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
    "snippet": "public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,boolean selected,int pass){\n  if (!getItemVisible(series,item)) {\n    return;\n  }\n  if (isLinePass(pass)) {\n    if (getItemLineVisible(series,item)) {\n      if (this.drawSeriesLineAsPath) {\n        drawPrimaryLineAsPath(state,g2,plot,dataset,pass,series,item,selected,domainAxis,rangeAxis,dataArea);\n      }\n else {\n        drawPrimaryLine(state,g2,plot,dataset,pass,series,item,selected,domainAxis,rangeAxis,dataArea);\n      }\n    }\n  }\n else   if (isItemPass(pass)) {\n    EntityCollection entities\u003dnull;\n    if (state.getInfo() !\u003d null) {\n      entities\u003dstate.getInfo().getOwner().getEntityCollection();\n    }\n    drawShape2(g2,dataArea,plot,dataset,pass,series,item,selected,domainAxis,rangeAxis,null,entities);\n  }\n}",
    "begin_line": 738,
    "end_line": 774,
    "comment": "/** \n * Draws the visual representation of a single data item.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the area within which the data is being drawn.\n * @param plot  the plot (can be used to obtain standard colorinformation etc).\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the dataset.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param selected  is the data item selected?\n * @param pass  the pass index.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.isLinePass#784",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isLinePass(int)",
    "snippet": "protected boolean isLinePass(int pass){\n  return pass \u003d\u003d 0;\n}",
    "begin_line": 784,
    "end_line": 786,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing lines.\n * @param pass  the pass.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.isItemPass#796",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.isItemPass(int)",
    "snippet": "protected boolean isItemPass(int pass){\n  return pass \u003d\u003d 1;\n}",
    "begin_line": 796,
    "end_line": 798,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified pass is the one for drawing items.\n * @param pass  the pass.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.drawPrimaryLine#819",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLine(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawPrimaryLine(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,boolean selected,ValueAxis domainAxis,ValueAxis rangeAxis,Rectangle2D dataArea){\n  if (item \u003d\u003d 0) {\n    return;\n  }\n  double x1\u003ddataset.getXValue(series,item);\n  double y1\u003ddataset.getYValue(series,item);\n  if (Double.isNaN(y1) || Double.isNaN(x1)) {\n    return;\n  }\n  double x0\u003ddataset.getXValue(series,item - 1);\n  double y0\u003ddataset.getYValue(series,item - 1);\n  if (Double.isNaN(y0) || Double.isNaN(x0)) {\n    return;\n  }\n  RectangleEdge xAxisLocation\u003dplot.getDomainAxisEdge();\n  RectangleEdge yAxisLocation\u003dplot.getRangeAxisEdge();\n  double transX0\u003ddomainAxis.valueToJava2D(x0,dataArea,xAxisLocation);\n  double transY0\u003drangeAxis.valueToJava2D(y0,dataArea,yAxisLocation);\n  double transX1\u003ddomainAxis.valueToJava2D(x1,dataArea,xAxisLocation);\n  double transY1\u003drangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);\n  if (Double.isNaN(transX0) || Double.isNaN(transY0) || Double.isNaN(transX1)|| Double.isNaN(transY1)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  boolean visible\u003dfalse;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    state.workingLine.setLine(transY0,transX0,transY1,transX1);\n  }\n else   if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n    state.workingLine.setLine(transX0,transY0,transX1,transY1);\n  }\n  visible\u003dLineUtilities.clipLine(state.workingLine,dataArea);\n  if (visible) {\n    drawShape1(g2,pass,series,item,selected,state.workingLine);\n  }\n}",
    "begin_line": 819,
    "end_line": 868,
    "comment": "/** \n * Draws the item (first pass). This method draws the lines connecting the items.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param plot  the plot (can be used to obtain standard colorinformation etc).\n * @param dataset  the dataset.\n * @param pass  the pass.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param selected  is the data item selected?\n * @param dataArea  the area within which the data is being drawn.\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.drawShape1#882",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape1(java.awt.Graphics2D, int, int, int, boolean, java.awt.Shape)",
    "snippet": "protected void drawShape1(Graphics2D g2,int pass,int series,int item,boolean selected,Shape shape){\n  g2.setStroke(getItemStroke(series,item,selected));\n  g2.setPaint(getItemPaint(series,item,selected));\n  g2.draw(shape);\n}",
    "begin_line": 882,
    "end_line": 887,
    "comment": "/** \n * Draws a shape (first pass).\n * @param g2  the graphics device.\n * @param pass  the pass.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  is the data item selected?\n * @param shape  the shape.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.drawPrimaryLineAsPath#911",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawPrimaryLineAsPath(org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.Graphics2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawPrimaryLineAsPath(XYItemRendererState state,Graphics2D g2,XYPlot plot,XYDataset dataset,int pass,int series,int item,boolean selected,ValueAxis domainAxis,ValueAxis rangeAxis,Rectangle2D dataArea){\n  RectangleEdge xAxisLocation\u003dplot.getDomainAxisEdge();\n  RectangleEdge yAxisLocation\u003dplot.getRangeAxisEdge();\n  double x1\u003ddataset.getXValue(series,item);\n  double y1\u003ddataset.getYValue(series,item);\n  double transX1\u003ddomainAxis.valueToJava2D(x1,dataArea,xAxisLocation);\n  double transY1\u003drangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);\n  State s\u003d(State)state;\n  if (!Double.isNaN(transX1) \u0026\u0026 !Double.isNaN(transY1)) {\n    float x\u003d(float)transX1;\n    float y\u003d(float)transY1;\n    PlotOrientation orientation\u003dplot.getOrientation();\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      x\u003d(float)transY1;\n      y\u003d(float)transX1;\n    }\n    if (s.isLastPointGood()) {\n      s.seriesPath.lineTo(x,y);\n    }\n else {\n      s.seriesPath.moveTo(x,y);\n    }\n    s.setLastPointGood(true);\n  }\n else {\n    s.setLastPointGood(false);\n  }\n  if (item \u003d\u003d s.getLastItemIndex()) {\n    drawShape1(g2,pass,series,item,selected,s.seriesPath);\n  }\n}",
    "begin_line": 911,
    "end_line": 952,
    "comment": "/** \n * Draws the item (first pass). This method draws the lines connecting the items. Instead of drawing separate lines, a GeneralPath is constructed and drawn at the end of the series painting.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param plot  the plot (can be used to obtain standard color informationetc).\n * @param dataset  the dataset.\n * @param pass  the pass.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param selected  is the data item selected?\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataArea  the area within which the data is being drawn.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.drawShape2#974",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.drawShape2(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, int, int, int, boolean, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.plot.CrosshairState, org.jfree.chart.entity.EntityCollection)",
    "snippet": "protected void drawShape2(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset dataset,int pass,int series,int item,boolean selected,ValueAxis domainAxis,ValueAxis rangeAxis,CrosshairState crosshairState,EntityCollection entities){\n  Shape entityArea\u003dnull;\n  double x1\u003ddataset.getXValue(series,item);\n  double y1\u003ddataset.getYValue(series,item);\n  if (Double.isNaN(y1) || Double.isNaN(x1)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  RectangleEdge xAxisLocation\u003dplot.getDomainAxisEdge();\n  RectangleEdge yAxisLocation\u003dplot.getRangeAxisEdge();\n  double transX1\u003ddomainAxis.valueToJava2D(x1,dataArea,xAxisLocation);\n  double transY1\u003drangeAxis.valueToJava2D(y1,dataArea,yAxisLocation);\n  if (getItemShapeVisible(series,item)) {\n    Shape shape\u003dgetItemShape(series,item,selected);\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      shape\u003dShapeUtilities.createTranslatedShape(shape,transY1,transX1);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      shape\u003dShapeUtilities.createTranslatedShape(shape,transX1,transY1);\n    }\n    entityArea\u003dshape;\n    if (shape.intersects(dataArea)) {\n      if (getItemShapeFilled(series,item)) {\n        if (this.useFillPaint) {\n          g2.setPaint(getItemFillPaint(series,item,selected));\n        }\n else {\n          g2.setPaint(getItemPaint(series,item,selected));\n        }\n        g2.fill(shape);\n      }\n      if (this.drawOutlines) {\n        if (getUseOutlinePaint()) {\n          g2.setPaint(getItemOutlinePaint(series,item,selected));\n        }\n else {\n          g2.setPaint(getItemPaint(series,item,selected));\n        }\n        g2.setStroke(getItemOutlineStroke(series,item,selected));\n        g2.draw(shape);\n      }\n    }\n  }\n  double xx\u003dtransX1;\n  double yy\u003dtransY1;\n  if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n    xx\u003dtransY1;\n    yy\u003dtransX1;\n  }\n  if (isItemLabelVisible(series,item,selected)) {\n    drawItemLabel(g2,orientation,dataset,series,item,selected,xx,yy,(y1 \u003c 0.0));\n  }\n  int domainAxisIndex\u003dplot.getDomainAxisIndex(domainAxis);\n  int rangeAxisIndex\u003dplot.getRangeAxisIndex(rangeAxis);\n  updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);\n  if (entities !\u003d null \u0026\u0026 ShapeUtilities.isPointInRect(xx,yy,dataArea)) {\n    addEntity(entities,entityArea,dataset,series,item,selected,xx,yy);\n  }\n}",
    "begin_line": 974,
    "end_line": 1054,
    "comment": "/** \n * Draws the item shapes and adds chart entities (second pass). This method draws the shapes which mark the item positions. If \u003ccode\u003eentities\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e it will be populated with entity information for points that fall within the data area.\n * @param g2  the graphics device.\n * @param plot  the plot (can be used to obtain standard colorinformation etc).\n * @param domainAxis  the domain axis.\n * @param dataArea  the area within which the data is being drawn.\n * @param rangeAxis  the range axis.\n * @param dataset  the dataset.\n * @param pass  the pass.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param selected  is the data item selected?\n * @param crosshairState  the crosshair state.\n * @param entities the entity collection.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.getLegendItem#1065",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendItem(int, int)",
    "snippet": "public LegendItem getLegendItem(int datasetIndex,int series){\n  XYPlot plot\u003dgetPlot();\n  if (plot \u003d\u003d null) {\n    return null;\n  }\n  LegendItem result\u003dnull;\n  XYDataset dataset\u003dplot.getDataset(datasetIndex);\n  if (dataset !\u003d null) {\n    if (getItemVisible(series,0)) {\n      String label\u003dgetLegendItemLabelGenerator().generateLabel(dataset,series);\n      String description\u003dlabel;\n      String toolTipText\u003dnull;\n      if (getLegendItemToolTipGenerator() !\u003d null) {\n        toolTipText\u003dgetLegendItemToolTipGenerator().generateLabel(dataset,series);\n      }\n      String urlText\u003dnull;\n      if (getLegendItemURLGenerator() !\u003d null) {\n        urlText\u003dgetLegendItemURLGenerator().generateLabel(dataset,series);\n      }\n      boolean shapeIsVisible\u003dgetItemShapeVisible(series,0);\n      Shape shape\u003dlookupLegendShape(series);\n      boolean shapeIsFilled\u003dgetItemShapeFilled(series,0);\n      Paint fillPaint\u003d(this.useFillPaint ? lookupSeriesFillPaint(series) : lookupSeriesPaint(series));\n      boolean shapeOutlineVisible\u003dthis.drawOutlines;\n      Paint outlinePaint\u003d(this.useOutlinePaint ? lookupSeriesOutlinePaint(series) : lookupSeriesPaint(series));\n      Stroke outlineStroke\u003dlookupSeriesOutlineStroke(series);\n      boolean lineVisible\u003dgetItemLineVisible(series,0);\n      Stroke lineStroke\u003dlookupSeriesStroke(series);\n      Paint linePaint\u003dlookupSeriesPaint(series);\n      result\u003dnew LegendItem(label,description,toolTipText,urlText,shapeIsVisible,shape,shapeIsFilled,fillPaint,shapeOutlineVisible,outlinePaint,outlineStroke,lineVisible,this.legendLine,lineStroke,linePaint);\n      result.setLabelFont(lookupLegendTextFont(series));\n      Paint labelPaint\u003dlookupLegendTextPaint(series);\n      if (labelPaint !\u003d null) {\n        result.setLabelPaint(labelPaint);\n      }\n      result.setSeriesKey(dataset.getSeriesKey(series));\n      result.setSeriesIndex(series);\n      result.setDataset(dataset);\n      result.setDatasetIndex(datasetIndex);\n    }\n  }\n  return result;\n}",
    "begin_line": 1065,
    "end_line": 1122,
    "comment": "/** \n * Returns a legend item for the specified series.\n * @param datasetIndex  the dataset index (zero-based).\n * @param series  the series index (zero-based).\n * @return A legend item for the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.clone#1131",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYLineAndShapeRenderer clone\u003d(XYLineAndShapeRenderer)super.clone();\n  clone.seriesLinesVisible\u003d(BooleanList)this.seriesLinesVisible.clone();\n  if (this.legendLine !\u003d null) {\n    clone.legendLine\u003dShapeUtilities.clone(this.legendLine);\n  }\n  clone.seriesShapesVisible\u003d(BooleanList)this.seriesShapesVisible.clone();\n  clone.seriesShapesFilled\u003d(BooleanList)this.seriesShapesFilled.clone();\n  return clone;\n}",
    "begin_line": 1131,
    "end_line": 1143,
    "comment": "/** \n * Returns a clone of the renderer.\n * @return A clone.\n * @throws CloneNotSupportedException if the clone cannot be created.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.equals#1152",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYLineAndShapeRenderer)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  XYLineAndShapeRenderer that\u003d(XYLineAndShapeRenderer)obj;\n  if (!ObjectUtilities.equal(this.seriesLinesVisible,that.seriesLinesVisible)) {\n    return false;\n  }\n  if (this.baseLinesVisible !\u003d that.baseLinesVisible) {\n    return false;\n  }\n  if (!ShapeUtilities.equal(this.legendLine,that.legendLine)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.seriesShapesVisible,that.seriesShapesVisible)) {\n    return false;\n  }\n  if (this.baseShapesVisible !\u003d that.baseShapesVisible) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.seriesShapesFilled,that.seriesShapesFilled)) {\n    return false;\n  }\n  if (this.baseShapesFilled !\u003d that.baseShapesFilled) {\n    return false;\n  }\n  if (this.drawOutlines !\u003d that.drawOutlines) {\n    return false;\n  }\n  if (this.useOutlinePaint !\u003d that.useOutlinePaint) {\n    return false;\n  }\n  if (this.useFillPaint !\u003d that.useFillPaint) {\n    return false;\n  }\n  if (this.drawSeriesLineAsPath !\u003d that.drawSeriesLineAsPath) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 1152,
    "end_line": 1200,
    "comment": "/** \n * Tests this renderer for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.readObject#1210",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.legendLine\u003dSerialUtilities.readShape(stream);\n}",
    "begin_line": 1210,
    "end_line": 1214,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "State.writeObject#1223",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYLineAndShapeRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writeShape(this.legendLine,stream);\n}",
    "begin_line": 1223,
    "end_line": 1226,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.XYStepAreaRenderer#129",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.XYStepAreaRenderer()",
    "snippet": "public XYStepAreaRenderer(){\n  this(AREA);\n}",
    "begin_line": 129,
    "end_line": 131,
    "comment": "/** \n * Constructs a new renderer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.XYStepAreaRenderer#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.XYStepAreaRenderer(int)",
    "snippet": "public XYStepAreaRenderer(int type){\n  this(type,null,null);\n}",
    "begin_line": 138,
    "end_line": 140,
    "comment": "/** \n * Constructs a new renderer.\n * @param type  the type of the renderer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.XYStepAreaRenderer#153",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.XYStepAreaRenderer(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
    "snippet": "public XYStepAreaRenderer(int type,XYToolTipGenerator toolTipGenerator,XYURLGenerator urlGenerator){\n  super();\n  setBaseToolTipGenerator(toolTipGenerator);\n  setBaseURLGenerator(urlGenerator);\n  if (type \u003d\u003d AREA) {\n    this.plotArea\u003dtrue;\n  }\n else   if (type \u003d\u003d SHAPES) {\n    this.shapesVisible\u003dtrue;\n  }\n else   if (type \u003d\u003d AREA_AND_SHAPES) {\n    this.plotArea\u003dtrue;\n    this.shapesVisible\u003dtrue;\n  }\n  this.showOutline\u003dfalse;\n}",
    "begin_line": 153,
    "end_line": 172,
    "comment": "/** \n * Constructs a new renderer. \u003cp\u003e To specify the type of renderer, use one of the constants: AREA, SHAPES or AREA_AND_SHAPES.\n * @param type  the type of renderer.\n * @param toolTipGenerator  the tool tip generator to use(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param urlGenerator  the URL generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.isOutline#182",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.isOutline()",
    "snippet": "public boolean isOutline(){\n  return this.showOutline;\n}",
    "begin_line": 182,
    "end_line": 184,
    "comment": "/** \n * Returns a flag that controls whether or not outlines of the areas are drawn.\n * @return The flag.\n * @see #setOutline(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.setOutline#195",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.setOutline(boolean)",
    "snippet": "public void setOutline(boolean show){\n  this.showOutline\u003dshow;\n  fireChangeEvent();\n}",
    "begin_line": 195,
    "end_line": 198,
    "comment": "/** \n * Sets a flag that controls whether or not outlines of the areas are drawn, and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param show  the flag.\n * @see #isOutline()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.getShapesVisible#207",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.getShapesVisible()",
    "snippet": "public boolean getShapesVisible(){\n  return this.shapesVisible;\n}",
    "begin_line": 207,
    "end_line": 209,
    "comment": "/** \n * Returns true if shapes are being plotted by the renderer.\n * @return \u003ccode\u003etrue\u003c/code\u003e if shapes are being plotted by the renderer.\n * @see #setShapesVisible(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.setShapesVisible#220",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesVisible(boolean)",
    "snippet": "public void setShapesVisible(boolean flag){\n  this.shapesVisible\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 220,
    "end_line": 223,
    "comment": "/** \n * Sets the flag that controls whether or not shapes are displayed for each data item, and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param flag  the flag.\n * @see #getShapesVisible()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.isShapesFilled#232",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.isShapesFilled()",
    "snippet": "public boolean isShapesFilled(){\n  return this.shapesFilled;\n}",
    "begin_line": 232,
    "end_line": 234,
    "comment": "/** \n * Returns the flag that controls whether or not the shapes are filled.\n * @return A boolean.\n * @see #setShapesFilled(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.setShapesFilled#244",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesFilled(boolean)",
    "snippet": "public void setShapesFilled(boolean filled){\n  this.shapesFilled\u003dfilled;\n  fireChangeEvent();\n}",
    "begin_line": 244,
    "end_line": 247,
    "comment": "/** \n * Sets the \u0027shapes filled\u0027 for ALL series and sends a {@link RendererChangeEvent} to all registered listeners.\n * @param filled  the flag.\n * @see #isShapesFilled()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.getPlotArea#256",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.getPlotArea()",
    "snippet": "public boolean getPlotArea(){\n  return this.plotArea;\n}",
    "begin_line": 256,
    "end_line": 258,
    "comment": "/** \n * Returns true if Area is being plotted by the renderer.\n * @return \u003ccode\u003etrue\u003c/code\u003e if Area is being plotted by the renderer.\n * @see #setPlotArea(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.setPlotArea#269",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.setPlotArea(boolean)",
    "snippet": "public void setPlotArea(boolean flag){\n  this.plotArea\u003dflag;\n  fireChangeEvent();\n}",
    "begin_line": 269,
    "end_line": 272,
    "comment": "/** \n * Sets a flag that controls whether or not areas are drawn for each data item and sends a  {@link RendererChangeEvent} to all registeredlisteners.\n * @param flag  the flag.\n * @see #getPlotArea()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.getRangeBase#283",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.getRangeBase()",
    "snippet": "public double getRangeBase(){\n  return this.rangeBase;\n}",
    "begin_line": 283,
    "end_line": 285,
    "comment": "/** \n * Returns the value on the range axis which defines the \u0027lower\u0027 border of the area.\n * @return \u003ccode\u003edouble\u003c/code\u003e the value on the range axis which definesthe \u0027lower\u0027 border of the area.\n * @see #setRangeBase(double)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.setRangeBase#298",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.setRangeBase(double)",
    "snippet": "public void setRangeBase(double val){\n  this.rangeBase\u003dval;\n  fireChangeEvent();\n}",
    "begin_line": 298,
    "end_line": 301,
    "comment": "/** \n * Sets the value on the range axis which defines the default border of the area, and sends a  {@link RendererChangeEvent} to all registeredlisteners.  E.g. setRangeBase(Double.NEGATIVE_INFINITY) lets areas always reach the lower border of the plotArea.\n * @param val  the value on the range axis which defines the default borderof the area.\n * @see #getRangeBase()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.initialise#316",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.initialise(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotRenderingInfo)",
    "snippet": "public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){\n  XYItemRendererState state\u003dsuper.initialise(g2,dataArea,plot,data,info);\n  state.setProcessVisibleItemsOnly(false);\n  return state;\n}",
    "begin_line": 316,
    "end_line": 330,
    "comment": "/** \n * Initialises the renderer.  Here we calculate the Java2D y-coordinate for zero, since all the bars have their bases fixed at zero.\n * @param g2  the graphics device.\n * @param dataArea  the area inside the axes.\n * @param plot  the plot.\n * @param data  the data.\n * @param info  an optional info collection object to return data back tothe caller.\n * @return The number of passes required by the renderer.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.drawItem#348",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
    "snippet": "public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,boolean selected,int pass){\n  PlotOrientation orientation\u003dplot.getOrientation();\n  int itemCount\u003ddataset.getItemCount(series);\n  Paint paint\u003dgetItemPaint(series,item,selected);\n  Stroke seriesStroke\u003dgetItemStroke(series,item,selected);\n  g2.setPaint(paint);\n  g2.setStroke(seriesStroke);\n  double x1\u003ddataset.getXValue(series,item);\n  double y1\u003ddataset.getYValue(series,item);\n  double x\u003dx1;\n  double y\u003dDouble.isNaN(y1) ? getRangeBase() : y1;\n  double transX1\u003ddomainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());\n  double transY1\u003drangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());\n  transY1\u003drestrictValueToDataArea(transY1,plot,dataArea);\n  if (this.pArea \u003d\u003d null \u0026\u0026 !Double.isNaN(y1)) {\n    this.pArea\u003dnew Polygon();\n    double transY2\u003drangeAxis.valueToJava2D(getRangeBase(),dataArea,plot.getRangeAxisEdge());\n    transY2\u003drestrictValueToDataArea(transY2,plot,dataArea);\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      this.pArea.addPoint((int)transX1,(int)transY2);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      this.pArea.addPoint((int)transY2,(int)transX1);\n    }\n  }\n  double transX0\u003d0;\n  double transY0\u003drestrictValueToDataArea(getRangeBase(),plot,dataArea);\n  double x0;\n  double y0;\n  if (item \u003e 0) {\n    x0\u003ddataset.getXValue(series,item - 1);\n    y0\u003dDouble.isNaN(y1) ? y1 : dataset.getYValue(series,item - 1);\n    x\u003dx0;\n    y\u003dDouble.isNaN(y0) ? getRangeBase() : y0;\n    transX0\u003ddomainAxis.valueToJava2D(x,dataArea,plot.getDomainAxisEdge());\n    transY0\u003drangeAxis.valueToJava2D(y,dataArea,plot.getRangeAxisEdge());\n    transY0\u003drestrictValueToDataArea(transY0,plot,dataArea);\n    if (Double.isNaN(y1)) {\n      transX1\u003dtransX0;\n      transY0\u003dtransY1;\n    }\n    if (transY0 !\u003d transY1) {\n      if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n        this.pArea.addPoint((int)transX1,(int)transY0);\n      }\n else       if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        this.pArea.addPoint((int)transY0,(int)transX1);\n      }\n    }\n  }\n  Shape shape\u003dnull;\n  if (!Double.isNaN(y1)) {\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      this.pArea.addPoint((int)transX1,(int)transY1);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      this.pArea.addPoint((int)transY1,(int)transX1);\n    }\n    if (getShapesVisible()) {\n      shape\u003dgetItemShape(series,item,selected);\n      if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n        shape\u003dShapeUtilities.createTranslatedShape(shape,transX1,transY1);\n      }\n else       if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        shape\u003dShapeUtilities.createTranslatedShape(shape,transY1,transX1);\n      }\n      if (isShapesFilled()) {\n        g2.fill(shape);\n      }\n else {\n        g2.draw(shape);\n      }\n    }\n else {\n      if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n        shape\u003dnew Rectangle2D.Double(transX1 - 2,transY1 - 2,4.0,4.0);\n      }\n else       if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        shape\u003dnew Rectangle2D.Double(transY1 - 2,transX1 - 2,4.0,4.0);\n      }\n    }\n  }\n  if (getPlotArea() \u0026\u0026 item \u003e 0 \u0026\u0026 this.pArea !\u003d null \u0026\u0026 (item \u003d\u003d (itemCount - 1) || Double.isNaN(y1))) {\n    double transY2\u003drangeAxis.valueToJava2D(getRangeBase(),dataArea,plot.getRangeAxisEdge());\n    transY2\u003drestrictValueToDataArea(transY2,plot,dataArea);\n    if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      this.pArea.addPoint((int)transX1,(int)transY2);\n    }\n else     if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      this.pArea.addPoint((int)transY2,(int)transX1);\n    }\n    g2.fill(this.pArea);\n    if (isOutline()) {\n      g2.setStroke(plot.getOutlineStroke());\n      g2.setPaint(plot.getOutlinePaint());\n      g2.draw(this.pArea);\n    }\n    this.pArea\u003dnull;\n  }\n  if (!Double.isNaN(y1)) {\n    int domainAxisIndex\u003dplot.getDomainAxisIndex(domainAxis);\n    int rangeAxisIndex\u003dplot.getRangeAxisIndex(rangeAxis);\n    XYCrosshairState crosshairState\u003dstate.getCrosshairState();\n    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);\n  }\n  EntityCollection entities\u003dstate.getEntityCollection();\n  if (entities !\u003d null) {\n    addEntity(entities,shape,dataset,series,item,selected,transX1,transY1);\n  }\n}",
    "begin_line": 348,
    "end_line": 525,
    "comment": "/** \n * Draws the visual representation of a single data item.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the area within which the data is being drawn.\n * @param plot  the plot (can be used to obtain standard color informationetc).\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the range axis.\n * @param dataset  the dataset.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param pass  the pass index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.equals#534",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYStepAreaRenderer)) {\n    return false;\n  }\n  XYStepAreaRenderer that\u003d(XYStepAreaRenderer)obj;\n  if (this.showOutline !\u003d that.showOutline) {\n    return false;\n  }\n  if (this.shapesVisible !\u003d that.shapesVisible) {\n    return false;\n  }\n  if (this.shapesFilled !\u003d that.shapesFilled) {\n    return false;\n  }\n  if (this.plotArea !\u003d that.plotArea) {\n    return false;\n  }\n  if (this.rangeBase !\u003d that.rangeBase) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 534,
    "end_line": 558,
    "comment": "/** \n * Tests this renderer for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.clone#567",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 567,
    "end_line": 569,
    "comment": "/** \n * Returns a clone of the renderer.\n * @return A clone.\n * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepAreaRenderer.restrictValueToDataArea#586",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepAreaRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepAreaRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepAreaRenderer.restrictValueToDataArea(double, org.jfree.chart.plot.XYPlot, java.awt.geom.Rectangle2D)",
    "snippet": "protected static double restrictValueToDataArea(double value,XYPlot plot,Rectangle2D dataArea){\n  double min\u003d0;\n  double max\u003d0;\n  if (plot.getOrientation() \u003d\u003d PlotOrientation.VERTICAL) {\n    min\u003ddataArea.getMinY();\n    max\u003ddataArea.getMaxY();\n  }\n else   if (plot.getOrientation() \u003d\u003d PlotOrientation.HORIZONTAL) {\n    min\u003ddataArea.getMinX();\n    max\u003ddataArea.getMaxX();\n  }\n  if (value \u003c min) {\n    value\u003dmin;\n  }\n else   if (value \u003e max) {\n    value\u003dmax;\n  }\n  return value;\n}",
    "begin_line": 586,
    "end_line": 606,
    "comment": "/** \n * Helper method which returns a value if it lies inside the visible dataArea and otherwise the corresponding coordinate on the border of the dataArea. The PlotOrientation is taken into account. Useful to avoid possible sun.dc.pr.PRException: endPath: bad path which occurs when trying to draw lines/shapes which in large part lie outside of the visible dataArea.\n * @param value the value which shall be\n * @param dataArea  the area within which the data is being drawn.\n * @param plot  the plot (can be used to obtain standard colorinformation etc).\n * @return \u003ccode\u003edouble\u003c/code\u003e value inside the data area.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.XYStepRenderer#123",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.XYStepRenderer()",
    "snippet": "public XYStepRenderer(){\n  this(null,null);\n}",
    "begin_line": 123,
    "end_line": 125,
    "comment": "/** \n * Constructs a new renderer with no tooltip or URL generation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.XYStepRenderer#135",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.XYStepRenderer(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)",
    "snippet": "public XYStepRenderer(XYToolTipGenerator toolTipGenerator,XYURLGenerator urlGenerator){\n  super();\n  setBaseToolTipGenerator(toolTipGenerator);\n  setBaseURLGenerator(urlGenerator);\n  setBaseShapesVisible(false);\n}",
    "begin_line": 135,
    "end_line": 141,
    "comment": "/** \n * Constructs a new renderer with the specified tool tip and URL generators.\n * @param toolTipGenerator  the item label generator (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param urlGenerator  the URL generator (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.getStepPoint#156",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.getStepPoint()",
    "snippet": "public double getStepPoint(){\n  return this.stepPoint;\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Returns the fraction of the domain position between two points on which the step is drawn.  The default is 1.0d, which means the step is drawn at the domain position of the second`point. If the stepPoint is 0.5d the step is drawn at half between the two points.\n * @return The fraction of the domain position between two points where thestep is drawn.\n * @see #setStepPoint(double)\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.setStepPoint#170",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.setStepPoint(double)",
    "snippet": "public void setStepPoint(double stepPoint){\n  if (stepPoint \u003c 0.0d || stepPoint \u003e 1.0d) {\n    throw new IllegalArgumentException(\"Requires stepPoint in [0.0;1.0]\");\n  }\n  this.stepPoint\u003dstepPoint;\n  fireChangeEvent();\n}",
    "begin_line": 170,
    "end_line": 177,
    "comment": "/** \n * Sets the step point and sends a  {@link RendererChangeEvent} to allregistered listeners.\n * @param stepPoint  the step point (in the range 0.0 to 1.0)\n * @see #getStepPoint()\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.drawItem#194",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.drawItem(java.awt.Graphics2D, org.jfree.chart.renderer.xy.XYItemRendererState, java.awt.geom.Rectangle2D, org.jfree.chart.plot.XYPlot, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.data.xy.XYDataset, int, int, boolean, int)",
    "snippet": "public void drawItem(Graphics2D g2,XYItemRendererState state,Rectangle2D dataArea,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,boolean selected,int pass){\n  if (!getItemVisible(series,item)) {\n    return;\n  }\n  PlotOrientation orientation\u003dplot.getOrientation();\n  Paint seriesPaint\u003dgetItemPaint(series,item,selected);\n  Stroke seriesStroke\u003dgetItemStroke(series,item,selected);\n  g2.setPaint(seriesPaint);\n  g2.setStroke(seriesStroke);\n  double x1\u003ddataset.getXValue(series,item);\n  double y1\u003ddataset.getYValue(series,item);\n  RectangleEdge xAxisLocation\u003dplot.getDomainAxisEdge();\n  RectangleEdge yAxisLocation\u003dplot.getRangeAxisEdge();\n  double transX1\u003ddomainAxis.valueToJava2D(x1,dataArea,xAxisLocation);\n  double transY1\u003d(Double.isNaN(y1) ? Double.NaN : rangeAxis.valueToJava2D(y1,dataArea,yAxisLocation));\n  if (pass \u003d\u003d 0 \u0026\u0026 item \u003e 0) {\n    double x0\u003ddataset.getXValue(series,item - 1);\n    double y0\u003ddataset.getYValue(series,item - 1);\n    double transX0\u003ddomainAxis.valueToJava2D(x0,dataArea,xAxisLocation);\n    double transY0\u003d(Double.isNaN(y0) ? Double.NaN : rangeAxis.valueToJava2D(y0,dataArea,yAxisLocation));\n    if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n      if (transY0 \u003d\u003d transY1) {\n        drawLine(g2,state.workingLine,transY0,transX0,transY1,transX1);\n      }\n else {\n        double transXs\u003dtransX0 + (getStepPoint() * (transX1 - transX0));\n        drawLine(g2,state.workingLine,transY0,transX0,transY0,transXs);\n        drawLine(g2,state.workingLine,transY0,transXs,transY1,transXs);\n        drawLine(g2,state.workingLine,transY1,transXs,transY1,transX1);\n      }\n    }\n else     if (orientation \u003d\u003d PlotOrientation.VERTICAL) {\n      if (transY0 \u003d\u003d transY1) {\n        drawLine(g2,state.workingLine,transX0,transY0,transX1,transY1);\n      }\n else {\n        double transXs\u003dtransX0 + (getStepPoint() * (transX1 - transX0));\n        drawLine(g2,state.workingLine,transX0,transY0,transXs,transY0);\n        drawLine(g2,state.workingLine,transXs,transY0,transXs,transY1);\n        drawLine(g2,state.workingLine,transXs,transY1,transX1,transY1);\n      }\n    }\n    int domainAxisIndex\u003dplot.getDomainAxisIndex(domainAxis);\n    int rangeAxisIndex\u003dplot.getRangeAxisIndex(rangeAxis);\n    XYCrosshairState crosshairState\u003dstate.getCrosshairState();\n    updateCrosshairValues(crosshairState,x1,y1,domainAxisIndex,rangeAxisIndex,transX1,transY1,orientation);\n    EntityCollection entities\u003dstate.getEntityCollection();\n    if (entities !\u003d null) {\n      addEntity(entities,null,dataset,series,item,selected,transX1,transY1);\n    }\n  }\n  if (pass \u003d\u003d 1) {\n    if (isItemLabelVisible(series,item,selected)) {\n      double xx\u003dtransX1;\n      double yy\u003dtransY1;\n      if (orientation \u003d\u003d PlotOrientation.HORIZONTAL) {\n        xx\u003dtransY1;\n        yy\u003dtransX1;\n      }\n      drawItemLabel(g2,orientation,dataset,series,item,selected,xx,yy,(y1 \u003c 0.0));\n    }\n  }\n}",
    "begin_line": 194,
    "end_line": 298,
    "comment": "/** \n * Draws the visual representation of a single data item.\n * @param g2  the graphics device.\n * @param state  the renderer state.\n * @param dataArea  the area within which the data is being drawn.\n * @param plot  the plot (can be used to obtain standard colorinformation etc).\n * @param domainAxis  the domain axis.\n * @param rangeAxis  the vertical axis.\n * @param dataset  the dataset.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @param pass  the pass index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.drawLine#311",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.drawLine(java.awt.Graphics2D, java.awt.geom.Line2D, double, double, double, double)",
    "snippet": "private void drawLine(Graphics2D g2,Line2D line,double x0,double y0,double x1,double y1){\n  if (Double.isNaN(x0) || Double.isNaN(x1) || Double.isNaN(y0)|| Double.isNaN(y1)) {\n    return;\n  }\n  line.setLine(x0,y0,x1,y1);\n  g2.draw(line);\n}",
    "begin_line": 311,
    "end_line": 319,
    "comment": "/** \n * A utility method that draws a line but only if none of the coordinates are NaN values.\n * @param g2  the graphics target.\n * @param line  the line object.\n * @param x0  the x-coordinate for the starting point of the line.\n * @param y0  the y-coordinate for the starting point of the line.\n * @param x1  the x-coordinate for the ending point of the line.\n * @param y1  the y-coordinate for the ending point of the line.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.equals#328",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYLineAndShapeRenderer)) {\n    return false;\n  }\n  XYStepRenderer that\u003d(XYStepRenderer)obj;\n  if (this.stepPoint !\u003d that.stepPoint) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 328,
    "end_line": 340,
    "comment": "/** \n * Tests this renderer for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.hashCode#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.hashCode()",
    "snippet": "public int hashCode(){\n  return HashUtilities.hashCode(super.hashCode(),this.stepPoint);\n}",
    "begin_line": 347,
    "end_line": 349,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYStepRenderer.clone#358",
    "is_bug": true,
    "src_path": "org/jfree/chart/renderer/xy/XYStepRenderer.java",
    "class_name": "org.jfree.chart.renderer.xy.XYStepRenderer",
    "signature": "org.jfree.chart.renderer.xy.XYStepRenderer.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 358,
    "end_line": 360,
    "comment": "/** \n * Returns a clone of the renderer.\n * @return A clone.\n * @throws CloneNotSupportedException  if the renderer cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "JFreeChartResources.getContents#51",
    "is_bug": true,
    "src_path": "org/jfree/chart/resources/JFreeChartResources.java",
    "class_name": "org.jfree.chart.resources.JFreeChartResources",
    "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
    "snippet": "public Object[][] getContents(){\n  return CONTENTS;\n}",
    "begin_line": 51,
    "end_line": 53,
    "comment": "/** \n * Returns the array of strings in the resource bundle.\n * @return The resources.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.TextAnchor#124",
    "is_bug": true,
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
    "snippet": "private TextAnchor(String name){\n  this.name\u003dname;\n}",
    "begin_line": 124,
    "end_line": 126,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.toString#133",
    "is_bug": true,
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.equals#145",
    "is_bug": true,
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof TextAnchor)) {\n    return false;\n  }\n  TextAnchor order\u003d(TextAnchor)obj;\n  if (!this.name.equals(order.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 145,
    "end_line": 160,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.hashCode#167",
    "is_bug": true,
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextAnchor.readResolve#178",
    "is_bug": true,
    "src_path": "org/jfree/chart/text/TextAnchor.java",
    "class_name": "org.jfree.chart.text.TextAnchor",
    "signature": "org.jfree.chart.text.TextAnchor.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  TextAnchor result\u003dnull;\n  if (this.equals(TextAnchor.TOP_LEFT)) {\n    result\u003dTextAnchor.TOP_LEFT;\n  }\n else   if (this.equals(TextAnchor.TOP_CENTER)) {\n    result\u003dTextAnchor.TOP_CENTER;\n  }\n else   if (this.equals(TextAnchor.TOP_RIGHT)) {\n    result\u003dTextAnchor.TOP_RIGHT;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_LEFT)) {\n    result\u003dTextAnchor.BOTTOM_LEFT;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_CENTER)) {\n    result\u003dTextAnchor.BOTTOM_CENTER;\n  }\n else   if (this.equals(TextAnchor.BOTTOM_RIGHT)) {\n    result\u003dTextAnchor.BOTTOM_RIGHT;\n  }\n else   if (this.equals(TextAnchor.BASELINE_LEFT)) {\n    result\u003dTextAnchor.BASELINE_LEFT;\n  }\n else   if (this.equals(TextAnchor.BASELINE_CENTER)) {\n    result\u003dTextAnchor.BASELINE_CENTER;\n  }\n else   if (this.equals(TextAnchor.BASELINE_RIGHT)) {\n    result\u003dTextAnchor.BASELINE_RIGHT;\n  }\n else   if (this.equals(TextAnchor.CENTER_LEFT)) {\n    result\u003dTextAnchor.CENTER_LEFT;\n  }\n else   if (this.equals(TextAnchor.CENTER)) {\n    result\u003dTextAnchor.CENTER;\n  }\n else   if (this.equals(TextAnchor.CENTER_RIGHT)) {\n    result\u003dTextAnchor.CENTER_RIGHT;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_LEFT)) {\n    result\u003dTextAnchor.HALF_ASCENT_LEFT;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_CENTER)) {\n    result\u003dTextAnchor.HALF_ASCENT_CENTER;\n  }\n else   if (this.equals(TextAnchor.HALF_ASCENT_RIGHT)) {\n    result\u003dTextAnchor.HALF_ASCENT_RIGHT;\n  }\n  return result;\n}",
    "begin_line": 178,
    "end_line": 226,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.LegendTitle#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
    "snippet": "public LegendTitle(LegendItemSource source){\n  this(source,new FlowArrangement(),new ColumnArrangement());\n}",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Constructs a new (empty) legend for the specified source.\n * @param source  the source.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.LegendTitle#189",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
    "snippet": "public LegendTitle(LegendItemSource source,Arrangement hLayout,Arrangement vLayout){\n  this.sources\u003dnew LegendItemSource[]{source};\n  this.items\u003dnew BlockContainer(hLayout);\n  this.hLayout\u003dhLayout;\n  this.vLayout\u003dvLayout;\n  this.backgroundPaint\u003dnull;\n  this.legendItemGraphicEdge\u003dRectangleEdge.LEFT;\n  this.legendItemGraphicAnchor\u003dRectangleAnchor.CENTER;\n  this.legendItemGraphicLocation\u003dRectangleAnchor.CENTER;\n  this.legendItemGraphicPadding\u003dnew RectangleInsets(2.0,2.0,2.0,2.0);\n  this.itemFont\u003dDEFAULT_ITEM_FONT;\n  this.itemPaint\u003dDEFAULT_ITEM_PAINT;\n  this.itemLabelPadding\u003dnew RectangleInsets(2.0,2.0,2.0,2.0);\n}",
    "begin_line": 189,
    "end_line": 203,
    "comment": "/** \n * Creates a new legend title with the specified arrangement.\n * @param source  the source.\n * @param hLayout  the horizontal item arrangement (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param vLayout  the vertical item arrangement (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getSources#210",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getSources()",
    "snippet": "public LegendItemSource[] getSources(){\n  return this.sources;\n}",
    "begin_line": 210,
    "end_line": 212,
    "comment": "/** \n * Returns the legend item sources.\n * @return The sources.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setSources#220",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setSources(org.jfree.chart.LegendItemSource[])",
    "snippet": "public void setSources(LegendItemSource[] sources){\n  if (sources \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027sources\u0027 argument.\");\n  }\n  this.sources\u003dsources;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 220,
    "end_line": 226,
    "comment": "/** \n * Sets the legend item sources and sends a  {@link TitleChangeEvent} toall registered listeners.\n * @param sources  the sources (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getBackgroundPaint#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getBackgroundPaint()",
    "snippet": "public Paint getBackgroundPaint(){\n  return this.backgroundPaint;\n}",
    "begin_line": 233,
    "end_line": 235,
    "comment": "/** \n * Returns the background paint.\n * @return The background paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setBackgroundPaint#243",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setBackgroundPaint(Paint paint){\n  this.backgroundPaint\u003dpaint;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 243,
    "end_line": 246,
    "comment": "/** \n * Sets the background paint for the legend and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getLegendItemGraphicEdge#253",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicEdge()",
    "snippet": "public RectangleEdge getLegendItemGraphicEdge(){\n  return this.legendItemGraphicEdge;\n}",
    "begin_line": 253,
    "end_line": 255,
    "comment": "/** \n * Returns the location of the shape within each legend item.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setLegendItemGraphicEdge#262",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setLegendItemGraphicEdge(org.jfree.chart.util.RectangleEdge)",
    "snippet": "public void setLegendItemGraphicEdge(RectangleEdge edge){\n  if (edge \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027edge\u0027 argument.\");\n  }\n  this.legendItemGraphicEdge\u003dedge;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 262,
    "end_line": 268,
    "comment": "/** \n * Sets the location of the shape within each legend item.\n * @param edge  the edge (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getLegendItemGraphicAnchor#275",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor()",
    "snippet": "public RectangleAnchor getLegendItemGraphicAnchor(){\n  return this.legendItemGraphicAnchor;\n}",
    "begin_line": 275,
    "end_line": 277,
    "comment": "/** \n * Returns the legend item graphic anchor.\n * @return The graphic anchor (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setLegendItemGraphicAnchor#284",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setLegendItemGraphicAnchor(org.jfree.chart.util.RectangleAnchor)",
    "snippet": "public void setLegendItemGraphicAnchor(RectangleAnchor anchor){\n  if (anchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027anchor\u0027 point.\");\n  }\n  this.legendItemGraphicAnchor\u003danchor;\n}",
    "begin_line": 284,
    "end_line": 289,
    "comment": "/** \n * Sets the anchor point used for the graphic in each legend item.\n * @param anchor  the anchor point (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getLegendItemGraphicLocation#296",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation()",
    "snippet": "public RectangleAnchor getLegendItemGraphicLocation(){\n  return this.legendItemGraphicLocation;\n}",
    "begin_line": 296,
    "end_line": 298,
    "comment": "/** \n * Returns the legend item graphic location.\n * @return The location (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setLegendItemGraphicLocation#305",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setLegendItemGraphicLocation(org.jfree.chart.util.RectangleAnchor)",
    "snippet": "public void setLegendItemGraphicLocation(RectangleAnchor anchor){\n  this.legendItemGraphicLocation\u003danchor;\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * Sets the legend item graphic location.\n * @param anchor  the anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getLegendItemGraphicPadding#314",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicPadding()",
    "snippet": "public RectangleInsets getLegendItemGraphicPadding(){\n  return this.legendItemGraphicPadding;\n}",
    "begin_line": 314,
    "end_line": 316,
    "comment": "/** \n * Returns the padding that will be applied to each item graphic.\n * @return The padding (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setLegendItemGraphicPadding#324",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setLegendItemGraphicPadding(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setLegendItemGraphicPadding(RectangleInsets padding){\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027padding\u0027 argument.\");\n  }\n  this.legendItemGraphicPadding\u003dpadding;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 324,
    "end_line": 330,
    "comment": "/** \n * Sets the padding that will be applied to each item graphic in the legend and sends a  {@link TitleChangeEvent} to all registered listeners.\n * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getItemFont#337",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getItemFont()",
    "snippet": "public Font getItemFont(){\n  return this.itemFont;\n}",
    "begin_line": 337,
    "end_line": 339,
    "comment": "/** \n * Returns the item font.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setItemFont#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setItemFont(java.awt.Font)",
    "snippet": "public void setItemFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  this.itemFont\u003dfont;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 347,
    "end_line": 353,
    "comment": "/** \n * Sets the item font and sends a  {@link TitleChangeEvent} toall registered listeners.\n * @param font  the font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getItemPaint#360",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getItemPaint()",
    "snippet": "public Paint getItemPaint(){\n  return this.itemPaint;\n}",
    "begin_line": 360,
    "end_line": 362,
    "comment": "/** \n * Returns the item paint.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setItemPaint#369",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setItemPaint(java.awt.Paint)",
    "snippet": "public void setItemPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.itemPaint\u003dpaint;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 369,
    "end_line": 375,
    "comment": "/** \n * Sets the item paint.\n * @param paint  the paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getItemLabelPadding#382",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getItemLabelPadding()",
    "snippet": "public RectangleInsets getItemLabelPadding(){\n  return this.itemLabelPadding;\n}",
    "begin_line": 382,
    "end_line": 384,
    "comment": "/** \n * Returns the padding used for the items labels.\n * @return The padding (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setItemLabelPadding#391",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setItemLabelPadding(org.jfree.chart.util.RectangleInsets)",
    "snippet": "public void setItemLabelPadding(RectangleInsets padding){\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027padding\u0027 argument.\");\n  }\n  this.itemLabelPadding\u003dpadding;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 391,
    "end_line": 397,
    "comment": "/** \n * Sets the padding used for the item labels in the legend.\n * @param padding  the padding (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.fetchLegendItems#402",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.fetchLegendItems()",
    "snippet": "protected void fetchLegendItems(){\n  this.items.clear();\n  RectangleEdge p\u003dgetPosition();\n  if (RectangleEdge.isTopOrBottom(p)) {\n    this.items.setArrangement(this.hLayout);\n  }\n else {\n    this.items.setArrangement(this.vLayout);\n  }\n  for (int s\u003d0; s \u003c this.sources.length; s++) {\n    LegendItemCollection legendItems\u003dthis.sources[s].getLegendItems();\n    if (legendItems !\u003d null) {\n      for (int i\u003d0; i \u003c legendItems.getItemCount(); i++) {\n        LegendItem item\u003dlegendItems.get(i);\n        Block block\u003dcreateLegendItemBlock(item);\n        this.items.add(block);\n      }\n    }\n  }\n}",
    "begin_line": 402,
    "end_line": 421,
    "comment": "/** \n * Fetches the latest legend items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.createLegendItemBlock#430",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.createLegendItemBlock(org.jfree.chart.LegendItem)",
    "snippet": "protected Block createLegendItemBlock(LegendItem item){\n  BlockContainer result\u003dnull;\n  LegendGraphic lg\u003dnew LegendGraphic(item.getShape(),item.getFillPaint());\n  lg.setFillPaintTransformer(item.getFillPaintTransformer());\n  lg.setShapeFilled(item.isShapeFilled());\n  lg.setLine(item.getLine());\n  lg.setLineStroke(item.getLineStroke());\n  lg.setLinePaint(item.getLinePaint());\n  lg.setLineVisible(item.isLineVisible());\n  lg.setShapeVisible(item.isShapeVisible());\n  lg.setShapeOutlineVisible(item.isShapeOutlineVisible());\n  lg.setOutlinePaint(item.getOutlinePaint());\n  lg.setOutlineStroke(item.getOutlineStroke());\n  lg.setPadding(this.legendItemGraphicPadding);\n  LegendItemBlockContainer legendItem\u003dnew LegendItemBlockContainer(new BorderArrangement(),item.getDataset(),item.getSeriesKey());\n  lg.setShapeAnchor(getLegendItemGraphicAnchor());\n  lg.setShapeLocation(getLegendItemGraphicLocation());\n  legendItem.add(lg,this.legendItemGraphicEdge);\n  Font textFont\u003ditem.getLabelFont();\n  if (textFont \u003d\u003d null) {\n    textFont\u003dthis.itemFont;\n  }\n  Paint textPaint\u003ditem.getLabelPaint();\n  if (textPaint \u003d\u003d null) {\n    textPaint\u003dthis.itemPaint;\n  }\n  LabelBlock labelBlock\u003dnew LabelBlock(item.getLabel(),textFont,textPaint);\n  labelBlock.setPadding(this.itemLabelPadding);\n  legendItem.add(labelBlock);\n  legendItem.setToolTipText(item.getToolTipText());\n  legendItem.setURLText(item.getURLText());\n  result\u003dnew BlockContainer(new CenterArrangement());\n  result.add(legendItem);\n  return result;\n}",
    "begin_line": 430,
    "end_line": 471,
    "comment": "/** \n * Creates a legend item block.\n * @param item  the legend item.\n * @return The block.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getItemContainer#478",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getItemContainer()",
    "snippet": "public BlockContainer getItemContainer(){\n  return this.items;\n}",
    "begin_line": 478,
    "end_line": 480,
    "comment": "/** \n * Returns the container that holds the legend items.\n * @return The container for the legend items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.arrange#491",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){\n  Size2D result\u003dnew Size2D();\n  fetchLegendItems();\n  if (this.items.isEmpty()) {\n    return result;\n  }\n  BlockContainer container\u003dthis.wrapper;\n  if (container \u003d\u003d null) {\n    container\u003dthis.items;\n  }\n  RectangleConstraint c\u003dtoContentConstraint(constraint);\n  Size2D size\u003dcontainer.arrange(g2,c);\n  result.height\u003dcalculateTotalHeight(size.height);\n  result.width\u003dcalculateTotalWidth(size.width);\n  return result;\n}",
    "begin_line": 491,
    "end_line": 506,
    "comment": "/** \n * Arranges the contents of the block, within the given constraints, and returns the block size.\n * @param g2  the graphics device.\n * @param constraint  the constraint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The block size (in Java2D units, never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.draw#515",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  draw(g2,area,null);\n}",
    "begin_line": 515,
    "end_line": 517,
    "comment": "/** \n * Draws the title on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device.\n * @param area  the available area for the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.draw#529",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
    "snippet": "public Object draw(Graphics2D g2,Rectangle2D area,Object params){\n  Rectangle2D target\u003d(Rectangle2D)area.clone();\n  Rectangle2D hotspot\u003d(Rectangle2D)area.clone();\n  StandardEntityCollection sec\u003dnull;\n  if (params instanceof EntityBlockParams \u0026\u0026 ((EntityBlockParams)params).getGenerateEntities()) {\n    sec\u003dnew StandardEntityCollection();\n    sec.add(new TitleEntity(hotspot,this));\n  }\n  target\u003dtrimMargin(target);\n  if (this.backgroundPaint !\u003d null) {\n    g2.setPaint(this.backgroundPaint);\n    g2.fill(target);\n  }\n  BlockFrame border\u003dgetFrame();\n  border.draw(g2,target);\n  border.getInsets().trim(target);\n  BlockContainer container\u003dthis.wrapper;\n  if (container \u003d\u003d null) {\n    container\u003dthis.items;\n  }\n  target\u003dtrimPadding(target);\n  Object val\u003dcontainer.draw(g2,target,params);\n  if (val instanceof BlockResult) {\n    EntityCollection ec\u003d((BlockResult)val).getEntityCollection();\n    if (ec !\u003d null \u0026\u0026 sec !\u003d null) {\n      sec.addAll(ec);\n      ((BlockResult)val).setEntityCollection(sec);\n    }\n  }\n  return val;\n}",
    "begin_line": 529,
    "end_line": 560,
    "comment": "/** \n * Draws the block within the specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n * @param params  ignored (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return An {@link org.jfree.chart.block.EntityBlockResult} or\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.getWrapper#569",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.getWrapper()",
    "snippet": "public BlockContainer getWrapper(){\n  return this.wrapper;\n}",
    "begin_line": 569,
    "end_line": 571,
    "comment": "/** \n * Returns the wrapper container, if any.\n * @return The wrapper container (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.setWrapper#578",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.setWrapper(org.jfree.chart.block.BlockContainer)",
    "snippet": "public void setWrapper(BlockContainer wrapper){\n  this.wrapper\u003dwrapper;\n}",
    "begin_line": 578,
    "end_line": 580,
    "comment": "/** \n * Sets the wrapper container for the legend.\n * @param wrapper  the wrapper container.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.equals#589",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof LegendTitle)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  LegendTitle that\u003d(LegendTitle)obj;\n  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {\n    return false;\n  }\n  if (this.legendItemGraphicEdge !\u003d that.legendItemGraphicEdge) {\n    return false;\n  }\n  if (this.legendItemGraphicAnchor !\u003d that.legendItemGraphicAnchor) {\n    return false;\n  }\n  if (this.legendItemGraphicLocation !\u003d that.legendItemGraphicLocation) {\n    return false;\n  }\n  if (!this.itemFont.equals(that.itemFont)) {\n    return false;\n  }\n  if (!this.itemPaint.equals(that.itemPaint)) {\n    return false;\n  }\n  if (!this.hLayout.equals(that.hLayout)) {\n    return false;\n  }\n  if (!this.vLayout.equals(that.vLayout)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 589,
    "end_line": 625,
    "comment": "/** \n * Tests this title for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.writeObject#634",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.backgroundPaint,stream);\n  SerialUtilities.writePaint(this.itemPaint,stream);\n}",
    "begin_line": 634,
    "end_line": 638,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "LegendTitle.readObject#648",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/LegendTitle.java",
    "class_name": "org.jfree.chart.title.LegendTitle",
    "signature": "org.jfree.chart.title.LegendTitle.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.backgroundPaint\u003dSerialUtilities.readPaint(stream);\n  this.itemPaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 648,
    "end_line": 653,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.TextTitle#179",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.TextTitle()",
    "snippet": "public TextTitle(){\n  this(\"\");\n}",
    "begin_line": 179,
    "end_line": 181,
    "comment": "/** \n * Creates a new title, using default attributes where necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.TextTitle#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String)",
    "snippet": "public TextTitle(String text){\n  this(text,TextTitle.DEFAULT_FONT,TextTitle.DEFAULT_TEXT_PAINT,Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);\n}",
    "begin_line": 188,
    "end_line": 192,
    "comment": "/** \n * Creates a new title, using default attributes where necessary.\n * @param text  the title text (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.TextTitle#200",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font)",
    "snippet": "public TextTitle(String text,Font font){\n  this(text,font,TextTitle.DEFAULT_TEXT_PAINT,Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);\n}",
    "begin_line": 200,
    "end_line": 204,
    "comment": "/** \n * Creates a new title, using default attributes where necessary.\n * @param text  the title text (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param font  the title font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.TextTitle#219",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
    "snippet": "public TextTitle(String text,Font font,Paint paint,RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment,RectangleInsets padding){\n  super(position,horizontalAlignment,verticalAlignment,padding);\n  if (text \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027text\u0027 argument.\");\n  }\n  if (font \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027font\u0027 argument.\");\n  }\n  if (paint \u003d\u003d null) {\n    throw new NullPointerException(\"Null \u0027paint\u0027 argument.\");\n  }\n  this.text\u003dtext;\n  this.font\u003dfont;\n  this.paint\u003dpaint;\n  this.textAlignment\u003dhorizontalAlignment;\n  this.backgroundPaint\u003dnull;\n  this.content\u003dnull;\n  this.toolTipText\u003dnull;\n  this.urlText\u003dnull;\n}",
    "begin_line": 219,
    "end_line": 248,
    "comment": "/** \n * Creates a new title.\n * @param text  the text for the title (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param font  the title font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the title paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param position  the title position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontalAlignment  the horizontal alignment (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param verticalAlignment  the vertical alignment (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param padding  the space to leave around the outside of the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getText#257",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getText()",
    "snippet": "public String getText(){\n  return this.text;\n}",
    "begin_line": 257,
    "end_line": 259,
    "comment": "/** \n * Returns the title text.\n * @return The text (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setText(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setText#267",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setText(java.lang.String)",
    "snippet": "public void setText(String text){\n  if (text \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027text\u0027 argument.\");\n  }\n  if (!this.text.equals(text)) {\n    this.text\u003dtext;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 267,
    "end_line": 275,
    "comment": "/** \n * Sets the title to the specified text and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param text  the text (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getTextAlignment#285",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getTextAlignment()",
    "snippet": "public HorizontalAlignment getTextAlignment(){\n  return this.textAlignment;\n}",
    "begin_line": 285,
    "end_line": 287,
    "comment": "/** \n * Returns the text alignment.  This controls how the text is aligned within the title\u0027s bounds, whereas the title\u0027s horizontal alignment controls how the title\u0027s bounding rectangle is aligned within the drawing space.\n * @return The text alignment.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setTextAlignment#295",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setTextAlignment(org.jfree.chart.util.HorizontalAlignment)",
    "snippet": "public void setTextAlignment(HorizontalAlignment alignment){\n  if (alignment \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027alignment\u0027 argument.\");\n  }\n  this.textAlignment\u003dalignment;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 295,
    "end_line": 301,
    "comment": "/** \n * Sets the text alignment and sends a  {@link TitleChangeEvent} toall registered listeners.\n * @param alignment  the alignment (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getFont#310",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getFont()",
    "snippet": "public Font getFont(){\n  return this.font;\n}",
    "begin_line": 310,
    "end_line": 312,
    "comment": "/** \n * Returns the font used to display the title string.\n * @return The font (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setFont(Font)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setFont#322",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setFont(java.awt.Font)",
    "snippet": "public void setFont(Font font){\n  if (font \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027font\u0027 argument.\");\n  }\n  if (!this.font.equals(font)) {\n    this.font\u003dfont;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 322,
    "end_line": 330,
    "comment": "/** \n * Sets the font used to display the title string.  Registered listeners are notified that the title has been modified.\n * @param font  the new font (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getFont()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getPaint#339",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getPaint()",
    "snippet": "public Paint getPaint(){\n  return this.paint;\n}",
    "begin_line": 339,
    "end_line": 341,
    "comment": "/** \n * Returns the paint used to display the title string.\n * @return The paint (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setPaint(Paint)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setPaint#351",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setPaint(java.awt.Paint)",
    "snippet": "public void setPaint(Paint paint){\n  if (paint \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027paint\u0027 argument.\");\n  }\n  if (!this.paint.equals(paint)) {\n    this.paint\u003dpaint;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 351,
    "end_line": 359,
    "comment": "/** \n * Sets the paint used to display the title string.  Registered listeners are notified that the title has been modified.\n * @param paint  the new paint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getPaint()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getBackgroundPaint#366",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getBackgroundPaint()",
    "snippet": "public Paint getBackgroundPaint(){\n  return this.backgroundPaint;\n}",
    "begin_line": 366,
    "end_line": 368,
    "comment": "/** \n * Returns the background paint.\n * @return The paint (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setBackgroundPaint#377",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setBackgroundPaint(java.awt.Paint)",
    "snippet": "public void setBackgroundPaint(Paint paint){\n  this.backgroundPaint\u003dpaint;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 377,
    "end_line": 380,
    "comment": "/** \n * Sets the background paint and sends a  {@link TitleChangeEvent} to allregistered listeners.  If you set this attribute to \u003ccode\u003enull\u003c/code\u003e, no background is painted (which makes the title background transparent).\n * @param paint  the background paint (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getToolTipText#387",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getToolTipText()",
    "snippet": "public String getToolTipText(){\n  return this.toolTipText;\n}",
    "begin_line": 387,
    "end_line": 389,
    "comment": "/** \n * Returns the tool tip text.\n * @return The tool tip text (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setToolTipText#397",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setToolTipText(java.lang.String)",
    "snippet": "public void setToolTipText(String text){\n  this.toolTipText\u003dtext;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 397,
    "end_line": 400,
    "comment": "/** \n * Sets the tool tip text to the specified text and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param text  the text (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getURLText#407",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getURLText()",
    "snippet": "public String getURLText(){\n  return this.urlText;\n}",
    "begin_line": 407,
    "end_line": 409,
    "comment": "/** \n * Returns the URL text.\n * @return The URL text (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setURLText#417",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setURLText(java.lang.String)",
    "snippet": "public void setURLText(String text){\n  this.urlText\u003dtext;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 417,
    "end_line": 420,
    "comment": "/** \n * Sets the URL text to the specified text and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param text  the text (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getExpandToFitSpace#428",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getExpandToFitSpace()",
    "snippet": "public boolean getExpandToFitSpace(){\n  return this.expandToFitSpace;\n}",
    "begin_line": 428,
    "end_line": 430,
    "comment": "/** \n * Returns the flag that controls whether or not the title expands to fit the available space.\n * @return The flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setExpandToFitSpace#439",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setExpandToFitSpace(boolean)",
    "snippet": "public void setExpandToFitSpace(boolean expand){\n  this.expandToFitSpace\u003dexpand;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 439,
    "end_line": 442,
    "comment": "/** \n * Sets the flag that controls whether the title expands to fit the available space, and sends a  {@link TitleChangeEvent} to all registeredlisteners.\n * @param expand  the flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.getMaximumLinesToDisplay#453",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.getMaximumLinesToDisplay()",
    "snippet": "public int getMaximumLinesToDisplay(){\n  return this.maximumLinesToDisplay;\n}",
    "begin_line": 453,
    "end_line": 455,
    "comment": "/** \n * Returns the maximum number of lines to display.\n * @return The maximum.\n * @since 1.0.10\n * @see #setMaximumLinesToDisplay(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.setMaximumLinesToDisplay#467",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.setMaximumLinesToDisplay(int)",
    "snippet": "public void setMaximumLinesToDisplay(int max){\n  this.maximumLinesToDisplay\u003dmax;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 467,
    "end_line": 470,
    "comment": "/** \n * Sets the maximum number of lines to display and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param max  the maximum.\n * @since 1.0.10.\n * @see #getMaximumLinesToDisplay()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.arrange#481",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
    "snippet": "public Size2D arrange(Graphics2D g2,RectangleConstraint constraint){\n  RectangleConstraint cc\u003dtoContentConstraint(constraint);\n  LengthConstraintType w\u003dcc.getWidthConstraintType();\n  LengthConstraintType h\u003dcc.getHeightConstraintType();\n  Size2D contentSize\u003dnull;\n  if (w \u003d\u003d LengthConstraintType.NONE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      contentSize\u003darrangeNN(g2);\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      throw new RuntimeException(\"Not yet implemented.\");\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      throw new RuntimeException(\"Not yet implemented.\");\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.RANGE) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      contentSize\u003darrangeRN(g2,cc.getWidthRange());\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      contentSize\u003darrangeRR(g2,cc.getWidthRange(),cc.getHeightRange());\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      throw new RuntimeException(\"Not yet implemented.\");\n    }\n  }\n else   if (w \u003d\u003d LengthConstraintType.FIXED) {\n    if (h \u003d\u003d LengthConstraintType.NONE) {\n      contentSize\u003darrangeFN(g2,cc.getWidth());\n    }\n else     if (h \u003d\u003d LengthConstraintType.RANGE) {\n      throw new RuntimeException(\"Not yet implemented.\");\n    }\n else     if (h \u003d\u003d LengthConstraintType.FIXED) {\n      throw new RuntimeException(\"Not yet implemented.\");\n    }\n  }\n  return new Size2D(calculateTotalWidth(contentSize.getWidth()),calculateTotalHeight(contentSize.getHeight()));\n}",
    "begin_line": 481,
    "end_line": 522,
    "comment": "/** \n * Arranges the contents of the block, within the given constraints, and returns the block size.\n * @param g2  the graphics device.\n * @param constraint  the constraint (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The block size (in Java2D units, never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.arrangeNN#536",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.arrangeNN(java.awt.Graphics2D)",
    "snippet": "protected Size2D arrangeNN(Graphics2D g2){\n  Range max\u003dnew Range(0.0,Float.MAX_VALUE);\n  return arrangeRR(g2,max,max);\n}",
    "begin_line": 536,
    "end_line": 539,
    "comment": "/** \n * Arranges the content for this title assuming no bounds on the width or the height, and returns the required size.  This will reflect the fact that a text title positioned on the left or right of a chart will be rotated by 90 degrees.\n * @param g2  the graphics target.\n * @return The content size.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.arrangeFN#554",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.arrangeFN(java.awt.Graphics2D, double)",
    "snippet": "protected Size2D arrangeFN(Graphics2D g2,double w){\n  RectangleEdge position\u003dgetPosition();\n  if (position \u003d\u003d RectangleEdge.TOP || position \u003d\u003d RectangleEdge.BOTTOM) {\n    float maxWidth\u003d(float)w;\n    g2.setFont(this.font);\n    this.content\u003dTextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));\n    this.content.setLineAlignment(this.textAlignment);\n    Size2D contentSize\u003dthis.content.calculateDimensions(g2);\n    if (this.expandToFitSpace) {\n      return new Size2D(maxWidth,contentSize.getHeight());\n    }\n else {\n      return contentSize;\n    }\n  }\n else   if (position \u003d\u003d RectangleEdge.LEFT || position \u003d\u003d RectangleEdge.RIGHT) {\n    float maxWidth\u003dFloat.MAX_VALUE;\n    g2.setFont(this.font);\n    this.content\u003dTextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));\n    this.content.setLineAlignment(this.textAlignment);\n    Size2D contentSize\u003dthis.content.calculateDimensions(g2);\n    if (this.expandToFitSpace) {\n      return new Size2D(contentSize.getHeight(),maxWidth);\n    }\n else {\n      return new Size2D(contentSize.height,contentSize.width);\n    }\n  }\n else {\n    throw new RuntimeException(\"Unrecognised exception.\");\n  }\n}",
    "begin_line": 554,
    "end_line": 592,
    "comment": "/** \n * Arranges the content for this title assuming a fixed width and no bounds on the height, and returns the required size.  This will reflect the fact that a text title positioned on the left or right of a chart will be rotated by 90 degrees.\n * @param g2  the graphics target.\n * @param w  the width.\n * @return The content size.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.arrangeRN#607",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.arrangeRN(java.awt.Graphics2D, org.jfree.data.Range)",
    "snippet": "protected Size2D arrangeRN(Graphics2D g2,Range widthRange){\n  Size2D s\u003darrangeNN(g2);\n  if (widthRange.contains(s.getWidth())) {\n    return s;\n  }\n  double ww\u003dwidthRange.constrain(s.getWidth());\n  return arrangeFN(g2,ww);\n}",
    "begin_line": 607,
    "end_line": 614,
    "comment": "/** \n * Arranges the content for this title assuming a range constraint for the width and no bounds on the height, and returns the required size.  This will reflect the fact that a text title positioned on the left or right of a chart will be rotated by 90 degrees.\n * @param g2  the graphics target.\n * @param widthRange  the range for the width.\n * @return The content size.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.arrangeRR#627",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range)",
    "snippet": "protected Size2D arrangeRR(Graphics2D g2,Range widthRange,Range heightRange){\n  RectangleEdge position\u003dgetPosition();\n  if (position \u003d\u003d RectangleEdge.TOP || position \u003d\u003d RectangleEdge.BOTTOM) {\n    float maxWidth\u003d(float)widthRange.getUpperBound();\n    g2.setFont(this.font);\n    this.content\u003dTextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));\n    this.content.setLineAlignment(this.textAlignment);\n    Size2D contentSize\u003dthis.content.calculateDimensions(g2);\n    if (this.expandToFitSpace) {\n      return new Size2D(maxWidth,contentSize.getHeight());\n    }\n else {\n      return contentSize;\n    }\n  }\n else   if (position \u003d\u003d RectangleEdge.LEFT || position \u003d\u003d RectangleEdge.RIGHT) {\n    float maxWidth\u003d(float)heightRange.getUpperBound();\n    g2.setFont(this.font);\n    this.content\u003dTextUtilities.createTextBlock(this.text,this.font,this.paint,maxWidth,this.maximumLinesToDisplay,new G2TextMeasurer(g2));\n    this.content.setLineAlignment(this.textAlignment);\n    Size2D contentSize\u003dthis.content.calculateDimensions(g2);\n    if (this.expandToFitSpace) {\n      return new Size2D(contentSize.getHeight(),maxWidth);\n    }\n else {\n      return new Size2D(contentSize.height,contentSize.width);\n    }\n  }\n else {\n    throw new RuntimeException(\"Unrecognised exception.\");\n  }\n}",
    "begin_line": 627,
    "end_line": 666,
    "comment": "/** \n * Returns the content size for the title.  This will reflect the fact that a text title positioned on the left or right of a chart will be rotated 90 degrees.\n * @param g2  the graphics device.\n * @param widthRange  the width range.\n * @param heightRange  the height range.\n * @return The content size.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.draw#675",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public void draw(Graphics2D g2,Rectangle2D area){\n  draw(g2,area,null);\n}",
    "begin_line": 675,
    "end_line": 677,
    "comment": "/** \n * Draws the title on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device.\n * @param area  the area allocated for the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.draw#691",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
    "snippet": "public Object draw(Graphics2D g2,Rectangle2D area,Object params){\n  if (this.content \u003d\u003d null) {\n    return null;\n  }\n  area\u003dtrimMargin(area);\n  drawBorder(g2,area);\n  if (this.text.equals(\"\")) {\n    return null;\n  }\n  ChartEntity entity\u003dnull;\n  if (params instanceof EntityBlockParams) {\n    EntityBlockParams p\u003d(EntityBlockParams)params;\n    if (p.getGenerateEntities()) {\n      entity\u003dnew TitleEntity(area,this,this.toolTipText,this.urlText);\n    }\n  }\n  area\u003dtrimBorder(area);\n  if (this.backgroundPaint !\u003d null) {\n    g2.setPaint(this.backgroundPaint);\n    g2.fill(area);\n  }\n  area\u003dtrimPadding(area);\n  RectangleEdge position\u003dgetPosition();\n  if (position \u003d\u003d RectangleEdge.TOP || position \u003d\u003d RectangleEdge.BOTTOM) {\n    drawHorizontal(g2,area);\n  }\n else   if (position \u003d\u003d RectangleEdge.LEFT || position \u003d\u003d RectangleEdge.RIGHT) {\n    drawVertical(g2,area);\n  }\n  BlockResult result\u003dnew BlockResult();\n  if (entity !\u003d null) {\n    StandardEntityCollection sec\u003dnew StandardEntityCollection();\n    sec.add(entity);\n    result.setEntityCollection(sec);\n  }\n  return result;\n}",
    "begin_line": 691,
    "end_line": 729,
    "comment": "/** \n * Draws the block within the specified area.\n * @param g2  the graphics device.\n * @param area  the area.\n * @param params  if this is an instance of {@link EntityBlockParams} itis used to determine whether or not an {@link EntityCollection} is returned by this method.\n * @return An {@link EntityCollection} containing a chart entity for thetitle, or \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.drawHorizontal#739",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.drawHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawHorizontal(Graphics2D g2,Rectangle2D area){\n  Rectangle2D titleArea\u003d(Rectangle2D)area.clone();\n  g2.setFont(this.font);\n  g2.setPaint(this.paint);\n  TextBlockAnchor anchor\u003dnull;\n  float x\u003d0.0f;\n  HorizontalAlignment horizontalAlignment\u003dgetHorizontalAlignment();\n  if (horizontalAlignment \u003d\u003d HorizontalAlignment.LEFT) {\n    x\u003d(float)titleArea.getX();\n    anchor\u003dTextBlockAnchor.TOP_LEFT;\n  }\n else   if (horizontalAlignment \u003d\u003d HorizontalAlignment.RIGHT) {\n    x\u003d(float)titleArea.getMaxX();\n    anchor\u003dTextBlockAnchor.TOP_RIGHT;\n  }\n else   if (horizontalAlignment \u003d\u003d HorizontalAlignment.CENTER) {\n    x\u003d(float)titleArea.getCenterX();\n    anchor\u003dTextBlockAnchor.TOP_CENTER;\n  }\n  float y\u003d0.0f;\n  RectangleEdge position\u003dgetPosition();\n  if (position \u003d\u003d RectangleEdge.TOP) {\n    y\u003d(float)titleArea.getY();\n  }\n else   if (position \u003d\u003d RectangleEdge.BOTTOM) {\n    y\u003d(float)titleArea.getMaxY();\n    if (horizontalAlignment \u003d\u003d HorizontalAlignment.LEFT) {\n      anchor\u003dTextBlockAnchor.BOTTOM_LEFT;\n    }\n else     if (horizontalAlignment \u003d\u003d HorizontalAlignment.CENTER) {\n      anchor\u003dTextBlockAnchor.BOTTOM_CENTER;\n    }\n else     if (horizontalAlignment \u003d\u003d HorizontalAlignment.RIGHT) {\n      anchor\u003dTextBlockAnchor.BOTTOM_RIGHT;\n    }\n  }\n  this.content.draw(g2,x,y,anchor);\n}",
    "begin_line": 739,
    "end_line": 776,
    "comment": "/** \n * Draws a the title horizontally within the specified area.  This method will be called from the  {@link #draw(Graphics2D,Rectangle2D) draw}method.\n * @param g2  the graphics device.\n * @param area  the area for the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.drawVertical#786",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.drawVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "protected void drawVertical(Graphics2D g2,Rectangle2D area){\n  Rectangle2D titleArea\u003d(Rectangle2D)area.clone();\n  g2.setFont(this.font);\n  g2.setPaint(this.paint);\n  TextBlockAnchor anchor\u003dnull;\n  float y\u003d0.0f;\n  VerticalAlignment verticalAlignment\u003dgetVerticalAlignment();\n  if (verticalAlignment \u003d\u003d VerticalAlignment.TOP) {\n    y\u003d(float)titleArea.getY();\n    anchor\u003dTextBlockAnchor.TOP_RIGHT;\n  }\n else   if (verticalAlignment \u003d\u003d VerticalAlignment.BOTTOM) {\n    y\u003d(float)titleArea.getMaxY();\n    anchor\u003dTextBlockAnchor.TOP_LEFT;\n  }\n else   if (verticalAlignment \u003d\u003d VerticalAlignment.CENTER) {\n    y\u003d(float)titleArea.getCenterY();\n    anchor\u003dTextBlockAnchor.TOP_CENTER;\n  }\n  float x\u003d0.0f;\n  RectangleEdge position\u003dgetPosition();\n  if (position \u003d\u003d RectangleEdge.LEFT) {\n    x\u003d(float)titleArea.getX();\n  }\n else   if (position \u003d\u003d RectangleEdge.RIGHT) {\n    x\u003d(float)titleArea.getMaxX();\n    if (verticalAlignment \u003d\u003d VerticalAlignment.TOP) {\n      anchor\u003dTextBlockAnchor.BOTTOM_RIGHT;\n    }\n else     if (verticalAlignment \u003d\u003d VerticalAlignment.CENTER) {\n      anchor\u003dTextBlockAnchor.BOTTOM_CENTER;\n    }\n else     if (verticalAlignment \u003d\u003d VerticalAlignment.BOTTOM) {\n      anchor\u003dTextBlockAnchor.BOTTOM_LEFT;\n    }\n  }\n  this.content.draw(g2,x,y,anchor,x,y,-Math.PI / 2.0);\n}",
    "begin_line": 786,
    "end_line": 823,
    "comment": "/** \n * Draws a the title vertically within the specified area.  This method will be called from the  {@link #draw(Graphics2D,Rectangle2D) draw}method.\n * @param g2  the graphics device.\n * @param area  the area for the title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.equals#832",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof TextTitle)) {\n    return false;\n  }\n  TextTitle that\u003d(TextTitle)obj;\n  if (!ObjectUtilities.equal(this.text,that.text)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.font,that.font)) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.paint,that.paint)) {\n    return false;\n  }\n  if (this.textAlignment !\u003d that.textAlignment) {\n    return false;\n  }\n  if (!PaintUtilities.equal(this.backgroundPaint,that.backgroundPaint)) {\n    return false;\n  }\n  if (this.maximumLinesToDisplay !\u003d that.maximumLinesToDisplay) {\n    return false;\n  }\n  if (this.expandToFitSpace !\u003d that.expandToFitSpace) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.toolTipText,that.toolTipText)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.urlText,that.urlText)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 832,
    "end_line": 868,
    "comment": "/** \n * Tests this title for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.hashCode#875",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003dsuper.hashCode();\n  result\u003d29 * result + (this.text !\u003d null ? this.text.hashCode() : 0);\n  result\u003d29 * result + (this.font !\u003d null ? this.font.hashCode() : 0);\n  result\u003d29 * result + (this.paint !\u003d null ? this.paint.hashCode() : 0);\n  result\u003d29 * result + (this.backgroundPaint !\u003d null ? this.backgroundPaint.hashCode() : 0);\n  return result;\n}",
    "begin_line": 875,
    "end_line": 883,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.clone#892",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 892,
    "end_line": 894,
    "comment": "/** \n * Returns a clone of this object.\n * @return A clone.\n * @throws CloneNotSupportedException never.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.writeObject#903",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  SerialUtilities.writePaint(this.paint,stream);\n  SerialUtilities.writePaint(this.backgroundPaint,stream);\n}",
    "begin_line": 903,
    "end_line": 907,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TextTitle.readObject#917",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/TextTitle.java",
    "class_name": "org.jfree.chart.title.TextTitle",
    "signature": "org.jfree.chart.title.TextTitle.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.paint\u003dSerialUtilities.readPaint(stream);\n  this.backgroundPaint\u003dSerialUtilities.readPaint(stream);\n}",
    "begin_line": 917,
    "end_line": 922,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.Title#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.Title()",
    "snippet": "protected Title(){\n  this(Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);\n}",
    "begin_line": 138,
    "end_line": 142,
    "comment": "/** \n * Creates a new title, using default attributes where necessary.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.Title#154",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment)",
    "snippet": "protected Title(RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment){\n  this(position,horizontalAlignment,verticalAlignment,Title.DEFAULT_PADDING);\n}",
    "begin_line": 154,
    "end_line": 161,
    "comment": "/** \n * Creates a new title, using default attributes where necessary.\n * @param position  the position of the title (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param horizontalAlignment  the horizontal alignment of the title(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param verticalAlignment  the vertical alignment of the title(\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.Title#177",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
    "snippet": "protected Title(RectangleEdge position,HorizontalAlignment horizontalAlignment,VerticalAlignment verticalAlignment,RectangleInsets padding){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  if (horizontalAlignment \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027horizontalAlignment\u0027 argument.\");\n  }\n  if (verticalAlignment \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027verticalAlignment\u0027 argument.\");\n  }\n  if (padding \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027spacer\u0027 argument.\");\n  }\n  this.visible\u003dtrue;\n  this.position\u003dposition;\n  this.horizontalAlignment\u003dhorizontalAlignment;\n  this.verticalAlignment\u003dverticalAlignment;\n  setPadding(padding);\n  this.listenerList\u003dnew EventListenerList();\n  this.notify\u003dtrue;\n}",
    "begin_line": 177,
    "end_line": 207,
    "comment": "/** \n * Creates a new title.\n * @param position  the position of the title (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param horizontalAlignment  the horizontal alignment of the title (LEFT,CENTER or RIGHT, \u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param verticalAlignment  the vertical alignment of the title (TOP,MIDDLE or BOTTOM, \u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param padding  the amount of space to leave around the outside of thetitle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.isVisible#219",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.isVisible()",
    "snippet": "public boolean isVisible(){\n  return this.visible;\n}",
    "begin_line": 219,
    "end_line": 221,
    "comment": "/** \n * Returns a flag that controls whether or not the title should be drawn.  The default value is \u003ccode\u003etrue\u003c/code\u003e.\n * @return A boolean.\n * @see #setVisible(boolean)\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.setVisible#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.setVisible(boolean)",
    "snippet": "public void setVisible(boolean visible){\n  this.visible\u003dvisible;\n  notifyListeners(new TitleChangeEvent(this));\n}",
    "begin_line": 233,
    "end_line": 236,
    "comment": "/** \n * Sets a flag that controls whether or not the title should be drawn, and sends a  {@link TitleChangeEvent} to all registered listeners.\n * @param visible  the new flag value.\n * @see #isVisible()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.getPosition#243",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.getPosition()",
    "snippet": "public RectangleEdge getPosition(){\n  return this.position;\n}",
    "begin_line": 243,
    "end_line": 245,
    "comment": "/** \n * Returns the position of the title.\n * @return The title position (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.setPosition#253",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
    "snippet": "public void setPosition(RectangleEdge position){\n  if (position \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027position\u0027 argument.\");\n  }\n  if (this.position !\u003d position) {\n    this.position\u003dposition;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 253,
    "end_line": 261,
    "comment": "/** \n * Sets the position for the title and sends a  {@link TitleChangeEvent} toall registered listeners.\n * @param position  the position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.getHorizontalAlignment#268",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.getHorizontalAlignment()",
    "snippet": "public HorizontalAlignment getHorizontalAlignment(){\n  return this.horizontalAlignment;\n}",
    "begin_line": 268,
    "end_line": 270,
    "comment": "/** \n * Returns the horizontal alignment of the title.\n * @return The horizontal alignment (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.setHorizontalAlignment#279",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.setHorizontalAlignment(org.jfree.chart.util.HorizontalAlignment)",
    "snippet": "public void setHorizontalAlignment(HorizontalAlignment alignment){\n  if (alignment \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027alignment\u0027 argument.\");\n  }\n  if (this.horizontalAlignment !\u003d alignment) {\n    this.horizontalAlignment\u003dalignment;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 279,
    "end_line": 287,
    "comment": "/** \n * Sets the horizontal alignment for the title and sends a {@link TitleChangeEvent} to all registered listeners.\n * @param alignment  the horizontal alignment (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.getVerticalAlignment#294",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.getVerticalAlignment()",
    "snippet": "public VerticalAlignment getVerticalAlignment(){\n  return this.verticalAlignment;\n}",
    "begin_line": 294,
    "end_line": 296,
    "comment": "/** \n * Returns the vertical alignment of the title.\n * @return The vertical alignment (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.setVerticalAlignment#305",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.setVerticalAlignment(org.jfree.chart.util.VerticalAlignment)",
    "snippet": "public void setVerticalAlignment(VerticalAlignment alignment){\n  if (alignment \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027alignment\u0027 argument.\");\n  }\n  if (this.verticalAlignment !\u003d alignment) {\n    this.verticalAlignment\u003dalignment;\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 305,
    "end_line": 313,
    "comment": "/** \n * Sets the vertical alignment for the title, and notifies any registered listeners of the change.\n * @param alignment  the new vertical alignment (TOP, MIDDLE or BOTTOM,\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.getNotify#321",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.getNotify()",
    "snippet": "public boolean getNotify(){\n  return this.notify;\n}",
    "begin_line": 321,
    "end_line": 323,
    "comment": "/** \n * Returns the flag that indicates whether or not the notification mechanism is enabled.\n * @return The flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.setNotify#332",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.setNotify(boolean)",
    "snippet": "public void setNotify(boolean flag){\n  this.notify\u003dflag;\n  if (flag) {\n    notifyListeners(new TitleChangeEvent(this));\n  }\n}",
    "begin_line": 332,
    "end_line": 337,
    "comment": "/** \n * Sets the flag that indicates whether or not the notification mechanism is enabled.  There are certain situations (such as cloning) where you want to turn notification off temporarily.\n * @param flag  the new value of the flag.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.draw#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
    "snippet": "public abstract void draw(Graphics2D g2,Rectangle2D area);",
    "begin_line": 347,
    "end_line": 347,
    "comment": "/** \n * Draws the title on a Java 2D graphics device (such as the screen or a printer).\n * @param g2  the graphics device.\n * @param area  the area allocated for the title (subclasses should notdraw outside this area).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.clone#361",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Title duplicate\u003d(Title)super.clone();\n  duplicate.listenerList\u003dnew EventListenerList();\n  return duplicate;\n}",
    "begin_line": 361,
    "end_line": 366,
    "comment": "/** \n * Returns a clone of the title. \u003cP\u003e One situation when this is useful is when editing the title properties - you can edit a clone, and then it is easier to cancel the changes if necessary.\n * @return A clone of the title.\n * @throws CloneNotSupportedException not thrown by this class, but it maybe thrown by subclasses.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.addChangeListener#373",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
    "snippet": "public void addChangeListener(TitleChangeListener listener){\n  this.listenerList.add(TitleChangeListener.class,listener);\n}",
    "begin_line": 373,
    "end_line": 375,
    "comment": "/** \n * Registers an object for notification of changes to the title.\n * @param listener  the object that is being registered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.removeChangeListener#382",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.removeChangeListener(org.jfree.chart.event.TitleChangeListener)",
    "snippet": "public void removeChangeListener(TitleChangeListener listener){\n  this.listenerList.remove(TitleChangeListener.class,listener);\n}",
    "begin_line": 382,
    "end_line": 384,
    "comment": "/** \n * Unregisters an object for notification of changes to the chart title.\n * @param listener  the object that is being unregistered.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.notifyListeners#393",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
    "snippet": "protected void notifyListeners(TitleChangeEvent event){\n  if (this.notify) {\n    Object[] listeners\u003dthis.listenerList.getListenerList();\n    for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n      if (listeners[i] \u003d\u003d TitleChangeListener.class) {\n        ((TitleChangeListener)listeners[i + 1]).titleChanged(event);\n      }\n    }\n  }\n}",
    "begin_line": 393,
    "end_line": 403,
    "comment": "/** \n * Notifies all registered listeners that the chart title has changed in some way.\n * @param event  an object that contains information about the change tothe title.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.equals#412",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Title)) {\n    return false;\n  }\n  Title that\u003d(Title)obj;\n  if (this.visible !\u003d that.visible) {\n    return false;\n  }\n  if (this.position !\u003d that.position) {\n    return false;\n  }\n  if (this.horizontalAlignment !\u003d that.horizontalAlignment) {\n    return false;\n  }\n  if (this.verticalAlignment !\u003d that.verticalAlignment) {\n    return false;\n  }\n  if (this.notify !\u003d that.notify) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 412,
    "end_line": 436,
    "comment": "/** \n * Tests an object for equality with this title.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.hashCode#443",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d193;\n  result\u003d37 * result + ObjectUtilities.hashCode(this.position);\n  result\u003d37 * result + ObjectUtilities.hashCode(this.horizontalAlignment);\n  result\u003d37 * result + ObjectUtilities.hashCode(this.verticalAlignment);\n  return result;\n}",
    "begin_line": 443,
    "end_line": 450,
    "comment": "/** \n * Returns a hashcode for the title.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.writeObject#459",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n}",
    "begin_line": 459,
    "end_line": 461,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Title.readObject#471",
    "is_bug": true,
    "src_path": "org/jfree/chart/title/Title.java",
    "class_name": "org.jfree.chart.title.Title",
    "signature": "org.jfree.chart.title.Title.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 471,
    "end_line": 475,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.OptionalLibraryHolder#67",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.OptionalLibraryHolder(java.lang.String)",
    "snippet": "public OptionalLibraryHolder(String libraryClass){\n  if (libraryClass \u003d\u003d null) {\n    throw new NullPointerException(\"LibraryClass must not be null.\");\n  }\n  this.libraryClass\u003dlibraryClass;\n}",
    "begin_line": 67,
    "end_line": 73,
    "comment": "/** \n * Creates a new instance.\n * @param libraryClass  the library class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.OptionalLibraryHolder#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.OptionalLibraryHolder(org.jfree.chart.ui.Library)",
    "snippet": "public OptionalLibraryHolder(Library library){\n  if (library \u003d\u003d null) {\n    throw new NullPointerException(\"Library must not be null.\");\n  }\n  this.library\u003dlibrary;\n  this.libraryClass\u003dlibrary.getClass().getName();\n}",
    "begin_line": 80,
    "end_line": 86,
    "comment": "/** \n * Creates a new instance.\n * @param library  the library (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.getLibraryClass#93",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.getLibraryClass()",
    "snippet": "public String getLibraryClass(){\n  return this.libraryClass;\n}",
    "begin_line": 93,
    "end_line": 95,
    "comment": "/** \n * Returns the library class.\n * @return The library class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.getLibrary#102",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.getLibrary()",
    "snippet": "public Library getLibrary(){\n  if (this.library \u003d\u003d null) {\n    this.library\u003dloadLibrary(this.libraryClass);\n  }\n  return this.library;\n}",
    "begin_line": 102,
    "end_line": 107,
    "comment": "/** \n * Returns the library.\n * @return The library.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.loadLibrary#109",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.loadLibrary(java.lang.String)",
    "snippet": "protected Library loadLibrary(String classname){\n  if (classname \u003d\u003d null) {\n    return null;\n  }\n  try {\n    Class c\u003dObjectUtilities.getClassLoader(getClass()).loadClass(classname);\n    try {\n      Method m\u003dc.getMethod(\"getInstance\",(Class[])null);\n      return (Library)m.invoke(null,(Object[])null);\n    }\n catch (    Exception e) {\n    }\n    return (Library)c.newInstance();\n  }\n catch (  Exception e) {\n    return null;\n  }\n}",
    "begin_line": 109,
    "end_line": 130,
    "comment": "",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.BasicProjectInfo#145",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
    "snippet": "public BasicProjectInfo(){\n  this.libraries\u003dnew ArrayList();\n  this.optionalLibraries\u003dnew ArrayList();\n}",
    "begin_line": 145,
    "end_line": 148,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.BasicProjectInfo#158",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public BasicProjectInfo(String name,String version,String licence,String info){\n  this();\n  setName(name);\n  setVersion(version);\n  setLicenceName(licence);\n  setInfo(info);\n}",
    "begin_line": 158,
    "end_line": 165,
    "comment": "/** \n * Creates a new library reference.\n * @param name    the name.\n * @param version the version.\n * @param licence the licence.\n * @param info    the web address or other info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.BasicProjectInfo#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public BasicProjectInfo(String name,String version,String info,String copyright,String licenceName){\n  this(name,version,licenceName,info);\n  setCopyright(copyright);\n}",
    "begin_line": 176,
    "end_line": 181,
    "comment": "/** \n * Creates a new project info instance.\n * @param name  the project name.\n * @param version  the project version.\n * @param info  the project info (web site for example).\n * @param copyright  the copyright statement.\n * @param licenceName  the license name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.getCopyright#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.getCopyright()",
    "snippet": "public String getCopyright(){\n  return this.copyright;\n}",
    "begin_line": 188,
    "end_line": 190,
    "comment": "/** \n * Returns the copyright statement.\n * @return The copyright statement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.setCopyright#197",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
    "snippet": "public void setCopyright(String copyright){\n  this.copyright\u003dcopyright;\n}",
    "begin_line": 197,
    "end_line": 199,
    "comment": "/** \n * Sets the project copyright statement.\n * @param copyright  the project copyright statement.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.setInfo#206",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
    "snippet": "public void setInfo(String info){\n  super.setInfo(info);\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Sets the project info string (for example, this could be the project URL).\n * @param info  the info string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.setLicenceName#215",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
    "snippet": "public void setLicenceName(String licence){\n  super.setLicenceName(licence);\n}",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Sets the license name.\n * @param licence  the license name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.setName#224",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
    "snippet": "public void setName(String name){\n  super.setName(name);\n}",
    "begin_line": 224,
    "end_line": 226,
    "comment": "/** \n * Sets the project name.\n * @param name  the project name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.setVersion#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
    "snippet": "public void setVersion(String version){\n  super.setVersion(version);\n}",
    "begin_line": 233,
    "end_line": 235,
    "comment": "/** \n * Sets the project version number.\n * @param version  the version number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.getLibraries#242",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.getLibraries()",
    "snippet": "public Library[] getLibraries(){\n  return (Library[])this.libraries.toArray(new Library[this.libraries.size()]);\n}",
    "begin_line": 242,
    "end_line": 245,
    "comment": "/** \n * Returns a list of libraries used by the project.\n * @return the list of libraries.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.addLibrary#252",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.addLibrary(org.jfree.chart.ui.Library)",
    "snippet": "public void addLibrary(Library library){\n  if (library \u003d\u003d null) {\n    throw new NullPointerException();\n  }\n  this.libraries.add(library);\n}",
    "begin_line": 252,
    "end_line": 257,
    "comment": "/** \n * Adds a library.\n * @param library  the library.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.getOptionalLibraries#264",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.getOptionalLibraries()",
    "snippet": "public Library[] getOptionalLibraries(){\n  ArrayList libraries\u003dnew ArrayList();\n  for (int i\u003d0; i \u003c this.optionalLibraries.size(); i++) {\n    OptionalLibraryHolder holder\u003d(OptionalLibraryHolder)this.optionalLibraries.get(i);\n    Library l\u003dholder.getLibrary();\n    if (l !\u003d null) {\n      libraries.add(l);\n    }\n  }\n  return (Library[])libraries.toArray(new Library[libraries.size()]);\n}",
    "begin_line": 264,
    "end_line": 275,
    "comment": "/** \n * Returns a list of optional libraries used by the project.\n * @return the list of libraries.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.addOptionalLibrary#282",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.addOptionalLibrary(java.lang.String)",
    "snippet": "public void addOptionalLibrary(String libraryClass){\n  if (libraryClass \u003d\u003d null) {\n    throw new NullPointerException(\"Library classname must be given.\");\n  }\n  this.optionalLibraries.add(new OptionalLibraryHolder(libraryClass));\n}",
    "begin_line": 282,
    "end_line": 288,
    "comment": "/** \n * Adds an optional library.\n * @param libraryClass  the library.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "OptionalLibraryHolder.addOptionalLibrary#298",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/BasicProjectInfo.java",
    "class_name": "org.jfree.chart.ui.BasicProjectInfo",
    "signature": "org.jfree.chart.ui.BasicProjectInfo.addOptionalLibrary(org.jfree.chart.ui.Library)",
    "snippet": "public void addOptionalLibrary(Library library){\n  if (library \u003d\u003d null) {\n    throw new NullPointerException(\"Library must be given.\");\n  }\n  this.optionalLibraries.add(new OptionalLibraryHolder(library));\n}",
    "begin_line": 298,
    "end_line": 303,
    "comment": "/** \n * Adds an optional library. These libraries will be booted, if they define a boot class. A missing class is considered non-fatal and it is assumed that the programm knows how to handle that.\n * @param library  the library.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Contributor.Contributor#63",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Contributor.java",
    "class_name": "org.jfree.chart.ui.Contributor",
    "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
    "snippet": "public Contributor(String name,String email){\n  this.name\u003dname;\n  this.email\u003demail;\n}",
    "begin_line": 63,
    "end_line": 66,
    "comment": "/** \n * Creates a new contributor.\n * @param name  the name.\n * @param email  the e-mail address.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Contributor.getName#73",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Contributor.java",
    "class_name": "org.jfree.chart.ui.Contributor",
    "signature": "org.jfree.chart.ui.Contributor.getName()",
    "snippet": "public String getName(){\n  return this.name;\n}",
    "begin_line": 73,
    "end_line": 75,
    "comment": "/** \n * Returns the contributor\u0027s name.\n * @return the contributor\u0027s name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Contributor.getEmail#82",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Contributor.java",
    "class_name": "org.jfree.chart.ui.Contributor",
    "signature": "org.jfree.chart.ui.Contributor.getEmail()",
    "snippet": "public String getEmail(){\n  return this.email;\n}",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Returns the contributor\u0027s e-mail address.\n * @return the contributor\u0027s e-mail address.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.Library#71",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.Library(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public Library(String name,String version,String licence,String info){\n  this.name\u003dname;\n  this.version\u003dversion;\n  this.licenceName\u003dlicence;\n  this.info\u003dinfo;\n}",
    "begin_line": 71,
    "end_line": 77,
    "comment": "/** \n * Creates a new library reference.\n * @param name  the name.\n * @param version  the version.\n * @param licence  the licenceName.\n * @param info  the web address or other info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.Library#82",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.Library()",
    "snippet": "protected Library(){\n}",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Creates a new library reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.getName#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.getName()",
    "snippet": "public String getName(){\n  return this.name;\n}",
    "begin_line": 91,
    "end_line": 93,
    "comment": "/** \n * Returns the library name.\n * @return the library name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.getVersion#100",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.getVersion()",
    "snippet": "public String getVersion(){\n  return this.version;\n}",
    "begin_line": 100,
    "end_line": 102,
    "comment": "/** \n * Returns the library version.\n * @return the library version.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.getLicenceName#109",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.getLicenceName()",
    "snippet": "public String getLicenceName(){\n  return this.licenceName;\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Returns the licenceName text.\n * @return the licenceName text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.getInfo#118",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.getInfo()",
    "snippet": "public String getInfo(){\n  return this.info;\n}",
    "begin_line": 118,
    "end_line": 120,
    "comment": "/** \n * Returns the project info for the library.\n * @return the project info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.setInfo#127",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
    "snippet": "protected void setInfo(String info){\n  this.info\u003dinfo;\n}",
    "begin_line": 127,
    "end_line": 129,
    "comment": "/** \n * Sets the project info.\n * @param info  the project info.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.setLicenceName#136",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
    "snippet": "protected void setLicenceName(String licenceName){\n  this.licenceName\u003dlicenceName;\n}",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Sets the licence name.\n * @param licenceName  the licence name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.setName#145",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
    "snippet": "protected void setName(String name){\n  this.name\u003dname;\n}",
    "begin_line": 145,
    "end_line": 147,
    "comment": "/** \n * Sets the project name.\n * @param name  the project name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.setVersion#154",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
    "snippet": "protected void setVersion(String version){\n  this.version\u003dversion;\n}",
    "begin_line": 154,
    "end_line": 156,
    "comment": "/** \n * Sets the version identifier.\n * @param version  the version identifier.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.equals#165",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (obj \u003d\u003d null || getClass() !\u003d obj.getClass()) {\n    return false;\n  }\n  Library library\u003d(Library)obj;\n  if (this.name !\u003d null ? !this.name.equals(library.name) : library.name !\u003d null) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 165,
    "end_line": 181,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Library.hashCode#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Library.java",
    "class_name": "org.jfree.chart.ui.Library",
    "signature": "org.jfree.chart.ui.Library.hashCode()",
    "snippet": "public int hashCode(){\n  return (this.name !\u003d null ? this.name.hashCode() : 0);\n}",
    "begin_line": 188,
    "end_line": 190,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Licences.getInstance#798",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Licences.java",
    "class_name": "org.jfree.chart.ui.Licences",
    "signature": "org.jfree.chart.ui.Licences.getInstance()",
    "snippet": "public static Licences getInstance(){\n  if (singleton \u003d\u003d null) {\n    singleton\u003dnew Licences();\n  }\n  return singleton;\n}",
    "begin_line": 798,
    "end_line": 803,
    "comment": "/** \n * Returns a reference to this class.\n * @return the instance reference.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Licences.getGPL#811",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Licences.java",
    "class_name": "org.jfree.chart.ui.Licences",
    "signature": "org.jfree.chart.ui.Licences.getGPL()",
    "snippet": "public String getGPL(){\n  return GPL;\n}",
    "begin_line": 811,
    "end_line": 813,
    "comment": "/** \n * Returns the GPL text in a non static way to prevent the compiler to copy the contents of the field.\n * @return the GPL licence text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Licences.getLGPL#821",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/Licences.java",
    "class_name": "org.jfree.chart.ui.Licences",
    "signature": "org.jfree.chart.ui.Licences.getLGPL()",
    "snippet": "public String getLGPL(){\n  return LGPL;\n}",
    "begin_line": 821,
    "end_line": 823,
    "comment": "/** \n * Returns the LGPL text in a non static way to prevent the compiler to copy the contents of the field.\n * @return the LGPL licence text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.ProjectInfo#67",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
    "snippet": "public ProjectInfo(){\n}",
    "begin_line": 67,
    "end_line": 69,
    "comment": "/** \n * Constructs an empty project info object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.ProjectInfo#82",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo(java.lang.String, java.lang.String, java.lang.String, java.awt.Image, java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public ProjectInfo(String name,String version,String info,Image logo,String copyright,String licenceName,String licenceText){\n  super(name,version,info,copyright,licenceName);\n  this.logo\u003dlogo;\n  this.licenceText\u003dlicenceText;\n}",
    "begin_line": 82,
    "end_line": 94,
    "comment": "/** \n * Constructs a project info object.\n * @param name  the name of the project.\n * @param version  the version.\n * @param info  other info (usually a URL).\n * @param logo  the project logo.\n * @param copyright  a copyright statement.\n * @param licenceName  the name of the licence that applies to the project.\n * @param licenceText  the text of the licence that applies to the project.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.getLogo#101",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.getLogo()",
    "snippet": "public Image getLogo(){\n  return this.logo;\n}",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Returns the logo.\n * @return the project logo.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.setLogo#110",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
    "snippet": "public void setLogo(final Image logo){\n  this.logo\u003dlogo;\n}",
    "begin_line": 110,
    "end_line": 112,
    "comment": "/** \n * Sets the project logo.\n * @param logo  the project logo.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.getLicenceText#119",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.getLicenceText()",
    "snippet": "public String getLicenceText(){\n  return this.licenceText;\n}",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Returns the licence text.\n * @return the licence text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.setLicenceText#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
    "snippet": "public void setLicenceText(final String licenceText){\n  this.licenceText\u003dlicenceText;\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Sets the project licence text.\n * @param licenceText  the licence text.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.getContributors#137",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.getContributors()",
    "snippet": "public List getContributors(){\n  return this.contributors;\n}",
    "begin_line": 137,
    "end_line": 139,
    "comment": "/** \n * Returns the list of contributors for the project.\n * @return the list of contributors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.setContributors#146",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
    "snippet": "public void setContributors(final List contributors){\n  this.contributors\u003dcontributors;\n}",
    "begin_line": 146,
    "end_line": 148,
    "comment": "/** \n * Sets the list of contributors.\n * @param contributors  the list of contributors.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ProjectInfo.toString#155",
    "is_bug": true,
    "src_path": "org/jfree/chart/ui/ProjectInfo.java",
    "class_name": "org.jfree.chart.ui.ProjectInfo",
    "signature": "org.jfree.chart.ui.ProjectInfo.toString()",
    "snippet": "public String toString(){\n  final StringBuffer result\u003dnew StringBuffer();\n  result.append(getName());\n  result.append(\" version \");\n  result.append(getVersion());\n  result.append(\".\\n\");\n  result.append(getCopyright());\n  result.append(\".\\n\");\n  result.append(\"\\n\");\n  result.append(\"For terms of use, see the licence below.\\n\");\n  result.append(\"\\n\");\n  result.append(\"FURTHER INFORMATION:\");\n  result.append(getInfo());\n  result.append(\"\\n\");\n  result.append(\"CONTRIBUTORS:\");\n  if (this.contributors !\u003d null) {\n    final Iterator iterator\u003dthis.contributors.iterator();\n    while (iterator.hasNext()) {\n      final Contributor contributor\u003d(Contributor)iterator.next();\n      result.append(contributor.getName());\n      result.append(\" (\");\n      result.append(contributor.getEmail());\n      result.append(\").\");\n    }\n  }\n else {\n    result.append(\"None\");\n  }\n  result.append(\"\\n\");\n  result.append(\"OTHER LIBRARIES USED BY \");\n  result.append(getName());\n  result.append(\":\");\n  final Library[] libraries\u003dgetLibraries();\n  if (libraries.length !\u003d 0) {\n    for (int i\u003d0; i \u003c libraries.length; i++) {\n      final Library lib\u003dlibraries[i];\n      result.append(lib.getName());\n      result.append(\" \");\n      result.append(lib.getVersion());\n      result.append(\" (\");\n      result.append(lib.getInfo());\n      result.append(\").\");\n    }\n  }\n else {\n    result.append(\"None\");\n  }\n  result.append(\"\\n\");\n  result.append(getName());\n  result.append(\" LICENCE TERMS:\");\n  result.append(\"\\n\");\n  result.append(getLicenceText());\n  return result.toString();\n}",
    "begin_line": 155,
    "end_line": 212,
    "comment": "/** \n * Returns a string describing the project.\n * @return a string describing the project.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYURLGenerator.StandardXYURLGenerator#88",
    "is_bug": true,
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.StandardXYURLGenerator()",
    "snippet": "public StandardXYURLGenerator(){\n  this(DEFAULT_PREFIX,DEFAULT_SERIES_PARAMETER,DEFAULT_ITEM_PARAMETER);\n}",
    "begin_line": 88,
    "end_line": 90,
    "comment": "/** \n * Creates a new default generator.  This constructor is equivalent to calling \u003ccode\u003eStandardXYURLGenerator(\"index.html\", \"series\", \"item\"); \u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYURLGenerator.StandardXYURLGenerator#99",
    "is_bug": true,
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.StandardXYURLGenerator(java.lang.String)",
    "snippet": "public StandardXYURLGenerator(String prefix){\n  this(prefix,DEFAULT_SERIES_PARAMETER,DEFAULT_ITEM_PARAMETER);\n}",
    "begin_line": 99,
    "end_line": 101,
    "comment": "/** \n * Creates a new generator with the specified prefix.  This constructor is equivalent to calling \u003ccode\u003eStandardXYURLGenerator(prefix, \"series\", \"item\");\u003c/code\u003e.\n * @param prefix  the prefix to the URL (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYURLGenerator.StandardXYURLGenerator#112",
    "is_bug": true,
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.StandardXYURLGenerator(java.lang.String, java.lang.String, java.lang.String)",
    "snippet": "public StandardXYURLGenerator(String prefix,String seriesParameterName,String itemParameterName){\n  if (prefix \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027prefix\u0027 argument.\");\n  }\n  if (seriesParameterName \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027seriesParameterName\u0027 argument.\");\n  }\n  if (itemParameterName \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027itemParameterName\u0027 argument.\");\n  }\n  this.prefix\u003dprefix;\n  this.seriesParameterName\u003dseriesParameterName;\n  this.itemParameterName\u003ditemParameterName;\n}",
    "begin_line": 112,
    "end_line": 129,
    "comment": "/** \n * Constructor that overrides all the defaults\n * @param prefix  the prefix to the URL (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param seriesParameterName  the name of the series parameter to go ineach URL (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param itemParameterName  the name of the item parameter to go in eachURL (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYURLGenerator.generateURL#140",
    "is_bug": true,
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.generateURL(org.jfree.data.xy.XYDataset, int, int)",
    "snippet": "public String generateURL(XYDataset dataset,int series,int item){\n  String url\u003dthis.prefix;\n  boolean firstParameter\u003durl.indexOf(\"?\") \u003d\u003d -1;\n  url+\u003dfirstParameter ? \"?\" : \"\u0026amp;\";\n  url+\u003dthis.seriesParameterName + \"\u003d\" + series+ \"\u0026amp;\"+ this.itemParameterName+ \"\u003d\"+ item;\n  return url;\n}",
    "begin_line": 140,
    "end_line": 148,
    "comment": "/** \n * Generates a URL for a particular item within a series.\n * @param dataset  the dataset.\n * @param series  the series number (zero-based index).\n * @param item  the item number (zero-based index).\n * @return The generated URL.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StandardXYURLGenerator.equals#157",
    "is_bug": true,
    "src_path": "org/jfree/chart/urls/StandardXYURLGenerator.java",
    "class_name": "org.jfree.chart.urls.StandardXYURLGenerator",
    "signature": "org.jfree.chart.urls.StandardXYURLGenerator.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StandardXYURLGenerator)) {\n    return false;\n  }\n  StandardXYURLGenerator that\u003d(StandardXYURLGenerator)obj;\n  if (!ObjectUtilities.equal(that.prefix,this.prefix)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(that.seriesParameterName,this.seriesParameterName)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(that.itemParameterName,this.itemParameterName)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 157,
    "end_line": 177,
    "comment": "/** \n * Tests this generator for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
    "snippet": "protected AbstractObjectList(){\n  this(DEFAULT_INITIAL_CAPACITY);\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Creates a new list with the default initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#85",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
    "snippet": "protected AbstractObjectList(int initialCapacity){\n  this(initialCapacity,initialCapacity);\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.AbstractObjectList#95",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
    "snippet": "protected AbstractObjectList(int initialCapacity,int increment){\n  this.objects\u003dnew Object[initialCapacity];\n  this.increment\u003dincrement;\n}",
    "begin_line": 95,
    "end_line": 98,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n * @param increment  the increment.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.get#108",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
    "snippet": "protected Object get(int index){\n  Object result\u003dnull;\n  if (index \u003e\u003d 0 \u0026\u0026 index \u003c this.size) {\n    result\u003dthis.objects[index];\n  }\n  return result;\n}",
    "begin_line": 108,
    "end_line": 114,
    "comment": "/** \n * Returns the object at the specified index, if there is one, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the object index.\n * @return The object or \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.set#122",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
    "snippet": "protected void set(int index,Object object){\n  if (index \u003c 0) {\n    throw new IllegalArgumentException(\"Requires index \u003e\u003d 0.\");\n  }\n  if (index \u003e\u003d this.objects.length) {\n    Object[] enlarged\u003dnew Object[index + this.increment];\n    System.arraycopy(this.objects,0,enlarged,0,this.objects.length);\n    this.objects\u003denlarged;\n  }\n  this.objects[index]\u003dobject;\n  this.size\u003dMath.max(this.size,index + 1);\n}",
    "begin_line": 122,
    "end_line": 133,
    "comment": "/** \n * Sets an object reference (overwriting any existing object).\n * @param index  the object index.\n * @param object  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.clear#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.clear()",
    "snippet": "public void clear(){\n  Arrays.fill(this.objects,null);\n  this.size\u003d0;\n}",
    "begin_line": 138,
    "end_line": 141,
    "comment": "/** \n * Clears the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.size#148",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.size()",
    "snippet": "public int size(){\n  return this.size;\n}",
    "begin_line": 148,
    "end_line": 150,
    "comment": "/** \n * Returns the size of the list.\n * @return The size of the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.indexOf#160",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
    "snippet": "protected int indexOf(Object object){\n  for (int index\u003d0; index \u003c this.size; index++) {\n    if (this.objects[index] \u003d\u003d object) {\n      return (index);\n    }\n  }\n  return -1;\n}",
    "begin_line": 160,
    "end_line": 167,
    "comment": "/** \n * Returns the index of the specified object, or -1 if the object is not in the list.\n * @param object  the object.\n * @return The index or -1.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.equals#176",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof AbstractObjectList)) {\n    return false;\n  }\n  AbstractObjectList other\u003d(AbstractObjectList)obj;\n  int listSize\u003dsize();\n  for (int i\u003d0; i \u003c listSize; i++) {\n    if (!ObjectUtilities.equal(get(i),other.get(i))) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 176,
    "end_line": 198,
    "comment": "/** \n * Tests this list for equality with another object.\n * @param obj  the object to test.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.hashCode#205",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  int size\u003dsize();\n  result\u003dHashUtilities.hashCode(result,size());\n  if (size \u003e 0) {\n    result\u003dHashUtilities.hashCode(result,this.objects[0]);\n    if (size \u003e 1) {\n      result\u003dHashUtilities.hashCode(result,this.objects[size - 1]);\n      if (size \u003e 2) {\n        result\u003dHashUtilities.hashCode(result,this.objects[size / 2]);\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 205,
    "end_line": 222,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.clone#233",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractObjectList clone\u003d(AbstractObjectList)super.clone();\n  if (this.objects !\u003d null) {\n    clone.objects\u003dnew Object[this.objects.length];\n    System.arraycopy(this.objects,0,clone.objects,0,this.objects.length);\n  }\n  return clone;\n}",
    "begin_line": 233,
    "end_line": 243,
    "comment": "/** \n * Clones the list of objects.  The objects in the list are not cloned, so this is method makes a \u0027shallow\u0027 copy of the list.\n * @return A clone.\n * @throws CloneNotSupportedException if an item in the list does notsupport cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.writeObject#252",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int count\u003dsize();\n  stream.writeInt(count);\n  for (int i\u003d0; i \u003c count; i++) {\n    final Object object\u003dget(i);\n    if (object !\u003d null \u0026\u0026 object instanceof Serializable) {\n      stream.writeInt(i);\n      stream.writeObject(object);\n    }\n else {\n      stream.writeInt(-1);\n    }\n  }\n}",
    "begin_line": 252,
    "end_line": 269,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractObjectList.readObject#279",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/AbstractObjectList.java",
    "class_name": "org.jfree.chart.util.AbstractObjectList",
    "signature": "org.jfree.chart.util.AbstractObjectList.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.objects\u003dnew Object[this.size];\n  int count\u003dstream.readInt();\n  for (int i\u003d0; i \u003c count; i++) {\n    int index\u003dstream.readInt();\n    if (index !\u003d -1) {\n      set(index,stream.readObject());\n    }\n  }\n}",
    "begin_line": 279,
    "end_line": 292,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanList.BooleanList#60",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "class_name": "org.jfree.chart.util.BooleanList",
    "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
    "snippet": "public BooleanList(){\n}",
    "begin_line": 60,
    "end_line": 61,
    "comment": "/** \n * Creates a new list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanList.getBoolean#70",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "class_name": "org.jfree.chart.util.BooleanList",
    "signature": "org.jfree.chart.util.BooleanList.getBoolean(int)",
    "snippet": "public Boolean getBoolean(int index){\n  return (Boolean)get(index);\n}",
    "begin_line": 70,
    "end_line": 72,
    "comment": "/** \n * Returns a  {@link Boolean} from the list.\n * @param index the index (zero-based).\n * @return a {@link Boolean} from the list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanList.setBoolean#81",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "class_name": "org.jfree.chart.util.BooleanList",
    "signature": "org.jfree.chart.util.BooleanList.setBoolean(int, java.lang.Boolean)",
    "snippet": "public void setBoolean(int index,Boolean b){\n  set(index,b);\n}",
    "begin_line": 81,
    "end_line": 83,
    "comment": "/** \n * Sets the value for an item in the list.  The list is expanded if necessary.\n * @param index  the index (zero-based).\n * @param b  the boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanList.equals#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "class_name": "org.jfree.chart.util.BooleanList",
    "signature": "org.jfree.chart.util.BooleanList.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj instanceof BooleanList) {\n    return super.equals(obj);\n  }\n  return false;\n}",
    "begin_line": 92,
    "end_line": 97,
    "comment": "/** \n * Tests the list for equality with another object (typically also a list).\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "BooleanList.hashCode#104",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/BooleanList.java",
    "class_name": "org.jfree.chart.util.BooleanList",
    "signature": "org.jfree.chart.util.BooleanList.hashCode()",
    "snippet": "public int hashCode(){\n  return super.hashCode();\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HorizontalAlignment.HorizontalAlignment#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
    "snippet": "private HorizontalAlignment(String name){\n  this.name\u003dname;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HorizontalAlignment.toString#85",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "signature": "org.jfree.chart.util.HorizontalAlignment.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HorizontalAlignment.equals#97",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "signature": "org.jfree.chart.util.HorizontalAlignment.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof HorizontalAlignment)) {\n    return false;\n  }\n  HorizontalAlignment that\u003d(HorizontalAlignment)obj;\n  if (!this.name.equals(that.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 97,
    "end_line": 109,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HorizontalAlignment.hashCode#116",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "signature": "org.jfree.chart.util.HorizontalAlignment.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 116,
    "end_line": 118,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "HorizontalAlignment.readResolve#127",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/HorizontalAlignment.java",
    "class_name": "org.jfree.chart.util.HorizontalAlignment",
    "signature": "org.jfree.chart.util.HorizontalAlignment.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  HorizontalAlignment result\u003dnull;\n  if (this.equals(HorizontalAlignment.LEFT)) {\n    result\u003dHorizontalAlignment.LEFT;\n  }\n else   if (this.equals(HorizontalAlignment.RIGHT)) {\n    result\u003dHorizontalAlignment.RIGHT;\n  }\n else   if (this.equals(HorizontalAlignment.CENTER)) {\n    result\u003dHorizontalAlignment.CENTER;\n  }\n  return result;\n}",
    "begin_line": 127,
    "end_line": 139,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.ObjectList#58",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
    "snippet": "public ObjectList(){\n}",
    "begin_line": 58,
    "end_line": 59,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.ObjectList#66",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.ObjectList(int)",
    "snippet": "public ObjectList(int initialCapacity){\n  super(initialCapacity);\n}",
    "begin_line": 66,
    "end_line": 68,
    "comment": "/** \n * Creates a new list.\n * @param initialCapacity  the initial capacity.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.get#84",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.get(int)",
    "snippet": "public Object get(int index){\n  return super.get(index);\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Returns the object at the specified index, if there is one, or \u003ccode\u003enull\u003c/code\u003e.\n * @param index  the object index.\n * @return The object or \u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.set#94",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
    "snippet": "public void set(int index,Object object){\n  super.set(index,object);\n}",
    "begin_line": 94,
    "end_line": 96,
    "comment": "/** \n * Sets an object reference (overwriting any existing object).\n * @param index  the object index.\n * @param object  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ObjectList.indexOf#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ObjectList.java",
    "class_name": "org.jfree.chart.util.ObjectList",
    "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
    "snippet": "public int indexOf(Object object){\n  return super.indexOf(object);\n}",
    "begin_line": 106,
    "end_line": 108,
    "comment": "/** \n * Returns the index of the specified object, or -1 if the object is not in the list.\n * @param object  the object.\n * @return The index or -1.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.PaintList#58",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.PaintList()",
    "snippet": "public PaintList(){\n  super();\n}",
    "begin_line": 58,
    "end_line": 60,
    "comment": "/** \n * Creates a new list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.getPaint#69",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.getPaint(int)",
    "snippet": "public Paint getPaint(int index){\n  return (Paint)get(index);\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Returns a  {@link Paint} object from the list.\n * @param index the index (zero-based).\n * @return The object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.setPaint#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.setPaint(int, java.awt.Paint)",
    "snippet": "public void setPaint(int index,Paint paint){\n  set(index,paint);\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Sets the  {@link Paint} for an item in the list.  The list is expandedif necessary.\n * @param index  the index (zero-based).\n * @param paint  the {@link Paint}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.equals#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (obj instanceof PaintList) {\n    PaintList that\u003d(PaintList)obj;\n    int listSize\u003dsize();\n    for (int i\u003d0; i \u003c listSize; i++) {\n      if (!PaintUtilities.equal(getPaint(i),that.getPaint(i))) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 91,
    "end_line": 108,
    "comment": "/** \n * Tests the list for equality with another object (typically also a list).\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.hashCode#115",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003d127;\n  int size\u003dsize();\n  result\u003dHashUtilities.hashCode(result,size());\n  if (size \u003e 0) {\n    result\u003dHashUtilities.hashCode(result,getPaint(0));\n    if (size \u003e 1) {\n      result\u003dHashUtilities.hashCode(result,getPaint(size - 1));\n      if (size \u003e 2) {\n        result\u003dHashUtilities.hashCode(result,getPaint(size / 2));\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 115,
    "end_line": 131,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.writeObject#140",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int count\u003dsize();\n  stream.writeInt(count);\n  for (int i\u003d0; i \u003c count; i++) {\n    Paint paint\u003dgetPaint(i);\n    if (paint !\u003d null) {\n      stream.writeInt(i);\n      SerialUtilities.writePaint(paint,stream);\n    }\n else {\n      stream.writeInt(-1);\n    }\n  }\n}",
    "begin_line": 140,
    "end_line": 156,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintList.readObject#166",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintList.java",
    "class_name": "org.jfree.chart.util.PaintList",
    "signature": "org.jfree.chart.util.PaintList.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  int count\u003dstream.readInt();\n  for (int i\u003d0; i \u003c count; i++) {\n    final int index\u003dstream.readInt();\n    if (index !\u003d -1) {\n      setPaint(index,SerialUtilities.readPaint(stream));\n    }\n  }\n}",
    "begin_line": 166,
    "end_line": 178,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.PaintMap#78",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.PaintMap()",
    "snippet": "public PaintMap(){\n  this.store\u003dnew HashMap();\n}",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * Creates a new (empty) map.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.getPaint#93",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.getPaint(java.lang.Comparable)",
    "snippet": "public Paint getPaint(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  return (Paint)this.store.get(key);\n}",
    "begin_line": 93,
    "end_line": 98,
    "comment": "/** \n * Returns the paint associated with the specified key, or \u003ccode\u003enull\u003c/code\u003e.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The paint, or \u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.containsKey#109",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.containsKey(java.lang.Comparable)",
    "snippet": "public boolean containsKey(Comparable key){\n  return this.store.containsKey(key);\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the map contains the specified key, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param key  the key.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the map contains the specified key, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.put#123",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.put(java.lang.Comparable, java.awt.Paint)",
    "snippet": "public void put(Comparable key,Paint paint){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  this.store.put(key,paint);\n}",
    "begin_line": 123,
    "end_line": 128,
    "comment": "/** \n * Adds a mapping between the specified \u003ccode\u003ekey\u003c/code\u003e and \u003ccode\u003epaint\u003c/code\u003e values.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param paint  the paint.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.clear#133",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.clear()",
    "snippet": "public void clear(){\n  this.store.clear();\n}",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Resets the map to empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.equals#144",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof PaintMap)) {\n    return false;\n  }\n  PaintMap that\u003d(PaintMap)obj;\n  if (this.store.size() !\u003d that.store.size()) {\n    return false;\n  }\n  Set keys\u003dthis.store.keySet();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    Paint p1\u003dgetPaint(key);\n    Paint p2\u003dthat.getPaint(key);\n    if (!PaintUtilities.equal(p1,p2)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 144,
    "end_line": 166,
    "comment": "/** \n * Tests this map for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.clone#175",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 175,
    "end_line": 179,
    "comment": "/** \n * Returns a clone of this \u003ccode\u003ePaintMap\u003c/code\u003e.\n * @return A clone of this instance.\n * @throws CloneNotSupportedException if any key is not cloneable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.writeObject#188",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  stream.writeInt(this.store.size());\n  Set keys\u003dthis.store.keySet();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    stream.writeObject(key);\n    Paint paint\u003dgetPaint(key);\n    SerialUtilities.writePaint(paint,stream);\n  }\n}",
    "begin_line": 188,
    "end_line": 199,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "PaintMap.readObject#209",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/PaintMap.java",
    "class_name": "org.jfree.chart.util.PaintMap",
    "signature": "org.jfree.chart.util.PaintMap.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.store\u003dnew HashMap();\n  int keyCount\u003dstream.readInt();\n  for (int i\u003d0; i \u003c keyCount; i++) {\n    Comparable key\u003d(Comparable)stream.readObject();\n    Paint paint\u003dSerialUtilities.readPaint(stream);\n    this.store.put(key,paint);\n  }\n}",
    "begin_line": 209,
    "end_line": 219,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.RectangleAnchor#106",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
    "snippet": "private RectangleAnchor(final String name){\n  this.name\u003dname;\n}",
    "begin_line": 106,
    "end_line": 108,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.toString#115",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 115,
    "end_line": 117,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.equals#127",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.equals(java.lang.Object)",
    "snippet": "public boolean equals(final Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof RectangleAnchor)) {\n    return false;\n  }\n  final RectangleAnchor order\u003d(RectangleAnchor)obj;\n  if (!this.name.equals(order.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 127,
    "end_line": 142,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.hashCode#149",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.coordinates#161",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.coordinates(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleAnchor)",
    "snippet": "public static Point2D coordinates(final Rectangle2D rectangle,final RectangleAnchor anchor){\n  Point2D result\u003dnew Point2D.Double();\n  if (anchor \u003d\u003d RectangleAnchor.CENTER) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM) {\n    result.setLocation(rectangle.getCenterX(),rectangle.getMaxY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getCenterY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getMinY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_LEFT) {\n    result.setLocation(rectangle.getMinX(),rectangle.getMaxY());\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_RIGHT) {\n    result.setLocation(rectangle.getMaxX(),rectangle.getMaxY());\n  }\n  return result;\n}",
    "begin_line": 161,
    "end_line": 192,
    "comment": "/** \n * Returns the (x, y) coordinates of the specified anchor.\n * @param rectangle  the rectangle.\n * @param anchor  the anchor.\n * @return The (x, y) coordinates.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.createRectangle#205",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.createRectangle(org.jfree.chart.util.Size2D, double, double, org.jfree.chart.util.RectangleAnchor)",
    "snippet": "public static Rectangle2D createRectangle(final Size2D dimensions,final double anchorX,final double anchorY,final RectangleAnchor anchor){\n  Rectangle2D result\u003dnull;\n  final double w\u003ddimensions.getWidth();\n  final double h\u003ddimensions.getHeight();\n  if (anchor \u003d\u003d RectangleAnchor.CENTER) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.TOP_RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_LEFT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n else   if (anchor \u003d\u003d RectangleAnchor.BOTTOM_RIGHT) {\n    result\u003dnew Rectangle2D.Double(anchorX - w / 2.0,anchorY - h / 2.0,w,h);\n  }\n  return result;\n}",
    "begin_line": 205,
    "end_line": 258,
    "comment": "/** \n * Creates a new rectangle with the specified dimensions that is aligned to the given anchor point \u003ccode\u003e(anchorX, anchorY)\u003c/code\u003e.\n * @param dimensions  the dimensions (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param anchorX  the x-anchor.\n * @param anchorY  the y-anchor.\n * @param anchor  the anchor (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleAnchor.readResolve#267",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleAnchor.java",
    "class_name": "org.jfree.chart.util.RectangleAnchor",
    "signature": "org.jfree.chart.util.RectangleAnchor.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  RectangleAnchor result\u003dnull;\n  if (this.equals(RectangleAnchor.CENTER)) {\n    result\u003dRectangleAnchor.CENTER;\n  }\n else   if (this.equals(RectangleAnchor.TOP)) {\n    result\u003dRectangleAnchor.TOP;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM)) {\n    result\u003dRectangleAnchor.BOTTOM;\n  }\n else   if (this.equals(RectangleAnchor.LEFT)) {\n    result\u003dRectangleAnchor.LEFT;\n  }\n else   if (this.equals(RectangleAnchor.RIGHT)) {\n    result\u003dRectangleAnchor.RIGHT;\n  }\n else   if (this.equals(RectangleAnchor.TOP_LEFT)) {\n    result\u003dRectangleAnchor.TOP_LEFT;\n  }\n else   if (this.equals(RectangleAnchor.TOP_RIGHT)) {\n    result\u003dRectangleAnchor.TOP_RIGHT;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM_LEFT)) {\n    result\u003dRectangleAnchor.BOTTOM_LEFT;\n  }\n else   if (this.equals(RectangleAnchor.BOTTOM_RIGHT)) {\n    result\u003dRectangleAnchor.BOTTOM_RIGHT;\n  }\n  return result;\n}",
    "begin_line": 267,
    "end_line": 297,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.RectangleEdge#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
    "snippet": "private RectangleEdge(String name){\n  this.name\u003dname;\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.toString#89",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 89,
    "end_line": 91,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.equals#101",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof RectangleEdge)) {\n    return false;\n  }\n  RectangleEdge order\u003d(RectangleEdge)obj;\n  if (!this.name.equals(order.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 101,
    "end_line": 117,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.hashCode#124",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 124,
    "end_line": 126,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.isTopOrBottom#136",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge)",
    "snippet": "public static boolean isTopOrBottom(RectangleEdge edge){\n  return (edge \u003d\u003d RectangleEdge.TOP || edge \u003d\u003d RectangleEdge.BOTTOM);\n}",
    "begin_line": 136,
    "end_line": 138,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the edge is \u003ccode\u003eTOP\u003c/code\u003e or \u003ccode\u003eBOTTOM\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param edge  the edge.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.isLeftOrRight#148",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.isLeftOrRight(org.jfree.chart.util.RectangleEdge)",
    "snippet": "public static boolean isLeftOrRight(RectangleEdge edge){\n  return (edge \u003d\u003d RectangleEdge.LEFT || edge \u003d\u003d RectangleEdge.RIGHT);\n}",
    "begin_line": 148,
    "end_line": 150,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the edge is \u003ccode\u003eLEFT\u003c/code\u003e or \u003ccode\u003eRIGHT\u003c/code\u003e, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param edge  the edge.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.opposite#159",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.opposite(org.jfree.chart.util.RectangleEdge)",
    "snippet": "public static RectangleEdge opposite(RectangleEdge edge){\n  RectangleEdge result\u003dnull;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    result\u003dRectangleEdge.BOTTOM;\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    result\u003dRectangleEdge.TOP;\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    result\u003dRectangleEdge.RIGHT;\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    result\u003dRectangleEdge.LEFT;\n  }\n  return result;\n}",
    "begin_line": 159,
    "end_line": 174,
    "comment": "/** \n * Returns the opposite edge.\n * @param edge  an edge.\n * @return The opposite edge.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.coordinate#184",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.coordinate(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
    "snippet": "public static double coordinate(Rectangle2D rectangle,RectangleEdge edge){\n  double result\u003d0.0;\n  if (edge \u003d\u003d RectangleEdge.TOP) {\n    result\u003drectangle.getMinY();\n  }\n else   if (edge \u003d\u003d RectangleEdge.BOTTOM) {\n    result\u003drectangle.getMaxY();\n  }\n else   if (edge \u003d\u003d RectangleEdge.LEFT) {\n    result\u003drectangle.getMinX();\n  }\n else   if (edge \u003d\u003d RectangleEdge.RIGHT) {\n    result\u003drectangle.getMaxX();\n  }\n  return result;\n}",
    "begin_line": 184,
    "end_line": 200,
    "comment": "/** \n * Returns the x or y coordinate of the specified edge.\n * @param rectangle  the rectangle.\n * @param edge  the edge.\n * @return The coordinate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleEdge.readResolve#209",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleEdge.java",
    "class_name": "org.jfree.chart.util.RectangleEdge",
    "signature": "org.jfree.chart.util.RectangleEdge.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  RectangleEdge result\u003dnull;\n  if (this.equals(RectangleEdge.TOP)) {\n    result\u003dRectangleEdge.TOP;\n  }\n else   if (this.equals(RectangleEdge.BOTTOM)) {\n    result\u003dRectangleEdge.BOTTOM;\n  }\n else   if (this.equals(RectangleEdge.LEFT)) {\n    result\u003dRectangleEdge.LEFT;\n  }\n else   if (this.equals(RectangleEdge.RIGHT)) {\n    result\u003dRectangleEdge.RIGHT;\n  }\n  return result;\n}",
    "begin_line": 209,
    "end_line": 224,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#88",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets()",
    "snippet": "public RectangleInsets(){\n  this(1.0,1.0,1.0,1.0);\n}",
    "begin_line": 88,
    "end_line": 90,
    "comment": "/** \n * Creates a new instance with all insets initialised to \u003ccode\u003e1.0\u003c/code\u003e.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#100",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
    "snippet": "public RectangleInsets(double top,double left,double bottom,double right){\n  this(UnitType.ABSOLUTE,top,left,bottom,right);\n}",
    "begin_line": 100,
    "end_line": 103,
    "comment": "/** \n * Creates a new instance with the specified insets (as \u0027absolute\u0027 units).\n * @param top  the top insets.\n * @param left  the left insets.\n * @param bottom  the bottom insets.\n * @param right  the right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.RectangleInsets#115",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
    "snippet": "public RectangleInsets(UnitType unitType,double top,double left,double bottom,double right){\n  if (unitType \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027unitType\u0027 argument.\");\n  }\n  this.unitType\u003dunitType;\n  this.top\u003dtop;\n  this.bottom\u003dbottom;\n  this.left\u003dleft;\n  this.right\u003dright;\n}",
    "begin_line": 115,
    "end_line": 125,
    "comment": "/** \n * Creates a new instance.\n * @param unitType  absolute or relative units (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param top  the top insets.\n * @param left  the left insets.\n * @param bottom  the bottom insets.\n * @param right  the right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getUnitType#133",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getUnitType()",
    "snippet": "public UnitType getUnitType(){\n  return this.unitType;\n}",
    "begin_line": 133,
    "end_line": 135,
    "comment": "/** \n * Returns the unit type (absolute or relative).  This specifies whether the insets are measured as Java2D units or percentages.\n * @return The unit type (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getTop#142",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getTop()",
    "snippet": "public double getTop(){\n  return this.top;\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * Returns the top insets.\n * @return The top insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getBottom#151",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getBottom()",
    "snippet": "public double getBottom(){\n  return this.bottom;\n}",
    "begin_line": 151,
    "end_line": 153,
    "comment": "/** \n * Returns the bottom insets.\n * @return The bottom insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getLeft#160",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getLeft()",
    "snippet": "public double getLeft(){\n  return this.left;\n}",
    "begin_line": 160,
    "end_line": 162,
    "comment": "/** \n * Returns the left insets.\n * @return The left insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.getRight#169",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.getRight()",
    "snippet": "public double getRight(){\n  return this.right;\n}",
    "begin_line": 169,
    "end_line": 171,
    "comment": "/** \n * Returns the right insets.\n * @return The right insets.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.equals#180",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof RectangleInsets)) {\n    return false;\n  }\n  final RectangleInsets that\u003d(RectangleInsets)obj;\n  if (that.unitType !\u003d this.unitType) {\n    return false;\n  }\n  if (this.left !\u003d that.left) {\n    return false;\n  }\n  if (this.right !\u003d that.right) {\n    return false;\n  }\n  if (this.top !\u003d that.top) {\n    return false;\n  }\n  if (this.bottom !\u003d that.bottom) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 180,
    "end_line": 204,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.hashCode#211",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  long temp;\n  result\u003d(this.unitType !\u003d null ? this.unitType.hashCode() : 0);\n  temp\u003dthis.top !\u003d +0.0d ? Double.doubleToLongBits(this.top) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.bottom !\u003d +0.0d ? Double.doubleToLongBits(this.bottom) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.left !\u003d +0.0d ? Double.doubleToLongBits(this.left) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dthis.right !\u003d +0.0d ? Double.doubleToLongBits(this.right) : 0L;\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  return result;\n}",
    "begin_line": 211,
    "end_line": 224,
    "comment": "/** \n * Returns a hash code for the object.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.toString#232",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.toString()",
    "snippet": "public String toString(){\n  return \"RectangleInsets[t\u003d\" + this.top + \",l\u003d\"+ this.left+ \",b\u003d\"+ this.bottom+ \",r\u003d\"+ this.right+ \"]\";\n}",
    "begin_line": 232,
    "end_line": 235,
    "comment": "/** \n * Returns a textual representation of this instance, useful for debugging purposes.\n * @return A string representing this instance.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createAdjustedRectangle#250",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createAdjustedRectangle(java.awt.geom.Rectangle2D, org.jfree.chart.util.LengthAdjustmentType, org.jfree.chart.util.LengthAdjustmentType)",
    "snippet": "public Rectangle2D createAdjustedRectangle(Rectangle2D base,LengthAdjustmentType horizontal,LengthAdjustmentType vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double x\u003dbase.getX();\n  double y\u003dbase.getY();\n  double w\u003dbase.getWidth();\n  double h\u003dbase.getHeight();\n  if (horizontal \u003d\u003d LengthAdjustmentType.EXPAND) {\n    double leftOutset\u003dcalculateLeftOutset(w);\n    x\u003dx - leftOutset;\n    w\u003dw + leftOutset + calculateRightOutset(w);\n  }\n else   if (horizontal \u003d\u003d LengthAdjustmentType.CONTRACT) {\n    double leftMargin\u003dcalculateLeftInset(w);\n    x\u003dx + leftMargin;\n    w\u003dw - leftMargin - calculateRightInset(w);\n  }\n  if (vertical \u003d\u003d LengthAdjustmentType.EXPAND) {\n    double topMargin\u003dcalculateTopOutset(h);\n    y\u003dy - topMargin;\n    h\u003dh + topMargin + calculateBottomOutset(h);\n  }\n else   if (vertical \u003d\u003d LengthAdjustmentType.CONTRACT) {\n    double topMargin\u003dcalculateTopInset(h);\n    y\u003dy + topMargin;\n    h\u003dh - topMargin - calculateBottomInset(h);\n  }\n  return new Rectangle2D.Double(x,y,w,h);\n}",
    "begin_line": 250,
    "end_line": 280,
    "comment": "/** \n * Creates an adjusted rectangle using the supplied rectangle, the insets specified by this instance, and the horizontal and vertical adjustment types.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  the horizontal adjustment type (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param vertical  the vertical adjustment type (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createInsetRectangle#289",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createInsetRectangle(java.awt.geom.Rectangle2D)",
    "snippet": "public Rectangle2D createInsetRectangle(Rectangle2D base){\n  return createInsetRectangle(base,true,true);\n}",
    "begin_line": 289,
    "end_line": 291,
    "comment": "/** \n * Creates an \u0027inset\u0027 rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createInsetRectangle#302",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createInsetRectangle(java.awt.geom.Rectangle2D, boolean, boolean)",
    "snippet": "public Rectangle2D createInsetRectangle(Rectangle2D base,boolean horizontal,boolean vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double topMargin\u003d0.0;\n  double bottomMargin\u003d0.0;\n  if (vertical) {\n    topMargin\u003dcalculateTopInset(base.getHeight());\n    bottomMargin\u003dcalculateBottomInset(base.getHeight());\n  }\n  double leftMargin\u003d0.0;\n  double rightMargin\u003d0.0;\n  if (horizontal) {\n    leftMargin\u003dcalculateLeftInset(base.getWidth());\n    rightMargin\u003dcalculateRightInset(base.getWidth());\n  }\n  return new Rectangle2D.Double(base.getX() + leftMargin,base.getY() + topMargin,base.getWidth() - leftMargin - rightMargin,base.getHeight() - topMargin - bottomMargin);\n}",
    "begin_line": 302,
    "end_line": 325,
    "comment": "/** \n * Creates an \u0027inset\u0027 rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  apply horizontal insets?\n * @param vertical  apply vertical insets?\n * @return The inset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createOutsetRectangle#334",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D)",
    "snippet": "public Rectangle2D createOutsetRectangle(Rectangle2D base){\n  return createOutsetRectangle(base,true,true);\n}",
    "begin_line": 334,
    "end_line": 336,
    "comment": "/** \n * Creates an outset rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return An outset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.createOutsetRectangle#347",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D, boolean, boolean)",
    "snippet": "public Rectangle2D createOutsetRectangle(Rectangle2D base,boolean horizontal,boolean vertical){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  double topMargin\u003d0.0;\n  double bottomMargin\u003d0.0;\n  if (vertical) {\n    topMargin\u003dcalculateTopOutset(base.getHeight());\n    bottomMargin\u003dcalculateBottomOutset(base.getHeight());\n  }\n  double leftMargin\u003d0.0;\n  double rightMargin\u003d0.0;\n  if (horizontal) {\n    leftMargin\u003dcalculateLeftOutset(base.getWidth());\n    rightMargin\u003dcalculateRightOutset(base.getWidth());\n  }\n  return new Rectangle2D.Double(base.getX() - leftMargin,base.getY() - topMargin,base.getWidth() + leftMargin + rightMargin,base.getHeight() + topMargin + bottomMargin);\n}",
    "begin_line": 347,
    "end_line": 371,
    "comment": "/** \n * Creates an outset rectangle.\n * @param base  the base rectangle (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param horizontal  apply horizontal insets?\n * @param vertical  apply vertical insets?\n * @return An outset rectangle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateTopInset#380",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset(double)",
    "snippet": "public double calculateTopInset(double height){\n  double result\u003dthis.top;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.top * height);\n  }\n  return result;\n}",
    "begin_line": 380,
    "end_line": 386,
    "comment": "/** \n * Returns the top margin.\n * @param height  the height of the base rectangle.\n * @return The top margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateTopOutset#395",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset(double)",
    "snippet": "public double calculateTopOutset(double height){\n  double result\u003dthis.top;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(height / (1 - this.top - this.bottom)) * this.top;\n  }\n  return result;\n}",
    "begin_line": 395,
    "end_line": 401,
    "comment": "/** \n * Returns the top margin.\n * @param height  the height of the base rectangle.\n * @return The top margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateBottomInset#410",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset(double)",
    "snippet": "public double calculateBottomInset(double height){\n  double result\u003dthis.bottom;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.bottom * height);\n  }\n  return result;\n}",
    "begin_line": 410,
    "end_line": 416,
    "comment": "/** \n * Returns the bottom margin.\n * @param height  the height of the base rectangle.\n * @return The bottom margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateBottomOutset#425",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double)",
    "snippet": "public double calculateBottomOutset(double height){\n  double result\u003dthis.bottom;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(height / (1 - this.top - this.bottom)) * this.bottom;\n  }\n  return result;\n}",
    "begin_line": 425,
    "end_line": 431,
    "comment": "/** \n * Returns the bottom margin.\n * @param height  the height of the base rectangle.\n * @return The bottom margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateLeftInset#440",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset(double)",
    "snippet": "public double calculateLeftInset(double width){\n  double result\u003dthis.left;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.left * width);\n  }\n  return result;\n}",
    "begin_line": 440,
    "end_line": 446,
    "comment": "/** \n * Returns the left margin.\n * @param width  the width of the base rectangle.\n * @return The left margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateLeftOutset#455",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double)",
    "snippet": "public double calculateLeftOutset(double width){\n  double result\u003dthis.left;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(width / (1 - this.left - this.right)) * this.left;\n  }\n  return result;\n}",
    "begin_line": 455,
    "end_line": 461,
    "comment": "/** \n * Returns the left margin.\n * @param width  the width of the base rectangle.\n * @return The left margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateRightInset#470",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset(double)",
    "snippet": "public double calculateRightInset(double width){\n  double result\u003dthis.right;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(this.right * width);\n  }\n  return result;\n}",
    "begin_line": 470,
    "end_line": 476,
    "comment": "/** \n * Returns the right margin.\n * @param width  the width of the base rectangle.\n * @return The right margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.calculateRightOutset#485",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset(double)",
    "snippet": "public double calculateRightOutset(double width){\n  double result\u003dthis.right;\n  if (this.unitType \u003d\u003d UnitType.RELATIVE) {\n    result\u003d(width / (1 - this.left - this.right)) * this.right;\n  }\n  return result;\n}",
    "begin_line": 485,
    "end_line": 491,
    "comment": "/** \n * Returns the right margin.\n * @param width  the width of the base rectangle.\n * @return The right margin (in Java2D units).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trimWidth#500",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trimWidth(double)",
    "snippet": "public double trimWidth(double width){\n  return width - calculateLeftInset(width) - calculateRightInset(width);\n}",
    "begin_line": 500,
    "end_line": 502,
    "comment": "/** \n * Trims the given width to allow for the insets.\n * @param width  the width.\n * @return The trimmed width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.extendWidth#511",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.extendWidth(double)",
    "snippet": "public double extendWidth(double width){\n  return width + calculateLeftOutset(width) + calculateRightOutset(width);\n}",
    "begin_line": 511,
    "end_line": 513,
    "comment": "/** \n * Extends the given width to allow for the insets.\n * @param width  the width.\n * @return The extended width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trimHeight#522",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trimHeight(double)",
    "snippet": "public double trimHeight(double height){\n  return height - calculateTopInset(height) - calculateBottomInset(height);\n}",
    "begin_line": 522,
    "end_line": 525,
    "comment": "/** \n * Trims the given height to allow for the insets.\n * @param height  the height.\n * @return The trimmed height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.extendHeight#534",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.extendHeight(double)",
    "snippet": "public double extendHeight(double height){\n  return height + calculateTopOutset(height) + calculateBottomOutset(height);\n}",
    "begin_line": 534,
    "end_line": 537,
    "comment": "/** \n * Extends the given height to allow for the insets.\n * @param height  the height.\n * @return The extended height.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RectangleInsets.trim#544",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/RectangleInsets.java",
    "class_name": "org.jfree.chart.util.RectangleInsets",
    "signature": "org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D)",
    "snippet": "public void trim(Rectangle2D area){\n  double w\u003darea.getWidth();\n  double h\u003darea.getHeight();\n  double l\u003dcalculateLeftInset(w);\n  double r\u003dcalculateRightInset(w);\n  double t\u003dcalculateTopInset(h);\n  double b\u003dcalculateBottomInset(h);\n  area.setRect(area.getX() + l,area.getY() + t,w - l - r,h - t - b);\n}",
    "begin_line": 544,
    "end_line": 552,
    "comment": "/** \n * Shrinks the given rectangle by the amount of these insets.\n * @param area  the area (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ResourceBundleWrapper.ResourceBundleWrapper#82",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.ResourceBundleWrapper()",
    "snippet": "private ResourceBundleWrapper(){\n}",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Private constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ResourceBundleWrapper.removeCodeBase#96",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.removeCodeBase(java.net.URL, java.net.URLClassLoader)",
    "snippet": "public static void removeCodeBase(URL codeBase,URLClassLoader urlClassLoader){\n  List urlsNoBase\u003dnew ArrayList();\n  URL[] urls\u003durlClassLoader.getURLs();\n  for (int i\u003d0; i \u003c urls.length; i++) {\n    if (!urls[i].sameFile(codeBase)) {\n      urlsNoBase.add(urls[i]);\n    }\n  }\n  URL[] urlsNoBaseArray\u003d(URL[])urlsNoBase.toArray(new URL[0]);\n  noCodeBaseClassLoader\u003dURLClassLoader.newInstance(urlsNoBaseArray);\n}",
    "begin_line": 96,
    "end_line": 109,
    "comment": "/** \n * Instantiate a  {@link URLClassLoader} for resource lookups where thecodeBase URL is removed.  This method is typically called from an applet\u0027s init() method.  If this method is never called, the \u003ccode\u003egetBundle()\u003c/code\u003e methods map to the standard {@link ResourceBundle} lookup methods.\n * @param codeBase  the codeBase URL.\n * @param urlClassLoader  the class loader.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ResourceBundleWrapper.getBundle#118",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.getBundle(java.lang.String)",
    "snippet": "public static final ResourceBundle getBundle(String baseName){\n  if (noCodeBaseClassLoader !\u003d null) {\n    return ResourceBundle.getBundle(baseName,Locale.getDefault(),noCodeBaseClassLoader);\n  }\n else {\n    return ResourceBundle.getBundle(baseName);\n  }\n}",
    "begin_line": 118,
    "end_line": 130,
    "comment": "/** \n * Finds and returns the specified resource bundle.\n * @param baseName  the base name.\n * @return The resource bundle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ResourceBundleWrapper.getBundle#140",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.getBundle(java.lang.String, java.util.Locale)",
    "snippet": "public static final ResourceBundle getBundle(String baseName,Locale locale){\n  if (noCodeBaseClassLoader !\u003d null) {\n    return ResourceBundle.getBundle(baseName,locale,noCodeBaseClassLoader);\n  }\n else {\n    return ResourceBundle.getBundle(baseName,locale);\n  }\n}",
    "begin_line": 140,
    "end_line": 154,
    "comment": "/** \n * Finds and returns the specified resource bundle.\n * @param baseName  the base name.\n * @param locale  the locale.\n * @return The resource bundle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ResourceBundleWrapper.getBundle#166",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ResourceBundleWrapper.java",
    "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
    "signature": "org.jfree.chart.util.ResourceBundleWrapper.getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader)",
    "snippet": "public static ResourceBundle getBundle(String baseName,Locale locale,ClassLoader loader){\n  return ResourceBundle.getBundle(baseName,locale,loader);\n}",
    "begin_line": 166,
    "end_line": 169,
    "comment": "/** \n * Maps directly to \u003ccode\u003eResourceBundle.getBundle(baseName, locale, loader)\u003c/code\u003e.\n * @param baseName  the base name.\n * @param locale  the locale.\n * @param loader  the class loader.\n * @return The resource bundle.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.Rotation#81",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.Rotation(java.lang.String, double)",
    "snippet": "private Rotation(final String name,final double factor){\n  this.name\u003dname;\n  this.factor\u003dfactor;\n}",
    "begin_line": 81,
    "end_line": 84,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n * @param factor  the rotation factor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.toString#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 91,
    "end_line": 93,
    "comment": "/** \n * Returns a string representing the object.\n * @return the string (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.getFactor#101",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.getFactor()",
    "snippet": "public double getFactor(){\n  return this.factor;\n}",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Returns the rotation factor, which is -1.0 for \u003ccode\u003eCLOCKWISE\u003c/code\u003e and 1.0 for \u003ccode\u003eANTICLOCKWISE\u003c/code\u003e.\n * @return the rotation factor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.equals#113",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.equals(java.lang.Object)",
    "snippet": "public boolean equals(final Object o){\n  if (this \u003d\u003d o) {\n    return true;\n  }\n  if (!(o instanceof Rotation)) {\n    return false;\n  }\n  final Rotation rotation\u003d(Rotation)o;\n  if (this.factor !\u003d rotation.factor) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 113,
    "end_line": 128,
    "comment": "/** \n * Compares this object for equality with an other object. Implementation note: This simply compares the factor instead of the name.\n * @param o the other object\n * @return true or false\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.hashCode#135",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.hashCode()",
    "snippet": "public int hashCode(){\n  final long temp\u003dDouble.doubleToLongBits(this.factor);\n  return (int)(temp ^ (temp \u003e\u003e\u003e 32));\n}",
    "begin_line": 135,
    "end_line": 138,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Rotation.readResolve#147",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/Rotation.java",
    "class_name": "org.jfree.chart.util.Rotation",
    "signature": "org.jfree.chart.util.Rotation.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(Rotation.CLOCKWISE)) {\n    return Rotation.CLOCKWISE;\n  }\n else   if (this.equals(Rotation.ANTICLOCKWISE)) {\n    return Rotation.ANTICLOCKWISE;\n  }\n  return null;\n}",
    "begin_line": 147,
    "end_line": 155,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return the object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.ShapeList#58",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
    "snippet": "public ShapeList(){\n  super();\n}",
    "begin_line": 58,
    "end_line": 60,
    "comment": "/** \n * Creates a new list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.getShape#69",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.getShape(int)",
    "snippet": "public Shape getShape(int index){\n  return (Shape)get(index);\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Returns a  {@link Shape} object from the list.\n * @param index the index (zero-based).\n * @return The object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.setShape#80",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.setShape(int, java.awt.Shape)",
    "snippet": "public void setShape(int index,Shape shape){\n  set(index,shape);\n}",
    "begin_line": 80,
    "end_line": 82,
    "comment": "/** \n * Sets the  {@link Shape} for an item in the list.  The list is expandedif necessary.\n * @param index  the index (zero-based).\n * @param shape  the {@link Shape}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.clone#92",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns an independent copy of the list.\n * @return A clone.\n * @throws CloneNotSupportedException if an item in the list does notsupport cloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.equals#103",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof ShapeList)) {\n    return false;\n  }\n  ShapeList that\u003d(ShapeList)obj;\n  int listSize\u003dsize();\n  for (int i\u003d0; i \u003c listSize; i++) {\n    if (!ShapeUtilities.equal((Shape)get(i),(Shape)that.get(i))) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 103,
    "end_line": 120,
    "comment": "/** \n * Tests the list for equality with another object (typically also a list).\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.hashCode#127",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.hashCode()",
    "snippet": "public int hashCode(){\n  return super.hashCode();\n}",
    "begin_line": 127,
    "end_line": 129,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.writeObject#138",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int count\u003dsize();\n  stream.writeInt(count);\n  for (int i\u003d0; i \u003c count; i++) {\n    Shape shape\u003dgetShape(i);\n    if (shape !\u003d null) {\n      stream.writeInt(i);\n      SerialUtilities.writeShape(shape,stream);\n    }\n else {\n      stream.writeInt(-1);\n    }\n  }\n}",
    "begin_line": 138,
    "end_line": 154,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "ShapeList.readObject#164",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/ShapeList.java",
    "class_name": "org.jfree.chart.util.ShapeList",
    "signature": "org.jfree.chart.util.ShapeList.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  int count\u003dstream.readInt();\n  for (int i\u003d0; i \u003c count; i++) {\n    int index\u003dstream.readInt();\n    if (index !\u003d -1) {\n      setShape(index,SerialUtilities.readShape(stream));\n    }\n  }\n}",
    "begin_line": 164,
    "end_line": 176,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.StrokeList#57",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
    "snippet": "public StrokeList(){\n  super();\n}",
    "begin_line": 57,
    "end_line": 59,
    "comment": "/** \n * Creates a new list.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.getStroke#68",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.getStroke(int)",
    "snippet": "public Stroke getStroke(int index){\n  return (Stroke)get(index);\n}",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Returns a  {@link Stroke} object from the list.\n * @param index the index (zero-based).\n * @return The object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.setStroke#79",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.setStroke(int, java.awt.Stroke)",
    "snippet": "public void setStroke(int index,Stroke stroke){\n  set(index,stroke);\n}",
    "begin_line": 79,
    "end_line": 81,
    "comment": "/** \n * Sets the  {@link Stroke} for an item in the list.  The list is expandedif necessary.\n * @param index  the index (zero-based).\n * @param stroke  the {@link Stroke}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.clone#90",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 90,
    "end_line": 92,
    "comment": "/** \n * Returns an independent copy of the list.\n * @return A clone.\n * @throws CloneNotSupportedException if an item in the list cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.equals#101",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (obj instanceof StrokeList) {\n    return super.equals(obj);\n  }\n  return false;\n}",
    "begin_line": 101,
    "end_line": 117,
    "comment": "/** \n * Tests the list for equality with another object (typically also a list).\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.hashCode#124",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.hashCode()",
    "snippet": "public int hashCode(){\n  return super.hashCode();\n}",
    "begin_line": 124,
    "end_line": 126,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.writeObject#135",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  int count\u003dsize();\n  stream.writeInt(count);\n  for (int i\u003d0; i \u003c count; i++) {\n    Stroke stroke\u003dgetStroke(i);\n    if (stroke !\u003d null) {\n      stream.writeInt(i);\n      SerialUtilities.writeStroke(stroke,stream);\n    }\n else {\n      stream.writeInt(-1);\n    }\n  }\n}",
    "begin_line": 135,
    "end_line": 151,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeList.readObject#161",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeList.java",
    "class_name": "org.jfree.chart.util.StrokeList",
    "signature": "org.jfree.chart.util.StrokeList.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  int count\u003dstream.readInt();\n  for (int i\u003d0; i \u003c count; i++) {\n    int index\u003dstream.readInt();\n    if (index !\u003d -1) {\n      setStroke(index,SerialUtilities.readStroke(stream));\n    }\n  }\n}",
    "begin_line": 161,
    "end_line": 173,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.StrokeMap#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.StrokeMap()",
    "snippet": "public StrokeMap(){\n  this.store\u003dnew TreeMap();\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Creates a new (empty) map.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.getStroke#91",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.getStroke(java.lang.Comparable)",
    "snippet": "public Stroke getStroke(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  return (Stroke)this.store.get(key);\n}",
    "begin_line": 91,
    "end_line": 96,
    "comment": "/** \n * Returns the stroke associated with the specified key, or \u003ccode\u003enull\u003c/code\u003e.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The stroke, or \u003ccode\u003enull\u003c/code\u003e.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.containsKey#107",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.containsKey(java.lang.Comparable)",
    "snippet": "public boolean containsKey(Comparable key){\n  return this.store.containsKey(key);\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the map contains the specified key, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param key  the key.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the map contains the specified key, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.put#118",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)",
    "snippet": "public void put(Comparable key,Stroke stroke){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  this.store.put(key,stroke);\n}",
    "begin_line": 118,
    "end_line": 123,
    "comment": "/** \n * Adds a mapping between the specified \u003ccode\u003ekey\u003c/code\u003e and \u003ccode\u003estroke\u003c/code\u003e values.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param stroke  the stroke.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.clear#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.clear()",
    "snippet": "public void clear(){\n  this.store.clear();\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Resets the map to empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.equals#139",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof StrokeMap)) {\n    return false;\n  }\n  StrokeMap that\u003d(StrokeMap)obj;\n  if (this.store.size() !\u003d that.store.size()) {\n    return false;\n  }\n  Set keys\u003dthis.store.keySet();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    Stroke s1\u003dgetStroke(key);\n    Stroke s2\u003dthat.getStroke(key);\n    if (!ObjectUtilities.equal(s1,s2)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 139,
    "end_line": 161,
    "comment": "/** \n * Tests this map for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.clone#170",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 170,
    "end_line": 174,
    "comment": "/** \n * Returns a clone of this \u003ccode\u003eStrokeMap\u003c/code\u003e.\n * @return A clone of this instance.\n * @throws CloneNotSupportedException if any key is not cloneable.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.writeObject#183",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n  stream.writeInt(this.store.size());\n  Set keys\u003dthis.store.keySet();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable key\u003d(Comparable)iterator.next();\n    stream.writeObject(key);\n    Stroke stroke\u003dgetStroke(key);\n    SerialUtilities.writeStroke(stroke,stream);\n  }\n}",
    "begin_line": 183,
    "end_line": 194,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the output stream.\n * @throws IOException  if there is an I/O error.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "StrokeMap.readObject#204",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/StrokeMap.java",
    "class_name": "org.jfree.chart.util.StrokeMap",
    "signature": "org.jfree.chart.util.StrokeMap.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.store\u003dnew TreeMap();\n  int keyCount\u003dstream.readInt();\n  for (int i\u003d0; i \u003c keyCount; i++) {\n    Comparable key\u003d(Comparable)stream.readObject();\n    Stroke stroke\u003dSerialUtilities.readStroke(stream);\n    this.store.put(key,stroke);\n  }\n}",
    "begin_line": 204,
    "end_line": 214,
    "comment": "/** \n * Provides serialization support.\n * @param stream  the input stream.\n * @throws IOException  if there is an I/O error.\n * @throws ClassNotFoundException  if there is a classpath problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.UnitType#69",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
    "snippet": "private UnitType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 69,
    "end_line": 71,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.toString#78",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 78,
    "end_line": 80,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.equals#90",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof UnitType)) {\n    return false;\n  }\n  UnitType that\u003d(UnitType)obj;\n  if (!this.name.equals(that.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 90,
    "end_line": 102,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.hashCode#109",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "UnitType.readResolve#120",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/UnitType.java",
    "class_name": "org.jfree.chart.util.UnitType",
    "signature": "org.jfree.chart.util.UnitType.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(UnitType.ABSOLUTE)) {\n    return UnitType.ABSOLUTE;\n  }\n else   if (this.equals(UnitType.RELATIVE)) {\n    return UnitType.RELATIVE;\n  }\n  return null;\n}",
    "begin_line": 120,
    "end_line": 128,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VerticalAlignment.VerticalAlignment#76",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
    "snippet": "private VerticalAlignment(String name){\n  this.name\u003dname;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VerticalAlignment.toString#85",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "signature": "org.jfree.chart.util.VerticalAlignment.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Returns a string representing the object.\n * @return the string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VerticalAlignment.equals#97",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "signature": "org.jfree.chart.util.VerticalAlignment.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof VerticalAlignment)) {\n    return false;\n  }\n  VerticalAlignment alignment\u003d(VerticalAlignment)obj;\n  if (!this.name.equals(alignment.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 97,
    "end_line": 110,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return a boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VerticalAlignment.hashCode#117",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "signature": "org.jfree.chart.util.VerticalAlignment.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 117,
    "end_line": 119,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return the hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "VerticalAlignment.readResolve#128",
    "is_bug": true,
    "src_path": "org/jfree/chart/util/VerticalAlignment.java",
    "class_name": "org.jfree.chart.util.VerticalAlignment",
    "signature": "org.jfree.chart.util.VerticalAlignment.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(VerticalAlignment.TOP)) {\n    return VerticalAlignment.TOP;\n  }\n else   if (this.equals(VerticalAlignment.BOTTOM)) {\n    return VerticalAlignment.BOTTOM;\n  }\n else   if (this.equals(VerticalAlignment.CENTER)) {\n    return VerticalAlignment.CENTER;\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 128,
    "end_line": 141,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.DefaultKeyedValues#97",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.DefaultKeyedValues()",
    "snippet": "public DefaultKeyedValues(){\n  this.keys\u003dnew ArrayList();\n  this.values\u003dnew ArrayList();\n  this.indexMap\u003dnew HashMap();\n}",
    "begin_line": 97,
    "end_line": 101,
    "comment": "/** \n * Creates a new collection (initially empty).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getItemCount#108",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getItemCount()",
    "snippet": "public int getItemCount(){\n  return this.indexMap.size();\n}",
    "begin_line": 108,
    "end_line": 110,
    "comment": "/** \n * Returns the number of items (values) in the collection.\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getValue#121",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getValue(int)",
    "snippet": "public Number getValue(int item){\n  return (Number)this.values.get(item);\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "/** \n * Returns a value.\n * @param item  the item of interest (zero-based index).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @throws IndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is out of bounds.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getKey#134",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getKey(int)",
    "snippet": "public Comparable getKey(int index){\n  return (Comparable)this.keys.get(index);\n}",
    "begin_line": 134,
    "end_line": 136,
    "comment": "/** \n * Returns a key.\n * @param index  the item index (zero-based).\n * @return The row key.\n * @throws IndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is out of bounds.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getIndex#148",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable)",
    "snippet": "public int getIndex(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  final Integer i\u003d(Integer)this.indexMap.get(key);\n  if (i \u003d\u003d null) {\n    return -1;\n  }\n  return i.intValue();\n}",
    "begin_line": 148,
    "end_line": 157,
    "comment": "/** \n * Returns the index for a given key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index, or \u003ccode\u003e-1\u003c/code\u003e if the key is not recognised.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getKeys#164",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getKeys()",
    "snippet": "public List getKeys(){\n  return (List)this.keys.clone();\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Returns the keys for the values in the collection.\n * @return The keys (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.getValue#179",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.getValue(java.lang.Comparable)",
    "snippet": "public Number getValue(Comparable key){\n  int index\u003dgetIndex(key);\n  if (index \u003c 0) {\n    throw new UnknownKeyException(\"Key not found: \" + key);\n  }\n  return getValue(index);\n}",
    "begin_line": 179,
    "end_line": 185,
    "comment": "/** \n * Returns the value for a given key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @throws UnknownKeyException if the key is not recognised.\n * @see #getValue(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.addValue#195",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)",
    "snippet": "public void addValue(Comparable key,double value){\n  addValue(key,new Double(value));\n}",
    "begin_line": 195,
    "end_line": 197,
    "comment": "/** \n * Updates an existing value, or adds a new value to the collection.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n * @see #addValue(Comparable,Number)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.addValue#207",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)",
    "snippet": "public void addValue(Comparable key,Number value){\n  setValue(key,value);\n}",
    "begin_line": 207,
    "end_line": 209,
    "comment": "/** \n * Adds a new value to the collection, or updates an existing value. This method passes control directly to the {@link #setValue(Comparable,Number)} method.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.setValue#217",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, double)",
    "snippet": "public void setValue(Comparable key,double value){\n  setValue(key,new Double(value));\n}",
    "begin_line": 217,
    "end_line": 219,
    "comment": "/** \n * Updates an existing value, or adds a new value to the collection.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.setValue#227",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number)",
    "snippet": "public void setValue(Comparable key,Number value){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  int keyIndex\u003dgetIndex(key);\n  if (keyIndex \u003e\u003d 0) {\n    this.keys.set(keyIndex,key);\n    this.values.set(keyIndex,value);\n  }\n else {\n    this.keys.add(key);\n    this.values.add(value);\n    this.indexMap.put(key,new Integer(this.keys.size() - 1));\n  }\n}",
    "begin_line": 227,
    "end_line": 241,
    "comment": "/** \n * Updates an existing value, or adds a new value to the collection.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.insertValue#254",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.insertValue(int, java.lang.Comparable, double)",
    "snippet": "public void insertValue(int position,Comparable key,double value){\n  insertValue(position,key,new Double(value));\n}",
    "begin_line": 254,
    "end_line": 256,
    "comment": "/** \n * Inserts a new value at the specified position in the dataset or, if there is an existing item with the specified key, updates the value for that item and moves it to the specified position.\n * @param position  the position (in the range 0 to getItemCount()).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.insertValue#269",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.insertValue(int, java.lang.Comparable, java.lang.Number)",
    "snippet": "public void insertValue(int position,Comparable key,Number value){\n  if (position \u003c 0 || position \u003e getItemCount()) {\n    throw new IllegalArgumentException(\"\u0027position\u0027 out of bounds.\");\n  }\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  int pos\u003dgetIndex(key);\n  if (pos \u003d\u003d position) {\n    this.keys.set(pos,key);\n    this.values.set(pos,value);\n  }\n else {\n    if (pos \u003e\u003d 0) {\n      this.keys.remove(pos);\n      this.values.remove(pos);\n    }\n    this.keys.add(position,key);\n    this.values.add(position,value);\n    rebuildIndex();\n  }\n}",
    "begin_line": 269,
    "end_line": 291,
    "comment": "/** \n * Inserts a new value at the specified position in the dataset or, if there is an existing item with the specified key, updates the value for that item and moves it to the specified position.\n * @param position  the position (in the range 0 to getItemCount()).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.rebuildIndex#297",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.rebuildIndex()",
    "snippet": "private void rebuildIndex(){\n  this.indexMap.clear();\n  for (int i\u003d0; i \u003c this.keys.size(); i++) {\n    final Object key\u003dthis.keys.get(i);\n    this.indexMap.put(key,new Integer(i));\n  }\n}",
    "begin_line": 297,
    "end_line": 303,
    "comment": "/** \n * Rebuilds the key to indexed-position mapping after an positioned insert or a remove operation.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.removeValue#314",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.removeValue(int)",
    "snippet": "public void removeValue(int index){\n  this.keys.remove(index);\n  this.values.remove(index);\n  rebuildIndex();\n}",
    "begin_line": 314,
    "end_line": 318,
    "comment": "/** \n * Removes a value from the collection.\n * @param index  the index of the item to remove (in the range\u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003egetItemCount() - 1\u003c/code\u003e).\n * @throws IndexOutOfBoundsException if \u003ccode\u003eindex\u003c/code\u003e is not withinthe specified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.removeValue#329",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.removeValue(java.lang.Comparable)",
    "snippet": "public void removeValue(Comparable key){\n  int index\u003dgetIndex(key);\n  if (index \u003c 0) {\n    throw new UnknownKeyException(\"The key (\" + key + \") is not recognised.\");\n  }\n  removeValue(index);\n}",
    "begin_line": 329,
    "end_line": 336,
    "comment": "/** \n * Removes a value from the collection.\n * @param key  the item key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n * @throws UnknownKeyException if \u003ccode\u003ekey\u003c/code\u003e is not recognised.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.clear#343",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.clear()",
    "snippet": "public void clear(){\n  this.keys.clear();\n  this.values.clear();\n  this.indexMap.clear();\n}",
    "begin_line": 343,
    "end_line": 347,
    "comment": "/** \n * Clears all values from the collection.\n * @since 1.0.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.sortByKeys#354",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.sortByKeys(org.jfree.chart.util.SortOrder)",
    "snippet": "public void sortByKeys(SortOrder order){\n  final int size\u003dthis.keys.size();\n  final DefaultKeyedValue[] data\u003dnew DefaultKeyedValue[size];\n  for (int i\u003d0; i \u003c size; i++) {\n    data[i]\u003dnew DefaultKeyedValue((Comparable)this.keys.get(i),(Number)this.values.get(i));\n  }\n  Comparator comparator\u003dnew KeyedValueComparator(KeyedValueComparatorType.BY_KEY,order);\n  Arrays.sort(data,comparator);\n  clear();\n  for (int i\u003d0; i \u003c data.length; i++) {\n    final DefaultKeyedValue value\u003ddata[i];\n    addValue(value.getKey(),value.getValue());\n  }\n}",
    "begin_line": 354,
    "end_line": 372,
    "comment": "/** \n * Sorts the items in the list by key.\n * @param order  the sort order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.sortByValues#381",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.sortByValues(org.jfree.chart.util.SortOrder)",
    "snippet": "public void sortByValues(SortOrder order){\n  final int size\u003dthis.keys.size();\n  final DefaultKeyedValue[] data\u003dnew DefaultKeyedValue[size];\n  for (int i\u003d0; i \u003c size; i++) {\n    data[i]\u003dnew DefaultKeyedValue((Comparable)this.keys.get(i),(Number)this.values.get(i));\n  }\n  Comparator comparator\u003dnew KeyedValueComparator(KeyedValueComparatorType.BY_VALUE,order);\n  Arrays.sort(data,comparator);\n  clear();\n  for (int i\u003d0; i \u003c data.length; i++) {\n    final DefaultKeyedValue value\u003ddata[i];\n    addValue(value.getKey(),value.getValue());\n  }\n}",
    "begin_line": 381,
    "end_line": 398,
    "comment": "/** \n * Sorts the items in the list by value.  If the list contains \u003ccode\u003enull\u003c/code\u003e values, they will sort to the end of the list, irrespective of the sort order.\n * @param order  the sort order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.equals#407",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof KeyedValues)) {\n    return false;\n  }\n  KeyedValues that\u003d(KeyedValues)obj;\n  int count\u003dgetItemCount();\n  if (count !\u003d that.getItemCount()) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c count; i++) {\n    Comparable k1\u003dgetKey(i);\n    Comparable k2\u003dthat.getKey(i);\n    if (!k1.equals(k2)) {\n      return false;\n    }\n    Number v1\u003dgetValue(i);\n    Number v2\u003dthat.getValue(i);\n    if (v1 \u003d\u003d null) {\n      if (v2 !\u003d null) {\n        return false;\n      }\n    }\n else {\n      if (!v1.equals(v2)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 407,
    "end_line": 442,
    "comment": "/** \n * Tests if this object is equal to another.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.hashCode#449",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.hashCode()",
    "snippet": "public int hashCode(){\n  return (this.keys !\u003d null ? this.keys.hashCode() : 0);\n}",
    "begin_line": 449,
    "end_line": 451,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultKeyedValues.clone#461",
    "is_bug": true,
    "src_path": "org/jfree/data/DefaultKeyedValues.java",
    "class_name": "org.jfree.data.DefaultKeyedValues",
    "signature": "org.jfree.data.DefaultKeyedValues.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DefaultKeyedValues clone\u003d(DefaultKeyedValues)super.clone();\n  clone.keys\u003d(ArrayList)this.keys.clone();\n  clone.values\u003d(ArrayList)this.values.clone();\n  clone.indexMap\u003d(HashMap)this.indexMap.clone();\n  return clone;\n}",
    "begin_line": 461,
    "end_line": 467,
    "comment": "/** \n * Returns a clone.\n * @return A clone.\n * @throws CloneNotSupportedException  this class will not throw thisexception, but subclasses might.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.Range#86",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.Range(double, double)",
    "snippet": "public Range(double lower,double upper){\n  if (lower \u003e upper) {\n    String msg\u003d\"Range(double, double): require lower (\" + lower + \") \u003c\u003d upper (\"+ upper+ \").\";\n    throw new IllegalArgumentException(msg);\n  }\n  this.lower\u003dlower;\n  this.upper\u003dupper;\n}",
    "begin_line": 86,
    "end_line": 94,
    "comment": "/** \n * Creates a new range.\n * @param lower  the lower bound (must be \u003c\u003d upper bound).\n * @param upper  the upper bound (must be \u003e\u003d lower bound).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.getLowerBound#101",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.getLowerBound()",
    "snippet": "public double getLowerBound(){\n  return this.lower;\n}",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Returns the lower bound for the range.\n * @return The lower bound.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.getUpperBound#110",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.getUpperBound()",
    "snippet": "public double getUpperBound(){\n  return this.upper;\n}",
    "begin_line": 110,
    "end_line": 112,
    "comment": "/** \n * Returns the upper bound for the range.\n * @return The upper bound.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.getLength#119",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.getLength()",
    "snippet": "public double getLength(){\n  return this.upper - this.lower;\n}",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Returns the length of the range.\n * @return The length.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.getCentralValue#128",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.getCentralValue()",
    "snippet": "public double getCentralValue(){\n  return this.lower / 2.0 + this.upper / 2.0;\n}",
    "begin_line": 128,
    "end_line": 130,
    "comment": "/** \n * Returns the central value for the range.\n * @return The central value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.contains#140",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.contains(double)",
    "snippet": "public boolean contains(double value){\n  return (value \u003e\u003d this.lower \u0026\u0026 value \u003c\u003d this.upper);\n}",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range contains the specified value and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param value  the value to lookup.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the range contains the specified value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.intersects#153",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.intersects(double, double)",
    "snippet": "public boolean intersects(double b0,double b1){\n  if (b0 \u003c\u003d this.lower) {\n    return (b1 \u003e this.lower);\n  }\n else {\n    return (b0 \u003c this.upper \u0026\u0026 b1 \u003e\u003d b0);\n  }\n}",
    "begin_line": 153,
    "end_line": 160,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range intersects with the specified range, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param b0  the lower bound (should be \u003c\u003d b1).\n * @param b1  the upper bound (should be \u003e\u003d b0).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.intersects#172",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.intersects(org.jfree.data.Range)",
    "snippet": "public boolean intersects(Range range){\n  return intersects(range.getLowerBound(),range.getUpperBound());\n}",
    "begin_line": 172,
    "end_line": 174,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the range intersects with the specified range, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param range  another range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A boolean.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.constrain#184",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.constrain(double)",
    "snippet": "public double constrain(double value){\n  double result\u003dvalue;\n  if (!contains(value)) {\n    if (value \u003e this.upper) {\n      result\u003dthis.upper;\n    }\n else     if (value \u003c this.lower) {\n      result\u003dthis.lower;\n    }\n  }\n  return result;\n}",
    "begin_line": 184,
    "end_line": 195,
    "comment": "/** \n * Returns the value within the range that is closest to the specified value.\n * @param value  the value.\n * @return The constrained value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.combine#213",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.combine(org.jfree.data.Range, org.jfree.data.Range)",
    "snippet": "public static Range combine(Range range1,Range range2){\n  if (range1 \u003d\u003d null) {\n    return range2;\n  }\n else {\n    if (range2 \u003d\u003d null) {\n      return range1;\n    }\n else {\n      double l\u003dMath.min(range1.getLowerBound(),range2.getLowerBound());\n      double u\u003dMath.max(range1.getUpperBound(),range2.getUpperBound());\n      return new Range(l,u);\n    }\n  }\n}",
    "begin_line": 213,
    "end_line": 229,
    "comment": "/** \n * Creates a new range by combining two existing ranges. \u003cP\u003e Note that: \u003cul\u003e \u003cli\u003eeither range can be \u003ccode\u003enull\u003c/code\u003e, in which case the other range is returned;\u003c/li\u003e \u003cli\u003eif both ranges are \u003ccode\u003enull\u003c/code\u003e the return value is \u003ccode\u003enull\u003c/code\u003e.\u003c/li\u003e \u003c/ul\u003e\n * @param range1  the first range (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param range2  the second range (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A new range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.expandToInclude#242",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.expandToInclude(org.jfree.data.Range, double)",
    "snippet": "public static Range expandToInclude(Range range,double value){\n  if (range \u003d\u003d null) {\n    return new Range(value,value);\n  }\n  if (value \u003c range.getLowerBound()) {\n    return new Range(value,range.getUpperBound());\n  }\n else   if (value \u003e range.getUpperBound()) {\n    return new Range(range.getLowerBound(),value);\n  }\n else {\n    return range;\n  }\n}",
    "begin_line": 242,
    "end_line": 255,
    "comment": "/** \n * Returns a range that includes all the values in the specified \u003ccode\u003erange\u003c/code\u003e AND the specified \u003ccode\u003evalue\u003c/code\u003e.\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param value  the value that must be included.\n * @return A range.\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.expand#268",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.expand(org.jfree.data.Range, double, double)",
    "snippet": "public static Range expand(Range range,double lowerMargin,double upperMargin){\n  if (range \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027range\u0027 argument.\");\n  }\n  double length\u003drange.getLength();\n  double lower\u003drange.getLowerBound() - length * lowerMargin;\n  double upper\u003drange.getUpperBound() + length * upperMargin;\n  if (lower \u003e upper) {\n    lower\u003dlower / 2.0 + upper / 2.0;\n    upper\u003dlower;\n  }\n  return new Range(lower,upper);\n}",
    "begin_line": 268,
    "end_line": 281,
    "comment": "/** \n * Creates a new range by adding margins to an existing range.\n * @param range  the range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param lowerMargin  the lower margin (expressed as a percentage of therange length).\n * @param upperMargin  the upper margin (expressed as a percentage of therange length).\n * @return The expanded range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.shift#291",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.shift(org.jfree.data.Range, double)",
    "snippet": "public static Range shift(Range base,double delta){\n  return shift(base,delta,false);\n}",
    "begin_line": 291,
    "end_line": 293,
    "comment": "/** \n * Shifts the range by the specified amount.\n * @param base  the base range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param delta  the shift amount.\n * @return A new range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.shift#306",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.shift(org.jfree.data.Range, double, boolean)",
    "snippet": "public static Range shift(Range base,double delta,boolean allowZeroCrossing){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  if (allowZeroCrossing) {\n    return new Range(base.getLowerBound() + delta,base.getUpperBound() + delta);\n  }\n else {\n    return new Range(shiftWithNoZeroCrossing(base.getLowerBound(),delta),shiftWithNoZeroCrossing(base.getUpperBound(),delta));\n  }\n}",
    "begin_line": 306,
    "end_line": 320,
    "comment": "/** \n * Shifts the range by the specified amount.\n * @param base  the base range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param delta  the shift amount.\n * @param allowZeroCrossing  a flag that determines whether or not thebounds of the range are allowed to cross zero after adjustment.\n * @return A new range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.shiftWithNoZeroCrossing#331",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.shiftWithNoZeroCrossing(double, double)",
    "snippet": "private static double shiftWithNoZeroCrossing(double value,double delta){\n  if (value \u003e 0.0) {\n    return Math.max(value + delta,0.0);\n  }\n else   if (value \u003c 0.0) {\n    return Math.min(value + delta,0.0);\n  }\n else {\n    return value + delta;\n  }\n}",
    "begin_line": 331,
    "end_line": 341,
    "comment": "/** \n * Returns the given \u003ccode\u003evalue\u003c/code\u003e adjusted by \u003ccode\u003edelta\u003c/code\u003e but with a check to prevent the result from crossing \u003ccode\u003e0.0\u003c/code\u003e.\n * @param value  the value.\n * @param delta  the adjustment.\n * @return The adjusted value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.scale#353",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.scale(org.jfree.data.Range, double)",
    "snippet": "public static Range scale(Range base,double factor){\n  if (base \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027base\u0027 argument.\");\n  }\n  if (factor \u003c 0) {\n    throw new IllegalArgumentException(\"Negative \u0027factor\u0027 argument.\");\n  }\n  return new Range(base.getLowerBound() * factor,base.getUpperBound() * factor);\n}",
    "begin_line": 353,
    "end_line": 362,
    "comment": "/** \n * Scales the range by the specified factor.\n * @param base the base range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param factor the scaling factor (must be non-negative).\n * @return A new range.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.equals#371",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (!(obj instanceof Range)) {\n    return false;\n  }\n  Range range\u003d(Range)obj;\n  if (!(this.lower \u003d\u003d range.lower)) {\n    return false;\n  }\n  if (!(this.upper \u003d\u003d range.upper)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 371,
    "end_line": 383,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.hashCode#390",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  long temp;\n  temp\u003dDouble.doubleToLongBits(this.lower);\n  result\u003d(int)(temp ^ (temp \u003e\u003e\u003e 32));\n  temp\u003dDouble.doubleToLongBits(this.upper);\n  result\u003d29 * result + (int)(temp ^ (temp \u003e\u003e\u003e 32));\n  return result;\n}",
    "begin_line": 390,
    "end_line": 398,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Range.toString#406",
    "is_bug": true,
    "src_path": "org/jfree/data/Range.java",
    "class_name": "org.jfree.data.Range",
    "signature": "org.jfree.data.Range.toString()",
    "snippet": "public String toString(){\n  return (\"Range[\" + this.lower + \",\"+ this.upper+ \"]\");\n}",
    "begin_line": 406,
    "end_line": 408,
    "comment": "/** \n * Returns a string representation of this Range.\n * @return A String \"Range[lower,upper]\" where lower\u003dlower range andupper\u003dupper range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RangeType.RangeType#74",
    "is_bug": true,
    "src_path": "org/jfree/data/RangeType.java",
    "class_name": "org.jfree.data.RangeType",
    "signature": "org.jfree.data.RangeType.RangeType(java.lang.String)",
    "snippet": "private RangeType(String name){\n  this.name\u003dname;\n}",
    "begin_line": 74,
    "end_line": 76,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RangeType.toString#83",
    "is_bug": true,
    "src_path": "org/jfree/data/RangeType.java",
    "class_name": "org.jfree.data.RangeType",
    "signature": "org.jfree.data.RangeType.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 83,
    "end_line": 85,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RangeType.equals#95",
    "is_bug": true,
    "src_path": "org/jfree/data/RangeType.java",
    "class_name": "org.jfree.data.RangeType",
    "signature": "org.jfree.data.RangeType.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof RangeType)) {\n    return false;\n  }\n  RangeType that\u003d(RangeType)obj;\n  if (!this.name.equals(that.toString())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 95,
    "end_line": 108,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RangeType.hashCode#115",
    "is_bug": true,
    "src_path": "org/jfree/data/RangeType.java",
    "class_name": "org.jfree.data.RangeType",
    "signature": "org.jfree.data.RangeType.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 115,
    "end_line": 117,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RangeType.readResolve#126",
    "is_bug": true,
    "src_path": "org/jfree/data/RangeType.java",
    "class_name": "org.jfree.data.RangeType",
    "signature": "org.jfree.data.RangeType.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(RangeType.FULL)) {\n    return RangeType.FULL;\n  }\n else   if (this.equals(RangeType.POSITIVE)) {\n    return RangeType.POSITIVE;\n  }\n else   if (this.equals(RangeType.NEGATIVE)) {\n    return RangeType.NEGATIVE;\n  }\n  return null;\n}",
    "begin_line": 126,
    "end_line": 137,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.AbstractDataset#92",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
    "snippet": "protected AbstractDataset(){\n  this.group\u003dnew DatasetGroup();\n  this.listenerList\u003dnew EventListenerList();\n}",
    "begin_line": 92,
    "end_line": 95,
    "comment": "/** \n * Constructs a dataset. By default, the dataset is assigned to its own group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.getGroup#104",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.getGroup()",
    "snippet": "public DatasetGroup getGroup(){\n  return this.group;\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Returns the dataset group for the dataset.\n * @return The group (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setGroup(DatasetGroup)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.setGroup#115",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.setGroup(org.jfree.data.general.DatasetGroup)",
    "snippet": "public void setGroup(DatasetGroup group){\n  if (group \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027group\u0027 argument.\");\n  }\n  this.group\u003dgroup;\n}",
    "begin_line": 115,
    "end_line": 120,
    "comment": "/** \n * Sets the dataset group for the dataset.\n * @param group  the group (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getGroup()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.addChangeListener#129",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener)",
    "snippet": "public void addChangeListener(DatasetChangeListener listener){\n  this.listenerList.add(DatasetChangeListener.class,listener);\n}",
    "begin_line": 129,
    "end_line": 131,
    "comment": "/** \n * Registers an object to receive notification of changes to the dataset.\n * @param listener  the object to register.\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.removeChangeListener#141",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.removeChangeListener(org.jfree.data.general.DatasetChangeListener)",
    "snippet": "public void removeChangeListener(DatasetChangeListener listener){\n  this.listenerList.remove(DatasetChangeListener.class,listener);\n}",
    "begin_line": 141,
    "end_line": 143,
    "comment": "/** \n * Deregisters an object so that it no longer receives notification of changes to the dataset.\n * @param listener  the object to deregister.\n * @see #addChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.hasListener#157",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.hasListener(java.util.EventListener)",
    "snippet": "public boolean hasListener(EventListener listener){\n  List list\u003dArrays.asList(this.listenerList.getListenerList());\n  return list.contains(listener);\n}",
    "begin_line": 157,
    "end_line": 160,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the specified object is registered with the dataset as a listener.  Most applications won\u0027t need to call this method, it exists mainly for use by unit testing code.\n * @param listener  the listener.\n * @return A boolean.\n * @see #addChangeListener(DatasetChangeListener)\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.fireDatasetChanged#167",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
    "snippet": "protected void fireDatasetChanged(){\n  notifyListeners(new DatasetChangeEvent(this,this));\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Notifies all registered listeners that the dataset has changed.\n * @see #addChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.notifyListeners#180",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
    "snippet": "protected void notifyListeners(DatasetChangeEvent event){\n  Object[] listeners\u003dthis.listenerList.getListenerList();\n  for (int i\u003dlisteners.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listeners[i] \u003d\u003d DatasetChangeListener.class) {\n      ((DatasetChangeListener)listeners[i + 1]).datasetChanged(event);\n    }\n  }\n}",
    "begin_line": 180,
    "end_line": 190,
    "comment": "/** \n * Notifies all registered listeners that the dataset has changed.\n * @param event  contains information about the event that triggered thenotification.\n * @see #addChangeListener(DatasetChangeListener)\n * @see #removeChangeListener(DatasetChangeListener)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.clone#202",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  AbstractDataset clone\u003d(AbstractDataset)super.clone();\n  clone.listenerList\u003dnew EventListenerList();\n  return clone;\n}",
    "begin_line": 202,
    "end_line": 206,
    "comment": "/** \n * Returns a clone of the dataset. The cloned dataset will NOT include the {@link DatasetChangeListener} references that have been registered withthis dataset.\n * @return A clone.\n * @throws CloneNotSupportedException  if the dataset does not supportcloning.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.writeObject#215",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.writeObject(java.io.ObjectOutputStream)",
    "snippet": "private void writeObject(ObjectOutputStream stream) throws IOException {\n  stream.defaultWriteObject();\n}",
    "begin_line": 215,
    "end_line": 217,
    "comment": "/** \n * Handles serialization.\n * @param stream  the output stream.\n * @throws IOException if there is an I/O problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.readObject#227",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.readObject(java.io.ObjectInputStream)",
    "snippet": "private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n  stream.defaultReadObject();\n  this.listenerList\u003dnew EventListenerList();\n  stream.registerValidation(this,10);\n}",
    "begin_line": 227,
    "end_line": 233,
    "comment": "/** \n * Restores a serialized object.\n * @param stream  the input stream.\n * @throws IOException if there is an I/O problem.\n * @throws ClassNotFoundException if there is a problem loading a class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractDataset.validateObject#252",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractDataset.java",
    "class_name": "org.jfree.data.general.AbstractDataset",
    "signature": "org.jfree.data.general.AbstractDataset.validateObject()",
    "snippet": "public void validateObject() throws InvalidObjectException {\n  fireDatasetChanged();\n}",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Validates the object. We use this opportunity to call listeners who have registered during the deserialization process, as listeners are not serialized. This method is called by the serialization system after the entire graph is read. This object has registered itself to the system with a priority of 10. Other callbacks may register with a higher priority number to be called before this object, or with a lower priority number to be called after the listeners were notified. All listeners are supposed to have register by now, either in their readObject or validateObject methods. Notify them that this dataset has changed.\n * @exception InvalidObjectException If the object cannot validate itself.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.AbstractSeriesDataset#62",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset()",
    "snippet": "protected AbstractSeriesDataset(){\n  super();\n}",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * Creates a new dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.getSeriesCount#71",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.getSeriesCount()",
    "snippet": "public abstract int getSeriesCount();",
    "begin_line": 71,
    "end_line": 71,
    "comment": "/** \n * Returns the number of series in the dataset.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.getSeriesKey#85",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.getSeriesKey(int)",
    "snippet": "public abstract Comparable getSeriesKey(int series);",
    "begin_line": 85,
    "end_line": 85,
    "comment": "/** \n * Returns the key for a series. \u003cp\u003e If \u003ccode\u003eseries\u003c/code\u003e is not within the specified range, the implementing method should throw an  {@link IndexOutOfBoundsException}(preferred) or an  {@link IllegalArgumentException}.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The series key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.indexOf#94",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.indexOf(java.lang.Comparable)",
    "snippet": "public int indexOf(Comparable seriesKey){\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    if (getSeriesKey(s).equals(seriesKey)) {\n      return s;\n    }\n  }\n  return -1;\n}",
    "begin_line": 94,
    "end_line": 102,
    "comment": "/** \n * Returns the index of the named series, or -1.\n * @param seriesKey  the series key (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractSeriesDataset.seriesChanged#109",
    "is_bug": true,
    "src_path": "org/jfree/data/general/AbstractSeriesDataset.java",
    "class_name": "org.jfree.data.general.AbstractSeriesDataset",
    "signature": "org.jfree.data.general.AbstractSeriesDataset.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
    "snippet": "public void seriesChanged(SeriesChangeEvent event){\n  fireDatasetChanged();\n}",
    "begin_line": 109,
    "end_line": 111,
    "comment": "/** \n * Called when a series belonging to the dataset changes.\n * @param event  information about the change.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetChangeEvent.DatasetChangeEvent#70",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetChangeEvent.java",
    "class_name": "org.jfree.data.general.DatasetChangeEvent",
    "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
    "snippet": "public DatasetChangeEvent(Object source,Dataset dataset){\n  super(source);\n  this.dataset\u003ddataset;\n}",
    "begin_line": 70,
    "end_line": 73,
    "comment": "/** \n * Constructs a new event.  The source is either the dataset or the {@link org.jfree.chart.plot.Plot} class.  The dataset can be\u003ccode\u003enull\u003c/code\u003e (in this case the source will be the {@link org.jfree.chart.plot.Plot} class).\n * @param source  the source of the event.\n * @param dataset  the dataset that generated the event (\u003ccode\u003enull\u003c/code\u003epermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetChangeEvent.getDataset#82",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetChangeEvent.java",
    "class_name": "org.jfree.data.general.DatasetChangeEvent",
    "signature": "org.jfree.data.general.DatasetChangeEvent.getDataset()",
    "snippet": "public Dataset getDataset(){\n  return this.dataset;\n}",
    "begin_line": 82,
    "end_line": 84,
    "comment": "/** \n * Returns the dataset that generated the event.  Note that the dataset may be \u003ccode\u003enull\u003c/code\u003e since adding a \u003ccode\u003enull\u003c/code\u003e dataset to a plot will generated a change event.\n * @return The dataset (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.DatasetGroup#62",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
    "snippet": "public DatasetGroup(){\n  super();\n  this.id\u003d\"NOID\";\n}",
    "begin_line": 62,
    "end_line": 65,
    "comment": "/** \n * Constructs a new group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.DatasetGroup#72",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup(java.lang.String)",
    "snippet": "public DatasetGroup(String id){\n  if (id \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027id\u0027 argument.\");\n  }\n  this.id\u003did;\n}",
    "begin_line": 72,
    "end_line": 77,
    "comment": "/** \n * Creates a new group with the specified id.\n * @param id  the identification for the group.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.getID#84",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.getID()",
    "snippet": "public String getID(){\n  return this.id;\n}",
    "begin_line": 84,
    "end_line": 86,
    "comment": "/** \n * Returns the identification string for this group.\n * @return The identification string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.clone#95",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 95,
    "end_line": 97,
    "comment": "/** \n * Clones the group.\n * @return A clone.\n * @throws CloneNotSupportedException not by this class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetGroup.equals#106",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetGroup.java",
    "class_name": "org.jfree.data.general.DatasetGroup",
    "signature": "org.jfree.data.general.DatasetGroup.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DatasetGroup)) {\n    return false;\n  }\n  DatasetGroup that\u003d(DatasetGroup)obj;\n  if (!this.id.equals(that.id)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 106,
    "end_line": 118,
    "comment": "/** \n * Tests this instance for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.DatasetUtilities#164",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.DatasetUtilities()",
    "snippet": "private DatasetUtilities(){\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Private constructor for non-instanceability.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.calculatePieDatasetTotal#177",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset)",
    "snippet": "public static double calculatePieDatasetTotal(PieDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  List keys\u003ddataset.getKeys();\n  double totalValue\u003d0;\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable current\u003d(Comparable)iterator.next();\n    if (current !\u003d null) {\n      Number value\u003ddataset.getValue(current);\n      double v\u003d0.0;\n      if (value !\u003d null) {\n        v\u003dvalue.doubleValue();\n      }\n      if (v \u003e 0) {\n        totalValue\u003dtotalValue + v;\n      }\n    }\n  }\n  return totalValue;\n}",
    "begin_line": 177,
    "end_line": 198,
    "comment": "/** \n * Calculates the total of all the values in a  {@link PieDataset}.  If the dataset contains negative or \u003ccode\u003enull\u003c/code\u003e values, they are ignored.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The total.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForRow#209",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(org.jfree.data.category.CategoryDataset, java.lang.Comparable)",
    "snippet": "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,Comparable rowKey){\n  int row\u003ddataset.getRowIndex(rowKey);\n  return createPieDatasetForRow(dataset,row);\n}",
    "begin_line": 209,
    "end_line": 213,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single row.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param rowKey  the row key.\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForRow#224",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(org.jfree.data.category.CategoryDataset, int)",
    "snippet": "public static PieDataset createPieDatasetForRow(CategoryDataset dataset,int row){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  int columnCount\u003ddataset.getColumnCount();\n  for (int current\u003d0; current \u003c columnCount; current++) {\n    Comparable columnKey\u003ddataset.getColumnKey(current);\n    result.setValue(columnKey,dataset.getValue(row,current));\n  }\n  return result;\n}",
    "begin_line": 224,
    "end_line": 233,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single row.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param row  the row (zero-based index).\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForColumn#244",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(org.jfree.data.category.CategoryDataset, java.lang.Comparable)",
    "snippet": "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,Comparable columnKey){\n  int column\u003ddataset.getColumnIndex(columnKey);\n  return createPieDatasetForColumn(dataset,column);\n}",
    "begin_line": 244,
    "end_line": 248,
    "comment": "/** \n * Creates a pie dataset from a table dataset by taking all the values for a single column.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param columnKey  the column key.\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createPieDatasetForColumn#259",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createPieDatasetForColumn(org.jfree.data.category.CategoryDataset, int)",
    "snippet": "public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,int column){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  int rowCount\u003ddataset.getRowCount();\n  for (int i\u003d0; i \u003c rowCount; i++) {\n    Comparable rowKey\u003ddataset.getRowKey(i);\n    result.setValue(rowKey,dataset.getValue(i,column));\n  }\n  return result;\n}",
    "begin_line": 259,
    "end_line": 268,
    "comment": "/** \n * Creates a pie dataset from a  {@link CategoryDataset} by taking all thevalues for a single column.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param column  the column (zero-based index).\n * @return A pie dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createConsolidatedPieDataset#283",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(org.jfree.data.general.PieDataset, java.lang.Comparable, double)",
    "snippet": "public static PieDataset createConsolidatedPieDataset(PieDataset source,Comparable key,double minimumPercent){\n  return DatasetUtilities.createConsolidatedPieDataset(source,key,minimumPercent,2);\n}",
    "begin_line": 283,
    "end_line": 287,
    "comment": "/** \n * Creates a new pie dataset based on the supplied dataset, but modified by aggregating all the low value items (those whose value is lower than the \u003ccode\u003epercentThreshold\u003c/code\u003e) into a single item with the key \"Other\".\n * @param source  the source dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  a new key for the aggregated items (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param minimumPercent  the percent threshold.\n * @return The pie dataset with (possibly) aggregated items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createConsolidatedPieDataset#304",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(org.jfree.data.general.PieDataset, java.lang.Comparable, double, int)",
    "snippet": "public static PieDataset createConsolidatedPieDataset(PieDataset source,Comparable key,double minimumPercent,int minItems){\n  DefaultPieDataset result\u003dnew DefaultPieDataset();\n  double total\u003dDatasetUtilities.calculatePieDatasetTotal(source);\n  List keys\u003dsource.getKeys();\n  ArrayList otherKeys\u003dnew ArrayList();\n  Iterator iterator\u003dkeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable currentKey\u003d(Comparable)iterator.next();\n    Number dataValue\u003dsource.getValue(currentKey);\n    if (dataValue !\u003d null) {\n      double value\u003ddataValue.doubleValue();\n      if (value / total \u003c minimumPercent) {\n        otherKeys.add(currentKey);\n      }\n    }\n  }\n  iterator\u003dkeys.iterator();\n  double otherValue\u003d0;\n  while (iterator.hasNext()) {\n    Comparable currentKey\u003d(Comparable)iterator.next();\n    Number dataValue\u003dsource.getValue(currentKey);\n    if (dataValue !\u003d null) {\n      if (otherKeys.contains(currentKey) \u0026\u0026 otherKeys.size() \u003e\u003d minItems) {\n        otherValue+\u003ddataValue.doubleValue();\n      }\n else {\n        result.setValue(currentKey,dataValue);\n      }\n    }\n  }\n  if (otherKeys.size() \u003e\u003d minItems) {\n    result.setValue(key,otherValue);\n  }\n  return result;\n}",
    "begin_line": 304,
    "end_line": 348,
    "comment": "/** \n * Creates a new pie dataset based on the supplied dataset, but modified by aggregating all the low value items (those whose value is lower than the \u003ccode\u003epercentThreshold\u003c/code\u003e) into a single item.  The aggregated items are assigned the specified key.  Aggregation only occurs if there are at least \u003ccode\u003eminItems\u003c/code\u003e items to aggregate.\n * @param source  the source dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param key  the key to represent the aggregated items.\n * @param minimumPercent  the percent threshold (ten percent is 0.10).\n * @param minItems  only aggregate low values if there are at least thismany.\n * @return The pie dataset with (possibly) aggregated items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#364",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, double[][])",
    "snippet": "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,String columnKeyPrefix,double[][] data){\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    String rowKey\u003drowKeyPrefix + (r + 1);\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      String columnKey\u003dcolumnKeyPrefix + (c + 1);\n      result.addValue(new Double(data[r][c]),rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 364,
    "end_line": 377,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data in anarray (instances of \u003ccode\u003eDouble\u003c/code\u003e are created to represent the data items). \u003cp\u003e Row and column keys are created by appending 0, 1, 2, ... to the supplied prefixes.\n * @param rowKeyPrefix  the row key prefix.\n * @param columnKeyPrefix  the column key prefix.\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#392",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])",
    "snippet": "public static CategoryDataset createCategoryDataset(String rowKeyPrefix,String columnKeyPrefix,Number[][] data){\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    String rowKey\u003drowKeyPrefix + (r + 1);\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      String columnKey\u003dcolumnKeyPrefix + (c + 1);\n      result.addValue(data[r][c],rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 392,
    "end_line": 405,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data inan array. \u003cp\u003e Row and column keys are created by appending 0, 1, 2, ... to the supplied prefixes.\n * @param rowKeyPrefix  the row key prefix.\n * @param columnKeyPrefix  the column key prefix.\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#420",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.Comparable[], java.lang.Comparable[], double[][])",
    "snippet": "public static CategoryDataset createCategoryDataset(Comparable[] rowKeys,Comparable[] columnKeys,double[][] data){\n  if (rowKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowKeys\u0027 argument.\");\n  }\n  if (columnKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027columnKeys\u0027 argument.\");\n  }\n  if (ArrayUtilities.hasDuplicateItems(rowKeys)) {\n    throw new IllegalArgumentException(\"Duplicate items in \u0027rowKeys\u0027.\");\n  }\n  if (ArrayUtilities.hasDuplicateItems(columnKeys)) {\n    throw new IllegalArgumentException(\"Duplicate items in \u0027columnKeys\u0027.\");\n  }\n  if (rowKeys.length !\u003d data.length) {\n    throw new IllegalArgumentException(\"The number of row keys does not match the number of rows in \" + \"the data array.\");\n  }\n  int columnCount\u003d0;\n  for (int r\u003d0; r \u003c data.length; r++) {\n    columnCount\u003dMath.max(columnCount,data[r].length);\n  }\n  if (columnKeys.length !\u003d columnCount) {\n    throw new IllegalArgumentException(\"The number of column keys does not match the number of \" + \"columns in the data array.\");\n  }\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int r\u003d0; r \u003c data.length; r++) {\n    Comparable rowKey\u003drowKeys[r];\n    for (int c\u003d0; c \u003c data[r].length; c++) {\n      Comparable columnKey\u003dcolumnKeys[c];\n      result.addValue(new Double(data[r][c]),rowKey,columnKey);\n    }\n  }\n  return result;\n}",
    "begin_line": 420,
    "end_line": 463,
    "comment": "/** \n * Creates a  {@link CategoryDataset} that contains a copy of the data inan array (instances of \u003ccode\u003eDouble\u003c/code\u003e are created to represent the data items). \u003cp\u003e Row and column keys are taken from the supplied arrays.\n * @param rowKeys  the row keys (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param columnKeys  the column keys (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param data  the data.\n * @return The dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.createCategoryDataset#474",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.Comparable, org.jfree.data.KeyedValues)",
    "snippet": "public static CategoryDataset createCategoryDataset(Comparable rowKey,KeyedValues rowData){\n  if (rowKey \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowKey\u0027 argument.\");\n  }\n  if (rowData \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027rowData\u0027 argument.\");\n  }\n  DefaultCategoryDataset result\u003dnew DefaultCategoryDataset();\n  for (int i\u003d0; i \u003c rowData.getItemCount(); i++) {\n    result.addValue(rowData.getValue(i),rowKey,rowData.getKey(i));\n  }\n  return result;\n}",
    "begin_line": 474,
    "end_line": 489,
    "comment": "/** \n * Creates a  {@link CategoryDataset} by copying the data from the supplied{@link KeyedValues} instance.\n * @param rowKey  the row key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param rowData  the row data (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.sampleFunction2D#504",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.sampleFunction2D(org.jfree.data.function.Function2D, double, double, int, java.lang.Comparable)",
    "snippet": "public static XYDataset sampleFunction2D(Function2D f,double start,double end,int samples,Comparable seriesKey){\n  XYSeries series\u003dsampleFunction2DToSeries(f,start,end,samples,seriesKey);\n  XYSeriesCollection collection\u003dnew XYSeriesCollection(series);\n  return collection;\n}",
    "begin_line": 504,
    "end_line": 512,
    "comment": "/** \n * Creates an  {@link XYDataset} by sampling the specified function over afixed range.\n * @param f  the function (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param start  the start value for the range.\n * @param end  the end value for the range.\n * @param samples  the number of sample points (must be \u003e 1).\n * @param seriesKey  the key to give the resulting series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.sampleFunction2DToSeries#529",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.sampleFunction2DToSeries(org.jfree.data.function.Function2D, double, double, int, java.lang.Comparable)",
    "snippet": "public static XYSeries sampleFunction2DToSeries(Function2D f,double start,double end,int samples,Comparable seriesKey){\n  if (f \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027f\u0027 argument.\");\n  }\n  if (seriesKey \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027seriesKey\u0027 argument.\");\n  }\n  if (start \u003e\u003d end) {\n    throw new IllegalArgumentException(\"Requires \u0027start\u0027 \u003c \u0027end\u0027.\");\n  }\n  if (samples \u003c 2) {\n    throw new IllegalArgumentException(\"Requires \u0027samples\u0027 \u003e 1\");\n  }\n  XYSeries series\u003dnew XYSeries(seriesKey);\n  double step\u003d(end - start) / (samples - 1);\n  for (int i\u003d0; i \u003c samples; i++) {\n    double x\u003dstart + (step * i);\n    series.add(x,f.getValue(x));\n  }\n  return series;\n}",
    "begin_line": 529,
    "end_line": 552,
    "comment": "/** \n * Creates an  {@link XYSeries} by sampling the specified function over afixed range.\n * @param f  the function (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param start  the start value for the range.\n * @param end  the end value for the range.\n * @param samples  the number of sample points (must be \u003e 1).\n * @param seriesKey  the key to give the resulting series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A series.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#562",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.general.PieDataset)",
    "snippet": "public static boolean isEmptyOrNull(PieDataset dataset){\n  if (dataset \u003d\u003d null) {\n    return true;\n  }\n  int itemCount\u003ddataset.getItemCount();\n  if (itemCount \u003d\u003d 0) {\n    return true;\n  }\n  for (int item\u003d0; item \u003c itemCount; item++) {\n    Number y\u003ddataset.getValue(item);\n    if (y !\u003d null) {\n      double yy\u003dy.doubleValue();\n      if (yy \u003e 0.0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 562,
    "end_line": 585,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#595",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static boolean isEmptyOrNull(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    return true;\n  }\n  int rowCount\u003ddataset.getRowCount();\n  int columnCount\u003ddataset.getColumnCount();\n  if (rowCount \u003d\u003d 0 || columnCount \u003d\u003d 0) {\n    return true;\n  }\n  for (int r\u003d0; r \u003c rowCount; r++) {\n    for (int c\u003d0; c \u003c columnCount; c++) {\n      if (dataset.getValue(r,c) !\u003d null) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 595,
    "end_line": 618,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.isEmptyOrNull#628",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.isEmptyOrNull(org.jfree.data.xy.XYDataset)",
    "snippet": "public static boolean isEmptyOrNull(XYDataset dataset){\n  if (dataset !\u003d null) {\n    for (int s\u003d0; s \u003c dataset.getSeriesCount(); s++) {\n      if (dataset.getItemCount(s) \u003e 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 628,
    "end_line": 637,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the dataset is empty (or \u003ccode\u003enull\u003c/code\u003e), and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#646",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Range findDomainBounds(XYDataset dataset){\n  return findDomainBounds(dataset,true);\n}",
    "begin_line": 646,
    "end_line": 648,
    "comment": "/** \n * Returns the range of values in the domain (x-values) of a dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range of values (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#660",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "public static Range findDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    result\u003dinfo.getDomainBounds(includeInterval);\n  }\n else {\n    result\u003diterateDomainBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 660,
    "end_line": 678,
    "comment": "/** \n * Returns the range of values in the domain (x-values) of a dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  determines whether or not the x-interval is takeninto account (only applies if the dataset is an {@link IntervalXYDataset}).\n * @return The range of values (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findDomainBounds#695",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, java.util.List, boolean)",
    "snippet": "public static Range findDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof XYDomainInfo) {\n    XYDomainInfo info\u003d(XYDomainInfo)dataset;\n    result\u003dinfo.getDomainBounds(visibleSeriesKeys,includeInterval);\n  }\n else {\n    result\u003diterateToFindDomainBounds(dataset,visibleSeriesKeys,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 695,
    "end_line": 710,
    "comment": "/** \n * Returns the bounds of the x-values in the specified \u003ccode\u003edataset\u003c/code\u003e taking into account only the visible series and including any x-interval if requested.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003enot permitted).\n * @param includeInterval  include the x-interval (if any)?\n * @return The bounds (or \u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateDomainBounds#722",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Range iterateDomainBounds(XYDataset dataset){\n  return iterateDomainBounds(dataset,true);\n}",
    "begin_line": 722,
    "end_line": 724,
    "comment": "/** \n * Iterates over the items in an  {@link XYDataset} to findthe range of x-values.  If the dataset is an instance of {@link IntervalXYDataset}, the starting and ending x-values will be used for the bounds calculation.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateDomainBounds#737",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "public static Range iterateDomainBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int seriesCount\u003ddataset.getSeriesCount();\n  double lvalue;\n  double uvalue;\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        lvalue\u003dintervalXYData.getStartXValue(series,item);\n        uvalue\u003dintervalXYData.getEndXValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        lvalue\u003ddataset.getXValue(series,item);\n        uvalue\u003dlvalue;\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n  if (minimum \u003e maximum) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 737,
    "end_line": 782,
    "comment": "/** \n * Iterates over the items in an  {@link XYDataset} to findthe range of x-values.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines, for an{@link IntervalXYDataset}, whether the x-interval or just the x-value is used to determine the overall range.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#791",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset){\n  return findRangeBounds(dataset,true);\n}",
    "begin_line": 791,
    "end_line": 793,
    "comment": "/** \n * Returns the range of values in the range for the dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#804",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(includeInterval);\n  }\n else {\n    result\u003diterateRangeBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 804,
    "end_line": 818,
    "comment": "/** \n * Returns the range of values in the range for the dataset.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#834",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset, java.util.List, boolean)",
    "snippet": "public static Range findRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof CategoryRangeInfo) {\n    CategoryRangeInfo info\u003d(CategoryRangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(visibleSeriesKeys,includeInterval);\n  }\n else {\n    result\u003diterateToFindRangeBounds(dataset,visibleSeriesKeys,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 834,
    "end_line": 849,
    "comment": "/** \n * Finds the bounds of the y-values in the specified dataset, including only those series that are listed in visibleSeriesKeys.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the keys for the visible series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  include the y-interval (if the dataset has ay-interval).\n * @return The data bounds.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#859",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Range findRangeBounds(XYDataset dataset){\n  return findRangeBounds(dataset,true);\n}",
    "begin_line": 859,
    "end_line": 861,
    "comment": "/** \n * Returns the range of values in the range for the dataset.  This method is the partner for the  {@link #findDomainBounds(XYDataset)} method.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#874",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "public static Range findRangeBounds(XYDataset dataset,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(includeInterval);\n  }\n else {\n    result\u003diterateRangeBounds(dataset,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 874,
    "end_line": 888,
    "comment": "/** \n * Returns the range of values in the range for the dataset.  This method is the partner for the  {@link #findDomainBounds(XYDataset,boolean)}method.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findRangeBounds#906",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset, java.util.List, org.jfree.data.Range, boolean)",
    "snippet": "public static Range findRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  if (dataset instanceof XYRangeInfo) {\n    XYRangeInfo info\u003d(XYRangeInfo)dataset;\n    result\u003dinfo.getRangeBounds(visibleSeriesKeys,xRange,includeInterval);\n  }\n else {\n    result\u003diterateToFindRangeBounds(dataset,visibleSeriesKeys,xRange,includeInterval);\n  }\n  return result;\n}",
    "begin_line": 906,
    "end_line": 922,
    "comment": "/** \n * Finds the bounds of the y-values in the specified dataset, including only those series that are listed in visibleSeriesKeys, and those items whose x-values fall within the specified range.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the keys for the visible series(\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param xRange  the x-range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  include the y-interval (if the dataset has ay-interval).\n * @return The data bounds.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateCategoryRangeBounds#937",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
    "snippet": "public static Range iterateCategoryRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  return iterateRangeBounds(dataset,includeInterval);\n}",
    "begin_line": 937,
    "end_line": 940,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @deprecated As of 1.0.10, use{@link #iterateRangeBounds(CategoryDataset,boolean)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#952",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Range iterateRangeBounds(CategoryDataset dataset){\n  return iterateRangeBounds(dataset,true);\n}",
    "begin_line": 952,
    "end_line": 954,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#968",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
    "snippet": "public static Range iterateRangeBounds(CategoryDataset dataset,boolean includeInterval){\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int rowCount\u003ddataset.getRowCount();\n  int columnCount\u003ddataset.getColumnCount();\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalCategoryDataset) {\n    IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n    Number lvalue, uvalue;\n    for (int row\u003d0; row \u003c rowCount; row++) {\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        lvalue\u003dicd.getStartValue(row,column);\n        uvalue\u003dicd.getEndValue(row,column);\n        if (lvalue !\u003d null \u0026\u0026 !Double.isNaN(lvalue.doubleValue())) {\n          minimum\u003dMath.min(minimum,lvalue.doubleValue());\n        }\n        if (uvalue !\u003d null \u0026\u0026 !Double.isNaN(uvalue.doubleValue())) {\n          maximum\u003dMath.max(maximum,uvalue.doubleValue());\n        }\n      }\n    }\n  }\n else {\n    for (int row\u003d0; row \u003c rowCount; row++) {\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number value\u003ddataset.getValue(row,column);\n        if (value !\u003d null) {\n          double v\u003dvalue.doubleValue();\n          if (!Double.isNaN(v)) {\n            minimum\u003dMath.min(minimum,v);\n            maximum\u003dMath.max(maximum,v);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 968,
    "end_line": 1013,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindRangeBounds#1028",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset, java.util.List, boolean)",
    "snippet": "public static Range iterateToFindRangeBounds(CategoryDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int columnCount\u003ddataset.getColumnCount();\n  if (includeInterval \u0026\u0026 dataset instanceof BoxAndWhiskerCategoryDataset) {\n    BoxAndWhiskerCategoryDataset bx\u003d(BoxAndWhiskerCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      int itemCount\u003ddataset.getColumnCount();\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number lvalue\u003dbx.getMinRegularValue(series,item);\n        if (lvalue \u003d\u003d null) {\n          lvalue\u003dbx.getValue(series,item);\n        }\n        Number uvalue\u003dbx.getMaxRegularValue(series,item);\n        if (uvalue \u003d\u003d null) {\n          uvalue\u003dbx.getValue(series,item);\n        }\n        if (lvalue !\u003d null) {\n          minimum\u003dMath.min(minimum,lvalue.doubleValue());\n        }\n        if (uvalue !\u003d null) {\n          maximum\u003dMath.max(maximum,uvalue.doubleValue());\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof IntervalCategoryDataset) {\n    IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n    Number lvalue, uvalue;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        lvalue\u003dicd.getStartValue(series,column);\n        uvalue\u003dicd.getEndValue(series,column);\n        if (lvalue !\u003d null \u0026\u0026 !Double.isNaN(lvalue.doubleValue())) {\n          minimum\u003dMath.min(minimum,lvalue.doubleValue());\n        }\n        if (uvalue !\u003d null \u0026\u0026 !Double.isNaN(uvalue.doubleValue())) {\n          maximum\u003dMath.max(maximum,uvalue.doubleValue());\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof MultiValueCategoryDataset) {\n    MultiValueCategoryDataset mvcd\u003d(MultiValueCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        List values\u003dmvcd.getValues(series,column);\n        Iterator valueIterator\u003dvalues.iterator();\n        while (valueIterator.hasNext()) {\n          Object o\u003dvalueIterator.next();\n          if (o instanceof Number) {\n            double v\u003d((Number)o).doubleValue();\n            if (!Double.isNaN(v)) {\n              minimum\u003dMath.min(minimum,v);\n              maximum\u003dMath.max(maximum,v);\n            }\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof StatisticalCategoryDataset) {\n    StatisticalCategoryDataset scd\u003d(StatisticalCategoryDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number meanN\u003dscd.getMeanValue(series,column);\n        if (meanN !\u003d null) {\n          double std\u003d0.0;\n          Number stdN\u003dscd.getStdDevValue(series,column);\n          if (stdN !\u003d null) {\n            std\u003dstdN.doubleValue();\n            if (Double.isNaN(std)) {\n              std\u003d0.0;\n            }\n          }\n          double mean\u003dmeanN.doubleValue();\n          if (!Double.isNaN(mean)) {\n            minimum\u003dMath.min(minimum,mean - std);\n            maximum\u003dMath.max(maximum,mean + std);\n          }\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.getRowIndex(seriesKey);\n      for (int column\u003d0; column \u003c columnCount; column++) {\n        Number value\u003ddataset.getValue(series,column);\n        if (value !\u003d null) {\n          double v\u003dvalue.doubleValue();\n          if (!Double.isNaN(v)) {\n            minimum\u003dMath.min(minimum,v);\n            maximum\u003dMath.max(maximum,v);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1028,
    "end_line": 1172,
    "comment": "/** \n * Iterates over the data item of the category dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @param visibleSeriesKeys  the visible series keys.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateXYRangeBounds#1184",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateXYRangeBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Range iterateXYRangeBounds(XYDataset dataset){\n  return iterateRangeBounds(dataset);\n}",
    "begin_line": 1184,
    "end_line": 1186,
    "comment": "/** \n * Iterates over the data item of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @deprecated As of 1.0.10, use {@link #iterateRangeBounds(XYDataset)}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#1198",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Range iterateRangeBounds(XYDataset dataset){\n  return iterateRangeBounds(dataset,true);\n}",
    "begin_line": 1198,
    "end_line": 1200,
    "comment": "/** \n * Iterates over the data item of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateRangeBounds#1215",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "public static Range iterateRangeBounds(XYDataset dataset,boolean includeInterval){\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int seriesCount\u003ddataset.getSeriesCount();\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dixyd.getStartYValue(series,item);\n        double uvalue\u003dixyd.getEndYValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof OHLCDataset) {\n    OHLCDataset ohlc\u003d(OHLCDataset)dataset;\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dohlc.getLowValue(series,item);\n        double uvalue\u003dohlc.getHighValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value\u003ddataset.getYValue(series,item);\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1215,
    "end_line": 1275,
    "comment": "/** \n * Iterates over the data items of the xy dataset to find the range bounds.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines, for an{@link IntervalXYDataset}, whether the y-interval or just the y-value is used to determine the overall range.\n * @return The range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindDomainBounds#1292",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds(org.jfree.data.xy.XYDataset, java.util.List, boolean)",
    "snippet": "public static Range iterateToFindDomainBounds(XYDataset dataset,List visibleSeriesKeys,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double lvalue\u003dixyd.getStartXValue(series,item);\n        double uvalue\u003dixyd.getEndXValue(series,item);\n        if (!Double.isNaN(lvalue)) {\n          minimum\u003dMath.min(minimum,lvalue);\n        }\n        if (!Double.isNaN(uvalue)) {\n          maximum\u003dMath.max(maximum,uvalue);\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003ddataset.getXValue(series,item);\n        if (!Double.isNaN(x)) {\n          minimum\u003dMath.min(minimum,x);\n          maximum\u003dMath.max(maximum,x);\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1292,
    "end_line": 1349,
    "comment": "/** \n * Returns the range of x-values in the specified dataset for the data items belonging to the visible series.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).\n * @return The x-range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.iterateToFindRangeBounds#1368",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(org.jfree.data.xy.XYDataset, java.util.List, org.jfree.data.Range, boolean)",
    "snippet": "public static Range iterateToFindRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (visibleSeriesKeys \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027visibleSeriesKeys\u0027 argument.\");\n  }\n  if (xRange \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027xRange\u0027 argument\");\n  }\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  if (includeInterval \u0026\u0026 dataset instanceof OHLCDataset) {\n    OHLCDataset ohlc\u003d(OHLCDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dohlc.getXValue(series,item);\n        if (xRange.contains(x)) {\n          double lvalue\u003dohlc.getLowValue(series,item);\n          double uvalue\u003dohlc.getHighValue(series,item);\n          if (!Double.isNaN(lvalue)) {\n            minimum\u003dMath.min(minimum,lvalue);\n          }\n          if (!Double.isNaN(uvalue)) {\n            maximum\u003dMath.max(maximum,uvalue);\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof BoxAndWhiskerXYDataset) {\n    BoxAndWhiskerXYDataset bx\u003d(BoxAndWhiskerXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dbx.getXValue(series,item);\n        if (xRange.contains(x)) {\n          Number lvalue\u003dbx.getMinRegularValue(series,item);\n          Number uvalue\u003dbx.getMaxRegularValue(series,item);\n          if (lvalue !\u003d null) {\n            minimum\u003dMath.min(minimum,lvalue.doubleValue());\n          }\n          if (uvalue !\u003d null) {\n            maximum\u003dMath.max(maximum,uvalue.doubleValue());\n          }\n        }\n      }\n    }\n  }\n else   if (includeInterval \u0026\u0026 dataset instanceof IntervalXYDataset) {\n    IntervalXYDataset ixyd\u003d(IntervalXYDataset)dataset;\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003dixyd.getXValue(series,item);\n        if (xRange.contains(x)) {\n          double lvalue\u003dixyd.getStartYValue(series,item);\n          double uvalue\u003dixyd.getEndYValue(series,item);\n          if (!Double.isNaN(lvalue)) {\n            minimum\u003dMath.min(minimum,lvalue);\n          }\n          if (!Double.isNaN(uvalue)) {\n            maximum\u003dMath.max(maximum,uvalue);\n          }\n        }\n      }\n    }\n  }\n else {\n    Iterator iterator\u003dvisibleSeriesKeys.iterator();\n    while (iterator.hasNext()) {\n      Comparable seriesKey\u003d(Comparable)iterator.next();\n      int series\u003ddataset.indexOf(seriesKey);\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double x\u003ddataset.getXValue(series,item);\n        double y\u003ddataset.getYValue(series,item);\n        if (xRange.contains(x)) {\n          if (!Double.isNaN(y)) {\n            minimum\u003dMath.min(minimum,y);\n            maximum\u003dMath.max(maximum,y);\n          }\n        }\n      }\n    }\n  }\n  if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n    return null;\n  }\n else {\n    return new Range(minimum,maximum);\n  }\n}",
    "begin_line": 1368,
    "end_line": 1480,
    "comment": "/** \n * Returns the range of y-values in the specified dataset for the data items belonging to the visible series and with x-values in the given range.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param visibleSeriesKeys  the visible series keys (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param xRange  the x-range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  a flag that determines whether or not they-interval for the dataset is included (this only applies if the dataset is an instance of IntervalXYDataset).\n * @return The y-range (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumDomainValue#1495",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumDomainValue(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Number findMinimumDomainValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    return new Double(info.getDomainLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getStartXValue(series,item);\n        }\n else {\n          value\u003ddataset.getXValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      result\u003dnull;\n    }\n else {\n      result\u003dnew Double(minimum);\n    }\n  }\n  return result;\n}",
    "begin_line": 1495,
    "end_line": 1536,
    "comment": "/** \n * Finds the minimum domain (or X) value for the specified dataset.  This is easy if the dataset implements the  {@link DomainInfo} interface (agood idea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set. \u003cp\u003e Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumDomainValue#1550",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Number findMaximumDomainValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  if (dataset instanceof DomainInfo) {\n    DomainInfo info\u003d(DomainInfo)dataset;\n    return new Double(info.getDomainUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getEndXValue(series,item);\n        }\n else {\n          value\u003ddataset.getXValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      result\u003dnull;\n    }\n else {\n      result\u003dnew Double(maximum);\n    }\n  }\n  return result;\n}",
    "begin_line": 1550,
    "end_line": 1593,
    "comment": "/** \n * Returns the maximum domain value for the specified dataset.  This is easy if the dataset implements the  {@link DomainInfo} interface (a goodidea if there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumRangeValue#1607",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Number findMinimumRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getRowCount();\n    int itemCount\u003ddataset.getColumnCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number value;\n        if (dataset instanceof IntervalCategoryDataset) {\n          IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n          value\u003dicd.getStartValue(series,item);\n        }\n else {\n          value\u003ddataset.getValue(series,item);\n        }\n        if (value !\u003d null) {\n          minimum\u003dMath.min(minimum,value.doubleValue());\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(minimum);\n    }\n  }\n}",
    "begin_line": 1607,
    "end_line": 1648,
    "comment": "/** \n * Returns the minimum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumRangeValue#1662",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Number findMinimumRangeValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeLowerBound(true));\n  }\n else {\n    double minimum\u003dDouble.POSITIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getStartYValue(series,item);\n        }\n else         if (dataset instanceof OHLCDataset) {\n          OHLCDataset highLowData\u003d(OHLCDataset)dataset;\n          value\u003dhighLowData.getLowValue(series,item);\n        }\n else {\n          value\u003ddataset.getYValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          minimum\u003dMath.min(minimum,value);\n        }\n      }\n    }\n    if (minimum \u003d\u003d Double.POSITIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(minimum);\n    }\n  }\n}",
    "begin_line": 1662,
    "end_line": 1710,
    "comment": "/** \n * Returns the minimum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the minimum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values in the dataset are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumRangeValue#1723",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Number findMaximumRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getRowCount();\n    int itemCount\u003ddataset.getColumnCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        Number value;\n        if (dataset instanceof IntervalCategoryDataset) {\n          IntervalCategoryDataset icd\u003d(IntervalCategoryDataset)dataset;\n          value\u003dicd.getEndValue(series,item);\n        }\n else {\n          value\u003ddataset.getValue(series,item);\n        }\n        if (value !\u003d null) {\n          maximum\u003dMath.max(maximum,value.doubleValue());\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(maximum);\n    }\n  }\n}",
    "begin_line": 1723,
    "end_line": 1766,
    "comment": "/** \n * Returns the maximum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a good ideaif there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumRangeValue#1779",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(org.jfree.data.xy.XYDataset)",
    "snippet": "public static Number findMaximumRangeValue(XYDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  if (dataset instanceof RangeInfo) {\n    RangeInfo info\u003d(RangeInfo)dataset;\n    return new Double(info.getRangeUpperBound(true));\n  }\n else {\n    double maximum\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      int itemCount\u003ddataset.getItemCount(series);\n      for (int item\u003d0; item \u003c itemCount; item++) {\n        double value;\n        if (dataset instanceof IntervalXYDataset) {\n          IntervalXYDataset intervalXYData\u003d(IntervalXYDataset)dataset;\n          value\u003dintervalXYData.getEndYValue(series,item);\n        }\n else         if (dataset instanceof OHLCDataset) {\n          OHLCDataset highLowData\u003d(OHLCDataset)dataset;\n          value\u003dhighLowData.getHighValue(series,item);\n        }\n else {\n          value\u003ddataset.getYValue(series,item);\n        }\n        if (!Double.isNaN(value)) {\n          maximum\u003dMath.max(maximum,value);\n        }\n      }\n    }\n    if (maximum \u003d\u003d Double.NEGATIVE_INFINITY) {\n      return null;\n    }\n else {\n      return new Double(maximum);\n    }\n  }\n}",
    "begin_line": 1779,
    "end_line": 1826,
    "comment": "/** \n * Returns the maximum range value for the specified dataset.  This is easy if the dataset implements the  {@link RangeInfo} interface (a goodidea if there is an efficient way to determine the maximum value). Otherwise, it involves iterating over the entire data-set.  Returns \u003ccode\u003enull\u003c/code\u003e if all the data values are \u003ccode\u003enull\u003c/code\u003e.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1836",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset){\n  return findStackedRangeBounds(dataset,0.0);\n}",
    "begin_line": 1836,
    "end_line": 1838,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1849",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, double)",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset,double base){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Range result\u003dnull;\n  double minimum\u003dDouble.POSITIVE_INFINITY;\n  double maximum\u003dDouble.NEGATIVE_INFINITY;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double positive\u003dbase;\n    double negative\u003dbase;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          positive\u003dpositive + value;\n        }\n        if (value \u003c 0.0) {\n          negative\u003dnegative + value;\n        }\n      }\n    }\n    minimum\u003dMath.min(minimum,negative);\n    maximum\u003dMath.max(maximum,positive);\n  }\n  if (minimum \u003c\u003d maximum) {\n    result\u003dnew Range(minimum,maximum);\n  }\n  return result;\n}",
    "begin_line": 1849,
    "end_line": 1883,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param base  the base value for the bars.\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#1895",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, org.jfree.data.KeyToGroupMap)",
    "snippet": "public static Range findStackedRangeBounds(CategoryDataset dataset,KeyToGroupMap map){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  boolean hasValidData\u003dfalse;\n  Range result\u003dnull;\n  int[] groupIndex\u003dnew int[dataset.getRowCount()];\n  for (int i\u003d0; i \u003c dataset.getRowCount(); i++) {\n    groupIndex[i]\u003dmap.getGroupIndex(map.getGroup(dataset.getRowKey(i)));\n  }\n  int groupCount\u003dmap.getGroupCount();\n  double[] minimum\u003dnew double[groupCount];\n  double[] maximum\u003dnew double[groupCount];\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double[] positive\u003dnew double[groupCount];\n    double[] negative\u003dnew double[groupCount];\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          positive[groupIndex[series]]\u003dpositive[groupIndex[series]] + value;\n        }\n        if (value \u003c 0.0) {\n          negative[groupIndex[series]]\u003dnegative[groupIndex[series]] + value;\n        }\n      }\n    }\n    for (int g\u003d0; g \u003c groupCount; g++) {\n      minimum[g]\u003dMath.min(minimum[g],negative[g]);\n      maximum[g]\u003dMath.max(maximum[g],positive[g]);\n    }\n  }\n  if (hasValidData) {\n    for (int j\u003d0; j \u003c groupCount; j++) {\n      result\u003dRange.combine(result,new Range(minimum[j],maximum[j]));\n    }\n  }\n  return result;\n}",
    "begin_line": 1895,
    "end_line": 1948,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range (y-values), assuming that the series in one category are stacked.\n * @param dataset  the dataset.\n * @param map  a structure that maps series to groups.\n * @return The value range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMinimumStackedRangeValue#1960",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Number findMinimumStackedRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  boolean hasValidData\u003dfalse;\n  double minimum\u003d0.0;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double total\u003d0.0;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003c 0.0) {\n          total\u003dtotal + value;\n        }\n      }\n    }\n    minimum\u003dMath.min(minimum,total);\n  }\n  if (hasValidData) {\n    result\u003dnew Double(minimum);\n  }\n  return result;\n}",
    "begin_line": 1960,
    "end_line": 1988,
    "comment": "/** \n * Returns the minimum value in the dataset range, assuming that values in each category are \"stacked\".\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The minimum value.\n * @see #findMaximumStackedRangeValue(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findMaximumStackedRangeValue#2000",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Number findMaximumStackedRangeValue(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  Number result\u003dnull;\n  boolean hasValidData\u003dfalse;\n  double maximum\u003d0.0;\n  int categoryCount\u003ddataset.getColumnCount();\n  for (int item\u003d0; item \u003c categoryCount; item++) {\n    double total\u003d0.0;\n    int seriesCount\u003ddataset.getRowCount();\n    for (int series\u003d0; series \u003c seriesCount; series++) {\n      Number number\u003ddataset.getValue(series,item);\n      if (number !\u003d null) {\n        hasValidData\u003dtrue;\n        double value\u003dnumber.doubleValue();\n        if (value \u003e 0.0) {\n          total\u003dtotal + value;\n        }\n      }\n    }\n    maximum\u003dMath.max(maximum,total);\n  }\n  if (hasValidData) {\n    result\u003dnew Double(maximum);\n  }\n  return result;\n}",
    "begin_line": 2000,
    "end_line": 2027,
    "comment": "/** \n * Returns the maximum value in the dataset range, assuming that values in each category are \"stacked\".\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The maximum value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #findMinimumStackedRangeValue(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#2037",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)",
    "snippet": "public static Range findStackedRangeBounds(TableXYDataset dataset){\n  return findStackedRangeBounds(dataset,0.0);\n}",
    "begin_line": 2037,
    "end_line": 2039,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range, assuming that the series are stacked.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range ([0.0, 0.0] if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findStackedRangeBounds#2050",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.xy.TableXYDataset, double)",
    "snippet": "public static Range findStackedRangeBounds(TableXYDataset dataset,double base){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  double minimum\u003dbase;\n  double maximum\u003dbase;\n  for (int itemNo\u003d0; itemNo \u003c dataset.getItemCount(); itemNo++) {\n    double positive\u003dbase;\n    double negative\u003dbase;\n    int seriesCount\u003ddataset.getSeriesCount();\n    for (int seriesNo\u003d0; seriesNo \u003c seriesCount; seriesNo++) {\n      double y\u003ddataset.getYValue(seriesNo,itemNo);\n      if (!Double.isNaN(y)) {\n        if (y \u003e 0.0) {\n          positive+\u003dy;\n        }\n else {\n          negative+\u003dy;\n        }\n      }\n    }\n    if (positive \u003e maximum) {\n      maximum\u003dpositive;\n    }\n    if (negative \u003c minimum) {\n      minimum\u003dnegative;\n    }\n  }\n  if (minimum \u003c\u003d maximum) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 2050,
    "end_line": 2085,
    "comment": "/** \n * Returns the minimum and maximum values for the dataset\u0027s range, assuming that the series are stacked, using the specified base value.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param base  the base value.\n * @return The range (\u003ccode\u003enull\u003c/code\u003e if the dataset contains no values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.calculateStackTotal#2098",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.calculateStackTotal(org.jfree.data.xy.TableXYDataset, int)",
    "snippet": "public static double calculateStackTotal(TableXYDataset dataset,int item){\n  double total\u003d0.0;\n  int seriesCount\u003ddataset.getSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    double value\u003ddataset.getYValue(s,item);\n    if (!Double.isNaN(value)) {\n      total\u003dtotal + value;\n    }\n  }\n  return total;\n}",
    "begin_line": 2098,
    "end_line": 2108,
    "comment": "/** \n * Calculates the total for the y-values in all series for a given item index.\n * @param dataset  the dataset.\n * @param item  the item index.\n * @return The total.\n * @since 1.0.5\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DatasetUtilities.findCumulativeRangeBounds#2120",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DatasetUtilities.java",
    "class_name": "org.jfree.data.general.DatasetUtilities",
    "signature": "org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)",
    "snippet": "public static Range findCumulativeRangeBounds(CategoryDataset dataset){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  boolean allItemsNull\u003dtrue;\n  double minimum\u003d0.0;\n  double maximum\u003d0.0;\n  for (int row\u003d0; row \u003c dataset.getRowCount(); row++) {\n    double runningTotal\u003d0.0;\n    for (int column\u003d0; column \u003c\u003d dataset.getColumnCount() - 1; column++) {\n      Number n\u003ddataset.getValue(row,column);\n      if (n !\u003d null) {\n        allItemsNull\u003dfalse;\n        double value\u003dn.doubleValue();\n        if (!Double.isNaN(value)) {\n          runningTotal\u003drunningTotal + value;\n          minimum\u003dMath.min(minimum,runningTotal);\n          maximum\u003dMath.max(maximum,runningTotal);\n        }\n      }\n    }\n  }\n  if (!allItemsNull) {\n    return new Range(minimum,maximum);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 2120,
    "end_line": 2150,
    "comment": "/** \n * Calculates the range of values for a dataset where each item is the running total of the items for the current series.\n * @param dataset  the dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The range.\n * @see #findRangeBounds(CategoryDataset)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.DefaultPieDataset#85",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.DefaultPieDataset()",
    "snippet": "public DefaultPieDataset(){\n  this.data\u003dnew DefaultKeyedValues();\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Constructs a new dataset, initially empty.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.DefaultPieDataset#95",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.DefaultPieDataset(org.jfree.data.KeyedValues)",
    "snippet": "public DefaultPieDataset(KeyedValues data){\n  if (data \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027data\u0027 argument.\");\n  }\n  this.data\u003dnew DefaultKeyedValues();\n  for (int i\u003d0; i \u003c data.getItemCount(); i++) {\n    this.data.addValue(data.getKey(i),data.getValue(i));\n  }\n}",
    "begin_line": 95,
    "end_line": 103,
    "comment": "/** \n * Creates a new dataset by copying data from a  {@link KeyedValues}instance.\n * @param data  the data (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getItemCount#110",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getItemCount()",
    "snippet": "public int getItemCount(){\n  return this.data.getItemCount();\n}",
    "begin_line": 110,
    "end_line": 112,
    "comment": "/** \n * Returns the number of items in the dataset.\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getKeys#120",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getKeys()",
    "snippet": "public List getKeys(){\n  return Collections.unmodifiableList(this.data.getKeys());\n}",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * Returns the categories in the dataset.  The returned list is unmodifiable.\n * @return The categories in the dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getKey#135",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getKey(int)",
    "snippet": "public Comparable getKey(int item){\n  return this.data.getKey(item);\n}",
    "begin_line": 135,
    "end_line": 137,
    "comment": "/** \n * Returns the key for the specified item, or \u003ccode\u003enull\u003c/code\u003e.\n * @param item  the item index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetItemCount() - 1\u003c/code\u003e).\n * @return The key, or \u003ccode\u003enull\u003c/code\u003e.\n * @throws IndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is not in thespecified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getIndex#149",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getIndex(java.lang.Comparable)",
    "snippet": "public int getIndex(Comparable key){\n  return this.data.getIndex(key);\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Returns the index for a key, or -1 if the key is not recognised.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index, or \u003ccode\u003e-1\u003c/code\u003e if the key is unrecognised.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getValue#160",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getValue(int)",
    "snippet": "public Number getValue(int item){\n  Number result\u003dnull;\n  if (getItemCount() \u003e item) {\n    result\u003dthis.data.getValue(item);\n  }\n  return result;\n}",
    "begin_line": 160,
    "end_line": 168,
    "comment": "/** \n * Returns a value.\n * @param item  the value index.\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.getValue#179",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.getValue(java.lang.Comparable)",
    "snippet": "public Number getValue(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  return this.data.getValue(key);\n}",
    "begin_line": 179,
    "end_line": 184,
    "comment": "/** \n * Returns the data value associated with a key.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @throws UnknownKeyException if the key is not recognised.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.setValue#196",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, java.lang.Number)",
    "snippet": "public void setValue(Comparable key,Number value){\n  this.data.setValue(key,value);\n  fireDatasetChanged();\n}",
    "begin_line": 196,
    "end_line": 199,
    "comment": "/** \n * Sets the data value for a key and sends a  {@link DatasetChangeEvent} toall registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.setValue#211",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, double)",
    "snippet": "public void setValue(Comparable key,double value){\n  setValue(key,new Double(value));\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Sets the data value for a key and sends a  {@link DatasetChangeEvent} toall registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.insertValue#228",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.insertValue(int, java.lang.Comparable, double)",
    "snippet": "public void insertValue(int position,Comparable key,double value){\n  insertValue(position,key,new Double(value));\n}",
    "begin_line": 228,
    "end_line": 230,
    "comment": "/** \n * Inserts a new value at the specified position in the dataset or, if there is an existing item with the specified key, updates the value for that item and moves it to the specified position.  After the change is made, this methods sends a  {@link DatasetChangeEvent} to allregistered listeners.\n * @param position  the position (in the range 0 to getItemCount()).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.insertValue#245",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.insertValue(int, java.lang.Comparable, java.lang.Number)",
    "snippet": "public void insertValue(int position,Comparable key,Number value){\n  this.data.insertValue(position,key,value);\n  fireDatasetChanged();\n}",
    "begin_line": 245,
    "end_line": 248,
    "comment": "/** \n * Inserts a new value at the specified position in the dataset or, if there is an existing item with the specified key, updates the value for that item and moves it to the specified position.  After the change is made, this methods sends a  {@link DatasetChangeEvent} to allregistered listeners.\n * @param position  the position (in the range 0 to getItemCount()).\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.remove#259",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.remove(java.lang.Comparable)",
    "snippet": "public void remove(Comparable key){\n  this.data.removeValue(key);\n  fireDatasetChanged();\n}",
    "begin_line": 259,
    "end_line": 262,
    "comment": "/** \n * Removes an item from the dataset and sends a  {@link DatasetChangeEvent}to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @throws IllegalArgumentException if \u003ccode\u003ekey\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.clear#270",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.clear()",
    "snippet": "public void clear(){\n  if (getItemCount() \u003e 0) {\n    this.data.clear();\n    fireDatasetChanged();\n  }\n}",
    "begin_line": 270,
    "end_line": 275,
    "comment": "/** \n * Clears all data from this dataset and sends a  {@link DatasetChangeEvent}to all registered listeners (unless the dataset was already empty).\n * @since 1.0.2\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.sortByKeys#285",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.sortByKeys(org.jfree.chart.util.SortOrder)",
    "snippet": "public void sortByKeys(SortOrder order){\n  this.data.sortByKeys(order);\n  fireDatasetChanged();\n}",
    "begin_line": 285,
    "end_line": 288,
    "comment": "/** \n * Sorts the dataset\u0027s items by key and sends a  {@link DatasetChangeEvent}to all registered listeners.\n * @param order  the sort order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.sortByValues#298",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.sortByValues(org.jfree.chart.util.SortOrder)",
    "snippet": "public void sortByValues(SortOrder order){\n  this.data.sortByValues(order);\n  fireDatasetChanged();\n}",
    "begin_line": 298,
    "end_line": 301,
    "comment": "/** \n * Sorts the dataset\u0027s items by value and sends a  {@link DatasetChangeEvent}to all registered listeners.\n * @param order  the sort order (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.equals#310",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof PieDataset)) {\n    return false;\n  }\n  PieDataset that\u003d(PieDataset)obj;\n  int count\u003dgetItemCount();\n  if (that.getItemCount() !\u003d count) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c count; i++) {\n    Comparable k1\u003dgetKey(i);\n    Comparable k2\u003dthat.getKey(i);\n    if (!k1.equals(k2)) {\n      return false;\n    }\n    Number v1\u003dgetValue(i);\n    Number v2\u003dthat.getValue(i);\n    if (v1 \u003d\u003d null) {\n      if (v2 !\u003d null) {\n        return false;\n      }\n    }\n else {\n      if (!v1.equals(v2)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}",
    "begin_line": 310,
    "end_line": 346,
    "comment": "/** \n * Tests if this object is equal to another.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.hashCode#353",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.hashCode()",
    "snippet": "public int hashCode(){\n  return this.data.hashCode();\n}",
    "begin_line": 353,
    "end_line": 355,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultPieDataset.clone#365",
    "is_bug": true,
    "src_path": "org/jfree/data/general/DefaultPieDataset.java",
    "class_name": "org.jfree.data.general.DefaultPieDataset",
    "signature": "org.jfree.data.general.DefaultPieDataset.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DefaultPieDataset clone\u003d(DefaultPieDataset)super.clone();\n  clone.data\u003d(DefaultKeyedValues)this.data.clone();\n  return clone;\n}",
    "begin_line": 365,
    "end_line": 369,
    "comment": "/** \n * Returns a clone of the dataset.\n * @return A clone.\n * @throws CloneNotSupportedException This class will not throw thisexception, but subclasses (if any) might.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.Series#101",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
    "snippet": "protected Series(Comparable key){\n  this(key,null);\n}",
    "begin_line": 101,
    "end_line": 103,
    "comment": "/** \n * Creates a new series with the specified key.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.Series#111",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
    "snippet": "protected Series(Comparable key,String description){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  this.key\u003dkey;\n  this.description\u003ddescription;\n  this.listeners\u003dnew EventListenerList();\n  this.propertyChangeSupport\u003dnew PropertyChangeSupport(this);\n  this.notify\u003dtrue;\n}",
    "begin_line": 111,
    "end_line": 120,
    "comment": "/** \n * Creates a new series with the specified key and description.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param description  the series description (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getKey#129",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getKey()",
    "snippet": "public Comparable getKey(){\n  return this.key;\n}",
    "begin_line": 129,
    "end_line": 131,
    "comment": "/** \n * Returns the key for the series.\n * @return The series key (never \u003ccode\u003enull\u003c/code\u003e).\n * @see #setKey(Comparable)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setKey#141",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setKey(java.lang.Comparable)",
    "snippet": "public void setKey(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  Comparable old\u003dthis.key;\n  this.key\u003dkey;\n  this.propertyChangeSupport.firePropertyChange(\"Key\",old,key);\n}",
    "begin_line": 141,
    "end_line": 148,
    "comment": "/** \n * Sets the key for the series and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e (with the property name \"Key\") to all registered listeners.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #getKey()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getDescription#157",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getDescription()",
    "snippet": "public String getDescription(){\n  return this.description;\n}",
    "begin_line": 157,
    "end_line": 159,
    "comment": "/** \n * Returns a description of the series.\n * @return The series description (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDescription(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setDescription#169",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setDescription(java.lang.String)",
    "snippet": "public void setDescription(String description){\n  String old\u003dthis.description;\n  this.description\u003ddescription;\n  this.propertyChangeSupport.firePropertyChange(\"Description\",old,description);\n}",
    "begin_line": 169,
    "end_line": 174,
    "comment": "/** \n * Sets the description of the series and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e to all registered listeners.\n * @param description  the description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDescription()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getNotify#184",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getNotify()",
    "snippet": "public boolean getNotify(){\n  return this.notify;\n}",
    "begin_line": 184,
    "end_line": 186,
    "comment": "/** \n * Returns the flag that controls whether or not change events are sent to registered listeners.\n * @return A boolean.\n * @see #setNotify(boolean)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.setNotify#196",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.setNotify(boolean)",
    "snippet": "public void setNotify(boolean notify){\n  if (this.notify !\u003d notify) {\n    this.notify\u003dnotify;\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 196,
    "end_line": 201,
    "comment": "/** \n * Sets the flag that controls whether or not change events are sent to registered listeners.\n * @param notify  the new value of the flag.\n * @see #getNotify()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.isEmpty#211",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.isEmpty()",
    "snippet": "public boolean isEmpty(){\n  return (getItemCount() \u003d\u003d 0);\n}",
    "begin_line": 211,
    "end_line": 213,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the series contains no data items, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @since 1.0.7\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.getItemCount#220",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.getItemCount()",
    "snippet": "public abstract int getItemCount();",
    "begin_line": 220,
    "end_line": 220,
    "comment": "/** \n * Returns the number of data items in the series.\n * @return The number of data items in the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.clone#239",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  Series clone\u003d(Series)super.clone();\n  clone.listeners\u003dnew EventListenerList();\n  clone.propertyChangeSupport\u003dnew PropertyChangeSupport(clone);\n  return clone;\n}",
    "begin_line": 239,
    "end_line": 246,
    "comment": "/** \n * Returns a clone of the series. \u003cP\u003e Notes: \u003cul\u003e \u003cli\u003eNo need to clone the name or description, since String object is immutable.\u003c/li\u003e \u003cli\u003eWe set the listener list to empty, since the listeners did not register with the clone.\u003c/li\u003e \u003cli\u003eSame applies to the PropertyChangeSupport instance.\u003c/li\u003e \u003c/ul\u003e\n * @return A clone of the series.\n * @throws CloneNotSupportedException  not thrown by this class, butsubclasses may differ.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.equals#255",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Series)) {\n    return false;\n  }\n  Series that\u003d(Series)obj;\n  if (!getKey().equals(that.getKey())) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(getDescription(),that.getDescription())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 255,
    "end_line": 270,
    "comment": "/** \n * Tests the series for equality with another object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.hashCode#277",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.key.hashCode();\n  result\u003d29 * result + (this.description !\u003d null ? this.description.hashCode() : 0);\n  return result;\n}",
    "begin_line": 277,
    "end_line": 283,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.addChangeListener#294",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.addChangeListener(org.jfree.data.general.SeriesChangeListener)",
    "snippet": "public void addChangeListener(SeriesChangeListener listener){\n  this.listeners.add(SeriesChangeListener.class,listener);\n}",
    "begin_line": 294,
    "end_line": 296,
    "comment": "/** \n * Registers an object with this series, to receive notification whenever the series changes. \u003cP\u003e Objects being registered must implement the  {@link SeriesChangeListener}interface.\n * @param listener  the listener to register.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.removeChangeListener#304",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.removeChangeListener(org.jfree.data.general.SeriesChangeListener)",
    "snippet": "public void removeChangeListener(SeriesChangeListener listener){\n  this.listeners.remove(SeriesChangeListener.class,listener);\n}",
    "begin_line": 304,
    "end_line": 306,
    "comment": "/** \n * Deregisters an object, so that it not longer receives notification whenever the series changes.\n * @param listener  the listener to deregister.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.fireSeriesChanged#312",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
    "snippet": "public void fireSeriesChanged(){\n  if (this.notify) {\n    notifyListeners(new SeriesChangeEvent(this));\n  }\n}",
    "begin_line": 312,
    "end_line": 316,
    "comment": "/** \n * General method for signalling to registered listeners that the series has been changed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.notifyListeners#324",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
    "snippet": "protected void notifyListeners(SeriesChangeEvent event){\n  Object[] listenerList\u003dthis.listeners.getListenerList();\n  for (int i\u003dlistenerList.length - 2; i \u003e\u003d 0; i-\u003d2) {\n    if (listenerList[i] \u003d\u003d SeriesChangeListener.class) {\n      ((SeriesChangeListener)listenerList[i + 1]).seriesChanged(event);\n    }\n  }\n}",
    "begin_line": 324,
    "end_line": 334,
    "comment": "/** \n * Sends a change event to all registered listeners.\n * @param event  contains information about the event that triggered thenotification.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.addPropertyChangeListener#341",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.addPropertyChangeListener(java.beans.PropertyChangeListener)",
    "snippet": "public void addPropertyChangeListener(PropertyChangeListener listener){\n  this.propertyChangeSupport.addPropertyChangeListener(listener);\n}",
    "begin_line": 341,
    "end_line": 343,
    "comment": "/** \n * Adds a property change listener to the series.\n * @param listener  the listener.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.removePropertyChangeListener#350",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.removePropertyChangeListener(java.beans.PropertyChangeListener)",
    "snippet": "public void removePropertyChangeListener(PropertyChangeListener listener){\n  this.propertyChangeSupport.removePropertyChangeListener(listener);\n}",
    "begin_line": 350,
    "end_line": 352,
    "comment": "/** \n * Removes a property change listener from the series.\n * @param listener The listener.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Series.firePropertyChange#361",
    "is_bug": true,
    "src_path": "org/jfree/data/general/Series.java",
    "class_name": "org.jfree.data.general.Series",
    "signature": "org.jfree.data.general.Series.firePropertyChange(java.lang.String, java.lang.Object, java.lang.Object)",
    "snippet": "protected void firePropertyChange(String property,Object oldValue,Object newValue){\n  this.propertyChangeSupport.firePropertyChange(property,oldValue,newValue);\n}",
    "begin_line": 361,
    "end_line": 365,
    "comment": "/** \n * Fires a property change event.\n * @param property  the property key.\n * @param oldValue  the old value.\n * @param newValue  the new value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.SeriesChangeEvent#68",
    "is_bug": true,
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
    "snippet": "public SeriesChangeEvent(Object source){\n  this(source,null);\n}",
    "begin_line": 68,
    "end_line": 70,
    "comment": "/** \n * Constructs a new event.\n * @param source  the source of the change event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.SeriesChangeEvent#80",
    "is_bug": true,
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object, org.jfree.data.general.SeriesChangeInfo)",
    "snippet": "public SeriesChangeEvent(Object source,SeriesChangeInfo summary){\n  super(source);\n  this.summary\u003dsummary;\n}",
    "begin_line": 80,
    "end_line": 83,
    "comment": "/** \n * Constructs a new change event.\n * @param source  the event source.\n * @param summary  a summary of the change (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.getSummary#92",
    "is_bug": true,
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "signature": "org.jfree.data.general.SeriesChangeEvent.getSummary()",
    "snippet": "public SeriesChangeInfo getSummary(){\n  return this.summary;\n}",
    "begin_line": 92,
    "end_line": 94,
    "comment": "/** \n * Returns a summary of the change for this event.\n * @return The change summary (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SeriesChangeEvent.setSummary#103",
    "is_bug": true,
    "src_path": "org/jfree/data/general/SeriesChangeEvent.java",
    "class_name": "org.jfree.data.general.SeriesChangeEvent",
    "signature": "org.jfree.data.general.SeriesChangeEvent.setSummary(org.jfree.data.general.SeriesChangeInfo)",
    "snippet": "public void setSummary(SeriesChangeInfo summary){\n  this.summary\u003dsummary;\n}",
    "begin_line": 103,
    "end_line": 105,
    "comment": "/** \n * Sets the change info for this event.\n * @param summary  the info (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.DateRange#71",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.DateRange()",
    "snippet": "public DateRange(){\n  this(new Date(0),new Date(1));\n}",
    "begin_line": 71,
    "end_line": 73,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.DateRange#81",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.DateRange(java.util.Date, java.util.Date)",
    "snippet": "public DateRange(Date lower,Date upper){\n  super(lower.getTime(),upper.getTime());\n  this.lowerDate\u003dlower.getTime();\n  this.upperDate\u003dupper.getTime();\n}",
    "begin_line": 81,
    "end_line": 85,
    "comment": "/** \n * Constructs a new range.\n * @param lower  the lower bound (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param upper  the upper bound (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.DateRange#94",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.DateRange(double, double)",
    "snippet": "public DateRange(double lower,double upper){\n  super(lower,upper);\n  this.lowerDate\u003d(long)lower;\n  this.upperDate\u003d(long)upper;\n}",
    "begin_line": 94,
    "end_line": 98,
    "comment": "/** \n * Constructs a new range using two values that will be interpreted as \"milliseconds since midnight GMT, 1-Jan-1970\".\n * @param lower  the lower (oldest) date.\n * @param upper  the upper (most recent) date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.DateRange#108",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.DateRange(org.jfree.data.Range)",
    "snippet": "public DateRange(Range other){\n  this(other.getLowerBound(),other.getUpperBound());\n}",
    "begin_line": 108,
    "end_line": 110,
    "comment": "/** \n * Constructs a new range that is based on another  {@link Range}.  The other range does not have to be a  {@link DateRange}.  If it is not, the upper and lower bounds are evaluated as milliseconds since midnight GMT, 1-Jan-1970.\n * @param other  the other range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.getLowerDate#119",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.getLowerDate()",
    "snippet": "public Date getLowerDate(){\n  return new Date(this.lowerDate);\n}",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Returns the lower (earlier) date for the range.\n * @return The lower date for the range.\n * @see #getLowerMillis()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.getLowerMillis#132",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.getLowerMillis()",
    "snippet": "public long getLowerMillis(){\n  return this.lowerDate;\n}",
    "begin_line": 132,
    "end_line": 134,
    "comment": "/** \n * Returns the lower bound of the range in milliseconds.\n * @return The lower bound.\n * @see #getLowerDate()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.getUpperDate#143",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.getUpperDate()",
    "snippet": "public Date getUpperDate(){\n  return new Date(this.upperDate);\n}",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Returns the upper (later) date for the range.\n * @return The upper date for the range.\n * @see #getUpperMillis()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.getUpperMillis#156",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.getUpperMillis()",
    "snippet": "public long getUpperMillis(){\n  return this.upperDate;\n}",
    "begin_line": 156,
    "end_line": 158,
    "comment": "/** \n * Returns the upper bound of the range in milliseconds.\n * @return The upper bound.\n * @see #getUpperDate()\n * @since 1.0.11\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DateRange.toString#165",
    "is_bug": true,
    "src_path": "org/jfree/data/time/DateRange.java",
    "class_name": "org.jfree.data.time.DateRange",
    "signature": "org.jfree.data.time.DateRange.toString()",
    "snippet": "public String toString(){\n  DateFormat df\u003dDateFormat.getDateTimeInstance();\n  return \"[\" + df.format(getLowerDate()) + \" --\u003e \"+ df.format(getUpperDate())+ \"]\";\n}",
    "begin_line": 165,
    "end_line": 169,
    "comment": "/** \n * Returns a string representing the date range (useful for debugging).\n * @return A string representing the date range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.Day#112",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.Day()",
    "snippet": "public Day(){\n  this(new Date());\n}",
    "begin_line": 112,
    "end_line": 114,
    "comment": "/** \n * Creates a new instance, derived from the system date/time (and assuming the default timezone).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.Day#123",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.Day(int, int, int)",
    "snippet": "public Day(int day,int month,int year){\n  this.serialDate\u003dSerialDate.createInstance(day,month,year);\n  peg(Calendar.getInstance());\n}",
    "begin_line": 123,
    "end_line": 126,
    "comment": "/** \n * Constructs a new one day time period.\n * @param day  the day-of-the-month.\n * @param month  the month (1 to 12).\n * @param year  the year (1900 \u003c\u003d year \u003c\u003d 9999).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.Day#133",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.Day(org.jfree.data.time.SerialDate)",
    "snippet": "public Day(SerialDate serialDate){\n  if (serialDate \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027serialDate\u0027 argument.\");\n  }\n  this.serialDate\u003dserialDate;\n  peg(Calendar.getInstance());\n}",
    "begin_line": 133,
    "end_line": 139,
    "comment": "/** \n * Constructs a new one day time period.\n * @param serialDate  the day (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.Day#149",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.Day(java.util.Date)",
    "snippet": "public Day(Date time){\n  this(time,TimeZone.getDefault());\n}",
    "begin_line": 149,
    "end_line": 152,
    "comment": "/** \n * Constructs a new instance, based on a particular date/time and the default time zone.\n * @param time  the time (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @see #Day(Date,TimeZone)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.Day#160",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.Day(java.util.Date, java.util.TimeZone)",
    "snippet": "public Day(Date time,TimeZone zone){\n  if (time \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027time\u0027 argument.\");\n  }\n  if (zone \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027zone\u0027 argument.\");\n  }\n  Calendar calendar\u003dCalendar.getInstance(zone);\n  calendar.setTime(time);\n  int d\u003dcalendar.get(Calendar.DAY_OF_MONTH);\n  int m\u003dcalendar.get(Calendar.MONTH) + 1;\n  int y\u003dcalendar.get(Calendar.YEAR);\n  this.serialDate\u003dSerialDate.createInstance(d,m,y);\n  peg(calendar);\n}",
    "begin_line": 160,
    "end_line": 175,
    "comment": "/** \n * Constructs a new instance, based on a particular date/time and time zone.\n * @param time  the date/time.\n * @param zone  the time zone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getSerialDate#186",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getSerialDate()",
    "snippet": "public SerialDate getSerialDate(){\n  return this.serialDate;\n}",
    "begin_line": 186,
    "end_line": 188,
    "comment": "/** \n * Returns the day as a  {@link SerialDate}.  Note: the reference that is returned should be an instance of an immutable  {@link SerialDate}(otherwise the caller could use the reference to alter the state of this \u003ccode\u003eDay\u003c/code\u003e instance, and \u003ccode\u003eDay\u003c/code\u003e is supposed to be immutable).\n * @return The day as a {@link SerialDate}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getYear#195",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getYear()",
    "snippet": "public int getYear(){\n  return this.serialDate.getYYYY();\n}",
    "begin_line": 195,
    "end_line": 197,
    "comment": "/** \n * Returns the year.\n * @return The year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getMonth#204",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getMonth()",
    "snippet": "public int getMonth(){\n  return this.serialDate.getMonth();\n}",
    "begin_line": 204,
    "end_line": 206,
    "comment": "/** \n * Returns the month.\n * @return The month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getDayOfMonth#213",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getDayOfMonth()",
    "snippet": "public int getDayOfMonth(){\n  return this.serialDate.getDayOfMonth();\n}",
    "begin_line": 213,
    "end_line": 215,
    "comment": "/** \n * Returns the day of the month.\n * @return The day of the month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getFirstMillisecond#227",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getFirstMillisecond()",
    "snippet": "public long getFirstMillisecond(){\n  return this.firstMillisecond;\n}",
    "begin_line": 227,
    "end_line": 229,
    "comment": "/** \n * Returns the first millisecond of the day.  This will be determined relative to the time zone specified in the constructor, or in the calendar instance passed in the most recent call to the {@link #peg(Calendar)} method.\n * @return The first millisecond of the day.\n * @see #getLastMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getLastMillisecond#241",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getLastMillisecond()",
    "snippet": "public long getLastMillisecond(){\n  return this.lastMillisecond;\n}",
    "begin_line": 241,
    "end_line": 243,
    "comment": "/** \n * Returns the last millisecond of the day.  This will be determined relative to the time zone specified in the constructor, or in the calendar instance passed in the most recent call to the {@link #peg(Calendar)} method.\n * @return The last millisecond of the day.\n * @see #getFirstMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.peg#253",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.peg(java.util.Calendar)",
    "snippet": "public void peg(Calendar calendar){\n  this.firstMillisecond\u003dgetFirstMillisecond(calendar);\n  this.lastMillisecond\u003dgetLastMillisecond(calendar);\n}",
    "begin_line": 253,
    "end_line": 256,
    "comment": "/** \n * Recalculates the start date/time and end date/time for this time period relative to the supplied calendar (which incorporates a time zone).\n * @param calendar  the calendar (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.previous#263",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.previous()",
    "snippet": "public RegularTimePeriod previous(){\n  Day result;\n  int serial\u003dthis.serialDate.toSerial();\n  if (serial \u003e SerialDate.SERIAL_LOWER_BOUND) {\n    SerialDate yesterday\u003dSerialDate.createInstance(serial - 1);\n    return new Day(yesterday);\n  }\n else {\n    result\u003dnull;\n  }\n  return result;\n}",
    "begin_line": 263,
    "end_line": 276,
    "comment": "/** \n * Returns the day preceding this one.\n * @return The day preceding this one.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.next#285",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.next()",
    "snippet": "public RegularTimePeriod next(){\n  Day result;\n  int serial\u003dthis.serialDate.toSerial();\n  if (serial \u003c SerialDate.SERIAL_UPPER_BOUND) {\n    SerialDate tomorrow\u003dSerialDate.createInstance(serial + 1);\n    return new Day(tomorrow);\n  }\n else {\n    result\u003dnull;\n  }\n  return result;\n}",
    "begin_line": 285,
    "end_line": 298,
    "comment": "/** \n * Returns the day following this one, or \u003ccode\u003enull\u003c/code\u003e if some limit has been reached.\n * @return The day following this one, or \u003ccode\u003enull\u003c/code\u003e if some limithas been reached.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getSerialIndex#305",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getSerialIndex()",
    "snippet": "public long getSerialIndex(){\n  return this.serialDate.toSerial();\n}",
    "begin_line": 305,
    "end_line": 307,
    "comment": "/** \n * Returns a serial index number for the day.\n * @return The serial index number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getFirstMillisecond#320",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getFirstMillisecond(java.util.Calendar)",
    "snippet": "public long getFirstMillisecond(Calendar calendar){\n  int year\u003dthis.serialDate.getYYYY();\n  int month\u003dthis.serialDate.getMonth();\n  int day\u003dthis.serialDate.getDayOfMonth();\n  calendar.clear();\n  calendar.set(year,month - 1,day,0,0,0);\n  calendar.set(Calendar.MILLISECOND,0);\n  return calendar.getTime().getTime();\n}",
    "begin_line": 320,
    "end_line": 329,
    "comment": "/** \n * Returns the first millisecond of the day, evaluated using the supplied calendar (which determines the time zone).\n * @param calendar  calendar to use (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The start of the day as milliseconds since 01-01-1970.\n * @throws NullPointerException if \u003ccode\u003ecalendar\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.getLastMillisecond#342",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.getLastMillisecond(java.util.Calendar)",
    "snippet": "public long getLastMillisecond(Calendar calendar){\n  int year\u003dthis.serialDate.getYYYY();\n  int month\u003dthis.serialDate.getMonth();\n  int day\u003dthis.serialDate.getDayOfMonth();\n  calendar.clear();\n  calendar.set(year,month - 1,day,23,59,59);\n  calendar.set(Calendar.MILLISECOND,999);\n  return calendar.getTime().getTime();\n}",
    "begin_line": 342,
    "end_line": 351,
    "comment": "/** \n * Returns the last millisecond of the day, evaluated using the supplied calendar (which determines the time zone).\n * @param calendar  calendar to use (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The end of the day as milliseconds since 01-01-1970.\n * @throws NullPointerException if \u003ccode\u003ecalendar\u003c/code\u003e is\u003ccode\u003enull\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.equals#363",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof Day)) {\n    return false;\n  }\n  Day that\u003d(Day)obj;\n  if (!this.serialDate.equals(that.getSerialDate())) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 363,
    "end_line": 377,
    "comment": "/** \n * Tests the equality of this Day object to an arbitrary object.  Returns true if the target is a Day instance or a SerialDate instance representing the same day as this object. In all other cases, returns false.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A flag indicating whether or not an object is equal to this day.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.hashCode#388",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.hashCode()",
    "snippet": "public int hashCode(){\n  return this.serialDate.hashCode();\n}",
    "begin_line": 388,
    "end_line": 390,
    "comment": "/** \n * Returns a hash code for this object instance.  The approach described by Joshua Bloch in \"Effective Java\" has been used here: \u003cp\u003e \u003ccode\u003ehttp://developer.java.sun.com/developer/Books/effectivejava /Chapter3.pdf\u003c/code\u003e\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.compareTo#402",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.compareTo(java.lang.Object)",
    "snippet": "public int compareTo(Object o1){\n  int result;\n  if (o1 instanceof Day) {\n    Day d\u003d(Day)o1;\n    result\u003d-d.getSerialDate().compare(this.serialDate);\n  }\n else   if (o1 instanceof RegularTimePeriod) {\n    result\u003d0;\n  }\n else {\n    result\u003d1;\n  }\n  return result;\n}",
    "begin_line": 402,
    "end_line": 429,
    "comment": "/** \n * Returns an integer indicating the order of this Day object relative to the specified object: negative \u003d\u003d before, zero \u003d\u003d same, positive \u003d\u003d after.\n * @param o1  the object to compare.\n * @return negative \u003d\u003d before, zero \u003d\u003d same, positive \u003d\u003d after.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.toString#436",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.toString()",
    "snippet": "public String toString(){\n  return this.serialDate.toString();\n}",
    "begin_line": 436,
    "end_line": 438,
    "comment": "/** \n * Returns a string representing the day.\n * @return A string representing the day.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "Day.parseDay#451",
    "is_bug": true,
    "src_path": "org/jfree/data/time/Day.java",
    "class_name": "org.jfree.data.time.Day",
    "signature": "org.jfree.data.time.Day.parseDay(java.lang.String)",
    "snippet": "public static Day parseDay(String s){\n  try {\n    return new Day(Day.DATE_FORMAT.parse(s));\n  }\n catch (  ParseException e1) {\n    try {\n      return new Day(Day.DATE_FORMAT_SHORT.parse(s));\n    }\n catch (    ParseException e2) {\n    }\n  }\n  return null;\n}",
    "begin_line": 451,
    "end_line": 466,
    "comment": "/** \n * Parses the string argument as a day. \u003cP\u003e This method is required to recognise YYYY-MM-DD as a valid format. Anything else, for now, is a bonus.\n * @param s  the date string to parse.\n * @return \u003ccode\u003enull\u003c/code\u003e if the string does not contain any parseablestring, the day otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.createInstance#84",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.createInstance(java.lang.Class, java.util.Date, java.util.TimeZone)",
    "snippet": "public static RegularTimePeriod createInstance(Class c,Date millisecond,TimeZone zone){\n  RegularTimePeriod result\u003dnull;\n  try {\n    Constructor constructor\u003dc.getDeclaredConstructor(new Class[]{Date.class,TimeZone.class});\n    result\u003d(RegularTimePeriod)constructor.newInstance(new Object[]{millisecond,zone});\n  }\n catch (  Exception e) {\n  }\n  return result;\n}",
    "begin_line": 84,
    "end_line": 97,
    "comment": "/** \n * Creates a time period that includes the specified millisecond, assuming the given time zone.\n * @param c  the time period class.\n * @param millisecond  the time.\n * @param zone  the time zone.\n * @return The time period.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.downsize#107",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.downsize(java.lang.Class)",
    "snippet": "public static Class downsize(Class c){\n  if (c.equals(Year.class)) {\n    return Quarter.class;\n  }\n else   if (c.equals(Quarter.class)) {\n    return Month.class;\n  }\n else   if (c.equals(Month.class)) {\n    return Day.class;\n  }\n else   if (c.equals(Day.class)) {\n    return Hour.class;\n  }\n else   if (c.equals(Hour.class)) {\n    return Minute.class;\n  }\n else   if (c.equals(Minute.class)) {\n    return Second.class;\n  }\n else   if (c.equals(Second.class)) {\n    return Millisecond.class;\n  }\n else {\n    return Millisecond.class;\n  }\n}",
    "begin_line": 107,
    "end_line": 132,
    "comment": "/** \n * Returns a subclass of  {@link RegularTimePeriod} that is smaller thanthe specified class.\n * @param c  a subclass of {@link RegularTimePeriod}.\n * @return A class.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.previous#140",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.previous()",
    "snippet": "public abstract RegularTimePeriod previous();",
    "begin_line": 140,
    "end_line": 140,
    "comment": "/** \n * Returns the time period preceding this one, or \u003ccode\u003enull\u003c/code\u003e if some lower limit has been reached.\n * @return The previous time period (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.next#148",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.next()",
    "snippet": "public abstract RegularTimePeriod next();",
    "begin_line": 148,
    "end_line": 148,
    "comment": "/** \n * Returns the time period following this one, or \u003ccode\u003enull\u003c/code\u003e if some limit has been reached.\n * @return The next time period (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getSerialIndex#155",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getSerialIndex()",
    "snippet": "public abstract long getSerialIndex();",
    "begin_line": 155,
    "end_line": 155,
    "comment": "/** \n * Returns a serial index number for the time unit.\n * @return The serial index number.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.peg#167",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.peg(java.util.Calendar)",
    "snippet": "public abstract void peg(Calendar calendar);",
    "begin_line": 167,
    "end_line": 167,
    "comment": "/** \n * Recalculates the start date/time and end date/time for this time period relative to the supplied calendar (which incorporates a time zone).\n * @param calendar  the calendar (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.3\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getStart#177",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getStart()",
    "snippet": "public Date getStart(){\n  return new Date(getFirstMillisecond());\n}",
    "begin_line": 177,
    "end_line": 179,
    "comment": "/** \n * Returns the date/time that marks the start of the time period.  This method returns a new \u003ccode\u003eDate\u003c/code\u003e instance every time it is called.\n * @return The start date/time.\n * @see #getFirstMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getEnd#189",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getEnd()",
    "snippet": "public Date getEnd(){\n  return new Date(getLastMillisecond());\n}",
    "begin_line": 189,
    "end_line": 191,
    "comment": "/** \n * Returns the date/time that marks the end of the time period.  This method returns a new \u003ccode\u003eDate\u003c/code\u003e instance every time it is called.\n * @return The end date/time.\n * @see #getLastMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getFirstMillisecond#203",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getFirstMillisecond()",
    "snippet": "public abstract long getFirstMillisecond();",
    "begin_line": 203,
    "end_line": 203,
    "comment": "/** \n * Returns the first millisecond of the time period.  This will be determined relative to the time zone specified in the constructor, or in the calendar instance passed in the most recent call to the {@link #peg(Calendar)} method.\n * @return The first millisecond of the time period.\n * @see #getLastMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getFirstMillisecond#218",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.Calendar)",
    "snippet": "public abstract long getFirstMillisecond(Calendar calendar);",
    "begin_line": 218,
    "end_line": 218,
    "comment": "/** \n * Returns the first millisecond of the time period, evaluated using the supplied calendar (which incorporates a timezone).\n * @param calendar  the calendar (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The first millisecond of the time period.\n * @throws NullPointerException if \u003ccode\u003ecalendar,/code\u003e is\u003c/code\u003enull\u003c/code\u003e.\n * @see #getLastMillisecond(Calendar)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getLastMillisecond#230",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getLastMillisecond()",
    "snippet": "public abstract long getLastMillisecond();",
    "begin_line": 230,
    "end_line": 230,
    "comment": "/** \n * Returns the last millisecond of the time period.  This will be determined relative to the time zone specified in the constructor, or in the calendar instance passed in the most recent call to the {@link #peg(Calendar)} method.\n * @return The last millisecond of the time period.\n * @see #getFirstMillisecond()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getLastMillisecond#242",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.Calendar)",
    "snippet": "public abstract long getLastMillisecond(Calendar calendar);",
    "begin_line": 242,
    "end_line": 242,
    "comment": "/** \n * Returns the last millisecond of the time period, evaluated using the supplied calendar (which incorporates a timezone).\n * @param calendar  the calendar (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The last millisecond of the time period.\n * @see #getFirstMillisecond(Calendar)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getMiddleMillisecond#249",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond()",
    "snippet": "public long getMiddleMillisecond(){\n  long m1\u003dgetFirstMillisecond();\n  long m2\u003dgetLastMillisecond();\n  return m1 + (m2 - m1) / 2;\n}",
    "begin_line": 249,
    "end_line": 253,
    "comment": "/** \n * Returns the millisecond closest to the middle of the time period.\n * @return The middle millisecond.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.getMiddleMillisecond#263",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond(java.util.Calendar)",
    "snippet": "public long getMiddleMillisecond(Calendar calendar){\n  long m1\u003dgetFirstMillisecond(calendar);\n  long m2\u003dgetLastMillisecond(calendar);\n  return m1 + (m2 - m1) / 2;\n}",
    "begin_line": 263,
    "end_line": 267,
    "comment": "/** \n * Returns the millisecond closest to the middle of the time period, evaluated using the supplied calendar (which incorporates a timezone).\n * @param calendar  the calendar.\n * @return The middle millisecond.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "RegularTimePeriod.toString#274",
    "is_bug": true,
    "src_path": "org/jfree/data/time/RegularTimePeriod.java",
    "class_name": "org.jfree.data.time.RegularTimePeriod",
    "signature": "org.jfree.data.time.RegularTimePeriod.toString()",
    "snippet": "public String toString(){\n  return String.valueOf(getStart());\n}",
    "begin_line": 274,
    "end_line": 276,
    "comment": "/** \n * Returns a string representation of the time period.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.SerialDate#210",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.SerialDate()",
    "snippet": "protected SerialDate(){\n}",
    "begin_line": 210,
    "end_line": 211,
    "comment": "/** \n * Default constructor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isValidWeekdayCode#222",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isValidWeekdayCode(int)",
    "snippet": "public static boolean isValidWeekdayCode(final int code){\nswitch (code) {\ncase SUNDAY:case MONDAY:case TUESDAY:case WEDNESDAY:case THURSDAY:case FRIDAY:case SATURDAY:    return true;\ndefault:  return false;\n}\n}",
    "begin_line": 222,
    "end_line": 237,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the supplied integer code represents a valid day-of-the-week, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param code  the code being checked for validity.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the supplied integer code represents avalid day-of-the-week, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.stringToWeekdayCode#247",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.stringToWeekdayCode(java.lang.String)",
    "snippet": "public static int stringToWeekdayCode(String s){\n  final String[] shortWeekdayNames\u003dDATE_FORMAT_SYMBOLS.getShortWeekdays();\n  final String[] weekDayNames\u003dDATE_FORMAT_SYMBOLS.getWeekdays();\n  int result\u003d-1;\n  s\u003ds.trim();\n  for (int i\u003d0; i \u003c weekDayNames.length; i++) {\n    if (s.equals(shortWeekdayNames[i])) {\n      result\u003di;\n      break;\n    }\n    if (s.equals(weekDayNames[i])) {\n      result\u003di;\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 247,
    "end_line": 267,
    "comment": "/** \n * Converts the supplied string to a day of the week.\n * @param s  a string representing the day of the week.\n * @return \u003ccode\u003e-1\u003c/code\u003e if the string is not convertable, the day ofthe week otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.weekdayCodeToString#278",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.weekdayCodeToString(int)",
    "snippet": "public static String weekdayCodeToString(final int weekday){\n  final String[] weekdays\u003dDATE_FORMAT_SYMBOLS.getWeekdays();\n  return weekdays[weekday];\n}",
    "begin_line": 278,
    "end_line": 283,
    "comment": "/** \n * Returns a string representing the supplied day-of-the-week. \u003cP\u003e Need to find a better approach.\n * @param weekday  the day of the week.\n * @return a string representing the supplied day-of-the-week.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getMonths#290",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getMonths()",
    "snippet": "public static String[] getMonths(){\n  return getMonths(false);\n}",
    "begin_line": 290,
    "end_line": 294,
    "comment": "/** \n * Returns an array of month names.\n * @return an array of month names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getMonths#304",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getMonths(boolean)",
    "snippet": "public static String[] getMonths(final boolean shortened){\n  if (shortened) {\n    return DATE_FORMAT_SYMBOLS.getShortMonths();\n  }\n else {\n    return DATE_FORMAT_SYMBOLS.getMonths();\n  }\n}",
    "begin_line": 304,
    "end_line": 313,
    "comment": "/** \n * Returns an array of month names.\n * @param shortened  a flag indicating that shortened month names shouldbe returned.\n * @return an array of month names.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isValidMonthCode#323",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isValidMonthCode(int)",
    "snippet": "public static boolean isValidMonthCode(final int code){\nswitch (code) {\ncase JANUARY:case FEBRUARY:case MARCH:case APRIL:case MAY:case JUNE:case JULY:case AUGUST:case SEPTEMBER:case OCTOBER:case NOVEMBER:case DECEMBER:    return true;\ndefault:  return false;\n}\n}",
    "begin_line": 323,
    "end_line": 343,
    "comment": "/** \n * Returns true if the supplied integer code represents a valid month.\n * @param code  the code being checked for validity.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the supplied integer code represents avalid month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.monthCodeToQuarter#352",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.monthCodeToQuarter(int)",
    "snippet": "public static int monthCodeToQuarter(final int code){\nswitch (code) {\ncase JANUARY:case FEBRUARY:case MARCH:    return 1;\ncase APRIL:case MAY:case JUNE:  return 2;\ncase JULY:case AUGUST:case SEPTEMBER:return 3;\ncase OCTOBER:case NOVEMBER:case DECEMBER:return 4;\ndefault:throw new IllegalArgumentException(\"SerialDate.monthCodeToQuarter: invalid month code.\");\n}\n}",
    "begin_line": 352,
    "end_line": 371,
    "comment": "/** \n * Returns the quarter for the specified month.\n * @param code  the month code (1-12).\n * @return the quarter that the month belongs to.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.monthCodeToString#383",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.monthCodeToString(int)",
    "snippet": "public static String monthCodeToString(final int month){\n  return monthCodeToString(month,false);\n}",
    "begin_line": 383,
    "end_line": 387,
    "comment": "/** \n * Returns a string representing the supplied month. \u003cP\u003e The string returned is the long form of the month name taken from the default locale.\n * @param month  the month.\n * @return a string representing the supplied month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.monthCodeToString#401",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.monthCodeToString(int, boolean)",
    "snippet": "public static String monthCodeToString(final int month,final boolean shortened){\n  if (!isValidMonthCode(month)) {\n    throw new IllegalArgumentException(\"SerialDate.monthCodeToString: month outside valid range.\");\n  }\n  final String[] months;\n  if (shortened) {\n    months\u003dDATE_FORMAT_SYMBOLS.getShortMonths();\n  }\n else {\n    months\u003dDATE_FORMAT_SYMBOLS.getMonths();\n  }\n  return months[month - 1];\n}",
    "begin_line": 401,
    "end_line": 421,
    "comment": "/** \n * Returns a string representing the supplied month. \u003cP\u003e The string returned is the long or short form of the month name taken from the default locale.\n * @param month  the month.\n * @param shortened  if \u003ccode\u003etrue\u003c/code\u003e return the abbreviation of themonth.\n * @return a string representing the supplied month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.stringToMonthCode#435",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.stringToMonthCode(java.lang.String)",
    "snippet": "public static int stringToMonthCode(String s){\n  final String[] shortMonthNames\u003dDATE_FORMAT_SYMBOLS.getShortMonths();\n  final String[] monthNames\u003dDATE_FORMAT_SYMBOLS.getMonths();\n  int result\u003d-1;\n  s\u003ds.trim();\n  try {\n    result\u003dInteger.parseInt(s);\n  }\n catch (  NumberFormatException e) {\n  }\n  if ((result \u003c 1) || (result \u003e 12)) {\n    for (int i\u003d0; i \u003c monthNames.length; i++) {\n      if (s.equals(shortMonthNames[i])) {\n        result\u003di + 1;\n        break;\n      }\n      if (s.equals(monthNames[i])) {\n        result\u003di + 1;\n        break;\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 435,
    "end_line": 467,
    "comment": "/** \n * Converts a string to a month code. \u003cP\u003e This method will return one of the constants JANUARY, FEBRUARY, ..., DECEMBER that corresponds to the string.  If the string is not recognised, this method returns -1.\n * @param s  the string to parse.\n * @return \u003ccode\u003e-1\u003c/code\u003e if the string is not parseable, the month of theyear otherwise.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isValidWeekInMonthCode#477",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isValidWeekInMonthCode(int)",
    "snippet": "public static boolean isValidWeekInMonthCode(final int code){\nswitch (code) {\ncase FIRST_WEEK_IN_MONTH:case SECOND_WEEK_IN_MONTH:case THIRD_WEEK_IN_MONTH:case FOURTH_WEEK_IN_MONTH:case LAST_WEEK_IN_MONTH:    return true;\ndefault:  return false;\n}\n}",
    "begin_line": 477,
    "end_line": 488,
    "comment": "/** \n * Returns true if the supplied integer code represents a valid week-in-the-month, and false otherwise.\n * @param code  the code being checked for validity.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the supplied integer code represents avalid week-in-the-month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isLeapYear#497",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isLeapYear(int)",
    "snippet": "public static boolean isLeapYear(final int yyyy){\n  if ((yyyy % 4) !\u003d 0) {\n    return false;\n  }\n else   if ((yyyy % 400) \u003d\u003d 0) {\n    return true;\n  }\n else   if ((yyyy % 100) \u003d\u003d 0) {\n    return false;\n  }\n else {\n    return true;\n  }\n}",
    "begin_line": 497,
    "end_line": 512,
    "comment": "/** \n * Determines whether or not the specified year is a leap year.\n * @param yyyy  the year (in the range 1900 to 9999).\n * @return \u003ccode\u003etrue\u003c/code\u003e if the specified year is a leap year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.leapYearCount#524",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.leapYearCount(int)",
    "snippet": "public static int leapYearCount(final int yyyy){\n  final int leap4\u003d(yyyy - 1896) / 4;\n  final int leap100\u003d(yyyy - 1800) / 100;\n  final int leap400\u003d(yyyy - 1600) / 400;\n  return leap4 - leap100 + leap400;\n}",
    "begin_line": 524,
    "end_line": 531,
    "comment": "/** \n * Returns the number of leap years from 1900 to the specified year INCLUSIVE. \u003cP\u003e Note that 1900 is not a leap year.\n * @param yyyy  the year (in the range 1900 to 9999).\n * @return the number of leap years from 1900 to the specified year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.lastDayOfMonth#542",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.lastDayOfMonth(int, int)",
    "snippet": "public static int lastDayOfMonth(final int month,final int yyyy){\n  final int result\u003dLAST_DAY_OF_MONTH[month];\n  if (month !\u003d FEBRUARY) {\n    return result;\n  }\n else   if (isLeapYear(yyyy)) {\n    return result + 1;\n  }\n else {\n    return result;\n  }\n}",
    "begin_line": 542,
    "end_line": 555,
    "comment": "/** \n * Returns the number of the last day of the month, taking into account leap years.\n * @param month  the month.\n * @param yyyy  the year (in the range 1900 to 9999).\n * @return the number of the last day of the month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.addDays#566",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.addDays(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate addDays(final int days,final SerialDate base){\n  final int serialDayNumber\u003dbase.toSerial() + days;\n  return SerialDate.createInstance(serialDayNumber);\n}",
    "begin_line": 566,
    "end_line": 571,
    "comment": "/** \n * Creates a new date by adding the specified number of days to the base date.\n * @param days  the number of days to add (can be negative).\n * @param base  the base date.\n * @return a new date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.addMonths#585",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.addMonths(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate addMonths(final int months,final SerialDate base){\n  final int yy\u003d(12 * base.getYYYY() + base.getMonth() + months - 1) / 12;\n  final int mm\u003d(12 * base.getYYYY() + base.getMonth() + months - 1) % 12 + 1;\n  final int dd\u003dMath.min(base.getDayOfMonth(),SerialDate.lastDayOfMonth(mm,yy));\n  return SerialDate.createInstance(dd,mm,yy);\n}",
    "begin_line": 585,
    "end_line": 597,
    "comment": "/** \n * Creates a new date by adding the specified number of months to the base date. \u003cP\u003e If the base date is close to the end of the month, the day on the result may be adjusted slightly:  31 May + 1 month \u003d 30 June.\n * @param months  the number of months to add (can be negative).\n * @param base  the base date.\n * @return a new date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.addYears#608",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.addYears(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate addYears(final int years,final SerialDate base){\n  final int baseY\u003dbase.getYYYY();\n  final int baseM\u003dbase.getMonth();\n  final int baseD\u003dbase.getDayOfMonth();\n  final int targetY\u003dbaseY + years;\n  final int targetD\u003dMath.min(baseD,SerialDate.lastDayOfMonth(baseM,targetY));\n  return SerialDate.createInstance(targetD,baseM,targetY);\n}",
    "begin_line": 608,
    "end_line": 621,
    "comment": "/** \n * Creates a new date by adding the specified number of years to the base date.\n * @param years  the number of years to add (can be negative).\n * @param base  the base date.\n * @return A new date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getPreviousDayOfWeek#633",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getPreviousDayOfWeek(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate getPreviousDayOfWeek(final int targetWeekday,final SerialDate base){\n  if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n    throw new IllegalArgumentException(\"Invalid day-of-the-week code.\");\n  }\n  final int adjust;\n  final int baseDOW\u003dbase.getDayOfWeek();\n  if (baseDOW \u003e targetWeekday) {\n    adjust\u003dMath.min(0,targetWeekday - baseDOW);\n  }\n else {\n    adjust\u003d-7 + Math.max(0,targetWeekday - baseDOW);\n  }\n  return SerialDate.addDays(adjust,base);\n}",
    "begin_line": 633,
    "end_line": 655,
    "comment": "/** \n * Returns the latest date that falls on the specified day-of-the-week and is BEFORE the base date.\n * @param targetWeekday  a code for the target day-of-the-week.\n * @param base  the base date.\n * @return the latest date that falls on the specified day-of-the-week andis BEFORE the base date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getFollowingDayOfWeek#667",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getFollowingDayOfWeek(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate getFollowingDayOfWeek(final int targetWeekday,final SerialDate base){\n  if (!SerialDate.isValidWeekdayCode(targetWeekday)) {\n    throw new IllegalArgumentException(\"Invalid day-of-the-week code.\");\n  }\n  final int adjust;\n  final int baseDOW\u003dbase.getDayOfWeek();\n  if (baseDOW \u003e targetWeekday) {\n    adjust\u003d7 + Math.min(0,targetWeekday - baseDOW);\n  }\n else {\n    adjust\u003dMath.max(0,targetWeekday - baseDOW);\n  }\n  return SerialDate.addDays(adjust,base);\n}",
    "begin_line": 667,
    "end_line": 688,
    "comment": "/** \n * Returns the earliest date that falls on the specified day-of-the-week and is AFTER the base date.\n * @param targetWeekday  a code for the target day-of-the-week.\n * @param base  the base date.\n * @return the earliest date that falls on the specified day-of-the-weekand is AFTER the base date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getNearestDayOfWeek#700",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getNearestDayOfWeek(int, org.jfree.data.time.SerialDate)",
    "snippet": "public static SerialDate getNearestDayOfWeek(final int targetDOW,final SerialDate base){\n  if (!SerialDate.isValidWeekdayCode(targetDOW)) {\n    throw new IllegalArgumentException(\"Invalid day-of-the-week code.\");\n  }\n  final int baseDOW\u003dbase.getDayOfWeek();\n  int adjust\u003d-Math.abs(targetDOW - baseDOW);\n  if (adjust \u003e\u003d 4) {\n    adjust\u003d7 - adjust;\n  }\n  if (adjust \u003c\u003d -4) {\n    adjust\u003d7 + adjust;\n  }\n  return SerialDate.addDays(adjust,base);\n}",
    "begin_line": 700,
    "end_line": 721,
    "comment": "/** \n * Returns the date that falls on the specified day-of-the-week and is CLOSEST to the base date.\n * @param targetDOW  a code for the target day-of-the-week.\n * @param base  the base date.\n * @return the date that falls on the specified day-of-the-week and isCLOSEST to the base date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getEndOfCurrentMonth#730",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getEndOfCurrentMonth(org.jfree.data.time.SerialDate)",
    "snippet": "public SerialDate getEndOfCurrentMonth(final SerialDate base){\n  final int last\u003dSerialDate.lastDayOfMonth(base.getMonth(),base.getYYYY());\n  return SerialDate.createInstance(last,base.getMonth(),base.getYYYY());\n}",
    "begin_line": 730,
    "end_line": 735,
    "comment": "/** \n * Rolls the date forward to the last day of the month.\n * @param base  the base date.\n * @return a new serial date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.weekInMonthToString#746",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.weekInMonthToString(int)",
    "snippet": "public static String weekInMonthToString(final int count){\nswitch (count) {\ncase SerialDate.FIRST_WEEK_IN_MONTH:    return \"First\";\ncase SerialDate.SECOND_WEEK_IN_MONTH:  return \"Second\";\ncase SerialDate.THIRD_WEEK_IN_MONTH:return \"Third\";\ncase SerialDate.FOURTH_WEEK_IN_MONTH:return \"Fourth\";\ncase SerialDate.LAST_WEEK_IN_MONTH:return \"Last\";\ndefault:return \"SerialDate.weekInMonthToString(): invalid code.\";\n}\n}",
    "begin_line": 746,
    "end_line": 758,
    "comment": "/** \n * Returns a string corresponding to the week-in-the-month code. \u003cP\u003e Need to find a better approach.\n * @param count  an integer code representing the week-in-the-month.\n * @return a string corresponding to the week-in-the-month code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.relativeToString#769",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.relativeToString(int)",
    "snippet": "public static String relativeToString(final int relative){\nswitch (relative) {\ncase SerialDate.PRECEDING:    return \"Preceding\";\ncase SerialDate.NEAREST:  return \"Nearest\";\ncase SerialDate.FOLLOWING:return \"Following\";\ndefault:return \"ERROR : Relative To String\";\n}\n}",
    "begin_line": 769,
    "end_line": 778,
    "comment": "/** \n * Returns a string representing the supplied \u0027relative\u0027. \u003cP\u003e Need to find a better approach.\n * @param relative  a constant representing the \u0027relative\u0027.\n * @return a string representing the supplied \u0027relative\u0027.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.createInstance#790",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.createInstance(int, int, int)",
    "snippet": "public static SerialDate createInstance(final int day,final int month,final int yyyy){\n  return new SpreadsheetDate(day,month,yyyy);\n}",
    "begin_line": 790,
    "end_line": 793,
    "comment": "/** \n * Factory method that returns an instance of some concrete subclass of {@link SerialDate}.\n * @param day  the day (1-31).\n * @param month  the month (1-12).\n * @param yyyy  the year (in the range 1900 to 9999).\n * @return An instance of {@link SerialDate}.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.createInstance#803",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.createInstance(int)",
    "snippet": "public static SerialDate createInstance(final int serial){\n  return new SpreadsheetDate(serial);\n}",
    "begin_line": 803,
    "end_line": 805,
    "comment": "/** \n * Factory method that returns an instance of some concrete subclass of {@link SerialDate}.\n * @param serial  the serial number for the day (1 January 1900 \u003d 2).\n * @return a instance of SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.createInstance#814",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.createInstance(java.util.Date)",
    "snippet": "public static SerialDate createInstance(final java.util.Date date){\n  final GregorianCalendar calendar\u003dnew GregorianCalendar();\n  calendar.setTime(date);\n  return new SpreadsheetDate(calendar.get(Calendar.DATE),calendar.get(Calendar.MONTH) + 1,calendar.get(Calendar.YEAR));\n}",
    "begin_line": 814,
    "end_line": 822,
    "comment": "/** \n * Factory method that returns an instance of a subclass of SerialDate.\n * @param date  A Java date object.\n * @return a instance of SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.toSerial#831",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.toSerial()",
    "snippet": "public abstract int toSerial();",
    "begin_line": 831,
    "end_line": 831,
    "comment": "/** \n * Returns the serial number for the date, where 1 January 1900 \u003d 2 (this corresponds, almost, to the numbering system used in Microsoft Excel for Windows and Lotus 1-2-3).\n * @return the serial number for the date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.toDate#839",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.toDate()",
    "snippet": "public abstract java.util.Date toDate();",
    "begin_line": 839,
    "end_line": 839,
    "comment": "/** \n * Returns a java.util.Date.  Since java.util.Date has more precision than SerialDate, we need to define a convention for the \u0027time of day\u0027.\n * @return this as \u003ccode\u003ejava.util.Date\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getDescription#848",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getDescription()",
    "snippet": "public String getDescription(){\n  return this.description;\n}",
    "begin_line": 848,
    "end_line": 850,
    "comment": "/** \n * Returns the description that is attached to the date.  It is not required that a date have a description, but for some applications it is useful.\n * @return The description (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.setDescription#858",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.setDescription(java.lang.String)",
    "snippet": "public void setDescription(final String description){\n  this.description\u003ddescription;\n}",
    "begin_line": 858,
    "end_line": 860,
    "comment": "/** \n * Sets the description for the date.\n * @param description  the description for this date (\u003ccode\u003enull\u003c/code\u003epermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.toString#867",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.toString()",
    "snippet": "public String toString(){\n  return getDayOfMonth() + \"-\" + SerialDate.monthCodeToString(getMonth())+ \"-\"+ getYYYY();\n}",
    "begin_line": 867,
    "end_line": 870,
    "comment": "/** \n * Converts the date to a string.\n * @return  a string representation of the date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getYYYY#877",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getYYYY()",
    "snippet": "public abstract int getYYYY();",
    "begin_line": 877,
    "end_line": 877,
    "comment": "/** \n * Returns the year (assume a valid range of 1900 to 9999).\n * @return the year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getMonth#884",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getMonth()",
    "snippet": "public abstract int getMonth();",
    "begin_line": 884,
    "end_line": 884,
    "comment": "/** \n * Returns the month (January \u003d 1, February \u003d 2, March \u003d 3).\n * @return the month of the year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getDayOfMonth#891",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getDayOfMonth()",
    "snippet": "public abstract int getDayOfMonth();",
    "begin_line": 891,
    "end_line": 891,
    "comment": "/** \n * Returns the day of the month.\n * @return the day of the month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getDayOfWeek#898",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getDayOfWeek()",
    "snippet": "public abstract int getDayOfWeek();",
    "begin_line": 898,
    "end_line": 898,
    "comment": "/** \n * Returns the day of the week.\n * @return the day of the week.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.compare#911",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.compare(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract int compare(SerialDate other);",
    "begin_line": 911,
    "end_line": 911,
    "comment": "/** \n * Returns the difference (in days) between this date and the specified \u0027other\u0027 date. \u003cP\u003e The result is positive if this date is after the \u0027other\u0027 date and negative if it is before the \u0027other\u0027 date.\n * @param other  the date being compared to.\n * @return the difference between this and the other date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isOn#922",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isOn(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isOn(SerialDate other);",
    "begin_line": 922,
    "end_line": 922,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same date asthe specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isBefore#933",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isBefore(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isBefore(SerialDate other);",
    "begin_line": 933,
    "end_line": 933,
    "comment": "/** \n * Returns true if this SerialDate represents an earlier date compared to the specified SerialDate.\n * @param other  The date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents an earlier datecompared to the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isOnOrBefore#944",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isOnOrBefore(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isOnOrBefore(SerialDate other);",
    "begin_line": 944,
    "end_line": 944,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003ccode\u003e if this SerialDate represents the same dateas the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isAfter#955",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isAfter(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isAfter(SerialDate other);",
    "begin_line": 955,
    "end_line": 955,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same dateas the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isOnOrAfter#966",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isOnOrAfter(org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isOnOrAfter(SerialDate other);",
    "begin_line": 966,
    "end_line": 966,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same dateas the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isInRange#978",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isInRange(org.jfree.data.time.SerialDate, org.jfree.data.time.SerialDate)",
    "snippet": "public abstract boolean isInRange(SerialDate d1,SerialDate d2);",
    "begin_line": 978,
    "end_line": 978,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this  {@link SerialDate} is within thespecified range (INCLUSIVE).  The date order of d1 and d2 is not important.\n * @param d1  a boundary date for the range.\n * @param d2  the other boundary date for the range.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.isInRange#992",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.isInRange(org.jfree.data.time.SerialDate, org.jfree.data.time.SerialDate, int)",
    "snippet": "public abstract boolean isInRange(SerialDate d1,SerialDate d2,int include);",
    "begin_line": 992,
    "end_line": 993,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this  {@link SerialDate} is within thespecified range (caller specifies whether or not the end-points are included).  The date order of d1 and d2 is not important.\n * @param d1  a boundary date for the range.\n * @param d2  the other boundary date for the range.\n * @param include  a code that controls whether or not the start and enddates are included in the range.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getPreviousDayOfWeek#1004",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getPreviousDayOfWeek(int)",
    "snippet": "public SerialDate getPreviousDayOfWeek(final int targetDOW){\n  return getPreviousDayOfWeek(targetDOW,this);\n}",
    "begin_line": 1004,
    "end_line": 1006,
    "comment": "/** \n * Returns the latest date that falls on the specified day-of-the-week and is BEFORE this date.\n * @param targetDOW  a code for the target day-of-the-week.\n * @return the latest date that falls on the specified day-of-the-week andis BEFORE this date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getFollowingDayOfWeek#1017",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getFollowingDayOfWeek(int)",
    "snippet": "public SerialDate getFollowingDayOfWeek(final int targetDOW){\n  return getFollowingDayOfWeek(targetDOW,this);\n}",
    "begin_line": 1017,
    "end_line": 1019,
    "comment": "/** \n * Returns the earliest date that falls on the specified day-of-the-week and is AFTER this date.\n * @param targetDOW  a code for the target day-of-the-week.\n * @return the earliest date that falls on the specified day-of-the-weekand is AFTER this date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SerialDate.getNearestDayOfWeek#1028",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SerialDate.java",
    "class_name": "org.jfree.data.time.SerialDate",
    "signature": "org.jfree.data.time.SerialDate.getNearestDayOfWeek(int)",
    "snippet": "public SerialDate getNearestDayOfWeek(final int targetDOW){\n  return getNearestDayOfWeek(targetDOW,this);\n}",
    "begin_line": 1028,
    "end_line": 1030,
    "comment": "/** \n * Returns the nearest date that falls on the specified day-of-the-week.\n * @param targetDOW  a code for the target day-of-the-week.\n * @return the nearest date that falls on the specified day-of-the-week.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.SpreadsheetDate#107",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.SpreadsheetDate(int, int, int)",
    "snippet": "public SpreadsheetDate(final int day,final int month,final int year){\n  if ((year \u003e\u003d 1900) \u0026\u0026 (year \u003c\u003d 9999)) {\n    this.year\u003dyear;\n  }\n else {\n    throw new IllegalArgumentException(\"The \u0027year\u0027 argument must be in range 1900 to 9999.\");\n  }\n  if ((month \u003e\u003d MonthConstants.JANUARY) \u0026\u0026 (month \u003c\u003d MonthConstants.DECEMBER)) {\n    this.month\u003dmonth;\n  }\n else {\n    throw new IllegalArgumentException(\"The \u0027month\u0027 argument must be in the range 1 to 12.\");\n  }\n  if ((day \u003e\u003d 1) \u0026\u0026 (day \u003c\u003d SerialDate.lastDayOfMonth(month,year))) {\n    this.day\u003dday;\n  }\n else {\n    throw new IllegalArgumentException(\"Invalid \u0027day\u0027 argument.\");\n  }\n  this.serial\u003dcalcSerial(day,month,year);\n}",
    "begin_line": 107,
    "end_line": 138,
    "comment": "/** \n * Creates a new date instance.\n * @param day  the day (in the range 1 to 28/29/30/31).\n * @param month  the month (in the range 1 to 12).\n * @param year  the year (in the range 1900 to 9999).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.SpreadsheetDate#146",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.SpreadsheetDate(int)",
    "snippet": "public SpreadsheetDate(final int serial){\n  if ((serial \u003e\u003d SERIAL_LOWER_BOUND) \u0026\u0026 (serial \u003c\u003d SERIAL_UPPER_BOUND)) {\n    this.serial\u003dserial;\n  }\n else {\n    throw new IllegalArgumentException(\"SpreadsheetDate: Serial must be in range 2 to 2958465.\");\n  }\n  final int days\u003dthis.serial - SERIAL_LOWER_BOUND;\n  final int overestimatedYYYY\u003d1900 + (days / 365);\n  final int leaps\u003dSerialDate.leapYearCount(overestimatedYYYY);\n  final int nonleapdays\u003ddays - leaps;\n  int underestimatedYYYY\u003d1900 + (nonleapdays / 365);\n  if (underestimatedYYYY \u003d\u003d overestimatedYYYY) {\n    this.year\u003dunderestimatedYYYY;\n  }\n else {\n    int ss1\u003dcalcSerial(1,1,underestimatedYYYY);\n    while (ss1 \u003c\u003d this.serial) {\n      underestimatedYYYY\u003dunderestimatedYYYY + 1;\n      ss1\u003dcalcSerial(1,1,underestimatedYYYY);\n    }\n    this.year\u003dunderestimatedYYYY - 1;\n  }\n  final int ss2\u003dcalcSerial(1,1,this.year);\n  int[] daysToEndOfPrecedingMonth\u003dAGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n  if (isLeapYear(this.year)) {\n    daysToEndOfPrecedingMonth\u003dLEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH;\n  }\n  int mm\u003d1;\n  int sss\u003dss2 + daysToEndOfPrecedingMonth[mm] - 1;\n  while (sss \u003c this.serial) {\n    mm\u003dmm + 1;\n    sss\u003dss2 + daysToEndOfPrecedingMonth[mm] - 1;\n  }\n  this.month\u003dmm - 1;\n  this.day\u003dthis.serial - ss2 - daysToEndOfPrecedingMonth[this.month] + 1;\n}",
    "begin_line": 146,
    "end_line": 201,
    "comment": "/** \n * Standard constructor - creates a new date object representing the specified day number (which should be in the range 2 to 2958465.\n * @param serial  the serial number for the day (range: 2 to 2958465).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.toSerial#210",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.toSerial()",
    "snippet": "public int toSerial(){\n  return this.serial;\n}",
    "begin_line": 210,
    "end_line": 212,
    "comment": "/** \n * Returns the serial number for the date, where 1 January 1900 \u003d 2 (this corresponds, almost, to the numbering system used in Microsoft Excel for Windows and Lotus 1-2-3).\n * @return The serial number of this date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.toDate#219",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.toDate()",
    "snippet": "public Date toDate(){\n  final Calendar calendar\u003dCalendar.getInstance();\n  calendar.set(getYYYY(),getMonth() - 1,getDayOfMonth(),0,0,0);\n  return calendar.getTime();\n}",
    "begin_line": 219,
    "end_line": 223,
    "comment": "/** \n * Returns a \u003ccode\u003ejava.util.Date\u003c/code\u003e equivalent to this date.\n * @return The date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.getYYYY#230",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.getYYYY()",
    "snippet": "public int getYYYY(){\n  return this.year;\n}",
    "begin_line": 230,
    "end_line": 232,
    "comment": "/** \n * Returns the year (assume a valid range of 1900 to 9999).\n * @return The year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.getMonth#239",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.getMonth()",
    "snippet": "public int getMonth(){\n  return this.month;\n}",
    "begin_line": 239,
    "end_line": 241,
    "comment": "/** \n * Returns the month (January \u003d 1, February \u003d 2, March \u003d 3).\n * @return The month of the year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.getDayOfMonth#248",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.getDayOfMonth()",
    "snippet": "public int getDayOfMonth(){\n  return this.day;\n}",
    "begin_line": 248,
    "end_line": 250,
    "comment": "/** \n * Returns the day of the month.\n * @return The day of the month.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.getDayOfWeek#262",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.getDayOfWeek()",
    "snippet": "public int getDayOfWeek(){\n  return (this.serial + 6) % 7 + 1;\n}",
    "begin_line": 262,
    "end_line": 264,
    "comment": "/** \n * Returns a code representing the day of the week. \u003cP\u003e The codes are defined in the  {@link SerialDate} class as:\u003ccode\u003eSUNDAY\u003c/code\u003e, \u003ccode\u003eMONDAY\u003c/code\u003e, \u003ccode\u003eTUESDAY\u003c/code\u003e, \u003ccode\u003eWEDNESDAY\u003c/code\u003e, \u003ccode\u003eTHURSDAY\u003c/code\u003e, \u003ccode\u003eFRIDAY\u003c/code\u003e, and \u003ccode\u003eSATURDAY\u003c/code\u003e.\n * @return A code representing the day of the week.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.equals#277",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.equals(java.lang.Object)",
    "snippet": "public boolean equals(final Object object){\n  if (object instanceof SerialDate) {\n    final SerialDate s\u003d(SerialDate)object;\n    return (s.toSerial() \u003d\u003d this.toSerial());\n  }\n else {\n    return false;\n  }\n}",
    "begin_line": 277,
    "end_line": 287,
    "comment": "/** \n * Tests the equality of this date with an arbitrary object. \u003cP\u003e This method will return true ONLY if the object is an instance of the {@link SerialDate} base class, and it represents the same day as this{@link SpreadsheetDate}.\n * @param object  the object to compare (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.hashCode#294",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.hashCode()",
    "snippet": "public int hashCode(){\n  return toSerial();\n}",
    "begin_line": 294,
    "end_line": 296,
    "comment": "/** \n * Returns a hash code for this object instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.compare#307",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.compare(org.jfree.data.time.SerialDate)",
    "snippet": "public int compare(final SerialDate other){\n  return this.serial - other.toSerial();\n}",
    "begin_line": 307,
    "end_line": 309,
    "comment": "/** \n * Returns the difference (in days) between this date and the specified \u0027other\u0027 date.\n * @param other  the date being compared to.\n * @return The difference (in days) between this date and the specified\u0027other\u0027 date.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.compareTo#319",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.compareTo(java.lang.Object)",
    "snippet": "public int compareTo(final Object other){\n  return compare((SerialDate)other);\n}",
    "begin_line": 319,
    "end_line": 321,
    "comment": "/** \n * Implements the method required by the Comparable interface.\n * @param other  the other object (usually another SerialDate).\n * @return A negative integer, zero, or a positive integer as this objectis less than, equal to, or greater than the specified object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isOn#332",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isOn(org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isOn(final SerialDate other){\n  return (this.serial \u003d\u003d other.toSerial());\n}",
    "begin_line": 332,
    "end_line": 334,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same date asthe specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isBefore#345",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isBefore(org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isBefore(final SerialDate other){\n  return (this.serial \u003c other.toSerial());\n}",
    "begin_line": 345,
    "end_line": 347,
    "comment": "/** \n * Returns true if this SerialDate represents an earlier date compared to the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents an earlier datecompared to the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isOnOrBefore#358",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isOnOrBefore(org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isOnOrBefore(final SerialDate other){\n  return (this.serial \u003c\u003d other.toSerial());\n}",
    "begin_line": 358,
    "end_line": 360,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same dateas the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isAfter#371",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isAfter(org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isAfter(final SerialDate other){\n  return (this.serial \u003e other.toSerial());\n}",
    "begin_line": 371,
    "end_line": 373,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same dateas the specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isOnOrAfter#384",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isOnOrAfter(org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isOnOrAfter(final SerialDate other){\n  return (this.serial \u003e\u003d other.toSerial());\n}",
    "begin_line": 384,
    "end_line": 386,
    "comment": "/** \n * Returns true if this SerialDate represents the same date as the specified SerialDate.\n * @param other  the date being compared to.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate represents the same date asthe specified SerialDate.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isInRange#398",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isInRange(org.jfree.data.time.SerialDate, org.jfree.data.time.SerialDate)",
    "snippet": "public boolean isInRange(final SerialDate d1,final SerialDate d2){\n  return isInRange(d1,d2,SerialDate.INCLUDE_BOTH);\n}",
    "begin_line": 398,
    "end_line": 400,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this  {@link SerialDate} is within thespecified range (INCLUSIVE).  The date order of d1 and d2 is not important.\n * @param d1  a boundary date for the range.\n * @param d2  the other boundary date for the range.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.isInRange#415",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.isInRange(org.jfree.data.time.SerialDate, org.jfree.data.time.SerialDate, int)",
    "snippet": "public boolean isInRange(final SerialDate d1,final SerialDate d2,final int include){\n  final int s1\u003dd1.toSerial();\n  final int s2\u003dd2.toSerial();\n  final int start\u003dMath.min(s1,s2);\n  final int end\u003dMath.max(s1,s2);\n  final int s\u003dtoSerial();\n  if (include \u003d\u003d SerialDate.INCLUDE_BOTH) {\n    return (s \u003e\u003d start \u0026\u0026 s \u003c\u003d end);\n  }\n else   if (include \u003d\u003d SerialDate.INCLUDE_FIRST) {\n    return (s \u003e\u003d start \u0026\u0026 s \u003c end);\n  }\n else   if (include \u003d\u003d SerialDate.INCLUDE_SECOND) {\n    return (s \u003e start \u0026\u0026 s \u003c\u003d end);\n  }\n else {\n    return (s \u003e start \u0026\u0026 s \u003c end);\n  }\n}",
    "begin_line": 415,
    "end_line": 435,
    "comment": "/** \n * Returns true if this SerialDate is within the specified range (caller specifies whether or not the end-points are included).  The order of d1 and d2 is not important.\n * @param d1  one boundary date for the range.\n * @param d2  a second boundary date for the range.\n * @param include  a code that controls whether or not the start and enddates are included in the range.\n * @return \u003ccode\u003etrue\u003c/code\u003e if this SerialDate is within the specifiedrange.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "SpreadsheetDate.calcSerial#448",
    "is_bug": true,
    "src_path": "org/jfree/data/time/SpreadsheetDate.java",
    "class_name": "org.jfree.data.time.SpreadsheetDate",
    "signature": "org.jfree.data.time.SpreadsheetDate.calcSerial(int, int, int)",
    "snippet": "private int calcSerial(final int d,final int m,final int y){\n  final int yy\u003d((y - 1900) * 365) + SerialDate.leapYearCount(y - 1);\n  int mm\u003dSerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH[m];\n  if (m \u003e MonthConstants.FEBRUARY) {\n    if (SerialDate.isLeapYear(y)) {\n      mm\u003dmm + 1;\n    }\n  }\n  final int dd\u003dd;\n  return yy + mm + dd+ 1;\n}",
    "begin_line": 448,
    "end_line": 458,
    "comment": "/** \n * Calculate the serial number from the day, month and year. \u003cP\u003e 1-Jan-1900 \u003d 2.\n * @param d  the day.\n * @param m  the month.\n * @param y  the year.\n * @return the serial number from the day, month and year.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimePeriodAnchor.TimePeriodAnchor#76",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "signature": "org.jfree.data.time.TimePeriodAnchor.TimePeriodAnchor(java.lang.String)",
    "snippet": "private TimePeriodAnchor(String name){\n  this.name\u003dname;\n}",
    "begin_line": 76,
    "end_line": 78,
    "comment": "/** \n * Private constructor.\n * @param name  the name.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimePeriodAnchor.toString#85",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "signature": "org.jfree.data.time.TimePeriodAnchor.toString()",
    "snippet": "public String toString(){\n  return this.name;\n}",
    "begin_line": 85,
    "end_line": 87,
    "comment": "/** \n * Returns a string representing the object.\n * @return The string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimePeriodAnchor.equals#97",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "signature": "org.jfree.data.time.TimePeriodAnchor.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof TimePeriodAnchor)) {\n    return false;\n  }\n  TimePeriodAnchor position\u003d(TimePeriodAnchor)obj;\n  if (!this.name.equals(position.name)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 97,
    "end_line": 112,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if this object is equal to the specified object, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimePeriodAnchor.hashCode#119",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "signature": "org.jfree.data.time.TimePeriodAnchor.hashCode()",
    "snippet": "public int hashCode(){\n  return this.name.hashCode();\n}",
    "begin_line": 119,
    "end_line": 121,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimePeriodAnchor.readResolve#130",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimePeriodAnchor.java",
    "class_name": "org.jfree.data.time.TimePeriodAnchor",
    "signature": "org.jfree.data.time.TimePeriodAnchor.readResolve()",
    "snippet": "private Object readResolve() throws ObjectStreamException {\n  if (this.equals(TimePeriodAnchor.START)) {\n    return TimePeriodAnchor.START;\n  }\n else   if (this.equals(TimePeriodAnchor.MIDDLE)) {\n    return TimePeriodAnchor.MIDDLE;\n  }\n else   if (this.equals(TimePeriodAnchor.END)) {\n    return TimePeriodAnchor.END;\n  }\n  return null;\n}",
    "begin_line": 130,
    "end_line": 141,
    "comment": "/** \n * Ensures that serialization returns the unique instances.\n * @return The object.\n * @throws ObjectStreamException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.TimeSeries#167",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable)",
    "snippet": "public TimeSeries(Comparable name){\n  this(name,DEFAULT_DOMAIN_DESCRIPTION,DEFAULT_RANGE_DESCRIPTION);\n}",
    "begin_line": 167,
    "end_line": 169,
    "comment": "/** \n * Creates a new (empty) time series.  By default, a daily time series is created.  Use one of the other constructors if you require a different time period.\n * @param name  the series name (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.TimeSeries#184",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.TimeSeries(java.lang.Comparable, java.lang.String, java.lang.String)",
    "snippet": "public TimeSeries(Comparable name,String domain,String range){\n  super(name);\n  this.domain\u003ddomain;\n  this.range\u003drange;\n  this.timePeriodClass\u003dnull;\n  this.data\u003dnew java.util.ArrayList();\n  this.maximumItemCount\u003dInteger.MAX_VALUE;\n  this.maximumItemAge\u003dLong.MAX_VALUE;\n  this.minY\u003dDouble.NaN;\n  this.maxY\u003dDouble.NaN;\n}",
    "begin_line": 184,
    "end_line": 194,
    "comment": "/** \n * Creates a new time series that contains no data. \u003cP\u003e Descriptions can be specified for the domain and range.  One situation where this is helpful is when generating a chart for the time series - axis labels can be taken from the domain and range description.\n * @param name  the name of the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param domain  the domain description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param range  the range description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getDomainDescription#203",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getDomainDescription()",
    "snippet": "public String getDomainDescription(){\n  return this.domain;\n}",
    "begin_line": 203,
    "end_line": 205,
    "comment": "/** \n * Returns the domain description.\n * @return The domain description (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setDomainDescription(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.setDomainDescription#216",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.setDomainDescription(java.lang.String)",
    "snippet": "public void setDomainDescription(String description){\n  String old\u003dthis.domain;\n  this.domain\u003ddescription;\n  firePropertyChange(\"Domain\",old,description);\n}",
    "begin_line": 216,
    "end_line": 220,
    "comment": "/** \n * Sets the domain description and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e (with the property name \u003ccode\u003eDomain\u003c/code\u003e) to all registered property change listeners.\n * @param description  the description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getDomainDescription()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getRangeDescription#229",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getRangeDescription()",
    "snippet": "public String getRangeDescription(){\n  return this.range;\n}",
    "begin_line": 229,
    "end_line": 231,
    "comment": "/** \n * Returns the range description.\n * @return The range description (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #setRangeDescription(String)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.setRangeDescription#241",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.setRangeDescription(java.lang.String)",
    "snippet": "public void setRangeDescription(String description){\n  String old\u003dthis.range;\n  this.range\u003ddescription;\n  firePropertyChange(\"Range\",old,description);\n}",
    "begin_line": 241,
    "end_line": 245,
    "comment": "/** \n * Sets the range description and sends a \u003ccode\u003ePropertyChangeEvent\u003c/code\u003e (with the property name \u003ccode\u003eRange\u003c/code\u003e) to all registered listeners.\n * @param description  the description (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getRangeDescription()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getItemCount#252",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getItemCount()",
    "snippet": "public int getItemCount(){\n  return this.data.size();\n}",
    "begin_line": 252,
    "end_line": 254,
    "comment": "/** \n * Returns the number of items in the series.\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getItems#262",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getItems()",
    "snippet": "public List getItems(){\n  return Collections.unmodifiableList(this.data);\n}",
    "begin_line": 262,
    "end_line": 265,
    "comment": "/** \n * Returns the list of data items for the series (the list contains {@link TimeSeriesDataItem} objects and is unmodifiable).\n * @return The list of data items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getMaximumItemCount#275",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getMaximumItemCount()",
    "snippet": "public int getMaximumItemCount(){\n  return this.maximumItemCount;\n}",
    "begin_line": 275,
    "end_line": 277,
    "comment": "/** \n * Returns the maximum number of items that will be retained in the series. The default value is \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e.\n * @return The maximum item count.\n * @see #setMaximumItemCount(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.setMaximumItemCount#290",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.setMaximumItemCount(int)",
    "snippet": "public void setMaximumItemCount(int maximum){\n  if (maximum \u003c 0) {\n    throw new IllegalArgumentException(\"Negative \u0027maximum\u0027 argument.\");\n  }\n  this.maximumItemCount\u003dmaximum;\n  int count\u003dthis.data.size();\n  if (count \u003e maximum) {\n    delete(0,count - maximum - 1);\n  }\n}",
    "begin_line": 290,
    "end_line": 299,
    "comment": "/** \n * Sets the maximum number of items that will be retained in the series. If you add a new item to the series such that the number of items will exceed the maximum item count, then the FIRST element in the series is automatically removed, ensuring that the maximum item count is not exceeded.\n * @param maximum  the maximum (requires \u003e\u003d 0).\n * @see #getMaximumItemCount()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getMaximumItemAge#308",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getMaximumItemAge()",
    "snippet": "public long getMaximumItemAge(){\n  return this.maximumItemAge;\n}",
    "begin_line": 308,
    "end_line": 310,
    "comment": "/** \n * Returns the maximum item age (in time periods) for the series.\n * @return The maximum item age.\n * @see #setMaximumItemAge(long)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.setMaximumItemAge#324",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.setMaximumItemAge(long)",
    "snippet": "public void setMaximumItemAge(long periods){\n  if (periods \u003c 0) {\n    throw new IllegalArgumentException(\"Negative \u0027periods\u0027 argument.\");\n  }\n  this.maximumItemAge\u003dperiods;\n  removeAgedItems(true);\n}",
    "begin_line": 324,
    "end_line": 330,
    "comment": "/** \n * Sets the number of time units in the \u0027history\u0027 for the series.  This provides one mechanism for automatically dropping old data from the time series. For example, if a series contains daily data, you might set the history count to 30.  Then, when you add a new data item, all data items more than 30 days older than the latest value are automatically dropped from the series.\n * @param periods  the number of time periods.\n * @see #getMaximumItemAge()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getMinY#343",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getMinY()",
    "snippet": "public double getMinY(){\n  return this.minY;\n}",
    "begin_line": 343,
    "end_line": 345,
    "comment": "/** \n * Returns the smallest y-value in the series, ignoring any null and Double.NaN values.  This method returns Double.NaN if there is no smallest y-value (for example, when the series is empty).\n * @return The smallest y-value.\n * @see #getMaxY()\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getMaxY#358",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getMaxY()",
    "snippet": "public double getMaxY(){\n  return this.maxY;\n}",
    "begin_line": 358,
    "end_line": 360,
    "comment": "/** \n * Returns the largest y-value in the series, ignoring any Double.NaN values.  This method returns Double.NaN if there is no largest y-value (for example, when the series is empty).\n * @return The largest y-value.\n * @see #getMinY()\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getTimePeriodClass#372",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getTimePeriodClass()",
    "snippet": "public Class getTimePeriodClass(){\n  return this.timePeriodClass;\n}",
    "begin_line": 372,
    "end_line": 374,
    "comment": "/** \n * Returns the time period class for this series. \u003cp\u003e Only one time period class can be used within a single series (enforced). If you add a data item with a  {@link Year} for the time period, then allsubsequent data items must also have a  {@link Year} for the time period.\n * @return The time period class (may be \u003ccode\u003enull\u003c/code\u003e but only foran empty series).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getDataItem#387",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getDataItem(int)",
    "snippet": "public TimeSeriesDataItem getDataItem(int index){\n  TimeSeriesDataItem item\u003d(TimeSeriesDataItem)this.data.get(index);\n  return (TimeSeriesDataItem)item.clone();\n}",
    "begin_line": 387,
    "end_line": 390,
    "comment": "/** \n * Returns a data item from the dataset.  Note that the returned object is a clone of the item in the series, so modifying it will have no effect on the data series.\n * @param index  the item index.\n * @return The data item.\n * @see #getDataItem(RegularTimePeriod)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getDataItem#404",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getDataItem(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "public TimeSeriesDataItem getDataItem(RegularTimePeriod period){\n  int index\u003dgetIndex(period);\n  if (index \u003e\u003d 0) {\n    return getDataItem(index);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 404,
    "end_line": 412,
    "comment": "/** \n * Returns the data item for a specific period.  Note that the returned object is a clone of the item in the series, so modifying it will have no effect on the data series.\n * @param period  the period of interest (\u003ccode\u003enull\u003c/code\u003e not allowed).\n * @return The data item matching the specified period (or\u003ccode\u003enull\u003c/code\u003e if there is no match).\n * @see #getDataItem(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getRawDataItem#427",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getRawDataItem(int)",
    "snippet": "TimeSeriesDataItem getRawDataItem(int index){\n  return (TimeSeriesDataItem)this.data.get(index);\n}",
    "begin_line": 427,
    "end_line": 429,
    "comment": "/** \n * Returns a data item for the series.  This method returns the object that is used for the underlying storage - you should not modify the contents of the returned value unless you know what you are doing.\n * @param index  the item index (zero-based).\n * @return The data item.\n * @see #getDataItem(int)\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getRawDataItem#444",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getRawDataItem(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "TimeSeriesDataItem getRawDataItem(RegularTimePeriod period){\n  int index\u003dgetIndex(period);\n  if (index \u003e\u003d 0) {\n    return (TimeSeriesDataItem)this.data.get(index);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 444,
    "end_line": 452,
    "comment": "/** \n * Returns a data item for the series.  This method returns the object that is used for the underlying storage - you should not modify the contents of the returned value unless you know what you are doing.\n * @param period  the item index (zero-based).\n * @return The data item.\n * @see #getDataItem(RegularTimePeriod)\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getTimePeriod#461",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getTimePeriod(int)",
    "snippet": "public RegularTimePeriod getTimePeriod(int index){\n  return getRawDataItem(index).getPeriod();\n}",
    "begin_line": 461,
    "end_line": 463,
    "comment": "/** \n * Returns the time period at the specified index.\n * @param index  the index of the data item.\n * @return The time period.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getNextTimePeriod#471",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getNextTimePeriod()",
    "snippet": "public RegularTimePeriod getNextTimePeriod(){\n  RegularTimePeriod last\u003dgetTimePeriod(getItemCount() - 1);\n  return last.next();\n}",
    "begin_line": 471,
    "end_line": 474,
    "comment": "/** \n * Returns a time period that would be the next in sequence on the end of the time series.\n * @return The next time period.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getTimePeriods#481",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getTimePeriods()",
    "snippet": "public Collection getTimePeriods(){\n  Collection result\u003dnew java.util.ArrayList();\n  for (int i\u003d0; i \u003c getItemCount(); i++) {\n    result.add(getTimePeriod(i));\n  }\n  return result;\n}",
    "begin_line": 481,
    "end_line": 487,
    "comment": "/** \n * Returns a collection of all the time periods in the time series.\n * @return A collection of all the time periods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getTimePeriodsUniqueToOtherSeries#497",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries)",
    "snippet": "public Collection getTimePeriodsUniqueToOtherSeries(TimeSeries series){\n  Collection result\u003dnew java.util.ArrayList();\n  for (int i\u003d0; i \u003c series.getItemCount(); i++) {\n    RegularTimePeriod period\u003dseries.getTimePeriod(i);\n    int index\u003dgetIndex(period);\n    if (index \u003c 0) {\n      result.add(period);\n    }\n  }\n  return result;\n}",
    "begin_line": 497,
    "end_line": 507,
    "comment": "/** \n * Returns a collection of time periods in the specified series, but not in this series, and therefore unique to the specified series.\n * @param series  the series to check against this one.\n * @return The unique time periods.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getIndex#517",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getIndex(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "public int getIndex(RegularTimePeriod period){\n  if (period \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027period\u0027 argument.\");\n  }\n  TimeSeriesDataItem dummy\u003dnew TimeSeriesDataItem(period,Integer.MIN_VALUE);\n  return Collections.binarySearch(this.data,dummy);\n}",
    "begin_line": 517,
    "end_line": 524,
    "comment": "/** \n * Returns the index for the item (if any) that corresponds to a time period.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getValue#533",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getValue(int)",
    "snippet": "public Number getValue(int index){\n  return getRawDataItem(index).getValue();\n}",
    "begin_line": 533,
    "end_line": 535,
    "comment": "/** \n * Returns the value at the specified index.\n * @param index  index of a value.\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.getValue#545",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.getValue(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "public Number getValue(RegularTimePeriod period){\n  int index\u003dgetIndex(period);\n  if (index \u003e\u003d 0) {\n    return getValue(index);\n  }\n else {\n    return null;\n  }\n}",
    "begin_line": 545,
    "end_line": 553,
    "comment": "/** \n * Returns the value for a time period.  If there is no data item with the specified period, this method will return \u003ccode\u003enull\u003c/code\u003e.\n * @param period  time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#562",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem)",
    "snippet": "public void add(TimeSeriesDataItem item){\n  add(item,true);\n}",
    "begin_line": 562,
    "end_line": 564,
    "comment": "/** \n * Adds a data item to the series and sends a  {@link SeriesChangeEvent} toall registered listeners.\n * @param item  the (timeperiod, value) pair (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#574",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem, boolean)",
    "snippet": "public void add(TimeSeriesDataItem item,boolean notify){\n  if (item \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027item\u0027 argument.\");\n  }\n  item\u003d(TimeSeriesDataItem)item.clone();\n  Class c\u003ditem.getPeriod().getClass();\n  if (this.timePeriodClass \u003d\u003d null) {\n    this.timePeriodClass\u003dc;\n  }\n else   if (!this.timePeriodClass.equals(c)) {\n    StringBuffer b\u003dnew StringBuffer();\n    b.append(\"You are trying to add data where the time period class \");\n    b.append(\"is \");\n    b.append(item.getPeriod().getClass().getName());\n    b.append(\", but the TimeSeries is expecting an instance of \");\n    b.append(this.timePeriodClass.getName());\n    b.append(\".\");\n    throw new SeriesException(b.toString());\n  }\n  boolean added\u003dfalse;\n  int count\u003dgetItemCount();\n  if (count \u003d\u003d 0) {\n    this.data.add(item);\n    added\u003dtrue;\n  }\n else {\n    RegularTimePeriod last\u003dgetTimePeriod(getItemCount() - 1);\n    if (item.getPeriod().compareTo(last) \u003e 0) {\n      this.data.add(item);\n      added\u003dtrue;\n    }\n else {\n      int index\u003dCollections.binarySearch(this.data,item);\n      if (index \u003c 0) {\n        this.data.add(-index - 1,item);\n        added\u003dtrue;\n      }\n else {\n        StringBuffer b\u003dnew StringBuffer();\n        b.append(\"You are attempting to add an observation for \");\n        b.append(\"the time period \");\n        b.append(item.getPeriod().toString());\n        b.append(\" but the series already contains an observation\");\n        b.append(\" for that time period. Duplicates are not \");\n        b.append(\"permitted.  Try using the addOrUpdate() method.\");\n        throw new SeriesException(b.toString());\n      }\n    }\n  }\n  if (added) {\n    updateBoundsForAddedItem(item);\n    if (getItemCount() \u003e this.maximumItemCount) {\n      TimeSeriesDataItem d\u003d(TimeSeriesDataItem)this.data.remove(0);\n      updateBoundsForRemovedItem(d);\n    }\n    removeAgedItems(false);\n    if (notify) {\n      fireSeriesChanged();\n    }\n  }\n}",
    "begin_line": 574,
    "end_line": 641,
    "comment": "/** \n * Adds a data item to the series and sends a  {@link SeriesChangeEvent} toall registered listeners.\n * @param item  the (timeperiod, value) pair (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#650",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double)",
    "snippet": "public void add(RegularTimePeriod period,double value){\n  add(period,value,true);\n}",
    "begin_line": 650,
    "end_line": 653,
    "comment": "/** \n * Adds a new data item to the series and sends a  {@link SeriesChangeEvent}to all registered listeners.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#663",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, double, boolean)",
    "snippet": "public void add(RegularTimePeriod period,double value,boolean notify){\n  TimeSeriesDataItem item\u003dnew TimeSeriesDataItem(period,value);\n  add(item,notify);\n}",
    "begin_line": 663,
    "end_line": 667,
    "comment": "/** \n * Adds a new data item to the series and sends a  {@link SeriesChangeEvent}to all registered listeners.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value.\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#677",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
    "snippet": "public void add(RegularTimePeriod period,Number value){\n  add(period,value,true);\n}",
    "begin_line": 677,
    "end_line": 680,
    "comment": "/** \n * Adds a new data item to the series and sends a  {@link org.jfree.data.general.SeriesChangeEvent} to all registeredlisteners.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.add#690",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number, boolean)",
    "snippet": "public void add(RegularTimePeriod period,Number value,boolean notify){\n  TimeSeriesDataItem item\u003dnew TimeSeriesDataItem(period,value);\n  add(item,notify);\n}",
    "begin_line": 690,
    "end_line": 694,
    "comment": "/** \n * Adds a new data item to the series and sends a  {@link SeriesChangeEvent}to all registered listeners.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  notify listeners?\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.update#703",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.update(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
    "snippet": "public void update(RegularTimePeriod period,Number value){\n  TimeSeriesDataItem temp\u003dnew TimeSeriesDataItem(period,value);\n  int index\u003dCollections.binarySearch(this.data,temp);\n  if (index \u003c 0) {\n    throw new SeriesException(\"There is no existing value for the \" + \"specified \u0027period\u0027.\");\n  }\n  update(index,value);\n}",
    "begin_line": 703,
    "end_line": 711,
    "comment": "/** \n * Updates (changes) the value for a time period.  Throws a {@link SeriesException} if the period does not exist.\n * @param period  the period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.update#719",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.update(int, java.lang.Number)",
    "snippet": "public void update(int index,Number value){\n  TimeSeriesDataItem item\u003d(TimeSeriesDataItem)this.data.get(index);\n  boolean iterate\u003dfalse;\n  Number oldYN\u003ditem.getValue();\n  if (oldYN !\u003d null) {\n    double oldY\u003doldYN.doubleValue();\n    if (!Double.isNaN(oldY)) {\n      iterate\u003doldY \u003c\u003d this.minY || oldY \u003e\u003d this.maxY;\n    }\n  }\n  item.setValue(value);\n  if (iterate) {\n    findBoundsByIteration();\n  }\n else   if (value !\u003d null) {\n    double yy\u003dvalue.doubleValue();\n    this.minY\u003dminIgnoreNaN(this.minY,yy);\n    this.maxY\u003dmaxIgnoreNaN(this.maxY,yy);\n  }\n  fireSeriesChanged();\n}",
    "begin_line": 719,
    "end_line": 739,
    "comment": "/** \n * Updates (changes) the value of a data item.\n * @param index  the index of the data item.\n * @param value  the new value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.addAndOrUpdate#749",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.addAndOrUpdate(org.jfree.data.time.TimeSeries)",
    "snippet": "public TimeSeries addAndOrUpdate(TimeSeries series){\n  TimeSeries overwritten\u003dnew TimeSeries(\"Overwritten values from: \" + getKey());\n  for (int i\u003d0; i \u003c series.getItemCount(); i++) {\n    TimeSeriesDataItem item\u003dseries.getRawDataItem(i);\n    TimeSeriesDataItem oldItem\u003daddOrUpdate(item.getPeriod(),item.getValue());\n    if (oldItem !\u003d null) {\n      overwritten.add(oldItem);\n    }\n  }\n  return overwritten;\n}",
    "begin_line": 749,
    "end_line": 761,
    "comment": "/** \n * Adds or updates data from one series to another.  Returns another series containing the values that were overwritten.\n * @param series  the series to merge with this.\n * @return A series containing the values that were overwritten.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.addOrUpdate#774",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)",
    "snippet": "public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period,double value){\n  return addOrUpdate(period,new Double(value));\n}",
    "begin_line": 774,
    "end_line": 777,
    "comment": "/** \n * Adds or updates an item in the times series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param period  the time period to add/update (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param value  the new value.\n * @return A copy of the overwritten data item, or \u003ccode\u003enull\u003c/code\u003e if noitem was overwritten.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.addOrUpdate#790",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
    "snippet": "public TimeSeriesDataItem addOrUpdate(RegularTimePeriod period,Number value){\n  return addOrUpdate(new TimeSeriesDataItem(period,value));\n}",
    "begin_line": 790,
    "end_line": 793,
    "comment": "/** \n * Adds or updates an item in the times series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param period  the time period to add/update (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param value  the new value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A copy of the overwritten data item, or \u003ccode\u003enull\u003c/code\u003e if noitem was overwritten.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.addOrUpdate#806",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.TimeSeriesDataItem)",
    "snippet": "public TimeSeriesDataItem addOrUpdate(TimeSeriesDataItem item){\n  if (item \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027period\u0027 argument.\");\n  }\n  Class periodClass\u003ditem.getPeriod().getClass();\n  if (this.timePeriodClass \u003d\u003d null) {\n    this.timePeriodClass\u003dperiodClass;\n  }\n else   if (!this.timePeriodClass.equals(periodClass)) {\n    String msg\u003d\"You are trying to add data where the time \" + \"period class is \" + periodClass.getName() + \", but the TimeSeries is expecting an instance of \"+ this.timePeriodClass.getName()+ \".\";\n    throw new SeriesException(msg);\n  }\n  TimeSeriesDataItem overwritten\u003dnull;\n  int index\u003dCollections.binarySearch(this.data,item);\n  if (index \u003e\u003d 0) {\n    TimeSeriesDataItem existing\u003d(TimeSeriesDataItem)this.data.get(index);\n    overwritten\u003d(TimeSeriesDataItem)existing.clone();\n    boolean iterate\u003dfalse;\n    Number oldYN\u003dexisting.getValue();\n    double oldY\u003doldYN !\u003d null ? oldYN.doubleValue() : Double.NaN;\n    if (!Double.isNaN(oldY)) {\n      iterate\u003doldY \u003c\u003d this.minY || oldY \u003e\u003d this.maxY;\n    }\n    existing.setValue(item.getValue());\n    if (iterate) {\n      findBoundsByIteration();\n    }\n else     if (item.getValue() !\u003d null) {\n      double yy\u003ditem.getValue().doubleValue();\n      this.minY\u003dminIgnoreNaN(this.minY,yy);\n      this.maxY\u003dminIgnoreNaN(this.maxY,yy);\n    }\n  }\n else {\n    item\u003d(TimeSeriesDataItem)item.clone();\n    this.data.add(-index - 1,item);\n    updateBoundsForAddedItem(item);\n    if (getItemCount() \u003e this.maximumItemCount) {\n      TimeSeriesDataItem d\u003d(TimeSeriesDataItem)this.data.remove(0);\n      updateBoundsForRemovedItem(d);\n    }\n  }\n  removeAgedItems(false);\n  fireSeriesChanged();\n  return overwritten;\n}",
    "begin_line": 806,
    "end_line": 863,
    "comment": "/** \n * Adds or updates an item in the times series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param item  the data item (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return A copy of the overwritten data item, or \u003ccode\u003enull\u003c/code\u003e if noitem was overwritten.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.removeAgedItems#873",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(boolean)",
    "snippet": "public void removeAgedItems(boolean notify){\n  if (getItemCount() \u003e 1) {\n    long latest\u003dgetTimePeriod(getItemCount() - 1).getSerialIndex();\n    boolean removed\u003dfalse;\n    while ((latest - getTimePeriod(0).getSerialIndex()) \u003e this.maximumItemAge) {\n      this.data.remove(0);\n      removed\u003dtrue;\n    }\n    if (removed) {\n      findBoundsByIteration();\n      if (notify) {\n        fireSeriesChanged();\n      }\n    }\n  }\n}",
    "begin_line": 873,
    "end_line": 891,
    "comment": "/** \n * Age items in the series.  Ensure that the timespan from the youngest to the oldest record in the series does not exceed maximumItemAge time periods.  Oldest items will be removed if required.\n * @param notify  controls whether or not a {@link SeriesChangeEvent} issent to registered listeners IF any items are removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.removeAgedItems#903",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.removeAgedItems(long, boolean)",
    "snippet": "public void removeAgedItems(long latest,boolean notify){\n  if (this.data.isEmpty()) {\n    return;\n  }\n  long index\u003dLong.MAX_VALUE;\n  try {\n    Method m\u003dRegularTimePeriod.class.getDeclaredMethod(\"createInstance\",new Class[]{Class.class,Date.class,TimeZone.class});\n    RegularTimePeriod newest\u003d(RegularTimePeriod)m.invoke(this.timePeriodClass,new Object[]{this.timePeriodClass,new Date(latest),TimeZone.getDefault()});\n    index\u003dnewest.getSerialIndex();\n  }\n catch (  NoSuchMethodException e) {\n    e.printStackTrace();\n  }\ncatch (  IllegalAccessException e) {\n    e.printStackTrace();\n  }\ncatch (  InvocationTargetException e) {\n    e.printStackTrace();\n  }\n  boolean removed\u003dfalse;\n  while (getItemCount() \u003e 0 \u0026\u0026 (index - getTimePeriod(0).getSerialIndex()) \u003e this.maximumItemAge) {\n    this.data.remove(0);\n    removed\u003dtrue;\n  }\n  if (removed) {\n    findBoundsByIteration();\n    if (notify) {\n      fireSeriesChanged();\n    }\n  }\n}",
    "begin_line": 903,
    "end_line": 942,
    "comment": "/** \n * Age items in the series.  Ensure that the timespan from the supplied time to the oldest record in the series does not exceed history count. oldest items will be removed if required.\n * @param latest  the time to be compared against when aging data(specified in milliseconds).\n * @param notify  controls whether or not a {@link SeriesChangeEvent} issent to registered listeners IF any items are removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.clear#948",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.clear()",
    "snippet": "public void clear(){\n  if (this.data.size() \u003e 0) {\n    this.data.clear();\n    this.timePeriodClass\u003dnull;\n    this.minY\u003dDouble.NaN;\n    this.maxY\u003dDouble.NaN;\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 948,
    "end_line": 956,
    "comment": "/** \n * Removes all data items from the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.delete#966",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.delete(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "public void delete(RegularTimePeriod period){\n  int index\u003dgetIndex(period);\n  if (index \u003e\u003d 0) {\n    TimeSeriesDataItem item\u003d(TimeSeriesDataItem)this.data.remove(index);\n    updateBoundsForRemovedItem(item);\n    if (this.data.isEmpty()) {\n      this.timePeriodClass\u003dnull;\n    }\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 966,
    "end_line": 977,
    "comment": "/** \n * Deletes the data item for the given time period and sends a {@link SeriesChangeEvent} to all registered listeners.  If there is noitem with the specified time period, this method does nothing.\n * @param period  the period of the item to delete (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.delete#985",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.delete(int, int)",
    "snippet": "public void delete(int start,int end){\n  delete(start,end,true);\n}",
    "begin_line": 985,
    "end_line": 987,
    "comment": "/** \n * Deletes data from start until end index (end inclusive).\n * @param start  the index of the first period to delete.\n * @param end  the index of the last period to delete.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.delete#998",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.delete(int, int, boolean)",
    "snippet": "public void delete(int start,int end,boolean notify){\n  if (end \u003c start) {\n    throw new IllegalArgumentException(\"Requires start \u003c\u003d end.\");\n  }\n  for (int i\u003d0; i \u003c\u003d (end - start); i++) {\n    this.data.remove(start);\n  }\n  findBoundsByIteration();\n  if (this.data.isEmpty()) {\n    this.timePeriodClass\u003dnull;\n  }\n  if (notify) {\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 998,
    "end_line": 1012,
    "comment": "/** \n * Deletes data from start until end index (end inclusive).\n * @param start  the index of the first period to delete.\n * @param end  the index of the last period to delete.\n * @param notify  notify listeners?\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.clone#1029",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  TimeSeries clone\u003d(TimeSeries)super.clone();\n  clone.data\u003d(List)ObjectUtilities.deepClone(this.data);\n  return clone;\n}",
    "begin_line": 1029,
    "end_line": 1033,
    "comment": "/** \n * Returns a clone of the time series. \u003cP\u003e Notes: \u003cul\u003e \u003cli\u003eno need to clone the domain and range descriptions, since String object is immutable;\u003c/li\u003e \u003cli\u003ewe pass over to the more general method clone(start, end).\u003c/li\u003e \u003c/ul\u003e\n * @return A clone of the time series.\n * @throws CloneNotSupportedException not thrown by this class, butsubclasses may differ.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.createCopy#1047",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.createCopy(int, int)",
    "snippet": "public TimeSeries createCopy(int start,int end) throws CloneNotSupportedException {\n  if (start \u003c 0) {\n    throw new IllegalArgumentException(\"Requires start \u003e\u003d 0.\");\n  }\n  if (end \u003c start) {\n    throw new IllegalArgumentException(\"Requires start \u003c\u003d end.\");\n  }\n  TimeSeries copy\u003d(TimeSeries)super.clone();\n  copy.data\u003dnew java.util.ArrayList();\n  if (this.data.size() \u003e 0) {\n    for (int index\u003dstart; index \u003c\u003d end; index++) {\n      TimeSeriesDataItem item\u003d(TimeSeriesDataItem)this.data.get(index);\n      TimeSeriesDataItem clone\u003d(TimeSeriesDataItem)item.clone();\n      try {\n        copy.add(clone);\n      }\n catch (      SeriesException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n  return copy;\n}",
    "begin_line": 1047,
    "end_line": 1073,
    "comment": "/** \n * Creates a new timeseries by copying a subset of the data in this time series.\n * @param start  the index of the first time period to copy.\n * @param end  the index of the last time period to copy.\n * @return A series containing a copy of this times series from start untilend.\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.createCopy#1089",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.createCopy(org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod)",
    "snippet": "public TimeSeries createCopy(RegularTimePeriod start,RegularTimePeriod end) throws CloneNotSupportedException {\n  if (start \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027start\u0027 argument.\");\n  }\n  if (end \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027end\u0027 argument.\");\n  }\n  if (start.compareTo(end) \u003e 0) {\n    throw new IllegalArgumentException(\"Requires start on or before end.\");\n  }\n  boolean emptyRange\u003dfalse;\n  int startIndex\u003dgetIndex(start);\n  if (startIndex \u003c 0) {\n    startIndex\u003d-(startIndex + 1);\n    if (startIndex \u003d\u003d this.data.size()) {\n      emptyRange\u003dtrue;\n    }\n  }\n  int endIndex\u003dgetIndex(end);\n  if (endIndex \u003c 0) {\n    endIndex\u003d-(endIndex + 1);\n    endIndex\u003dendIndex - 1;\n  }\n  if ((endIndex \u003c 0) || (endIndex \u003c startIndex)) {\n    emptyRange\u003dtrue;\n  }\n  if (emptyRange) {\n    TimeSeries copy\u003d(TimeSeries)super.clone();\n    copy.data\u003dnew java.util.ArrayList();\n    return copy;\n  }\n else {\n    return createCopy(startIndex,endIndex);\n  }\n}",
    "begin_line": 1089,
    "end_line": 1127,
    "comment": "/** \n * Creates a new timeseries by copying a subset of the data in this time series.\n * @param start  the first time period to copy (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @param end  the last time period to copy (\u003ccode\u003enull\u003c/code\u003e notpermitted).\n * @return A time series containing a copy of this time series from startuntil end.\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.equals#1136",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof TimeSeries)) {\n    return false;\n  }\n  TimeSeries that\u003d(TimeSeries)obj;\n  if (!ObjectUtilities.equal(getDomainDescription(),that.getDomainDescription())) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(getRangeDescription(),that.getRangeDescription())) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.timePeriodClass,that.timePeriodClass)) {\n    return false;\n  }\n  if (getMaximumItemAge() !\u003d that.getMaximumItemAge()) {\n    return false;\n  }\n  if (getMaximumItemCount() !\u003d that.getMaximumItemCount()) {\n    return false;\n  }\n  int count\u003dgetItemCount();\n  if (count !\u003d that.getItemCount()) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return super.equals(obj);\n}",
    "begin_line": 1136,
    "end_line": 1170,
    "comment": "/** \n * Tests the series for equality with an arbitrary object.\n * @param obj  the object to test against (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.hashCode#1177",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003dsuper.hashCode();\n  result\u003d29 * result + (this.domain !\u003d null ? this.domain.hashCode() : 0);\n  result\u003d29 * result + (this.range !\u003d null ? this.range.hashCode() : 0);\n  result\u003d29 * result + (this.timePeriodClass !\u003d null ? this.timePeriodClass.hashCode() : 0);\n  int count\u003dgetItemCount();\n  if (count \u003e 0) {\n    TimeSeriesDataItem item\u003dgetRawDataItem(0);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 1) {\n    TimeSeriesDataItem item\u003dgetRawDataItem(count - 1);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 2) {\n    TimeSeriesDataItem item\u003dgetRawDataItem(count / 2);\n    result\u003d29 * result + item.hashCode();\n  }\n  result\u003d29 * result + this.maximumItemCount;\n  result\u003d29 * result + (int)this.maximumItemAge;\n  return result;\n}",
    "begin_line": 1177,
    "end_line": 1202,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.updateBoundsForAddedItem#1211",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)",
    "snippet": "private void updateBoundsForAddedItem(TimeSeriesDataItem item){\n  Number yN\u003ditem.getValue();\n  if (item.getValue() !\u003d null) {\n    double y\u003dyN.doubleValue();\n    this.minY\u003dminIgnoreNaN(this.minY,y);\n    this.maxY\u003dmaxIgnoreNaN(this.maxY,y);\n  }\n}",
    "begin_line": 1211,
    "end_line": 1218,
    "comment": "/** \n * Updates the cached values for the minimum and maximum data values.\n * @param item  the item added (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.updateBoundsForRemovedItem#1228",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)",
    "snippet": "private void updateBoundsForRemovedItem(TimeSeriesDataItem item){\n  Number yN\u003ditem.getValue();\n  if (yN !\u003d null) {\n    double y\u003dyN.doubleValue();\n    if (!Double.isNaN(y)) {\n      if (y \u003c\u003d this.minY || y \u003e\u003d this.maxY) {\n        findBoundsByIteration();\n      }\n    }\n  }\n}",
    "begin_line": 1228,
    "end_line": 1238,
    "comment": "/** \n * Updates the cached values for the minimum and maximum data values on the basis that the specified item has just been removed.\n * @param item  the item added (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.findBoundsByIteration#1246",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.findBoundsByIteration()",
    "snippet": "private void findBoundsByIteration(){\n  this.minY\u003dDouble.NaN;\n  this.maxY\u003dDouble.NaN;\n  Iterator iterator\u003dthis.data.iterator();\n  while (iterator.hasNext()) {\n    TimeSeriesDataItem item\u003d(TimeSeriesDataItem)iterator.next();\n    updateBoundsForAddedItem(item);\n  }\n}",
    "begin_line": 1246,
    "end_line": 1254,
    "comment": "/** \n * Finds the bounds of the x and y values for the series, by iterating through all the data items.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.minIgnoreNaN#1265",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.minIgnoreNaN(double, double)",
    "snippet": "private double minIgnoreNaN(double a,double b){\n  if (Double.isNaN(a)) {\n    return b;\n  }\n else {\n    if (Double.isNaN(b)) {\n      return a;\n    }\n else {\n      return Math.min(a,b);\n    }\n  }\n}",
    "begin_line": 1265,
    "end_line": 1277,
    "comment": "/** \n * A function to find the minimum of two values, but ignoring any Double.NaN values.\n * @param a  the first value.\n * @param b  the second value.\n * @return The minimum of the two values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeries.maxIgnoreNaN#1288",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeries.java",
    "class_name": "org.jfree.data.time.TimeSeries",
    "signature": "org.jfree.data.time.TimeSeries.maxIgnoreNaN(double, double)",
    "snippet": "private double maxIgnoreNaN(double a,double b){\n  if (Double.isNaN(a)) {\n    return b;\n  }\n else {\n    if (Double.isNaN(b)) {\n      return a;\n    }\n else {\n      return Math.max(a,b);\n    }\n  }\n}",
    "begin_line": 1288,
    "end_line": 1300,
    "comment": "/** \n * A function to find the maximum of two values, but ignoring any Double.NaN values.\n * @param a  the first value.\n * @param b  the second value.\n * @return The maximum of the two values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.TimeSeriesCollection#143",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection()",
    "snippet": "public TimeSeriesCollection(){\n  this(null,TimeZone.getDefault());\n}",
    "begin_line": 143,
    "end_line": 145,
    "comment": "/** \n * Constructs an empty dataset, tied to the default timezone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.TimeSeriesCollection#153",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection(java.util.TimeZone)",
    "snippet": "public TimeSeriesCollection(TimeZone zone){\n  this(null,zone);\n}",
    "begin_line": 153,
    "end_line": 156,
    "comment": "/** \n * Constructs an empty dataset, tied to a specific timezone.\n * @param zone  the timezone (\u003ccode\u003enull\u003c/code\u003e permitted, will use\u003ccode\u003eTimeZone.getDefault()\u003c/code\u003e in that case).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.TimeSeriesCollection#164",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection(org.jfree.data.time.TimeSeries)",
    "snippet": "public TimeSeriesCollection(TimeSeries series){\n  this(series,TimeZone.getDefault());\n}",
    "begin_line": 164,
    "end_line": 166,
    "comment": "/** \n * Constructs a dataset containing a single series (more can be added), tied to the default timezone.\n * @param series the series (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.TimeSeriesCollection#177",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.TimeSeriesCollection(org.jfree.data.time.TimeSeries, java.util.TimeZone)",
    "snippet": "public TimeSeriesCollection(TimeSeries series,TimeZone zone){\n  super();\n  if (zone \u003d\u003d null) {\n    zone\u003dTimeZone.getDefault();\n  }\n  this.workingCalendar\u003dCalendar.getInstance(zone);\n  this.data\u003dnew ArrayList();\n  if (series !\u003d null) {\n    this.data.add(series);\n    series.addChangeListener(this);\n  }\n  this.xPosition\u003dTimePeriodAnchor.START;\n  setSelectionState(this);\n}",
    "begin_line": 177,
    "end_line": 191,
    "comment": "/** \n * Constructs a dataset containing a single series (more can be added), tied to a specific timezone.\n * @param series  a series to add to the collection (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @param zone  the timezone (\u003ccode\u003enull\u003c/code\u003e permitted, will use\u003ccode\u003eTimeZone.getDefault()\u003c/code\u003e in that case).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getDomainOrder#198",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainOrder()",
    "snippet": "public DomainOrder getDomainOrder(){\n  return DomainOrder.ASCENDING;\n}",
    "begin_line": 198,
    "end_line": 200,
    "comment": "/** \n * Returns the order of the domain values in this dataset.\n * @return {@link DomainOrder#ASCENDING}\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getXPosition#209",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getXPosition()",
    "snippet": "public TimePeriodAnchor getXPosition(){\n  return this.xPosition;\n}",
    "begin_line": 209,
    "end_line": 211,
    "comment": "/** \n * Returns the position within each time period that is used for the X value when the collection is used as an {@link org.jfree.data.xy.XYDataset}.\n * @return The anchor position (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.setXPosition#220",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.setXPosition(org.jfree.data.time.TimePeriodAnchor)",
    "snippet": "public void setXPosition(TimePeriodAnchor anchor){\n  if (anchor \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027anchor\u0027 argument.\");\n  }\n  this.xPosition\u003danchor;\n  notifyListeners(new DatasetChangeEvent(this,this));\n}",
    "begin_line": 220,
    "end_line": 226,
    "comment": "/** \n * Sets the position within each time period that is used for the X values when the collection is used as an  {@link XYDataset}, then sends a {@link DatasetChangeEvent} is sent to all registered listeners.\n * @param anchor  the anchor position (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSeries#233",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSeries()",
    "snippet": "public List getSeries(){\n  return Collections.unmodifiableList(this.data);\n}",
    "begin_line": 233,
    "end_line": 235,
    "comment": "/** \n * Returns a list of all the series in the collection.\n * @return The list (which is unmodifiable).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSeriesCount#242",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSeriesCount()",
    "snippet": "public int getSeriesCount(){\n  return this.data.size();\n}",
    "begin_line": 242,
    "end_line": 244,
    "comment": "/** \n * Returns the number of series in the collection.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.indexOf#256",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.indexOf(org.jfree.data.time.TimeSeries)",
    "snippet": "public int indexOf(TimeSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  return this.data.indexOf(series);\n}",
    "begin_line": 256,
    "end_line": 261,
    "comment": "/** \n * Returns the index of the specified series, or -1 if that series is not present in the dataset.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The series index.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSeries#270",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSeries(int)",
    "snippet": "public TimeSeries getSeries(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"The \u0027series\u0027 argument is out of bounds (\" + series + \").\");\n  }\n  return (TimeSeries)this.data.get(series);\n}",
    "begin_line": 270,
    "end_line": 276,
    "comment": "/** \n * Returns a series.\n * @param series  the index of the series (zero-based).\n * @return The series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSeries#286",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSeries(java.lang.Comparable)",
    "snippet": "public TimeSeries getSeries(Comparable key){\n  TimeSeries result\u003dnull;\n  Iterator iterator\u003dthis.data.iterator();\n  while (iterator.hasNext()) {\n    TimeSeries series\u003d(TimeSeries)iterator.next();\n    Comparable k\u003dseries.getKey();\n    if (k !\u003d null \u0026\u0026 k.equals(key)) {\n      result\u003dseries;\n    }\n  }\n  return result;\n}",
    "begin_line": 286,
    "end_line": 297,
    "comment": "/** \n * Returns the series with the specified key, or \u003ccode\u003enull\u003c/code\u003e if there is no such series.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The series with the given key.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSeriesKey#306",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSeriesKey(int)",
    "snippet": "public Comparable getSeriesKey(int series){\n  return getSeries(series).getKey();\n}",
    "begin_line": 306,
    "end_line": 310,
    "comment": "/** \n * Returns the key for a series.\n * @param series  the index of the series (zero-based).\n * @return The key for a series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.addSeries#318",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.addSeries(org.jfree.data.time.TimeSeries)",
    "snippet": "public void addSeries(TimeSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  this.data.add(series);\n  series.addChangeListener(this);\n  fireDatasetChanged();\n}",
    "begin_line": 318,
    "end_line": 325,
    "comment": "/** \n * Adds a series to the collection and sends a  {@link DatasetChangeEvent} toall registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.removeSeries#333",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.removeSeries(org.jfree.data.time.TimeSeries)",
    "snippet": "public void removeSeries(TimeSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  this.data.remove(series);\n  series.removeChangeListener(this);\n  fireDatasetChanged();\n}",
    "begin_line": 333,
    "end_line": 340,
    "comment": "/** \n * Removes the specified series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.removeSeries#347",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.removeSeries(int)",
    "snippet": "public void removeSeries(int index){\n  TimeSeries series\u003dgetSeries(index);\n  if (series !\u003d null) {\n    removeSeries(series);\n  }\n}",
    "begin_line": 347,
    "end_line": 352,
    "comment": "/** \n * Removes a series from the collection.\n * @param index  the series index (zero-based).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.removeAllSeries#358",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.removeAllSeries()",
    "snippet": "public void removeAllSeries(){\n  for (int i\u003d0; i \u003c this.data.size(); i++) {\n    TimeSeries series\u003d(TimeSeries)this.data.get(i);\n    series.removeChangeListener(this);\n  }\n  this.data.clear();\n  fireDatasetChanged();\n}",
    "begin_line": 358,
    "end_line": 371,
    "comment": "/** \n * Removes all the series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getItemCount#381",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getItemCount(int)",
    "snippet": "public int getItemCount(int series){\n  return getSeries(series).getItemCount();\n}",
    "begin_line": 381,
    "end_line": 383,
    "comment": "/** \n * Returns the number of items in the specified series.  This method is provided for convenience.\n * @param series  the series index (zero-based).\n * @return The item count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getXValue#393",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getXValue(int, int)",
    "snippet": "public double getXValue(int series,int item){\n  TimeSeries s\u003d(TimeSeries)this.data.get(series);\n  RegularTimePeriod period\u003ds.getTimePeriod(item);\n  return getX(period);\n}",
    "begin_line": 393,
    "end_line": 397,
    "comment": "/** \n * Returns the x-value (as a double primitive) for an item within a series.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getX#407",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getX(int, int)",
    "snippet": "public Number getX(int series,int item){\n  TimeSeries ts\u003d(TimeSeries)this.data.get(series);\n  RegularTimePeriod period\u003dts.getTimePeriod(item);\n  return new Long(getX(period));\n}",
    "begin_line": 407,
    "end_line": 411,
    "comment": "/** \n * Returns the x-value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getX#420",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getX(org.jfree.data.time.RegularTimePeriod)",
    "snippet": "protected synchronized long getX(RegularTimePeriod period){\n  long result\u003d0L;\n  if (this.xPosition \u003d\u003d TimePeriodAnchor.START) {\n    result\u003dperiod.getFirstMillisecond(this.workingCalendar);\n  }\n else   if (this.xPosition \u003d\u003d TimePeriodAnchor.MIDDLE) {\n    result\u003dperiod.getMiddleMillisecond(this.workingCalendar);\n  }\n else   if (this.xPosition \u003d\u003d TimePeriodAnchor.END) {\n    result\u003dperiod.getLastMillisecond(this.workingCalendar);\n  }\n  return result;\n}",
    "begin_line": 420,
    "end_line": 432,
    "comment": "/** \n * Returns the x-value for a time period.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The x-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getStartX#442",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getStartX(int, int)",
    "snippet": "public synchronized Number getStartX(int series,int item){\n  TimeSeries ts\u003d(TimeSeries)this.data.get(series);\n  return new Long(ts.getTimePeriod(item).getFirstMillisecond(this.workingCalendar));\n}",
    "begin_line": 442,
    "end_line": 446,
    "comment": "/** \n * Returns the starting X value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getEndX#456",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getEndX(int, int)",
    "snippet": "public synchronized Number getEndX(int series,int item){\n  TimeSeries ts\u003d(TimeSeries)this.data.get(series);\n  return new Long(ts.getTimePeriod(item).getLastMillisecond(this.workingCalendar));\n}",
    "begin_line": 456,
    "end_line": 460,
    "comment": "/** \n * Returns the ending X value for the specified series and item.\n * @param series The series (zero-based index).\n * @param item  The item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getY#470",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getY(int, int)",
    "snippet": "public Number getY(int series,int item){\n  TimeSeries ts\u003d(TimeSeries)this.data.get(series);\n  return ts.getValue(item);\n}",
    "begin_line": 470,
    "end_line": 473,
    "comment": "/** \n * Returns the y-value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getStartY#483",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getStartY(int, int)",
    "snippet": "public Number getStartY(int series,int item){\n  return getY(series,item);\n}",
    "begin_line": 483,
    "end_line": 485,
    "comment": "/** \n * Returns the starting Y value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getEndY#495",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getEndY(int, int)",
    "snippet": "public Number getEndY(int series,int item){\n  return getY(series,item);\n}",
    "begin_line": 495,
    "end_line": 497,
    "comment": "/** \n * Returns the ending Y value for the specified series and item.\n * @param series  te series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.isSelected#510",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.isSelected(int, int)",
    "snippet": "public boolean isSelected(int series,int item){\n  TimeSeries s\u003dgetSeries(series);\n  TimeSeriesDataItem i\u003ds.getRawDataItem(item);\n  return i.isSelected();\n}",
    "begin_line": 510,
    "end_line": 514,
    "comment": "/** \n * Returns the selection state for the specified data item.\n * @param series  the series index.\n * @param item  the item index.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the item is selected, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.setSelected#526",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.setSelected(int, int, boolean)",
    "snippet": "public void setSelected(int series,int item,boolean selected){\n  setSelected(series,item,selected,true);\n}",
    "begin_line": 526,
    "end_line": 528,
    "comment": "/** \n * Sets the selection state for the specified data item and sends a  {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  the selection state.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.setSelected#541",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.setSelected(int, int, boolean, boolean)",
    "snippet": "public void setSelected(int series,int item,boolean selected,boolean notify){\n  TimeSeries s\u003dgetSeries(series);\n  TimeSeriesDataItem i\u003ds.getRawDataItem(item);\n  i.setSelected(selected);\n  if (notify) {\n    fireDatasetChanged();\n  }\n}",
    "begin_line": 541,
    "end_line": 549,
    "comment": "/** \n * Sets the selection state for the specified data item and, if requested, sends a  {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  the selection state.\n * @param notify  notify listeners?\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.clearSelection#556",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.clearSelection()",
    "snippet": "public void clearSelection(){\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    int itemCount\u003dgetItemCount(s);\n    for (int i\u003d0; i \u003c itemCount; i++) {\n      setSelected(s,i,false,false);\n    }\n  }\n}",
    "begin_line": 556,
    "end_line": 564,
    "comment": "/** \n * Clears the selection state for all data items.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getSurroundingItems#576",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getSurroundingItems(int, long)",
    "snippet": "public int[] getSurroundingItems(int series,long milliseconds){\n  int[] result\u003dnew int[]{-1,-1};\n  TimeSeries timeSeries\u003dgetSeries(series);\n  for (int i\u003d0; i \u003c timeSeries.getItemCount(); i++) {\n    Number x\u003dgetX(series,i);\n    long m\u003dx.longValue();\n    if (m \u003c\u003d milliseconds) {\n      result[0]\u003di;\n    }\n    if (m \u003e\u003d milliseconds) {\n      result[1]\u003di;\n      break;\n    }\n  }\n  return result;\n}",
    "begin_line": 576,
    "end_line": 591,
    "comment": "/** \n * Returns the indices of the two data items surrounding a particular millisecond value.\n * @param series  the series index.\n * @param milliseconds  the time.\n * @return An array containing the (two) indices of the items surroundingthe time.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getDomainLowerBound#601",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainLowerBound(boolean)",
    "snippet": "public double getDomainLowerBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  Range r\u003dgetDomainBounds(includeInterval);\n  if (r !\u003d null) {\n    result\u003dr.getLowerBound();\n  }\n  return result;\n}",
    "begin_line": 601,
    "end_line": 608,
    "comment": "/** \n * Returns the minimum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The minimum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getDomainUpperBound#618",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainUpperBound(boolean)",
    "snippet": "public double getDomainUpperBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  Range r\u003dgetDomainBounds(includeInterval);\n  if (r !\u003d null) {\n    result\u003dr.getUpperBound();\n  }\n  return result;\n}",
    "begin_line": 618,
    "end_line": 625,
    "comment": "/** \n * Returns the maximum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The maximum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getDomainBounds#635",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainBounds(boolean)",
    "snippet": "public Range getDomainBounds(boolean includeInterval){\n  Range result\u003dnull;\n  Iterator iterator\u003dthis.data.iterator();\n  while (iterator.hasNext()) {\n    TimeSeries series\u003d(TimeSeries)iterator.next();\n    int count\u003dseries.getItemCount();\n    if (count \u003e 0) {\n      RegularTimePeriod start\u003dseries.getTimePeriod(0);\n      RegularTimePeriod end\u003dseries.getTimePeriod(count - 1);\n      Range temp;\n      if (!includeInterval) {\n        temp\u003dnew Range(getX(start),getX(end));\n      }\n else {\n        temp\u003dnew Range(start.getFirstMillisecond(this.workingCalendar),end.getLastMillisecond(this.workingCalendar));\n      }\n      result\u003dRange.combine(result,temp);\n    }\n  }\n  return result;\n}",
    "begin_line": 635,
    "end_line": 657,
    "comment": "/** \n * Returns the range of the values in this dataset\u0027s domain.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getDomainBounds#669",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getDomainBounds(java.util.List, boolean)",
    "snippet": "public Range getDomainBounds(List visibleSeriesKeys,boolean includeInterval){\n  Range result\u003dnull;\n  Iterator iterator\u003dvisibleSeriesKeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable seriesKey\u003d(Comparable)iterator.next();\n    TimeSeries series\u003dgetSeries(seriesKey);\n    int count\u003dseries.getItemCount();\n    if (count \u003e 0) {\n      RegularTimePeriod start\u003dseries.getTimePeriod(0);\n      RegularTimePeriod end\u003dseries.getTimePeriod(count - 1);\n      Range temp;\n      if (!includeInterval) {\n        temp\u003dnew Range(getX(start),getX(end));\n      }\n else {\n        temp\u003dnew Range(start.getFirstMillisecond(this.workingCalendar),end.getLastMillisecond(this.workingCalendar));\n      }\n      result\u003dRange.combine(result,temp);\n    }\n  }\n  return result;\n}",
    "begin_line": 669,
    "end_line": 693,
    "comment": "/** \n * Returns the bounds of the domain values for the specified series.\n * @param visibleSeriesKeys  a list of keys for the visible series.\n * @param includeInterval  include the x-interval?\n * @return A range.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.getRangeBounds#706",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.getRangeBounds(java.util.List, org.jfree.data.Range, boolean)",
    "snippet": "public Range getRangeBounds(List visibleSeriesKeys,Range xRange,boolean includeInterval){\n  Range result\u003dnull;\n  Iterator iterator\u003dvisibleSeriesKeys.iterator();\n  while (iterator.hasNext()) {\n    Comparable seriesKey\u003d(Comparable)iterator.next();\n    TimeSeries series\u003dgetSeries(seriesKey);\n    Range r\u003dnull;\n    r\u003dnew Range(series.getMinY(),series.getMaxY());\n    result\u003dRange.combine(result,r);\n  }\n  return result;\n}",
    "begin_line": 706,
    "end_line": 719,
    "comment": "/** \n * Returns the bounds for the y-values in the dataset.\n * @param visibleSeriesKeys  the visible series keys.\n * @param xRange  the x-range (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param includeInterval  ignored.\n * @return The bounds.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.equals#728",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof TimeSeriesCollection)) {\n    return false;\n  }\n  TimeSeriesCollection that\u003d(TimeSeriesCollection)obj;\n  if (this.xPosition !\u003d that.xPosition) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 728,
    "end_line": 743,
    "comment": "/** \n * Tests this time series collection for equality with another object.\n * @param obj  the other object.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.hashCode#750",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.data.hashCode();\n  result\u003d29 * result + (this.workingCalendar !\u003d null ? this.workingCalendar.hashCode() : 0);\n  result\u003d29 * result + (this.xPosition !\u003d null ? this.xPosition.hashCode() : 0);\n  return result;\n}",
    "begin_line": 750,
    "end_line": 758,
    "comment": "/** \n * Returns a hash code value for the object.\n * @return The hashcode\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesCollection.clone#767",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesCollection.java",
    "class_name": "org.jfree.data.time.TimeSeriesCollection",
    "signature": "org.jfree.data.time.TimeSeriesCollection.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  TimeSeriesCollection clone\u003d(TimeSeriesCollection)super.clone();\n  clone.data\u003d(List)ObjectUtilities.deepClone(this.data);\n  clone.workingCalendar\u003d(Calendar)this.workingCalendar.clone();\n  return clone;\n}",
    "begin_line": 767,
    "end_line": 772,
    "comment": "/** \n * Returns a clone of this time series collection.\n * @return A clone.\n * @throws java.lang.CloneNotSupportedException\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.TimeSeriesDataItem#105",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, java.lang.Number)",
    "snippet": "public TimeSeriesDataItem(RegularTimePeriod period,Number value){\n  if (period \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027period\u0027 argument.\");\n  }\n  this.period\u003dperiod;\n  this.value\u003dvalue;\n  this.selected\u003dfalse;\n}",
    "begin_line": 105,
    "end_line": 112,
    "comment": "/** \n * Constructs a new data item that associates a value with a time period.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.TimeSeriesDataItem#120",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod, double)",
    "snippet": "public TimeSeriesDataItem(RegularTimePeriod period,double value){\n  this(period,new Double(value));\n}",
    "begin_line": 120,
    "end_line": 122,
    "comment": "/** \n * Constructs a new data item that associates a value with a time period.\n * @param period  the time period (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param value  the value associated with the time period.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.getPeriod#129",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.getPeriod()",
    "snippet": "public RegularTimePeriod getPeriod(){\n  return this.period;\n}",
    "begin_line": 129,
    "end_line": 131,
    "comment": "/** \n * Returns the time period.\n * @return The time period (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.getValue#140",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.getValue()",
    "snippet": "public Number getValue(){\n  return this.value;\n}",
    "begin_line": 140,
    "end_line": 142,
    "comment": "/** \n * Returns the value.\n * @return The value (\u003ccode\u003enull\u003c/code\u003e possible).\n * @see #setValue(java.lang.Number)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.setValue#154",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.setValue(java.lang.Number)",
    "snippet": "public void setValue(Number value){\n  this.value\u003dvalue;\n}",
    "begin_line": 154,
    "end_line": 156,
    "comment": "/** \n * Sets the value for this data item.  This method provides no notification of the value change - if this item belongs to a  {@link TimeSeries} youshould use the  {@link TimeSeries#update(int,java.lang.Number)} methodto change the value, because this will trigger a change event.\n * @param value  the value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @see #getValue()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.isSelected#168",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.isSelected()",
    "snippet": "public boolean isSelected(){\n  return this.selected;\n}",
    "begin_line": 168,
    "end_line": 170,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the data item is selected, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @see #setSelected(boolean)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.setSelected#181",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.setSelected(boolean)",
    "snippet": "public void setSelected(boolean selected){\n  this.selected\u003dselected;\n}",
    "begin_line": 181,
    "end_line": 183,
    "comment": "/** \n * Sets the selection state for this item.\n * @param selected  the new selection state.\n * @see #isSelected()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.equals#192",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (this \u003d\u003d obj) {\n    return true;\n  }\n  if (!(obj instanceof TimeSeriesDataItem)) {\n    return false;\n  }\n  TimeSeriesDataItem that\u003d(TimeSeriesDataItem)obj;\n  if (!this.period.equals(that.period)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.value,that.value)) {\n    return false;\n  }\n  if (this.selected !\u003d that.selected) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 192,
    "end_line": 210,
    "comment": "/** \n * Tests this object for equality with an arbitrary object.\n * @param obj  the other object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.hashCode#217",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003d(this.period !\u003d null ? this.period.hashCode() : 0);\n  result\u003d29 * result + (this.value !\u003d null ? this.value.hashCode() : 0);\n  result\u003dHashUtilities.hashCode(result,this.selected);\n  return result;\n}",
    "begin_line": 217,
    "end_line": 223,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.compareTo#237",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.compareTo(java.lang.Object)",
    "snippet": "public int compareTo(Object o1){\n  int result;\n  if (o1 instanceof TimeSeriesDataItem) {\n    TimeSeriesDataItem datapair\u003d(TimeSeriesDataItem)o1;\n    result\u003dgetPeriod().compareTo(datapair.getPeriod());\n  }\n else {\n    result\u003d1;\n  }\n  return result;\n}",
    "begin_line": 237,
    "end_line": 257,
    "comment": "/** \n * Returns an integer indicating the order of this data pair object relative to another object. \u003cP\u003e For the order we consider only the timing: negative \u003d\u003d before, zero \u003d\u003d same, positive \u003d\u003d after.\n * @param o1  The object being compared to.\n * @return An integer indicating the order of the data item objectrelative to another object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "TimeSeriesDataItem.clone#265",
    "is_bug": true,
    "src_path": "org/jfree/data/time/TimeSeriesDataItem.java",
    "class_name": "org.jfree.data.time.TimeSeriesDataItem",
    "signature": "org.jfree.data.time.TimeSeriesDataItem.clone()",
    "snippet": "public Object clone(){\n  Object clone\u003dnull;\n  try {\n    clone\u003dsuper.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    e.printStackTrace();\n  }\n  return clone;\n}",
    "begin_line": 265,
    "end_line": 274,
    "comment": "/** \n * Clones the data item.  Note: there is no need to clone the period or value since they are immutable instances.\n * @return A clone of the data item.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getStartXValue#63",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue(int, int)",
    "snippet": "public double getStartXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetStartX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 63,
    "end_line": 70,
    "comment": "/** \n * Returns the start x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getEndXValue#81",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue(int, int)",
    "snippet": "public double getEndXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetEndX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 81,
    "end_line": 88,
    "comment": "/** \n * Returns the end x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getStartYValue#99",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getStartYValue(int, int)",
    "snippet": "public double getStartYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetStartY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 99,
    "end_line": 106,
    "comment": "/** \n * Returns the start y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractIntervalXYDataset.getEndYValue#117",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractIntervalXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractIntervalXYDataset",
    "signature": "org.jfree.data.xy.AbstractIntervalXYDataset.getEndYValue(int, int)",
    "snippet": "public double getEndYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetEndY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 117,
    "end_line": 124,
    "comment": "/** \n * Returns the end y-value (as a double primitive) for an item within a series.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getDomainOrder#62",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getDomainOrder()",
    "snippet": "public DomainOrder getDomainOrder(){\n  return DomainOrder.NONE;\n}",
    "begin_line": 62,
    "end_line": 64,
    "comment": "/** \n * Returns the order of the domain (X) values.\n * @return The domain order.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getXValue#74",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getXValue(int, int)",
    "snippet": "public double getXValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number x\u003dgetX(series,item);\n  if (x !\u003d null) {\n    result\u003dx.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 74,
    "end_line": 81,
    "comment": "/** \n * Returns the x-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getYValue#91",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getYValue(int, int)",
    "snippet": "public double getYValue(int series,int item){\n  double result\u003dDouble.NaN;\n  Number y\u003dgetY(series,item);\n  if (y !\u003d null) {\n    result\u003dy.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 91,
    "end_line": 98,
    "comment": "/** \n * Returns the y-value (as a double primitive) for an item within a series.\n * @param series  the series index (zero-based).\n * @param item  the item index (zero-based).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.getSelectionState#115",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.getSelectionState()",
    "snippet": "public XYDatasetSelectionState getSelectionState(){\n  return this.selectionState;\n}",
    "begin_line": 115,
    "end_line": 117,
    "comment": "/** \n * Returns the selection state for this dataset, if any.  The default value is \u003ccode\u003enull\u003c/code\u003e.\n * @return The selection state (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "AbstractXYDataset.setSelectionState#126",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/AbstractXYDataset.java",
    "class_name": "org.jfree.data.xy.AbstractXYDataset",
    "signature": "org.jfree.data.xy.AbstractXYDataset.setSelectionState(org.jfree.data.xy.XYDatasetSelectionState)",
    "snippet": "public void setSelectionState(XYDatasetSelectionState state){\n  this.selectionState\u003dstate;\n  fireDatasetChanged();\n}",
    "begin_line": 126,
    "end_line": 129,
    "comment": "/** \n * Sets the selection state for this dataset.\n * @param state  the selection state (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.DefaultXYDataset#81",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.DefaultXYDataset()",
    "snippet": "public DefaultXYDataset(){\n  this.seriesKeys\u003dnew java.util.ArrayList();\n  this.seriesList\u003dnew java.util.ArrayList();\n}",
    "begin_line": 81,
    "end_line": 84,
    "comment": "/** \n * Creates a new \u003ccode\u003eDefaultXYDataset\u003c/code\u003e instance, initially containing no data.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getSeriesCount#91",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getSeriesCount()",
    "snippet": "public int getSeriesCount(){\n  return this.seriesList.size();\n}",
    "begin_line": 91,
    "end_line": 93,
    "comment": "/** \n * Returns the number of series in the dataset.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getSeriesKey#106",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getSeriesKey(int)",
    "snippet": "public Comparable getSeriesKey(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds\");\n  }\n  return (Comparable)this.seriesKeys.get(series);\n}",
    "begin_line": 106,
    "end_line": 111,
    "comment": "/** \n * Returns the key for a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The key for the series.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in thespecified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.indexOf#121",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.indexOf(java.lang.Comparable)",
    "snippet": "public int indexOf(Comparable seriesKey){\n  return this.seriesKeys.indexOf(seriesKey);\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "/** \n * Returns the index of the series with the specified key, or -1 if there is no such series in the dataset.\n * @param seriesKey  the series key (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return The index, or -1.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getDomainOrder#132",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getDomainOrder()",
    "snippet": "public DomainOrder getDomainOrder(){\n  return DomainOrder.NONE;\n}",
    "begin_line": 132,
    "end_line": 134,
    "comment": "/** \n * Returns the order of the domain (x-) values in the dataset.  In this implementation, we cannot guarantee that the x-values are ordered, so this method returns \u003ccode\u003eDomainOrder.NONE\u003c/code\u003e.\n * @return \u003ccode\u003eDomainOrder.NONE\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getItemCount#147",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getItemCount(int)",
    "snippet": "public int getItemCount(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds\");\n  }\n  double[][] seriesArray\u003d(double[][])this.seriesList.get(series);\n  return seriesArray[0].length;\n}",
    "begin_line": 147,
    "end_line": 153,
    "comment": "/** \n * Returns the number of items in the specified series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The item count.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in thespecified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getXValue#172",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getXValue(int, int)",
    "snippet": "public double getXValue(int series,int item){\n  double[][] seriesData\u003d(double[][])this.seriesList.get(series);\n  return seriesData[0][item];\n}",
    "begin_line": 172,
    "end_line": 175,
    "comment": "/** \n * Returns the x-value for an item within a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @param item  the item index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetItemCount(series)\u003c/code\u003e).\n * @return The x-value.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eseries\u003c/code\u003e is notwithin the specified range.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is notwithin the specified range.\n * @see #getX(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getX#194",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getX(int, int)",
    "snippet": "public Number getX(int series,int item){\n  return new Double(getXValue(series,item));\n}",
    "begin_line": 194,
    "end_line": 196,
    "comment": "/** \n * Returns the x-value for an item within a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @param item  the item index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetItemCount(series)\u003c/code\u003e).\n * @return The x-value.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eseries\u003c/code\u003e is notwithin the specified range.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is notwithin the specified range.\n * @see #getXValue(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getYValue#215",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getYValue(int, int)",
    "snippet": "public double getYValue(int series,int item){\n  double[][] seriesData\u003d(double[][])this.seriesList.get(series);\n  return seriesData[1][item];\n}",
    "begin_line": 215,
    "end_line": 218,
    "comment": "/** \n * Returns the y-value for an item within a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @param item  the item index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetItemCount(series)\u003c/code\u003e).\n * @return The y-value.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eseries\u003c/code\u003e is notwithin the specified range.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is notwithin the specified range.\n * @see #getY(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.getY#237",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.getY(int, int)",
    "snippet": "public Number getY(int series,int item){\n  return new Double(getYValue(series,item));\n}",
    "begin_line": 237,
    "end_line": 239,
    "comment": "/** \n * Returns the y-value for an item within a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @param item  the item index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetItemCount(series)\u003c/code\u003e).\n * @return The y-value.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eseries\u003c/code\u003e is notwithin the specified range.\n * @throws ArrayIndexOutOfBoundsException if \u003ccode\u003eitem\u003c/code\u003e is notwithin the specified range.\n * @see #getX(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.addSeries#251",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.addSeries(java.lang.Comparable, double[][])",
    "snippet": "public void addSeries(Comparable seriesKey,double[][] data){\n  if (seriesKey \u003d\u003d null) {\n    throw new IllegalArgumentException(\"The \u0027seriesKey\u0027 cannot be null.\");\n  }\n  if (data \u003d\u003d null) {\n    throw new IllegalArgumentException(\"The \u0027data\u0027 is null.\");\n  }\n  if (data.length !\u003d 2) {\n    throw new IllegalArgumentException(\"The \u0027data\u0027 array must have length \u003d\u003d 2.\");\n  }\n  if (data[0].length !\u003d data[1].length) {\n    throw new IllegalArgumentException(\"The \u0027data\u0027 array must contain two arrays with equal length.\");\n  }\n  int seriesIndex\u003dindexOf(seriesKey);\n  if (seriesIndex \u003d\u003d -1) {\n    this.seriesKeys.add(seriesKey);\n    this.seriesList.add(data);\n  }\n else {\n    this.seriesList.remove(seriesIndex);\n    this.seriesList.add(seriesIndex,data);\n  }\n  notifyListeners(new DatasetChangeEvent(this,this));\n}",
    "begin_line": 251,
    "end_line": 277,
    "comment": "/** \n * Adds a series or if a series with the same key already exists replaces the data for that series, then sends a  {@link DatasetChangeEvent} toall registered listeners.\n * @param seriesKey  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param data  the data (must be an array with length 2, containing twoarrays of equal length, the first containing the x-values and the second containing the y-values).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.removeSeries#286",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.removeSeries(java.lang.Comparable)",
    "snippet": "public void removeSeries(Comparable seriesKey){\n  int seriesIndex\u003dindexOf(seriesKey);\n  if (seriesIndex \u003e\u003d 0) {\n    this.seriesKeys.remove(seriesIndex);\n    this.seriesList.remove(seriesIndex);\n    notifyListeners(new DatasetChangeEvent(this,this));\n  }\n}",
    "begin_line": 286,
    "end_line": 293,
    "comment": "/** \n * Removes a series from the dataset, then sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param seriesKey  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.equals#310",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof DefaultXYDataset)) {\n    return false;\n  }\n  DefaultXYDataset that\u003d(DefaultXYDataset)obj;\n  if (!this.seriesKeys.equals(that.seriesKeys)) {\n    return false;\n  }\n  for (int i\u003d0; i \u003c this.seriesList.size(); i++) {\n    double[][] d1\u003d(double[][])this.seriesList.get(i);\n    double[][] d2\u003d(double[][])that.seriesList.get(i);\n    double[] d1x\u003dd1[0];\n    double[] d2x\u003dd2[0];\n    if (!Arrays.equals(d1x,d2x)) {\n      return false;\n    }\n    double[] d1y\u003dd1[1];\n    double[] d2y\u003dd2[1];\n    if (!Arrays.equals(d1y,d2y)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "begin_line": 310,
    "end_line": 336,
    "comment": "/** \n * Tests this \u003ccode\u003eDefaultXYDataset\u003c/code\u003e instance for equality with an arbitrary object.  This method returns \u003ccode\u003etrue\u003c/code\u003e if and only if: \u003cul\u003e \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e is not \u003ccode\u003enull\u003c/code\u003e;\u003c/li\u003e \u003cli\u003e\u003ccode\u003eobj\u003c/code\u003e is an instance of \u003ccode\u003eDefaultXYDataset\u003c/code\u003e;\u003c/li\u003e \u003cli\u003eboth datasets have the same number of series, each containing exactly the same values.\u003c/li\u003e \u003c/ul\u003e\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.hashCode#343",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.seriesKeys.hashCode();\n  result\u003d29 * result + this.seriesList.hashCode();\n  return result;\n}",
    "begin_line": 343,
    "end_line": 348,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "DefaultXYDataset.clone#359",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/DefaultXYDataset.java",
    "class_name": "org.jfree.data.xy.DefaultXYDataset",
    "signature": "org.jfree.data.xy.DefaultXYDataset.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  DefaultXYDataset clone\u003d(DefaultXYDataset)super.clone();\n  clone.seriesKeys\u003dnew java.util.ArrayList(this.seriesKeys);\n  clone.seriesList\u003dnew ArrayList(this.seriesList.size());\n  for (int i\u003d0; i \u003c this.seriesList.size(); i++) {\n    double[][] data\u003d(double[][])this.seriesList.get(i);\n    double[] x\u003ddata[0];\n    double[] y\u003ddata[1];\n    double[] xx\u003dnew double[x.length];\n    double[] yy\u003dnew double[y.length];\n    System.arraycopy(x,0,xx,0,x.length);\n    System.arraycopy(y,0,yy,0,y.length);\n    clone.seriesList.add(i,new double[][]{xx,yy});\n  }\n  return clone;\n}",
    "begin_line": 359,
    "end_line": 374,
    "comment": "/** \n * Creates an independent copy of this dataset.\n * @return The cloned dataset.\n * @throws CloneNotSupportedException if there is a problem cloning thedataset (for instance, if a non-cloneable object is used for a series key).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.IntervalXYDelegate#121",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.IntervalXYDelegate(org.jfree.data.xy.XYDataset)",
    "snippet": "public IntervalXYDelegate(XYDataset dataset){\n  this(dataset,true);\n}",
    "begin_line": 121,
    "end_line": 123,
    "comment": "/** \n * Creates a new delegate that.\n * @param dataset  the underlying dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.IntervalXYDelegate#132",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.IntervalXYDelegate(org.jfree.data.xy.XYDataset, boolean)",
    "snippet": "public IntervalXYDelegate(XYDataset dataset,boolean autoWidth){\n  if (dataset \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027dataset\u0027 argument.\");\n  }\n  this.dataset\u003ddataset;\n  this.autoWidth\u003dautoWidth;\n  this.intervalPositionFactor\u003d0.5;\n  this.autoIntervalWidth\u003dDouble.POSITIVE_INFINITY;\n  this.fixedIntervalWidth\u003d1.0;\n}",
    "begin_line": 132,
    "end_line": 141,
    "comment": "/** \n * Creates a new delegate for the specified dataset.\n * @param dataset  the underlying dataset (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param autoWidth  a flag that controls whether the interval width iscalculated automatically.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.isAutoWidth#149",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.isAutoWidth()",
    "snippet": "public boolean isAutoWidth(){\n  return this.autoWidth;\n}",
    "begin_line": 149,
    "end_line": 151,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the interval width is automatically calculated, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.setAutoWidth#164",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.setAutoWidth(boolean)",
    "snippet": "public void setAutoWidth(boolean b){\n  this.autoWidth\u003db;\n  if (b) {\n    this.autoIntervalWidth\u003drecalculateInterval();\n  }\n}",
    "begin_line": 164,
    "end_line": 169,
    "comment": "/** \n * Sets the flag that indicates whether the interval width is automatically calculated.  If the flag is set to \u003ccode\u003etrue\u003c/code\u003e, the interval is recalculated. \u003cp\u003e Note: recalculating the interval amounts to changing the data values represented by the dataset.  The calling dataset must fire an appropriate  {@link DatasetChangeEvent}.\n * @param b  a boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getIntervalPositionFactor#176",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor()",
    "snippet": "public double getIntervalPositionFactor(){\n  return this.intervalPositionFactor;\n}",
    "begin_line": 176,
    "end_line": 178,
    "comment": "/** \n * Returns the interval position factor.\n * @return The interval position factor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.setIntervalPositionFactor#196",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor(double)",
    "snippet": "public void setIntervalPositionFactor(double d){\n  if (d \u003c 0.0 || 1.0 \u003c d) {\n    throw new IllegalArgumentException(\"Argument \u0027d\u0027 outside valid range.\");\n  }\n  this.intervalPositionFactor\u003dd;\n}",
    "begin_line": 196,
    "end_line": 202,
    "comment": "/** \n * Sets the interval position factor.  This controls how the interval is aligned to the x-value.  For a value of 0.5, the interval is aligned with the x-value in the center.  For a value of 0.0, the interval is aligned with the x-value at the lower end of the interval, and for a value of 1.0, the interval is aligned with the x-value at the upper end of the interval. \u003cbr\u003e\u003cbr\u003e Note that changing the interval position factor amounts to changing the data values represented by the dataset.  Therefore, the dataset that is using this delegate is responsible for generating the appropriate  {@link DatasetChangeEvent}.\n * @param d  the new interval position factor (in the range\u003ccode\u003e0.0\u003c/code\u003e to \u003ccode\u003e1.0\u003c/code\u003e inclusive).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getFixedIntervalWidth#209",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getFixedIntervalWidth()",
    "snippet": "public double getFixedIntervalWidth(){\n  return this.fixedIntervalWidth;\n}",
    "begin_line": 209,
    "end_line": 211,
    "comment": "/** \n * Returns the fixed interval width.\n * @return The fixed interval width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.setFixedIntervalWidth#224",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth(double)",
    "snippet": "public void setFixedIntervalWidth(double w){\n  if (w \u003c 0.0) {\n    throw new IllegalArgumentException(\"Negative \u0027w\u0027 argument.\");\n  }\n  this.fixedIntervalWidth\u003dw;\n  this.autoWidth\u003dfalse;\n}",
    "begin_line": 224,
    "end_line": 230,
    "comment": "/** \n * Sets the fixed interval width and, as a side effect, sets the \u003ccode\u003eautoWidth\u003c/code\u003e flag to \u003ccode\u003efalse\u003c/code\u003e. Note that changing the interval width amounts to changing the data values represented by the dataset.  Therefore, the dataset that is using this delegate is responsible for generating the appropriate  {@link DatasetChangeEvent}.\n * @param w  the width (negative values not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getIntervalWidth#239",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth()",
    "snippet": "public double getIntervalWidth(){\n  if (isAutoWidth() \u0026\u0026 !Double.isInfinite(this.autoIntervalWidth)) {\n    return this.autoIntervalWidth;\n  }\n else {\n    return this.fixedIntervalWidth;\n  }\n}",
    "begin_line": 239,
    "end_line": 249,
    "comment": "/** \n * Returns the interval width.  This method will return either the auto calculated interval width or the manually specified interval width, depending on the  {@link #isAutoWidth()} result.\n * @return The interval width to use.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getStartX#261",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getStartX(int, int)",
    "snippet": "public Number getStartX(int series,int item){\n  Number startX\u003dnull;\n  Number x\u003dthis.dataset.getX(series,item);\n  if (x !\u003d null) {\n    startX\u003dnew Double(x.doubleValue() - (getIntervalPositionFactor() * getIntervalWidth()));\n  }\n  return startX;\n}",
    "begin_line": 261,
    "end_line": 269,
    "comment": "/** \n * Returns the start value of the x-interval for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The start value of the x-interval (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getStartXValue(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getStartXValue#281",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getStartXValue(int, int)",
    "snippet": "public double getStartXValue(int series,int item){\n  return this.dataset.getXValue(series,item) - getIntervalPositionFactor() * getIntervalWidth();\n}",
    "begin_line": 281,
    "end_line": 284,
    "comment": "/** \n * Returns the start value of the x-interval for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The start value of the x-interval.\n * @see #getStartX(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getEndX#296",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getEndX(int, int)",
    "snippet": "public Number getEndX(int series,int item){\n  Number endX\u003dnull;\n  Number x\u003dthis.dataset.getX(series,item);\n  if (x !\u003d null) {\n    endX\u003dnew Double(x.doubleValue() + ((1.0 - getIntervalPositionFactor()) * getIntervalWidth()));\n  }\n  return endX;\n}",
    "begin_line": 296,
    "end_line": 304,
    "comment": "/** \n * Returns the end value of the x-interval for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The end value of the x-interval (possibly \u003ccode\u003enull\u003c/code\u003e).\n * @see #getEndXValue(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getEndXValue#316",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getEndXValue(int, int)",
    "snippet": "public double getEndXValue(int series,int item){\n  return this.dataset.getXValue(series,item) + (1.0 - getIntervalPositionFactor()) * getIntervalWidth();\n}",
    "begin_line": 316,
    "end_line": 319,
    "comment": "/** \n * Returns the end value of the x-interval for an item within a series.\n * @param series  the series index.\n * @param item  the item index.\n * @return The end value of the x-interval.\n * @see #getEndX(int,int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getDomainLowerBound#329",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getDomainLowerBound(boolean)",
    "snippet": "public double getDomainLowerBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  Range r\u003dgetDomainBounds(includeInterval);\n  if (r !\u003d null) {\n    result\u003dr.getLowerBound();\n  }\n  return result;\n}",
    "begin_line": 329,
    "end_line": 336,
    "comment": "/** \n * Returns the minimum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The minimum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getDomainUpperBound#346",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getDomainUpperBound(boolean)",
    "snippet": "public double getDomainUpperBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  Range r\u003dgetDomainBounds(includeInterval);\n  if (r !\u003d null) {\n    result\u003dr.getUpperBound();\n  }\n  return result;\n}",
    "begin_line": 346,
    "end_line": 353,
    "comment": "/** \n * Returns the maximum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The maximum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.getDomainBounds#364",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.getDomainBounds(boolean)",
    "snippet": "public Range getDomainBounds(boolean includeInterval){\n  Range range\u003dDatasetUtilities.findDomainBounds(this.dataset,false);\n  if (includeInterval \u0026\u0026 range !\u003d null) {\n    double lowerAdj\u003dgetIntervalWidth() * getIntervalPositionFactor();\n    double upperAdj\u003dgetIntervalWidth() - lowerAdj;\n    range\u003dnew Range(range.getLowerBound() - lowerAdj,range.getUpperBound() + upperAdj);\n  }\n  return range;\n}",
    "begin_line": 364,
    "end_line": 375,
    "comment": "/** \n * Returns the range of the values in the dataset\u0027s domain, including or excluding the interval around each x-value as specified.\n * @param includeInterval  a flag that determines whether or not thex-interval should be taken into account.\n * @return The range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.datasetChanged#383",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
    "snippet": "public void datasetChanged(DatasetChangeEvent e){\n  if (this.autoWidth) {\n    this.autoIntervalWidth\u003drecalculateInterval();\n  }\n}",
    "begin_line": 383,
    "end_line": 392,
    "comment": "/** \n * Handles events from the dataset by recalculating the interval if necessary.\n * @param e  the event.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.recalculateInterval#399",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.recalculateInterval()",
    "snippet": "private double recalculateInterval(){\n  double result\u003dDouble.POSITIVE_INFINITY;\n  int seriesCount\u003dthis.dataset.getSeriesCount();\n  for (int series\u003d0; series \u003c seriesCount; series++) {\n    result\u003dMath.min(result,calculateIntervalForSeries(series));\n  }\n  return result;\n}",
    "begin_line": 399,
    "end_line": 406,
    "comment": "/** \n * Recalculate the minimum width \"from scratch\".\n * @return The minimum width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.calculateIntervalForSeries#415",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.calculateIntervalForSeries(int)",
    "snippet": "private double calculateIntervalForSeries(int series){\n  double result\u003dDouble.POSITIVE_INFINITY;\n  int itemCount\u003dthis.dataset.getItemCount(series);\n  if (itemCount \u003e 1) {\n    double prev\u003dthis.dataset.getXValue(series,0);\n    for (int item\u003d1; item \u003c itemCount; item++) {\n      double x\u003dthis.dataset.getXValue(series,item);\n      result\u003dMath.min(result,x - prev);\n      prev\u003dx;\n    }\n  }\n  return result;\n}",
    "begin_line": 415,
    "end_line": 427,
    "comment": "/** \n * Calculates the interval width for a given series.\n * @param series  the series index.\n * @return The interval width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.equals#440",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof IntervalXYDelegate)) {\n    return false;\n  }\n  IntervalXYDelegate that\u003d(IntervalXYDelegate)obj;\n  if (this.autoWidth !\u003d that.autoWidth) {\n    return false;\n  }\n  if (this.intervalPositionFactor !\u003d that.intervalPositionFactor) {\n    return false;\n  }\n  if (this.fixedIntervalWidth !\u003d that.fixedIntervalWidth) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 440,
    "end_line": 458,
    "comment": "/** \n * Tests the delegate for equality with an arbitrary object.  The equality test considers two delegates to be equal if they would calculate the same intervals for any given dataset (for this reason, the dataset itself is NOT included in the equality test, because it is just a reference back to the current \u0027owner\u0027 of the delegate).\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.clone#465",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  return super.clone();\n}",
    "begin_line": 465,
    "end_line": 467,
    "comment": "/** \n * @return A clone of this delegate.\n * @throws CloneNotSupportedException if the object cannot be cloned.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "IntervalXYDelegate.hashCode#474",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/IntervalXYDelegate.java",
    "class_name": "org.jfree.data.xy.IntervalXYDelegate",
    "signature": "org.jfree.data.xy.IntervalXYDelegate.hashCode()",
    "snippet": "public int hashCode(){\n  int hash\u003d5;\n  hash\u003dHashUtilities.hashCode(hash,this.autoWidth);\n  hash\u003dHashUtilities.hashCode(hash,this.intervalPositionFactor);\n  hash\u003dHashUtilities.hashCode(hash,this.fixedIntervalWidth);\n  return hash;\n}",
    "begin_line": 474,
    "end_line": 480,
    "comment": "/** \n * Returns a hash code for this instance.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.XYDataItem#83",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.XYDataItem(java.lang.Number, java.lang.Number)",
    "snippet": "public XYDataItem(Number x,Number y){\n  if (x \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027x\u0027 argument.\");\n  }\n  this.x\u003dx;\n  this.y\u003dy;\n  this.selected\u003dfalse;\n}",
    "begin_line": 83,
    "end_line": 90,
    "comment": "/** \n * Constructs a new data item.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e NOT permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.XYDataItem#98",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.XYDataItem(double, double)",
    "snippet": "public XYDataItem(double x,double y){\n  this(new Double(x),new Double(y));\n}",
    "begin_line": 98,
    "end_line": 100,
    "comment": "/** \n * Constructs a new data item.\n * @param x  the x-value.\n * @param y  the y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.getX#107",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.getX()",
    "snippet": "public Number getX(){\n  return this.x;\n}",
    "begin_line": 107,
    "end_line": 109,
    "comment": "/** \n * Returns the x-value.\n * @return The x-value (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.getXValue#121",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.getXValue()",
    "snippet": "public double getXValue(){\n  return this.x.doubleValue();\n}",
    "begin_line": 121,
    "end_line": 124,
    "comment": "/** \n * Returns the x-value as a double primitive.\n * @return The x-value.\n * @see #getX()\n * @see #getYValue()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.getY#131",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.getY()",
    "snippet": "public Number getY(){\n  return this.y;\n}",
    "begin_line": 131,
    "end_line": 133,
    "comment": "/** \n * Returns the y-value.\n * @return The y-value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.getYValue#145",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.getYValue()",
    "snippet": "public double getYValue(){\n  double result\u003dDouble.NaN;\n  if (this.y !\u003d null) {\n    result\u003dthis.y.doubleValue();\n  }\n  return result;\n}",
    "begin_line": 145,
    "end_line": 151,
    "comment": "/** \n * Returns the y-value as a double primitive.\n * @return The y-value.\n * @see #getY()\n * @see #getXValue()\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.setY#159",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.setY(double)",
    "snippet": "public void setY(double y){\n  setY(new Double(y));\n}",
    "begin_line": 159,
    "end_line": 161,
    "comment": "/** \n * Sets the y-value for this data item.  Note that there is no corresponding method to change the x-value.\n * @param y  the new y-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.setY#169",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.setY(java.lang.Number)",
    "snippet": "public void setY(Number y){\n  this.y\u003dy;\n}",
    "begin_line": 169,
    "end_line": 171,
    "comment": "/** \n * Sets the y-value for this data item.  Note that there is no corresponding method to change the x-value.\n * @param y  the new y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.isSelected#183",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.isSelected()",
    "snippet": "public boolean isSelected(){\n  return this.selected;\n}",
    "begin_line": 183,
    "end_line": 185,
    "comment": "/** \n * Returns \u003ccode\u003etrue\u003c/code\u003e if the data item is selected, and \u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @return A boolean.\n * @see #setSelected(boolean)\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.setSelected#196",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.setSelected(boolean)",
    "snippet": "public void setSelected(boolean selected){\n  this.selected\u003dselected;\n}",
    "begin_line": 196,
    "end_line": 198,
    "comment": "/** \n * Sets the selection state for this item.\n * @param selected  the new selection state.\n * @see #isSelected()\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.compareTo#212",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.compareTo(java.lang.Object)",
    "snippet": "public int compareTo(Object o1){\n  int result;\n  if (o1 instanceof XYDataItem) {\n    XYDataItem dataItem\u003d(XYDataItem)o1;\n    double compare\u003dthis.x.doubleValue() - dataItem.getX().doubleValue();\n    if (compare \u003e 0.0) {\n      result\u003d1;\n    }\n else {\n      if (compare \u003c 0.0) {\n        result\u003d-1;\n      }\n else {\n        result\u003d0;\n      }\n    }\n  }\n else {\n    result\u003d1;\n  }\n  return result;\n}",
    "begin_line": 212,
    "end_line": 244,
    "comment": "/** \n * Returns an integer indicating the order of this object relative to another object. \u003cP\u003e For the order we consider only the x-value: negative \u003d\u003d \"less-than\", zero \u003d\u003d \"equal\", positive \u003d\u003d \"greater-than\".\n * @param o1  the object being compared to.\n * @return An integer indicating the order of this data pair objectrelative to another object.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.clone#251",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.clone()",
    "snippet": "public Object clone(){\n  Object clone\u003dnull;\n  try {\n    clone\u003dsuper.clone();\n  }\n catch (  CloneNotSupportedException e) {\n    e.printStackTrace();\n  }\n  return clone;\n}",
    "begin_line": 251,
    "end_line": 260,
    "comment": "/** \n * Returns a clone of this object.\n * @return A clone.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.equals#270",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYDataItem)) {\n    return false;\n  }\n  XYDataItem that\u003d(XYDataItem)obj;\n  if (!this.x.equals(that.x)) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.y,that.y)) {\n    return false;\n  }\n  if (this.selected !\u003d that.selected) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 270,
    "end_line": 288,
    "comment": "/** \n * Tests if this object is equal to another.\n * @param obj  the object to test against for equality (\u003ccode\u003enull\u003c/code\u003epermitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.hashCode#295",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.hashCode()",
    "snippet": "public int hashCode(){\n  int result;\n  result\u003dthis.x.hashCode();\n  result\u003d29 * result + (this.y !\u003d null ? this.y.hashCode() : 0);\n  result\u003dHashUtilities.hashCode(result,this.selected);\n  return result;\n}",
    "begin_line": 295,
    "end_line": 301,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYDataItem.toString#309",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYDataItem.java",
    "class_name": "org.jfree.data.xy.XYDataItem",
    "signature": "org.jfree.data.xy.XYDataItem.toString()",
    "snippet": "public String toString(){\n  return \"[\" + getXValue() + \", \"+ getYValue()+ \"]\";\n}",
    "begin_line": 309,
    "end_line": 311,
    "comment": "/** \n * Returns a string representing this instance, primarily for debugging use.\n * @return A string.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.XYSeries#142",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable)",
    "snippet": "public XYSeries(Comparable key){\n  this(key,true,true);\n}",
    "begin_line": 142,
    "end_line": 144,
    "comment": "/** \n * Creates a new empty series.  By default, items added to the series will be sorted into ascending order by x-value, and duplicate x-values will be allowed (these defaults can be modified with another constructor.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.XYSeries#154",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable, boolean)",
    "snippet": "public XYSeries(Comparable key,boolean autoSort){\n  this(key,autoSort,true);\n}",
    "begin_line": 154,
    "end_line": 156,
    "comment": "/** \n * Constructs a new empty series, with the auto-sort flag set as requested, and duplicate values allowed.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param autoSort  a flag that controls whether or not the items in theseries are sorted.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.XYSeries#168",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.XYSeries(java.lang.Comparable, boolean, boolean)",
    "snippet": "public XYSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){\n  super(key);\n  this.data\u003dnew java.util.ArrayList();\n  this.autoSort\u003dautoSort;\n  this.allowDuplicateXValues\u003dallowDuplicateXValues;\n  this.minX\u003dDouble.NaN;\n  this.maxX\u003dDouble.NaN;\n  this.minY\u003dDouble.NaN;\n  this.maxY\u003dDouble.NaN;\n}",
    "begin_line": 168,
    "end_line": 178,
    "comment": "/** \n * Constructs a new xy-series that contains no data.  You can specify whether or not duplicate x-values are allowed for the series.\n * @param key  the series key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param autoSort  a flag that controls whether or not the items in theseries are sorted.\n * @param allowDuplicateXValues  a flag that controls whether duplicatex-values are allowed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getMinX#191",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getMinX()",
    "snippet": "public double getMinX(){\n  return this.minX;\n}",
    "begin_line": 191,
    "end_line": 193,
    "comment": "/** \n * Returns the smallest x-value in the series, ignoring any Double.NaN values.  This method returns Double.NaN if there is no smallest x-value (for example, when the series is empty).\n * @return The smallest x-value.\n * @see #getMaxX()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getMaxX#206",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getMaxX()",
    "snippet": "public double getMaxX(){\n  return this.maxX;\n}",
    "begin_line": 206,
    "end_line": 208,
    "comment": "/** \n * Returns the largest x-value in the series, ignoring any Double.NaN values.  This method returns Double.NaN if there is no largest x-value (for example, when the series is empty).\n * @return The largest x-value.\n * @see #getMinX()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getMinY#221",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getMinY()",
    "snippet": "public double getMinY(){\n  return this.minY;\n}",
    "begin_line": 221,
    "end_line": 223,
    "comment": "/** \n * Returns the smallest y-value in the series, ignoring any null and Double.NaN values.  This method returns Double.NaN if there is no smallest y-value (for example, when the series is empty).\n * @return The smallest y-value.\n * @see #getMaxY()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getMaxY#236",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getMaxY()",
    "snippet": "public double getMaxY(){\n  return this.maxY;\n}",
    "begin_line": 236,
    "end_line": 238,
    "comment": "/** \n * Returns the largest y-value in the series, ignoring any Double.NaN values.  This method returns Double.NaN if there is no largest y-value (for example, when the series is empty).\n * @return The largest y-value.\n * @see #getMinY()\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.updateBoundsForAddedItem#247",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.updateBoundsForAddedItem(org.jfree.data.xy.XYDataItem)",
    "snippet": "private void updateBoundsForAddedItem(XYDataItem item){\n  double x\u003ditem.getXValue();\n  this.minX\u003dminIgnoreNaN(this.minX,x);\n  this.maxX\u003dmaxIgnoreNaN(this.maxX,x);\n  if (item.getY() !\u003d null) {\n    double y\u003ditem.getYValue();\n    this.minY\u003dminIgnoreNaN(this.minY,y);\n    this.maxY\u003dmaxIgnoreNaN(this.maxY,y);\n  }\n}",
    "begin_line": 247,
    "end_line": 256,
    "comment": "/** \n * Updates the cached values for the minimum and maximum data values.\n * @param item  the item added (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.updateBoundsForRemovedItem#266",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.updateBoundsForRemovedItem(org.jfree.data.xy.XYDataItem)",
    "snippet": "private void updateBoundsForRemovedItem(XYDataItem item){\n  boolean itemContributesToXBounds\u003dfalse;\n  boolean itemContributesToYBounds\u003dfalse;\n  double x\u003ditem.getXValue();\n  if (!Double.isNaN(x)) {\n    if (x \u003c\u003d this.minX || x \u003e\u003d this.maxX) {\n      itemContributesToXBounds\u003dtrue;\n    }\n  }\n  if (item.getY() !\u003d null) {\n    double y\u003ditem.getYValue();\n    if (!Double.isNaN(y)) {\n      if (y \u003c\u003d this.minY || y \u003e\u003d this.maxY) {\n        itemContributesToYBounds\u003dtrue;\n      }\n    }\n  }\n  if (itemContributesToYBounds) {\n    findBoundsByIteration();\n  }\n else   if (itemContributesToXBounds) {\n    if (getAutoSort()) {\n      this.minX\u003dgetX(0).doubleValue();\n      this.maxX\u003dgetX(getItemCount() - 1).doubleValue();\n    }\n else {\n      findBoundsByIteration();\n    }\n  }\n}",
    "begin_line": 266,
    "end_line": 295,
    "comment": "/** \n * Updates the cached values for the minimum and maximum data values on the basis that the specified item has just been removed.\n * @param item  the item added (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.findBoundsByIteration#303",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.findBoundsByIteration()",
    "snippet": "private void findBoundsByIteration(){\n  this.minX\u003dDouble.NaN;\n  this.maxX\u003dDouble.NaN;\n  this.minY\u003dDouble.NaN;\n  this.maxY\u003dDouble.NaN;\n  Iterator iterator\u003dthis.data.iterator();\n  while (iterator.hasNext()) {\n    XYDataItem item\u003d(XYDataItem)iterator.next();\n    updateBoundsForAddedItem(item);\n  }\n}",
    "begin_line": 303,
    "end_line": 313,
    "comment": "/** \n * Finds the bounds of the x and y values for the series, by iterating through all the data items.\n * @since 1.0.13\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getAutoSort#322",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getAutoSort()",
    "snippet": "public boolean getAutoSort(){\n  return this.autoSort;\n}",
    "begin_line": 322,
    "end_line": 324,
    "comment": "/** \n * Returns the flag that controls whether the items in the series are automatically sorted.  There is no setter for this flag, it must be defined in the series constructor.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getAllowDuplicateXValues#332",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getAllowDuplicateXValues()",
    "snippet": "public boolean getAllowDuplicateXValues(){\n  return this.allowDuplicateXValues;\n}",
    "begin_line": 332,
    "end_line": 334,
    "comment": "/** \n * Returns a flag that controls whether duplicate x-values are allowed. This flag can only be set in the constructor.\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getItemCount#343",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getItemCount()",
    "snippet": "public int getItemCount(){\n  return this.data.size();\n}",
    "begin_line": 343,
    "end_line": 345,
    "comment": "/** \n * Returns the number of items in the series.\n * @return The item count.\n * @see #getItems()\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getItems#353",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getItems()",
    "snippet": "public List getItems(){\n  return Collections.unmodifiableList(this.data);\n}",
    "begin_line": 353,
    "end_line": 355,
    "comment": "/** \n * Returns the list of data items for the series (the list contains {@link XYDataItem} objects and is unmodifiable).\n * @return The list of data items.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getMaximumItemCount#365",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getMaximumItemCount()",
    "snippet": "public int getMaximumItemCount(){\n  return this.maximumItemCount;\n}",
    "begin_line": 365,
    "end_line": 367,
    "comment": "/** \n * Returns the maximum number of items that will be retained in the series. The default value is \u003ccode\u003eInteger.MAX_VALUE\u003c/code\u003e.\n * @return The maximum item count.\n * @see #setMaximumItemCount(int)\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.setMaximumItemCount#383",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.setMaximumItemCount(int)",
    "snippet": "public void setMaximumItemCount(int maximum){\n  this.maximumItemCount\u003dmaximum;\n  int remove\u003dthis.data.size() - maximum;\n  if (remove \u003e 0) {\n    this.data.subList(0,remove).clear();\n    findBoundsByIteration();\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 383,
    "end_line": 391,
    "comment": "/** \n * Sets the maximum number of items that will be retained in the series. If you add a new item to the series such that the number of items will exceed the maximum item count, then the first element in the series is automatically removed, ensuring that the maximum item count is not exceeded. \u003cp\u003e Typically this value is set before the series is populated with data, but if it is applied later, it may cause some items to be removed from the series (in which case a  {@link SeriesChangeEvent} will be sent toall registered listeners).\n * @param maximum  the maximum number of items for the series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#399",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(org.jfree.data.xy.XYDataItem)",
    "snippet": "public void add(XYDataItem item){\n  add(item,true);\n}",
    "begin_line": 399,
    "end_line": 402,
    "comment": "/** \n * Adds a data item to the series and sends a  {@link SeriesChangeEvent} toall registered listeners.\n * @param item  the (x, y) item (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#411",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(double, double)",
    "snippet": "public void add(double x,double y){\n  add(new Double(x),new Double(y),true);\n}",
    "begin_line": 411,
    "end_line": 413,
    "comment": "/** \n * Adds a data item to the series and sends a  {@link SeriesChangeEvent} toall registered listeners.\n * @param x  the x value.\n * @param y  the y value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#425",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(double, double, boolean)",
    "snippet": "public void add(double x,double y,boolean notify){\n  add(new Double(x),new Double(y),notify);\n}",
    "begin_line": 425,
    "end_line": 427,
    "comment": "/** \n * Adds a data item to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param x  the x value.\n * @param y  the y value.\n * @param notify  a flag that controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#437",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(double, java.lang.Number)",
    "snippet": "public void add(double x,Number y){\n  add(new Double(x),y);\n}",
    "begin_line": 437,
    "end_line": 439,
    "comment": "/** \n * Adds a data item to the series and sends a  {@link SeriesChangeEvent} toall registered listeners.  The unusual pairing of parameter types is to make it easier to add \u003ccode\u003enull\u003c/code\u003e y-values.\n * @param x  the x value.\n * @param y  the y value (\u003ccode\u003enull\u003c/code\u003e permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#452",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(double, java.lang.Number, boolean)",
    "snippet": "public void add(double x,Number y,boolean notify){\n  add(new Double(x),y,notify);\n}",
    "begin_line": 452,
    "end_line": 454,
    "comment": "/** \n * Adds a data item to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.  The unusualpairing of parameter types is to make it easier to add null y-values.\n * @param x  the x value.\n * @param y  the y value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  a flag that controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#470",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(java.lang.Number, java.lang.Number)",
    "snippet": "public void add(Number x,Number y){\n  add(x,y,true);\n}",
    "begin_line": 470,
    "end_line": 473,
    "comment": "/** \n * Adds a new data item to the series (in the correct position if the \u003ccode\u003eautoSort\u003c/code\u003e flag is set for the series) and sends a {@link SeriesChangeEvent} to all registered listeners.\u003cP\u003e Throws an exception if the x-value is a duplicate AND the allowDuplicateXValues flag is false.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @throws SeriesException if the x-value is a duplicate and the\u003ccode\u003eallowDuplicateXValues\u003c/code\u003e flag is not set for this series.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#488",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(java.lang.Number, java.lang.Number, boolean)",
    "snippet": "public void add(Number x,Number y,boolean notify){\n  XYDataItem item\u003dnew XYDataItem(x,y);\n  add(item,notify);\n}",
    "begin_line": 488,
    "end_line": 492,
    "comment": "/** \n * Adds new data to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.\u003cP\u003e Throws an exception if the x-value is a duplicate AND the allowDuplicateXValues flag is false.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @param notify  a flag the controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.add#503",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.add(org.jfree.data.xy.XYDataItem, boolean)",
    "snippet": "public void add(XYDataItem item,boolean notify){\n  if (item \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027item\u0027 argument.\");\n  }\n  item\u003d(XYDataItem)item.clone();\n  if (this.autoSort) {\n    int index\u003dCollections.binarySearch(this.data,item);\n    if (index \u003c 0) {\n      this.data.add(-index - 1,item);\n    }\n else {\n      if (this.allowDuplicateXValues) {\n        int size\u003dthis.data.size();\n        while (index \u003c size \u0026\u0026 item.compareTo(this.data.get(index)) \u003d\u003d 0) {\n          index++;\n        }\n        if (index \u003c this.data.size()) {\n          this.data.add(index,item);\n        }\n else {\n          this.data.add(item);\n        }\n      }\n else {\n        throw new SeriesException(\"X-value already exists.\");\n      }\n    }\n  }\n else {\n    if (!this.allowDuplicateXValues) {\n      int index\u003dindexOf(item.getX());\n      if (index \u003e\u003d 0) {\n        throw new SeriesException(\"X-value already exists.\");\n      }\n    }\n    this.data.add(item);\n  }\n  updateBoundsForAddedItem(item);\n  if (getItemCount() \u003e this.maximumItemCount) {\n    XYDataItem removed\u003d(XYDataItem)this.data.remove(0);\n    updateBoundsForRemovedItem(removed);\n  }\n  if (notify) {\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 503,
    "end_line": 552,
    "comment": "/** \n * Adds a data item to the series and, if requested, sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param item  the (x, y) item (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param notify  a flag that controls whether or not a{@link SeriesChangeEvent} is sent to all registeredlisteners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.delete#561",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.delete(int, int)",
    "snippet": "public void delete(int start,int end){\n  this.data.subList(start,end + 1).clear();\n  findBoundsByIteration();\n  fireSeriesChanged();\n}",
    "begin_line": 561,
    "end_line": 565,
    "comment": "/** \n * Deletes a range of items from the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param start  the start index (zero-based).\n * @param end  the end index (zero-based).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.remove#575",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.remove(int)",
    "snippet": "public XYDataItem remove(int index){\n  XYDataItem removed\u003d(XYDataItem)this.data.remove(index);\n  updateBoundsForRemovedItem(removed);\n  fireSeriesChanged();\n  return removed;\n}",
    "begin_line": 575,
    "end_line": 580,
    "comment": "/** \n * Removes the item at the specified index and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param index  the index.\n * @return The item removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.remove#592",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.remove(java.lang.Number)",
    "snippet": "public XYDataItem remove(Number x){\n  return remove(indexOf(x));\n}",
    "begin_line": 592,
    "end_line": 594,
    "comment": "/** \n * Removes an item with the specified x-value and sends a {@link SeriesChangeEvent} to all registered listeners.  Note that whena series permits multiple items with the same x-value, this method could remove any one of the items with that x-value.\n * @param x  the x-value.\n * @return The item removed.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.clear#600",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.clear()",
    "snippet": "public void clear(){\n  if (this.data.size() \u003e 0) {\n    this.data.clear();\n    this.minX\u003dDouble.NaN;\n    this.maxX\u003dDouble.NaN;\n    this.minY\u003dDouble.NaN;\n    this.maxY\u003dDouble.NaN;\n    fireSeriesChanged();\n  }\n}",
    "begin_line": 600,
    "end_line": 609,
    "comment": "/** \n * Removes all data items from the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getDataItem#618",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getDataItem(int)",
    "snippet": "public XYDataItem getDataItem(int index){\n  XYDataItem item\u003d(XYDataItem)this.data.get(index);\n  return (XYDataItem)item.clone();\n}",
    "begin_line": 618,
    "end_line": 621,
    "comment": "/** \n * Return the data item with the specified index.\n * @param index  the index.\n * @return The data item with the specified index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getRawDataItem#632",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getRawDataItem(int)",
    "snippet": "XYDataItem getRawDataItem(int index){\n  return (XYDataItem)this.data.get(index);\n}",
    "begin_line": 632,
    "end_line": 634,
    "comment": "/** \n * Return the data item with the specified index.\n * @param index  the index.\n * @return The data item with the specified index.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getX#643",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getX(int)",
    "snippet": "public Number getX(int index){\n  return getRawDataItem(index).getX();\n}",
    "begin_line": 643,
    "end_line": 645,
    "comment": "/** \n * Returns the x-value at the specified index.\n * @param index  the index (zero-based).\n * @return The x-value (never \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.getY#654",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.getY(int)",
    "snippet": "public Number getY(int index){\n  return getRawDataItem(index).getY();\n}",
    "begin_line": 654,
    "end_line": 656,
    "comment": "/** \n * Returns the y-value at the specified index.\n * @param index  the index (zero-based).\n * @return The y-value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.updateByIndex#667",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.updateByIndex(int, java.lang.Number)",
    "snippet": "public void updateByIndex(int index,Number y){\n  XYDataItem item\u003dgetRawDataItem(index);\n  boolean iterate\u003dfalse;\n  double oldY\u003ditem.getYValue();\n  if (!Double.isNaN(oldY)) {\n    iterate\u003doldY \u003c\u003d this.minY || oldY \u003e\u003d this.maxY;\n  }\n  item.setY(y);\n  if (iterate) {\n    findBoundsByIteration();\n  }\n else   if (y !\u003d null) {\n    double yy\u003dy.doubleValue();\n    this.minY\u003dminIgnoreNaN(this.minY,yy);\n    this.maxY\u003dmaxIgnoreNaN(this.maxY,yy);\n  }\n  fireSeriesChanged();\n}",
    "begin_line": 667,
    "end_line": 687,
    "comment": "/** \n * Updates the value of an item in the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param index  the item (zero based index).\n * @param y  the new value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @since 1.0.1\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.minIgnoreNaN#698",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.minIgnoreNaN(double, double)",
    "snippet": "private double minIgnoreNaN(double a,double b){\n  if (Double.isNaN(a)) {\n    return b;\n  }\n else {\n    if (Double.isNaN(b)) {\n      return a;\n    }\n else {\n      return Math.min(a,b);\n    }\n  }\n}",
    "begin_line": 698,
    "end_line": 710,
    "comment": "/** \n * A function to find the minimum of two values, but ignoring any Double.NaN values.\n * @param a  the first value.\n * @param b  the second value.\n * @return The minimum of the two values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.maxIgnoreNaN#721",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.maxIgnoreNaN(double, double)",
    "snippet": "private double maxIgnoreNaN(double a,double b){\n  if (Double.isNaN(a)) {\n    return b;\n  }\n else {\n    if (Double.isNaN(b)) {\n      return a;\n    }\n else {\n      return Math.max(a,b);\n    }\n  }\n}",
    "begin_line": 721,
    "end_line": 733,
    "comment": "/** \n * A function to find the maximum of two values, but ignoring any Double.NaN values.\n * @param a  the first value.\n * @param b  the second value.\n * @return The maximum of the two values.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.update#744",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.update(java.lang.Number, java.lang.Number)",
    "snippet": "public void update(Number x,Number y){\n  int index\u003dindexOf(x);\n  if (index \u003c 0) {\n    throw new SeriesException(\"No observation for x \u003d \" + x);\n  }\n else {\n    updateByIndex(index,y);\n  }\n}",
    "begin_line": 744,
    "end_line": 752,
    "comment": "/** \n * Updates an item in the series.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @throws SeriesException if there is no existing item with the specifiedx-value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.addOrUpdate#765",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.addOrUpdate(double, double)",
    "snippet": "public XYDataItem addOrUpdate(double x,double y){\n  return addOrUpdate(new Double(x),new Double(y));\n}",
    "begin_line": 765,
    "end_line": 767,
    "comment": "/** \n * Adds or updates an item in the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param x  the x-value.\n * @param y  the y-value.\n * @return The item that was overwritten, if any.\n * @since 1.0.10\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.addOrUpdate#779",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.addOrUpdate(java.lang.Number, java.lang.Number)",
    "snippet": "public XYDataItem addOrUpdate(Number x,Number y){\n  return addOrUpdate(new XYDataItem(x,y));\n}",
    "begin_line": 779,
    "end_line": 782,
    "comment": "/** \n * Adds or updates an item in the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A copy of the overwritten data item, or \u003ccode\u003enull\u003c/code\u003e if noitem was overwritten.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.addOrUpdate#796",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.addOrUpdate(org.jfree.data.xy.XYDataItem)",
    "snippet": "public XYDataItem addOrUpdate(XYDataItem item){\n  if (item \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027item\u0027 argument.\");\n  }\n  if (this.allowDuplicateXValues) {\n    add(item);\n    return null;\n  }\n  XYDataItem overwritten\u003dnull;\n  int index\u003dindexOf(item.getX());\n  if (index \u003e\u003d 0) {\n    XYDataItem existing\u003d(XYDataItem)this.data.get(index);\n    overwritten\u003d(XYDataItem)existing.clone();\n    boolean iterate\u003dfalse;\n    double oldY\u003dexisting.getYValue();\n    if (!Double.isNaN(oldY)) {\n      iterate\u003doldY \u003c\u003d this.minY || oldY \u003e\u003d this.maxY;\n    }\n    existing.setY(item.getY());\n    if (iterate) {\n      findBoundsByIteration();\n    }\n else     if (item.getY() !\u003d null) {\n      double yy\u003ditem.getY().doubleValue();\n      this.minY\u003dminIgnoreNaN(this.minY,yy);\n      this.maxY\u003dminIgnoreNaN(this.maxY,yy);\n    }\n  }\n else {\n    item\u003d(XYDataItem)item.clone();\n    if (this.autoSort) {\n      this.data.add(-index - 1,item);\n    }\n else {\n      this.data.add(item);\n    }\n    updateBoundsForAddedItem(item);\n    if (getItemCount() \u003e this.maximumItemCount) {\n      XYDataItem removed\u003d(XYDataItem)this.data.remove(0);\n      updateBoundsForRemovedItem(removed);\n    }\n  }\n  fireSeriesChanged();\n  return overwritten;\n}",
    "begin_line": 796,
    "end_line": 850,
    "comment": "/** \n * Adds or updates an item in the series and sends a {@link SeriesChangeEvent} to all registered listeners.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @param y  the y-value (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A copy of the overwritten data item, or \u003ccode\u003enull\u003c/code\u003e if noitem was overwritten.\n * @since 1.0.14\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.indexOf#862",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.indexOf(java.lang.Number)",
    "snippet": "public int indexOf(Number x){\n  if (this.autoSort) {\n    return Collections.binarySearch(this.data,new XYDataItem(x,null));\n  }\n else {\n    for (int i\u003d0; i \u003c this.data.size(); i++) {\n      XYDataItem item\u003d(XYDataItem)this.data.get(i);\n      if (item.getX().equals(x)) {\n        return i;\n      }\n    }\n    return -1;\n  }\n}",
    "begin_line": 862,
    "end_line": 875,
    "comment": "/** \n * Returns the index of the item with the specified x-value, or a negative index if the series does not contain an item with that x-value.  Be aware that for an unsorted series, the index is found by iterating through all items in the series.\n * @param x  the x-value (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The index.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.toArray#884",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.toArray()",
    "snippet": "public double[][] toArray(){\n  int itemCount\u003dgetItemCount();\n  double[][] result\u003dnew double[2][itemCount];\n  for (int i\u003d0; i \u003c itemCount; i++) {\n    result[0][i]\u003dthis.getX(i).doubleValue();\n    Number y\u003dgetY(i);\n    if (y !\u003d null) {\n      result[1][i]\u003dy.doubleValue();\n    }\n else {\n      result[1][i]\u003dDouble.NaN;\n    }\n  }\n  return result;\n}",
    "begin_line": 884,
    "end_line": 898,
    "comment": "/** \n * Returns a new array containing the x and y values from this series.\n * @return A new array containing the x and y values from this series.\n * @since 1.0.4\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.clone#907",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYSeries clone\u003d(XYSeries)super.clone();\n  clone.data\u003d(List)ObjectUtilities.deepClone(this.data);\n  return clone;\n}",
    "begin_line": 907,
    "end_line": 911,
    "comment": "/** \n * Returns a clone of the series.\n * @return A clone of the series.\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.createCopy#923",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.createCopy(int, int)",
    "snippet": "public XYSeries createCopy(int start,int end) throws CloneNotSupportedException {\n  XYSeries copy\u003d(XYSeries)super.clone();\n  copy.data\u003dnew java.util.ArrayList();\n  if (this.data.size() \u003e 0) {\n    for (int index\u003dstart; index \u003c\u003d end; index++) {\n      XYDataItem item\u003d(XYDataItem)this.data.get(index);\n      XYDataItem clone\u003d(XYDataItem)item.clone();\n      try {\n        copy.add(clone);\n      }\n catch (      SeriesException e) {\n        System.err.println(\"Unable to add cloned data item.\");\n      }\n    }\n  }\n  return copy;\n}",
    "begin_line": 923,
    "end_line": 942,
    "comment": "/** \n * Creates a new series by copying a subset of the data in this time series.\n * @param start  the index of the first item to copy.\n * @param end  the index of the last item to copy.\n * @return A series containing a copy of this series from start until end.\n * @throws CloneNotSupportedException if there is a cloning problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.equals#952",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYSeries)) {\n    return false;\n  }\n  if (!super.equals(obj)) {\n    return false;\n  }\n  XYSeries that\u003d(XYSeries)obj;\n  if (this.maximumItemCount !\u003d that.maximumItemCount) {\n    return false;\n  }\n  if (this.autoSort !\u003d that.autoSort) {\n    return false;\n  }\n  if (this.allowDuplicateXValues !\u003d that.allowDuplicateXValues) {\n    return false;\n  }\n  if (!ObjectUtilities.equal(this.data,that.data)) {\n    return false;\n  }\n  return true;\n}",
    "begin_line": 952,
    "end_line": 976,
    "comment": "/** \n * Tests this series for equality with an arbitrary object.\n * @param obj  the object to test against for equality(\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeries.hashCode#983",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeries.java",
    "class_name": "org.jfree.data.xy.XYSeries",
    "signature": "org.jfree.data.xy.XYSeries.hashCode()",
    "snippet": "public int hashCode(){\n  int result\u003dsuper.hashCode();\n  int count\u003dgetItemCount();\n  if (count \u003e 0) {\n    XYDataItem item\u003dgetRawDataItem(0);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 1) {\n    XYDataItem item\u003dgetRawDataItem(count - 1);\n    result\u003d29 * result + item.hashCode();\n  }\n  if (count \u003e 2) {\n    XYDataItem item\u003dgetRawDataItem(count / 2);\n    result\u003d29 * result + item.hashCode();\n  }\n  result\u003d29 * result + this.maximumItemCount;\n  result\u003d29 * result + (this.autoSort ? 1 : 0);\n  result\u003d29 * result + (this.allowDuplicateXValues ? 1 : 0);\n  return result;\n}",
    "begin_line": 983,
    "end_line": 1004,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.XYSeriesCollection#104",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.XYSeriesCollection()",
    "snippet": "public XYSeriesCollection(){\n  this(null);\n}",
    "begin_line": 104,
    "end_line": 106,
    "comment": "/** \n * Constructs an empty dataset.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.XYSeriesCollection#113",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.XYSeriesCollection(org.jfree.data.xy.XYSeries)",
    "snippet": "public XYSeriesCollection(XYSeries series){\n  this.data\u003dnew java.util.ArrayList();\n  this.intervalDelegate\u003dnew IntervalXYDelegate(this,false);\n  addChangeListener(this.intervalDelegate);\n  if (series !\u003d null) {\n    this.data.add(series);\n    series.addChangeListener(this);\n  }\n  setSelectionState(this);\n}",
    "begin_line": 113,
    "end_line": 122,
    "comment": "/** \n * Constructs a dataset and populates it with a single series.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e ignored).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getDomainOrder#129",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getDomainOrder()",
    "snippet": "public DomainOrder getDomainOrder(){\n  int seriesCount\u003dgetSeriesCount();\n  for (int i\u003d0; i \u003c seriesCount; i++) {\n    XYSeries s\u003dgetSeries(i);\n    if (!s.getAutoSort()) {\n      return DomainOrder.NONE;\n    }\n  }\n  return DomainOrder.ASCENDING;\n}",
    "begin_line": 129,
    "end_line": 138,
    "comment": "/** \n * Returns the order of the domain (X) values, if this is known.\n * @return The domain order.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.addSeries#146",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.addSeries(org.jfree.data.xy.XYSeries)",
    "snippet": "public void addSeries(XYSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  this.data.add(series);\n  series.addChangeListener(this);\n  fireDatasetChanged();\n}",
    "begin_line": 146,
    "end_line": 153,
    "comment": "/** \n * Adds a series to the collection and sends a  {@link DatasetChangeEvent}to all registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.removeSeries#161",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.removeSeries(int)",
    "snippet": "public void removeSeries(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds.\");\n  }\n  XYSeries ts\u003d(XYSeries)this.data.get(series);\n  ts.removeChangeListener(this);\n  this.data.remove(series);\n  fireDatasetChanged();\n}",
    "begin_line": 161,
    "end_line": 171,
    "comment": "/** \n * Removes a series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index (zero-based).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.removeSeries#179",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.removeSeries(org.jfree.data.xy.XYSeries)",
    "snippet": "public void removeSeries(XYSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  if (this.data.contains(series)) {\n    series.removeChangeListener(this);\n    this.data.remove(series);\n    fireDatasetChanged();\n  }\n}",
    "begin_line": 179,
    "end_line": 188,
    "comment": "/** \n * Removes a series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.removeAllSeries#194",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.removeAllSeries()",
    "snippet": "public void removeAllSeries(){\n  for (int i\u003d0; i \u003c this.data.size(); i++) {\n    XYSeries series\u003d(XYSeries)this.data.get(i);\n    series.removeChangeListener(this);\n  }\n  this.data.clear();\n  fireDatasetChanged();\n}",
    "begin_line": 194,
    "end_line": 205,
    "comment": "/** \n * Removes all the series from the collection and sends a {@link DatasetChangeEvent} to all registered listeners.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getSeriesCount#212",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getSeriesCount()",
    "snippet": "public int getSeriesCount(){\n  return this.data.size();\n}",
    "begin_line": 212,
    "end_line": 214,
    "comment": "/** \n * Returns the number of series in the collection.\n * @return The series count.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getSeries#221",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getSeries()",
    "snippet": "public List getSeries(){\n  return Collections.unmodifiableList(this.data);\n}",
    "begin_line": 221,
    "end_line": 223,
    "comment": "/** \n * Returns a list of all the series in the collection.\n * @return The list (which is unmodifiable).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.indexOf#235",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.indexOf(org.jfree.data.xy.XYSeries)",
    "snippet": "public int indexOf(XYSeries series){\n  if (series \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027series\u0027 argument.\");\n  }\n  return this.data.indexOf(series);\n}",
    "begin_line": 235,
    "end_line": 240,
    "comment": "/** \n * Returns the index of the specified series, or -1 if that series is not present in the dataset.\n * @param series  the series (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The series index.\n * @since 1.0.6\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getSeries#252",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getSeries(int)",
    "snippet": "public XYSeries getSeries(int series){\n  if ((series \u003c 0) || (series \u003e\u003d getSeriesCount())) {\n    throw new IllegalArgumentException(\"Series index out of bounds\");\n  }\n  return (XYSeries)this.data.get(series);\n}",
    "begin_line": 252,
    "end_line": 257,
    "comment": "/** \n * Returns a series from the collection.\n * @param series  the series index (zero-based).\n * @return The series.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in therange \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getSeries#271",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getSeries(java.lang.Comparable)",
    "snippet": "public XYSeries getSeries(Comparable key){\n  if (key \u003d\u003d null) {\n    throw new IllegalArgumentException(\"Null \u0027key\u0027 argument.\");\n  }\n  Iterator iterator\u003dthis.data.iterator();\n  while (iterator.hasNext()) {\n    XYSeries series\u003d(XYSeries)iterator.next();\n    if (key.equals(series.getKey())) {\n      return series;\n    }\n  }\n  throw new UnknownKeyException(\"Key not found: \" + key);\n}",
    "begin_line": 271,
    "end_line": 283,
    "comment": "/** \n * Returns a series from the collection.\n * @param key  the key (\u003ccode\u003enull\u003c/code\u003e not permitted).\n * @return The series with the specified key.\n * @throws UnknownKeyException if \u003ccode\u003ekey\u003c/code\u003e is not found in thecollection.\n * @since 1.0.9\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getSeriesKey#296",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getSeriesKey(int)",
    "snippet": "public Comparable getSeriesKey(int series){\n  return getSeries(series).getKey();\n}",
    "begin_line": 296,
    "end_line": 299,
    "comment": "/** \n * Returns the key for a series.\n * @param series  the series index (in the range \u003ccode\u003e0\u003c/code\u003e to\u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e).\n * @return The key for a series.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in thespecified range.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getItemCount#311",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getItemCount(int)",
    "snippet": "public int getItemCount(int series){\n  return getSeries(series).getItemCount();\n}",
    "begin_line": 311,
    "end_line": 314,
    "comment": "/** \n * Returns the number of items in the specified series.\n * @param series  the series (zero-based index).\n * @return The item count.\n * @throws IllegalArgumentException if \u003ccode\u003eseries\u003c/code\u003e is not in therange \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003egetSeriesCount() - 1\u003c/code\u003e.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getX#324",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getX(int, int)",
    "snippet": "public Number getX(int series,int item){\n  XYSeries s\u003d(XYSeries)this.data.get(series);\n  return s.getX(item);\n}",
    "begin_line": 324,
    "end_line": 327,
    "comment": "/** \n * Returns the x-value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getStartX#337",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getStartX(int, int)",
    "snippet": "public Number getStartX(int series,int item){\n  return this.intervalDelegate.getStartX(series,item);\n}",
    "begin_line": 337,
    "end_line": 339,
    "comment": "/** \n * Returns the starting X value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The starting X value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getEndX#349",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getEndX(int, int)",
    "snippet": "public Number getEndX(int series,int item){\n  return this.intervalDelegate.getEndX(series,item);\n}",
    "begin_line": 349,
    "end_line": 351,
    "comment": "/** \n * Returns the ending X value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The ending X value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getY#361",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getY(int, int)",
    "snippet": "public Number getY(int series,int index){\n  XYSeries s\u003d(XYSeries)this.data.get(series);\n  return s.getY(index);\n}",
    "begin_line": 361,
    "end_line": 364,
    "comment": "/** \n * Returns the y-value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param index  the index of the item of interest (zero-based).\n * @return The value (possibly \u003ccode\u003enull\u003c/code\u003e).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getStartY#374",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getStartY(int, int)",
    "snippet": "public Number getStartY(int series,int item){\n  return getY(series,item);\n}",
    "begin_line": 374,
    "end_line": 376,
    "comment": "/** \n * Returns the starting Y value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The starting Y value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getEndY#386",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getEndY(int, int)",
    "snippet": "public Number getEndY(int series,int item){\n  return getY(series,item);\n}",
    "begin_line": 386,
    "end_line": 388,
    "comment": "/** \n * Returns the ending Y value for the specified series and item.\n * @param series  the series (zero-based index).\n * @param item  the item (zero-based index).\n * @return The ending Y value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.isSelected#401",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.isSelected(int, int)",
    "snippet": "public boolean isSelected(int series,int item){\n  XYSeries s\u003dgetSeries(series);\n  XYDataItem i\u003ds.getRawDataItem(item);\n  return i.isSelected();\n}",
    "begin_line": 401,
    "end_line": 405,
    "comment": "/** \n * Returns the selection state for the specified data item.\n * @param series  the series index.\n * @param item  the item index.\n * @return \u003ccode\u003etrue\u003c/code\u003e if the item is selected, and\u003ccode\u003efalse\u003c/code\u003e otherwise.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.setSelected#417",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.setSelected(int, int, boolean)",
    "snippet": "public void setSelected(int series,int item,boolean selected){\n  setSelected(series,item,selected,true);\n}",
    "begin_line": 417,
    "end_line": 419,
    "comment": "/** \n * Sets the selection state for the specified data item and sends a  {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  the selection state.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.setSelected#432",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.setSelected(int, int, boolean, boolean)",
    "snippet": "public void setSelected(int series,int item,boolean selected,boolean notify){\n  XYSeries s\u003dgetSeries(series);\n  XYDataItem i\u003ds.getRawDataItem(item);\n  i.setSelected(selected);\n  if (notify) {\n    fireDatasetChanged();\n  }\n}",
    "begin_line": 432,
    "end_line": 440,
    "comment": "/** \n * Sets the selection state for the specified data item and, if requested, sends a  {@link DatasetChangeEvent} to all registered listeners.\n * @param series  the series index.\n * @param item  the item index.\n * @param selected  the selection state.\n * @param notify  notify listeners?\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.clearSelection#447",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.clearSelection()",
    "snippet": "public void clearSelection(){\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    int itemCount\u003dgetItemCount(s);\n    for (int i\u003d0; i \u003c itemCount; i++) {\n      setSelected(s,i,false,false);\n    }\n  }\n}",
    "begin_line": 447,
    "end_line": 455,
    "comment": "/** \n * Clears the selection state for all data items.\n * @since 1.2.0\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.equals#464",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.equals(java.lang.Object)",
    "snippet": "public boolean equals(Object obj){\n  if (obj \u003d\u003d this) {\n    return true;\n  }\n  if (!(obj instanceof XYSeriesCollection)) {\n    return false;\n  }\n  XYSeriesCollection that\u003d(XYSeriesCollection)obj;\n  if (!this.intervalDelegate.equals(that.intervalDelegate)) {\n    return false;\n  }\n  return ObjectUtilities.equal(this.data,that.data);\n}",
    "begin_line": 464,
    "end_line": 476,
    "comment": "/** \n * Tests this collection for equality with an arbitrary object.\n * @param obj  the object (\u003ccode\u003enull\u003c/code\u003e permitted).\n * @return A boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.clone#485",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.clone()",
    "snippet": "public Object clone() throws CloneNotSupportedException {\n  XYSeriesCollection clone\u003d(XYSeriesCollection)super.clone();\n  clone.data\u003d(List)ObjectUtilities.deepClone(this.data);\n  clone.intervalDelegate\u003d(IntervalXYDelegate)this.intervalDelegate.clone();\n  return clone;\n}",
    "begin_line": 485,
    "end_line": 491,
    "comment": "/** \n * Returns a clone of this instance.\n * @return A clone.\n * @throws CloneNotSupportedException if there is a problem.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.hashCode#498",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.hashCode()",
    "snippet": "public int hashCode(){\n  int hash\u003d5;\n  hash\u003dHashUtilities.hashCode(hash,this.intervalDelegate);\n  hash\u003dHashUtilities.hashCode(hash,this.data);\n  return hash;\n}",
    "begin_line": 498,
    "end_line": 503,
    "comment": "/** \n * Returns a hash code.\n * @return A hash code.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getDomainLowerBound#513",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getDomainLowerBound(boolean)",
    "snippet": "public double getDomainLowerBound(boolean includeInterval){\n  if (includeInterval) {\n    return this.intervalDelegate.getDomainLowerBound(includeInterval);\n  }\n else {\n    double result\u003dDouble.NaN;\n    int seriesCount\u003dgetSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      XYSeries series\u003dgetSeries(s);\n      double lowX\u003dseries.getMinX();\n      if (Double.isNaN(result)) {\n        result\u003dlowX;\n      }\n else {\n        if (!Double.isNaN(lowX)) {\n          result\u003dMath.min(result,lowX);\n        }\n      }\n    }\n    return result;\n  }\n}",
    "begin_line": 513,
    "end_line": 534,
    "comment": "/** \n * Returns the minimum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The minimum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getDomainUpperBound#544",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getDomainUpperBound(boolean)",
    "snippet": "public double getDomainUpperBound(boolean includeInterval){\n  if (includeInterval) {\n    return this.intervalDelegate.getDomainUpperBound(includeInterval);\n  }\n else {\n    double result\u003dDouble.NaN;\n    int seriesCount\u003dgetSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      XYSeries series\u003dgetSeries(s);\n      double hiX\u003dseries.getMaxX();\n      if (Double.isNaN(result)) {\n        result\u003dhiX;\n      }\n else {\n        if (!Double.isNaN(hiX)) {\n          result\u003dMath.max(result,hiX);\n        }\n      }\n    }\n    return result;\n  }\n}",
    "begin_line": 544,
    "end_line": 565,
    "comment": "/** \n * Returns the maximum x-value in the dataset.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The maximum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getDomainBounds#576",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getDomainBounds(boolean)",
    "snippet": "public Range getDomainBounds(boolean includeInterval){\n  if (includeInterval) {\n    return this.intervalDelegate.getDomainBounds(includeInterval);\n  }\n else {\n    double lower\u003dDouble.POSITIVE_INFINITY;\n    double upper\u003dDouble.NEGATIVE_INFINITY;\n    int seriesCount\u003dgetSeriesCount();\n    for (int s\u003d0; s \u003c seriesCount; s++) {\n      XYSeries series\u003dgetSeries(s);\n      double minX\u003dseries.getMinX();\n      if (!Double.isNaN(minX)) {\n        lower\u003dMath.min(lower,minX);\n      }\n      double maxX\u003dseries.getMaxX();\n      if (!Double.isNaN(maxX)) {\n        upper\u003dMath.max(upper,maxX);\n      }\n    }\n    if (lower \u003e upper) {\n      return null;\n    }\n else {\n      return new Range(lower,upper);\n    }\n  }\n}",
    "begin_line": 576,
    "end_line": 602,
    "comment": "/** \n * Returns the range of the values in this dataset\u0027s domain.\n * @param includeInterval  a flag that determines whether or not thex-interval is taken into account.\n * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getIntervalWidth#610",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getIntervalWidth()",
    "snippet": "public double getIntervalWidth(){\n  return this.intervalDelegate.getIntervalWidth();\n}",
    "begin_line": 610,
    "end_line": 612,
    "comment": "/** \n * Returns the interval width. This is used to calculate the start and end x-values, if/when the dataset is used as an  {@link IntervalXYDataset}.\n * @return The interval width.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.setIntervalWidth#620",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.setIntervalWidth(double)",
    "snippet": "public void setIntervalWidth(double width){\n  if (width \u003c 0.0) {\n    throw new IllegalArgumentException(\"Negative \u0027width\u0027 argument.\");\n  }\n  this.intervalDelegate.setFixedIntervalWidth(width);\n  fireDatasetChanged();\n}",
    "begin_line": 620,
    "end_line": 626,
    "comment": "/** \n * Sets the interval width and sends a  {@link DatasetChangeEvent} to allregistered listeners.\n * @param width  the width (negative values not permitted).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getIntervalPositionFactor#633",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getIntervalPositionFactor()",
    "snippet": "public double getIntervalPositionFactor(){\n  return this.intervalDelegate.getIntervalPositionFactor();\n}",
    "begin_line": 633,
    "end_line": 635,
    "comment": "/** \n * Returns the interval position factor.\n * @return The interval position factor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.setIntervalPositionFactor#644",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.setIntervalPositionFactor(double)",
    "snippet": "public void setIntervalPositionFactor(double factor){\n  this.intervalDelegate.setIntervalPositionFactor(factor);\n  fireDatasetChanged();\n}",
    "begin_line": 644,
    "end_line": 647,
    "comment": "/** \n * Sets the interval position factor. This controls where the x-value is in relation to the interval surrounding the x-value (0.0 means the x-value will be positioned at the start, 0.5 in the middle, and 1.0 at the end).\n * @param factor  the factor.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.isAutoWidth#654",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.isAutoWidth()",
    "snippet": "public boolean isAutoWidth(){\n  return this.intervalDelegate.isAutoWidth();\n}",
    "begin_line": 654,
    "end_line": 656,
    "comment": "/** \n * Returns whether the interval width is automatically calculated or not.\n * @return Whether the width is automatically calculated or not.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.setAutoWidth#664",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.setAutoWidth(boolean)",
    "snippet": "public void setAutoWidth(boolean b){\n  this.intervalDelegate.setAutoWidth(b);\n  fireDatasetChanged();\n}",
    "begin_line": 664,
    "end_line": 667,
    "comment": "/** \n * Sets the flag that indicates wether the interval width is automatically calculated or not.\n * @param b  a boolean.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getRangeBounds#677",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getRangeBounds(boolean)",
    "snippet": "public Range getRangeBounds(boolean includeInterval){\n  double lower\u003dDouble.POSITIVE_INFINITY;\n  double upper\u003dDouble.NEGATIVE_INFINITY;\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    XYSeries series\u003dgetSeries(s);\n    double minY\u003dseries.getMinY();\n    if (!Double.isNaN(minY)) {\n      lower\u003dMath.min(lower,minY);\n    }\n    double maxY\u003dseries.getMaxY();\n    if (!Double.isNaN(maxY)) {\n      upper\u003dMath.max(upper,maxY);\n    }\n  }\n  if (lower \u003e upper) {\n    return null;\n  }\n else {\n    return new Range(lower,upper);\n  }\n}",
    "begin_line": 677,
    "end_line": 698,
    "comment": "/** \n * Returns the range of the values in this dataset\u0027s range.\n * @param includeInterval  ignored.\n * @return The range (or \u003ccode\u003enull\u003c/code\u003e if the dataset contains novalues).\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getRangeLowerBound#708",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getRangeLowerBound(boolean)",
    "snippet": "public double getRangeLowerBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    XYSeries series\u003dgetSeries(s);\n    double lowY\u003dseries.getMinY();\n    if (Double.isNaN(result)) {\n      result\u003dlowY;\n    }\n else {\n      if (!Double.isNaN(lowY)) {\n        result\u003dMath.min(result,lowY);\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 708,
    "end_line": 724,
    "comment": "/** \n * Returns the minimum y-value in the dataset.\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The minimum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  },
  {
    "name": "XYSeriesCollection.getRangeUpperBound#734",
    "is_bug": true,
    "src_path": "org/jfree/data/xy/XYSeriesCollection.java",
    "class_name": "org.jfree.data.xy.XYSeriesCollection",
    "signature": "org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound(boolean)",
    "snippet": "public double getRangeUpperBound(boolean includeInterval){\n  double result\u003dDouble.NaN;\n  int seriesCount\u003dgetSeriesCount();\n  for (int s\u003d0; s \u003c seriesCount; s++) {\n    XYSeries series\u003dgetSeries(s);\n    double hiY\u003dseries.getMaxY();\n    if (Double.isNaN(result)) {\n      result\u003dhiY;\n    }\n else {\n      if (!Double.isNaN(hiY)) {\n        result\u003dMath.max(result,hiY);\n      }\n    }\n  }\n  return result;\n}",
    "begin_line": 734,
    "end_line": 750,
    "comment": "/** \n * Returns the maximum y-value in the dataset.\n * @param includeInterval  a flag that determines whether or not they-interval is taken into account.\n * @return The maximum value.\n */\n",
    "resolved_comments": {},
    "susp": {
      "ochiai_susp": 0.5
    },
    "num_failing_tests": 0
  }
]