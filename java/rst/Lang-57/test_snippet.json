[
    [
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.LocaleUtilsTest(String name)",
            "snippet": "public LocaleUtilsTest(String name) {\nsuper(name);\n}",
            "begin_line": 56,
            "end_line": 58,
            "comment": "    \n     * Constructor.\n     * \n     * @param name\n     ",
            "child_ranges": [
                "(line 57,col 9)-(line 57,col 20)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.main(String[] args)",
            "snippet": "public static void main(String[] args) {\nTestRunner.run(suite());\n}",
            "begin_line": 64,
            "end_line": 66,
            "comment": "    \n     * Main.\n     * @param args\n     ",
            "child_ranges": [
                "(line 65,col 9)-(line 65,col 32)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.suite()",
            "snippet": "public static Test suite() {\nTestSuite suite = new TestSuite(LocaleUtilsTest.class);\nsuite.setName(\"LocaleUtilsTest Tests\");\nreturn suite;\n}",
            "begin_line": 72,
            "end_line": 76,
            "comment": "    \n     * Run the test cases as a suite.\n     * @return the Test\n     ",
            "child_ranges": [
                "(line 73,col 9)-(line 73,col 63)",
                "(line 74,col 9)-(line 74,col 47)",
                "(line 75,col 9)-(line 75,col 21)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testConstructor()",
            "snippet": "public void testConstructor() {\nassertNotNull(new LocaleUtils());\nConstructor[] cons = LocaleUtils.class.getDeclaredConstructors();\nassertEquals(1, cons.length);\nassertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\nassertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\nassertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n}",
            "begin_line": 89,
            "end_line": 96,
            "comment": "    \n     * Test that constructors are public, and work, etc.\n     ",
            "child_ranges": [
                "(line 90,col 9)-(line 90,col 41)",
                "(line 91,col 9)-(line 91,col 73)",
                "(line 92,col 9)-(line 92,col 37)",
                "(line 93,col 9)-(line 93,col 70)",
                "(line 94,col 9)-(line 94,col 80)",
                "(line 95,col 9)-(line 95,col 80)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(String language)",
            "snippet": "private void assertValidToLocale(String language) {\nLocale locale = LocaleUtils.toLocale(language);\nassertNotNull(\"valid locale\", locale);\nassertEquals(language, locale.getLanguage());\n//country and variant are empty",
            "begin_line": 104,
            "end_line": 108,
            "comment": "    \n     * Pass in a valid language, test toLocale.\n     *\n     * @param language  the language string\n     ",
            "child_ranges": [
                "(line 105,col 9)-(line 105,col 55)",
                "(line 106,col 9)-(line 106,col 46)",
                "(line 107,col 9)-(line 107,col 53)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertValidToLocale(String localeString, String language, String country)",
            "snippet": "private void assertValidToLocale(String localeString, String language, String country) {\nLocale locale = LocaleUtils.toLocale(localeString);\nassertNotNull(\"valid locale\", locale);\nassertEquals(language, locale.getLanguage());\nassertEquals(country, locale.getCountry());\n//variant is empty",
            "begin_line": 120,
            "end_line": 125,
            "comment": "    \n     * Pass in a valid language, test toLocale.\n     *\n     * @param localeString to pass to toLocale()\n     * @param language of the resulting Locale\n     * @param country of the resulting Locale\n     ",
            "child_ranges": [
                "(line 121,col 9)-(line 121,col 59)",
                "(line 122,col 9)-(line 122,col 46)",
                "(line 123,col 9)-(line 123,col 53)",
                "(line 124,col 9)-(line 124,col 51)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_1Part()",
            "snippet": "public void testToLocale_1Part() {\nassertEquals(null, LocaleUtils.toLocale((String) null));\n\nassertValidToLocale(\"us\");\nassertValidToLocale(\"fr\");\nassertValidToLocale(\"de\");\nassertValidToLocale(\"zh\");\n// Valid format but lang doesnt exist, should make instance anyway",
            "begin_line": 151,
            "end_line": 158,
            "comment": "    \n     * Test toLocale() method.\n     ",
            "child_ranges": [
                "(line 152,col 9)-(line 152,col 64)",
                "(line 153,col 0)-(line 153,col 8)",
                "(line 154,col 9)-(line 154,col 34)",
                "(line 155,col 9)-(line 155,col 34)",
                "(line 156,col 9)-(line 156,col 34)",
                "(line 157,col 9)-(line 157,col 34)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_2Part()",
            "snippet": "public void testToLocale_2Part() {\nassertValidToLocale(\"us_EN\", \"us\", \"EN\");\n//valid though doesnt exist",
            "begin_line": 197,
            "end_line": 199,
            "comment": "    \n     * Test toLocale() method.\n     ",
            "child_ranges": [
                "(line 198,col 9)-(line 198,col 49)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testToLocale_3Part()",
            "snippet": "public void testToLocale_3Part() {\nassertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n// this isn't pretty, but was caused by a jdk bug it seems",
            "begin_line": 231,
            "end_line": 233,
            "comment": "    \n     * Test toLocale() method.\n     ",
            "child_ranges": [
                "(line 232,col 9)-(line 232,col 56)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected)",
            "snippet": "private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\nList localeList = defaultLocale == null ?",
            "begin_line": 261,
            "end_line": 262,
            "comment": "    \n     * Helper method for local lookups.\n     *\n     * @param locale  the input locale\n     * @param defaultLocale  the input default locale\n     * @param expected  expected results\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_Locale()",
            "snippet": "public void testLocaleLookupList_Locale() {\nassertLocaleLookupList(null, null, new Locale[0]);\nassertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\nassertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\nassertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\nassertLocaleLookupList(LOCALE_EN_US, null,",
            "begin_line": 275,
            "end_line": 280,
            "comment": "    \n     * Test localeLookupList() method.\n     ",
            "child_ranges": [
                "(line 276,col 9)-(line 276,col 58)",
                "(line 277,col 9)-(line 277,col 73)",
                "(line 278,col 9)-(line 278,col 73)",
                "(line 279,col 9)-(line 279,col 73)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testLocaleLookupList_LocaleLocale()",
            "snippet": "public void testLocaleLookupList_LocaleLocale() {\nassertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,",
            "begin_line": 294,
            "end_line": 295,
            "comment": "    \n     * Test localeLookupList() method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleList()",
            "snippet": "public void testAvailableLocaleList() {\nList list = LocaleUtils.availableLocaleList();\nList list2 = LocaleUtils.availableLocaleList();\nassertNotNull(list);\nassertSame(list, list2);\nassertUnmodifiableCollection(list);\n\nLocale[] jdkLocaleArray = Locale.getAvailableLocales();\nList jdkLocaleList = Arrays.asList(jdkLocaleArray);\nassertEquals(jdkLocaleList, list);\n}",
            "begin_line": 348,
            "end_line": 358,
            "comment": "    \n     * Test availableLocaleList() method.\n     ",
            "child_ranges": [
                "(line 349,col 9)-(line 349,col 54)",
                "(line 350,col 9)-(line 350,col 55)",
                "(line 351,col 9)-(line 351,col 28)",
                "(line 352,col 9)-(line 352,col 32)",
                "(line 353,col 9)-(line 353,col 43)",
                "(line 354,col 0)-(line 354,col 8)",
                "(line 355,col 9)-(line 355,col 63)",
                "(line 356,col 9)-(line 356,col 59)",
                "(line 357,col 9)-(line 357,col 42)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testAvailableLocaleSet()",
            "snippet": "public void testAvailableLocaleSet() {\nSet set = LocaleUtils.availableLocaleSet();\nSet set2 = LocaleUtils.availableLocaleSet();\nassertNotNull(set);\nassertSame(set, set2);\nassertUnmodifiableCollection(set);\n\nLocale[] jdkLocaleArray = Locale.getAvailableLocales();\nList jdkLocaleList = Arrays.asList(jdkLocaleArray);\nSet jdkLocaleSet = new HashSet(jdkLocaleList);\nassertEquals(jdkLocaleSet, set);\n}",
            "begin_line": 364,
            "end_line": 375,
            "comment": "    \n     * Test availableLocaleSet() method.\n     ",
            "child_ranges": [
                "(line 365,col 9)-(line 365,col 51)",
                "(line 366,col 9)-(line 366,col 52)",
                "(line 367,col 9)-(line 367,col 27)",
                "(line 368,col 9)-(line 368,col 30)",
                "(line 369,col 9)-(line 369,col 42)",
                "(line 370,col 0)-(line 370,col 8)",
                "(line 371,col 9)-(line 371,col 63)",
                "(line 372,col 9)-(line 372,col 59)",
                "(line 373,col 9)-(line 373,col 54)",
                "(line 374,col 9)-(line 374,col 40)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testIsAvailableLocale()",
            "snippet": "public void testIsAvailableLocale() {\nSet set = LocaleUtils.availableLocaleSet();\nassertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\nassertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\nassertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\nassertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\nassertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\nassertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\nassertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n}",
            "begin_line": 381,
            "end_line": 390,
            "comment": "    \n     * Test availableLocaleSet() method.\n     ",
            "child_ranges": [
                "(line 382,col 9)-(line 382,col 51)",
                "(line 383,col 9)-(line 383,col 88)",
                "(line 384,col 9)-(line 384,col 94)",
                "(line 385,col 9)-(line 385,col 104)",
                "(line 386,col 9)-(line 386,col 88)",
                "(line 387,col 9)-(line 387,col 94)",
                "(line 388,col 9)-(line 388,col 88)",
                "(line 389,col 9)-(line 389,col 94)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertLanguageByCountry(String country, String[] languages)",
            "snippet": "private void assertLanguageByCountry(String country, String[] languages) {\nList list = LocaleUtils.languagesByCountry(country);\nList list2 = LocaleUtils.languagesByCountry(country);\nassertNotNull(list);\nassertSame(list, list2);\nassertEquals(languages.length, list.size());\n//search through langauges",
            "begin_line": 399,
            "end_line": 405,
            "comment": "    \n     * Make sure the language by country is correct.\n     *\n     * @param country\n     * @param languages array of languages that should be returned\n     ",
            "child_ranges": [
                "(line 400,col 9)-(line 400,col 60)",
                "(line 401,col 9)-(line 401,col 61)",
                "(line 402,col 9)-(line 402,col 28)",
                "(line 403,col 9)-(line 403,col 32)",
                "(line 404,col 9)-(line 404,col 52)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testLanguagesByCountry()",
            "snippet": "public void testLanguagesByCountry() {\nassertLanguageByCountry(null, new String[0]);\nassertLanguageByCountry(\"GB\", new String[]{\"en\"});\nassertLanguageByCountry(\"ZZ\", new String[0]);\nassertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n}",
            "begin_line": 432,
            "end_line": 437,
            "comment": "    \n     * Test languagesByCountry() method.\n     ",
            "child_ranges": [
                "(line 433,col 9)-(line 433,col 53)",
                "(line 434,col 9)-(line 434,col 58)",
                "(line 435,col 9)-(line 435,col 53)",
                "(line 436,col 9)-(line 436,col 70)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertCountriesByLanguage(String language, String[] countries)",
            "snippet": "private void assertCountriesByLanguage(String language, String[] countries) {\nList list = LocaleUtils.countriesByLanguage(language);\nList list2 = LocaleUtils.countriesByLanguage(language);\nassertNotNull(list);\nassertSame(list, list2);\nassertEquals(countries.length, list.size());\n//search through langauges",
            "begin_line": 446,
            "end_line": 452,
            "comment": "    \n     * Make sure the language by country is correct.\n     *\n     * @param language\n     * @param countries array of countries that should be returned\n     ",
            "child_ranges": [
                "(line 447,col 9)-(line 447,col 62)",
                "(line 448,col 9)-(line 448,col 63)",
                "(line 449,col 9)-(line 449,col 28)",
                "(line 450,col 9)-(line 450,col 32)",
                "(line 451,col 9)-(line 451,col 52)"
            ]
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.testCountriesByLanguage()",
            "snippet": "public void testCountriesByLanguage() {}\n// Defects4J: flaky method",
            "begin_line": 479,
            "end_line": 480,
            "comment": "    \n     * Test languagesByCountry() method.\n     ",
            "child_ranges": []
        },
        {
            "class_name": "org.apache.commons.lang.LocaleUtilsTest",
            "child_classes": [],
            "src_path": "src/test/org/apache/commons/lang/LocaleUtilsTest.java",
            "signature": "org.apache.commons.lang.LocaleUtilsTest.assertUnmodifiableCollection(Collection coll)",
            "snippet": "private static void assertUnmodifiableCollection(Collection coll) {\ntry {",
            "begin_line": 491,
            "end_line": 492,
            "comment": "    \n     * @param coll  the collection to check\n     ",
            "child_ranges": []
        }
    ]
]